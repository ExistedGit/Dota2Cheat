// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "valveextensions.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
#include "econ_gcmessages.pb.h"
#include "network_connection.pb.h"
#include "dota_gcmessages_common_lobby.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
#include "gcsdk_gcmessages.pb.h"
#include "steammessages_steamlearn.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fserver_2eproto;
class CMsgAbilitySelectionSteamMLEntry;
struct CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal;
extern CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal _CMsgAbilitySelectionSteamMLEntry_default_instance_;
class CMsgCheerConfig;
struct CMsgCheerConfigDefaultTypeInternal;
extern CMsgCheerConfigDefaultTypeInternal _CMsgCheerConfig_default_instance_;
class CMsgCheerState;
struct CMsgCheerStateDefaultTypeInternal;
extern CMsgCheerStateDefaultTypeInternal _CMsgCheerState_default_instance_;
class CMsgCheerTypeState;
struct CMsgCheerTypeStateDefaultTypeInternal;
extern CMsgCheerTypeStateDefaultTypeInternal _CMsgCheerTypeState_default_instance_;
class CMsgConnectedPlayers;
struct CMsgConnectedPlayersDefaultTypeInternal;
extern CMsgConnectedPlayersDefaultTypeInternal _CMsgConnectedPlayers_default_instance_;
class CMsgConnectedPlayers_Player;
struct CMsgConnectedPlayers_PlayerDefaultTypeInternal;
extern CMsgConnectedPlayers_PlayerDefaultTypeInternal _CMsgConnectedPlayers_Player_default_instance_;
class CMsgDOTAAwardEventPoints;
struct CMsgDOTAAwardEventPointsDefaultTypeInternal;
extern CMsgDOTAAwardEventPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_default_instance_;
class CMsgDOTAAwardEventPoints_AwardPoints;
struct CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal;
extern CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
class CMsgDOTAFantasyFinalPlayerStats;
struct CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyFinalPlayerStats_default_instance_;
class CMsgDOTAFantasyLivePlayerStats;
struct CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal _CMsgDOTAFantasyLivePlayerStats_default_instance_;
class CMsgDOTALiveScoreboardUpdate;
struct CMsgDOTALiveScoreboardUpdateDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdateDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team;
struct CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_Player;
struct CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility;
struct CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal;
extern CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
class CMsgDOTAPlayerFailedToConnect;
struct CMsgDOTAPlayerFailedToConnectDefaultTypeInternal;
extern CMsgDOTAPlayerFailedToConnectDefaultTypeInternal _CMsgDOTAPlayerFailedToConnect_default_instance_;
class CMsgDetailedGameStats;
struct CMsgDetailedGameStatsDefaultTypeInternal;
extern CMsgDetailedGameStatsDefaultTypeInternal _CMsgDetailedGameStats_default_instance_;
class CMsgDetailedGameStats_GameStats;
struct CMsgDetailedGameStats_GameStatsDefaultTypeInternal;
extern CMsgDetailedGameStats_GameStatsDefaultTypeInternal _CMsgDetailedGameStats_GameStats_default_instance_;
class CMsgDetailedGameStats_MinuteEntry;
struct CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal;
extern CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal _CMsgDetailedGameStats_MinuteEntry_default_instance_;
class CMsgDetailedGameStats_PlayerInfo;
struct CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal;
extern CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal _CMsgDetailedGameStats_PlayerInfo_default_instance_;
class CMsgDetailedGameStats_PlayerStatEntry;
struct CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal;
extern CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal _CMsgDetailedGameStats_PlayerStatEntry_default_instance_;
class CMsgGCBanStatusRequest;
struct CMsgGCBanStatusRequestDefaultTypeInternal;
extern CMsgGCBanStatusRequestDefaultTypeInternal _CMsgGCBanStatusRequest_default_instance_;
class CMsgGCBanStatusResponse;
struct CMsgGCBanStatusResponseDefaultTypeInternal;
extern CMsgGCBanStatusResponseDefaultTypeInternal _CMsgGCBanStatusResponse_default_instance_;
class CMsgGCGCToLANServerRelayConnect;
struct CMsgGCGCToLANServerRelayConnectDefaultTypeInternal;
extern CMsgGCGCToLANServerRelayConnectDefaultTypeInternal _CMsgGCGCToLANServerRelayConnect_default_instance_;
class CMsgGCToGCCompendiumInGamePredictionResults;
struct CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal;
extern CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgGCToRelayConnect;
struct CMsgGCToRelayConnectDefaultTypeInternal;
extern CMsgGCToRelayConnectDefaultTypeInternal _CMsgGCToRelayConnect_default_instance_;
class CMsgGCToServerCheerConfig;
struct CMsgGCToServerCheerConfigDefaultTypeInternal;
extern CMsgGCToServerCheerConfigDefaultTypeInternal _CMsgGCToServerCheerConfig_default_instance_;
class CMsgGCToServerCheerData;
struct CMsgGCToServerCheerDataDefaultTypeInternal;
extern CMsgGCToServerCheerDataDefaultTypeInternal _CMsgGCToServerCheerData_default_instance_;
class CMsgGCToServerCheerData_CheerTypeCount;
struct CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal;
extern CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal _CMsgGCToServerCheerData_CheerTypeCount_default_instance_;
class CMsgGCToServerCheerScalesOverride;
struct CMsgGCToServerCheerScalesOverrideDefaultTypeInternal;
extern CMsgGCToServerCheerScalesOverrideDefaultTypeInternal _CMsgGCToServerCheerScalesOverride_default_instance_;
class CMsgGCToServerGetCheerState;
struct CMsgGCToServerGetCheerStateDefaultTypeInternal;
extern CMsgGCToServerGetCheerStateDefaultTypeInternal _CMsgGCToServerGetCheerState_default_instance_;
class CMsgGCToServerLobbyHeroBanRates;
struct CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal;
extern CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_default_instance_;
class CMsgGCToServerLobbyHeroBanRates_HeroBanEntry;
struct CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal;
extern CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_;
class CMsgGCToServerPingRequest;
struct CMsgGCToServerPingRequestDefaultTypeInternal;
extern CMsgGCToServerPingRequestDefaultTypeInternal _CMsgGCToServerPingRequest_default_instance_;
class CMsgGCToServerPingResponse;
struct CMsgGCToServerPingResponseDefaultTypeInternal;
extern CMsgGCToServerPingResponseDefaultTypeInternal _CMsgGCToServerPingResponse_default_instance_;
class CMsgGCToServerPredictionResult;
struct CMsgGCToServerPredictionResultDefaultTypeInternal;
extern CMsgGCToServerPredictionResultDefaultTypeInternal _CMsgGCToServerPredictionResult_default_instance_;
class CMsgGCToServerPredictionResult_Prediction;
struct CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal;
extern CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal _CMsgGCToServerPredictionResult_Prediction_default_instance_;
class CMsgGCToServerRealtimeStatsStartStop;
struct CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal;
extern CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal _CMsgGCToServerRealtimeStatsStartStop_default_instance_;
class CMsgGCToServerRecordTrainingData;
struct CMsgGCToServerRecordTrainingDataDefaultTypeInternal;
extern CMsgGCToServerRecordTrainingDataDefaultTypeInternal _CMsgGCToServerRecordTrainingData_default_instance_;
class CMsgGCToServerSetSteamLearnDisable;
struct CMsgGCToServerSetSteamLearnDisableDefaultTypeInternal;
extern CMsgGCToServerSetSteamLearnDisableDefaultTypeInternal _CMsgGCToServerSetSteamLearnDisable_default_instance_;
class CMsgGCToServerSetSteamLearnKeysChanged;
struct CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal;
extern CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal _CMsgGCToServerSetSteamLearnKeysChanged_default_instance_;
class CMsgGCToServerUpdateSteamBroadcasting;
struct CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal;
extern CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal _CMsgGCToServerUpdateSteamBroadcasting_default_instance_;
class CMsgGCtoServerTensorflowInstance;
struct CMsgGCtoServerTensorflowInstanceDefaultTypeInternal;
extern CMsgGCtoServerTensorflowInstanceDefaultTypeInternal _CMsgGCtoServerTensorflowInstance_default_instance_;
class CMsgGameMatchSignOut;
struct CMsgGameMatchSignOutDefaultTypeInternal;
extern CMsgGameMatchSignOutDefaultTypeInternal _CMsgGameMatchSignOut_default_instance_;
class CMsgGameMatchSignOutBanData;
struct CMsgGameMatchSignOutBanDataDefaultTypeInternal;
extern CMsgGameMatchSignOutBanDataDefaultTypeInternal _CMsgGameMatchSignOutBanData_default_instance_;
class CMsgGameMatchSignOutEventGameData;
struct CMsgGameMatchSignOutEventGameDataDefaultTypeInternal;
extern CMsgGameMatchSignOutEventGameDataDefaultTypeInternal _CMsgGameMatchSignOutEventGameData_default_instance_;
class CMsgGameMatchSignOutPerfData;
struct CMsgGameMatchSignOutPerfDataDefaultTypeInternal;
extern CMsgGameMatchSignOutPerfDataDefaultTypeInternal _CMsgGameMatchSignOutPerfData_default_instance_;
class CMsgGameMatchSignOutPermissionRequest;
struct CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal;
extern CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal _CMsgGameMatchSignOutPermissionRequest_default_instance_;
class CMsgGameMatchSignOutPermissionResponse;
struct CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal;
extern CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal _CMsgGameMatchSignOutPermissionResponse_default_instance_;
class CMsgGameMatchSignOut_CAdditionalSignoutMsg;
struct CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal;
extern CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
class CMsgGameMatchSignOut_CCustomGameData;
struct CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal;
extern CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_CSocialFeedMatchEvent;
struct CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal;
extern CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
class CMsgGameMatchSignOut_CTeam;
struct CMsgGameMatchSignOut_CTeamDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeamDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer;
struct CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData;
struct CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
class CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived;
struct CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal;
extern CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_;
class CMsgGameMatchSignOut_EventGameLeaderboardEntry;
struct CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal;
extern CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
class CMsgGameMatchSignOut_WardPlacement;
struct CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal;
extern CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal _CMsgGameMatchSignOut_WardPlacement_default_instance_;
class CMsgGameMatchSignoutResponse;
struct CMsgGameMatchSignoutResponseDefaultTypeInternal;
extern CMsgGameMatchSignoutResponseDefaultTypeInternal _CMsgGameMatchSignoutResponse_default_instance_;
class CMsgGameMatchSignoutResponse_PlayerMetadata;
struct CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal;
extern CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
class CMsgGameServerGetLoadGame;
struct CMsgGameServerGetLoadGameDefaultTypeInternal;
extern CMsgGameServerGetLoadGameDefaultTypeInternal _CMsgGameServerGetLoadGame_default_instance_;
class CMsgGameServerGetLoadGameResult;
struct CMsgGameServerGetLoadGameResultDefaultTypeInternal;
extern CMsgGameServerGetLoadGameResultDefaultTypeInternal _CMsgGameServerGetLoadGameResult_default_instance_;
class CMsgGameServerInfo;
struct CMsgGameServerInfoDefaultTypeInternal;
extern CMsgGameServerInfoDefaultTypeInternal _CMsgGameServerInfo_default_instance_;
class CMsgGameServerSaveGameResult;
struct CMsgGameServerSaveGameResultDefaultTypeInternal;
extern CMsgGameServerSaveGameResultDefaultTypeInternal _CMsgGameServerSaveGameResult_default_instance_;
class CMsgGameServerUploadSaveGame;
struct CMsgGameServerUploadSaveGameDefaultTypeInternal;
extern CMsgGameServerUploadSaveGameDefaultTypeInternal _CMsgGameServerUploadSaveGame_default_instance_;
class CMsgGameserverCrash;
struct CMsgGameserverCrashDefaultTypeInternal;
extern CMsgGameserverCrashDefaultTypeInternal _CMsgGameserverCrash_default_instance_;
class CMsgItemPurchasePregameSteamMLEntry;
struct CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal;
extern CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal _CMsgItemPurchasePregameSteamMLEntry_default_instance_;
class CMsgItemPurchaseSequenceSteamMLEntry;
struct CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal;
extern CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSequenceSteamMLEntry_default_instance_;
class CMsgItemPurchaseSteamMLEntry;
struct CMsgItemPurchaseSteamMLEntryDefaultTypeInternal;
extern CMsgItemPurchaseSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSteamMLEntry_default_instance_;
class CMsgLaneSelectionSteamMLEntry;
struct CMsgLaneSelectionSteamMLEntryDefaultTypeInternal;
extern CMsgLaneSelectionSteamMLEntryDefaultTypeInternal _CMsgLaneSelectionSteamMLEntry_default_instance_;
class CMsgLeaverDetected;
struct CMsgLeaverDetectedDefaultTypeInternal;
extern CMsgLeaverDetectedDefaultTypeInternal _CMsgLeaverDetected_default_instance_;
class CMsgLeaverDetectedResponse;
struct CMsgLeaverDetectedResponseDefaultTypeInternal;
extern CMsgLeaverDetectedResponseDefaultTypeInternal _CMsgLeaverDetectedResponse_default_instance_;
class CMsgMatchDiretideCandy;
struct CMsgMatchDiretideCandyDefaultTypeInternal;
extern CMsgMatchDiretideCandyDefaultTypeInternal _CMsgMatchDiretideCandy_default_instance_;
class CMsgMatchDiretideCandy_CandyDetails;
struct CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal;
extern CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal _CMsgMatchDiretideCandy_CandyDetails_default_instance_;
class CMsgMatchDiretideCandy_PlayerCandy;
struct CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal;
extern CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal _CMsgMatchDiretideCandy_PlayerCandy_default_instance_;
class CMsgMatchStateSteamMLEntry;
struct CMsgMatchStateSteamMLEntryDefaultTypeInternal;
extern CMsgMatchStateSteamMLEntryDefaultTypeInternal _CMsgMatchStateSteamMLEntry_default_instance_;
class CMsgNeutralItemStats;
struct CMsgNeutralItemStatsDefaultTypeInternal;
extern CMsgNeutralItemStatsDefaultTypeInternal _CMsgNeutralItemStats_default_instance_;
class CMsgNeutralItemStats_NeutralItem;
struct CMsgNeutralItemStats_NeutralItemDefaultTypeInternal;
extern CMsgNeutralItemStats_NeutralItemDefaultTypeInternal _CMsgNeutralItemStats_NeutralItem_default_instance_;
class CMsgPoorNetworkConditions;
struct CMsgPoorNetworkConditionsDefaultTypeInternal;
extern CMsgPoorNetworkConditionsDefaultTypeInternal _CMsgPoorNetworkConditions_default_instance_;
class CMsgPoorNetworkConditions_Player;
struct CMsgPoorNetworkConditions_PlayerDefaultTypeInternal;
extern CMsgPoorNetworkConditions_PlayerDefaultTypeInternal _CMsgPoorNetworkConditions_Player_default_instance_;
class CMsgResponseTeamFanfare;
struct CMsgResponseTeamFanfareDefaultTypeInternal;
extern CMsgResponseTeamFanfareDefaultTypeInternal _CMsgResponseTeamFanfare_default_instance_;
class CMsgServerGCUpdateSpectatorCount;
struct CMsgServerGCUpdateSpectatorCountDefaultTypeInternal;
extern CMsgServerGCUpdateSpectatorCountDefaultTypeInternal _CMsgServerGCUpdateSpectatorCount_default_instance_;
class CMsgServerToGCCavernCrawlIsHeroActive;
struct CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal;
extern CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActive_default_instance_;
class CMsgServerToGCCavernCrawlIsHeroActiveResponse;
struct CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal;
extern CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_;
class CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults;
struct CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal;
extern CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVoting;
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal;
extern CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse;
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal;
extern CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
class CMsgServerToGCCompendiumChosenInGamePredictions;
struct CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal;
extern CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_;
class CMsgServerToGCCompendiumChosenInGamePredictions_Prediction;
struct CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal;
extern CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResults;
struct CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal;
extern CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult;
struct CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal;
extern CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
class CMsgServerToGCGetCheerConfig;
struct CMsgServerToGCGetCheerConfigDefaultTypeInternal;
extern CMsgServerToGCGetCheerConfigDefaultTypeInternal _CMsgServerToGCGetCheerConfig_default_instance_;
class CMsgServerToGCGetCheerConfigResponse;
struct CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal;
extern CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal _CMsgServerToGCGetCheerConfigResponse_default_instance_;
class CMsgServerToGCGetGuildContracts;
struct CMsgServerToGCGetGuildContractsDefaultTypeInternal;
extern CMsgServerToGCGetGuildContractsDefaultTypeInternal _CMsgServerToGCGetGuildContracts_default_instance_;
class CMsgServerToGCGetGuildContractsResponse;
struct CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal;
extern CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_default_instance_;
class CMsgServerToGCGetGuildContractsResponse_ContractDetails;
struct CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal;
extern CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_;
class CMsgServerToGCGetGuildContractsResponse_Player;
struct CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal;
extern CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_Player_default_instance_;
class CMsgServerToGCGetStickerHeroes;
struct CMsgServerToGCGetStickerHeroesDefaultTypeInternal;
extern CMsgServerToGCGetStickerHeroesDefaultTypeInternal _CMsgServerToGCGetStickerHeroes_default_instance_;
class CMsgServerToGCGetStickerHeroesResponse;
struct CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal;
extern CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal _CMsgServerToGCGetStickerHeroesResponse_default_instance_;
class CMsgServerToGCGetStickerHeroesResponse_Player;
struct CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal;
extern CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal _CMsgServerToGCGetStickerHeroesResponse_Player_default_instance_;
class CMsgServerToGCKillSummaries;
struct CMsgServerToGCKillSummariesDefaultTypeInternal;
extern CMsgServerToGCKillSummariesDefaultTypeInternal _CMsgServerToGCKillSummaries_default_instance_;
class CMsgServerToGCKillSummaries_KillSummary;
struct CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal;
extern CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal _CMsgServerToGCKillSummaries_KillSummary_default_instance_;
class CMsgServerToGCLockCharmTrading;
struct CMsgServerToGCLockCharmTradingDefaultTypeInternal;
extern CMsgServerToGCLockCharmTradingDefaultTypeInternal _CMsgServerToGCLockCharmTrading_default_instance_;
class CMsgServerToGCMatchConnectionStats;
struct CMsgServerToGCMatchConnectionStatsDefaultTypeInternal;
extern CMsgServerToGCMatchConnectionStatsDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_default_instance_;
class CMsgServerToGCMatchConnectionStats_Player;
struct CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal;
extern CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_Player_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory;
struct CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase;
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
class CMsgServerToGCMatchPlayerItemPurchaseHistory_Player;
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
class CMsgServerToGCMatchPlayerNeutralItemEquipHistory;
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_;
class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip;
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_;
class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player;
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal;
extern CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_;
class CMsgServerToGCMatchStateHistory;
struct CMsgServerToGCMatchStateHistoryDefaultTypeInternal;
extern CMsgServerToGCMatchStateHistoryDefaultTypeInternal _CMsgServerToGCMatchStateHistory_default_instance_;
class CMsgServerToGCMatchStateHistory_MatchState;
struct CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal;
extern CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_MatchState_default_instance_;
class CMsgServerToGCMatchStateHistory_PlayerState;
struct CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal;
extern CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_PlayerState_default_instance_;
class CMsgServerToGCMatchStateHistory_TeamState;
struct CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal;
extern CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_TeamState_default_instance_;
class CMsgServerToGCPlayerChallengeHistory;
struct CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal;
extern CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_default_instance_;
class CMsgServerToGCPlayerChallengeHistory_PlayerChallenge;
struct CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal;
extern CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_;
class CMsgServerToGCRealtimeStats;
struct CMsgServerToGCRealtimeStatsDefaultTypeInternal;
extern CMsgServerToGCRealtimeStatsDefaultTypeInternal _CMsgServerToGCRealtimeStats_default_instance_;
class CMsgServerToGCReportCheerState;
struct CMsgServerToGCReportCheerStateDefaultTypeInternal;
extern CMsgServerToGCReportCheerStateDefaultTypeInternal _CMsgServerToGCReportCheerState_default_instance_;
class CMsgServerToGCRequestBatchPlayerResources;
struct CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal;
extern CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResources_default_instance_;
class CMsgServerToGCRequestBatchPlayerResourcesResponse;
struct CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal;
extern CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_;
class CMsgServerToGCRequestBatchPlayerResourcesResponse_Result;
struct CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal;
extern CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_;
class CMsgServerToGCRequestStatus;
struct CMsgServerToGCRequestStatusDefaultTypeInternal;
extern CMsgServerToGCRequestStatusDefaultTypeInternal _CMsgServerToGCRequestStatus_default_instance_;
class CMsgServerToGCRequestStatus_Response;
struct CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal;
extern CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal _CMsgServerToGCRequestStatus_Response_default_instance_;
class CMsgServerToGCRerollPlayerChallenge;
struct CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal;
extern CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal _CMsgServerToGCRerollPlayerChallenge_default_instance_;
class CMsgServerToGCVictoryPredictions;
struct CMsgServerToGCVictoryPredictionsDefaultTypeInternal;
extern CMsgServerToGCVictoryPredictionsDefaultTypeInternal _CMsgServerToGCVictoryPredictions_default_instance_;
class CMsgServerToGCVictoryPredictions_Record;
struct CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal;
extern CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal _CMsgServerToGCVictoryPredictions_Record_default_instance_;
class CMsgSignOutAssassinMiniGameInfo;
struct CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal;
extern CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal _CMsgSignOutAssassinMiniGameInfo_default_instance_;
class CMsgSignOutBotInfo;
struct CMsgSignOutBotInfoDefaultTypeInternal;
extern CMsgSignOutBotInfoDefaultTypeInternal _CMsgSignOutBotInfo_default_instance_;
class CMsgSignOutBounties;
struct CMsgSignOutBountiesDefaultTypeInternal;
extern CMsgSignOutBountiesDefaultTypeInternal _CMsgSignOutBounties_default_instance_;
class CMsgSignOutBounties_Bounty;
struct CMsgSignOutBounties_BountyDefaultTypeInternal;
extern CMsgSignOutBounties_BountyDefaultTypeInternal _CMsgSignOutBounties_Bounty_default_instance_;
class CMsgSignOutCommunicationSummary;
struct CMsgSignOutCommunicationSummaryDefaultTypeInternal;
extern CMsgSignOutCommunicationSummaryDefaultTypeInternal _CMsgSignOutCommunicationSummary_default_instance_;
class CMsgSignOutCommunicationSummary_PlayerCommunication;
struct CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal;
extern CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
class CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail;
struct CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal;
extern CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_;
class CMsgSignOutCommunityGoalProgress;
struct CMsgSignOutCommunityGoalProgressDefaultTypeInternal;
extern CMsgSignOutCommunityGoalProgressDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_default_instance_;
class CMsgSignOutCommunityGoalProgress_EventGoalIncrement;
struct CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal;
extern CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
class CMsgSignOutDraftInfo;
struct CMsgSignOutDraftInfoDefaultTypeInternal;
extern CMsgSignOutDraftInfoDefaultTypeInternal _CMsgSignOutDraftInfo_default_instance_;
class CMsgSignOutGameplayStats;
struct CMsgSignOutGameplayStatsDefaultTypeInternal;
extern CMsgSignOutGameplayStatsDefaultTypeInternal _CMsgSignOutGameplayStats_default_instance_;
class CMsgSignOutGameplayStats_CPlayer;
struct CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal;
extern CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal _CMsgSignOutGameplayStats_CPlayer_default_instance_;
class CMsgSignOutGameplayStats_CTeam;
struct CMsgSignOutGameplayStats_CTeamDefaultTypeInternal;
extern CMsgSignOutGameplayStats_CTeamDefaultTypeInternal _CMsgSignOutGameplayStats_CTeam_default_instance_;
class CMsgSignOutGuildChallengeProgress;
struct CMsgSignOutGuildChallengeProgressDefaultTypeInternal;
extern CMsgSignOutGuildChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_default_instance_;
class CMsgSignOutGuildChallengeProgress_ChallengeProgress;
struct CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal;
extern CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_;
class CMsgSignOutGuildContractProgress;
struct CMsgSignOutGuildContractProgressDefaultTypeInternal;
extern CMsgSignOutGuildContractProgressDefaultTypeInternal _CMsgSignOutGuildContractProgress_default_instance_;
class CMsgSignOutGuildContractProgress_CompletedGuildEventContracts;
struct CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal;
extern CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal _CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_;
class CMsgSignOutGuildContractProgress_PlayerContract;
struct CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal;
extern CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal _CMsgSignOutGuildContractProgress_PlayerContract_default_instance_;
class CMsgSignOutMVPStats;
struct CMsgSignOutMVPStatsDefaultTypeInternal;
extern CMsgSignOutMVPStatsDefaultTypeInternal _CMsgSignOutMVPStats_default_instance_;
class CMsgSignOutMVPStats_Player;
struct CMsgSignOutMVPStats_PlayerDefaultTypeInternal;
extern CMsgSignOutMVPStats_PlayerDefaultTypeInternal _CMsgSignOutMVPStats_Player_default_instance_;
class CMsgSignOutMVPStats_Player_KillEaterEvent;
struct CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal;
extern CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal _CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_;
class CMsgSignOutMuertaMinigame;
struct CMsgSignOutMuertaMinigameDefaultTypeInternal;
extern CMsgSignOutMuertaMinigameDefaultTypeInternal _CMsgSignOutMuertaMinigame_default_instance_;
class CMsgSignOutPlayerStats;
struct CMsgSignOutPlayerStatsDefaultTypeInternal;
extern CMsgSignOutPlayerStatsDefaultTypeInternal _CMsgSignOutPlayerStats_default_instance_;
class CMsgSignOutTextMuteInfo;
struct CMsgSignOutTextMuteInfoDefaultTypeInternal;
extern CMsgSignOutTextMuteInfoDefaultTypeInternal _CMsgSignOutTextMuteInfo_default_instance_;
class CMsgSignOutTextMuteInfo_TextMuteMessage;
struct CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal;
extern CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal _CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_;
class CMsgSignOutUpdatePlayerChallenge;
struct CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal;
extern CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_default_instance_;
class CMsgSignOutUpdatePlayerChallenge_Challenge;
struct CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal;
extern CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
class CMsgSignOutXPCoins;
struct CMsgSignOutXPCoinsDefaultTypeInternal;
extern CMsgSignOutXPCoinsDefaultTypeInternal _CMsgSignOutXPCoins_default_instance_;
class CMsgSignOutXPCoins_Player;
struct CMsgSignOutXPCoins_PlayerDefaultTypeInternal;
extern CMsgSignOutXPCoins_PlayerDefaultTypeInternal _CMsgSignOutXPCoins_Player_default_instance_;
class CMsgSpendWager;
struct CMsgSpendWagerDefaultTypeInternal;
extern CMsgSpendWagerDefaultTypeInternal _CMsgSpendWager_default_instance_;
class CMsgSpendWager_Player;
struct CMsgSpendWager_PlayerDefaultTypeInternal;
extern CMsgSpendWager_PlayerDefaultTypeInternal _CMsgSpendWager_Player_default_instance_;
class CMsgSteamLearnAbilitySkill;
struct CMsgSteamLearnAbilitySkillDefaultTypeInternal;
extern CMsgSteamLearnAbilitySkillDefaultTypeInternal _CMsgSteamLearnAbilitySkill_default_instance_;
class CMsgSteamLearnItemPurchase;
struct CMsgSteamLearnItemPurchaseDefaultTypeInternal;
extern CMsgSteamLearnItemPurchaseDefaultTypeInternal _CMsgSteamLearnItemPurchase_default_instance_;
class CMsgSteamLearnMatchHero;
struct CMsgSteamLearnMatchHeroDefaultTypeInternal;
extern CMsgSteamLearnMatchHeroDefaultTypeInternal _CMsgSteamLearnMatchHero_default_instance_;
class CMsgSteamLearnMatchHeroes;
struct CMsgSteamLearnMatchHeroesDefaultTypeInternal;
extern CMsgSteamLearnMatchHeroesDefaultTypeInternal _CMsgSteamLearnMatchHeroes_default_instance_;
class CMsgSteamLearnMatchInfo;
struct CMsgSteamLearnMatchInfoDefaultTypeInternal;
extern CMsgSteamLearnMatchInfoDefaultTypeInternal _CMsgSteamLearnMatchInfo_default_instance_;
class CMsgSteamLearnMatchState;
struct CMsgSteamLearnMatchStateDefaultTypeInternal;
extern CMsgSteamLearnMatchStateDefaultTypeInternal _CMsgSteamLearnMatchState_default_instance_;
class CMsgSteamLearnMatchState_PlayerState;
struct CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal;
extern CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal _CMsgSteamLearnMatchState_PlayerState_default_instance_;
class CMsgSteamLearnMatchState_TeamState;
struct CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal;
extern CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal _CMsgSteamLearnMatchState_TeamState_default_instance_;
class CMsgTeamFanfare;
struct CMsgTeamFanfareDefaultTypeInternal;
extern CMsgTeamFanfareDefaultTypeInternal _CMsgTeamFanfare_default_instance_;
class CMsgTimedRewardContainer;
struct CMsgTimedRewardContainerDefaultTypeInternal;
extern CMsgTimedRewardContainerDefaultTypeInternal _CMsgTimedRewardContainer_default_instance_;
class CMsgTournamentItemEvent;
struct CMsgTournamentItemEventDefaultTypeInternal;
extern CMsgTournamentItemEventDefaultTypeInternal _CMsgTournamentItemEvent_default_instance_;
class CMsgTournamentItemEventResponse;
struct CMsgTournamentItemEventResponseDefaultTypeInternal;
extern CMsgTournamentItemEventResponseDefaultTypeInternal _CMsgTournamentItemEventResponse_default_instance_;
class CSerializedCombatLog;
struct CSerializedCombatLogDefaultTypeInternal;
extern CSerializedCombatLogDefaultTypeInternal _CSerializedCombatLog_default_instance_;
class CSerializedCombatLog_Dictionary;
struct CSerializedCombatLog_DictionaryDefaultTypeInternal;
extern CSerializedCombatLog_DictionaryDefaultTypeInternal _CSerializedCombatLog_Dictionary_default_instance_;
class CSerializedCombatLog_Dictionary_DictString;
struct CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal;
extern CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal _CSerializedCombatLog_Dictionary_DictString_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgAbilitySelectionSteamMLEntry* Arena::CreateMaybeMessage<::CMsgAbilitySelectionSteamMLEntry>(Arena*);
template<> ::CMsgCheerConfig* Arena::CreateMaybeMessage<::CMsgCheerConfig>(Arena*);
template<> ::CMsgCheerState* Arena::CreateMaybeMessage<::CMsgCheerState>(Arena*);
template<> ::CMsgCheerTypeState* Arena::CreateMaybeMessage<::CMsgCheerTypeState>(Arena*);
template<> ::CMsgConnectedPlayers* Arena::CreateMaybeMessage<::CMsgConnectedPlayers>(Arena*);
template<> ::CMsgConnectedPlayers_Player* Arena::CreateMaybeMessage<::CMsgConnectedPlayers_Player>(Arena*);
template<> ::CMsgDOTAAwardEventPoints* Arena::CreateMaybeMessage<::CMsgDOTAAwardEventPoints>(Arena*);
template<> ::CMsgDOTAAwardEventPoints_AwardPoints* Arena::CreateMaybeMessage<::CMsgDOTAAwardEventPoints_AwardPoints>(Arena*);
template<> ::CMsgDOTAFantasyFinalPlayerStats* Arena::CreateMaybeMessage<::CMsgDOTAFantasyFinalPlayerStats>(Arena*);
template<> ::CMsgDOTAFantasyLivePlayerStats* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLivePlayerStats>(Arena*);
template<> ::CMsgDOTALiveScoreboardUpdate* Arena::CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate>(Arena*);
template<> ::CMsgDOTALiveScoreboardUpdate_Team* Arena::CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate_Team>(Arena*);
template<> ::CMsgDOTALiveScoreboardUpdate_Team_Player* Arena::CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate_Team_Player>(Arena*);
template<> ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* Arena::CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>(Arena*);
template<> ::CMsgDOTAPlayerFailedToConnect* Arena::CreateMaybeMessage<::CMsgDOTAPlayerFailedToConnect>(Arena*);
template<> ::CMsgDetailedGameStats* Arena::CreateMaybeMessage<::CMsgDetailedGameStats>(Arena*);
template<> ::CMsgDetailedGameStats_GameStats* Arena::CreateMaybeMessage<::CMsgDetailedGameStats_GameStats>(Arena*);
template<> ::CMsgDetailedGameStats_MinuteEntry* Arena::CreateMaybeMessage<::CMsgDetailedGameStats_MinuteEntry>(Arena*);
template<> ::CMsgDetailedGameStats_PlayerInfo* Arena::CreateMaybeMessage<::CMsgDetailedGameStats_PlayerInfo>(Arena*);
template<> ::CMsgDetailedGameStats_PlayerStatEntry* Arena::CreateMaybeMessage<::CMsgDetailedGameStats_PlayerStatEntry>(Arena*);
template<> ::CMsgGCBanStatusRequest* Arena::CreateMaybeMessage<::CMsgGCBanStatusRequest>(Arena*);
template<> ::CMsgGCBanStatusResponse* Arena::CreateMaybeMessage<::CMsgGCBanStatusResponse>(Arena*);
template<> ::CMsgGCGCToLANServerRelayConnect* Arena::CreateMaybeMessage<::CMsgGCGCToLANServerRelayConnect>(Arena*);
template<> ::CMsgGCToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage<::CMsgGCToGCCompendiumInGamePredictionResults>(Arena*);
template<> ::CMsgGCToRelayConnect* Arena::CreateMaybeMessage<::CMsgGCToRelayConnect>(Arena*);
template<> ::CMsgGCToServerCheerConfig* Arena::CreateMaybeMessage<::CMsgGCToServerCheerConfig>(Arena*);
template<> ::CMsgGCToServerCheerData* Arena::CreateMaybeMessage<::CMsgGCToServerCheerData>(Arena*);
template<> ::CMsgGCToServerCheerData_CheerTypeCount* Arena::CreateMaybeMessage<::CMsgGCToServerCheerData_CheerTypeCount>(Arena*);
template<> ::CMsgGCToServerCheerScalesOverride* Arena::CreateMaybeMessage<::CMsgGCToServerCheerScalesOverride>(Arena*);
template<> ::CMsgGCToServerGetCheerState* Arena::CreateMaybeMessage<::CMsgGCToServerGetCheerState>(Arena*);
template<> ::CMsgGCToServerLobbyHeroBanRates* Arena::CreateMaybeMessage<::CMsgGCToServerLobbyHeroBanRates>(Arena*);
template<> ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* Arena::CreateMaybeMessage<::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>(Arena*);
template<> ::CMsgGCToServerPingRequest* Arena::CreateMaybeMessage<::CMsgGCToServerPingRequest>(Arena*);
template<> ::CMsgGCToServerPingResponse* Arena::CreateMaybeMessage<::CMsgGCToServerPingResponse>(Arena*);
template<> ::CMsgGCToServerPredictionResult* Arena::CreateMaybeMessage<::CMsgGCToServerPredictionResult>(Arena*);
template<> ::CMsgGCToServerPredictionResult_Prediction* Arena::CreateMaybeMessage<::CMsgGCToServerPredictionResult_Prediction>(Arena*);
template<> ::CMsgGCToServerRealtimeStatsStartStop* Arena::CreateMaybeMessage<::CMsgGCToServerRealtimeStatsStartStop>(Arena*);
template<> ::CMsgGCToServerRecordTrainingData* Arena::CreateMaybeMessage<::CMsgGCToServerRecordTrainingData>(Arena*);
template<> ::CMsgGCToServerSetSteamLearnDisable* Arena::CreateMaybeMessage<::CMsgGCToServerSetSteamLearnDisable>(Arena*);
template<> ::CMsgGCToServerSetSteamLearnKeysChanged* Arena::CreateMaybeMessage<::CMsgGCToServerSetSteamLearnKeysChanged>(Arena*);
template<> ::CMsgGCToServerUpdateSteamBroadcasting* Arena::CreateMaybeMessage<::CMsgGCToServerUpdateSteamBroadcasting>(Arena*);
template<> ::CMsgGCtoServerTensorflowInstance* Arena::CreateMaybeMessage<::CMsgGCtoServerTensorflowInstance>(Arena*);
template<> ::CMsgGameMatchSignOut* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut>(Arena*);
template<> ::CMsgGameMatchSignOutBanData* Arena::CreateMaybeMessage<::CMsgGameMatchSignOutBanData>(Arena*);
template<> ::CMsgGameMatchSignOutEventGameData* Arena::CreateMaybeMessage<::CMsgGameMatchSignOutEventGameData>(Arena*);
template<> ::CMsgGameMatchSignOutPerfData* Arena::CreateMaybeMessage<::CMsgGameMatchSignOutPerfData>(Arena*);
template<> ::CMsgGameMatchSignOutPermissionRequest* Arena::CreateMaybeMessage<::CMsgGameMatchSignOutPermissionRequest>(Arena*);
template<> ::CMsgGameMatchSignOutPermissionResponse* Arena::CreateMaybeMessage<::CMsgGameMatchSignOutPermissionResponse>(Arena*);
template<> ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CAdditionalSignoutMsg>(Arena*);
template<> ::CMsgGameMatchSignOut_CCustomGameData* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CCustomGameData>(Arena*);
template<> ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CSocialFeedMatchEvent>(Arena*);
template<> ::CMsgGameMatchSignOut_CTeam* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CTeam>(Arena*);
template<> ::CMsgGameMatchSignOut_CTeam_CPlayer* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CTeam_CPlayer>(Arena*);
template<> ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(Arena*);
template<> ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>(Arena*);
template<> ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_EventGameLeaderboardEntry>(Arena*);
template<> ::CMsgGameMatchSignOut_WardPlacement* Arena::CreateMaybeMessage<::CMsgGameMatchSignOut_WardPlacement>(Arena*);
template<> ::CMsgGameMatchSignoutResponse* Arena::CreateMaybeMessage<::CMsgGameMatchSignoutResponse>(Arena*);
template<> ::CMsgGameMatchSignoutResponse_PlayerMetadata* Arena::CreateMaybeMessage<::CMsgGameMatchSignoutResponse_PlayerMetadata>(Arena*);
template<> ::CMsgGameServerGetLoadGame* Arena::CreateMaybeMessage<::CMsgGameServerGetLoadGame>(Arena*);
template<> ::CMsgGameServerGetLoadGameResult* Arena::CreateMaybeMessage<::CMsgGameServerGetLoadGameResult>(Arena*);
template<> ::CMsgGameServerInfo* Arena::CreateMaybeMessage<::CMsgGameServerInfo>(Arena*);
template<> ::CMsgGameServerSaveGameResult* Arena::CreateMaybeMessage<::CMsgGameServerSaveGameResult>(Arena*);
template<> ::CMsgGameServerUploadSaveGame* Arena::CreateMaybeMessage<::CMsgGameServerUploadSaveGame>(Arena*);
template<> ::CMsgGameserverCrash* Arena::CreateMaybeMessage<::CMsgGameserverCrash>(Arena*);
template<> ::CMsgItemPurchasePregameSteamMLEntry* Arena::CreateMaybeMessage<::CMsgItemPurchasePregameSteamMLEntry>(Arena*);
template<> ::CMsgItemPurchaseSequenceSteamMLEntry* Arena::CreateMaybeMessage<::CMsgItemPurchaseSequenceSteamMLEntry>(Arena*);
template<> ::CMsgItemPurchaseSteamMLEntry* Arena::CreateMaybeMessage<::CMsgItemPurchaseSteamMLEntry>(Arena*);
template<> ::CMsgLaneSelectionSteamMLEntry* Arena::CreateMaybeMessage<::CMsgLaneSelectionSteamMLEntry>(Arena*);
template<> ::CMsgLeaverDetected* Arena::CreateMaybeMessage<::CMsgLeaverDetected>(Arena*);
template<> ::CMsgLeaverDetectedResponse* Arena::CreateMaybeMessage<::CMsgLeaverDetectedResponse>(Arena*);
template<> ::CMsgMatchDiretideCandy* Arena::CreateMaybeMessage<::CMsgMatchDiretideCandy>(Arena*);
template<> ::CMsgMatchDiretideCandy_CandyDetails* Arena::CreateMaybeMessage<::CMsgMatchDiretideCandy_CandyDetails>(Arena*);
template<> ::CMsgMatchDiretideCandy_PlayerCandy* Arena::CreateMaybeMessage<::CMsgMatchDiretideCandy_PlayerCandy>(Arena*);
template<> ::CMsgMatchStateSteamMLEntry* Arena::CreateMaybeMessage<::CMsgMatchStateSteamMLEntry>(Arena*);
template<> ::CMsgNeutralItemStats* Arena::CreateMaybeMessage<::CMsgNeutralItemStats>(Arena*);
template<> ::CMsgNeutralItemStats_NeutralItem* Arena::CreateMaybeMessage<::CMsgNeutralItemStats_NeutralItem>(Arena*);
template<> ::CMsgPoorNetworkConditions* Arena::CreateMaybeMessage<::CMsgPoorNetworkConditions>(Arena*);
template<> ::CMsgPoorNetworkConditions_Player* Arena::CreateMaybeMessage<::CMsgPoorNetworkConditions_Player>(Arena*);
template<> ::CMsgResponseTeamFanfare* Arena::CreateMaybeMessage<::CMsgResponseTeamFanfare>(Arena*);
template<> ::CMsgServerGCUpdateSpectatorCount* Arena::CreateMaybeMessage<::CMsgServerGCUpdateSpectatorCount>(Arena*);
template<> ::CMsgServerToGCCavernCrawlIsHeroActive* Arena::CreateMaybeMessage<::CMsgServerToGCCavernCrawlIsHeroActive>(Arena*);
template<> ::CMsgServerToGCCavernCrawlIsHeroActiveResponse* Arena::CreateMaybeMessage<::CMsgServerToGCCavernCrawlIsHeroActiveResponse>(Arena*);
template<> ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* Arena::CreateMaybeMessage<::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>(Arena*);
template<> ::CMsgServerToGCCloseCompendiumInGamePredictionVoting* Arena::CreateMaybeMessage<::CMsgServerToGCCloseCompendiumInGamePredictionVoting>(Arena*);
template<> ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* Arena::CreateMaybeMessage<::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(Arena*);
template<> ::CMsgServerToGCCompendiumChosenInGamePredictions* Arena::CreateMaybeMessage<::CMsgServerToGCCompendiumChosenInGamePredictions>(Arena*);
template<> ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* Arena::CreateMaybeMessage<::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction>(Arena*);
template<> ::CMsgServerToGCCompendiumInGamePredictionResults* Arena::CreateMaybeMessage<::CMsgServerToGCCompendiumInGamePredictionResults>(Arena*);
template<> ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* Arena::CreateMaybeMessage<::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>(Arena*);
template<> ::CMsgServerToGCGetCheerConfig* Arena::CreateMaybeMessage<::CMsgServerToGCGetCheerConfig>(Arena*);
template<> ::CMsgServerToGCGetCheerConfigResponse* Arena::CreateMaybeMessage<::CMsgServerToGCGetCheerConfigResponse>(Arena*);
template<> ::CMsgServerToGCGetGuildContracts* Arena::CreateMaybeMessage<::CMsgServerToGCGetGuildContracts>(Arena*);
template<> ::CMsgServerToGCGetGuildContractsResponse* Arena::CreateMaybeMessage<::CMsgServerToGCGetGuildContractsResponse>(Arena*);
template<> ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* Arena::CreateMaybeMessage<::CMsgServerToGCGetGuildContractsResponse_ContractDetails>(Arena*);
template<> ::CMsgServerToGCGetGuildContractsResponse_Player* Arena::CreateMaybeMessage<::CMsgServerToGCGetGuildContractsResponse_Player>(Arena*);
template<> ::CMsgServerToGCGetStickerHeroes* Arena::CreateMaybeMessage<::CMsgServerToGCGetStickerHeroes>(Arena*);
template<> ::CMsgServerToGCGetStickerHeroesResponse* Arena::CreateMaybeMessage<::CMsgServerToGCGetStickerHeroesResponse>(Arena*);
template<> ::CMsgServerToGCGetStickerHeroesResponse_Player* Arena::CreateMaybeMessage<::CMsgServerToGCGetStickerHeroesResponse_Player>(Arena*);
template<> ::CMsgServerToGCKillSummaries* Arena::CreateMaybeMessage<::CMsgServerToGCKillSummaries>(Arena*);
template<> ::CMsgServerToGCKillSummaries_KillSummary* Arena::CreateMaybeMessage<::CMsgServerToGCKillSummaries_KillSummary>(Arena*);
template<> ::CMsgServerToGCLockCharmTrading* Arena::CreateMaybeMessage<::CMsgServerToGCLockCharmTrading>(Arena*);
template<> ::CMsgServerToGCMatchConnectionStats* Arena::CreateMaybeMessage<::CMsgServerToGCMatchConnectionStats>(Arena*);
template<> ::CMsgServerToGCMatchConnectionStats_Player* Arena::CreateMaybeMessage<::CMsgServerToGCMatchConnectionStats_Player>(Arena*);
template<> ::CMsgServerToGCMatchPlayerItemPurchaseHistory* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerItemPurchaseHistory>(Arena*);
template<> ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>(Arena*);
template<> ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>(Arena*);
template<> ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerNeutralItemEquipHistory>(Arena*);
template<> ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>(Arena*);
template<> ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* Arena::CreateMaybeMessage<::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>(Arena*);
template<> ::CMsgServerToGCMatchStateHistory* Arena::CreateMaybeMessage<::CMsgServerToGCMatchStateHistory>(Arena*);
template<> ::CMsgServerToGCMatchStateHistory_MatchState* Arena::CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_MatchState>(Arena*);
template<> ::CMsgServerToGCMatchStateHistory_PlayerState* Arena::CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_PlayerState>(Arena*);
template<> ::CMsgServerToGCMatchStateHistory_TeamState* Arena::CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_TeamState>(Arena*);
template<> ::CMsgServerToGCPlayerChallengeHistory* Arena::CreateMaybeMessage<::CMsgServerToGCPlayerChallengeHistory>(Arena*);
template<> ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* Arena::CreateMaybeMessage<::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>(Arena*);
template<> ::CMsgServerToGCRealtimeStats* Arena::CreateMaybeMessage<::CMsgServerToGCRealtimeStats>(Arena*);
template<> ::CMsgServerToGCReportCheerState* Arena::CreateMaybeMessage<::CMsgServerToGCReportCheerState>(Arena*);
template<> ::CMsgServerToGCRequestBatchPlayerResources* Arena::CreateMaybeMessage<::CMsgServerToGCRequestBatchPlayerResources>(Arena*);
template<> ::CMsgServerToGCRequestBatchPlayerResourcesResponse* Arena::CreateMaybeMessage<::CMsgServerToGCRequestBatchPlayerResourcesResponse>(Arena*);
template<> ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* Arena::CreateMaybeMessage<::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>(Arena*);
template<> ::CMsgServerToGCRequestStatus* Arena::CreateMaybeMessage<::CMsgServerToGCRequestStatus>(Arena*);
template<> ::CMsgServerToGCRequestStatus_Response* Arena::CreateMaybeMessage<::CMsgServerToGCRequestStatus_Response>(Arena*);
template<> ::CMsgServerToGCRerollPlayerChallenge* Arena::CreateMaybeMessage<::CMsgServerToGCRerollPlayerChallenge>(Arena*);
template<> ::CMsgServerToGCVictoryPredictions* Arena::CreateMaybeMessage<::CMsgServerToGCVictoryPredictions>(Arena*);
template<> ::CMsgServerToGCVictoryPredictions_Record* Arena::CreateMaybeMessage<::CMsgServerToGCVictoryPredictions_Record>(Arena*);
template<> ::CMsgSignOutAssassinMiniGameInfo* Arena::CreateMaybeMessage<::CMsgSignOutAssassinMiniGameInfo>(Arena*);
template<> ::CMsgSignOutBotInfo* Arena::CreateMaybeMessage<::CMsgSignOutBotInfo>(Arena*);
template<> ::CMsgSignOutBounties* Arena::CreateMaybeMessage<::CMsgSignOutBounties>(Arena*);
template<> ::CMsgSignOutBounties_Bounty* Arena::CreateMaybeMessage<::CMsgSignOutBounties_Bounty>(Arena*);
template<> ::CMsgSignOutCommunicationSummary* Arena::CreateMaybeMessage<::CMsgSignOutCommunicationSummary>(Arena*);
template<> ::CMsgSignOutCommunicationSummary_PlayerCommunication* Arena::CreateMaybeMessage<::CMsgSignOutCommunicationSummary_PlayerCommunication>(Arena*);
template<> ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* Arena::CreateMaybeMessage<::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>(Arena*);
template<> ::CMsgSignOutCommunityGoalProgress* Arena::CreateMaybeMessage<::CMsgSignOutCommunityGoalProgress>(Arena*);
template<> ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* Arena::CreateMaybeMessage<::CMsgSignOutCommunityGoalProgress_EventGoalIncrement>(Arena*);
template<> ::CMsgSignOutDraftInfo* Arena::CreateMaybeMessage<::CMsgSignOutDraftInfo>(Arena*);
template<> ::CMsgSignOutGameplayStats* Arena::CreateMaybeMessage<::CMsgSignOutGameplayStats>(Arena*);
template<> ::CMsgSignOutGameplayStats_CPlayer* Arena::CreateMaybeMessage<::CMsgSignOutGameplayStats_CPlayer>(Arena*);
template<> ::CMsgSignOutGameplayStats_CTeam* Arena::CreateMaybeMessage<::CMsgSignOutGameplayStats_CTeam>(Arena*);
template<> ::CMsgSignOutGuildChallengeProgress* Arena::CreateMaybeMessage<::CMsgSignOutGuildChallengeProgress>(Arena*);
template<> ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* Arena::CreateMaybeMessage<::CMsgSignOutGuildChallengeProgress_ChallengeProgress>(Arena*);
template<> ::CMsgSignOutGuildContractProgress* Arena::CreateMaybeMessage<::CMsgSignOutGuildContractProgress>(Arena*);
template<> ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* Arena::CreateMaybeMessage<::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>(Arena*);
template<> ::CMsgSignOutGuildContractProgress_PlayerContract* Arena::CreateMaybeMessage<::CMsgSignOutGuildContractProgress_PlayerContract>(Arena*);
template<> ::CMsgSignOutMVPStats* Arena::CreateMaybeMessage<::CMsgSignOutMVPStats>(Arena*);
template<> ::CMsgSignOutMVPStats_Player* Arena::CreateMaybeMessage<::CMsgSignOutMVPStats_Player>(Arena*);
template<> ::CMsgSignOutMVPStats_Player_KillEaterEvent* Arena::CreateMaybeMessage<::CMsgSignOutMVPStats_Player_KillEaterEvent>(Arena*);
template<> ::CMsgSignOutMuertaMinigame* Arena::CreateMaybeMessage<::CMsgSignOutMuertaMinigame>(Arena*);
template<> ::CMsgSignOutPlayerStats* Arena::CreateMaybeMessage<::CMsgSignOutPlayerStats>(Arena*);
template<> ::CMsgSignOutTextMuteInfo* Arena::CreateMaybeMessage<::CMsgSignOutTextMuteInfo>(Arena*);
template<> ::CMsgSignOutTextMuteInfo_TextMuteMessage* Arena::CreateMaybeMessage<::CMsgSignOutTextMuteInfo_TextMuteMessage>(Arena*);
template<> ::CMsgSignOutUpdatePlayerChallenge* Arena::CreateMaybeMessage<::CMsgSignOutUpdatePlayerChallenge>(Arena*);
template<> ::CMsgSignOutUpdatePlayerChallenge_Challenge* Arena::CreateMaybeMessage<::CMsgSignOutUpdatePlayerChallenge_Challenge>(Arena*);
template<> ::CMsgSignOutXPCoins* Arena::CreateMaybeMessage<::CMsgSignOutXPCoins>(Arena*);
template<> ::CMsgSignOutXPCoins_Player* Arena::CreateMaybeMessage<::CMsgSignOutXPCoins_Player>(Arena*);
template<> ::CMsgSpendWager* Arena::CreateMaybeMessage<::CMsgSpendWager>(Arena*);
template<> ::CMsgSpendWager_Player* Arena::CreateMaybeMessage<::CMsgSpendWager_Player>(Arena*);
template<> ::CMsgSteamLearnAbilitySkill* Arena::CreateMaybeMessage<::CMsgSteamLearnAbilitySkill>(Arena*);
template<> ::CMsgSteamLearnItemPurchase* Arena::CreateMaybeMessage<::CMsgSteamLearnItemPurchase>(Arena*);
template<> ::CMsgSteamLearnMatchHero* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchHero>(Arena*);
template<> ::CMsgSteamLearnMatchHeroes* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchHeroes>(Arena*);
template<> ::CMsgSteamLearnMatchInfo* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchInfo>(Arena*);
template<> ::CMsgSteamLearnMatchState* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchState>(Arena*);
template<> ::CMsgSteamLearnMatchState_PlayerState* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchState_PlayerState>(Arena*);
template<> ::CMsgSteamLearnMatchState_TeamState* Arena::CreateMaybeMessage<::CMsgSteamLearnMatchState_TeamState>(Arena*);
template<> ::CMsgTeamFanfare* Arena::CreateMaybeMessage<::CMsgTeamFanfare>(Arena*);
template<> ::CMsgTimedRewardContainer* Arena::CreateMaybeMessage<::CMsgTimedRewardContainer>(Arena*);
template<> ::CMsgTournamentItemEvent* Arena::CreateMaybeMessage<::CMsgTournamentItemEvent>(Arena*);
template<> ::CMsgTournamentItemEventResponse* Arena::CreateMaybeMessage<::CMsgTournamentItemEventResponse>(Arena*);
template<> ::CSerializedCombatLog* Arena::CreateMaybeMessage<::CSerializedCombatLog>(Arena*);
template<> ::CSerializedCombatLog_Dictionary* Arena::CreateMaybeMessage<::CSerializedCombatLog_Dictionary>(Arena*);
template<> ::CSerializedCombatLog_Dictionary_DictString* Arena::CreateMaybeMessage<::CSerializedCombatLog_Dictionary_DictString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgConnectedPlayers_SendReason : int {
  CMsgConnectedPlayers_SendReason_INVALID = 0,
  CMsgConnectedPlayers_SendReason_HEARTBEAT = 1,
  CMsgConnectedPlayers_SendReason_GAME_STATE = 2,
  CMsgConnectedPlayers_SendReason_FIRST_BLOOD = 3,
  CMsgConnectedPlayers_SendReason_PLAYER_CONNECTED = 4,
  CMsgConnectedPlayers_SendReason_PLAYER_HERO = 5,
  CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_CONSEQUENCES = 6,
  CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_NOCONSEQUENCES = 7,
  CMsgConnectedPlayers_SendReason_GAMESTATE_TIMEOUT = 10,
  CMsgConnectedPlayers_SendReason_MASS_DISCONNECT = 11,
  CMsgConnectedPlayers_SendReason_KILLS = 13,
  CMsgConnectedPlayers_SendReason_BUILDING_STATE = 14
};
bool CMsgConnectedPlayers_SendReason_IsValid(int value);
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers_SendReason_SendReason_MIN = CMsgConnectedPlayers_SendReason_INVALID;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers_SendReason_SendReason_MAX = CMsgConnectedPlayers_SendReason_BUILDING_STATE;
constexpr int CMsgConnectedPlayers_SendReason_SendReason_ARRAYSIZE = CMsgConnectedPlayers_SendReason_SendReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor();
template<typename T>
inline const std::string& CMsgConnectedPlayers_SendReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgConnectedPlayers_SendReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgConnectedPlayers_SendReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgConnectedPlayers_SendReason_descriptor(), enum_t_value);
}
inline bool CMsgConnectedPlayers_SendReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgConnectedPlayers_SendReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgConnectedPlayers_SendReason>(
    CMsgConnectedPlayers_SendReason_descriptor(), name, value);
}
enum CMsgGameServerInfo_ServerType : int {
  CMsgGameServerInfo_ServerType_UNSPECIFIED = 0,
  CMsgGameServerInfo_ServerType_GAME = 1,
  CMsgGameServerInfo_ServerType_PROXY = 2,
  CMsgGameServerInfo_ServerType_TENSORFLOW = 3,
  CMsgGameServerInfo_ServerType_DOTA_ONLY = 4,
  CMsgGameServerInfo_ServerType_CUSTOM_GAME_ONLY = 5,
  CMsgGameServerInfo_ServerType_EVENT_GAME_ONLY = 6
};
bool CMsgGameServerInfo_ServerType_IsValid(int value);
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MIN = CMsgGameServerInfo_ServerType_UNSPECIFIED;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo_ServerType_ServerType_MAX = CMsgGameServerInfo_ServerType_EVENT_GAME_ONLY;
constexpr int CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE = CMsgGameServerInfo_ServerType_ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor();
template<typename T>
inline const std::string& CMsgGameServerInfo_ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerInfo_ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerInfo_ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerInfo_ServerType_descriptor(), enum_t_value);
}
inline bool CMsgGameServerInfo_ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerInfo_ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerInfo_ServerType>(
    CMsgGameServerInfo_ServerType_descriptor(), name, value);
}
enum CMsgGameServerInfo_CustomGames : int {
  CMsgGameServerInfo_CustomGames_BOTH = 0,
  CMsgGameServerInfo_CustomGames_NONE = 1,
  CMsgGameServerInfo_CustomGames_ONLY = 2,
  CMsgGameServerInfo_CustomGames_EVENT = 3
};
bool CMsgGameServerInfo_CustomGames_IsValid(int value);
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo_CustomGames_CustomGames_MIN = CMsgGameServerInfo_CustomGames_BOTH;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo_CustomGames_CustomGames_MAX = CMsgGameServerInfo_CustomGames_EVENT;
constexpr int CMsgGameServerInfo_CustomGames_CustomGames_ARRAYSIZE = CMsgGameServerInfo_CustomGames_CustomGames_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_CustomGames_descriptor();
template<typename T>
inline const std::string& CMsgGameServerInfo_CustomGames_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerInfo_CustomGames>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerInfo_CustomGames_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerInfo_CustomGames_descriptor(), enum_t_value);
}
inline bool CMsgGameServerInfo_CustomGames_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerInfo_CustomGames* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerInfo_CustomGames>(
    CMsgGameServerInfo_CustomGames_descriptor(), name, value);
}
enum CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType : int {
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PHYSICAL = 0,
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_MAGICAL = 1,
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PURE = 2
};
bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(int value);
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_MIN = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PHYSICAL;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_MAX = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PURE;
constexpr int CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_ARRAYSIZE = CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor();
template<typename T>
inline const std::string& CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor(), enum_t_value);
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType>(
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor(), name, value);
}
enum CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState : int {
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned = 0,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown = 1,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana = 2,
  CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady = 3
};
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value);
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
constexpr int CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE = CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
template<typename T>
inline const std::string& CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), enum_t_value);
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor(), name, value);
}
enum CMsgGameServerSaveGameResult_Result : int {
  CMsgGameServerSaveGameResult_Result_SaveSuccessful = 0,
  CMsgGameServerSaveGameResult_Result_SessionNotFound = 1,
  CMsgGameServerSaveGameResult_Result_DatabaseError = 2,
  CMsgGameServerSaveGameResult_Result_TooBig = 3
};
bool CMsgGameServerSaveGameResult_Result_IsValid(int value);
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MIN = CMsgGameServerSaveGameResult_Result_SaveSuccessful;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult_Result_Result_MAX = CMsgGameServerSaveGameResult_Result_TooBig;
constexpr int CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE = CMsgGameServerSaveGameResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor();
template<typename T>
inline const std::string& CMsgGameServerSaveGameResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGameServerSaveGameResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGameServerSaveGameResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGameServerSaveGameResult_Result_descriptor(), enum_t_value);
}
inline bool CMsgGameServerSaveGameResult_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGameServerSaveGameResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGameServerSaveGameResult_Result>(
    CMsgGameServerSaveGameResult_Result_descriptor(), name, value);
}
enum CMsgGCToServerPredictionResult_Prediction_EResult : int {
  CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_ItemGranted = 1,
  CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_Destroyed = 2
};
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value);
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction_EResult_EResult_MIN = CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_ItemGranted;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction_EResult_EResult_MAX = CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_Destroyed;
constexpr int CMsgGCToServerPredictionResult_Prediction_EResult_EResult_ARRAYSIZE = CMsgGCToServerPredictionResult_Prediction_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor();
template<typename T>
inline const std::string& CMsgGCToServerPredictionResult_Prediction_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCToServerPredictionResult_Prediction_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCToServerPredictionResult_Prediction_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCToServerPredictionResult_Prediction_EResult_descriptor(), enum_t_value);
}
inline bool CMsgGCToServerPredictionResult_Prediction_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCToServerPredictionResult_Prediction_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCToServerPredictionResult_Prediction_EResult>(
    CMsgGCToServerPredictionResult_Prediction_EResult_descriptor(), name, value);
}
enum EPoorNetworkConditionsType : int {
  k_EPoorNetworkConditions_None = 0,
  k_EPoorNetworkConditions_Unknown = 1,
  k_EPoorNetworkConditions_MassDisconnect = 2,
  k_EPoorNetworkConditions_ExcessBadQosIntervals = 3
};
bool EPoorNetworkConditionsType_IsValid(int value);
constexpr EPoorNetworkConditionsType EPoorNetworkConditionsType_MIN = k_EPoorNetworkConditions_None;
constexpr EPoorNetworkConditionsType EPoorNetworkConditionsType_MAX = k_EPoorNetworkConditions_ExcessBadQosIntervals;
constexpr int EPoorNetworkConditionsType_ARRAYSIZE = EPoorNetworkConditionsType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPoorNetworkConditionsType_descriptor();
template<typename T>
inline const std::string& EPoorNetworkConditionsType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPoorNetworkConditionsType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPoorNetworkConditionsType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPoorNetworkConditionsType_descriptor(), enum_t_value);
}
inline bool EPoorNetworkConditionsType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EPoorNetworkConditionsType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPoorNetworkConditionsType>(
    EPoorNetworkConditionsType_descriptor(), name, value);
}
// ===================================================================

class CMsgPoorNetworkConditions_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPoorNetworkConditions.Player) */ {
 public:
  inline CMsgPoorNetworkConditions_Player() : CMsgPoorNetworkConditions_Player(nullptr) {}
  ~CMsgPoorNetworkConditions_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgPoorNetworkConditions_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from);
  CMsgPoorNetworkConditions_Player(CMsgPoorNetworkConditions_Player&& from) noexcept
    : CMsgPoorNetworkConditions_Player() {
    *this = ::std::move(from);
  }

  inline CMsgPoorNetworkConditions_Player& operator=(const CMsgPoorNetworkConditions_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPoorNetworkConditions_Player& operator=(CMsgPoorNetworkConditions_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPoorNetworkConditions_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPoorNetworkConditions_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgPoorNetworkConditions_Player*>(
               &_CMsgPoorNetworkConditions_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgPoorNetworkConditions_Player& a, CMsgPoorNetworkConditions_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPoorNetworkConditions_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPoorNetworkConditions_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPoorNetworkConditions_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPoorNetworkConditions_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPoorNetworkConditions_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPoorNetworkConditions_Player& from) {
    CMsgPoorNetworkConditions_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPoorNetworkConditions_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPoorNetworkConditions.Player";
  }
  protected:
  explicit CMsgPoorNetworkConditions_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kDisconnectReasonFieldNumber = 2,
    kNumBadIntervalsFieldNumber = 3,
    kPeakLossPctFieldNumber = 4,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  bool has_disconnect_reason() const;
  private:
  bool _internal_has_disconnect_reason() const;
  public:
  void clear_disconnect_reason();
  ::ENetworkDisconnectionReason disconnect_reason() const;
  void set_disconnect_reason(::ENetworkDisconnectionReason value);
  private:
  ::ENetworkDisconnectionReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::ENetworkDisconnectionReason value);
  public:

  // optional uint32 num_bad_intervals = 3;
  bool has_num_bad_intervals() const;
  private:
  bool _internal_has_num_bad_intervals() const;
  public:
  void clear_num_bad_intervals();
  uint32_t num_bad_intervals() const;
  void set_num_bad_intervals(uint32_t value);
  private:
  uint32_t _internal_num_bad_intervals() const;
  void _internal_set_num_bad_intervals(uint32_t value);
  public:

  // optional uint32 peak_loss_pct = 4;
  bool has_peak_loss_pct() const;
  private:
  bool _internal_has_peak_loss_pct() const;
  public:
  void clear_peak_loss_pct();
  uint32_t peak_loss_pct() const;
  void set_peak_loss_pct(uint32_t value);
  private:
  uint32_t _internal_peak_loss_pct() const;
  void _internal_set_peak_loss_pct(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPoorNetworkConditions.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int disconnect_reason_;
    uint32_t num_bad_intervals_;
    uint32_t peak_loss_pct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgPoorNetworkConditions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPoorNetworkConditions) */ {
 public:
  inline CMsgPoorNetworkConditions() : CMsgPoorNetworkConditions(nullptr) {}
  ~CMsgPoorNetworkConditions() override;
  explicit PROTOBUF_CONSTEXPR CMsgPoorNetworkConditions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from);
  CMsgPoorNetworkConditions(CMsgPoorNetworkConditions&& from) noexcept
    : CMsgPoorNetworkConditions() {
    *this = ::std::move(from);
  }

  inline CMsgPoorNetworkConditions& operator=(const CMsgPoorNetworkConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPoorNetworkConditions& operator=(CMsgPoorNetworkConditions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgPoorNetworkConditions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPoorNetworkConditions* internal_default_instance() {
    return reinterpret_cast<const CMsgPoorNetworkConditions*>(
               &_CMsgPoorNetworkConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgPoorNetworkConditions& a, CMsgPoorNetworkConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPoorNetworkConditions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPoorNetworkConditions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgPoorNetworkConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgPoorNetworkConditions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgPoorNetworkConditions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgPoorNetworkConditions& from) {
    CMsgPoorNetworkConditions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPoorNetworkConditions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPoorNetworkConditions";
  }
  protected:
  explicit CMsgPoorNetworkConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgPoorNetworkConditions_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kDetectionTypeFieldNumber = 1,
  };
  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgPoorNetworkConditions_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPoorNetworkConditions_Player >*
      mutable_players();
  private:
  const ::CMsgPoorNetworkConditions_Player& _internal_players(int index) const;
  ::CMsgPoorNetworkConditions_Player* _internal_add_players();
  public:
  const ::CMsgPoorNetworkConditions_Player& players(int index) const;
  ::CMsgPoorNetworkConditions_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPoorNetworkConditions_Player >&
      players() const;

  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  bool has_detection_type() const;
  private:
  bool _internal_has_detection_type() const;
  public:
  void clear_detection_type();
  ::EPoorNetworkConditionsType detection_type() const;
  void set_detection_type(::EPoorNetworkConditionsType value);
  private:
  ::EPoorNetworkConditionsType _internal_detection_type() const;
  void _internal_set_detection_type(::EPoorNetworkConditionsType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPoorNetworkConditions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPoorNetworkConditions_Player > players_;
    int detection_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameserverCrash final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameserverCrash) */ {
 public:
  inline CMsgGameserverCrash() : CMsgGameserverCrash(nullptr) {}
  ~CMsgGameserverCrash() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameserverCrash(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameserverCrash(const CMsgGameserverCrash& from);
  CMsgGameserverCrash(CMsgGameserverCrash&& from) noexcept
    : CMsgGameserverCrash() {
    *this = ::std::move(from);
  }

  inline CMsgGameserverCrash& operator=(const CMsgGameserverCrash& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameserverCrash& operator=(CMsgGameserverCrash&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameserverCrash& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameserverCrash* internal_default_instance() {
    return reinterpret_cast<const CMsgGameserverCrash*>(
               &_CMsgGameserverCrash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgGameserverCrash& a, CMsgGameserverCrash& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameserverCrash* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameserverCrash* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameserverCrash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameserverCrash>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameserverCrash& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameserverCrash& from) {
    CMsgGameserverCrash::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameserverCrash* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameserverCrash";
  }
  protected:
  explicit CMsgGameserverCrash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kLobbyIdFieldNumber = 2,
    kGameStateFieldNumber = 3,
    kSentinelSaveTimeFieldNumber = 4,
    kServerSteamIdFieldNumber = 5,
    kServerPublicIpAddrFieldNumber = 6,
    kServerPortFieldNumber = 7,
    kServerClusterFieldNumber = 8,
    kPidFieldNumber = 9,
    kCustomGameIdFieldNumber = 11,
    kEngineFieldNumber = 10,
    kTournamentIdFieldNumber = 12,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional fixed64 lobby_id = 2;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional fixed32 sentinel_save_time = 4;
  bool has_sentinel_save_time() const;
  private:
  bool _internal_has_sentinel_save_time() const;
  public:
  void clear_sentinel_save_time();
  uint32_t sentinel_save_time() const;
  void set_sentinel_save_time(uint32_t value);
  private:
  uint32_t _internal_sentinel_save_time() const;
  void _internal_set_sentinel_save_time(uint32_t value);
  public:

  // optional fixed64 server_steam_id = 5;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // optional fixed32 server_public_ip_addr = 6;
  bool has_server_public_ip_addr() const;
  private:
  bool _internal_has_server_public_ip_addr() const;
  public:
  void clear_server_public_ip_addr();
  uint32_t server_public_ip_addr() const;
  void set_server_public_ip_addr(uint32_t value);
  private:
  uint32_t _internal_server_public_ip_addr() const;
  void _internal_set_server_public_ip_addr(uint32_t value);
  public:

  // optional uint32 server_port = 7;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  uint32_t server_port() const;
  void set_server_port(uint32_t value);
  private:
  uint32_t _internal_server_port() const;
  void _internal_set_server_port(uint32_t value);
  public:

  // optional uint32 server_cluster = 8;
  bool has_server_cluster() const;
  private:
  bool _internal_has_server_cluster() const;
  public:
  void clear_server_cluster();
  uint32_t server_cluster() const;
  void set_server_cluster(uint32_t value);
  private:
  uint32_t _internal_server_cluster() const;
  void _internal_set_server_cluster(uint32_t value);
  public:

  // optional uint32 pid = 9;
  bool has_pid() const;
  private:
  bool _internal_has_pid() const;
  public:
  void clear_pid();
  uint32_t pid() const;
  void set_pid(uint32_t value);
  private:
  uint32_t _internal_pid() const;
  void _internal_set_pid(uint32_t value);
  public:

  // optional fixed64 custom_game_id = 11;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  uint64_t custom_game_id() const;
  void set_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_custom_game_id() const;
  void _internal_set_custom_game_id(uint64_t value);
  public:

  // optional uint32 engine = 10;
  bool has_engine() const;
  private:
  bool _internal_has_engine() const;
  public:
  void clear_engine();
  uint32_t engine() const;
  void set_engine(uint32_t value);
  private:
  uint32_t _internal_engine() const;
  void _internal_set_engine(uint32_t value);
  public:

  // optional uint32 tournament_id = 12;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameserverCrash)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    uint64_t lobby_id_;
    int game_state_;
    uint32_t sentinel_save_time_;
    uint64_t server_steam_id_;
    uint32_t server_public_ip_addr_;
    uint32_t server_port_;
    uint32_t server_cluster_;
    uint32_t pid_;
    uint64_t custom_game_id_;
    uint32_t engine_;
    uint32_t tournament_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgConnectedPlayers.Player) */ {
 public:
  inline CMsgConnectedPlayers_Player() : CMsgConnectedPlayers_Player(nullptr) {}
  ~CMsgConnectedPlayers_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgConnectedPlayers_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from);
  CMsgConnectedPlayers_Player(CMsgConnectedPlayers_Player&& from) noexcept
    : CMsgConnectedPlayers_Player() {
    *this = ::std::move(from);
  }

  inline CMsgConnectedPlayers_Player& operator=(const CMsgConnectedPlayers_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgConnectedPlayers_Player& operator=(CMsgConnectedPlayers_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgConnectedPlayers_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgConnectedPlayers_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgConnectedPlayers_Player*>(
               &_CMsgConnectedPlayers_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgConnectedPlayers_Player& a, CMsgConnectedPlayers_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgConnectedPlayers_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgConnectedPlayers_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgConnectedPlayers_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgConnectedPlayers_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgConnectedPlayers_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgConnectedPlayers_Player& from) {
    CMsgConnectedPlayers_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConnectedPlayers_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgConnectedPlayers.Player";
  }
  protected:
  explicit CMsgConnectedPlayers_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaverStateFieldNumber = 3,
    kSteamIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kDisconnectReasonFieldNumber = 4,
  };
  // optional .CMsgLeaverState leaver_state = 3;
  bool has_leaver_state() const;
  private:
  bool _internal_has_leaver_state() const;
  public:
  void clear_leaver_state();
  const ::CMsgLeaverState& leaver_state() const;
  PROTOBUF_NODISCARD ::CMsgLeaverState* release_leaver_state();
  ::CMsgLeaverState* mutable_leaver_state();
  void set_allocated_leaver_state(::CMsgLeaverState* leaver_state);
  private:
  const ::CMsgLeaverState& _internal_leaver_state() const;
  ::CMsgLeaverState* _internal_mutable_leaver_state();
  public:
  void unsafe_arena_set_allocated_leaver_state(
      ::CMsgLeaverState* leaver_state);
  ::CMsgLeaverState* unsafe_arena_release_leaver_state();

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  bool has_disconnect_reason() const;
  private:
  bool _internal_has_disconnect_reason() const;
  public:
  void clear_disconnect_reason();
  ::ENetworkDisconnectionReason disconnect_reason() const;
  void set_disconnect_reason(::ENetworkDisconnectionReason value);
  private:
  ::ENetworkDisconnectionReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::ENetworkDisconnectionReason value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgLeaverState* leaver_state_;
    uint64_t steam_id_;
    uint32_t hero_id_;
    int disconnect_reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgConnectedPlayers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgConnectedPlayers) */ {
 public:
  inline CMsgConnectedPlayers() : CMsgConnectedPlayers(nullptr) {}
  ~CMsgConnectedPlayers() override;
  explicit PROTOBUF_CONSTEXPR CMsgConnectedPlayers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgConnectedPlayers(const CMsgConnectedPlayers& from);
  CMsgConnectedPlayers(CMsgConnectedPlayers&& from) noexcept
    : CMsgConnectedPlayers() {
    *this = ::std::move(from);
  }

  inline CMsgConnectedPlayers& operator=(const CMsgConnectedPlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgConnectedPlayers& operator=(CMsgConnectedPlayers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgConnectedPlayers& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgConnectedPlayers* internal_default_instance() {
    return reinterpret_cast<const CMsgConnectedPlayers*>(
               &_CMsgConnectedPlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgConnectedPlayers& a, CMsgConnectedPlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgConnectedPlayers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgConnectedPlayers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgConnectedPlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgConnectedPlayers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgConnectedPlayers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgConnectedPlayers& from) {
    CMsgConnectedPlayers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgConnectedPlayers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgConnectedPlayers";
  }
  protected:
  explicit CMsgConnectedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgConnectedPlayers_Player Player;

  typedef CMsgConnectedPlayers_SendReason SendReason;
  static constexpr SendReason INVALID =
    CMsgConnectedPlayers_SendReason_INVALID;
  static constexpr SendReason HEARTBEAT =
    CMsgConnectedPlayers_SendReason_HEARTBEAT;
  static constexpr SendReason GAME_STATE =
    CMsgConnectedPlayers_SendReason_GAME_STATE;
  static constexpr SendReason FIRST_BLOOD =
    CMsgConnectedPlayers_SendReason_FIRST_BLOOD;
  static constexpr SendReason PLAYER_CONNECTED =
    CMsgConnectedPlayers_SendReason_PLAYER_CONNECTED;
  static constexpr SendReason PLAYER_HERO =
    CMsgConnectedPlayers_SendReason_PLAYER_HERO;
  static constexpr SendReason PLAYER_DISCONNECTED_CONSEQUENCES =
    CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_CONSEQUENCES;
  static constexpr SendReason PLAYER_DISCONNECTED_NOCONSEQUENCES =
    CMsgConnectedPlayers_SendReason_PLAYER_DISCONNECTED_NOCONSEQUENCES;
  static constexpr SendReason GAMESTATE_TIMEOUT =
    CMsgConnectedPlayers_SendReason_GAMESTATE_TIMEOUT;
  static constexpr SendReason MASS_DISCONNECT =
    CMsgConnectedPlayers_SendReason_MASS_DISCONNECT;
  static constexpr SendReason KILLS =
    CMsgConnectedPlayers_SendReason_KILLS;
  static constexpr SendReason BUILDING_STATE =
    CMsgConnectedPlayers_SendReason_BUILDING_STATE;
  static inline bool SendReason_IsValid(int value) {
    return CMsgConnectedPlayers_SendReason_IsValid(value);
  }
  static constexpr SendReason SendReason_MIN =
    CMsgConnectedPlayers_SendReason_SendReason_MIN;
  static constexpr SendReason SendReason_MAX =
    CMsgConnectedPlayers_SendReason_SendReason_MAX;
  static constexpr int SendReason_ARRAYSIZE =
    CMsgConnectedPlayers_SendReason_SendReason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SendReason_descriptor() {
    return CMsgConnectedPlayers_SendReason_descriptor();
  }
  template<typename T>
  static inline const std::string& SendReason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SendReason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SendReason_Name.");
    return CMsgConnectedPlayers_SendReason_Name(enum_t_value);
  }
  static inline bool SendReason_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SendReason* value) {
    return CMsgConnectedPlayers_SendReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConnectedPlayersFieldNumber = 1,
    kDisconnectedPlayersFieldNumber = 7,
    kPoorNetworkConditionsFieldNumber = 10,
    kGameStateFieldNumber = 2,
    kFirstBloodHappenedFieldNumber = 6,
    kSendReasonFieldNumber = 8,
    kRadiantKillsFieldNumber = 11,
    kDireKillsFieldNumber = 12,
    kRadiantLeadFieldNumber = 14,
    kBuildingStateFieldNumber = 15,
  };
  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  int connected_players_size() const;
  private:
  int _internal_connected_players_size() const;
  public:
  void clear_connected_players();
  ::CMsgConnectedPlayers_Player* mutable_connected_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
      mutable_connected_players();
  private:
  const ::CMsgConnectedPlayers_Player& _internal_connected_players(int index) const;
  ::CMsgConnectedPlayers_Player* _internal_add_connected_players();
  public:
  const ::CMsgConnectedPlayers_Player& connected_players(int index) const;
  ::CMsgConnectedPlayers_Player* add_connected_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
      connected_players() const;

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  int disconnected_players_size() const;
  private:
  int _internal_disconnected_players_size() const;
  public:
  void clear_disconnected_players();
  ::CMsgConnectedPlayers_Player* mutable_disconnected_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
      mutable_disconnected_players();
  private:
  const ::CMsgConnectedPlayers_Player& _internal_disconnected_players(int index) const;
  ::CMsgConnectedPlayers_Player* _internal_add_disconnected_players();
  public:
  const ::CMsgConnectedPlayers_Player& disconnected_players(int index) const;
  ::CMsgConnectedPlayers_Player* add_disconnected_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
      disconnected_players() const;

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
  bool has_poor_network_conditions() const;
  private:
  bool _internal_has_poor_network_conditions() const;
  public:
  void clear_poor_network_conditions();
  const ::CMsgPoorNetworkConditions& poor_network_conditions() const;
  PROTOBUF_NODISCARD ::CMsgPoorNetworkConditions* release_poor_network_conditions();
  ::CMsgPoorNetworkConditions* mutable_poor_network_conditions();
  void set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions);
  private:
  const ::CMsgPoorNetworkConditions& _internal_poor_network_conditions() const;
  ::CMsgPoorNetworkConditions* _internal_mutable_poor_network_conditions();
  public:
  void unsafe_arena_set_allocated_poor_network_conditions(
      ::CMsgPoorNetworkConditions* poor_network_conditions);
  ::CMsgPoorNetworkConditions* unsafe_arena_release_poor_network_conditions();

  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional bool first_blood_happened = 6;
  bool has_first_blood_happened() const;
  private:
  bool _internal_has_first_blood_happened() const;
  public:
  void clear_first_blood_happened();
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);
  private:
  bool _internal_first_blood_happened() const;
  void _internal_set_first_blood_happened(bool value);
  public:

  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  bool has_send_reason() const;
  private:
  bool _internal_has_send_reason() const;
  public:
  void clear_send_reason();
  ::CMsgConnectedPlayers_SendReason send_reason() const;
  void set_send_reason(::CMsgConnectedPlayers_SendReason value);
  private:
  ::CMsgConnectedPlayers_SendReason _internal_send_reason() const;
  void _internal_set_send_reason(::CMsgConnectedPlayers_SendReason value);
  public:

  // optional uint32 radiant_kills = 11;
  bool has_radiant_kills() const;
  private:
  bool _internal_has_radiant_kills() const;
  public:
  void clear_radiant_kills();
  uint32_t radiant_kills() const;
  void set_radiant_kills(uint32_t value);
  private:
  uint32_t _internal_radiant_kills() const;
  void _internal_set_radiant_kills(uint32_t value);
  public:

  // optional uint32 dire_kills = 12;
  bool has_dire_kills() const;
  private:
  bool _internal_has_dire_kills() const;
  public:
  void clear_dire_kills();
  uint32_t dire_kills() const;
  void set_dire_kills(uint32_t value);
  private:
  uint32_t _internal_dire_kills() const;
  void _internal_set_dire_kills(uint32_t value);
  public:

  // optional int32 radiant_lead = 14;
  bool has_radiant_lead() const;
  private:
  bool _internal_has_radiant_lead() const;
  public:
  void clear_radiant_lead();
  int32_t radiant_lead() const;
  void set_radiant_lead(int32_t value);
  private:
  int32_t _internal_radiant_lead() const;
  void _internal_set_radiant_lead(int32_t value);
  public:

  // optional uint32 building_state = 15;
  bool has_building_state() const;
  private:
  bool _internal_has_building_state() const;
  public:
  void clear_building_state();
  uint32_t building_state() const;
  void set_building_state(uint32_t value);
  private:
  uint32_t _internal_building_state() const;
  void _internal_set_building_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgConnectedPlayers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player > connected_players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player > disconnected_players_;
    ::CMsgPoorNetworkConditions* poor_network_conditions_;
    int game_state_;
    bool first_blood_happened_;
    int send_reason_;
    uint32_t radiant_kills_;
    uint32_t dire_kills_;
    int32_t radiant_lead_;
    uint32_t building_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerInfo) */ {
 public:
  inline CMsgGameServerInfo() : CMsgGameServerInfo(nullptr) {}
  ~CMsgGameServerInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerInfo(const CMsgGameServerInfo& from);
  CMsgGameServerInfo(CMsgGameServerInfo&& from) noexcept
    : CMsgGameServerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerInfo& operator=(const CMsgGameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerInfo& operator=(CMsgGameServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerInfo*>(
               &_CMsgGameServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgGameServerInfo& a, CMsgGameServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerInfo& from) {
    CMsgGameServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerInfo";
  }
  protected:
  explicit CMsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerInfo_ServerType ServerType;
  static constexpr ServerType UNSPECIFIED =
    CMsgGameServerInfo_ServerType_UNSPECIFIED;
  static constexpr ServerType GAME =
    CMsgGameServerInfo_ServerType_GAME;
  static constexpr ServerType PROXY =
    CMsgGameServerInfo_ServerType_PROXY;
  static constexpr ServerType TENSORFLOW =
    CMsgGameServerInfo_ServerType_TENSORFLOW;
  static constexpr ServerType DOTA_ONLY =
    CMsgGameServerInfo_ServerType_DOTA_ONLY;
  static constexpr ServerType CUSTOM_GAME_ONLY =
    CMsgGameServerInfo_ServerType_CUSTOM_GAME_ONLY;
  static constexpr ServerType EVENT_GAME_ONLY =
    CMsgGameServerInfo_ServerType_EVENT_GAME_ONLY;
  static inline bool ServerType_IsValid(int value) {
    return CMsgGameServerInfo_ServerType_IsValid(value);
  }
  static constexpr ServerType ServerType_MIN =
    CMsgGameServerInfo_ServerType_ServerType_MIN;
  static constexpr ServerType ServerType_MAX =
    CMsgGameServerInfo_ServerType_ServerType_MAX;
  static constexpr int ServerType_ARRAYSIZE =
    CMsgGameServerInfo_ServerType_ServerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ServerType_descriptor() {
    return CMsgGameServerInfo_ServerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ServerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ServerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ServerType_Name.");
    return CMsgGameServerInfo_ServerType_Name(enum_t_value);
  }
  static inline bool ServerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ServerType* value) {
    return CMsgGameServerInfo_ServerType_Parse(name, value);
  }

  typedef CMsgGameServerInfo_CustomGames CustomGames;
  static constexpr CustomGames BOTH =
    CMsgGameServerInfo_CustomGames_BOTH;
  static constexpr CustomGames NONE =
    CMsgGameServerInfo_CustomGames_NONE;
  static constexpr CustomGames ONLY =
    CMsgGameServerInfo_CustomGames_ONLY;
  static constexpr CustomGames EVENT =
    CMsgGameServerInfo_CustomGames_EVENT;
  static inline bool CustomGames_IsValid(int value) {
    return CMsgGameServerInfo_CustomGames_IsValid(value);
  }
  static constexpr CustomGames CustomGames_MIN =
    CMsgGameServerInfo_CustomGames_CustomGames_MIN;
  static constexpr CustomGames CustomGames_MAX =
    CMsgGameServerInfo_CustomGames_CustomGames_MAX;
  static constexpr int CustomGames_ARRAYSIZE =
    CMsgGameServerInfo_CustomGames_CustomGames_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CustomGames_descriptor() {
    return CMsgGameServerInfo_CustomGames_descriptor();
  }
  template<typename T>
  static inline const std::string& CustomGames_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CustomGames>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CustomGames_Name.");
    return CMsgGameServerInfo_CustomGames_Name(enum_t_value);
  }
  static inline bool CustomGames_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CustomGames* value) {
    return CMsgGameServerInfo_CustomGames_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServerKeyFieldNumber = 5,
    kLegacyServerSteamdatagramAddressFieldNumber = 27,
    kServerPublicIpAddrFieldNumber = 1,
    kServerPrivateIpAddrFieldNumber = 2,
    kServerPortFieldNumber = 3,
    kServerTvPortFieldNumber = 4,
    kServerTypeFieldNumber = 7,
    kServerRegionFieldNumber = 8,
    kServerLoadavgFieldNumber = 9,
    kServerTvBroadcastTimeFieldNumber = 10,
    kServerRelayConnectedSteamIdFieldNumber = 12,
    kServerGameTimeFieldNumber = 11,
    kRelaySlotsMaxFieldNumber = 13,
    kRelaysConnectedFieldNumber = 14,
    kRelayClientsConnectedFieldNumber = 15,
    kRelayedGameServerSteamIdFieldNumber = 16,
    kTvSecretCodeFieldNumber = 18,
    kParentRelayCountFieldNumber = 17,
    kServerVersionFieldNumber = 19,
    kServerClusterFieldNumber = 20,
    kServerHibernationFieldNumber = 6,
    kDevForceServerTypeFieldNumber = 28,
    kIsRecordingMatchTrainingDataFieldNumber = 29,
    kAssignedServerTvPortFieldNumber = 22,
    kAllowCustomGamesFieldNumber = 23,
    kBuildVersionFieldNumber = 24,
    kTfServerCountFieldNumber = 25,
    kSrcdsInstanceFieldNumber = 26,
  };
  // optional string server_key = 5;
  bool has_server_key() const;
  private:
  bool _internal_has_server_key() const;
  public:
  void clear_server_key();
  const std::string& server_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_key();
  PROTOBUF_NODISCARD std::string* release_server_key();
  void set_allocated_server_key(std::string* server_key);
  private:
  const std::string& _internal_server_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_key(const std::string& value);
  std::string* _internal_mutable_server_key();
  public:

  // optional bytes legacy_server_steamdatagram_address = 27;
  bool has_legacy_server_steamdatagram_address() const;
  private:
  bool _internal_has_legacy_server_steamdatagram_address() const;
  public:
  void clear_legacy_server_steamdatagram_address();
  const std::string& legacy_server_steamdatagram_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_legacy_server_steamdatagram_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_legacy_server_steamdatagram_address();
  PROTOBUF_NODISCARD std::string* release_legacy_server_steamdatagram_address();
  void set_allocated_legacy_server_steamdatagram_address(std::string* legacy_server_steamdatagram_address);
  private:
  const std::string& _internal_legacy_server_steamdatagram_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_legacy_server_steamdatagram_address(const std::string& value);
  std::string* _internal_mutable_legacy_server_steamdatagram_address();
  public:

  // optional fixed32 server_public_ip_addr = 1;
  bool has_server_public_ip_addr() const;
  private:
  bool _internal_has_server_public_ip_addr() const;
  public:
  void clear_server_public_ip_addr();
  uint32_t server_public_ip_addr() const;
  void set_server_public_ip_addr(uint32_t value);
  private:
  uint32_t _internal_server_public_ip_addr() const;
  void _internal_set_server_public_ip_addr(uint32_t value);
  public:

  // optional fixed32 server_private_ip_addr = 2;
  bool has_server_private_ip_addr() const;
  private:
  bool _internal_has_server_private_ip_addr() const;
  public:
  void clear_server_private_ip_addr();
  uint32_t server_private_ip_addr() const;
  void set_server_private_ip_addr(uint32_t value);
  private:
  uint32_t _internal_server_private_ip_addr() const;
  void _internal_set_server_private_ip_addr(uint32_t value);
  public:

  // optional uint32 server_port = 3;
  bool has_server_port() const;
  private:
  bool _internal_has_server_port() const;
  public:
  void clear_server_port();
  uint32_t server_port() const;
  void set_server_port(uint32_t value);
  private:
  uint32_t _internal_server_port() const;
  void _internal_set_server_port(uint32_t value);
  public:

  // optional uint32 server_tv_port = 4;
  bool has_server_tv_port() const;
  private:
  bool _internal_has_server_tv_port() const;
  public:
  void clear_server_tv_port();
  uint32_t server_tv_port() const;
  void set_server_tv_port(uint32_t value);
  private:
  uint32_t _internal_server_tv_port() const;
  void _internal_set_server_tv_port(uint32_t value);
  public:

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  bool has_server_type() const;
  private:
  bool _internal_has_server_type() const;
  public:
  void clear_server_type();
  ::CMsgGameServerInfo_ServerType server_type() const;
  void set_server_type(::CMsgGameServerInfo_ServerType value);
  private:
  ::CMsgGameServerInfo_ServerType _internal_server_type() const;
  void _internal_set_server_type(::CMsgGameServerInfo_ServerType value);
  public:

  // optional uint32 server_region = 8;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  uint32_t server_region() const;
  void set_server_region(uint32_t value);
  private:
  uint32_t _internal_server_region() const;
  void _internal_set_server_region(uint32_t value);
  public:

  // optional float server_loadavg = 9;
  bool has_server_loadavg() const;
  private:
  bool _internal_has_server_loadavg() const;
  public:
  void clear_server_loadavg();
  float server_loadavg() const;
  void set_server_loadavg(float value);
  private:
  float _internal_server_loadavg() const;
  void _internal_set_server_loadavg(float value);
  public:

  // optional float server_tv_broadcast_time = 10;
  bool has_server_tv_broadcast_time() const;
  private:
  bool _internal_has_server_tv_broadcast_time() const;
  public:
  void clear_server_tv_broadcast_time();
  float server_tv_broadcast_time() const;
  void set_server_tv_broadcast_time(float value);
  private:
  float _internal_server_tv_broadcast_time() const;
  void _internal_set_server_tv_broadcast_time(float value);
  public:

  // optional fixed64 server_relay_connected_steam_id = 12;
  bool has_server_relay_connected_steam_id() const;
  private:
  bool _internal_has_server_relay_connected_steam_id() const;
  public:
  void clear_server_relay_connected_steam_id();
  uint64_t server_relay_connected_steam_id() const;
  void set_server_relay_connected_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_relay_connected_steam_id() const;
  void _internal_set_server_relay_connected_steam_id(uint64_t value);
  public:

  // optional float server_game_time = 11;
  bool has_server_game_time() const;
  private:
  bool _internal_has_server_game_time() const;
  public:
  void clear_server_game_time();
  float server_game_time() const;
  void set_server_game_time(float value);
  private:
  float _internal_server_game_time() const;
  void _internal_set_server_game_time(float value);
  public:

  // optional uint32 relay_slots_max = 13;
  bool has_relay_slots_max() const;
  private:
  bool _internal_has_relay_slots_max() const;
  public:
  void clear_relay_slots_max();
  uint32_t relay_slots_max() const;
  void set_relay_slots_max(uint32_t value);
  private:
  uint32_t _internal_relay_slots_max() const;
  void _internal_set_relay_slots_max(uint32_t value);
  public:

  // optional int32 relays_connected = 14;
  bool has_relays_connected() const;
  private:
  bool _internal_has_relays_connected() const;
  public:
  void clear_relays_connected();
  int32_t relays_connected() const;
  void set_relays_connected(int32_t value);
  private:
  int32_t _internal_relays_connected() const;
  void _internal_set_relays_connected(int32_t value);
  public:

  // optional int32 relay_clients_connected = 15;
  bool has_relay_clients_connected() const;
  private:
  bool _internal_has_relay_clients_connected() const;
  public:
  void clear_relay_clients_connected();
  int32_t relay_clients_connected() const;
  void set_relay_clients_connected(int32_t value);
  private:
  int32_t _internal_relay_clients_connected() const;
  void _internal_set_relay_clients_connected(int32_t value);
  public:

  // optional fixed64 relayed_game_server_steam_id = 16;
  bool has_relayed_game_server_steam_id() const;
  private:
  bool _internal_has_relayed_game_server_steam_id() const;
  public:
  void clear_relayed_game_server_steam_id();
  uint64_t relayed_game_server_steam_id() const;
  void set_relayed_game_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_relayed_game_server_steam_id() const;
  void _internal_set_relayed_game_server_steam_id(uint64_t value);
  public:

  // optional fixed64 tv_secret_code = 18;
  bool has_tv_secret_code() const;
  private:
  bool _internal_has_tv_secret_code() const;
  public:
  void clear_tv_secret_code();
  uint64_t tv_secret_code() const;
  void set_tv_secret_code(uint64_t value);
  private:
  uint64_t _internal_tv_secret_code() const;
  void _internal_set_tv_secret_code(uint64_t value);
  public:

  // optional uint32 parent_relay_count = 17;
  bool has_parent_relay_count() const;
  private:
  bool _internal_has_parent_relay_count() const;
  public:
  void clear_parent_relay_count();
  uint32_t parent_relay_count() const;
  void set_parent_relay_count(uint32_t value);
  private:
  uint32_t _internal_parent_relay_count() const;
  void _internal_set_parent_relay_count(uint32_t value);
  public:

  // optional uint32 server_version = 19;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  uint32_t server_version() const;
  void set_server_version(uint32_t value);
  private:
  uint32_t _internal_server_version() const;
  void _internal_set_server_version(uint32_t value);
  public:

  // optional uint32 server_cluster = 20;
  bool has_server_cluster() const;
  private:
  bool _internal_has_server_cluster() const;
  public:
  void clear_server_cluster();
  uint32_t server_cluster() const;
  void set_server_cluster(uint32_t value);
  private:
  uint32_t _internal_server_cluster() const;
  void _internal_set_server_cluster(uint32_t value);
  public:

  // optional bool server_hibernation = 6;
  bool has_server_hibernation() const;
  private:
  bool _internal_has_server_hibernation() const;
  public:
  void clear_server_hibernation();
  bool server_hibernation() const;
  void set_server_hibernation(bool value);
  private:
  bool _internal_server_hibernation() const;
  void _internal_set_server_hibernation(bool value);
  public:

  // optional bool dev_force_server_type = 28;
  bool has_dev_force_server_type() const;
  private:
  bool _internal_has_dev_force_server_type() const;
  public:
  void clear_dev_force_server_type();
  bool dev_force_server_type() const;
  void set_dev_force_server_type(bool value);
  private:
  bool _internal_dev_force_server_type() const;
  void _internal_set_dev_force_server_type(bool value);
  public:

  // optional bool is_recording_match_training_data = 29;
  bool has_is_recording_match_training_data() const;
  private:
  bool _internal_has_is_recording_match_training_data() const;
  public:
  void clear_is_recording_match_training_data();
  bool is_recording_match_training_data() const;
  void set_is_recording_match_training_data(bool value);
  private:
  bool _internal_is_recording_match_training_data() const;
  void _internal_set_is_recording_match_training_data(bool value);
  public:

  // optional uint32 assigned_server_tv_port = 22;
  bool has_assigned_server_tv_port() const;
  private:
  bool _internal_has_assigned_server_tv_port() const;
  public:
  void clear_assigned_server_tv_port();
  uint32_t assigned_server_tv_port() const;
  void set_assigned_server_tv_port(uint32_t value);
  private:
  uint32_t _internal_assigned_server_tv_port() const;
  void _internal_set_assigned_server_tv_port(uint32_t value);
  public:

  // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  bool has_allow_custom_games() const;
  private:
  bool _internal_has_allow_custom_games() const;
  public:
  void clear_allow_custom_games();
  ::CMsgGameServerInfo_CustomGames allow_custom_games() const;
  void set_allow_custom_games(::CMsgGameServerInfo_CustomGames value);
  private:
  ::CMsgGameServerInfo_CustomGames _internal_allow_custom_games() const;
  void _internal_set_allow_custom_games(::CMsgGameServerInfo_CustomGames value);
  public:

  // optional uint32 build_version = 24;
  bool has_build_version() const;
  private:
  bool _internal_has_build_version() const;
  public:
  void clear_build_version();
  uint32_t build_version() const;
  void set_build_version(uint32_t value);
  private:
  uint32_t _internal_build_version() const;
  void _internal_set_build_version(uint32_t value);
  public:

  // optional uint32 tf_server_count = 25;
  bool has_tf_server_count() const;
  private:
  bool _internal_has_tf_server_count() const;
  public:
  void clear_tf_server_count();
  uint32_t tf_server_count() const;
  void set_tf_server_count(uint32_t value);
  private:
  uint32_t _internal_tf_server_count() const;
  void _internal_set_tf_server_count(uint32_t value);
  public:

  // optional uint32 srcds_instance = 26;
  bool has_srcds_instance() const;
  private:
  bool _internal_has_srcds_instance() const;
  public:
  void clear_srcds_instance();
  uint32_t srcds_instance() const;
  void set_srcds_instance(uint32_t value);
  private:
  uint32_t _internal_srcds_instance() const;
  void _internal_set_srcds_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_server_steamdatagram_address_;
    uint32_t server_public_ip_addr_;
    uint32_t server_private_ip_addr_;
    uint32_t server_port_;
    uint32_t server_tv_port_;
    int server_type_;
    uint32_t server_region_;
    float server_loadavg_;
    float server_tv_broadcast_time_;
    uint64_t server_relay_connected_steam_id_;
    float server_game_time_;
    uint32_t relay_slots_max_;
    int32_t relays_connected_;
    int32_t relay_clients_connected_;
    uint64_t relayed_game_server_steam_id_;
    uint64_t tv_secret_code_;
    uint32_t parent_relay_count_;
    uint32_t server_version_;
    uint32_t server_cluster_;
    bool server_hibernation_;
    bool dev_force_server_type_;
    bool is_recording_match_training_data_;
    uint32_t assigned_server_tv_port_;
    int allow_custom_games_;
    uint32_t build_version_;
    uint32_t tf_server_count_;
    uint32_t srcds_instance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaverDetected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverDetected) */ {
 public:
  inline CMsgLeaverDetected() : CMsgLeaverDetected(nullptr) {}
  ~CMsgLeaverDetected() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeaverDetected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeaverDetected(const CMsgLeaverDetected& from);
  CMsgLeaverDetected(CMsgLeaverDetected&& from) noexcept
    : CMsgLeaverDetected() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverDetected& operator=(const CMsgLeaverDetected& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeaverDetected& operator=(CMsgLeaverDetected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeaverDetected& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeaverDetected* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverDetected*>(
               &_CMsgLeaverDetected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgLeaverDetected& a, CMsgLeaverDetected& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeaverDetected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeaverDetected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeaverDetected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeaverDetected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeaverDetected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeaverDetected& from) {
    CMsgLeaverDetected::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaverDetected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeaverDetected";
  }
  protected:
  explicit CMsgLeaverDetected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeaverStateFieldNumber = 4,
    kPoorNetworkConditionsFieldNumber = 7,
    kSteamIdFieldNumber = 1,
    kLeaverStatusFieldNumber = 2,
    kServerClusterFieldNumber = 5,
    kDisconnectReasonFieldNumber = 6,
  };
  // optional .CMsgLeaverState leaver_state = 4;
  bool has_leaver_state() const;
  private:
  bool _internal_has_leaver_state() const;
  public:
  void clear_leaver_state();
  const ::CMsgLeaverState& leaver_state() const;
  PROTOBUF_NODISCARD ::CMsgLeaverState* release_leaver_state();
  ::CMsgLeaverState* mutable_leaver_state();
  void set_allocated_leaver_state(::CMsgLeaverState* leaver_state);
  private:
  const ::CMsgLeaverState& _internal_leaver_state() const;
  ::CMsgLeaverState* _internal_mutable_leaver_state();
  public:
  void unsafe_arena_set_allocated_leaver_state(
      ::CMsgLeaverState* leaver_state);
  ::CMsgLeaverState* unsafe_arena_release_leaver_state();

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
  bool has_poor_network_conditions() const;
  private:
  bool _internal_has_poor_network_conditions() const;
  public:
  void clear_poor_network_conditions();
  const ::CMsgPoorNetworkConditions& poor_network_conditions() const;
  PROTOBUF_NODISCARD ::CMsgPoorNetworkConditions* release_poor_network_conditions();
  ::CMsgPoorNetworkConditions* mutable_poor_network_conditions();
  void set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions);
  private:
  const ::CMsgPoorNetworkConditions& _internal_poor_network_conditions() const;
  ::CMsgPoorNetworkConditions* _internal_mutable_poor_network_conditions();
  public:
  void unsafe_arena_set_allocated_poor_network_conditions(
      ::CMsgPoorNetworkConditions* poor_network_conditions);
  ::CMsgPoorNetworkConditions* unsafe_arena_release_poor_network_conditions();

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  bool has_leaver_status() const;
  private:
  bool _internal_has_leaver_status() const;
  public:
  void clear_leaver_status();
  ::DOTALeaverStatus_t leaver_status() const;
  void set_leaver_status(::DOTALeaverStatus_t value);
  private:
  ::DOTALeaverStatus_t _internal_leaver_status() const;
  void _internal_set_leaver_status(::DOTALeaverStatus_t value);
  public:

  // optional uint32 server_cluster = 5;
  bool has_server_cluster() const;
  private:
  bool _internal_has_server_cluster() const;
  public:
  void clear_server_cluster();
  uint32_t server_cluster() const;
  void set_server_cluster(uint32_t value);
  private:
  uint32_t _internal_server_cluster() const;
  void _internal_set_server_cluster(uint32_t value);
  public:

  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  bool has_disconnect_reason() const;
  private:
  bool _internal_has_disconnect_reason() const;
  public:
  void clear_disconnect_reason();
  ::ENetworkDisconnectionReason disconnect_reason() const;
  void set_disconnect_reason(::ENetworkDisconnectionReason value);
  private:
  ::ENetworkDisconnectionReason _internal_disconnect_reason() const;
  void _internal_set_disconnect_reason(::ENetworkDisconnectionReason value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeaverDetected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgLeaverState* leaver_state_;
    ::CMsgPoorNetworkConditions* poor_network_conditions_;
    uint64_t steam_id_;
    int leaver_status_;
    uint32_t server_cluster_;
    int disconnect_reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgLeaverDetectedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLeaverDetectedResponse) */ {
 public:
  inline CMsgLeaverDetectedResponse() : CMsgLeaverDetectedResponse(nullptr) {}
  ~CMsgLeaverDetectedResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgLeaverDetectedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from);
  CMsgLeaverDetectedResponse(CMsgLeaverDetectedResponse&& from) noexcept
    : CMsgLeaverDetectedResponse() {
    *this = ::std::move(from);
  }

  inline CMsgLeaverDetectedResponse& operator=(const CMsgLeaverDetectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLeaverDetectedResponse& operator=(CMsgLeaverDetectedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLeaverDetectedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLeaverDetectedResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgLeaverDetectedResponse*>(
               &_CMsgLeaverDetectedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgLeaverDetectedResponse& a, CMsgLeaverDetectedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLeaverDetectedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLeaverDetectedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLeaverDetectedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLeaverDetectedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLeaverDetectedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLeaverDetectedResponse& from) {
    CMsgLeaverDetectedResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLeaverDetectedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLeaverDetectedResponse";
  }
  protected:
  explicit CMsgLeaverDetectedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLeaverDetectedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyFinalPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyFinalPlayerStats) */ {
 public:
  inline CMsgDOTAFantasyFinalPlayerStats() : CMsgDOTAFantasyFinalPlayerStats(nullptr) {}
  ~CMsgDOTAFantasyFinalPlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyFinalPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyFinalPlayerStats(const CMsgDOTAFantasyFinalPlayerStats& from);
  CMsgDOTAFantasyFinalPlayerStats(CMsgDOTAFantasyFinalPlayerStats&& from) noexcept
    : CMsgDOTAFantasyFinalPlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyFinalPlayerStats& operator=(const CMsgDOTAFantasyFinalPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyFinalPlayerStats& operator=(CMsgDOTAFantasyFinalPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyFinalPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyFinalPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyFinalPlayerStats*>(
               &_CMsgDOTAFantasyFinalPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTAFantasyFinalPlayerStats& a, CMsgDOTAFantasyFinalPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyFinalPlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyFinalPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyFinalPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyFinalPlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyFinalPlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyFinalPlayerStats& from) {
    CMsgDOTAFantasyFinalPlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyFinalPlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyFinalPlayerStats";
  }
  protected:
  explicit CMsgDOTAFantasyFinalPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
  };
  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMsgDOTAFantasyPlayerStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_stats();
  private:
  const ::CMsgDOTAFantasyPlayerStats& _internal_stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* _internal_add_stats();
  public:
  const ::CMsgDOTAFantasyPlayerStats& stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyFinalPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLivePlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLivePlayerStats) */ {
 public:
  inline CMsgDOTAFantasyLivePlayerStats() : CMsgDOTAFantasyLivePlayerStats(nullptr) {}
  ~CMsgDOTAFantasyLivePlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyLivePlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLivePlayerStats(const CMsgDOTAFantasyLivePlayerStats& from);
  CMsgDOTAFantasyLivePlayerStats(CMsgDOTAFantasyLivePlayerStats&& from) noexcept
    : CMsgDOTAFantasyLivePlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLivePlayerStats& operator=(const CMsgDOTAFantasyLivePlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLivePlayerStats& operator=(CMsgDOTAFantasyLivePlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyLivePlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLivePlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLivePlayerStats*>(
               &_CMsgDOTAFantasyLivePlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTAFantasyLivePlayerStats& a, CMsgDOTAFantasyLivePlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLivePlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLivePlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyLivePlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLivePlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyLivePlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyLivePlayerStats& from) {
    CMsgDOTAFantasyLivePlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLivePlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLivePlayerStats";
  }
  protected:
  explicit CMsgDOTAFantasyLivePlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
  };
  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMsgDOTAFantasyPlayerStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_stats();
  private:
  const ::CMsgDOTAFantasyPlayerStats& _internal_stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* _internal_add_stats();
  public:
  const ::CMsgDOTAFantasyPlayerStats& stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      stats() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLivePlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > stats_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRealtimeStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRealtimeStats) */ {
 public:
  inline CMsgServerToGCRealtimeStats() : CMsgServerToGCRealtimeStats(nullptr) {}
  ~CMsgServerToGCRealtimeStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRealtimeStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from);
  CMsgServerToGCRealtimeStats(CMsgServerToGCRealtimeStats&& from) noexcept
    : CMsgServerToGCRealtimeStats() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRealtimeStats& operator=(const CMsgServerToGCRealtimeStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRealtimeStats& operator=(CMsgServerToGCRealtimeStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRealtimeStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRealtimeStats* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRealtimeStats*>(
               &_CMsgServerToGCRealtimeStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgServerToGCRealtimeStats& a, CMsgServerToGCRealtimeStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRealtimeStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRealtimeStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRealtimeStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRealtimeStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRealtimeStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRealtimeStats& from) {
    CMsgServerToGCRealtimeStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRealtimeStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRealtimeStats";
  }
  protected:
  explicit CMsgServerToGCRealtimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayedFieldNumber = 1,
  };
  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  bool has_delayed() const;
  private:
  bool _internal_has_delayed() const;
  public:
  void clear_delayed();
  const ::CMsgDOTARealtimeGameStatsTerse& delayed() const;
  PROTOBUF_NODISCARD ::CMsgDOTARealtimeGameStatsTerse* release_delayed();
  ::CMsgDOTARealtimeGameStatsTerse* mutable_delayed();
  void set_allocated_delayed(::CMsgDOTARealtimeGameStatsTerse* delayed);
  private:
  const ::CMsgDOTARealtimeGameStatsTerse& _internal_delayed() const;
  ::CMsgDOTARealtimeGameStatsTerse* _internal_mutable_delayed();
  public:
  void unsafe_arena_set_allocated_delayed(
      ::CMsgDOTARealtimeGameStatsTerse* delayed);
  ::CMsgDOTARealtimeGameStatsTerse* unsafe_arena_release_delayed();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRealtimeStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDOTARealtimeGameStatsTerse* delayed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerRealtimeStatsStartStop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerRealtimeStatsStartStop) */ {
 public:
  inline CMsgGCToServerRealtimeStatsStartStop() : CMsgGCToServerRealtimeStatsStartStop(nullptr) {}
  ~CMsgGCToServerRealtimeStatsStartStop() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerRealtimeStatsStartStop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from);
  CMsgGCToServerRealtimeStatsStartStop(CMsgGCToServerRealtimeStatsStartStop&& from) noexcept
    : CMsgGCToServerRealtimeStatsStartStop() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerRealtimeStatsStartStop& operator=(const CMsgGCToServerRealtimeStatsStartStop& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerRealtimeStatsStartStop& operator=(CMsgGCToServerRealtimeStatsStartStop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerRealtimeStatsStartStop& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerRealtimeStatsStartStop* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerRealtimeStatsStartStop*>(
               &_CMsgGCToServerRealtimeStatsStartStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgGCToServerRealtimeStatsStartStop& a, CMsgGCToServerRealtimeStatsStartStop& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerRealtimeStatsStartStop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerRealtimeStatsStartStop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerRealtimeStatsStartStop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerRealtimeStatsStartStop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerRealtimeStatsStartStop& from) {
    CMsgGCToServerRealtimeStatsStartStop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerRealtimeStatsStartStop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerRealtimeStatsStartStop";
  }
  protected:
  explicit CMsgGCToServerRealtimeStatsStartStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelayedFieldNumber = 1,
  };
  // optional bool delayed = 1;
  bool has_delayed() const;
  private:
  bool _internal_has_delayed() const;
  public:
  void clear_delayed();
  bool delayed() const;
  void set_delayed(bool value);
  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerRealtimeStatsStartStop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool delayed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerUpdateSteamBroadcasting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerUpdateSteamBroadcasting) */ {
 public:
  inline CMsgGCToServerUpdateSteamBroadcasting() : CMsgGCToServerUpdateSteamBroadcasting(nullptr) {}
  ~CMsgGCToServerUpdateSteamBroadcasting() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerUpdateSteamBroadcasting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerUpdateSteamBroadcasting(const CMsgGCToServerUpdateSteamBroadcasting& from);
  CMsgGCToServerUpdateSteamBroadcasting(CMsgGCToServerUpdateSteamBroadcasting&& from) noexcept
    : CMsgGCToServerUpdateSteamBroadcasting() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerUpdateSteamBroadcasting& operator=(const CMsgGCToServerUpdateSteamBroadcasting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerUpdateSteamBroadcasting& operator=(CMsgGCToServerUpdateSteamBroadcasting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerUpdateSteamBroadcasting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerUpdateSteamBroadcasting* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerUpdateSteamBroadcasting*>(
               &_CMsgGCToServerUpdateSteamBroadcasting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgGCToServerUpdateSteamBroadcasting& a, CMsgGCToServerUpdateSteamBroadcasting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerUpdateSteamBroadcasting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerUpdateSteamBroadcasting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerUpdateSteamBroadcasting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerUpdateSteamBroadcasting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerUpdateSteamBroadcasting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerUpdateSteamBroadcasting& from) {
    CMsgGCToServerUpdateSteamBroadcasting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerUpdateSteamBroadcasting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerUpdateSteamBroadcasting";
  }
  protected:
  explicit CMsgGCToServerUpdateSteamBroadcasting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveFieldNumber = 1,
  };
  // optional bool active = 1;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerUpdateSteamBroadcasting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool active_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGameplayStats_CPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGameplayStats.CPlayer) */ {
 public:
  inline CMsgSignOutGameplayStats_CPlayer() : CMsgSignOutGameplayStats_CPlayer(nullptr) {}
  ~CMsgSignOutGameplayStats_CPlayer() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGameplayStats_CPlayer(const CMsgSignOutGameplayStats_CPlayer& from);
  CMsgSignOutGameplayStats_CPlayer(CMsgSignOutGameplayStats_CPlayer&& from) noexcept
    : CMsgSignOutGameplayStats_CPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGameplayStats_CPlayer& operator=(const CMsgSignOutGameplayStats_CPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGameplayStats_CPlayer& operator=(CMsgSignOutGameplayStats_CPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGameplayStats_CPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGameplayStats_CPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGameplayStats_CPlayer*>(
               &_CMsgSignOutGameplayStats_CPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgSignOutGameplayStats_CPlayer& a, CMsgSignOutGameplayStats_CPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGameplayStats_CPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGameplayStats_CPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGameplayStats_CPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGameplayStats_CPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGameplayStats_CPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGameplayStats_CPlayer& from) {
    CMsgSignOutGameplayStats_CPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGameplayStats_CPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGameplayStats.CPlayer";
  }
  protected:
  explicit CMsgSignOutGameplayStats_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimedPlayerStatsFieldNumber = 4,
    kSteamIdFieldNumber = 1,
    kPlayerSlotFieldNumber = 2,
    kHeroIdFieldNumber = 3,
  };
  // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
  int timed_player_stats_size() const;
  private:
  int _internal_timed_player_stats_size() const;
  public:
  void clear_timed_player_stats();
  ::CMatchPlayerTimedStats* mutable_timed_player_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerTimedStats >*
      mutable_timed_player_stats();
  private:
  const ::CMatchPlayerTimedStats& _internal_timed_player_stats(int index) const;
  ::CMatchPlayerTimedStats* _internal_add_timed_player_stats();
  public:
  const ::CMatchPlayerTimedStats& timed_player_stats(int index) const;
  ::CMatchPlayerTimedStats* add_timed_player_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerTimedStats >&
      timed_player_stats() const;

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 player_slot = 2;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutGameplayStats.CPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerTimedStats > timed_player_stats_;
    uint64_t steam_id_;
    uint32_t player_slot_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGameplayStats_CTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGameplayStats.CTeam) */ {
 public:
  inline CMsgSignOutGameplayStats_CTeam() : CMsgSignOutGameplayStats_CTeam(nullptr) {}
  ~CMsgSignOutGameplayStats_CTeam() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGameplayStats_CTeam(const CMsgSignOutGameplayStats_CTeam& from);
  CMsgSignOutGameplayStats_CTeam(CMsgSignOutGameplayStats_CTeam&& from) noexcept
    : CMsgSignOutGameplayStats_CTeam() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGameplayStats_CTeam& operator=(const CMsgSignOutGameplayStats_CTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGameplayStats_CTeam& operator=(CMsgSignOutGameplayStats_CTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGameplayStats_CTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGameplayStats_CTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGameplayStats_CTeam*>(
               &_CMsgSignOutGameplayStats_CTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgSignOutGameplayStats_CTeam& a, CMsgSignOutGameplayStats_CTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGameplayStats_CTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGameplayStats_CTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGameplayStats_CTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGameplayStats_CTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGameplayStats_CTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGameplayStats_CTeam& from) {
    CMsgSignOutGameplayStats_CTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGameplayStats_CTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGameplayStats.CTeam";
  }
  protected:
  explicit CMsgSignOutGameplayStats_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimedTeamStatsFieldNumber = 3,
    kPlayersFieldNumber = 4,
    kIsWinningTeamFieldNumber = 1,
    kIsRadiantTeamFieldNumber = 2,
  };
  // repeated .CMatchTeamTimedStats timed_team_stats = 3;
  int timed_team_stats_size() const;
  private:
  int _internal_timed_team_stats_size() const;
  public:
  void clear_timed_team_stats();
  ::CMatchTeamTimedStats* mutable_timed_team_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchTeamTimedStats >*
      mutable_timed_team_stats();
  private:
  const ::CMatchTeamTimedStats& _internal_timed_team_stats(int index) const;
  ::CMatchTeamTimedStats* _internal_add_timed_team_stats();
  public:
  const ::CMatchTeamTimedStats& timed_team_stats(int index) const;
  ::CMatchTeamTimedStats* add_timed_team_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchTeamTimedStats >&
      timed_team_stats() const;

  // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgSignOutGameplayStats_CPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CPlayer >*
      mutable_players();
  private:
  const ::CMsgSignOutGameplayStats_CPlayer& _internal_players(int index) const;
  ::CMsgSignOutGameplayStats_CPlayer* _internal_add_players();
  public:
  const ::CMsgSignOutGameplayStats_CPlayer& players(int index) const;
  ::CMsgSignOutGameplayStats_CPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CPlayer >&
      players() const;

  // optional bool is_winning_team = 1;
  bool has_is_winning_team() const;
  private:
  bool _internal_has_is_winning_team() const;
  public:
  void clear_is_winning_team();
  bool is_winning_team() const;
  void set_is_winning_team(bool value);
  private:
  bool _internal_is_winning_team() const;
  void _internal_set_is_winning_team(bool value);
  public:

  // optional bool is_radiant_team = 2;
  bool has_is_radiant_team() const;
  private:
  bool _internal_has_is_radiant_team() const;
  public:
  void clear_is_radiant_team();
  bool is_radiant_team() const;
  void set_is_radiant_team(bool value);
  private:
  bool _internal_is_radiant_team() const;
  void _internal_set_is_radiant_team(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutGameplayStats.CTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchTeamTimedStats > timed_team_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CPlayer > players_;
    bool is_winning_team_;
    bool is_radiant_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGameplayStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGameplayStats) */ {
 public:
  inline CMsgSignOutGameplayStats() : CMsgSignOutGameplayStats(nullptr) {}
  ~CMsgSignOutGameplayStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGameplayStats(const CMsgSignOutGameplayStats& from);
  CMsgSignOutGameplayStats(CMsgSignOutGameplayStats&& from) noexcept
    : CMsgSignOutGameplayStats() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGameplayStats& operator=(const CMsgSignOutGameplayStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGameplayStats& operator=(CMsgSignOutGameplayStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGameplayStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGameplayStats* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGameplayStats*>(
               &_CMsgSignOutGameplayStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgSignOutGameplayStats& a, CMsgSignOutGameplayStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGameplayStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGameplayStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGameplayStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGameplayStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGameplayStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGameplayStats& from) {
    CMsgSignOutGameplayStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGameplayStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGameplayStats";
  }
  protected:
  explicit CMsgSignOutGameplayStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutGameplayStats_CPlayer CPlayer;
  typedef CMsgSignOutGameplayStats_CTeam CTeam;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
  };
  // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgSignOutGameplayStats_CTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CTeam >*
      mutable_teams();
  private:
  const ::CMsgSignOutGameplayStats_CTeam& _internal_teams(int index) const;
  ::CMsgSignOutGameplayStats_CTeam* _internal_add_teams();
  public:
  const ::CMsgSignOutGameplayStats_CTeam& teams(int index) const;
  ::CMsgSignOutGameplayStats_CTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CTeam >&
      teams() const;

  // @@protoc_insertion_point(class_scope:CMsgSignOutGameplayStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CTeam > teams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData) */ {
 public:
  inline CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() : CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(nullptr) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from);
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&& from) noexcept
    : CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& operator=(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& operator=(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(
               &_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& a, CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
    CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData";
  }
  protected:
  explicit CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDotaTeamFieldNumber = 1,
    kWinnerFieldNumber = 2,
  };
  // optional uint32 dota_team = 1;
  bool has_dota_team() const;
  private:
  bool _internal_has_dota_team() const;
  public:
  void clear_dota_team();
  uint32_t dota_team() const;
  void set_dota_team(uint32_t value);
  private:
  uint32_t _internal_dota_team() const;
  void _internal_set_dota_team(uint32_t value);
  public:

  // optional bool winner = 2;
  bool has_winner() const;
  private:
  bool _internal_has_winner() const;
  public:
  void clear_winner();
  bool winner() const;
  void set_winner(bool value);
  private:
  bool _internal_winner() const;
  void _internal_set_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t dota_team_;
    bool winner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived) */ {
 public:
  inline CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived() : CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(nullptr) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from);
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived&& from) noexcept
    : CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& operator=(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& operator=(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived*>(
               &_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& a, CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from) {
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived";
  }
  protected:
  explicit CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreReductionFieldNumber = 1,
    kPostReductionFieldNumber = 2,
    kDamageTypeFieldNumber = 3,
  };
  // optional uint32 pre_reduction = 1;
  bool has_pre_reduction() const;
  private:
  bool _internal_has_pre_reduction() const;
  public:
  void clear_pre_reduction();
  uint32_t pre_reduction() const;
  void set_pre_reduction(uint32_t value);
  private:
  uint32_t _internal_pre_reduction() const;
  void _internal_set_pre_reduction(uint32_t value);
  public:

  // optional uint32 post_reduction = 2;
  bool has_post_reduction() const;
  private:
  bool _internal_has_post_reduction() const;
  public:
  void clear_post_reduction();
  uint32_t post_reduction() const;
  void set_post_reduction(uint32_t value);
  private:
  uint32_t _internal_post_reduction() const;
  void _internal_set_post_reduction(uint32_t value);
  public:

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
  bool has_damage_type() const;
  private:
  bool _internal_has_damage_type() const;
  public:
  void clear_damage_type();
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType damage_type() const;
  void set_damage_type(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType value);
  private:
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType _internal_damage_type() const;
  void _internal_set_damage_type(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t pre_reduction_;
    uint32_t post_reduction_;
    int damage_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam_CPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam.CPlayer) */ {
 public:
  inline CMsgGameMatchSignOut_CTeam_CPlayer() : CMsgGameMatchSignOut_CTeam_CPlayer(nullptr) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  CMsgGameMatchSignOut_CTeam_CPlayer(CMsgGameMatchSignOut_CTeam_CPlayer&& from) noexcept
    : CMsgGameMatchSignOut_CTeam_CPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam_CPlayer& operator=(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CTeam_CPlayer& operator=(CMsgGameMatchSignOut_CTeam_CPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CTeam_CPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CTeam_CPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam_CPlayer*>(
               &_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgGameMatchSignOut_CTeam_CPlayer& a, CMsgGameMatchSignOut_CTeam_CPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CTeam_CPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CTeam_CPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
    CMsgGameMatchSignOut_CTeam_CPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CTeam.CPlayer";
  }
  protected:
  explicit CMsgGameMatchSignOut_CTeam_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData CCustomGameData;
  typedef CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived HeroDamageReceived;

  typedef CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType HeroDamageType;
  static constexpr HeroDamageType HERO_DAMAGE_PHYSICAL =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PHYSICAL;
  static constexpr HeroDamageType HERO_DAMAGE_MAGICAL =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_MAGICAL;
  static constexpr HeroDamageType HERO_DAMAGE_PURE =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HERO_DAMAGE_PURE;
  static inline bool HeroDamageType_IsValid(int value) {
    return CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(value);
  }
  static constexpr HeroDamageType HeroDamageType_MIN =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_MIN;
  static constexpr HeroDamageType HeroDamageType_MAX =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_MAX;
  static constexpr int HeroDamageType_ARRAYSIZE =
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_HeroDamageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HeroDamageType_descriptor() {
    return CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor();
  }
  template<typename T>
  static inline const std::string& HeroDamageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HeroDamageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HeroDamageType_Name.");
    return CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_Name(enum_t_value);
  }
  static inline bool HeroDamageType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HeroDamageType* value) {
    return CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 4,
    kAbilityUpgradesFieldNumber = 32,
    kAdditionalUnitsInventoryFieldNumber = 33,
    kPermanentBuffsFieldNumber = 40,
    kTalentAbilityIdsFieldNumber = 41,
    kHeroDamageReceivedFieldNumber = 48,
    kItemPurchaseTimesFieldNumber = 63,
    kHeroDamageDealtFieldNumber = 64,
    kAbilityDraftAbilitiesFieldNumber = 79,
    kCustomGameDataFieldNumber = 35,
    kSteamIdFieldNumber = 1,
    kHeroIdFieldNumber = 3,
    kGoldFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
    kLeaverStatusFieldNumber = 9,
    kLastHitsFieldNumber = 10,
    kDeniesFieldNumber = 11,
    kGoldPerMinFieldNumber = 12,
    kXpPerMinuteFieldNumber = 13,
    kGoldSpentFieldNumber = 14,
    kLevelFieldNumber = 15,
    kScaledHeroDamageFieldNumber = 16,
    kScaledTowerDamageFieldNumber = 17,
    kScaledHeroHealingFieldNumber = 18,
    kTimeLastSeenFieldNumber = 19,
    kPartyIdFieldNumber = 21,
    kSupportAbilityValueFieldNumber = 20,
    kClaimedFarmGoldFieldNumber = 27,
    kSupportGoldFieldNumber = 28,
    kClaimedDeniesFieldNumber = 29,
    kClaimedMissesFieldNumber = 30,
    kMissesFieldNumber = 31,
    kNetWorthFieldNumber = 34,
    kMatchPlayerFlagsFieldNumber = 36,
    kHeroDamageFieldNumber = 37,
    kTowerDamageFieldNumber = 38,
    kHeroHealingFieldNumber = 39,
    kHeroPickOrderFieldNumber = 42,
    kLaneFieldNumber = 45,
    kHeroWasRandomedFieldNumber = 43,
    kHeroWasDotaPlusSuggestionFieldNumber = 50,
    kIsUsingPlusGuideFieldNumber = 47,
    kSecondsDeadFieldNumber = 51,
    kGoldLostToDeathFieldNumber = 52,
    kCommandCountFieldNumber = 53,
    kMouseClickCastCommandCountFieldNumber = 54,
    kTeleportsUsedFieldNumber = 55,
    kBountyRunesFieldNumber = 57,
    kOutpostsCapturedFieldNumber = 58,
    kDewardsFieldNumber = 59,
    kWardsPlacedFieldNumber = 60,
    kCampsStackedFieldNumber = 61,
    kPlayerSlotFieldNumber = 62,
    kPredictedPositionFieldNumber = 66,
    kFriendlyT1DestroyedTimeFieldNumber = 68,
    kEnemyT1DestroyedTimeFieldNumber = 69,
    kFriendlyRoshanKillsFieldNumber = 70,
    kEnemyRoshanKillsFieldNumber = 71,
    kPowerRunesFieldNumber = 72,
    kWaterRunesFieldNumber = 73,
    kStunDurationFieldNumber = 74,
    kTeamNumberFieldNumber = 75,
    kTeamSlotFieldNumber = 76,
    kTimePurchasedShardFieldNumber = 77,
    kTimePurchasedAghsFieldNumber = 78,
    kCavernCrawlPreferredMapVariantFieldNumber = 56,
    kLaneOutcomesFieldNumber = 67,
  };
  // repeated int32 items = 4;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  int ability_upgrades_size() const;
  private:
  int _internal_ability_upgrades_size() const;
  public:
  void clear_ability_upgrades();
  ::CMatchPlayerAbilityUpgrade* mutable_ability_upgrades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
      mutable_ability_upgrades();
  private:
  const ::CMatchPlayerAbilityUpgrade& _internal_ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* _internal_add_ability_upgrades();
  public:
  const ::CMatchPlayerAbilityUpgrade& ability_upgrades(int index) const;
  ::CMatchPlayerAbilityUpgrade* add_ability_upgrades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
      ability_upgrades() const;

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  int additional_units_inventory_size() const;
  private:
  int _internal_additional_units_inventory_size() const;
  public:
  void clear_additional_units_inventory();
  ::CMatchAdditionalUnitInventory* mutable_additional_units_inventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
      mutable_additional_units_inventory();
  private:
  const ::CMatchAdditionalUnitInventory& _internal_additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* _internal_add_additional_units_inventory();
  public:
  const ::CMatchAdditionalUnitInventory& additional_units_inventory(int index) const;
  ::CMatchAdditionalUnitInventory* add_additional_units_inventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
      additional_units_inventory() const;

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
  int permanent_buffs_size() const;
  private:
  int _internal_permanent_buffs_size() const;
  public:
  void clear_permanent_buffs();
  ::CMatchPlayerPermanentBuff* mutable_permanent_buffs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
      mutable_permanent_buffs();
  private:
  const ::CMatchPlayerPermanentBuff& _internal_permanent_buffs(int index) const;
  ::CMatchPlayerPermanentBuff* _internal_add_permanent_buffs();
  public:
  const ::CMatchPlayerPermanentBuff& permanent_buffs(int index) const;
  ::CMatchPlayerPermanentBuff* add_permanent_buffs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
      permanent_buffs() const;

  // repeated int32 talent_ability_ids = 41;
  int talent_ability_ids_size() const;
  private:
  int _internal_talent_ability_ids_size() const;
  public:
  void clear_talent_ability_ids();
  private:
  int32_t _internal_talent_ability_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_talent_ability_ids() const;
  void _internal_add_talent_ability_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_talent_ability_ids();
  public:
  int32_t talent_ability_ids(int index) const;
  void set_talent_ability_ids(int index, int32_t value);
  void add_talent_ability_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      talent_ability_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_talent_ability_ids();

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
  int hero_damage_received_size() const;
  private:
  int _internal_hero_damage_received_size() const;
  public:
  void clear_hero_damage_received();
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* mutable_hero_damage_received(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >*
      mutable_hero_damage_received();
  private:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& _internal_hero_damage_received(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* _internal_add_hero_damage_received();
  public:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& hero_damage_received(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* add_hero_damage_received();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >&
      hero_damage_received() const;

  // repeated uint32 item_purchase_times = 63;
  int item_purchase_times_size() const;
  private:
  int _internal_item_purchase_times_size() const;
  public:
  void clear_item_purchase_times();
  private:
  uint32_t _internal_item_purchase_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_item_purchase_times() const;
  void _internal_add_item_purchase_times(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_item_purchase_times();
  public:
  uint32_t item_purchase_times(int index) const;
  void set_item_purchase_times(int index, uint32_t value);
  void add_item_purchase_times(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      item_purchase_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_item_purchase_times();

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
  int hero_damage_dealt_size() const;
  private:
  int _internal_hero_damage_dealt_size() const;
  public:
  void clear_hero_damage_dealt();
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* mutable_hero_damage_dealt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >*
      mutable_hero_damage_dealt();
  private:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& _internal_hero_damage_dealt(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* _internal_add_hero_damage_dealt();
  public:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& hero_damage_dealt(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* add_hero_damage_dealt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >&
      hero_damage_dealt() const;

  // repeated int32 ability_draft_abilities = 79;
  int ability_draft_abilities_size() const;
  private:
  int _internal_ability_draft_abilities_size() const;
  public:
  void clear_ability_draft_abilities();
  private:
  int32_t _internal_ability_draft_abilities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ability_draft_abilities() const;
  void _internal_add_ability_draft_abilities(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ability_draft_abilities();
  public:
  int32_t ability_draft_abilities(int index) const;
  void set_ability_draft_abilities(int index, int32_t value);
  void add_ability_draft_abilities(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ability_draft_abilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ability_draft_abilities();

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  bool has_custom_game_data() const;
  private:
  bool _internal_has_custom_game_data() const;
  public:
  void clear_custom_game_data();
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& custom_game_data() const;
  PROTOBUF_NODISCARD ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* release_custom_game_data();
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data);
  private:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& _internal_custom_game_data() const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* _internal_mutable_custom_game_data();
  public:
  void unsafe_arena_set_allocated_custom_game_data(
      ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data);
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* unsafe_arena_release_custom_game_data();

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 gold = 5;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 leaver_status = 9;
  bool has_leaver_status() const;
  private:
  bool _internal_has_leaver_status() const;
  public:
  void clear_leaver_status();
  uint32_t leaver_status() const;
  void set_leaver_status(uint32_t value);
  private:
  uint32_t _internal_leaver_status() const;
  void _internal_set_leaver_status(uint32_t value);
  public:

  // optional uint32 last_hits = 10;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 11;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 gold_per_min = 12;
  bool has_gold_per_min() const;
  private:
  bool _internal_has_gold_per_min() const;
  public:
  void clear_gold_per_min();
  uint32_t gold_per_min() const;
  void set_gold_per_min(uint32_t value);
  private:
  uint32_t _internal_gold_per_min() const;
  void _internal_set_gold_per_min(uint32_t value);
  public:

  // optional uint32 xp_per_minute = 13;
  bool has_xp_per_minute() const;
  private:
  bool _internal_has_xp_per_minute() const;
  public:
  void clear_xp_per_minute();
  uint32_t xp_per_minute() const;
  void set_xp_per_minute(uint32_t value);
  private:
  uint32_t _internal_xp_per_minute() const;
  void _internal_set_xp_per_minute(uint32_t value);
  public:

  // optional uint32 gold_spent = 14;
  bool has_gold_spent() const;
  private:
  bool _internal_has_gold_spent() const;
  public:
  void clear_gold_spent();
  uint32_t gold_spent() const;
  void set_gold_spent(uint32_t value);
  private:
  uint32_t _internal_gold_spent() const;
  void _internal_set_gold_spent(uint32_t value);
  public:

  // optional uint32 level = 15;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 scaled_hero_damage = 16;
  bool has_scaled_hero_damage() const;
  private:
  bool _internal_has_scaled_hero_damage() const;
  public:
  void clear_scaled_hero_damage();
  uint32_t scaled_hero_damage() const;
  void set_scaled_hero_damage(uint32_t value);
  private:
  uint32_t _internal_scaled_hero_damage() const;
  void _internal_set_scaled_hero_damage(uint32_t value);
  public:

  // optional uint32 scaled_tower_damage = 17;
  bool has_scaled_tower_damage() const;
  private:
  bool _internal_has_scaled_tower_damage() const;
  public:
  void clear_scaled_tower_damage();
  uint32_t scaled_tower_damage() const;
  void set_scaled_tower_damage(uint32_t value);
  private:
  uint32_t _internal_scaled_tower_damage() const;
  void _internal_set_scaled_tower_damage(uint32_t value);
  public:

  // optional uint32 scaled_hero_healing = 18;
  bool has_scaled_hero_healing() const;
  private:
  bool _internal_has_scaled_hero_healing() const;
  public:
  void clear_scaled_hero_healing();
  uint32_t scaled_hero_healing() const;
  void set_scaled_hero_healing(uint32_t value);
  private:
  uint32_t _internal_scaled_hero_healing() const;
  void _internal_set_scaled_hero_healing(uint32_t value);
  public:

  // optional uint32 time_last_seen = 19;
  bool has_time_last_seen() const;
  private:
  bool _internal_has_time_last_seen() const;
  public:
  void clear_time_last_seen();
  uint32_t time_last_seen() const;
  void set_time_last_seen(uint32_t value);
  private:
  uint32_t _internal_time_last_seen() const;
  void _internal_set_time_last_seen(uint32_t value);
  public:

  // optional uint64 party_id = 21;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  uint64_t party_id() const;
  void set_party_id(uint64_t value);
  private:
  uint64_t _internal_party_id() const;
  void _internal_set_party_id(uint64_t value);
  public:

  // optional uint32 support_ability_value = 20;
  bool has_support_ability_value() const;
  private:
  bool _internal_has_support_ability_value() const;
  public:
  void clear_support_ability_value();
  uint32_t support_ability_value() const;
  void set_support_ability_value(uint32_t value);
  private:
  uint32_t _internal_support_ability_value() const;
  void _internal_set_support_ability_value(uint32_t value);
  public:

  // optional uint32 claimed_farm_gold = 27;
  bool has_claimed_farm_gold() const;
  private:
  bool _internal_has_claimed_farm_gold() const;
  public:
  void clear_claimed_farm_gold();
  uint32_t claimed_farm_gold() const;
  void set_claimed_farm_gold(uint32_t value);
  private:
  uint32_t _internal_claimed_farm_gold() const;
  void _internal_set_claimed_farm_gold(uint32_t value);
  public:

  // optional uint32 support_gold = 28;
  bool has_support_gold() const;
  private:
  bool _internal_has_support_gold() const;
  public:
  void clear_support_gold();
  uint32_t support_gold() const;
  void set_support_gold(uint32_t value);
  private:
  uint32_t _internal_support_gold() const;
  void _internal_set_support_gold(uint32_t value);
  public:

  // optional uint32 claimed_denies = 29;
  bool has_claimed_denies() const;
  private:
  bool _internal_has_claimed_denies() const;
  public:
  void clear_claimed_denies();
  uint32_t claimed_denies() const;
  void set_claimed_denies(uint32_t value);
  private:
  uint32_t _internal_claimed_denies() const;
  void _internal_set_claimed_denies(uint32_t value);
  public:

  // optional uint32 claimed_misses = 30;
  bool has_claimed_misses() const;
  private:
  bool _internal_has_claimed_misses() const;
  public:
  void clear_claimed_misses();
  uint32_t claimed_misses() const;
  void set_claimed_misses(uint32_t value);
  private:
  uint32_t _internal_claimed_misses() const;
  void _internal_set_claimed_misses(uint32_t value);
  public:

  // optional uint32 misses = 31;
  bool has_misses() const;
  private:
  bool _internal_has_misses() const;
  public:
  void clear_misses();
  uint32_t misses() const;
  void set_misses(uint32_t value);
  private:
  uint32_t _internal_misses() const;
  void _internal_set_misses(uint32_t value);
  public:

  // optional uint32 net_worth = 34;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 match_player_flags = 36;
  bool has_match_player_flags() const;
  private:
  bool _internal_has_match_player_flags() const;
  public:
  void clear_match_player_flags();
  uint32_t match_player_flags() const;
  void set_match_player_flags(uint32_t value);
  private:
  uint32_t _internal_match_player_flags() const;
  void _internal_set_match_player_flags(uint32_t value);
  public:

  // optional uint32 hero_damage = 37;
  bool has_hero_damage() const;
  private:
  bool _internal_has_hero_damage() const;
  public:
  void clear_hero_damage();
  uint32_t hero_damage() const;
  void set_hero_damage(uint32_t value);
  private:
  uint32_t _internal_hero_damage() const;
  void _internal_set_hero_damage(uint32_t value);
  public:

  // optional uint32 tower_damage = 38;
  bool has_tower_damage() const;
  private:
  bool _internal_has_tower_damage() const;
  public:
  void clear_tower_damage();
  uint32_t tower_damage() const;
  void set_tower_damage(uint32_t value);
  private:
  uint32_t _internal_tower_damage() const;
  void _internal_set_tower_damage(uint32_t value);
  public:

  // optional uint32 hero_healing = 39;
  bool has_hero_healing() const;
  private:
  bool _internal_has_hero_healing() const;
  public:
  void clear_hero_healing();
  uint32_t hero_healing() const;
  void set_hero_healing(uint32_t value);
  private:
  uint32_t _internal_hero_healing() const;
  void _internal_set_hero_healing(uint32_t value);
  public:

  // optional uint32 hero_pick_order = 42;
  bool has_hero_pick_order() const;
  private:
  bool _internal_has_hero_pick_order() const;
  public:
  void clear_hero_pick_order();
  uint32_t hero_pick_order() const;
  void set_hero_pick_order(uint32_t value);
  private:
  uint32_t _internal_hero_pick_order() const;
  void _internal_set_hero_pick_order(uint32_t value);
  public:

  // optional uint32 lane = 45;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional bool hero_was_randomed = 43;
  bool has_hero_was_randomed() const;
  private:
  bool _internal_has_hero_was_randomed() const;
  public:
  void clear_hero_was_randomed();
  bool hero_was_randomed() const;
  void set_hero_was_randomed(bool value);
  private:
  bool _internal_hero_was_randomed() const;
  void _internal_set_hero_was_randomed(bool value);
  public:

  // optional bool hero_was_dota_plus_suggestion = 50;
  bool has_hero_was_dota_plus_suggestion() const;
  private:
  bool _internal_has_hero_was_dota_plus_suggestion() const;
  public:
  void clear_hero_was_dota_plus_suggestion();
  bool hero_was_dota_plus_suggestion() const;
  void set_hero_was_dota_plus_suggestion(bool value);
  private:
  bool _internal_hero_was_dota_plus_suggestion() const;
  void _internal_set_hero_was_dota_plus_suggestion(bool value);
  public:

  // optional bool is_using_plus_guide = 47;
  bool has_is_using_plus_guide() const;
  private:
  bool _internal_has_is_using_plus_guide() const;
  public:
  void clear_is_using_plus_guide();
  bool is_using_plus_guide() const;
  void set_is_using_plus_guide(bool value);
  private:
  bool _internal_is_using_plus_guide() const;
  void _internal_set_is_using_plus_guide(bool value);
  public:

  // optional uint32 seconds_dead = 51;
  bool has_seconds_dead() const;
  private:
  bool _internal_has_seconds_dead() const;
  public:
  void clear_seconds_dead();
  uint32_t seconds_dead() const;
  void set_seconds_dead(uint32_t value);
  private:
  uint32_t _internal_seconds_dead() const;
  void _internal_set_seconds_dead(uint32_t value);
  public:

  // optional uint32 gold_lost_to_death = 52;
  bool has_gold_lost_to_death() const;
  private:
  bool _internal_has_gold_lost_to_death() const;
  public:
  void clear_gold_lost_to_death();
  uint32_t gold_lost_to_death() const;
  void set_gold_lost_to_death(uint32_t value);
  private:
  uint32_t _internal_gold_lost_to_death() const;
  void _internal_set_gold_lost_to_death(uint32_t value);
  public:

  // optional uint32 command_count = 53;
  bool has_command_count() const;
  private:
  bool _internal_has_command_count() const;
  public:
  void clear_command_count();
  uint32_t command_count() const;
  void set_command_count(uint32_t value);
  private:
  uint32_t _internal_command_count() const;
  void _internal_set_command_count(uint32_t value);
  public:

  // optional uint32 mouse_click_cast_command_count = 54;
  bool has_mouse_click_cast_command_count() const;
  private:
  bool _internal_has_mouse_click_cast_command_count() const;
  public:
  void clear_mouse_click_cast_command_count();
  uint32_t mouse_click_cast_command_count() const;
  void set_mouse_click_cast_command_count(uint32_t value);
  private:
  uint32_t _internal_mouse_click_cast_command_count() const;
  void _internal_set_mouse_click_cast_command_count(uint32_t value);
  public:

  // optional uint32 teleports_used = 55;
  bool has_teleports_used() const;
  private:
  bool _internal_has_teleports_used() const;
  public:
  void clear_teleports_used();
  uint32_t teleports_used() const;
  void set_teleports_used(uint32_t value);
  private:
  uint32_t _internal_teleports_used() const;
  void _internal_set_teleports_used(uint32_t value);
  public:

  // optional uint32 bounty_runes = 57;
  bool has_bounty_runes() const;
  private:
  bool _internal_has_bounty_runes() const;
  public:
  void clear_bounty_runes();
  uint32_t bounty_runes() const;
  void set_bounty_runes(uint32_t value);
  private:
  uint32_t _internal_bounty_runes() const;
  void _internal_set_bounty_runes(uint32_t value);
  public:

  // optional uint32 outposts_captured = 58;
  bool has_outposts_captured() const;
  private:
  bool _internal_has_outposts_captured() const;
  public:
  void clear_outposts_captured();
  uint32_t outposts_captured() const;
  void set_outposts_captured(uint32_t value);
  private:
  uint32_t _internal_outposts_captured() const;
  void _internal_set_outposts_captured(uint32_t value);
  public:

  // optional uint32 dewards = 59;
  bool has_dewards() const;
  private:
  bool _internal_has_dewards() const;
  public:
  void clear_dewards();
  uint32_t dewards() const;
  void set_dewards(uint32_t value);
  private:
  uint32_t _internal_dewards() const;
  void _internal_set_dewards(uint32_t value);
  public:

  // optional uint32 wards_placed = 60;
  bool has_wards_placed() const;
  private:
  bool _internal_has_wards_placed() const;
  public:
  void clear_wards_placed();
  uint32_t wards_placed() const;
  void set_wards_placed(uint32_t value);
  private:
  uint32_t _internal_wards_placed() const;
  void _internal_set_wards_placed(uint32_t value);
  public:

  // optional uint32 camps_stacked = 61;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  uint32_t camps_stacked() const;
  void set_camps_stacked(uint32_t value);
  private:
  uint32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(uint32_t value);
  public:

  // optional uint32 player_slot = 62;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 predicted_position = 66;
  bool has_predicted_position() const;
  private:
  bool _internal_has_predicted_position() const;
  public:
  void clear_predicted_position();
  uint32_t predicted_position() const;
  void set_predicted_position(uint32_t value);
  private:
  uint32_t _internal_predicted_position() const;
  void _internal_set_predicted_position(uint32_t value);
  public:

  // optional uint32 friendly_t1_destroyed_time = 68;
  bool has_friendly_t1_destroyed_time() const;
  private:
  bool _internal_has_friendly_t1_destroyed_time() const;
  public:
  void clear_friendly_t1_destroyed_time();
  uint32_t friendly_t1_destroyed_time() const;
  void set_friendly_t1_destroyed_time(uint32_t value);
  private:
  uint32_t _internal_friendly_t1_destroyed_time() const;
  void _internal_set_friendly_t1_destroyed_time(uint32_t value);
  public:

  // optional uint32 enemy_t1_destroyed_time = 69;
  bool has_enemy_t1_destroyed_time() const;
  private:
  bool _internal_has_enemy_t1_destroyed_time() const;
  public:
  void clear_enemy_t1_destroyed_time();
  uint32_t enemy_t1_destroyed_time() const;
  void set_enemy_t1_destroyed_time(uint32_t value);
  private:
  uint32_t _internal_enemy_t1_destroyed_time() const;
  void _internal_set_enemy_t1_destroyed_time(uint32_t value);
  public:

  // optional uint32 friendly_roshan_kills = 70;
  bool has_friendly_roshan_kills() const;
  private:
  bool _internal_has_friendly_roshan_kills() const;
  public:
  void clear_friendly_roshan_kills();
  uint32_t friendly_roshan_kills() const;
  void set_friendly_roshan_kills(uint32_t value);
  private:
  uint32_t _internal_friendly_roshan_kills() const;
  void _internal_set_friendly_roshan_kills(uint32_t value);
  public:

  // optional uint32 enemy_roshan_kills = 71;
  bool has_enemy_roshan_kills() const;
  private:
  bool _internal_has_enemy_roshan_kills() const;
  public:
  void clear_enemy_roshan_kills();
  uint32_t enemy_roshan_kills() const;
  void set_enemy_roshan_kills(uint32_t value);
  private:
  uint32_t _internal_enemy_roshan_kills() const;
  void _internal_set_enemy_roshan_kills(uint32_t value);
  public:

  // optional uint32 power_runes = 72;
  bool has_power_runes() const;
  private:
  bool _internal_has_power_runes() const;
  public:
  void clear_power_runes();
  uint32_t power_runes() const;
  void set_power_runes(uint32_t value);
  private:
  uint32_t _internal_power_runes() const;
  void _internal_set_power_runes(uint32_t value);
  public:

  // optional uint32 water_runes = 73;
  bool has_water_runes() const;
  private:
  bool _internal_has_water_runes() const;
  public:
  void clear_water_runes();
  uint32_t water_runes() const;
  void set_water_runes(uint32_t value);
  private:
  uint32_t _internal_water_runes() const;
  void _internal_set_water_runes(uint32_t value);
  public:

  // optional float stun_duration = 74;
  bool has_stun_duration() const;
  private:
  bool _internal_has_stun_duration() const;
  public:
  void clear_stun_duration();
  float stun_duration() const;
  void set_stun_duration(float value);
  private:
  float _internal_stun_duration() const;
  void _internal_set_stun_duration(float value);
  public:

  // optional .DOTA_GC_TEAM team_number = 75 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team_number() const;
  private:
  bool _internal_has_team_number() const;
  public:
  void clear_team_number();
  ::DOTA_GC_TEAM team_number() const;
  void set_team_number(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team_number() const;
  void _internal_set_team_number(::DOTA_GC_TEAM value);
  public:

  // optional uint32 team_slot = 76;
  bool has_team_slot() const;
  private:
  bool _internal_has_team_slot() const;
  public:
  void clear_team_slot();
  uint32_t team_slot() const;
  void set_team_slot(uint32_t value);
  private:
  uint32_t _internal_team_slot() const;
  void _internal_set_team_slot(uint32_t value);
  public:

  // optional uint32 time_purchased_shard = 77;
  bool has_time_purchased_shard() const;
  private:
  bool _internal_has_time_purchased_shard() const;
  public:
  void clear_time_purchased_shard();
  uint32_t time_purchased_shard() const;
  void set_time_purchased_shard(uint32_t value);
  private:
  uint32_t _internal_time_purchased_shard() const;
  void _internal_set_time_purchased_shard(uint32_t value);
  public:

  // optional uint32 time_purchased_aghs = 78;
  bool has_time_purchased_aghs() const;
  private:
  bool _internal_has_time_purchased_aghs() const;
  public:
  void clear_time_purchased_aghs();
  uint32_t time_purchased_aghs() const;
  void set_time_purchased_aghs(uint32_t value);
  private:
  uint32_t _internal_time_purchased_aghs() const;
  void _internal_set_time_purchased_aghs(uint32_t value);
  public:

  // optional uint32 cavern_crawl_preferred_map_variant = 56 [default = 255];
  bool has_cavern_crawl_preferred_map_variant() const;
  private:
  bool _internal_has_cavern_crawl_preferred_map_variant() const;
  public:
  void clear_cavern_crawl_preferred_map_variant();
  uint32_t cavern_crawl_preferred_map_variant() const;
  void set_cavern_crawl_preferred_map_variant(uint32_t value);
  private:
  uint32_t _internal_cavern_crawl_preferred_map_variant() const;
  void _internal_set_cavern_crawl_preferred_map_variant(uint32_t value);
  public:

  // optional uint32 lane_outcomes = 67 [default = 255];
  bool has_lane_outcomes() const;
  private:
  bool _internal_has_lane_outcomes() const;
  public:
  void clear_lane_outcomes();
  uint32_t lane_outcomes() const;
  void set_lane_outcomes(uint32_t value);
  private:
  uint32_t _internal_lane_outcomes() const;
  void _internal_set_lane_outcomes(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam.CPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade > ability_upgrades_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory > additional_units_inventory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff > permanent_buffs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > talent_ability_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived > hero_damage_received_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > item_purchase_times_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived > hero_damage_dealt_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ability_draft_abilities_;
    ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data_;
    uint64_t steam_id_;
    uint32_t hero_id_;
    uint32_t gold_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t leaver_status_;
    uint32_t last_hits_;
    uint32_t denies_;
    uint32_t gold_per_min_;
    uint32_t xp_per_minute_;
    uint32_t gold_spent_;
    uint32_t level_;
    uint32_t scaled_hero_damage_;
    uint32_t scaled_tower_damage_;
    uint32_t scaled_hero_healing_;
    uint32_t time_last_seen_;
    uint64_t party_id_;
    uint32_t support_ability_value_;
    uint32_t claimed_farm_gold_;
    uint32_t support_gold_;
    uint32_t claimed_denies_;
    uint32_t claimed_misses_;
    uint32_t misses_;
    uint32_t net_worth_;
    uint32_t match_player_flags_;
    uint32_t hero_damage_;
    uint32_t tower_damage_;
    uint32_t hero_healing_;
    uint32_t hero_pick_order_;
    uint32_t lane_;
    bool hero_was_randomed_;
    bool hero_was_dota_plus_suggestion_;
    bool is_using_plus_guide_;
    uint32_t seconds_dead_;
    uint32_t gold_lost_to_death_;
    uint32_t command_count_;
    uint32_t mouse_click_cast_command_count_;
    uint32_t teleports_used_;
    uint32_t bounty_runes_;
    uint32_t outposts_captured_;
    uint32_t dewards_;
    uint32_t wards_placed_;
    uint32_t camps_stacked_;
    uint32_t player_slot_;
    uint32_t predicted_position_;
    uint32_t friendly_t1_destroyed_time_;
    uint32_t enemy_t1_destroyed_time_;
    uint32_t friendly_roshan_kills_;
    uint32_t enemy_roshan_kills_;
    uint32_t power_runes_;
    uint32_t water_runes_;
    float stun_duration_;
    int team_number_;
    uint32_t team_slot_;
    uint32_t time_purchased_shard_;
    uint32_t time_purchased_aghs_;
    uint32_t cavern_crawl_preferred_map_variant_;
    uint32_t lane_outcomes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CTeam) */ {
 public:
  inline CMsgGameMatchSignOut_CTeam() : CMsgGameMatchSignOut_CTeam(nullptr) {}
  ~CMsgGameMatchSignOut_CTeam() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from);
  CMsgGameMatchSignOut_CTeam(CMsgGameMatchSignOut_CTeam&& from) noexcept
    : CMsgGameMatchSignOut_CTeam() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CTeam& operator=(const CMsgGameMatchSignOut_CTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CTeam& operator=(CMsgGameMatchSignOut_CTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CTeam*>(
               &_CMsgGameMatchSignOut_CTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgGameMatchSignOut_CTeam& a, CMsgGameMatchSignOut_CTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CTeam& from) {
    CMsgGameMatchSignOut_CTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CTeam";
  }
  protected:
  explicit CMsgGameMatchSignOut_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignOut_CTeam_CPlayer CPlayer;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgGameMatchSignOut_CTeam_CPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
      mutable_players();
  private:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer& _internal_players(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer* _internal_add_players();
  public:
  const ::CMsgGameMatchSignOut_CTeam_CPlayer& players(int index) const;
  ::CMsgGameMatchSignOut_CTeam_CPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CAdditionalSignoutMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CAdditionalSignoutMsg) */ {
 public:
  inline CMsgGameMatchSignOut_CAdditionalSignoutMsg() : CMsgGameMatchSignOut_CAdditionalSignoutMsg(nullptr) {}
  ~CMsgGameMatchSignOut_CAdditionalSignoutMsg() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CAdditionalSignoutMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from);
  CMsgGameMatchSignOut_CAdditionalSignoutMsg(CMsgGameMatchSignOut_CAdditionalSignoutMsg&& from) noexcept
    : CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CAdditionalSignoutMsg& operator=(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CAdditionalSignoutMsg& operator=(CMsgGameMatchSignOut_CAdditionalSignoutMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CAdditionalSignoutMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CAdditionalSignoutMsg* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CAdditionalSignoutMsg*>(
               &_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg& a, CMsgGameMatchSignOut_CAdditionalSignoutMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CAdditionalSignoutMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CAdditionalSignoutMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
    CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CAdditionalSignoutMsg";
  }
  protected:
  explicit CMsgGameMatchSignOut_CAdditionalSignoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional bytes contents = 2;
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CSocialFeedMatchEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CSocialFeedMatchEvent) */ {
 public:
  inline CMsgGameMatchSignOut_CSocialFeedMatchEvent() : CMsgGameMatchSignOut_CSocialFeedMatchEvent(nullptr) {}
  ~CMsgGameMatchSignOut_CSocialFeedMatchEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CSocialFeedMatchEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from);
  CMsgGameMatchSignOut_CSocialFeedMatchEvent(CMsgGameMatchSignOut_CSocialFeedMatchEvent&& from) noexcept
    : CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CSocialFeedMatchEvent& operator=(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CSocialFeedMatchEvent& operator=(CMsgGameMatchSignOut_CSocialFeedMatchEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CSocialFeedMatchEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CSocialFeedMatchEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CSocialFeedMatchEvent*>(
               &_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgGameMatchSignOut_CSocialFeedMatchEvent& a, CMsgGameMatchSignOut_CSocialFeedMatchEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CSocialFeedMatchEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CSocialFeedMatchEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
    CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CSocialFeedMatchEvent";
  }
  protected:
  explicit CMsgGameMatchSignOut_CSocialFeedMatchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kEventTypeFieldNumber = 3,
    kGameTimeFieldNumber = 4,
    kReplayTimeFieldNumber = 5,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 event_type = 3;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  uint32_t event_type() const;
  void set_event_type(uint32_t value);
  private:
  uint32_t _internal_event_type() const;
  void _internal_set_event_type(uint32_t value);
  public:

  // optional int32 game_time = 4;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  int32_t game_time() const;
  void set_game_time(int32_t value);
  private:
  int32_t _internal_game_time() const;
  void _internal_set_game_time(int32_t value);
  public:

  // optional uint32 replay_time = 5;
  bool has_replay_time() const;
  private:
  bool _internal_has_replay_time() const;
  public:
  void clear_replay_time();
  uint32_t replay_time() const;
  void set_replay_time(uint32_t value);
  private:
  uint32_t _internal_replay_time() const;
  void _internal_set_replay_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t timestamp_;
    uint32_t event_type_;
    int32_t game_time_;
    uint32_t replay_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_CCustomGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.CCustomGameData) */ {
 public:
  inline CMsgGameMatchSignOut_CCustomGameData() : CMsgGameMatchSignOut_CCustomGameData(nullptr) {}
  ~CMsgGameMatchSignOut_CCustomGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CCustomGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from);
  CMsgGameMatchSignOut_CCustomGameData(CMsgGameMatchSignOut_CCustomGameData&& from) noexcept
    : CMsgGameMatchSignOut_CCustomGameData() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_CCustomGameData& operator=(const CMsgGameMatchSignOut_CCustomGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_CCustomGameData& operator=(CMsgGameMatchSignOut_CCustomGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_CCustomGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_CCustomGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_CCustomGameData*>(
               &_CMsgGameMatchSignOut_CCustomGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgGameMatchSignOut_CCustomGameData& a, CMsgGameMatchSignOut_CCustomGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_CCustomGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_CCustomGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_CCustomGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_CCustomGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_CCustomGameData& from) {
    CMsgGameMatchSignOut_CCustomGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_CCustomGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.CCustomGameData";
  }
  protected:
  explicit CMsgGameMatchSignOut_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublishTimestampFieldNumber = 1,
  };
  // optional uint32 publish_timestamp = 1;
  bool has_publish_timestamp() const;
  private:
  bool _internal_has_publish_timestamp() const;
  public:
  void clear_publish_timestamp();
  uint32_t publish_timestamp() const;
  void set_publish_timestamp(uint32_t value);
  private:
  uint32_t _internal_publish_timestamp() const;
  void _internal_set_publish_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.CCustomGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t publish_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_EventGameLeaderboardEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.EventGameLeaderboardEntry) */ {
 public:
  inline CMsgGameMatchSignOut_EventGameLeaderboardEntry() : CMsgGameMatchSignOut_EventGameLeaderboardEntry(nullptr) {}
  ~CMsgGameMatchSignOut_EventGameLeaderboardEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_EventGameLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_EventGameLeaderboardEntry(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from);
  CMsgGameMatchSignOut_EventGameLeaderboardEntry(CMsgGameMatchSignOut_EventGameLeaderboardEntry&& from) noexcept
    : CMsgGameMatchSignOut_EventGameLeaderboardEntry() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_EventGameLeaderboardEntry& operator=(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_EventGameLeaderboardEntry& operator=(CMsgGameMatchSignOut_EventGameLeaderboardEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_EventGameLeaderboardEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_EventGameLeaderboardEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_EventGameLeaderboardEntry*>(
               &_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgGameMatchSignOut_EventGameLeaderboardEntry& a, CMsgGameMatchSignOut_EventGameLeaderboardEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_EventGameLeaderboardEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_EventGameLeaderboardEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
    CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.EventGameLeaderboardEntry";
  }
  protected:
  explicit CMsgGameMatchSignOut_EventGameLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameSuffixFieldNumber = 1,
    kScoreFieldNumber = 2,
    kExtraData1FieldNumber = 3,
    kExtraData2FieldNumber = 4,
    kExtraData3FieldNumber = 5,
    kExtraData4FieldNumber = 6,
    kExtraData5FieldNumber = 7,
  };
  // optional string name_suffix = 1;
  bool has_name_suffix() const;
  private:
  bool _internal_has_name_suffix() const;
  public:
  void clear_name_suffix();
  const std::string& name_suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_suffix();
  PROTOBUF_NODISCARD std::string* release_name_suffix();
  void set_allocated_name_suffix(std::string* name_suffix);
  private:
  const std::string& _internal_name_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_suffix(const std::string& value);
  std::string* _internal_mutable_name_suffix();
  public:

  // optional int32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  int32_t score() const;
  void set_score(int32_t value);
  private:
  int32_t _internal_score() const;
  void _internal_set_score(int32_t value);
  public:

  // optional uint32 extra_data_1 = 3;
  bool has_extra_data_1() const;
  private:
  bool _internal_has_extra_data_1() const;
  public:
  void clear_extra_data_1();
  uint32_t extra_data_1() const;
  void set_extra_data_1(uint32_t value);
  private:
  uint32_t _internal_extra_data_1() const;
  void _internal_set_extra_data_1(uint32_t value);
  public:

  // optional uint32 extra_data_2 = 4;
  bool has_extra_data_2() const;
  private:
  bool _internal_has_extra_data_2() const;
  public:
  void clear_extra_data_2();
  uint32_t extra_data_2() const;
  void set_extra_data_2(uint32_t value);
  private:
  uint32_t _internal_extra_data_2() const;
  void _internal_set_extra_data_2(uint32_t value);
  public:

  // optional uint32 extra_data_3 = 5;
  bool has_extra_data_3() const;
  private:
  bool _internal_has_extra_data_3() const;
  public:
  void clear_extra_data_3();
  uint32_t extra_data_3() const;
  void set_extra_data_3(uint32_t value);
  private:
  uint32_t _internal_extra_data_3() const;
  void _internal_set_extra_data_3(uint32_t value);
  public:

  // optional uint32 extra_data_4 = 6;
  bool has_extra_data_4() const;
  private:
  bool _internal_has_extra_data_4() const;
  public:
  void clear_extra_data_4();
  uint32_t extra_data_4() const;
  void set_extra_data_4(uint32_t value);
  private:
  uint32_t _internal_extra_data_4() const;
  void _internal_set_extra_data_4(uint32_t value);
  public:

  // optional uint32 extra_data_5 = 7;
  bool has_extra_data_5() const;
  private:
  bool _internal_has_extra_data_5() const;
  public:
  void clear_extra_data_5();
  uint32_t extra_data_5() const;
  void set_extra_data_5(uint32_t value);
  private:
  uint32_t _internal_extra_data_5() const;
  void _internal_set_extra_data_5(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_suffix_;
    int32_t score_;
    uint32_t extra_data_1_;
    uint32_t extra_data_2_;
    uint32_t extra_data_3_;
    uint32_t extra_data_4_;
    uint32_t extra_data_5_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut_WardPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut.WardPlacement) */ {
 public:
  inline CMsgGameMatchSignOut_WardPlacement() : CMsgGameMatchSignOut_WardPlacement(nullptr) {}
  ~CMsgGameMatchSignOut_WardPlacement() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_WardPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut_WardPlacement(const CMsgGameMatchSignOut_WardPlacement& from);
  CMsgGameMatchSignOut_WardPlacement(CMsgGameMatchSignOut_WardPlacement&& from) noexcept
    : CMsgGameMatchSignOut_WardPlacement() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut_WardPlacement& operator=(const CMsgGameMatchSignOut_WardPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut_WardPlacement& operator=(CMsgGameMatchSignOut_WardPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut_WardPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut_WardPlacement* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut_WardPlacement*>(
               &_CMsgGameMatchSignOut_WardPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgGameMatchSignOut_WardPlacement& a, CMsgGameMatchSignOut_WardPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut_WardPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut_WardPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut_WardPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut_WardPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut_WardPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut_WardPlacement& from) {
    CMsgGameMatchSignOut_WardPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut_WardPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut.WardPlacement";
  }
  protected:
  explicit CMsgGameMatchSignOut_WardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 2,
    kPlacedTimeFieldNumber = 3,
    kBuildingStateFieldNumber = 4,
    kCreepStateFieldNumber = 5,
    kRoshanAliveFieldNumber = 6,
    kPositionXFieldNumber = 7,
    kPositionYFieldNumber = 8,
    kPlayerIdFieldNumber = 1,
  };
  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 placed_time = 3;
  bool has_placed_time() const;
  private:
  bool _internal_has_placed_time() const;
  public:
  void clear_placed_time();
  uint32_t placed_time() const;
  void set_placed_time(uint32_t value);
  private:
  uint32_t _internal_placed_time() const;
  void _internal_set_placed_time(uint32_t value);
  public:

  // optional uint32 building_state = 4;
  bool has_building_state() const;
  private:
  bool _internal_has_building_state() const;
  public:
  void clear_building_state();
  uint32_t building_state() const;
  void set_building_state(uint32_t value);
  private:
  uint32_t _internal_building_state() const;
  void _internal_set_building_state(uint32_t value);
  public:

  // optional uint32 creep_state = 5;
  bool has_creep_state() const;
  private:
  bool _internal_has_creep_state() const;
  public:
  void clear_creep_state();
  uint32_t creep_state() const;
  void set_creep_state(uint32_t value);
  private:
  uint32_t _internal_creep_state() const;
  void _internal_set_creep_state(uint32_t value);
  public:

  // optional bool roshan_alive = 6;
  bool has_roshan_alive() const;
  private:
  bool _internal_has_roshan_alive() const;
  public:
  void clear_roshan_alive();
  bool roshan_alive() const;
  void set_roshan_alive(bool value);
  private:
  bool _internal_roshan_alive() const;
  void _internal_set_roshan_alive(bool value);
  public:

  // optional uint32 position_x = 7;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  uint32_t position_x() const;
  void set_position_x(uint32_t value);
  private:
  uint32_t _internal_position_x() const;
  void _internal_set_position_x(uint32_t value);
  public:

  // optional uint32 position_y = 8;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  uint32_t position_y() const;
  void set_position_y(uint32_t value);
  private:
  uint32_t _internal_position_y() const;
  void _internal_set_position_y(uint32_t value);
  public:

  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut.WardPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_id_;
    uint32_t placed_time_;
    uint32_t building_state_;
    uint32_t creep_state_;
    bool roshan_alive_;
    uint32_t position_x_;
    uint32_t position_y_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOut final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOut) */ {
 public:
  inline CMsgGameMatchSignOut() : CMsgGameMatchSignOut(nullptr) {}
  ~CMsgGameMatchSignOut() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOut(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from);
  CMsgGameMatchSignOut(CMsgGameMatchSignOut&& from) noexcept
    : CMsgGameMatchSignOut() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOut& operator=(const CMsgGameMatchSignOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOut& operator=(CMsgGameMatchSignOut&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOut& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOut* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOut*>(
               &_CMsgGameMatchSignOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgGameMatchSignOut& a, CMsgGameMatchSignOut& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOut* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOut* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOut>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOut& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOut& from) {
    CMsgGameMatchSignOut::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOut* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOut";
  }
  protected:
  explicit CMsgGameMatchSignOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignOut_CTeam CTeam;
  typedef CMsgGameMatchSignOut_CAdditionalSignoutMsg CAdditionalSignoutMsg;
  typedef CMsgGameMatchSignOut_CSocialFeedMatchEvent CSocialFeedMatchEvent;
  typedef CMsgGameMatchSignOut_CCustomGameData CCustomGameData;
  typedef CMsgGameMatchSignOut_EventGameLeaderboardEntry EventGameLeaderboardEntry;
  typedef CMsgGameMatchSignOut_WardPlacement WardPlacement;

  // accessors -------------------------------------------------------

  enum : int {
    kNumPlayersFieldNumber = 5,
    kTeamsFieldNumber = 6,
    kTowerStatusFieldNumber = 8,
    kBarracksStatusFieldNumber = 9,
    kPicksBansFieldNumber = 15,
    kPlayerStrangeCountAdjustmentsFieldNumber = 17,
    kAdditionalMsgsFieldNumber = 20,
    kSocialFeedEventsFieldNumber = 36,
    kTeamScoresFieldNumber = 39,
    kFantasyStatsFieldNumber = 41,
    kEventGameLeaderboardEntriesFieldNumber = 42,
    kWardPlacementsFieldNumber = 43,
    kExtraMessagesFieldNumber = 54,
    kServerAddrFieldNumber = 11,
    kPoorNetworkConditionsFieldNumber = 35,
    kCustomGameDataFieldNumber = 37,
    kGameplayStatsFieldNumber = 44,
    kMatchIdFieldNumber = 1,
    kDurationFieldNumber = 2,
    kDateFieldNumber = 4,
    kClusterFieldNumber = 10,
    kFirstBloodTimeFieldNumber = 12,
    kEventScoreFieldNumber = 14,
    kServerVersionFieldNumber = 19,
    kAverageNetworthDeltaFieldNumber = 22,
    kGoodGuysWinFieldNumber = 3,
    kAutomaticSurrenderFieldNumber = 18,
    kTrainingDataRecordedFieldNumber = 55,
    kMatchFlagsFieldNumber = 38,
    kPreGameDurationFieldNumber = 40,
    kWinningTeamFieldNumber = 56,
    kNormalizedWinProbabilityDiffFieldNumber = 57,
  };
  // repeated uint32 num_players = 5;
  int num_players_size() const;
  private:
  int _internal_num_players_size() const;
  public:
  void clear_num_players();
  private:
  uint32_t _internal_num_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_num_players() const;
  void _internal_add_num_players(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_num_players();
  public:
  uint32_t num_players(int index) const;
  void set_num_players(int index, uint32_t value);
  void add_num_players(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      num_players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_num_players();

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgGameMatchSignOut_CTeam* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
      mutable_teams();
  private:
  const ::CMsgGameMatchSignOut_CTeam& _internal_teams(int index) const;
  ::CMsgGameMatchSignOut_CTeam* _internal_add_teams();
  public:
  const ::CMsgGameMatchSignOut_CTeam& teams(int index) const;
  ::CMsgGameMatchSignOut_CTeam* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
      teams() const;

  // repeated uint32 tower_status = 8;
  int tower_status_size() const;
  private:
  int _internal_tower_status_size() const;
  public:
  void clear_tower_status();
  private:
  uint32_t _internal_tower_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tower_status() const;
  void _internal_add_tower_status(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tower_status();
  public:
  uint32_t tower_status(int index) const;
  void set_tower_status(int index, uint32_t value);
  void add_tower_status(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tower_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tower_status();

  // repeated uint32 barracks_status = 9;
  int barracks_status_size() const;
  private:
  int _internal_barracks_status_size() const;
  public:
  void clear_barracks_status();
  private:
  uint32_t _internal_barracks_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_barracks_status() const;
  void _internal_add_barracks_status(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_barracks_status();
  public:
  uint32_t barracks_status(int index) const;
  void set_barracks_status(int index, uint32_t value);
  void add_barracks_status(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      barracks_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_barracks_status();

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  int picks_bans_size() const;
  private:
  int _internal_picks_bans_size() const;
  public:
  void clear_picks_bans();
  ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  private:
  const ::CMatchHeroSelectEvent& _internal_picks_bans(int index) const;
  ::CMatchHeroSelectEvent* _internal_add_picks_bans();
  public:
  const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::CMatchHeroSelectEvent* add_picks_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  int player_strange_count_adjustments_size() const;
  private:
  int _internal_player_strange_count_adjustments_size() const;
  public:
  void clear_player_strange_count_adjustments();
  ::CMsgEconPlayerStrangeCountAdjustment* mutable_player_strange_count_adjustments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >*
      mutable_player_strange_count_adjustments();
  private:
  const ::CMsgEconPlayerStrangeCountAdjustment& _internal_player_strange_count_adjustments(int index) const;
  ::CMsgEconPlayerStrangeCountAdjustment* _internal_add_player_strange_count_adjustments();
  public:
  const ::CMsgEconPlayerStrangeCountAdjustment& player_strange_count_adjustments(int index) const;
  ::CMsgEconPlayerStrangeCountAdjustment* add_player_strange_count_adjustments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >&
      player_strange_count_adjustments() const;

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  int additional_msgs_size() const;
  private:
  int _internal_additional_msgs_size() const;
  public:
  void clear_additional_msgs();
  ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* mutable_additional_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >*
      mutable_additional_msgs();
  private:
  const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& _internal_additional_msgs(int index) const;
  ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* _internal_add_additional_msgs();
  public:
  const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& additional_msgs(int index) const;
  ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* add_additional_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >&
      additional_msgs() const;

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  int social_feed_events_size() const;
  private:
  int _internal_social_feed_events_size() const;
  public:
  void clear_social_feed_events();
  ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* mutable_social_feed_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >*
      mutable_social_feed_events();
  private:
  const ::CMsgGameMatchSignOut_CSocialFeedMatchEvent& _internal_social_feed_events(int index) const;
  ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* _internal_add_social_feed_events();
  public:
  const ::CMsgGameMatchSignOut_CSocialFeedMatchEvent& social_feed_events(int index) const;
  ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* add_social_feed_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >&
      social_feed_events() const;

  // repeated uint32 team_scores = 39;
  int team_scores_size() const;
  private:
  int _internal_team_scores_size() const;
  public:
  void clear_team_scores();
  private:
  uint32_t _internal_team_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_team_scores() const;
  void _internal_add_team_scores(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_team_scores();
  public:
  uint32_t team_scores(int index) const;
  void set_team_scores(int index, uint32_t value);
  void add_team_scores(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      team_scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_team_scores();

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  int fantasy_stats_size() const;
  private:
  int _internal_fantasy_stats_size() const;
  public:
  void clear_fantasy_stats();
  ::CMsgDOTAFantasyPlayerStats* mutable_fantasy_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
      mutable_fantasy_stats();
  private:
  const ::CMsgDOTAFantasyPlayerStats& _internal_fantasy_stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* _internal_add_fantasy_stats();
  public:
  const ::CMsgDOTAFantasyPlayerStats& fantasy_stats(int index) const;
  ::CMsgDOTAFantasyPlayerStats* add_fantasy_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
      fantasy_stats() const;

  // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  int event_game_leaderboard_entries_size() const;
  private:
  int _internal_event_game_leaderboard_entries_size() const;
  public:
  void clear_event_game_leaderboard_entries();
  ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* mutable_event_game_leaderboard_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >*
      mutable_event_game_leaderboard_entries();
  private:
  const ::CMsgGameMatchSignOut_EventGameLeaderboardEntry& _internal_event_game_leaderboard_entries(int index) const;
  ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* _internal_add_event_game_leaderboard_entries();
  public:
  const ::CMsgGameMatchSignOut_EventGameLeaderboardEntry& event_game_leaderboard_entries(int index) const;
  ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* add_event_game_leaderboard_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >&
      event_game_leaderboard_entries() const;

  // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  int ward_placements_size() const;
  private:
  int _internal_ward_placements_size() const;
  public:
  void clear_ward_placements();
  ::CMsgGameMatchSignOut_WardPlacement* mutable_ward_placements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_WardPlacement >*
      mutable_ward_placements();
  private:
  const ::CMsgGameMatchSignOut_WardPlacement& _internal_ward_placements(int index) const;
  ::CMsgGameMatchSignOut_WardPlacement* _internal_add_ward_placements();
  public:
  const ::CMsgGameMatchSignOut_WardPlacement& ward_placements(int index) const;
  ::CMsgGameMatchSignOut_WardPlacement* add_ward_placements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_WardPlacement >&
      ward_placements() const;

  // repeated .CExtraMsgBlock extra_messages = 54;
  int extra_messages_size() const;
  private:
  int _internal_extra_messages_size() const;
  public:
  void clear_extra_messages();
  ::CExtraMsgBlock* mutable_extra_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CExtraMsgBlock >*
      mutable_extra_messages();
  private:
  const ::CExtraMsgBlock& _internal_extra_messages(int index) const;
  ::CExtraMsgBlock* _internal_add_extra_messages();
  public:
  const ::CExtraMsgBlock& extra_messages(int index) const;
  ::CExtraMsgBlock* add_extra_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CExtraMsgBlock >&
      extra_messages() const;

  // optional string server_addr = 11;
  bool has_server_addr() const;
  private:
  bool _internal_has_server_addr() const;
  public:
  void clear_server_addr();
  const std::string& server_addr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_addr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_addr();
  PROTOBUF_NODISCARD std::string* release_server_addr();
  void set_allocated_server_addr(std::string* server_addr);
  private:
  const std::string& _internal_server_addr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_addr(const std::string& value);
  std::string* _internal_mutable_server_addr();
  public:

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
  bool has_poor_network_conditions() const;
  private:
  bool _internal_has_poor_network_conditions() const;
  public:
  void clear_poor_network_conditions();
  const ::CMsgPoorNetworkConditions& poor_network_conditions() const;
  PROTOBUF_NODISCARD ::CMsgPoorNetworkConditions* release_poor_network_conditions();
  ::CMsgPoorNetworkConditions* mutable_poor_network_conditions();
  void set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions);
  private:
  const ::CMsgPoorNetworkConditions& _internal_poor_network_conditions() const;
  ::CMsgPoorNetworkConditions* _internal_mutable_poor_network_conditions();
  public:
  void unsafe_arena_set_allocated_poor_network_conditions(
      ::CMsgPoorNetworkConditions* poor_network_conditions);
  ::CMsgPoorNetworkConditions* unsafe_arena_release_poor_network_conditions();

  // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  bool has_custom_game_data() const;
  private:
  bool _internal_has_custom_game_data() const;
  public:
  void clear_custom_game_data();
  const ::CMsgGameMatchSignOut_CCustomGameData& custom_game_data() const;
  PROTOBUF_NODISCARD ::CMsgGameMatchSignOut_CCustomGameData* release_custom_game_data();
  ::CMsgGameMatchSignOut_CCustomGameData* mutable_custom_game_data();
  void set_allocated_custom_game_data(::CMsgGameMatchSignOut_CCustomGameData* custom_game_data);
  private:
  const ::CMsgGameMatchSignOut_CCustomGameData& _internal_custom_game_data() const;
  ::CMsgGameMatchSignOut_CCustomGameData* _internal_mutable_custom_game_data();
  public:
  void unsafe_arena_set_allocated_custom_game_data(
      ::CMsgGameMatchSignOut_CCustomGameData* custom_game_data);
  ::CMsgGameMatchSignOut_CCustomGameData* unsafe_arena_release_custom_game_data();

  // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
  bool has_gameplay_stats() const;
  private:
  bool _internal_has_gameplay_stats() const;
  public:
  void clear_gameplay_stats();
  const ::CMsgSignOutGameplayStats& gameplay_stats() const;
  PROTOBUF_NODISCARD ::CMsgSignOutGameplayStats* release_gameplay_stats();
  ::CMsgSignOutGameplayStats* mutable_gameplay_stats();
  void set_allocated_gameplay_stats(::CMsgSignOutGameplayStats* gameplay_stats);
  private:
  const ::CMsgSignOutGameplayStats& _internal_gameplay_stats() const;
  ::CMsgSignOutGameplayStats* _internal_mutable_gameplay_stats();
  public:
  void unsafe_arena_set_allocated_gameplay_stats(
      ::CMsgSignOutGameplayStats* gameplay_stats);
  ::CMsgSignOutGameplayStats* unsafe_arena_release_gameplay_stats();

  // optional uint64 match_id = 1 [(.key_field) = true];
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional fixed32 date = 4;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  uint32_t date() const;
  void set_date(uint32_t value);
  private:
  uint32_t _internal_date() const;
  void _internal_set_date(uint32_t value);
  public:

  // optional uint32 cluster = 10;
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  uint32_t cluster() const;
  void set_cluster(uint32_t value);
  private:
  uint32_t _internal_cluster() const;
  void _internal_set_cluster(uint32_t value);
  public:

  // optional uint32 first_blood_time = 12;
  bool has_first_blood_time() const;
  private:
  bool _internal_has_first_blood_time() const;
  public:
  void clear_first_blood_time();
  uint32_t first_blood_time() const;
  void set_first_blood_time(uint32_t value);
  private:
  uint32_t _internal_first_blood_time() const;
  void _internal_set_first_blood_time(uint32_t value);
  public:

  // optional uint32 event_score = 14;
  bool has_event_score() const;
  private:
  bool _internal_has_event_score() const;
  public:
  void clear_event_score();
  uint32_t event_score() const;
  void set_event_score(uint32_t value);
  private:
  uint32_t _internal_event_score() const;
  void _internal_set_event_score(uint32_t value);
  public:

  // optional uint32 server_version = 19;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  uint32_t server_version() const;
  void set_server_version(uint32_t value);
  private:
  uint32_t _internal_server_version() const;
  void _internal_set_server_version(uint32_t value);
  public:

  // optional sint32 average_networth_delta = 22;
  bool has_average_networth_delta() const;
  private:
  bool _internal_has_average_networth_delta() const;
  public:
  void clear_average_networth_delta();
  int32_t average_networth_delta() const;
  void set_average_networth_delta(int32_t value);
  private:
  int32_t _internal_average_networth_delta() const;
  void _internal_set_average_networth_delta(int32_t value);
  public:

  // optional bool good_guys_win = 3;
  bool has_good_guys_win() const;
  private:
  bool _internal_has_good_guys_win() const;
  public:
  void clear_good_guys_win();
  bool good_guys_win() const;
  void set_good_guys_win(bool value);
  private:
  bool _internal_good_guys_win() const;
  void _internal_set_good_guys_win(bool value);
  public:

  // optional bool automatic_surrender = 18;
  bool has_automatic_surrender() const;
  private:
  bool _internal_has_automatic_surrender() const;
  public:
  void clear_automatic_surrender();
  bool automatic_surrender() const;
  void set_automatic_surrender(bool value);
  private:
  bool _internal_automatic_surrender() const;
  void _internal_set_automatic_surrender(bool value);
  public:

  // optional bool training_data_recorded = 55;
  bool has_training_data_recorded() const;
  private:
  bool _internal_has_training_data_recorded() const;
  public:
  void clear_training_data_recorded();
  bool training_data_recorded() const;
  void set_training_data_recorded(bool value);
  private:
  bool _internal_training_data_recorded() const;
  void _internal_set_training_data_recorded(bool value);
  public:

  // optional uint32 match_flags = 38;
  bool has_match_flags() const;
  private:
  bool _internal_has_match_flags() const;
  public:
  void clear_match_flags();
  uint32_t match_flags() const;
  void set_match_flags(uint32_t value);
  private:
  uint32_t _internal_match_flags() const;
  void _internal_set_match_flags(uint32_t value);
  public:

  // optional uint32 pre_game_duration = 40;
  bool has_pre_game_duration() const;
  private:
  bool _internal_has_pre_game_duration() const;
  public:
  void clear_pre_game_duration();
  uint32_t pre_game_duration() const;
  void set_pre_game_duration(uint32_t value);
  private:
  uint32_t _internal_pre_game_duration() const;
  void _internal_set_pre_game_duration(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM winning_team = 56 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_winning_team() const;
  private:
  bool _internal_has_winning_team() const;
  public:
  void clear_winning_team();
  ::DOTA_GC_TEAM winning_team() const;
  void set_winning_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_winning_team() const;
  void _internal_set_winning_team(::DOTA_GC_TEAM value);
  public:

  // optional float normalized_win_probability_diff = 57;
  bool has_normalized_win_probability_diff() const;
  private:
  bool _internal_has_normalized_win_probability_diff() const;
  public:
  void clear_normalized_win_probability_diff();
  float normalized_win_probability_diff() const;
  void set_normalized_win_probability_diff(float value);
  private:
  float _internal_normalized_win_probability_diff() const;
  void _internal_set_normalized_win_probability_diff(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOut)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > num_players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam > teams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tower_status_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > barracks_status_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment > player_strange_count_adjustments_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg > additional_msgs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent > social_feed_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > team_scores_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats > fantasy_stats_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry > event_game_leaderboard_entries_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_WardPlacement > ward_placements_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CExtraMsgBlock > extra_messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_addr_;
    ::CMsgPoorNetworkConditions* poor_network_conditions_;
    ::CMsgGameMatchSignOut_CCustomGameData* custom_game_data_;
    ::CMsgSignOutGameplayStats* gameplay_stats_;
    uint64_t match_id_;
    uint32_t duration_;
    uint32_t date_;
    uint32_t cluster_;
    uint32_t first_blood_time_;
    uint32_t event_score_;
    uint32_t server_version_;
    int32_t average_networth_delta_;
    bool good_guys_win_;
    bool automatic_surrender_;
    bool training_data_recorded_;
    uint32_t match_flags_;
    uint32_t pre_game_duration_;
    int winning_team_;
    float normalized_win_probability_diff_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutDraftInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutDraftInfo) */ {
 public:
  inline CMsgSignOutDraftInfo() : CMsgSignOutDraftInfo(nullptr) {}
  ~CMsgSignOutDraftInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutDraftInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from);
  CMsgSignOutDraftInfo(CMsgSignOutDraftInfo&& from) noexcept
    : CMsgSignOutDraftInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutDraftInfo& operator=(const CMsgSignOutDraftInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutDraftInfo& operator=(CMsgSignOutDraftInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutDraftInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutDraftInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutDraftInfo*>(
               &_CMsgSignOutDraftInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgSignOutDraftInfo& a, CMsgSignOutDraftInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutDraftInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutDraftInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutDraftInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutDraftInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutDraftInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutDraftInfo& from) {
    CMsgSignOutDraftInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutDraftInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutDraftInfo";
  }
  protected:
  explicit CMsgSignOutDraftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicksBansFieldNumber = 3,
    kRadiantCaptainAccountIdFieldNumber = 1,
    kDireCaptainAccountIdFieldNumber = 2,
  };
  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  int picks_bans_size() const;
  private:
  int _internal_picks_bans_size() const;
  public:
  void clear_picks_bans();
  ::CMatchHeroSelectEvent* mutable_picks_bans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
      mutable_picks_bans();
  private:
  const ::CMatchHeroSelectEvent& _internal_picks_bans(int index) const;
  ::CMatchHeroSelectEvent* _internal_add_picks_bans();
  public:
  const ::CMatchHeroSelectEvent& picks_bans(int index) const;
  ::CMatchHeroSelectEvent* add_picks_bans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
      picks_bans() const;

  // optional uint32 radiant_captain_account_id = 1;
  bool has_radiant_captain_account_id() const;
  private:
  bool _internal_has_radiant_captain_account_id() const;
  public:
  void clear_radiant_captain_account_id();
  uint32_t radiant_captain_account_id() const;
  void set_radiant_captain_account_id(uint32_t value);
  private:
  uint32_t _internal_radiant_captain_account_id() const;
  void _internal_set_radiant_captain_account_id(uint32_t value);
  public:

  // optional uint32 dire_captain_account_id = 2;
  bool has_dire_captain_account_id() const;
  private:
  bool _internal_has_dire_captain_account_id() const;
  public:
  void clear_dire_captain_account_id();
  uint32_t dire_captain_account_id() const;
  void set_dire_captain_account_id(uint32_t value);
  private:
  uint32_t _internal_dire_captain_account_id() const;
  void _internal_set_dire_captain_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutDraftInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent > picks_bans_;
    uint32_t radiant_captain_account_id_;
    uint32_t dire_captain_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutBotInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutBotInfo) */ {
 public:
  inline CMsgSignOutBotInfo() : CMsgSignOutBotInfo(nullptr) {}
  ~CMsgSignOutBotInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutBotInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from);
  CMsgSignOutBotInfo(CMsgSignOutBotInfo&& from) noexcept
    : CMsgSignOutBotInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutBotInfo& operator=(const CMsgSignOutBotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutBotInfo& operator=(CMsgSignOutBotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutBotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutBotInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutBotInfo*>(
               &_CMsgSignOutBotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgSignOutBotInfo& a, CMsgSignOutBotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutBotInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutBotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutBotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutBotInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutBotInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutBotInfo& from) {
    CMsgSignOutBotInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutBotInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutBotInfo";
  }
  protected:
  explicit CMsgSignOutBotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotDifficultyRadiantFieldNumber = 2,
    kAllowCheatsFieldNumber = 1,
    kCreatedLobbyFieldNumber = 3,
    kBotDifficultyDireFieldNumber = 5,
  };
  // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_radiant() const;
  private:
  bool _internal_has_bot_difficulty_radiant() const;
  public:
  void clear_bot_difficulty_radiant();
  ::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_radiant() const;
  void _internal_set_bot_difficulty_radiant(::DOTABotDifficulty value);
  public:

  // optional bool allow_cheats = 1;
  bool has_allow_cheats() const;
  private:
  bool _internal_has_allow_cheats() const;
  public:
  void clear_allow_cheats();
  bool allow_cheats() const;
  void set_allow_cheats(bool value);
  private:
  bool _internal_allow_cheats() const;
  void _internal_set_allow_cheats(bool value);
  public:

  // optional bool created_lobby = 3;
  bool has_created_lobby() const;
  private:
  bool _internal_has_created_lobby() const;
  public:
  void clear_created_lobby();
  bool created_lobby() const;
  void set_created_lobby(bool value);
  private:
  bool _internal_created_lobby() const;
  void _internal_set_created_lobby(bool value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_dire() const;
  private:
  bool _internal_has_bot_difficulty_dire() const;
  public:
  void clear_bot_difficulty_dire();
  ::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_dire() const;
  void _internal_set_bot_difficulty_dire(::DOTABotDifficulty value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutBotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int bot_difficulty_radiant_;
    bool allow_cheats_;
    bool created_lobby_;
    int bot_difficulty_dire_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutTextMuteInfo_TextMuteMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutTextMuteInfo.TextMuteMessage) */ {
 public:
  inline CMsgSignOutTextMuteInfo_TextMuteMessage() : CMsgSignOutTextMuteInfo_TextMuteMessage(nullptr) {}
  ~CMsgSignOutTextMuteInfo_TextMuteMessage() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfo_TextMuteMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutTextMuteInfo_TextMuteMessage(const CMsgSignOutTextMuteInfo_TextMuteMessage& from);
  CMsgSignOutTextMuteInfo_TextMuteMessage(CMsgSignOutTextMuteInfo_TextMuteMessage&& from) noexcept
    : CMsgSignOutTextMuteInfo_TextMuteMessage() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutTextMuteInfo_TextMuteMessage& operator=(const CMsgSignOutTextMuteInfo_TextMuteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutTextMuteInfo_TextMuteMessage& operator=(CMsgSignOutTextMuteInfo_TextMuteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutTextMuteInfo_TextMuteMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutTextMuteInfo_TextMuteMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutTextMuteInfo_TextMuteMessage*>(
               &_CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgSignOutTextMuteInfo_TextMuteMessage& a, CMsgSignOutTextMuteInfo_TextMuteMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutTextMuteInfo_TextMuteMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutTextMuteInfo_TextMuteMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutTextMuteInfo_TextMuteMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutTextMuteInfo_TextMuteMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutTextMuteInfo_TextMuteMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutTextMuteInfo_TextMuteMessage& from) {
    CMsgSignOutTextMuteInfo_TextMuteMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutTextMuteInfo_TextMuteMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutTextMuteInfo.TextMuteMessage";
  }
  protected:
  explicit CMsgSignOutTextMuteInfo_TextMuteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatMessageFieldNumber = 3,
    kRegionFieldNumber = 1,
    kCausedTextMuteFieldNumber = 2,
  };
  // optional string chat_message = 3;
  bool has_chat_message() const;
  private:
  bool _internal_has_chat_message() const;
  public:
  void clear_chat_message();
  const std::string& chat_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_message();
  PROTOBUF_NODISCARD std::string* release_chat_message();
  void set_allocated_chat_message(std::string* chat_message);
  private:
  const std::string& _internal_chat_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_message(const std::string& value);
  std::string* _internal_mutable_chat_message();
  public:

  // optional uint32 region = 1;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  uint32_t region() const;
  void set_region(uint32_t value);
  private:
  uint32_t _internal_region() const;
  void _internal_set_region(uint32_t value);
  public:

  // optional bool caused_text_mute = 2;
  bool has_caused_text_mute() const;
  private:
  bool _internal_has_caused_text_mute() const;
  public:
  void clear_caused_text_mute();
  bool caused_text_mute() const;
  void set_caused_text_mute(bool value);
  private:
  bool _internal_caused_text_mute() const;
  void _internal_set_caused_text_mute(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutTextMuteInfo.TextMuteMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_message_;
    uint32_t region_;
    bool caused_text_mute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutTextMuteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutTextMuteInfo) */ {
 public:
  inline CMsgSignOutTextMuteInfo() : CMsgSignOutTextMuteInfo(nullptr) {}
  ~CMsgSignOutTextMuteInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutTextMuteInfo(const CMsgSignOutTextMuteInfo& from);
  CMsgSignOutTextMuteInfo(CMsgSignOutTextMuteInfo&& from) noexcept
    : CMsgSignOutTextMuteInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutTextMuteInfo& operator=(const CMsgSignOutTextMuteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutTextMuteInfo& operator=(CMsgSignOutTextMuteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutTextMuteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutTextMuteInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutTextMuteInfo*>(
               &_CMsgSignOutTextMuteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgSignOutTextMuteInfo& a, CMsgSignOutTextMuteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutTextMuteInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutTextMuteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutTextMuteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutTextMuteInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutTextMuteInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutTextMuteInfo& from) {
    CMsgSignOutTextMuteInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutTextMuteInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutTextMuteInfo";
  }
  protected:
  explicit CMsgSignOutTextMuteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutTextMuteInfo_TextMuteMessage TextMuteMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kTextMuteMessagesFieldNumber = 1,
  };
  // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
  int text_mute_messages_size() const;
  private:
  int _internal_text_mute_messages_size() const;
  public:
  void clear_text_mute_messages();
  ::CMsgSignOutTextMuteInfo_TextMuteMessage* mutable_text_mute_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutTextMuteInfo_TextMuteMessage >*
      mutable_text_mute_messages();
  private:
  const ::CMsgSignOutTextMuteInfo_TextMuteMessage& _internal_text_mute_messages(int index) const;
  ::CMsgSignOutTextMuteInfo_TextMuteMessage* _internal_add_text_mute_messages();
  public:
  const ::CMsgSignOutTextMuteInfo_TextMuteMessage& text_mute_messages(int index) const;
  ::CMsgSignOutTextMuteInfo_TextMuteMessage* add_text_mute_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutTextMuteInfo_TextMuteMessage >&
      text_mute_messages() const;

  // @@protoc_insertion_point(class_scope:CMsgSignOutTextMuteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutTextMuteInfo_TextMuteMessage > text_mute_messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutPlayerStats) */ {
 public:
  inline CMsgSignOutPlayerStats() : CMsgSignOutPlayerStats(nullptr) {}
  ~CMsgSignOutPlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from);
  CMsgSignOutPlayerStats(CMsgSignOutPlayerStats&& from) noexcept
    : CMsgSignOutPlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutPlayerStats& operator=(const CMsgSignOutPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutPlayerStats& operator=(CMsgSignOutPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutPlayerStats*>(
               &_CMsgSignOutPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgSignOutPlayerStats& a, CMsgSignOutPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutPlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutPlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutPlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutPlayerStats& from) {
    CMsgSignOutPlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutPlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutPlayerStats";
  }
  protected:
  explicit CMsgSignOutPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kRankFieldNumber = 3,
    kHeroIdFieldNumber = 4,
    kRampagesFieldNumber = 5,
    kTripleKillsFieldNumber = 6,
    kFirstBloodClaimedFieldNumber = 7,
    kFirstBloodGivenFieldNumber = 8,
    kCouriersKilledFieldNumber = 9,
    kAegisesSnatchedFieldNumber = 10,
    kCheesesEatenFieldNumber = 11,
    kCreepsStackedFieldNumber = 12,
    kFightScoreFieldNumber = 13,
    kFarmScoreFieldNumber = 14,
    kSupportScoreFieldNumber = 15,
    kPushScoreFieldNumber = 16,
    kKillsFieldNumber = 17,
    kDeathsFieldNumber = 18,
    kAssistsFieldNumber = 19,
    kLastHitsFieldNumber = 20,
    kDeniesFieldNumber = 21,
    kGpmFieldNumber = 22,
    kXppmFieldNumber = 23,
    kNetWorthFieldNumber = 24,
    kDamageFieldNumber = 25,
    kHealsFieldNumber = 26,
    kRapiersPurchasedFieldNumber = 27,
    kObserverWardsPlacedFieldNumber = 28,
    kWardsDestroyedFieldNumber = 29,
    kLobbyTypeFieldNumber = 30,
  };
  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional int32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // optional uint32 rank = 3;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 rampages = 5;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  uint32_t rampages() const;
  void set_rampages(uint32_t value);
  private:
  uint32_t _internal_rampages() const;
  void _internal_set_rampages(uint32_t value);
  public:

  // optional uint32 triple_kills = 6;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  uint32_t triple_kills() const;
  void set_triple_kills(uint32_t value);
  private:
  uint32_t _internal_triple_kills() const;
  void _internal_set_triple_kills(uint32_t value);
  public:

  // optional uint32 first_blood_claimed = 7;
  bool has_first_blood_claimed() const;
  private:
  bool _internal_has_first_blood_claimed() const;
  public:
  void clear_first_blood_claimed();
  uint32_t first_blood_claimed() const;
  void set_first_blood_claimed(uint32_t value);
  private:
  uint32_t _internal_first_blood_claimed() const;
  void _internal_set_first_blood_claimed(uint32_t value);
  public:

  // optional uint32 first_blood_given = 8;
  bool has_first_blood_given() const;
  private:
  bool _internal_has_first_blood_given() const;
  public:
  void clear_first_blood_given();
  uint32_t first_blood_given() const;
  void set_first_blood_given(uint32_t value);
  private:
  uint32_t _internal_first_blood_given() const;
  void _internal_set_first_blood_given(uint32_t value);
  public:

  // optional uint32 couriers_killed = 9;
  bool has_couriers_killed() const;
  private:
  bool _internal_has_couriers_killed() const;
  public:
  void clear_couriers_killed();
  uint32_t couriers_killed() const;
  void set_couriers_killed(uint32_t value);
  private:
  uint32_t _internal_couriers_killed() const;
  void _internal_set_couriers_killed(uint32_t value);
  public:

  // optional uint32 aegises_snatched = 10;
  bool has_aegises_snatched() const;
  private:
  bool _internal_has_aegises_snatched() const;
  public:
  void clear_aegises_snatched();
  uint32_t aegises_snatched() const;
  void set_aegises_snatched(uint32_t value);
  private:
  uint32_t _internal_aegises_snatched() const;
  void _internal_set_aegises_snatched(uint32_t value);
  public:

  // optional uint32 cheeses_eaten = 11;
  bool has_cheeses_eaten() const;
  private:
  bool _internal_has_cheeses_eaten() const;
  public:
  void clear_cheeses_eaten();
  uint32_t cheeses_eaten() const;
  void set_cheeses_eaten(uint32_t value);
  private:
  uint32_t _internal_cheeses_eaten() const;
  void _internal_set_cheeses_eaten(uint32_t value);
  public:

  // optional uint32 creeps_stacked = 12;
  bool has_creeps_stacked() const;
  private:
  bool _internal_has_creeps_stacked() const;
  public:
  void clear_creeps_stacked();
  uint32_t creeps_stacked() const;
  void set_creeps_stacked(uint32_t value);
  private:
  uint32_t _internal_creeps_stacked() const;
  void _internal_set_creeps_stacked(uint32_t value);
  public:

  // optional float fight_score = 13;
  bool has_fight_score() const;
  private:
  bool _internal_has_fight_score() const;
  public:
  void clear_fight_score();
  float fight_score() const;
  void set_fight_score(float value);
  private:
  float _internal_fight_score() const;
  void _internal_set_fight_score(float value);
  public:

  // optional float farm_score = 14;
  bool has_farm_score() const;
  private:
  bool _internal_has_farm_score() const;
  public:
  void clear_farm_score();
  float farm_score() const;
  void set_farm_score(float value);
  private:
  float _internal_farm_score() const;
  void _internal_set_farm_score(float value);
  public:

  // optional float support_score = 15;
  bool has_support_score() const;
  private:
  bool _internal_has_support_score() const;
  public:
  void clear_support_score();
  float support_score() const;
  void set_support_score(float value);
  private:
  float _internal_support_score() const;
  void _internal_set_support_score(float value);
  public:

  // optional float push_score = 16;
  bool has_push_score() const;
  private:
  bool _internal_has_push_score() const;
  public:
  void clear_push_score();
  float push_score() const;
  void set_push_score(float value);
  private:
  float _internal_push_score() const;
  void _internal_set_push_score(float value);
  public:

  // optional uint32 kills = 17;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 18;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 19;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 last_hits = 20;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 21;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional float gpm = 22;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  float gpm() const;
  void set_gpm(float value);
  private:
  float _internal_gpm() const;
  void _internal_set_gpm(float value);
  public:

  // optional float xppm = 23;
  bool has_xppm() const;
  private:
  bool _internal_has_xppm() const;
  public:
  void clear_xppm();
  float xppm() const;
  void set_xppm(float value);
  private:
  float _internal_xppm() const;
  void _internal_set_xppm(float value);
  public:

  // optional float net_worth = 24;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  float net_worth() const;
  void set_net_worth(float value);
  private:
  float _internal_net_worth() const;
  void _internal_set_net_worth(float value);
  public:

  // optional float damage = 25;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  float damage() const;
  void set_damage(float value);
  private:
  float _internal_damage() const;
  void _internal_set_damage(float value);
  public:

  // optional float heals = 26;
  bool has_heals() const;
  private:
  bool _internal_has_heals() const;
  public:
  void clear_heals();
  float heals() const;
  void set_heals(float value);
  private:
  float _internal_heals() const;
  void _internal_set_heals(float value);
  public:

  // optional uint32 rapiers_purchased = 27;
  bool has_rapiers_purchased() const;
  private:
  bool _internal_has_rapiers_purchased() const;
  public:
  void clear_rapiers_purchased();
  uint32_t rapiers_purchased() const;
  void set_rapiers_purchased(uint32_t value);
  private:
  uint32_t _internal_rapiers_purchased() const;
  void _internal_set_rapiers_purchased(uint32_t value);
  public:

  // optional uint32 observer_wards_placed = 28;
  bool has_observer_wards_placed() const;
  private:
  bool _internal_has_observer_wards_placed() const;
  public:
  void clear_observer_wards_placed();
  uint32_t observer_wards_placed() const;
  void set_observer_wards_placed(uint32_t value);
  private:
  uint32_t _internal_observer_wards_placed() const;
  void _internal_set_observer_wards_placed(uint32_t value);
  public:

  // optional uint32 wards_destroyed = 29;
  bool has_wards_destroyed() const;
  private:
  bool _internal_has_wards_destroyed() const;
  public:
  void clear_wards_destroyed();
  uint32_t wards_destroyed() const;
  void set_wards_destroyed(uint32_t value);
  private:
  uint32_t _internal_wards_destroyed() const;
  void _internal_set_wards_destroyed(uint32_t value);
  public:

  // optional uint32 lobby_type = 30;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    int32_t account_id_;
    uint32_t rank_;
    uint32_t hero_id_;
    uint32_t rampages_;
    uint32_t triple_kills_;
    uint32_t first_blood_claimed_;
    uint32_t first_blood_given_;
    uint32_t couriers_killed_;
    uint32_t aegises_snatched_;
    uint32_t cheeses_eaten_;
    uint32_t creeps_stacked_;
    float fight_score_;
    float farm_score_;
    float support_score_;
    float push_score_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t last_hits_;
    uint32_t denies_;
    float gpm_;
    float xppm_;
    float net_worth_;
    float damage_;
    float heals_;
    uint32_t rapiers_purchased_;
    uint32_t observer_wards_placed_;
    uint32_t wards_destroyed_;
    uint32_t lobby_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail) */ {
 public:
  inline CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail() : CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(nullptr) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from);
  CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail&& from) noexcept
    : CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& operator=(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& operator=(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail*>(
               &_CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& a, CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from) {
    CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail";
  }
  protected:
  explicit CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // optional uint32 type = 1 [default = 4294967295];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  uint32_t type() const;
  void set_type(uint32_t value);
  private:
  uint32_t _internal_type() const;
  void _internal_set_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t count_;
    uint32_t type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutCommunicationSummary_PlayerCommunication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutCommunicationSummary.PlayerCommunication) */ {
 public:
  inline CMsgSignOutCommunicationSummary_PlayerCommunication() : CMsgSignOutCommunicationSummary_PlayerCommunication(nullptr) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunication() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from);
  CMsgSignOutCommunicationSummary_PlayerCommunication(CMsgSignOutCommunicationSummary_PlayerCommunication&& from) noexcept
    : CMsgSignOutCommunicationSummary_PlayerCommunication() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutCommunicationSummary_PlayerCommunication& operator=(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutCommunicationSummary_PlayerCommunication& operator=(CMsgSignOutCommunicationSummary_PlayerCommunication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutCommunicationSummary_PlayerCommunication& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutCommunicationSummary_PlayerCommunication* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutCommunicationSummary_PlayerCommunication*>(
               &_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgSignOutCommunicationSummary_PlayerCommunication& a, CMsgSignOutCommunicationSummary_PlayerCommunication& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutCommunicationSummary_PlayerCommunication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutCommunicationSummary_PlayerCommunication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
    CMsgSignOutCommunicationSummary_PlayerCommunication::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutCommunicationSummary.PlayerCommunication";
  }
  protected:
  explicit CMsgSignOutCommunicationSummary_PlayerCommunication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail PingDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kPingDetailsFieldNumber = 15,
    kAccountIdFieldNumber = 1,
    kPingsFieldNumber = 2,
    kMaxPingsPerIntervalFieldNumber = 3,
    kTeammatePingsFieldNumber = 4,
    kMaxTeammatePingsPerIntervalFieldNumber = 5,
    kTeamChatMessagesFieldNumber = 6,
    kAllChatMessagesFieldNumber = 7,
    kChatWheelMessagesFieldNumber = 8,
    kPausesFieldNumber = 9,
    kUnpausesFieldNumber = 10,
    kLinesDrawnFieldNumber = 11,
    kVoiceChatSecondsFieldNumber = 12,
    kChatMutesFieldNumber = 13,
    kVoiceMutesFieldNumber = 14,
    kCommsBlocksSoloFieldNumber = 16,
    kCommsBlocksMassFieldNumber = 17,
  };
  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
  int ping_details_size() const;
  private:
  int _internal_ping_details_size() const;
  public:
  void clear_ping_details();
  ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* mutable_ping_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >*
      mutable_ping_details();
  private:
  const ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& _internal_ping_details(int index) const;
  ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* _internal_add_ping_details();
  public:
  const ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& ping_details(int index) const;
  ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* add_ping_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >&
      ping_details() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 pings = 2;
  bool has_pings() const;
  private:
  bool _internal_has_pings() const;
  public:
  void clear_pings();
  uint32_t pings() const;
  void set_pings(uint32_t value);
  private:
  uint32_t _internal_pings() const;
  void _internal_set_pings(uint32_t value);
  public:

  // optional uint32 max_pings_per_interval = 3;
  bool has_max_pings_per_interval() const;
  private:
  bool _internal_has_max_pings_per_interval() const;
  public:
  void clear_max_pings_per_interval();
  uint32_t max_pings_per_interval() const;
  void set_max_pings_per_interval(uint32_t value);
  private:
  uint32_t _internal_max_pings_per_interval() const;
  void _internal_set_max_pings_per_interval(uint32_t value);
  public:

  // optional uint32 teammate_pings = 4;
  bool has_teammate_pings() const;
  private:
  bool _internal_has_teammate_pings() const;
  public:
  void clear_teammate_pings();
  uint32_t teammate_pings() const;
  void set_teammate_pings(uint32_t value);
  private:
  uint32_t _internal_teammate_pings() const;
  void _internal_set_teammate_pings(uint32_t value);
  public:

  // optional uint32 max_teammate_pings_per_interval = 5;
  bool has_max_teammate_pings_per_interval() const;
  private:
  bool _internal_has_max_teammate_pings_per_interval() const;
  public:
  void clear_max_teammate_pings_per_interval();
  uint32_t max_teammate_pings_per_interval() const;
  void set_max_teammate_pings_per_interval(uint32_t value);
  private:
  uint32_t _internal_max_teammate_pings_per_interval() const;
  void _internal_set_max_teammate_pings_per_interval(uint32_t value);
  public:

  // optional uint32 team_chat_messages = 6;
  bool has_team_chat_messages() const;
  private:
  bool _internal_has_team_chat_messages() const;
  public:
  void clear_team_chat_messages();
  uint32_t team_chat_messages() const;
  void set_team_chat_messages(uint32_t value);
  private:
  uint32_t _internal_team_chat_messages() const;
  void _internal_set_team_chat_messages(uint32_t value);
  public:

  // optional uint32 all_chat_messages = 7;
  bool has_all_chat_messages() const;
  private:
  bool _internal_has_all_chat_messages() const;
  public:
  void clear_all_chat_messages();
  uint32_t all_chat_messages() const;
  void set_all_chat_messages(uint32_t value);
  private:
  uint32_t _internal_all_chat_messages() const;
  void _internal_set_all_chat_messages(uint32_t value);
  public:

  // optional uint32 chat_wheel_messages = 8;
  bool has_chat_wheel_messages() const;
  private:
  bool _internal_has_chat_wheel_messages() const;
  public:
  void clear_chat_wheel_messages();
  uint32_t chat_wheel_messages() const;
  void set_chat_wheel_messages(uint32_t value);
  private:
  uint32_t _internal_chat_wheel_messages() const;
  void _internal_set_chat_wheel_messages(uint32_t value);
  public:

  // optional uint32 pauses = 9;
  bool has_pauses() const;
  private:
  bool _internal_has_pauses() const;
  public:
  void clear_pauses();
  uint32_t pauses() const;
  void set_pauses(uint32_t value);
  private:
  uint32_t _internal_pauses() const;
  void _internal_set_pauses(uint32_t value);
  public:

  // optional uint32 unpauses = 10;
  bool has_unpauses() const;
  private:
  bool _internal_has_unpauses() const;
  public:
  void clear_unpauses();
  uint32_t unpauses() const;
  void set_unpauses(uint32_t value);
  private:
  uint32_t _internal_unpauses() const;
  void _internal_set_unpauses(uint32_t value);
  public:

  // optional uint32 lines_drawn = 11;
  bool has_lines_drawn() const;
  private:
  bool _internal_has_lines_drawn() const;
  public:
  void clear_lines_drawn();
  uint32_t lines_drawn() const;
  void set_lines_drawn(uint32_t value);
  private:
  uint32_t _internal_lines_drawn() const;
  void _internal_set_lines_drawn(uint32_t value);
  public:

  // optional uint32 voice_chat_seconds = 12;
  bool has_voice_chat_seconds() const;
  private:
  bool _internal_has_voice_chat_seconds() const;
  public:
  void clear_voice_chat_seconds();
  uint32_t voice_chat_seconds() const;
  void set_voice_chat_seconds(uint32_t value);
  private:
  uint32_t _internal_voice_chat_seconds() const;
  void _internal_set_voice_chat_seconds(uint32_t value);
  public:

  // optional uint32 chat_mutes = 13;
  bool has_chat_mutes() const;
  private:
  bool _internal_has_chat_mutes() const;
  public:
  void clear_chat_mutes();
  uint32_t chat_mutes() const;
  void set_chat_mutes(uint32_t value);
  private:
  uint32_t _internal_chat_mutes() const;
  void _internal_set_chat_mutes(uint32_t value);
  public:

  // optional uint32 voice_mutes = 14;
  bool has_voice_mutes() const;
  private:
  bool _internal_has_voice_mutes() const;
  public:
  void clear_voice_mutes();
  uint32_t voice_mutes() const;
  void set_voice_mutes(uint32_t value);
  private:
  uint32_t _internal_voice_mutes() const;
  void _internal_set_voice_mutes(uint32_t value);
  public:

  // optional uint32 comms_blocks_solo = 16;
  bool has_comms_blocks_solo() const;
  private:
  bool _internal_has_comms_blocks_solo() const;
  public:
  void clear_comms_blocks_solo();
  uint32_t comms_blocks_solo() const;
  void set_comms_blocks_solo(uint32_t value);
  private:
  uint32_t _internal_comms_blocks_solo() const;
  void _internal_set_comms_blocks_solo(uint32_t value);
  public:

  // optional uint32 comms_blocks_mass = 17;
  bool has_comms_blocks_mass() const;
  private:
  bool _internal_has_comms_blocks_mass() const;
  public:
  void clear_comms_blocks_mass();
  uint32_t comms_blocks_mass() const;
  void set_comms_blocks_mass(uint32_t value);
  private:
  uint32_t _internal_comms_blocks_mass() const;
  void _internal_set_comms_blocks_mass(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutCommunicationSummary.PlayerCommunication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail > ping_details_;
    uint32_t account_id_;
    uint32_t pings_;
    uint32_t max_pings_per_interval_;
    uint32_t teammate_pings_;
    uint32_t max_teammate_pings_per_interval_;
    uint32_t team_chat_messages_;
    uint32_t all_chat_messages_;
    uint32_t chat_wheel_messages_;
    uint32_t pauses_;
    uint32_t unpauses_;
    uint32_t lines_drawn_;
    uint32_t voice_chat_seconds_;
    uint32_t chat_mutes_;
    uint32_t voice_mutes_;
    uint32_t comms_blocks_solo_;
    uint32_t comms_blocks_mass_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutCommunicationSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutCommunicationSummary) */ {
 public:
  inline CMsgSignOutCommunicationSummary() : CMsgSignOutCommunicationSummary(nullptr) {}
  ~CMsgSignOutCommunicationSummary() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from);
  CMsgSignOutCommunicationSummary(CMsgSignOutCommunicationSummary&& from) noexcept
    : CMsgSignOutCommunicationSummary() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutCommunicationSummary& operator=(const CMsgSignOutCommunicationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutCommunicationSummary& operator=(CMsgSignOutCommunicationSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutCommunicationSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutCommunicationSummary* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutCommunicationSummary*>(
               &_CMsgSignOutCommunicationSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgSignOutCommunicationSummary& a, CMsgSignOutCommunicationSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutCommunicationSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutCommunicationSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutCommunicationSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutCommunicationSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutCommunicationSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutCommunicationSummary& from) {
    CMsgSignOutCommunicationSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutCommunicationSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutCommunicationSummary";
  }
  protected:
  explicit CMsgSignOutCommunicationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutCommunicationSummary_PlayerCommunication PlayerCommunication;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgSignOutCommunicationSummary_PlayerCommunication* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication >*
      mutable_players();
  private:
  const ::CMsgSignOutCommunicationSummary_PlayerCommunication& _internal_players(int index) const;
  ::CMsgSignOutCommunicationSummary_PlayerCommunication* _internal_add_players();
  public:
  const ::CMsgSignOutCommunicationSummary_PlayerCommunication& players(int index) const;
  ::CMsgSignOutCommunicationSummary_PlayerCommunication* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgSignOutCommunicationSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignoutResponse_PlayerMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignoutResponse.PlayerMetadata) */ {
 public:
  inline CMsgGameMatchSignoutResponse_PlayerMetadata() : CMsgGameMatchSignoutResponse_PlayerMetadata(nullptr) {}
  ~CMsgGameMatchSignoutResponse_PlayerMetadata() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponse_PlayerMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignoutResponse_PlayerMetadata(const CMsgGameMatchSignoutResponse_PlayerMetadata& from);
  CMsgGameMatchSignoutResponse_PlayerMetadata(CMsgGameMatchSignoutResponse_PlayerMetadata&& from) noexcept
    : CMsgGameMatchSignoutResponse_PlayerMetadata() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignoutResponse_PlayerMetadata& operator=(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignoutResponse_PlayerMetadata& operator=(CMsgGameMatchSignoutResponse_PlayerMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignoutResponse_PlayerMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignoutResponse_PlayerMetadata* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignoutResponse_PlayerMetadata*>(
               &_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgGameMatchSignoutResponse_PlayerMetadata& a, CMsgGameMatchSignoutResponse_PlayerMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignoutResponse_PlayerMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignoutResponse_PlayerMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
    CMsgGameMatchSignoutResponse_PlayerMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignoutResponse.PlayerMetadata";
  }
  protected:
  explicit CMsgGameMatchSignoutResponse_PlayerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kAvgKillsX16FieldNumber = 2,
    kAvgDeathsX16FieldNumber = 3,
    kAvgAssistsX16FieldNumber = 4,
    kAvgGpmX16FieldNumber = 5,
    kAvgXpmX16FieldNumber = 6,
    kBestKillsX16FieldNumber = 7,
    kBestAssistsX16FieldNumber = 8,
    kBestGpmX16FieldNumber = 9,
    kBestXpmX16FieldNumber = 10,
    kWinStreakFieldNumber = 11,
    kBestWinStreakFieldNumber = 12,
    kGamesPlayedFieldNumber = 13,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 avg_kills_x16 = 2;
  bool has_avg_kills_x16() const;
  private:
  bool _internal_has_avg_kills_x16() const;
  public:
  void clear_avg_kills_x16();
  uint32_t avg_kills_x16() const;
  void set_avg_kills_x16(uint32_t value);
  private:
  uint32_t _internal_avg_kills_x16() const;
  void _internal_set_avg_kills_x16(uint32_t value);
  public:

  // optional uint32 avg_deaths_x16 = 3;
  bool has_avg_deaths_x16() const;
  private:
  bool _internal_has_avg_deaths_x16() const;
  public:
  void clear_avg_deaths_x16();
  uint32_t avg_deaths_x16() const;
  void set_avg_deaths_x16(uint32_t value);
  private:
  uint32_t _internal_avg_deaths_x16() const;
  void _internal_set_avg_deaths_x16(uint32_t value);
  public:

  // optional uint32 avg_assists_x16 = 4;
  bool has_avg_assists_x16() const;
  private:
  bool _internal_has_avg_assists_x16() const;
  public:
  void clear_avg_assists_x16();
  uint32_t avg_assists_x16() const;
  void set_avg_assists_x16(uint32_t value);
  private:
  uint32_t _internal_avg_assists_x16() const;
  void _internal_set_avg_assists_x16(uint32_t value);
  public:

  // optional uint32 avg_gpm_x16 = 5;
  bool has_avg_gpm_x16() const;
  private:
  bool _internal_has_avg_gpm_x16() const;
  public:
  void clear_avg_gpm_x16();
  uint32_t avg_gpm_x16() const;
  void set_avg_gpm_x16(uint32_t value);
  private:
  uint32_t _internal_avg_gpm_x16() const;
  void _internal_set_avg_gpm_x16(uint32_t value);
  public:

  // optional uint32 avg_xpm_x16 = 6;
  bool has_avg_xpm_x16() const;
  private:
  bool _internal_has_avg_xpm_x16() const;
  public:
  void clear_avg_xpm_x16();
  uint32_t avg_xpm_x16() const;
  void set_avg_xpm_x16(uint32_t value);
  private:
  uint32_t _internal_avg_xpm_x16() const;
  void _internal_set_avg_xpm_x16(uint32_t value);
  public:

  // optional uint32 best_kills_x16 = 7;
  bool has_best_kills_x16() const;
  private:
  bool _internal_has_best_kills_x16() const;
  public:
  void clear_best_kills_x16();
  uint32_t best_kills_x16() const;
  void set_best_kills_x16(uint32_t value);
  private:
  uint32_t _internal_best_kills_x16() const;
  void _internal_set_best_kills_x16(uint32_t value);
  public:

  // optional uint32 best_assists_x16 = 8;
  bool has_best_assists_x16() const;
  private:
  bool _internal_has_best_assists_x16() const;
  public:
  void clear_best_assists_x16();
  uint32_t best_assists_x16() const;
  void set_best_assists_x16(uint32_t value);
  private:
  uint32_t _internal_best_assists_x16() const;
  void _internal_set_best_assists_x16(uint32_t value);
  public:

  // optional uint32 best_gpm_x16 = 9;
  bool has_best_gpm_x16() const;
  private:
  bool _internal_has_best_gpm_x16() const;
  public:
  void clear_best_gpm_x16();
  uint32_t best_gpm_x16() const;
  void set_best_gpm_x16(uint32_t value);
  private:
  uint32_t _internal_best_gpm_x16() const;
  void _internal_set_best_gpm_x16(uint32_t value);
  public:

  // optional uint32 best_xpm_x16 = 10;
  bool has_best_xpm_x16() const;
  private:
  bool _internal_has_best_xpm_x16() const;
  public:
  void clear_best_xpm_x16();
  uint32_t best_xpm_x16() const;
  void set_best_xpm_x16(uint32_t value);
  private:
  uint32_t _internal_best_xpm_x16() const;
  void _internal_set_best_xpm_x16(uint32_t value);
  public:

  // optional uint32 win_streak = 11;
  bool has_win_streak() const;
  private:
  bool _internal_has_win_streak() const;
  public:
  void clear_win_streak();
  uint32_t win_streak() const;
  void set_win_streak(uint32_t value);
  private:
  uint32_t _internal_win_streak() const;
  void _internal_set_win_streak(uint32_t value);
  public:

  // optional uint32 best_win_streak = 12;
  bool has_best_win_streak() const;
  private:
  bool _internal_has_best_win_streak() const;
  public:
  void clear_best_win_streak();
  uint32_t best_win_streak() const;
  void set_best_win_streak(uint32_t value);
  private:
  uint32_t _internal_best_win_streak() const;
  void _internal_set_best_win_streak(uint32_t value);
  public:

  // optional uint32 games_played = 13;
  bool has_games_played() const;
  private:
  bool _internal_has_games_played() const;
  public:
  void clear_games_played();
  uint32_t games_played() const;
  void set_games_played(uint32_t value);
  private:
  uint32_t _internal_games_played() const;
  void _internal_set_games_played(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignoutResponse.PlayerMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t avg_kills_x16_;
    uint32_t avg_deaths_x16_;
    uint32_t avg_assists_x16_;
    uint32_t avg_gpm_x16_;
    uint32_t avg_xpm_x16_;
    uint32_t best_kills_x16_;
    uint32_t best_assists_x16_;
    uint32_t best_gpm_x16_;
    uint32_t best_xpm_x16_;
    uint32_t win_streak_;
    uint32_t best_win_streak_;
    uint32_t games_played_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignoutResponse) */ {
 public:
  inline CMsgGameMatchSignoutResponse() : CMsgGameMatchSignoutResponse(nullptr) {}
  ~CMsgGameMatchSignoutResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from);
  CMsgGameMatchSignoutResponse(CMsgGameMatchSignoutResponse&& from) noexcept
    : CMsgGameMatchSignoutResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignoutResponse& operator=(const CMsgGameMatchSignoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignoutResponse& operator=(CMsgGameMatchSignoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignoutResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignoutResponse*>(
               &_CMsgGameMatchSignoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgGameMatchSignoutResponse& a, CMsgGameMatchSignoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignoutResponse& from) {
    CMsgGameMatchSignoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignoutResponse";
  }
  protected:
  explicit CMsgGameMatchSignoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameMatchSignoutResponse_PlayerMetadata PlayerMetadata;

  // accessors -------------------------------------------------------

  enum : int {
    kTimedRewardDetailsFieldNumber = 3,
    kXpRewardDetailsFieldNumber = 4,
    kPlayersMetadataFieldNumber = 9,
    kMatchDetailsFieldNumber = 8,
    kMvpDataFieldNumber = 10,
    kMatchIdFieldNumber = 1,
    kReplaySaltFieldNumber = 2,
    kLeagueidFieldNumber = 5,
    kMetadataPrivateKeyFieldNumber = 7,
    kOwSaltFieldNumber = 12,
    kOwPrivateKeyFieldNumber = 11,
    kOwReplayIdFieldNumber = 13,
  };
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  int timed_reward_details_size() const;
  private:
  int _internal_timed_reward_details_size() const;
  public:
  void clear_timed_reward_details();
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  private:
  const ::CLobbyTimedRewardDetails& _internal_timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_timed_reward_details();
  public:
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .CSODOTALobbyMember xp_reward_details = 4;
  int xp_reward_details_size() const;
  private:
  int _internal_xp_reward_details_size() const;
  public:
  void clear_xp_reward_details();
  ::CSODOTALobbyMember* mutable_xp_reward_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
      mutable_xp_reward_details();
  private:
  const ::CSODOTALobbyMember& _internal_xp_reward_details(int index) const;
  ::CSODOTALobbyMember* _internal_add_xp_reward_details();
  public:
  const ::CSODOTALobbyMember& xp_reward_details(int index) const;
  ::CSODOTALobbyMember* add_xp_reward_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
      xp_reward_details() const;

  // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  int players_metadata_size() const;
  private:
  int _internal_players_metadata_size() const;
  public:
  void clear_players_metadata();
  ::CMsgGameMatchSignoutResponse_PlayerMetadata* mutable_players_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_PlayerMetadata >*
      mutable_players_metadata();
  private:
  const ::CMsgGameMatchSignoutResponse_PlayerMetadata& _internal_players_metadata(int index) const;
  ::CMsgGameMatchSignoutResponse_PlayerMetadata* _internal_add_players_metadata();
  public:
  const ::CMsgGameMatchSignoutResponse_PlayerMetadata& players_metadata(int index) const;
  ::CMsgGameMatchSignoutResponse_PlayerMetadata* add_players_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_PlayerMetadata >&
      players_metadata() const;

  // optional .CMsgDOTAMatch match_details = 8;
  bool has_match_details() const;
  private:
  bool _internal_has_match_details() const;
  public:
  void clear_match_details();
  const ::CMsgDOTAMatch& match_details() const;
  PROTOBUF_NODISCARD ::CMsgDOTAMatch* release_match_details();
  ::CMsgDOTAMatch* mutable_match_details();
  void set_allocated_match_details(::CMsgDOTAMatch* match_details);
  private:
  const ::CMsgDOTAMatch& _internal_match_details() const;
  ::CMsgDOTAMatch* _internal_mutable_match_details();
  public:
  void unsafe_arena_set_allocated_match_details(
      ::CMsgDOTAMatch* match_details);
  ::CMsgDOTAMatch* unsafe_arena_release_match_details();

  // optional .CMvpData mvp_data = 10;
  bool has_mvp_data() const;
  private:
  bool _internal_has_mvp_data() const;
  public:
  void clear_mvp_data();
  const ::CMvpData& mvp_data() const;
  PROTOBUF_NODISCARD ::CMvpData* release_mvp_data();
  ::CMvpData* mutable_mvp_data();
  void set_allocated_mvp_data(::CMvpData* mvp_data);
  private:
  const ::CMvpData& _internal_mvp_data() const;
  ::CMvpData* _internal_mutable_mvp_data();
  public:
  void unsafe_arena_set_allocated_mvp_data(
      ::CMvpData* mvp_data);
  ::CMvpData* unsafe_arena_release_mvp_data();

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional fixed32 replay_salt = 2;
  bool has_replay_salt() const;
  private:
  bool _internal_has_replay_salt() const;
  public:
  void clear_replay_salt();
  uint32_t replay_salt() const;
  void set_replay_salt(uint32_t value);
  private:
  uint32_t _internal_replay_salt() const;
  void _internal_set_replay_salt(uint32_t value);
  public:

  // optional uint32 leagueid = 5;
  bool has_leagueid() const;
  private:
  bool _internal_has_leagueid() const;
  public:
  void clear_leagueid();
  uint32_t leagueid() const;
  void set_leagueid(uint32_t value);
  private:
  uint32_t _internal_leagueid() const;
  void _internal_set_leagueid(uint32_t value);
  public:

  // optional fixed32 metadata_private_key = 7;
  bool has_metadata_private_key() const;
  private:
  bool _internal_has_metadata_private_key() const;
  public:
  void clear_metadata_private_key();
  uint32_t metadata_private_key() const;
  void set_metadata_private_key(uint32_t value);
  private:
  uint32_t _internal_metadata_private_key() const;
  void _internal_set_metadata_private_key(uint32_t value);
  public:

  // optional fixed32 ow_salt = 12;
  bool has_ow_salt() const;
  private:
  bool _internal_has_ow_salt() const;
  public:
  void clear_ow_salt();
  uint32_t ow_salt() const;
  void set_ow_salt(uint32_t value);
  private:
  uint32_t _internal_ow_salt() const;
  void _internal_set_ow_salt(uint32_t value);
  public:

  // optional fixed64 ow_private_key = 11;
  bool has_ow_private_key() const;
  private:
  bool _internal_has_ow_private_key() const;
  public:
  void clear_ow_private_key();
  uint64_t ow_private_key() const;
  void set_ow_private_key(uint64_t value);
  private:
  uint64_t _internal_ow_private_key() const;
  void _internal_set_ow_private_key(uint64_t value);
  public:

  // optional uint64 ow_replay_id = 13;
  bool has_ow_replay_id() const;
  private:
  bool _internal_has_ow_replay_id() const;
  public:
  void clear_ow_replay_id();
  uint64_t ow_replay_id() const;
  void set_ow_replay_id(uint64_t value);
  private:
  uint64_t _internal_ow_replay_id() const;
  void _internal_set_ow_replay_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember > xp_reward_details_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_PlayerMetadata > players_metadata_;
    ::CMsgDOTAMatch* match_details_;
    ::CMvpData* mvp_data_;
    uint64_t match_id_;
    uint32_t replay_salt_;
    uint32_t leagueid_;
    uint32_t metadata_private_key_;
    uint32_t ow_salt_;
    uint64_t ow_private_key_;
    uint64_t ow_replay_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgTimedRewardContainer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTimedRewardContainer) */ {
 public:
  inline CMsgTimedRewardContainer() : CMsgTimedRewardContainer(nullptr) {}
  ~CMsgTimedRewardContainer() override;
  explicit PROTOBUF_CONSTEXPR CMsgTimedRewardContainer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTimedRewardContainer(const CMsgTimedRewardContainer& from);
  CMsgTimedRewardContainer(CMsgTimedRewardContainer&& from) noexcept
    : CMsgTimedRewardContainer() {
    *this = ::std::move(from);
  }

  inline CMsgTimedRewardContainer& operator=(const CMsgTimedRewardContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTimedRewardContainer& operator=(CMsgTimedRewardContainer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTimedRewardContainer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTimedRewardContainer* internal_default_instance() {
    return reinterpret_cast<const CMsgTimedRewardContainer*>(
               &_CMsgTimedRewardContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgTimedRewardContainer& a, CMsgTimedRewardContainer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTimedRewardContainer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTimedRewardContainer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTimedRewardContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTimedRewardContainer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTimedRewardContainer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTimedRewardContainer& from) {
    CMsgTimedRewardContainer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTimedRewardContainer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTimedRewardContainer";
  }
  protected:
  explicit CMsgTimedRewardContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimedRewardDetailsFieldNumber = 1,
  };
  // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
  int timed_reward_details_size() const;
  private:
  int _internal_timed_reward_details_size() const;
  public:
  void clear_timed_reward_details();
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  private:
  const ::CLobbyTimedRewardDetails& _internal_timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_timed_reward_details();
  public:
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // @@protoc_insertion_point(class_scope:CMsgTimedRewardContainer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutPermissionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOutPermissionRequest) */ {
 public:
  inline CMsgGameMatchSignOutPermissionRequest() : CMsgGameMatchSignOutPermissionRequest(nullptr) {}
  ~CMsgGameMatchSignOutPermissionRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from);
  CMsgGameMatchSignOutPermissionRequest(CMsgGameMatchSignOutPermissionRequest&& from) noexcept
    : CMsgGameMatchSignOutPermissionRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOutPermissionRequest& operator=(const CMsgGameMatchSignOutPermissionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOutPermissionRequest& operator=(CMsgGameMatchSignOutPermissionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOutPermissionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOutPermissionRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOutPermissionRequest*>(
               &_CMsgGameMatchSignOutPermissionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgGameMatchSignOutPermissionRequest& a, CMsgGameMatchSignOutPermissionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOutPermissionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOutPermissionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOutPermissionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOutPermissionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOutPermissionRequest& from) {
    CMsgGameMatchSignOutPermissionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOutPermissionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOutPermissionRequest";
  }
  protected:
  explicit CMsgGameMatchSignOutPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerVersionFieldNumber = 1,
    kLocalAttemptFieldNumber = 2,
    kTotalAttemptFieldNumber = 3,
    kSecondsWaitedFieldNumber = 4,
  };
  // optional uint32 server_version = 1;
  bool has_server_version() const;
  private:
  bool _internal_has_server_version() const;
  public:
  void clear_server_version();
  uint32_t server_version() const;
  void set_server_version(uint32_t value);
  private:
  uint32_t _internal_server_version() const;
  void _internal_set_server_version(uint32_t value);
  public:

  // optional uint32 local_attempt = 2;
  bool has_local_attempt() const;
  private:
  bool _internal_has_local_attempt() const;
  public:
  void clear_local_attempt();
  uint32_t local_attempt() const;
  void set_local_attempt(uint32_t value);
  private:
  uint32_t _internal_local_attempt() const;
  void _internal_set_local_attempt(uint32_t value);
  public:

  // optional uint32 total_attempt = 3;
  bool has_total_attempt() const;
  private:
  bool _internal_has_total_attempt() const;
  public:
  void clear_total_attempt();
  uint32_t total_attempt() const;
  void set_total_attempt(uint32_t value);
  private:
  uint32_t _internal_total_attempt() const;
  void _internal_set_total_attempt(uint32_t value);
  public:

  // optional uint32 seconds_waited = 4;
  bool has_seconds_waited() const;
  private:
  bool _internal_has_seconds_waited() const;
  public:
  void clear_seconds_waited();
  uint32_t seconds_waited() const;
  void set_seconds_waited(uint32_t value);
  private:
  uint32_t _internal_seconds_waited() const;
  void _internal_set_seconds_waited(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutPermissionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t server_version_;
    uint32_t local_attempt_;
    uint32_t total_attempt_;
    uint32_t seconds_waited_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutPermissionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOutPermissionResponse) */ {
 public:
  inline CMsgGameMatchSignOutPermissionResponse() : CMsgGameMatchSignOutPermissionResponse(nullptr) {}
  ~CMsgGameMatchSignOutPermissionResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from);
  CMsgGameMatchSignOutPermissionResponse(CMsgGameMatchSignOutPermissionResponse&& from) noexcept
    : CMsgGameMatchSignOutPermissionResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOutPermissionResponse& operator=(const CMsgGameMatchSignOutPermissionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOutPermissionResponse& operator=(CMsgGameMatchSignOutPermissionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOutPermissionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOutPermissionResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOutPermissionResponse*>(
               &_CMsgGameMatchSignOutPermissionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgGameMatchSignOutPermissionResponse& a, CMsgGameMatchSignOutPermissionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOutPermissionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOutPermissionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOutPermissionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOutPermissionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOutPermissionResponse& from) {
    CMsgGameMatchSignOutPermissionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOutPermissionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOutPermissionResponse";
  }
  protected:
  explicit CMsgGameMatchSignOutPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionGrantedFieldNumber = 1,
    kAbandonSignoutFieldNumber = 2,
    kRetryDelaySecondsFieldNumber = 3,
  };
  // optional bool permission_granted = 1 [default = false];
  bool has_permission_granted() const;
  private:
  bool _internal_has_permission_granted() const;
  public:
  void clear_permission_granted();
  bool permission_granted() const;
  void set_permission_granted(bool value);
  private:
  bool _internal_permission_granted() const;
  void _internal_set_permission_granted(bool value);
  public:

  // optional bool abandon_signout = 2 [default = false];
  bool has_abandon_signout() const;
  private:
  bool _internal_has_abandon_signout() const;
  public:
  void clear_abandon_signout();
  bool abandon_signout() const;
  void set_abandon_signout(bool value);
  private:
  bool _internal_abandon_signout() const;
  void _internal_set_abandon_signout(bool value);
  public:

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  bool has_retry_delay_seconds() const;
  private:
  bool _internal_has_retry_delay_seconds() const;
  public:
  void clear_retry_delay_seconds();
  uint32_t retry_delay_seconds() const;
  void set_retry_delay_seconds(uint32_t value);
  private:
  uint32_t _internal_retry_delay_seconds() const;
  void _internal_set_retry_delay_seconds(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutPermissionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool permission_granted_;
    bool abandon_signout_;
    uint32_t retry_delay_seconds_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutEventGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOutEventGameData) */ {
 public:
  inline CMsgGameMatchSignOutEventGameData() : CMsgGameMatchSignOutEventGameData(nullptr) {}
  ~CMsgGameMatchSignOutEventGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOutEventGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOutEventGameData(const CMsgGameMatchSignOutEventGameData& from);
  CMsgGameMatchSignOutEventGameData(CMsgGameMatchSignOutEventGameData&& from) noexcept
    : CMsgGameMatchSignOutEventGameData() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOutEventGameData& operator=(const CMsgGameMatchSignOutEventGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOutEventGameData& operator=(CMsgGameMatchSignOutEventGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOutEventGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOutEventGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOutEventGameData*>(
               &_CMsgGameMatchSignOutEventGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgGameMatchSignOutEventGameData& a, CMsgGameMatchSignOutEventGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOutEventGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOutEventGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOutEventGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOutEventGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOutEventGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOutEventGameData& from) {
    CMsgGameMatchSignOutEventGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOutEventGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOutEventGameData";
  }
  protected:
  explicit CMsgGameMatchSignOutEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameNameFieldNumber = 2,
    kMapNameFieldNumber = 3,
    kEventGameDataFieldNumber = 4,
    kEventIdFieldNumber = 1,
    kStartTimeFieldNumber = 5,
  };
  // optional string game_name = 2;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_name();
  PROTOBUF_NODISCARD std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional string map_name = 3;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_map_name();
  PROTOBUF_NODISCARD std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional bytes event_game_data = 4;
  bool has_event_game_data() const;
  private:
  bool _internal_has_event_game_data() const;
  public:
  void clear_event_game_data();
  const std::string& event_game_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_game_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_game_data();
  PROTOBUF_NODISCARD std::string* release_event_game_data();
  void set_allocated_event_game_data(std::string* event_game_data);
  private:
  const std::string& _internal_event_game_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_game_data(const std::string& value);
  std::string* _internal_mutable_event_game_data();
  public:

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 start_time = 5;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutEventGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_game_data_;
    int event_id_;
    uint32_t start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutPerfData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOutPerfData) */ {
 public:
  inline CMsgGameMatchSignOutPerfData() : CMsgGameMatchSignOutPerfData(nullptr) {}
  ~CMsgGameMatchSignOutPerfData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPerfData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOutPerfData(const CMsgGameMatchSignOutPerfData& from);
  CMsgGameMatchSignOutPerfData(CMsgGameMatchSignOutPerfData&& from) noexcept
    : CMsgGameMatchSignOutPerfData() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOutPerfData& operator=(const CMsgGameMatchSignOutPerfData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOutPerfData& operator=(CMsgGameMatchSignOutPerfData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOutPerfData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOutPerfData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOutPerfData*>(
               &_CMsgGameMatchSignOutPerfData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgGameMatchSignOutPerfData& a, CMsgGameMatchSignOutPerfData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOutPerfData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOutPerfData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOutPerfData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOutPerfData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOutPerfData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOutPerfData& from) {
    CMsgGameMatchSignOutPerfData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOutPerfData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOutPerfData";
  }
  protected:
  explicit CMsgGameMatchSignOutPerfData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageFrameTimeFieldNumber = 1,
    kMaxFrameTimeFieldNumber = 2,
    kAverageComputeTimeFieldNumber = 5,
    kMaxComputeTimeFieldNumber = 6,
    kAverageClientTickTimeFieldNumber = 7,
    kMaxClientTickTimeFieldNumber = 8,
    kAverageClientSimulateTimeFieldNumber = 9,
    kMaxClientSimulateTimeFieldNumber = 10,
    kAverageOutputTimeFieldNumber = 11,
    kMaxOutputTimeFieldNumber = 12,
    kAverageWaitForRenderingToCompleteTimeFieldNumber = 13,
    kMaxWaitForRenderingToCompleteTimeFieldNumber = 14,
    kAverageSwapTimeFieldNumber = 15,
    kMaxSwapTimeFieldNumber = 16,
    kAverageFrameUpdateTimeFieldNumber = 17,
    kMaxFrameUpdateTimeFieldNumber = 18,
    kAverageIdleTimeFieldNumber = 19,
    kMaxIdleTimeFieldNumber = 20,
    kAverageInputProcessingTimeFieldNumber = 21,
    kMaxInputProcessingTimeFieldNumber = 22,
    kServerAverageFrameTimeFieldNumber = 3,
    kServerMaxFrameTimeFieldNumber = 4,
  };
  // repeated float average_frame_time = 1;
  int average_frame_time_size() const;
  private:
  int _internal_average_frame_time_size() const;
  public:
  void clear_average_frame_time();
  private:
  float _internal_average_frame_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_frame_time() const;
  void _internal_add_average_frame_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_frame_time();
  public:
  float average_frame_time(int index) const;
  void set_average_frame_time(int index, float value);
  void add_average_frame_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_frame_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_frame_time();

  // repeated float max_frame_time = 2;
  int max_frame_time_size() const;
  private:
  int _internal_max_frame_time_size() const;
  public:
  void clear_max_frame_time();
  private:
  float _internal_max_frame_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_frame_time() const;
  void _internal_add_max_frame_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_frame_time();
  public:
  float max_frame_time(int index) const;
  void set_max_frame_time(int index, float value);
  void add_max_frame_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_frame_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_frame_time();

  // repeated float average_compute_time = 5;
  int average_compute_time_size() const;
  private:
  int _internal_average_compute_time_size() const;
  public:
  void clear_average_compute_time();
  private:
  float _internal_average_compute_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_compute_time() const;
  void _internal_add_average_compute_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_compute_time();
  public:
  float average_compute_time(int index) const;
  void set_average_compute_time(int index, float value);
  void add_average_compute_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_compute_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_compute_time();

  // repeated float max_compute_time = 6;
  int max_compute_time_size() const;
  private:
  int _internal_max_compute_time_size() const;
  public:
  void clear_max_compute_time();
  private:
  float _internal_max_compute_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_compute_time() const;
  void _internal_add_max_compute_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_compute_time();
  public:
  float max_compute_time(int index) const;
  void set_max_compute_time(int index, float value);
  void add_max_compute_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_compute_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_compute_time();

  // repeated float average_client_tick_time = 7;
  int average_client_tick_time_size() const;
  private:
  int _internal_average_client_tick_time_size() const;
  public:
  void clear_average_client_tick_time();
  private:
  float _internal_average_client_tick_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_client_tick_time() const;
  void _internal_add_average_client_tick_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_client_tick_time();
  public:
  float average_client_tick_time(int index) const;
  void set_average_client_tick_time(int index, float value);
  void add_average_client_tick_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_client_tick_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_client_tick_time();

  // repeated float max_client_tick_time = 8;
  int max_client_tick_time_size() const;
  private:
  int _internal_max_client_tick_time_size() const;
  public:
  void clear_max_client_tick_time();
  private:
  float _internal_max_client_tick_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_client_tick_time() const;
  void _internal_add_max_client_tick_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_client_tick_time();
  public:
  float max_client_tick_time(int index) const;
  void set_max_client_tick_time(int index, float value);
  void add_max_client_tick_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_client_tick_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_client_tick_time();

  // repeated float average_client_simulate_time = 9;
  int average_client_simulate_time_size() const;
  private:
  int _internal_average_client_simulate_time_size() const;
  public:
  void clear_average_client_simulate_time();
  private:
  float _internal_average_client_simulate_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_client_simulate_time() const;
  void _internal_add_average_client_simulate_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_client_simulate_time();
  public:
  float average_client_simulate_time(int index) const;
  void set_average_client_simulate_time(int index, float value);
  void add_average_client_simulate_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_client_simulate_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_client_simulate_time();

  // repeated float max_client_simulate_time = 10;
  int max_client_simulate_time_size() const;
  private:
  int _internal_max_client_simulate_time_size() const;
  public:
  void clear_max_client_simulate_time();
  private:
  float _internal_max_client_simulate_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_client_simulate_time() const;
  void _internal_add_max_client_simulate_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_client_simulate_time();
  public:
  float max_client_simulate_time(int index) const;
  void set_max_client_simulate_time(int index, float value);
  void add_max_client_simulate_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_client_simulate_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_client_simulate_time();

  // repeated float average_output_time = 11;
  int average_output_time_size() const;
  private:
  int _internal_average_output_time_size() const;
  public:
  void clear_average_output_time();
  private:
  float _internal_average_output_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_output_time() const;
  void _internal_add_average_output_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_output_time();
  public:
  float average_output_time(int index) const;
  void set_average_output_time(int index, float value);
  void add_average_output_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_output_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_output_time();

  // repeated float max_output_time = 12;
  int max_output_time_size() const;
  private:
  int _internal_max_output_time_size() const;
  public:
  void clear_max_output_time();
  private:
  float _internal_max_output_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_output_time() const;
  void _internal_add_max_output_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_output_time();
  public:
  float max_output_time(int index) const;
  void set_max_output_time(int index, float value);
  void add_max_output_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_output_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_output_time();

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  int average_wait_for_rendering_to_complete_time_size() const;
  private:
  int _internal_average_wait_for_rendering_to_complete_time_size() const;
  public:
  void clear_average_wait_for_rendering_to_complete_time();
  private:
  float _internal_average_wait_for_rendering_to_complete_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_wait_for_rendering_to_complete_time() const;
  void _internal_add_average_wait_for_rendering_to_complete_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_wait_for_rendering_to_complete_time();
  public:
  float average_wait_for_rendering_to_complete_time(int index) const;
  void set_average_wait_for_rendering_to_complete_time(int index, float value);
  void add_average_wait_for_rendering_to_complete_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_wait_for_rendering_to_complete_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_wait_for_rendering_to_complete_time();

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  int max_wait_for_rendering_to_complete_time_size() const;
  private:
  int _internal_max_wait_for_rendering_to_complete_time_size() const;
  public:
  void clear_max_wait_for_rendering_to_complete_time();
  private:
  float _internal_max_wait_for_rendering_to_complete_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_wait_for_rendering_to_complete_time() const;
  void _internal_add_max_wait_for_rendering_to_complete_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_wait_for_rendering_to_complete_time();
  public:
  float max_wait_for_rendering_to_complete_time(int index) const;
  void set_max_wait_for_rendering_to_complete_time(int index, float value);
  void add_max_wait_for_rendering_to_complete_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_wait_for_rendering_to_complete_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_wait_for_rendering_to_complete_time();

  // repeated float average_swap_time = 15;
  int average_swap_time_size() const;
  private:
  int _internal_average_swap_time_size() const;
  public:
  void clear_average_swap_time();
  private:
  float _internal_average_swap_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_swap_time() const;
  void _internal_add_average_swap_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_swap_time();
  public:
  float average_swap_time(int index) const;
  void set_average_swap_time(int index, float value);
  void add_average_swap_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_swap_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_swap_time();

  // repeated float max_swap_time = 16;
  int max_swap_time_size() const;
  private:
  int _internal_max_swap_time_size() const;
  public:
  void clear_max_swap_time();
  private:
  float _internal_max_swap_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_swap_time() const;
  void _internal_add_max_swap_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_swap_time();
  public:
  float max_swap_time(int index) const;
  void set_max_swap_time(int index, float value);
  void add_max_swap_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_swap_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_swap_time();

  // repeated float average_frame_update_time = 17;
  int average_frame_update_time_size() const;
  private:
  int _internal_average_frame_update_time_size() const;
  public:
  void clear_average_frame_update_time();
  private:
  float _internal_average_frame_update_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_frame_update_time() const;
  void _internal_add_average_frame_update_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_frame_update_time();
  public:
  float average_frame_update_time(int index) const;
  void set_average_frame_update_time(int index, float value);
  void add_average_frame_update_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_frame_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_frame_update_time();

  // repeated float max_frame_update_time = 18;
  int max_frame_update_time_size() const;
  private:
  int _internal_max_frame_update_time_size() const;
  public:
  void clear_max_frame_update_time();
  private:
  float _internal_max_frame_update_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_frame_update_time() const;
  void _internal_add_max_frame_update_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_frame_update_time();
  public:
  float max_frame_update_time(int index) const;
  void set_max_frame_update_time(int index, float value);
  void add_max_frame_update_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_frame_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_frame_update_time();

  // repeated float average_idle_time = 19;
  int average_idle_time_size() const;
  private:
  int _internal_average_idle_time_size() const;
  public:
  void clear_average_idle_time();
  private:
  float _internal_average_idle_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_idle_time() const;
  void _internal_add_average_idle_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_idle_time();
  public:
  float average_idle_time(int index) const;
  void set_average_idle_time(int index, float value);
  void add_average_idle_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_idle_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_idle_time();

  // repeated float max_idle_time = 20;
  int max_idle_time_size() const;
  private:
  int _internal_max_idle_time_size() const;
  public:
  void clear_max_idle_time();
  private:
  float _internal_max_idle_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_idle_time() const;
  void _internal_add_max_idle_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_idle_time();
  public:
  float max_idle_time(int index) const;
  void set_max_idle_time(int index, float value);
  void add_max_idle_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_idle_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_idle_time();

  // repeated float average_input_processing_time = 21;
  int average_input_processing_time_size() const;
  private:
  int _internal_average_input_processing_time_size() const;
  public:
  void clear_average_input_processing_time();
  private:
  float _internal_average_input_processing_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_average_input_processing_time() const;
  void _internal_add_average_input_processing_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_average_input_processing_time();
  public:
  float average_input_processing_time(int index) const;
  void set_average_input_processing_time(int index, float value);
  void add_average_input_processing_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      average_input_processing_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_average_input_processing_time();

  // repeated float max_input_processing_time = 22;
  int max_input_processing_time_size() const;
  private:
  int _internal_max_input_processing_time_size() const;
  public:
  void clear_max_input_processing_time();
  private:
  float _internal_max_input_processing_time(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_max_input_processing_time() const;
  void _internal_add_max_input_processing_time(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_max_input_processing_time();
  public:
  float max_input_processing_time(int index) const;
  void set_max_input_processing_time(int index, float value);
  void add_max_input_processing_time(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      max_input_processing_time() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_max_input_processing_time();

  // optional float server_average_frame_time = 3;
  bool has_server_average_frame_time() const;
  private:
  bool _internal_has_server_average_frame_time() const;
  public:
  void clear_server_average_frame_time();
  float server_average_frame_time() const;
  void set_server_average_frame_time(float value);
  private:
  float _internal_server_average_frame_time() const;
  void _internal_set_server_average_frame_time(float value);
  public:

  // optional float server_max_frame_time = 4;
  bool has_server_max_frame_time() const;
  private:
  bool _internal_has_server_max_frame_time() const;
  public:
  void clear_server_max_frame_time();
  float server_max_frame_time() const;
  void set_server_max_frame_time(float value);
  private:
  float _internal_server_max_frame_time() const;
  void _internal_set_server_max_frame_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutPerfData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_frame_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_frame_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_compute_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_compute_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_client_tick_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_client_tick_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_client_simulate_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_client_simulate_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_output_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_output_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_wait_for_rendering_to_complete_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_wait_for_rendering_to_complete_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_swap_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_swap_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_frame_update_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_frame_update_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_idle_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_idle_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > average_input_processing_time_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > max_input_processing_time_;
    float server_average_frame_time_;
    float server_max_frame_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameMatchSignOutBanData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameMatchSignOutBanData) */ {
 public:
  inline CMsgGameMatchSignOutBanData() : CMsgGameMatchSignOutBanData(nullptr) {}
  ~CMsgGameMatchSignOutBanData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameMatchSignOutBanData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameMatchSignOutBanData(const CMsgGameMatchSignOutBanData& from);
  CMsgGameMatchSignOutBanData(CMsgGameMatchSignOutBanData&& from) noexcept
    : CMsgGameMatchSignOutBanData() {
    *this = ::std::move(from);
  }

  inline CMsgGameMatchSignOutBanData& operator=(const CMsgGameMatchSignOutBanData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameMatchSignOutBanData& operator=(CMsgGameMatchSignOutBanData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameMatchSignOutBanData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameMatchSignOutBanData* internal_default_instance() {
    return reinterpret_cast<const CMsgGameMatchSignOutBanData*>(
               &_CMsgGameMatchSignOutBanData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgGameMatchSignOutBanData& a, CMsgGameMatchSignOutBanData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameMatchSignOutBanData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameMatchSignOutBanData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameMatchSignOutBanData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameMatchSignOutBanData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameMatchSignOutBanData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameMatchSignOutBanData& from) {
    CMsgGameMatchSignOutBanData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameMatchSignOutBanData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameMatchSignOutBanData";
  }
  protected:
  explicit CMsgGameMatchSignOutBanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroBansFieldNumber = 1,
    kHeroBanVotesFieldNumber = 2,
  };
  // repeated uint32 hero_bans = 1;
  int hero_bans_size() const;
  private:
  int _internal_hero_bans_size() const;
  public:
  void clear_hero_bans();
  private:
  uint32_t _internal_hero_bans(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hero_bans() const;
  void _internal_add_hero_bans(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hero_bans();
  public:
  uint32_t hero_bans(int index) const;
  void set_hero_bans(int index, uint32_t value);
  void add_hero_bans(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hero_bans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hero_bans();

  // repeated uint32 hero_ban_votes = 2;
  int hero_ban_votes_size() const;
  private:
  int _internal_hero_ban_votes_size() const;
  public:
  void clear_hero_ban_votes();
  private:
  uint32_t _internal_hero_ban_votes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hero_ban_votes() const;
  void _internal_add_hero_ban_votes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hero_ban_votes();
  public:
  uint32_t hero_ban_votes(int index) const;
  void set_hero_ban_votes(int index, uint32_t value);
  void add_hero_ban_votes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hero_ban_votes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hero_ban_votes();

  // @@protoc_insertion_point(class_scope:CMsgGameMatchSignOutBanData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hero_bans_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hero_ban_votes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility) */ {
 public:
  inline CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() : CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(nullptr) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from);
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& operator=(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& operator=(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*>(
               &_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& a, CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
    CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility";
  }
  protected:
  explicit CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityLevelFieldNumber = 2,
    kAbilityIdFieldNumber = 1,
  };
  // optional uint32 ability_level = 2;
  bool has_ability_level() const;
  private:
  bool _internal_has_ability_level() const;
  public:
  void clear_ability_level();
  uint32_t ability_level() const;
  void set_ability_level(uint32_t value);
  private:
  uint32_t _internal_ability_level() const;
  void _internal_set_ability_level(uint32_t value);
  public:

  // optional int32 ability_id = 1 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ability_level_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate.Team.Player) */ {
 public:
  inline CMsgDOTALiveScoreboardUpdate_Team_Player() : CMsgDOTALiveScoreboardUpdate_Team_Player(nullptr) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  CMsgDOTALiveScoreboardUpdate_Team_Player(CMsgDOTALiveScoreboardUpdate_Team_Player&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate_Team_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate_Team_Player& operator=(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALiveScoreboardUpdate_Team_Player& operator=(CMsgDOTALiveScoreboardUpdate_Team_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALiveScoreboardUpdate_Team_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALiveScoreboardUpdate_Team_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate_Team_Player*>(
               &_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgDOTALiveScoreboardUpdate_Team_Player& a, CMsgDOTALiveScoreboardUpdate_Team_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALiveScoreboardUpdate_Team_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALiveScoreboardUpdate_Team_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
    CMsgDOTALiveScoreboardUpdate_Team_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALiveScoreboardUpdate.Team.Player";
  }
  protected:
  explicit CMsgDOTALiveScoreboardUpdate_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility HeroAbility;

  typedef CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState DOTAUltimateState;
  static constexpr DOTAUltimateState k_EDOTAUltimateStateNotLearned =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNotLearned;
  static constexpr DOTAUltimateState k_EDOTAUltimateStateCooldown =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateCooldown;
  static constexpr DOTAUltimateState k_EDOTAUltimateStateNeedsMana =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateNeedsMana;
  static constexpr DOTAUltimateState k_EDOTAUltimateStateReady =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_k_EDOTAUltimateStateReady;
  static inline bool DOTAUltimateState_IsValid(int value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value);
  }
  static constexpr DOTAUltimateState DOTAUltimateState_MIN =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MIN;
  static constexpr DOTAUltimateState DOTAUltimateState_MAX =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_MAX;
  static constexpr int DOTAUltimateState_ARRAYSIZE =
    CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_DOTAUltimateState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DOTAUltimateState_descriptor() {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
  }
  template<typename T>
  static inline const std::string& DOTAUltimateState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DOTAUltimateState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DOTAUltimateState_Name.");
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Name(enum_t_value);
  }
  static inline bool DOTAUltimateState_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DOTAUltimateState* value) {
    return CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAbilitiesFieldNumber = 27,
    kPlayerNameFieldNumber = 2,
    kHeroNameFieldNumber = 3,
    kPlayerSlotFieldNumber = 1,
    kHeroIdFieldNumber = 4,
    kKillsFieldNumber = 5,
    kDeathsFieldNumber = 6,
    kAssistsFieldNumber = 7,
    kLastHitsFieldNumber = 8,
    kDeniesFieldNumber = 9,
    kGoldFieldNumber = 10,
    kLevelFieldNumber = 11,
    kGoldPerMinFieldNumber = 12,
    kXpPerMinFieldNumber = 13,
    kUltimateStateFieldNumber = 14,
    kUltimateCooldownFieldNumber = 15,
    kRespawnTimerFieldNumber = 22,
    kAccountIdFieldNumber = 23,
    kPositionXFieldNumber = 24,
    kPositionYFieldNumber = 25,
    kNetWorthFieldNumber = 26,
    kItem0FieldNumber = 16,
    kItem1FieldNumber = 17,
    kItem2FieldNumber = 18,
    kItem3FieldNumber = 19,
    kItem4FieldNumber = 20,
    kItem5FieldNumber = 21,
  };
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* mutable_abilities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >*
      mutable_abilities();
  private:
  const ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& _internal_abilities(int index) const;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* _internal_add_abilities();
  public:
  const ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& abilities(int index) const;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* add_abilities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >&
      abilities() const;

  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional string hero_name = 3;
  bool has_hero_name() const;
  private:
  bool _internal_has_hero_name() const;
  public:
  void clear_hero_name();
  const std::string& hero_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hero_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hero_name();
  PROTOBUF_NODISCARD std::string* release_hero_name();
  void set_allocated_hero_name(std::string* hero_name);
  private:
  const std::string& _internal_hero_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hero_name(const std::string& value);
  std::string* _internal_mutable_hero_name();
  public:

  // optional uint32 player_slot = 1;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 kills = 5;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 6;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 7;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 last_hits = 8;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  uint32_t last_hits() const;
  void set_last_hits(uint32_t value);
  private:
  uint32_t _internal_last_hits() const;
  void _internal_set_last_hits(uint32_t value);
  public:

  // optional uint32 denies = 9;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  uint32_t denies() const;
  void set_denies(uint32_t value);
  private:
  uint32_t _internal_denies() const;
  void _internal_set_denies(uint32_t value);
  public:

  // optional uint32 gold = 10;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 level = 11;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional float gold_per_min = 12;
  bool has_gold_per_min() const;
  private:
  bool _internal_has_gold_per_min() const;
  public:
  void clear_gold_per_min();
  float gold_per_min() const;
  void set_gold_per_min(float value);
  private:
  float _internal_gold_per_min() const;
  void _internal_set_gold_per_min(float value);
  public:

  // optional float xp_per_min = 13;
  bool has_xp_per_min() const;
  private:
  bool _internal_has_xp_per_min() const;
  public:
  void clear_xp_per_min();
  float xp_per_min() const;
  void set_xp_per_min(float value);
  private:
  float _internal_xp_per_min() const;
  void _internal_set_xp_per_min(float value);
  public:

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  bool has_ultimate_state() const;
  private:
  bool _internal_has_ultimate_state() const;
  public:
  void clear_ultimate_state();
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState ultimate_state() const;
  void set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value);
  private:
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState _internal_ultimate_state() const;
  void _internal_set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value);
  public:

  // optional float ultimate_cooldown = 15;
  bool has_ultimate_cooldown() const;
  private:
  bool _internal_has_ultimate_cooldown() const;
  public:
  void clear_ultimate_cooldown();
  float ultimate_cooldown() const;
  void set_ultimate_cooldown(float value);
  private:
  float _internal_ultimate_cooldown() const;
  void _internal_set_ultimate_cooldown(float value);
  public:

  // optional uint32 respawn_timer = 22;
  bool has_respawn_timer() const;
  private:
  bool _internal_has_respawn_timer() const;
  public:
  void clear_respawn_timer();
  uint32_t respawn_timer() const;
  void set_respawn_timer(uint32_t value);
  private:
  uint32_t _internal_respawn_timer() const;
  void _internal_set_respawn_timer(uint32_t value);
  public:

  // optional uint32 account_id = 23;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional float position_x = 24;
  bool has_position_x() const;
  private:
  bool _internal_has_position_x() const;
  public:
  void clear_position_x();
  float position_x() const;
  void set_position_x(float value);
  private:
  float _internal_position_x() const;
  void _internal_set_position_x(float value);
  public:

  // optional float position_y = 25;
  bool has_position_y() const;
  private:
  bool _internal_has_position_y() const;
  public:
  void clear_position_y();
  float position_y() const;
  void set_position_y(float value);
  private:
  float _internal_position_y() const;
  void _internal_set_position_y(float value);
  public:

  // optional uint32 net_worth = 26;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional int32 item0 = 16 [default = -1];
  bool has_item0() const;
  private:
  bool _internal_has_item0() const;
  public:
  void clear_item0();
  int32_t item0() const;
  void set_item0(int32_t value);
  private:
  int32_t _internal_item0() const;
  void _internal_set_item0(int32_t value);
  public:

  // optional int32 item1 = 17 [default = -1];
  bool has_item1() const;
  private:
  bool _internal_has_item1() const;
  public:
  void clear_item1();
  int32_t item1() const;
  void set_item1(int32_t value);
  private:
  int32_t _internal_item1() const;
  void _internal_set_item1(int32_t value);
  public:

  // optional int32 item2 = 18 [default = -1];
  bool has_item2() const;
  private:
  bool _internal_has_item2() const;
  public:
  void clear_item2();
  int32_t item2() const;
  void set_item2(int32_t value);
  private:
  int32_t _internal_item2() const;
  void _internal_set_item2(int32_t value);
  public:

  // optional int32 item3 = 19 [default = -1];
  bool has_item3() const;
  private:
  bool _internal_has_item3() const;
  public:
  void clear_item3();
  int32_t item3() const;
  void set_item3(int32_t value);
  private:
  int32_t _internal_item3() const;
  void _internal_set_item3(int32_t value);
  public:

  // optional int32 item4 = 20 [default = -1];
  bool has_item4() const;
  private:
  bool _internal_has_item4() const;
  public:
  void clear_item4();
  int32_t item4() const;
  void set_item4(int32_t value);
  private:
  int32_t _internal_item4() const;
  void _internal_set_item4(int32_t value);
  public:

  // optional int32 item5 = 21 [default = -1];
  bool has_item5() const;
  private:
  bool _internal_has_item5() const;
  public:
  void clear_item5();
  int32_t item5() const;
  void set_item5(int32_t value);
  private:
  int32_t _internal_item5() const;
  void _internal_set_item5(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility > abilities_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hero_name_;
    uint32_t player_slot_;
    uint32_t hero_id_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t last_hits_;
    uint32_t denies_;
    uint32_t gold_;
    uint32_t level_;
    float gold_per_min_;
    float xp_per_min_;
    int ultimate_state_;
    float ultimate_cooldown_;
    uint32_t respawn_timer_;
    uint32_t account_id_;
    float position_x_;
    float position_y_;
    uint32_t net_worth_;
    int32_t item0_;
    int32_t item1_;
    int32_t item2_;
    int32_t item3_;
    int32_t item4_;
    int32_t item5_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate.Team) */ {
 public:
  inline CMsgDOTALiveScoreboardUpdate_Team() : CMsgDOTALiveScoreboardUpdate_Team(nullptr) {}
  ~CMsgDOTALiveScoreboardUpdate_Team() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from);
  CMsgDOTALiveScoreboardUpdate_Team(CMsgDOTALiveScoreboardUpdate_Team&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate_Team& operator=(const CMsgDOTALiveScoreboardUpdate_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALiveScoreboardUpdate_Team& operator=(CMsgDOTALiveScoreboardUpdate_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALiveScoreboardUpdate_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALiveScoreboardUpdate_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate_Team*>(
               &_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgDOTALiveScoreboardUpdate_Team& a, CMsgDOTALiveScoreboardUpdate_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALiveScoreboardUpdate_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALiveScoreboardUpdate_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALiveScoreboardUpdate_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALiveScoreboardUpdate_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALiveScoreboardUpdate_Team& from) {
    CMsgDOTALiveScoreboardUpdate_Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALiveScoreboardUpdate.Team";
  }
  protected:
  explicit CMsgDOTALiveScoreboardUpdate_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kHeroPicksFieldNumber = 5,
    kHeroBansFieldNumber = 6,
    kScoreFieldNumber = 2,
    kTowerStateFieldNumber = 3,
    kBarracksStateFieldNumber = 4,
  };
  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
      mutable_players();
  private:
  const ::CMsgDOTALiveScoreboardUpdate_Team_Player& _internal_players(int index) const;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* _internal_add_players();
  public:
  const ::CMsgDOTALiveScoreboardUpdate_Team_Player& players(int index) const;
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
      players() const;

  // repeated uint32 hero_picks = 5;
  int hero_picks_size() const;
  private:
  int _internal_hero_picks_size() const;
  public:
  void clear_hero_picks();
  private:
  uint32_t _internal_hero_picks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hero_picks() const;
  void _internal_add_hero_picks(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hero_picks();
  public:
  uint32_t hero_picks(int index) const;
  void set_hero_picks(int index, uint32_t value);
  void add_hero_picks(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hero_picks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hero_picks();

  // repeated uint32 hero_bans = 6;
  int hero_bans_size() const;
  private:
  int _internal_hero_bans_size() const;
  public:
  void clear_hero_bans();
  private:
  uint32_t _internal_hero_bans(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hero_bans() const;
  void _internal_add_hero_bans(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hero_bans();
  public:
  uint32_t hero_bans(int index) const;
  void set_hero_bans(int index, uint32_t value);
  void add_hero_bans(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hero_bans() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hero_bans();

  // optional uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // optional uint32 tower_state = 3;
  bool has_tower_state() const;
  private:
  bool _internal_has_tower_state() const;
  public:
  void clear_tower_state();
  uint32_t tower_state() const;
  void set_tower_state(uint32_t value);
  private:
  uint32_t _internal_tower_state() const;
  void _internal_set_tower_state(uint32_t value);
  public:

  // optional uint32 barracks_state = 4;
  bool has_barracks_state() const;
  private:
  bool _internal_has_barracks_state() const;
  public:
  void clear_barracks_state();
  uint32_t barracks_state() const;
  void set_barracks_state(uint32_t value);
  private:
  uint32_t _internal_barracks_state() const;
  void _internal_set_barracks_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hero_picks_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hero_bans_;
    uint32_t score_;
    uint32_t tower_state_;
    uint32_t barracks_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALiveScoreboardUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALiveScoreboardUpdate) */ {
 public:
  inline CMsgDOTALiveScoreboardUpdate() : CMsgDOTALiveScoreboardUpdate(nullptr) {}
  ~CMsgDOTALiveScoreboardUpdate() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from);
  CMsgDOTALiveScoreboardUpdate(CMsgDOTALiveScoreboardUpdate&& from) noexcept
    : CMsgDOTALiveScoreboardUpdate() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALiveScoreboardUpdate& operator=(const CMsgDOTALiveScoreboardUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALiveScoreboardUpdate& operator=(CMsgDOTALiveScoreboardUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALiveScoreboardUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALiveScoreboardUpdate* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALiveScoreboardUpdate*>(
               &_CMsgDOTALiveScoreboardUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgDOTALiveScoreboardUpdate& a, CMsgDOTALiveScoreboardUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALiveScoreboardUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALiveScoreboardUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALiveScoreboardUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALiveScoreboardUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALiveScoreboardUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALiveScoreboardUpdate& from) {
    CMsgDOTALiveScoreboardUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALiveScoreboardUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALiveScoreboardUpdate";
  }
  protected:
  explicit CMsgDOTALiveScoreboardUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALiveScoreboardUpdate_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamGoodFieldNumber = 5,
    kTeamBadFieldNumber = 6,
    kTournamentIdFieldNumber = 1,
    kTournamentGameIdFieldNumber = 2,
    kDurationFieldNumber = 3,
    kHltvDelayFieldNumber = 4,
    kRoshanRespawnTimerFieldNumber = 7,
    kLeagueIdFieldNumber = 8,
    kMatchIdFieldNumber = 9,
  };
  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  bool has_team_good() const;
  private:
  bool _internal_has_team_good() const;
  public:
  void clear_team_good();
  const ::CMsgDOTALiveScoreboardUpdate_Team& team_good() const;
  PROTOBUF_NODISCARD ::CMsgDOTALiveScoreboardUpdate_Team* release_team_good();
  ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_good();
  void set_allocated_team_good(::CMsgDOTALiveScoreboardUpdate_Team* team_good);
  private:
  const ::CMsgDOTALiveScoreboardUpdate_Team& _internal_team_good() const;
  ::CMsgDOTALiveScoreboardUpdate_Team* _internal_mutable_team_good();
  public:
  void unsafe_arena_set_allocated_team_good(
      ::CMsgDOTALiveScoreboardUpdate_Team* team_good);
  ::CMsgDOTALiveScoreboardUpdate_Team* unsafe_arena_release_team_good();

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  bool has_team_bad() const;
  private:
  bool _internal_has_team_bad() const;
  public:
  void clear_team_bad();
  const ::CMsgDOTALiveScoreboardUpdate_Team& team_bad() const;
  PROTOBUF_NODISCARD ::CMsgDOTALiveScoreboardUpdate_Team* release_team_bad();
  ::CMsgDOTALiveScoreboardUpdate_Team* mutable_team_bad();
  void set_allocated_team_bad(::CMsgDOTALiveScoreboardUpdate_Team* team_bad);
  private:
  const ::CMsgDOTALiveScoreboardUpdate_Team& _internal_team_bad() const;
  ::CMsgDOTALiveScoreboardUpdate_Team* _internal_mutable_team_bad();
  public:
  void unsafe_arena_set_allocated_team_bad(
      ::CMsgDOTALiveScoreboardUpdate_Team* team_bad);
  ::CMsgDOTALiveScoreboardUpdate_Team* unsafe_arena_release_team_bad();

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 tournament_game_id = 2;
  bool has_tournament_game_id() const;
  private:
  bool _internal_has_tournament_game_id() const;
  public:
  void clear_tournament_game_id();
  uint32_t tournament_game_id() const;
  void set_tournament_game_id(uint32_t value);
  private:
  uint32_t _internal_tournament_game_id() const;
  void _internal_set_tournament_game_id(uint32_t value);
  public:

  // optional float duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional int32 hltv_delay = 4;
  bool has_hltv_delay() const;
  private:
  bool _internal_has_hltv_delay() const;
  public:
  void clear_hltv_delay();
  int32_t hltv_delay() const;
  void set_hltv_delay(int32_t value);
  private:
  int32_t _internal_hltv_delay() const;
  void _internal_set_hltv_delay(int32_t value);
  public:

  // optional uint32 roshan_respawn_timer = 7;
  bool has_roshan_respawn_timer() const;
  private:
  bool _internal_has_roshan_respawn_timer() const;
  public:
  void clear_roshan_respawn_timer();
  uint32_t roshan_respawn_timer() const;
  void set_roshan_respawn_timer(uint32_t value);
  private:
  uint32_t _internal_roshan_respawn_timer() const;
  void _internal_set_roshan_respawn_timer(uint32_t value);
  public:

  // optional uint32 league_id = 8;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint64 match_id = 9;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALiveScoreboardUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDOTALiveScoreboardUpdate_Team* team_good_;
    ::CMsgDOTALiveScoreboardUpdate_Team* team_bad_;
    uint32_t tournament_id_;
    uint32_t tournament_game_id_;
    float duration_;
    int32_t hltv_delay_;
    uint32_t roshan_respawn_timer_;
    uint32_t league_id_;
    uint64_t match_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestBatchPlayerResources final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestBatchPlayerResources) */ {
 public:
  inline CMsgServerToGCRequestBatchPlayerResources() : CMsgServerToGCRequestBatchPlayerResources(nullptr) {}
  ~CMsgServerToGCRequestBatchPlayerResources() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResources(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestBatchPlayerResources(const CMsgServerToGCRequestBatchPlayerResources& from);
  CMsgServerToGCRequestBatchPlayerResources(CMsgServerToGCRequestBatchPlayerResources&& from) noexcept
    : CMsgServerToGCRequestBatchPlayerResources() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestBatchPlayerResources& operator=(const CMsgServerToGCRequestBatchPlayerResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestBatchPlayerResources& operator=(CMsgServerToGCRequestBatchPlayerResources&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestBatchPlayerResources& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestBatchPlayerResources* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestBatchPlayerResources*>(
               &_CMsgServerToGCRequestBatchPlayerResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgServerToGCRequestBatchPlayerResources& a, CMsgServerToGCRequestBatchPlayerResources& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestBatchPlayerResources* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestBatchPlayerResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestBatchPlayerResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestBatchPlayerResources>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestBatchPlayerResources& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestBatchPlayerResources& from) {
    CMsgServerToGCRequestBatchPlayerResources::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestBatchPlayerResources* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestBatchPlayerResources";
  }
  protected:
  explicit CMsgServerToGCRequestBatchPlayerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
    kRankTypesFieldNumber = 4,
  };
  // repeated uint32 account_ids = 1 [packed = true];
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // repeated uint32 rank_types = 4 [packed = true];
  int rank_types_size() const;
  private:
  int _internal_rank_types_size() const;
  public:
  void clear_rank_types();
  private:
  uint32_t _internal_rank_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_rank_types() const;
  void _internal_add_rank_types(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_rank_types();
  public:
  uint32_t rank_types(int index) const;
  void set_rank_types(int index, uint32_t value);
  void add_rank_types(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      rank_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_rank_types();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestBatchPlayerResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    mutable std::atomic<int> _account_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > rank_types_;
    mutable std::atomic<int> _rank_types_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestBatchPlayerResourcesResponse_Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result) */ {
 public:
  inline CMsgServerToGCRequestBatchPlayerResourcesResponse_Result() : CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(nullptr) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponse_Result() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from);
  CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result&& from) noexcept
    : CMsgServerToGCRequestBatchPlayerResourcesResponse_Result() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& operator=(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& operator=(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result*>(
               &_CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& a, CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from) {
    CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestBatchPlayerResourcesResponse.Result";
  }
  protected:
  explicit CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRankFieldNumber = 4,
    kPreventTextChatFieldNumber = 2,
    kPreventVoiceChatFieldNumber = 3,
    kRankCalibratedFieldNumber = 5,
    kLowPriorityFieldNumber = 6,
    kIsNewPlayerFieldNumber = 7,
    kIsGuidePlayerFieldNumber = 8,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 rank = 4;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // optional bool prevent_text_chat = 2;
  bool has_prevent_text_chat() const;
  private:
  bool _internal_has_prevent_text_chat() const;
  public:
  void clear_prevent_text_chat();
  bool prevent_text_chat() const;
  void set_prevent_text_chat(bool value);
  private:
  bool _internal_prevent_text_chat() const;
  void _internal_set_prevent_text_chat(bool value);
  public:

  // optional bool prevent_voice_chat = 3;
  bool has_prevent_voice_chat() const;
  private:
  bool _internal_has_prevent_voice_chat() const;
  public:
  void clear_prevent_voice_chat();
  bool prevent_voice_chat() const;
  void set_prevent_voice_chat(bool value);
  private:
  bool _internal_prevent_voice_chat() const;
  void _internal_set_prevent_voice_chat(bool value);
  public:

  // optional bool rank_calibrated = 5;
  bool has_rank_calibrated() const;
  private:
  bool _internal_has_rank_calibrated() const;
  public:
  void clear_rank_calibrated();
  bool rank_calibrated() const;
  void set_rank_calibrated(bool value);
  private:
  bool _internal_rank_calibrated() const;
  void _internal_set_rank_calibrated(bool value);
  public:

  // optional bool low_priority = 6;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // optional bool is_new_player = 7;
  bool has_is_new_player() const;
  private:
  bool _internal_has_is_new_player() const;
  public:
  void clear_is_new_player();
  bool is_new_player() const;
  void set_is_new_player(bool value);
  private:
  bool _internal_is_new_player() const;
  void _internal_set_is_new_player(bool value);
  public:

  // optional bool is_guide_player = 8;
  bool has_is_guide_player() const;
  private:
  bool _internal_has_is_guide_player() const;
  public:
  void clear_is_guide_player();
  bool is_guide_player() const;
  void set_is_guide_player(bool value);
  private:
  bool _internal_is_guide_player() const;
  void _internal_set_is_guide_player(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t rank_;
    bool prevent_text_chat_;
    bool prevent_voice_chat_;
    bool rank_calibrated_;
    bool low_priority_;
    bool is_new_player_;
    bool is_guide_player_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestBatchPlayerResourcesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestBatchPlayerResourcesResponse) */ {
 public:
  inline CMsgServerToGCRequestBatchPlayerResourcesResponse() : CMsgServerToGCRequestBatchPlayerResourcesResponse(nullptr) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestBatchPlayerResourcesResponse(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from);
  CMsgServerToGCRequestBatchPlayerResourcesResponse(CMsgServerToGCRequestBatchPlayerResourcesResponse&& from) noexcept
    : CMsgServerToGCRequestBatchPlayerResourcesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestBatchPlayerResourcesResponse& operator=(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestBatchPlayerResourcesResponse& operator=(CMsgServerToGCRequestBatchPlayerResourcesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestBatchPlayerResourcesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestBatchPlayerResourcesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestBatchPlayerResourcesResponse*>(
               &_CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgServerToGCRequestBatchPlayerResourcesResponse& a, CMsgServerToGCRequestBatchPlayerResourcesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestBatchPlayerResourcesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestBatchPlayerResourcesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestBatchPlayerResourcesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestBatchPlayerResourcesResponse& from) {
    CMsgServerToGCRequestBatchPlayerResourcesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestBatchPlayerResourcesResponse";
  }
  protected:
  explicit CMsgServerToGCRequestBatchPlayerResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCRequestBatchPlayerResourcesResponse_Result Result;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 6,
  };
  // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >*
      mutable_results();
  private:
  const ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& _internal_results(int index) const;
  ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* _internal_add_results();
  public:
  const ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& results(int index) const;
  ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >&
      results() const;

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestBatchPlayerResourcesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result > results_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerFailedToConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerFailedToConnect) */ {
 public:
  inline CMsgDOTAPlayerFailedToConnect() : CMsgDOTAPlayerFailedToConnect(nullptr) {}
  ~CMsgDOTAPlayerFailedToConnect() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPlayerFailedToConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from);
  CMsgDOTAPlayerFailedToConnect(CMsgDOTAPlayerFailedToConnect&& from) noexcept
    : CMsgDOTAPlayerFailedToConnect() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerFailedToConnect& operator=(const CMsgDOTAPlayerFailedToConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerFailedToConnect& operator=(CMsgDOTAPlayerFailedToConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPlayerFailedToConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerFailedToConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerFailedToConnect*>(
               &_CMsgDOTAPlayerFailedToConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgDOTAPlayerFailedToConnect& a, CMsgDOTAPlayerFailedToConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerFailedToConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerFailedToConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPlayerFailedToConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerFailedToConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPlayerFailedToConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPlayerFailedToConnect& from) {
    CMsgDOTAPlayerFailedToConnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerFailedToConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerFailedToConnect";
  }
  protected:
  explicit CMsgDOTAPlayerFailedToConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailedLoadersFieldNumber = 1,
    kAbandonedLoadersFieldNumber = 2,
  };
  // repeated fixed64 failed_loaders = 1;
  int failed_loaders_size() const;
  private:
  int _internal_failed_loaders_size() const;
  public:
  void clear_failed_loaders();
  private:
  uint64_t _internal_failed_loaders(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_failed_loaders() const;
  void _internal_add_failed_loaders(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_failed_loaders();
  public:
  uint64_t failed_loaders(int index) const;
  void set_failed_loaders(int index, uint64_t value);
  void add_failed_loaders(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      failed_loaders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_failed_loaders();

  // repeated fixed64 abandoned_loaders = 2;
  int abandoned_loaders_size() const;
  private:
  int _internal_abandoned_loaders_size() const;
  public:
  void clear_abandoned_loaders();
  private:
  uint64_t _internal_abandoned_loaders(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_abandoned_loaders() const;
  void _internal_add_abandoned_loaders(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_abandoned_loaders();
  public:
  uint64_t abandoned_loaders(int index) const;
  void set_abandoned_loaders(int index, uint64_t value);
  void add_abandoned_loaders(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      abandoned_loaders() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_abandoned_loaders();

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerFailedToConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > failed_loaders_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > abandoned_loaders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToRelayConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToRelayConnect) */ {
 public:
  inline CMsgGCToRelayConnect() : CMsgGCToRelayConnect(nullptr) {}
  ~CMsgGCToRelayConnect() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToRelayConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from);
  CMsgGCToRelayConnect(CMsgGCToRelayConnect&& from) noexcept
    : CMsgGCToRelayConnect() {
    *this = ::std::move(from);
  }

  inline CMsgGCToRelayConnect& operator=(const CMsgGCToRelayConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToRelayConnect& operator=(CMsgGCToRelayConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToRelayConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToRelayConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToRelayConnect*>(
               &_CMsgGCToRelayConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgGCToRelayConnect& a, CMsgGCToRelayConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToRelayConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToRelayConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToRelayConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToRelayConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToRelayConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToRelayConnect& from) {
    CMsgGCToRelayConnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToRelayConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToRelayConnect";
  }
  protected:
  explicit CMsgGCToRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTvPublicAddrFieldNumber = 1,
    kSourceTvPrivateAddrFieldNumber = 2,
    kGameServerSteamIdFieldNumber = 4,
    kSourceTvPortFieldNumber = 3,
    kParentCountFieldNumber = 5,
    kTvUniqueSecretCodeFieldNumber = 6,
    kSourceTvSteamidFieldNumber = 7,
  };
  // optional uint32 source_tv_public_addr = 1;
  bool has_source_tv_public_addr() const;
  private:
  bool _internal_has_source_tv_public_addr() const;
  public:
  void clear_source_tv_public_addr();
  uint32_t source_tv_public_addr() const;
  void set_source_tv_public_addr(uint32_t value);
  private:
  uint32_t _internal_source_tv_public_addr() const;
  void _internal_set_source_tv_public_addr(uint32_t value);
  public:

  // optional uint32 source_tv_private_addr = 2;
  bool has_source_tv_private_addr() const;
  private:
  bool _internal_has_source_tv_private_addr() const;
  public:
  void clear_source_tv_private_addr();
  uint32_t source_tv_private_addr() const;
  void set_source_tv_private_addr(uint32_t value);
  private:
  uint32_t _internal_source_tv_private_addr() const;
  void _internal_set_source_tv_private_addr(uint32_t value);
  public:

  // optional uint64 game_server_steam_id = 4;
  bool has_game_server_steam_id() const;
  private:
  bool _internal_has_game_server_steam_id() const;
  public:
  void clear_game_server_steam_id();
  uint64_t game_server_steam_id() const;
  void set_game_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_game_server_steam_id() const;
  void _internal_set_game_server_steam_id(uint64_t value);
  public:

  // optional uint32 source_tv_port = 3;
  bool has_source_tv_port() const;
  private:
  bool _internal_has_source_tv_port() const;
  public:
  void clear_source_tv_port();
  uint32_t source_tv_port() const;
  void set_source_tv_port(uint32_t value);
  private:
  uint32_t _internal_source_tv_port() const;
  void _internal_set_source_tv_port(uint32_t value);
  public:

  // optional uint32 parent_count = 5;
  bool has_parent_count() const;
  private:
  bool _internal_has_parent_count() const;
  public:
  void clear_parent_count();
  uint32_t parent_count() const;
  void set_parent_count(uint32_t value);
  private:
  uint32_t _internal_parent_count() const;
  void _internal_set_parent_count(uint32_t value);
  public:

  // optional fixed64 tv_unique_secret_code = 6;
  bool has_tv_unique_secret_code() const;
  private:
  bool _internal_has_tv_unique_secret_code() const;
  public:
  void clear_tv_unique_secret_code();
  uint64_t tv_unique_secret_code() const;
  void set_tv_unique_secret_code(uint64_t value);
  private:
  uint64_t _internal_tv_unique_secret_code() const;
  void _internal_set_tv_unique_secret_code(uint64_t value);
  public:

  // optional fixed64 source_tv_steamid = 7;
  bool has_source_tv_steamid() const;
  private:
  bool _internal_has_source_tv_steamid() const;
  public:
  void clear_source_tv_steamid();
  uint64_t source_tv_steamid() const;
  void set_source_tv_steamid(uint64_t value);
  private:
  uint64_t _internal_source_tv_steamid() const;
  void _internal_set_source_tv_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToRelayConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t source_tv_public_addr_;
    uint32_t source_tv_private_addr_;
    uint64_t game_server_steam_id_;
    uint32_t source_tv_port_;
    uint32_t parent_count_;
    uint64_t tv_unique_secret_code_;
    uint64_t source_tv_steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCGCToLANServerRelayConnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCGCToLANServerRelayConnect) */ {
 public:
  inline CMsgGCGCToLANServerRelayConnect() : CMsgGCGCToLANServerRelayConnect(nullptr) {}
  ~CMsgGCGCToLANServerRelayConnect() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCGCToLANServerRelayConnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from);
  CMsgGCGCToLANServerRelayConnect(CMsgGCGCToLANServerRelayConnect&& from) noexcept
    : CMsgGCGCToLANServerRelayConnect() {
    *this = ::std::move(from);
  }

  inline CMsgGCGCToLANServerRelayConnect& operator=(const CMsgGCGCToLANServerRelayConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCGCToLANServerRelayConnect& operator=(CMsgGCGCToLANServerRelayConnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCGCToLANServerRelayConnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCGCToLANServerRelayConnect* internal_default_instance() {
    return reinterpret_cast<const CMsgGCGCToLANServerRelayConnect*>(
               &_CMsgGCGCToLANServerRelayConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgGCGCToLANServerRelayConnect& a, CMsgGCGCToLANServerRelayConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCGCToLANServerRelayConnect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCGCToLANServerRelayConnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCGCToLANServerRelayConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCGCToLANServerRelayConnect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCGCToLANServerRelayConnect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCGCToLANServerRelayConnect& from) {
    CMsgGCGCToLANServerRelayConnect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCGCToLANServerRelayConnect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCGCToLANServerRelayConnect";
  }
  protected:
  explicit CMsgGCGCToLANServerRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelaySteamidFieldNumber = 1,
  };
  // optional fixed64 relay_steamid = 1;
  bool has_relay_steamid() const;
  private:
  bool _internal_has_relay_steamid() const;
  public:
  void clear_relay_steamid();
  uint64_t relay_steamid() const;
  void set_relay_steamid(uint64_t value);
  private:
  uint64_t _internal_relay_steamid() const;
  void _internal_set_relay_steamid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCGCToLANServerRelayConnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t relay_steamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCBanStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCBanStatusRequest) */ {
 public:
  inline CMsgGCBanStatusRequest() : CMsgGCBanStatusRequest(nullptr) {}
  ~CMsgGCBanStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCBanStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from);
  CMsgGCBanStatusRequest(CMsgGCBanStatusRequest&& from) noexcept
    : CMsgGCBanStatusRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCBanStatusRequest& operator=(const CMsgGCBanStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCBanStatusRequest& operator=(CMsgGCBanStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCBanStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCBanStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCBanStatusRequest*>(
               &_CMsgGCBanStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgGCBanStatusRequest& a, CMsgGCBanStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCBanStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCBanStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCBanStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCBanStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCBanStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCBanStatusRequest& from) {
    CMsgGCBanStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCBanStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCBanStatusRequest";
  }
  protected:
  explicit CMsgGCBanStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCBanStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCBanStatusResponse) */ {
 public:
  inline CMsgGCBanStatusResponse() : CMsgGCBanStatusResponse(nullptr) {}
  ~CMsgGCBanStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCBanStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from);
  CMsgGCBanStatusResponse(CMsgGCBanStatusResponse&& from) noexcept
    : CMsgGCBanStatusResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCBanStatusResponse& operator=(const CMsgGCBanStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCBanStatusResponse& operator=(CMsgGCBanStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCBanStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCBanStatusResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCBanStatusResponse*>(
               &_CMsgGCBanStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgGCBanStatusResponse& a, CMsgGCBanStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCBanStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCBanStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCBanStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCBanStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCBanStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCBanStatusResponse& from) {
    CMsgGCBanStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCBanStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCBanStatusResponse";
  }
  protected:
  explicit CMsgGCBanStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kLowPriorityFieldNumber = 2,
    kTextChatBannedFieldNumber = 3,
    kVoiceChatBannedFieldNumber = 4,
  };
  // optional uint32 result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  uint32_t result() const;
  void set_result(uint32_t value);
  private:
  uint32_t _internal_result() const;
  void _internal_set_result(uint32_t value);
  public:

  // optional bool low_priority = 2;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // optional bool text_chat_banned = 3;
  bool has_text_chat_banned() const;
  private:
  bool _internal_has_text_chat_banned() const;
  public:
  void clear_text_chat_banned();
  bool text_chat_banned() const;
  void set_text_chat_banned(bool value);
  private:
  bool _internal_text_chat_banned() const;
  void _internal_set_text_chat_banned(bool value);
  public:

  // optional bool voice_chat_banned = 4;
  bool has_voice_chat_banned() const;
  private:
  bool _internal_has_voice_chat_banned() const;
  public:
  void clear_voice_chat_banned();
  bool voice_chat_banned() const;
  void set_voice_chat_banned(bool value);
  private:
  bool _internal_voice_chat_banned() const;
  void _internal_set_voice_chat_banned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCBanStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t result_;
    bool low_priority_;
    bool text_chat_banned_;
    bool voice_chat_banned_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgTournamentItemEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTournamentItemEvent) */ {
 public:
  inline CMsgTournamentItemEvent() : CMsgTournamentItemEvent(nullptr) {}
  ~CMsgTournamentItemEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgTournamentItemEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from);
  CMsgTournamentItemEvent(CMsgTournamentItemEvent&& from) noexcept
    : CMsgTournamentItemEvent() {
    *this = ::std::move(from);
  }

  inline CMsgTournamentItemEvent& operator=(const CMsgTournamentItemEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTournamentItemEvent& operator=(CMsgTournamentItemEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTournamentItemEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTournamentItemEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgTournamentItemEvent*>(
               &_CMsgTournamentItemEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgTournamentItemEvent& a, CMsgTournamentItemEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTournamentItemEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTournamentItemEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTournamentItemEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTournamentItemEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTournamentItemEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTournamentItemEvent& from) {
    CMsgTournamentItemEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTournamentItemEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTournamentItemEvent";
  }
  protected:
  explicit CMsgTournamentItemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroStatuesFieldNumber = 12,
    kLootListFieldNumber = 7,
    kKillerAccountIdFieldNumber = 1,
    kVictimAccountIdFieldNumber = 2,
    kEventTypeFieldNumber = 3,
    kTvDelayFieldNumber = 4,
    kDotaTimeFieldNumber = 5,
    kReplayTimeFieldNumber = 6,
    kEventTeamFieldNumber = 8,
    kMultiKillCountFieldNumber = 9,
    kWinnerScoreFieldNumber = 10,
    kLoserScoreFieldNumber = 11,
  };
  // repeated .CProtoItemHeroStatue hero_statues = 12;
  int hero_statues_size() const;
  private:
  int _internal_hero_statues_size() const;
  public:
  void clear_hero_statues();
  ::CProtoItemHeroStatue* mutable_hero_statues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CProtoItemHeroStatue >*
      mutable_hero_statues();
  private:
  const ::CProtoItemHeroStatue& _internal_hero_statues(int index) const;
  ::CProtoItemHeroStatue* _internal_add_hero_statues();
  public:
  const ::CProtoItemHeroStatue& hero_statues(int index) const;
  ::CProtoItemHeroStatue* add_hero_statues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CProtoItemHeroStatue >&
      hero_statues() const;

  // optional string loot_list = 7;
  bool has_loot_list() const;
  private:
  bool _internal_has_loot_list() const;
  public:
  void clear_loot_list();
  const std::string& loot_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_loot_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_loot_list();
  PROTOBUF_NODISCARD std::string* release_loot_list();
  void set_allocated_loot_list(std::string* loot_list);
  private:
  const std::string& _internal_loot_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_loot_list(const std::string& value);
  std::string* _internal_mutable_loot_list();
  public:

  // optional fixed32 killer_account_id = 1;
  bool has_killer_account_id() const;
  private:
  bool _internal_has_killer_account_id() const;
  public:
  void clear_killer_account_id();
  uint32_t killer_account_id() const;
  void set_killer_account_id(uint32_t value);
  private:
  uint32_t _internal_killer_account_id() const;
  void _internal_set_killer_account_id(uint32_t value);
  public:

  // optional fixed32 victim_account_id = 2;
  bool has_victim_account_id() const;
  private:
  bool _internal_has_victim_account_id() const;
  public:
  void clear_victim_account_id();
  uint32_t victim_account_id() const;
  void set_victim_account_id(uint32_t value);
  private:
  uint32_t _internal_victim_account_id() const;
  void _internal_set_victim_account_id(uint32_t value);
  public:

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::DOTA_TournamentEvents event_type() const;
  void set_event_type(::DOTA_TournamentEvents value);
  private:
  ::DOTA_TournamentEvents _internal_event_type() const;
  void _internal_set_event_type(::DOTA_TournamentEvents value);
  public:

  // optional int32 tv_delay = 4;
  bool has_tv_delay() const;
  private:
  bool _internal_has_tv_delay() const;
  public:
  void clear_tv_delay();
  int32_t tv_delay() const;
  void set_tv_delay(int32_t value);
  private:
  int32_t _internal_tv_delay() const;
  void _internal_set_tv_delay(int32_t value);
  public:

  // optional int32 dota_time = 5;
  bool has_dota_time() const;
  private:
  bool _internal_has_dota_time() const;
  public:
  void clear_dota_time();
  int32_t dota_time() const;
  void set_dota_time(int32_t value);
  private:
  int32_t _internal_dota_time() const;
  void _internal_set_dota_time(int32_t value);
  public:

  // optional float replay_time = 6;
  bool has_replay_time() const;
  private:
  bool _internal_has_replay_time() const;
  public:
  void clear_replay_time();
  float replay_time() const;
  void set_replay_time(float value);
  private:
  float _internal_replay_time() const;
  void _internal_set_replay_time(float value);
  public:

  // optional uint32 event_team = 8;
  bool has_event_team() const;
  private:
  bool _internal_has_event_team() const;
  public:
  void clear_event_team();
  uint32_t event_team() const;
  void set_event_team(uint32_t value);
  private:
  uint32_t _internal_event_team() const;
  void _internal_set_event_team(uint32_t value);
  public:

  // optional uint32 multi_kill_count = 9;
  bool has_multi_kill_count() const;
  private:
  bool _internal_has_multi_kill_count() const;
  public:
  void clear_multi_kill_count();
  uint32_t multi_kill_count() const;
  void set_multi_kill_count(uint32_t value);
  private:
  uint32_t _internal_multi_kill_count() const;
  void _internal_set_multi_kill_count(uint32_t value);
  public:

  // optional uint32 winner_score = 10;
  bool has_winner_score() const;
  private:
  bool _internal_has_winner_score() const;
  public:
  void clear_winner_score();
  uint32_t winner_score() const;
  void set_winner_score(uint32_t value);
  private:
  uint32_t _internal_winner_score() const;
  void _internal_set_winner_score(uint32_t value);
  public:

  // optional uint32 loser_score = 11;
  bool has_loser_score() const;
  private:
  bool _internal_has_loser_score() const;
  public:
  void clear_loser_score();
  uint32_t loser_score() const;
  void set_loser_score(uint32_t value);
  private:
  uint32_t _internal_loser_score() const;
  void _internal_set_loser_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CProtoItemHeroStatue > hero_statues_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr loot_list_;
    uint32_t killer_account_id_;
    uint32_t victim_account_id_;
    int event_type_;
    int32_t tv_delay_;
    int32_t dota_time_;
    float replay_time_;
    uint32_t event_team_;
    uint32_t multi_kill_count_;
    uint32_t winner_score_;
    uint32_t loser_score_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgTournamentItemEventResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTournamentItemEventResponse) */ {
 public:
  inline CMsgTournamentItemEventResponse() : CMsgTournamentItemEventResponse(nullptr) {}
  ~CMsgTournamentItemEventResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgTournamentItemEventResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from);
  CMsgTournamentItemEventResponse(CMsgTournamentItemEventResponse&& from) noexcept
    : CMsgTournamentItemEventResponse() {
    *this = ::std::move(from);
  }

  inline CMsgTournamentItemEventResponse& operator=(const CMsgTournamentItemEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTournamentItemEventResponse& operator=(CMsgTournamentItemEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTournamentItemEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTournamentItemEventResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgTournamentItemEventResponse*>(
               &_CMsgTournamentItemEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgTournamentItemEventResponse& a, CMsgTournamentItemEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTournamentItemEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTournamentItemEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTournamentItemEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTournamentItemEventResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTournamentItemEventResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTournamentItemEventResponse& from) {
    CMsgTournamentItemEventResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTournamentItemEventResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTournamentItemEventResponse";
  }
  protected:
  explicit CMsgTournamentItemEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kViewersGrantedFieldNumber = 6,
  };
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  ::DOTA_TournamentEvents event_type() const;
  void set_event_type(::DOTA_TournamentEvents value);
  private:
  ::DOTA_TournamentEvents _internal_event_type() const;
  void _internal_set_event_type(::DOTA_TournamentEvents value);
  public:

  // optional uint32 viewers_granted = 6;
  bool has_viewers_granted() const;
  private:
  bool _internal_has_viewers_granted() const;
  public:
  void clear_viewers_granted();
  uint32_t viewers_granted() const;
  void set_viewers_granted(uint32_t value);
  private:
  uint32_t _internal_viewers_granted() const;
  void _internal_set_viewers_granted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTournamentItemEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int event_type_;
    uint32_t viewers_granted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgTeamFanfare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgTeamFanfare) */ {
 public:
  inline CMsgTeamFanfare() : CMsgTeamFanfare(nullptr) {}
  ~CMsgTeamFanfare() override;
  explicit PROTOBUF_CONSTEXPR CMsgTeamFanfare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgTeamFanfare(const CMsgTeamFanfare& from);
  CMsgTeamFanfare(CMsgTeamFanfare&& from) noexcept
    : CMsgTeamFanfare() {
    *this = ::std::move(from);
  }

  inline CMsgTeamFanfare& operator=(const CMsgTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgTeamFanfare& operator=(CMsgTeamFanfare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgTeamFanfare& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgTeamFanfare* internal_default_instance() {
    return reinterpret_cast<const CMsgTeamFanfare*>(
               &_CMsgTeamFanfare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgTeamFanfare& a, CMsgTeamFanfare& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgTeamFanfare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgTeamFanfare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgTeamFanfare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgTeamFanfare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgTeamFanfare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgTeamFanfare& from) {
    CMsgTeamFanfare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgTeamFanfare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgTeamFanfare";
  }
  protected:
  explicit CMsgTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgTeamFanfare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgResponseTeamFanfare final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgResponseTeamFanfare) */ {
 public:
  inline CMsgResponseTeamFanfare() : CMsgResponseTeamFanfare(nullptr) {}
  ~CMsgResponseTeamFanfare() override;
  explicit PROTOBUF_CONSTEXPR CMsgResponseTeamFanfare(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from);
  CMsgResponseTeamFanfare(CMsgResponseTeamFanfare&& from) noexcept
    : CMsgResponseTeamFanfare() {
    *this = ::std::move(from);
  }

  inline CMsgResponseTeamFanfare& operator=(const CMsgResponseTeamFanfare& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgResponseTeamFanfare& operator=(CMsgResponseTeamFanfare&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgResponseTeamFanfare& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgResponseTeamFanfare* internal_default_instance() {
    return reinterpret_cast<const CMsgResponseTeamFanfare*>(
               &_CMsgResponseTeamFanfare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgResponseTeamFanfare& a, CMsgResponseTeamFanfare& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgResponseTeamFanfare* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgResponseTeamFanfare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgResponseTeamFanfare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgResponseTeamFanfare>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgResponseTeamFanfare& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgResponseTeamFanfare& from) {
    CMsgResponseTeamFanfare::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgResponseTeamFanfare* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgResponseTeamFanfare";
  }
  protected:
  explicit CMsgResponseTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFanfareGoodguysFieldNumber = 1,
    kFanfareBadguysFieldNumber = 2,
  };
  // optional uint32 fanfare_goodguys = 1;
  bool has_fanfare_goodguys() const;
  private:
  bool _internal_has_fanfare_goodguys() const;
  public:
  void clear_fanfare_goodguys();
  uint32_t fanfare_goodguys() const;
  void set_fanfare_goodguys(uint32_t value);
  private:
  uint32_t _internal_fanfare_goodguys() const;
  void _internal_set_fanfare_goodguys(uint32_t value);
  public:

  // optional uint32 fanfare_badguys = 2;
  bool has_fanfare_badguys() const;
  private:
  bool _internal_has_fanfare_badguys() const;
  public:
  void clear_fanfare_badguys();
  uint32_t fanfare_badguys() const;
  void set_fanfare_badguys(uint32_t value);
  private:
  uint32_t _internal_fanfare_badguys() const;
  void _internal_set_fanfare_badguys(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgResponseTeamFanfare)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t fanfare_goodguys_;
    uint32_t fanfare_badguys_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerUploadSaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerUploadSaveGame) */ {
 public:
  inline CMsgGameServerUploadSaveGame() : CMsgGameServerUploadSaveGame(nullptr) {}
  ~CMsgGameServerUploadSaveGame() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerUploadSaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from);
  CMsgGameServerUploadSaveGame(CMsgGameServerUploadSaveGame&& from) noexcept
    : CMsgGameServerUploadSaveGame() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerUploadSaveGame& operator=(const CMsgGameServerUploadSaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerUploadSaveGame& operator=(CMsgGameServerUploadSaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerUploadSaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerUploadSaveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerUploadSaveGame*>(
               &_CMsgGameServerUploadSaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgGameServerUploadSaveGame& a, CMsgGameServerUploadSaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerUploadSaveGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerUploadSaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerUploadSaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerUploadSaveGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerUploadSaveGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerUploadSaveGame& from) {
    CMsgGameServerUploadSaveGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerUploadSaveGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerUploadSaveGame";
  }
  protected:
  explicit CMsgGameServerUploadSaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerSteamIdsFieldNumber = 4,
    kSaveGameDataFieldNumber = 2,
    kLobbyIdFieldNumber = 3,
    kGameTimeFieldNumber = 1,
  };
  // repeated uint64 player_steam_ids = 4;
  int player_steam_ids_size() const;
  private:
  int _internal_player_steam_ids_size() const;
  public:
  void clear_player_steam_ids();
  private:
  uint64_t _internal_player_steam_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_player_steam_ids() const;
  void _internal_add_player_steam_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_player_steam_ids();
  public:
  uint64_t player_steam_ids(int index) const;
  void set_player_steam_ids(int index, uint64_t value);
  void add_player_steam_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      player_steam_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_player_steam_ids();

  // optional bytes save_game_data = 2;
  bool has_save_game_data() const;
  private:
  bool _internal_has_save_game_data() const;
  public:
  void clear_save_game_data();
  const std::string& save_game_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_game_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_game_data();
  PROTOBUF_NODISCARD std::string* release_save_game_data();
  void set_allocated_save_game_data(std::string* save_game_data);
  private:
  const std::string& _internal_save_game_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_game_data(const std::string& value);
  std::string* _internal_mutable_save_game_data();
  public:

  // optional uint64 lobby_id = 3;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 game_time = 1;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  uint32_t game_time() const;
  void set_game_time(uint32_t value);
  private:
  uint32_t _internal_game_time() const;
  void _internal_set_game_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerUploadSaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > player_steam_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_game_data_;
    uint64_t lobby_id_;
    uint32_t game_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerSaveGameResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerSaveGameResult) */ {
 public:
  inline CMsgGameServerSaveGameResult() : CMsgGameServerSaveGameResult(nullptr) {}
  ~CMsgGameServerSaveGameResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerSaveGameResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from);
  CMsgGameServerSaveGameResult(CMsgGameServerSaveGameResult&& from) noexcept
    : CMsgGameServerSaveGameResult() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerSaveGameResult& operator=(const CMsgGameServerSaveGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerSaveGameResult& operator=(CMsgGameServerSaveGameResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerSaveGameResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerSaveGameResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerSaveGameResult*>(
               &_CMsgGameServerSaveGameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgGameServerSaveGameResult& a, CMsgGameServerSaveGameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerSaveGameResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerSaveGameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerSaveGameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerSaveGameResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerSaveGameResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerSaveGameResult& from) {
    CMsgGameServerSaveGameResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerSaveGameResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerSaveGameResult";
  }
  protected:
  explicit CMsgGameServerSaveGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGameServerSaveGameResult_Result Result;
  static constexpr Result SaveSuccessful =
    CMsgGameServerSaveGameResult_Result_SaveSuccessful;
  static constexpr Result SessionNotFound =
    CMsgGameServerSaveGameResult_Result_SessionNotFound;
  static constexpr Result DatabaseError =
    CMsgGameServerSaveGameResult_Result_DatabaseError;
  static constexpr Result TooBig =
    CMsgGameServerSaveGameResult_Result_TooBig;
  static inline bool Result_IsValid(int value) {
    return CMsgGameServerSaveGameResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgGameServerSaveGameResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgGameServerSaveGameResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgGameServerSaveGameResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgGameServerSaveGameResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgGameServerSaveGameResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgGameServerSaveGameResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgGameServerSaveGameResult_Result result() const;
  void set_result(::CMsgGameServerSaveGameResult_Result value);
  private:
  ::CMsgGameServerSaveGameResult_Result _internal_result() const;
  void _internal_set_result(::CMsgGameServerSaveGameResult_Result value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerSaveGameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerGetLoadGame) */ {
 public:
  inline CMsgGameServerGetLoadGame() : CMsgGameServerGetLoadGame(nullptr) {}
  ~CMsgGameServerGetLoadGame() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from);
  CMsgGameServerGetLoadGame(CMsgGameServerGetLoadGame&& from) noexcept
    : CMsgGameServerGetLoadGame() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerGetLoadGame& operator=(const CMsgGameServerGetLoadGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerGetLoadGame& operator=(CMsgGameServerGetLoadGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerGetLoadGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerGetLoadGame* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerGetLoadGame*>(
               &_CMsgGameServerGetLoadGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgGameServerGetLoadGame& a, CMsgGameServerGetLoadGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerGetLoadGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerGetLoadGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerGetLoadGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerGetLoadGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerGetLoadGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerGetLoadGame& from) {
    CMsgGameServerGetLoadGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerGetLoadGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerGetLoadGame";
  }
  protected:
  explicit CMsgGameServerGetLoadGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveIdFieldNumber = 1,
  };
  // optional uint32 save_id = 1;
  bool has_save_id() const;
  private:
  bool _internal_has_save_id() const;
  public:
  void clear_save_id();
  uint32_t save_id() const;
  void set_save_id(uint32_t value);
  private:
  uint32_t _internal_save_id() const;
  void _internal_set_save_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t save_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGameServerGetLoadGameResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGameServerGetLoadGameResult) */ {
 public:
  inline CMsgGameServerGetLoadGameResult() : CMsgGameServerGetLoadGameResult(nullptr) {}
  ~CMsgGameServerGetLoadGameResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGameResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from);
  CMsgGameServerGetLoadGameResult(CMsgGameServerGetLoadGameResult&& from) noexcept
    : CMsgGameServerGetLoadGameResult() {
    *this = ::std::move(from);
  }

  inline CMsgGameServerGetLoadGameResult& operator=(const CMsgGameServerGetLoadGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGameServerGetLoadGameResult& operator=(CMsgGameServerGetLoadGameResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGameServerGetLoadGameResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGameServerGetLoadGameResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGameServerGetLoadGameResult*>(
               &_CMsgGameServerGetLoadGameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgGameServerGetLoadGameResult& a, CMsgGameServerGetLoadGameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGameServerGetLoadGameResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGameServerGetLoadGameResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGameServerGetLoadGameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGameServerGetLoadGameResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGameServerGetLoadGameResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGameServerGetLoadGameResult& from) {
    CMsgGameServerGetLoadGameResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGameServerGetLoadGameResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGameServerGetLoadGameResult";
  }
  protected:
  explicit CMsgGameServerGetLoadGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSaveGameDataFieldNumber = 1,
  };
  // optional bytes save_game_data = 1;
  bool has_save_game_data() const;
  private:
  bool _internal_has_save_game_data() const;
  public:
  void clear_save_game_data();
  const std::string& save_game_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_save_game_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_save_game_data();
  PROTOBUF_NODISCARD std::string* release_save_game_data();
  void set_allocated_save_game_data(std::string* save_game_data);
  private:
  const std::string& _internal_save_game_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_save_game_data(const std::string& value);
  std::string* _internal_mutable_save_game_data();
  public:

  // @@protoc_insertion_point(class_scope:CMsgGameServerGetLoadGameResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr save_game_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAAwardEventPoints_AwardPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAAwardEventPoints.AwardPoints) */ {
 public:
  inline CMsgDOTAAwardEventPoints_AwardPoints() : CMsgDOTAAwardEventPoints_AwardPoints(nullptr) {}
  ~CMsgDOTAAwardEventPoints_AwardPoints() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPoints_AwardPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from);
  CMsgDOTAAwardEventPoints_AwardPoints(CMsgDOTAAwardEventPoints_AwardPoints&& from) noexcept
    : CMsgDOTAAwardEventPoints_AwardPoints() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAAwardEventPoints_AwardPoints& operator=(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAAwardEventPoints_AwardPoints& operator=(CMsgDOTAAwardEventPoints_AwardPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAAwardEventPoints_AwardPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAAwardEventPoints_AwardPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAAwardEventPoints_AwardPoints*>(
               &_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgDOTAAwardEventPoints_AwardPoints& a, CMsgDOTAAwardEventPoints_AwardPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAAwardEventPoints_AwardPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAAwardEventPoints_AwardPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAAwardEventPoints_AwardPoints& from) {
    CMsgDOTAAwardEventPoints_AwardPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAAwardEventPoints_AwardPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAAwardEventPoints.AwardPoints";
  }
  protected:
  explicit CMsgDOTAAwardEventPoints_AwardPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kPointsFieldNumber = 2,
    kPremiumPointsFieldNumber = 3,
    kTradeBanTimeFieldNumber = 5,
    kEligibleForPeriodicAdjustmentFieldNumber = 6,
    kPointCapPeriodicResourceIdFieldNumber = 7,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional int32 points = 2;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  int32_t points() const;
  void set_points(int32_t value);
  private:
  int32_t _internal_points() const;
  void _internal_set_points(int32_t value);
  public:

  // optional int32 premium_points = 3;
  bool has_premium_points() const;
  private:
  bool _internal_has_premium_points() const;
  public:
  void clear_premium_points();
  int32_t premium_points() const;
  void set_premium_points(int32_t value);
  private:
  int32_t _internal_premium_points() const;
  void _internal_set_premium_points(int32_t value);
  public:

  // optional uint32 trade_ban_time = 5;
  bool has_trade_ban_time() const;
  private:
  bool _internal_has_trade_ban_time() const;
  public:
  void clear_trade_ban_time();
  uint32_t trade_ban_time() const;
  void set_trade_ban_time(uint32_t value);
  private:
  uint32_t _internal_trade_ban_time() const;
  void _internal_set_trade_ban_time(uint32_t value);
  public:

  // optional bool eligible_for_periodic_adjustment = 6 [default = false];
  bool has_eligible_for_periodic_adjustment() const;
  private:
  bool _internal_has_eligible_for_periodic_adjustment() const;
  public:
  void clear_eligible_for_periodic_adjustment();
  bool eligible_for_periodic_adjustment() const;
  void set_eligible_for_periodic_adjustment(bool value);
  private:
  bool _internal_eligible_for_periodic_adjustment() const;
  void _internal_set_eligible_for_periodic_adjustment(bool value);
  public:

  // optional uint32 point_cap_periodic_resource_id = 7;
  bool has_point_cap_periodic_resource_id() const;
  private:
  bool _internal_has_point_cap_periodic_resource_id() const;
  public:
  void clear_point_cap_periodic_resource_id();
  uint32_t point_cap_periodic_resource_id() const;
  void set_point_cap_periodic_resource_id(uint32_t value);
  private:
  uint32_t _internal_point_cap_periodic_resource_id() const;
  void _internal_set_point_cap_periodic_resource_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAAwardEventPoints.AwardPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int32_t points_;
    int32_t premium_points_;
    uint32_t trade_ban_time_;
    bool eligible_for_periodic_adjustment_;
    uint32_t point_cap_periodic_resource_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAAwardEventPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAAwardEventPoints) */ {
 public:
  inline CMsgDOTAAwardEventPoints() : CMsgDOTAAwardEventPoints(nullptr) {}
  ~CMsgDOTAAwardEventPoints() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from);
  CMsgDOTAAwardEventPoints(CMsgDOTAAwardEventPoints&& from) noexcept
    : CMsgDOTAAwardEventPoints() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAAwardEventPoints& operator=(const CMsgDOTAAwardEventPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAAwardEventPoints& operator=(CMsgDOTAAwardEventPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAAwardEventPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAAwardEventPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAAwardEventPoints*>(
               &_CMsgDOTAAwardEventPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgDOTAAwardEventPoints& a, CMsgDOTAAwardEventPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAAwardEventPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAAwardEventPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAAwardEventPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAAwardEventPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAAwardEventPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAAwardEventPoints& from) {
    CMsgDOTAAwardEventPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAAwardEventPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAAwardEventPoints";
  }
  protected:
  explicit CMsgDOTAAwardEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAAwardEventPoints_AwardPoints AwardPoints;

  // accessors -------------------------------------------------------

  enum : int {
    kAwardPointsFieldNumber = 1,
    kMatchIdFieldNumber = 2,
    kEventIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kAuditActionFieldNumber = 6,
  };
  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  int award_points_size() const;
  private:
  int _internal_award_points_size() const;
  public:
  void clear_award_points();
  ::CMsgDOTAAwardEventPoints_AwardPoints* mutable_award_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >*
      mutable_award_points();
  private:
  const ::CMsgDOTAAwardEventPoints_AwardPoints& _internal_award_points(int index) const;
  ::CMsgDOTAAwardEventPoints_AwardPoints* _internal_add_award_points();
  public:
  const ::CMsgDOTAAwardEventPoints_AwardPoints& award_points(int index) const;
  ::CMsgDOTAAwardEventPoints_AwardPoints* add_award_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >&
      award_points() const;

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 audit_action = 6;
  bool has_audit_action() const;
  private:
  bool _internal_has_audit_action() const;
  public:
  void clear_audit_action();
  uint32_t audit_action() const;
  void set_audit_action(uint32_t value);
  private:
  uint32_t _internal_audit_action() const;
  void _internal_set_audit_action(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAAwardEventPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints > award_points_;
    uint64_t match_id_;
    int event_id_;
    uint32_t timestamp_;
    uint32_t audit_action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerPingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerPingRequest) */ {
 public:
  inline CMsgGCToServerPingRequest() : CMsgGCToServerPingRequest(nullptr) {}
  ~CMsgGCToServerPingRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerPingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from);
  CMsgGCToServerPingRequest(CMsgGCToServerPingRequest&& from) noexcept
    : CMsgGCToServerPingRequest() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerPingRequest& operator=(const CMsgGCToServerPingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerPingRequest& operator=(CMsgGCToServerPingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerPingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerPingRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerPingRequest*>(
               &_CMsgGCToServerPingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgGCToServerPingRequest& a, CMsgGCToServerPingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerPingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerPingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerPingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerPingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerPingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerPingRequest& from) {
    CMsgGCToServerPingRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerPingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerPingRequest";
  }
  protected:
  explicit CMsgGCToServerPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
  };
  // optional fixed64 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // optional uint64 request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  uint64_t request_time() const;
  void set_request_time(uint64_t value);
  private:
  uint64_t _internal_request_time() const;
  void _internal_set_request_time(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerPingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t request_id_;
    uint64_t request_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerPingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerPingResponse) */ {
 public:
  inline CMsgGCToServerPingResponse() : CMsgGCToServerPingResponse(nullptr) {}
  ~CMsgGCToServerPingResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerPingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from);
  CMsgGCToServerPingResponse(CMsgGCToServerPingResponse&& from) noexcept
    : CMsgGCToServerPingResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerPingResponse& operator=(const CMsgGCToServerPingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerPingResponse& operator=(CMsgGCToServerPingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerPingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerPingResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerPingResponse*>(
               &_CMsgGCToServerPingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgGCToServerPingResponse& a, CMsgGCToServerPingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerPingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerPingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerPingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerPingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerPingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerPingResponse& from) {
    CMsgGCToServerPingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerPingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerPingResponse";
  }
  protected:
  explicit CMsgGCToServerPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kRequestTimeFieldNumber = 2,
    kClusterFieldNumber = 3,
  };
  // optional fixed64 request_id = 1;
  bool has_request_id() const;
  private:
  bool _internal_has_request_id() const;
  public:
  void clear_request_id();
  uint64_t request_id() const;
  void set_request_id(uint64_t value);
  private:
  uint64_t _internal_request_id() const;
  void _internal_set_request_id(uint64_t value);
  public:

  // optional uint64 request_time = 2;
  bool has_request_time() const;
  private:
  bool _internal_has_request_time() const;
  public:
  void clear_request_time();
  uint64_t request_time() const;
  void set_request_time(uint64_t value);
  private:
  uint64_t _internal_request_time() const;
  void _internal_set_request_time(uint64_t value);
  public:

  // optional uint32 cluster = 3;
  bool has_cluster() const;
  private:
  bool _internal_has_cluster() const;
  public:
  void clear_cluster();
  uint32_t cluster() const;
  void set_cluster(uint32_t value);
  private:
  uint32_t _internal_cluster() const;
  void _internal_set_cluster(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerPingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t request_id_;
    uint64_t request_time_;
    uint32_t cluster_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchConnectionStats_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchConnectionStats.Player) */ {
 public:
  inline CMsgServerToGCMatchConnectionStats_Player() : CMsgServerToGCMatchConnectionStats_Player(nullptr) {}
  ~CMsgServerToGCMatchConnectionStats_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStats_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from);
  CMsgServerToGCMatchConnectionStats_Player(CMsgServerToGCMatchConnectionStats_Player&& from) noexcept
    : CMsgServerToGCMatchConnectionStats_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchConnectionStats_Player& operator=(const CMsgServerToGCMatchConnectionStats_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchConnectionStats_Player& operator=(CMsgServerToGCMatchConnectionStats_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchConnectionStats_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchConnectionStats_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchConnectionStats_Player*>(
               &_CMsgServerToGCMatchConnectionStats_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgServerToGCMatchConnectionStats_Player& a, CMsgServerToGCMatchConnectionStats_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchConnectionStats_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchConnectionStats_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchConnectionStats_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchConnectionStats_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchConnectionStats_Player& from) {
    CMsgServerToGCMatchConnectionStats_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchConnectionStats_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchConnectionStats.Player";
  }
  protected:
  explicit CMsgServerToGCMatchConnectionStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kIpFieldNumber = 2,
    kAvgPingMsFieldNumber = 3,
    kPacketLossFieldNumber = 5,
    kPingDeviationFieldNumber = 6,
    kFullResendsFieldNumber = 7,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional fixed32 ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  uint32_t ip() const;
  void set_ip(uint32_t value);
  private:
  uint32_t _internal_ip() const;
  void _internal_set_ip(uint32_t value);
  public:

  // optional uint32 avg_ping_ms = 3;
  bool has_avg_ping_ms() const;
  private:
  bool _internal_has_avg_ping_ms() const;
  public:
  void clear_avg_ping_ms();
  uint32_t avg_ping_ms() const;
  void set_avg_ping_ms(uint32_t value);
  private:
  uint32_t _internal_avg_ping_ms() const;
  void _internal_set_avg_ping_ms(uint32_t value);
  public:

  // optional float packet_loss = 5;
  bool has_packet_loss() const;
  private:
  bool _internal_has_packet_loss() const;
  public:
  void clear_packet_loss();
  float packet_loss() const;
  void set_packet_loss(float value);
  private:
  float _internal_packet_loss() const;
  void _internal_set_packet_loss(float value);
  public:

  // optional float ping_deviation = 6;
  bool has_ping_deviation() const;
  private:
  bool _internal_has_ping_deviation() const;
  public:
  void clear_ping_deviation();
  float ping_deviation() const;
  void set_ping_deviation(float value);
  private:
  float _internal_ping_deviation() const;
  void _internal_set_ping_deviation(float value);
  public:

  // optional uint32 full_resends = 7;
  bool has_full_resends() const;
  private:
  bool _internal_has_full_resends() const;
  public:
  void clear_full_resends();
  uint32_t full_resends() const;
  void set_full_resends(uint32_t value);
  private:
  uint32_t _internal_full_resends() const;
  void _internal_set_full_resends(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchConnectionStats.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t ip_;
    uint32_t avg_ping_ms_;
    float packet_loss_;
    float ping_deviation_;
    uint32_t full_resends_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchConnectionStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchConnectionStats) */ {
 public:
  inline CMsgServerToGCMatchConnectionStats() : CMsgServerToGCMatchConnectionStats(nullptr) {}
  ~CMsgServerToGCMatchConnectionStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from);
  CMsgServerToGCMatchConnectionStats(CMsgServerToGCMatchConnectionStats&& from) noexcept
    : CMsgServerToGCMatchConnectionStats() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchConnectionStats& operator=(const CMsgServerToGCMatchConnectionStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchConnectionStats& operator=(CMsgServerToGCMatchConnectionStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchConnectionStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchConnectionStats* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchConnectionStats*>(
               &_CMsgServerToGCMatchConnectionStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgServerToGCMatchConnectionStats& a, CMsgServerToGCMatchConnectionStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchConnectionStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchConnectionStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchConnectionStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchConnectionStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchConnectionStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchConnectionStats& from) {
    CMsgServerToGCMatchConnectionStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchConnectionStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchConnectionStats";
  }
  protected:
  explicit CMsgServerToGCMatchConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCMatchConnectionStats_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 4,
    kMatchIdFieldNumber = 1,
    kRegionIdFieldNumber = 2,
    kLeagueIdFieldNumber = 3,
    kClusterIdFieldNumber = 5,
  };
  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgServerToGCMatchConnectionStats_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchConnectionStats_Player >*
      mutable_players();
  private:
  const ::CMsgServerToGCMatchConnectionStats_Player& _internal_players(int index) const;
  ::CMsgServerToGCMatchConnectionStats_Player* _internal_add_players();
  public:
  const ::CMsgServerToGCMatchConnectionStats_Player& players(int index) const;
  ::CMsgServerToGCMatchConnectionStats_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchConnectionStats_Player >&
      players() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 region_id = 2;
  bool has_region_id() const;
  private:
  bool _internal_has_region_id() const;
  public:
  void clear_region_id();
  uint32_t region_id() const;
  void set_region_id(uint32_t value);
  private:
  uint32_t _internal_region_id() const;
  void _internal_set_region_id(uint32_t value);
  public:

  // optional uint32 league_id = 3;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 cluster_id = 5;
  bool has_cluster_id() const;
  private:
  bool _internal_has_cluster_id() const;
  public:
  void clear_cluster_id();
  uint32_t cluster_id() const;
  void set_cluster_id(uint32_t value);
  private:
  uint32_t _internal_cluster_id() const;
  void _internal_set_cluster_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchConnectionStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchConnectionStats_Player > players_;
    uint64_t match_id_;
    uint32_t region_id_;
    uint32_t league_id_;
    uint32_t cluster_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerGCUpdateSpectatorCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerGCUpdateSpectatorCount) */ {
 public:
  inline CMsgServerGCUpdateSpectatorCount() : CMsgServerGCUpdateSpectatorCount(nullptr) {}
  ~CMsgServerGCUpdateSpectatorCount() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerGCUpdateSpectatorCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from);
  CMsgServerGCUpdateSpectatorCount(CMsgServerGCUpdateSpectatorCount&& from) noexcept
    : CMsgServerGCUpdateSpectatorCount() {
    *this = ::std::move(from);
  }

  inline CMsgServerGCUpdateSpectatorCount& operator=(const CMsgServerGCUpdateSpectatorCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerGCUpdateSpectatorCount& operator=(CMsgServerGCUpdateSpectatorCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerGCUpdateSpectatorCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerGCUpdateSpectatorCount* internal_default_instance() {
    return reinterpret_cast<const CMsgServerGCUpdateSpectatorCount*>(
               &_CMsgServerGCUpdateSpectatorCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgServerGCUpdateSpectatorCount& a, CMsgServerGCUpdateSpectatorCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerGCUpdateSpectatorCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerGCUpdateSpectatorCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerGCUpdateSpectatorCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerGCUpdateSpectatorCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerGCUpdateSpectatorCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerGCUpdateSpectatorCount& from) {
    CMsgServerGCUpdateSpectatorCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerGCUpdateSpectatorCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerGCUpdateSpectatorCount";
  }
  protected:
  explicit CMsgServerGCUpdateSpectatorCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpectatorCountFieldNumber = 1,
  };
  // optional uint32 spectator_count = 1;
  bool has_spectator_count() const;
  private:
  bool _internal_has_spectator_count() const;
  public:
  void clear_spectator_count();
  uint32_t spectator_count() const;
  void set_spectator_count(uint32_t value);
  private:
  uint32_t _internal_spectator_count() const;
  void _internal_set_spectator_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerGCUpdateSpectatorCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t spectator_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CSerializedCombatLog_Dictionary_DictString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSerializedCombatLog.Dictionary.DictString) */ {
 public:
  inline CSerializedCombatLog_Dictionary_DictString() : CSerializedCombatLog_Dictionary_DictString(nullptr) {}
  ~CSerializedCombatLog_Dictionary_DictString() override;
  explicit PROTOBUF_CONSTEXPR CSerializedCombatLog_Dictionary_DictString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from);
  CSerializedCombatLog_Dictionary_DictString(CSerializedCombatLog_Dictionary_DictString&& from) noexcept
    : CSerializedCombatLog_Dictionary_DictString() {
    *this = ::std::move(from);
  }

  inline CSerializedCombatLog_Dictionary_DictString& operator=(const CSerializedCombatLog_Dictionary_DictString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSerializedCombatLog_Dictionary_DictString& operator=(CSerializedCombatLog_Dictionary_DictString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSerializedCombatLog_Dictionary_DictString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSerializedCombatLog_Dictionary_DictString* internal_default_instance() {
    return reinterpret_cast<const CSerializedCombatLog_Dictionary_DictString*>(
               &_CSerializedCombatLog_Dictionary_DictString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CSerializedCombatLog_Dictionary_DictString& a, CSerializedCombatLog_Dictionary_DictString& b) {
    a.Swap(&b);
  }
  inline void Swap(CSerializedCombatLog_Dictionary_DictString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSerializedCombatLog_Dictionary_DictString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSerializedCombatLog_Dictionary_DictString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSerializedCombatLog_Dictionary_DictString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSerializedCombatLog_Dictionary_DictString& from) {
    CSerializedCombatLog_Dictionary_DictString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSerializedCombatLog_Dictionary_DictString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSerializedCombatLog.Dictionary.DictString";
  }
  protected:
  explicit CSerializedCombatLog_Dictionary_DictString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSerializedCombatLog.Dictionary.DictString)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CSerializedCombatLog_Dictionary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSerializedCombatLog.Dictionary) */ {
 public:
  inline CSerializedCombatLog_Dictionary() : CSerializedCombatLog_Dictionary(nullptr) {}
  ~CSerializedCombatLog_Dictionary() override;
  explicit PROTOBUF_CONSTEXPR CSerializedCombatLog_Dictionary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from);
  CSerializedCombatLog_Dictionary(CSerializedCombatLog_Dictionary&& from) noexcept
    : CSerializedCombatLog_Dictionary() {
    *this = ::std::move(from);
  }

  inline CSerializedCombatLog_Dictionary& operator=(const CSerializedCombatLog_Dictionary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSerializedCombatLog_Dictionary& operator=(CSerializedCombatLog_Dictionary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSerializedCombatLog_Dictionary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSerializedCombatLog_Dictionary* internal_default_instance() {
    return reinterpret_cast<const CSerializedCombatLog_Dictionary*>(
               &_CSerializedCombatLog_Dictionary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CSerializedCombatLog_Dictionary& a, CSerializedCombatLog_Dictionary& b) {
    a.Swap(&b);
  }
  inline void Swap(CSerializedCombatLog_Dictionary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSerializedCombatLog_Dictionary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSerializedCombatLog_Dictionary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSerializedCombatLog_Dictionary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSerializedCombatLog_Dictionary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSerializedCombatLog_Dictionary& from) {
    CSerializedCombatLog_Dictionary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSerializedCombatLog_Dictionary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSerializedCombatLog.Dictionary";
  }
  protected:
  explicit CSerializedCombatLog_Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSerializedCombatLog_Dictionary_DictString DictString;

  // accessors -------------------------------------------------------

  enum : int {
    kStringsFieldNumber = 1,
  };
  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  ::CSerializedCombatLog_Dictionary_DictString* mutable_strings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSerializedCombatLog_Dictionary_DictString >*
      mutable_strings();
  private:
  const ::CSerializedCombatLog_Dictionary_DictString& _internal_strings(int index) const;
  ::CSerializedCombatLog_Dictionary_DictString* _internal_add_strings();
  public:
  const ::CSerializedCombatLog_Dictionary_DictString& strings(int index) const;
  ::CSerializedCombatLog_Dictionary_DictString* add_strings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSerializedCombatLog_Dictionary_DictString >&
      strings() const;

  // @@protoc_insertion_point(class_scope:CSerializedCombatLog.Dictionary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSerializedCombatLog_Dictionary_DictString > strings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CSerializedCombatLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSerializedCombatLog) */ {
 public:
  inline CSerializedCombatLog() : CSerializedCombatLog(nullptr) {}
  ~CSerializedCombatLog() override;
  explicit PROTOBUF_CONSTEXPR CSerializedCombatLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSerializedCombatLog(const CSerializedCombatLog& from);
  CSerializedCombatLog(CSerializedCombatLog&& from) noexcept
    : CSerializedCombatLog() {
    *this = ::std::move(from);
  }

  inline CSerializedCombatLog& operator=(const CSerializedCombatLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSerializedCombatLog& operator=(CSerializedCombatLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSerializedCombatLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSerializedCombatLog* internal_default_instance() {
    return reinterpret_cast<const CSerializedCombatLog*>(
               &_CSerializedCombatLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CSerializedCombatLog& a, CSerializedCombatLog& b) {
    a.Swap(&b);
  }
  inline void Swap(CSerializedCombatLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSerializedCombatLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSerializedCombatLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSerializedCombatLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSerializedCombatLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSerializedCombatLog& from) {
    CSerializedCombatLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSerializedCombatLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSerializedCombatLog";
  }
  protected:
  explicit CSerializedCombatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSerializedCombatLog_Dictionary Dictionary;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kDictionaryFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // repeated .CMsgDOTACombatLogEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::CMsgDOTACombatLogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTACombatLogEntry >*
      mutable_entries();
  private:
  const ::CMsgDOTACombatLogEntry& _internal_entries(int index) const;
  ::CMsgDOTACombatLogEntry* _internal_add_entries();
  public:
  const ::CMsgDOTACombatLogEntry& entries(int index) const;
  ::CMsgDOTACombatLogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTACombatLogEntry >&
      entries() const;

  // optional .CSerializedCombatLog.Dictionary dictionary = 2;
  bool has_dictionary() const;
  private:
  bool _internal_has_dictionary() const;
  public:
  void clear_dictionary();
  const ::CSerializedCombatLog_Dictionary& dictionary() const;
  PROTOBUF_NODISCARD ::CSerializedCombatLog_Dictionary* release_dictionary();
  ::CSerializedCombatLog_Dictionary* mutable_dictionary();
  void set_allocated_dictionary(::CSerializedCombatLog_Dictionary* dictionary);
  private:
  const ::CSerializedCombatLog_Dictionary& _internal_dictionary() const;
  ::CSerializedCombatLog_Dictionary* _internal_mutable_dictionary();
  public:
  void unsafe_arena_set_allocated_dictionary(
      ::CSerializedCombatLog_Dictionary* dictionary);
  ::CSerializedCombatLog_Dictionary* unsafe_arena_release_dictionary();

  // optional uint32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSerializedCombatLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTACombatLogEntry > entries_;
    ::CSerializedCombatLog_Dictionary* dictionary_;
    uint32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCVictoryPredictions_Record final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCVictoryPredictions.Record) */ {
 public:
  inline CMsgServerToGCVictoryPredictions_Record() : CMsgServerToGCVictoryPredictions_Record(nullptr) {}
  ~CMsgServerToGCVictoryPredictions_Record() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictions_Record(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from);
  CMsgServerToGCVictoryPredictions_Record(CMsgServerToGCVictoryPredictions_Record&& from) noexcept
    : CMsgServerToGCVictoryPredictions_Record() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCVictoryPredictions_Record& operator=(const CMsgServerToGCVictoryPredictions_Record& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCVictoryPredictions_Record& operator=(CMsgServerToGCVictoryPredictions_Record&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCVictoryPredictions_Record& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCVictoryPredictions_Record* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCVictoryPredictions_Record*>(
               &_CMsgServerToGCVictoryPredictions_Record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgServerToGCVictoryPredictions_Record& a, CMsgServerToGCVictoryPredictions_Record& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCVictoryPredictions_Record* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCVictoryPredictions_Record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCVictoryPredictions_Record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCVictoryPredictions_Record>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCVictoryPredictions_Record& from) {
    CMsgServerToGCVictoryPredictions_Record::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCVictoryPredictions_Record* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCVictoryPredictions.Record";
  }
  protected:
  explicit CMsgServerToGCVictoryPredictions_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 5,
    kItemIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // repeated uint64 item_ids = 5;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  private:
  uint64_t _internal_item_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_item_ids() const;
  void _internal_add_item_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_item_ids();
  public:
  uint64_t item_ids(int index) const;
  void set_item_ids(int index, uint64_t value);
  void add_item_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_item_ids();

  // optional uint64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCVictoryPredictions.Record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > item_ids_;
    uint64_t item_id_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCVictoryPredictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCVictoryPredictions) */ {
 public:
  inline CMsgServerToGCVictoryPredictions() : CMsgServerToGCVictoryPredictions(nullptr) {}
  ~CMsgServerToGCVictoryPredictions() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from);
  CMsgServerToGCVictoryPredictions(CMsgServerToGCVictoryPredictions&& from) noexcept
    : CMsgServerToGCVictoryPredictions() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCVictoryPredictions& operator=(const CMsgServerToGCVictoryPredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCVictoryPredictions& operator=(CMsgServerToGCVictoryPredictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCVictoryPredictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCVictoryPredictions* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCVictoryPredictions*>(
               &_CMsgServerToGCVictoryPredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgServerToGCVictoryPredictions& a, CMsgServerToGCVictoryPredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCVictoryPredictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCVictoryPredictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCVictoryPredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCVictoryPredictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCVictoryPredictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCVictoryPredictions& from) {
    CMsgServerToGCVictoryPredictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCVictoryPredictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCVictoryPredictions";
  }
  protected:
  explicit CMsgServerToGCVictoryPredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCVictoryPredictions_Record Record;

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::CMsgServerToGCVictoryPredictions_Record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCVictoryPredictions_Record >*
      mutable_records();
  private:
  const ::CMsgServerToGCVictoryPredictions_Record& _internal_records(int index) const;
  ::CMsgServerToGCVictoryPredictions_Record* _internal_add_records();
  public:
  const ::CMsgServerToGCVictoryPredictions_Record& records(int index) const;
  ::CMsgServerToGCVictoryPredictions_Record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCVictoryPredictions_Record >&
      records() const;

  // @@protoc_insertion_point(class_scope:CMsgServerToGCVictoryPredictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCVictoryPredictions_Record > records_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestStatus final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestStatus) */ {
 public:
  inline CMsgServerToGCRequestStatus() : CMsgServerToGCRequestStatus(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from);
  CMsgServerToGCRequestStatus(CMsgServerToGCRequestStatus&& from) noexcept
    : CMsgServerToGCRequestStatus() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestStatus& operator=(const CMsgServerToGCRequestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestStatus& operator=(CMsgServerToGCRequestStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestStatus*>(
               &_CMsgServerToGCRequestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgServerToGCRequestStatus& a, CMsgServerToGCRequestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgServerToGCRequestStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgServerToGCRequestStatus& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestStatus";
  }
  protected:
  explicit CMsgServerToGCRequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRequestStatus_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRequestStatus_Response) */ {
 public:
  inline CMsgServerToGCRequestStatus_Response() : CMsgServerToGCRequestStatus_Response(nullptr) {}
  ~CMsgServerToGCRequestStatus_Response() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatus_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from);
  CMsgServerToGCRequestStatus_Response(CMsgServerToGCRequestStatus_Response&& from) noexcept
    : CMsgServerToGCRequestStatus_Response() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRequestStatus_Response& operator=(const CMsgServerToGCRequestStatus_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRequestStatus_Response& operator=(CMsgServerToGCRequestStatus_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRequestStatus_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRequestStatus_Response* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRequestStatus_Response*>(
               &_CMsgServerToGCRequestStatus_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgServerToGCRequestStatus_Response& a, CMsgServerToGCRequestStatus_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRequestStatus_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRequestStatus_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRequestStatus_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRequestStatus_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRequestStatus_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRequestStatus_Response& from) {
    CMsgServerToGCRequestStatus_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRequestStatus_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRequestStatus_Response";
  }
  protected:
  explicit CMsgServerToGCRequestStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional uint32 response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  uint32_t response() const;
  void set_response(uint32_t value);
  private:
  uint32_t _internal_response() const;
  void _internal_set_response(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRequestStatus_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutAssassinMiniGameInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutAssassinMiniGameInfo) */ {
 public:
  inline CMsgSignOutAssassinMiniGameInfo() : CMsgSignOutAssassinMiniGameInfo(nullptr) {}
  ~CMsgSignOutAssassinMiniGameInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutAssassinMiniGameInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from);
  CMsgSignOutAssassinMiniGameInfo(CMsgSignOutAssassinMiniGameInfo&& from) noexcept
    : CMsgSignOutAssassinMiniGameInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutAssassinMiniGameInfo& operator=(const CMsgSignOutAssassinMiniGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutAssassinMiniGameInfo& operator=(CMsgSignOutAssassinMiniGameInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutAssassinMiniGameInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutAssassinMiniGameInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutAssassinMiniGameInfo*>(
               &_CMsgSignOutAssassinMiniGameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgSignOutAssassinMiniGameInfo& a, CMsgSignOutAssassinMiniGameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutAssassinMiniGameInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutAssassinMiniGameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutAssassinMiniGameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutAssassinMiniGameInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutAssassinMiniGameInfo& from) {
    CMsgSignOutAssassinMiniGameInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutAssassinMiniGameInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutAssassinMiniGameInfo";
  }
  protected:
  explicit CMsgSignOutAssassinMiniGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWinningPlayersFieldNumber = 1,
    kLosingPlayersFieldNumber = 2,
    kArcanaOwnersFieldNumber = 3,
    kTargetHeroIdFieldNumber = 5,
    kAssassinWonFieldNumber = 4,
    kContractCompletedFieldNumber = 6,
    kPaIsRadiantFieldNumber = 8,
    kContractCompleteTimeFieldNumber = 7,
  };
  // repeated fixed64 winning_players = 1;
  int winning_players_size() const;
  private:
  int _internal_winning_players_size() const;
  public:
  void clear_winning_players();
  private:
  uint64_t _internal_winning_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_winning_players() const;
  void _internal_add_winning_players(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_winning_players();
  public:
  uint64_t winning_players(int index) const;
  void set_winning_players(int index, uint64_t value);
  void add_winning_players(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      winning_players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_winning_players();

  // repeated fixed64 losing_players = 2;
  int losing_players_size() const;
  private:
  int _internal_losing_players_size() const;
  public:
  void clear_losing_players();
  private:
  uint64_t _internal_losing_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_losing_players() const;
  void _internal_add_losing_players(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_losing_players();
  public:
  uint64_t losing_players(int index) const;
  void set_losing_players(int index, uint64_t value);
  void add_losing_players(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      losing_players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_losing_players();

  // repeated fixed64 arcana_owners = 3;
  int arcana_owners_size() const;
  private:
  int _internal_arcana_owners_size() const;
  public:
  void clear_arcana_owners();
  private:
  uint64_t _internal_arcana_owners(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_arcana_owners() const;
  void _internal_add_arcana_owners(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_arcana_owners();
  public:
  uint64_t arcana_owners(int index) const;
  void set_arcana_owners(int index, uint64_t value);
  void add_arcana_owners(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      arcana_owners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_arcana_owners();

  // optional uint32 target_hero_id = 5;
  bool has_target_hero_id() const;
  private:
  bool _internal_has_target_hero_id() const;
  public:
  void clear_target_hero_id();
  uint32_t target_hero_id() const;
  void set_target_hero_id(uint32_t value);
  private:
  uint32_t _internal_target_hero_id() const;
  void _internal_set_target_hero_id(uint32_t value);
  public:

  // optional bool assassin_won = 4;
  bool has_assassin_won() const;
  private:
  bool _internal_has_assassin_won() const;
  public:
  void clear_assassin_won();
  bool assassin_won() const;
  void set_assassin_won(bool value);
  private:
  bool _internal_assassin_won() const;
  void _internal_set_assassin_won(bool value);
  public:

  // optional bool contract_completed = 6;
  bool has_contract_completed() const;
  private:
  bool _internal_has_contract_completed() const;
  public:
  void clear_contract_completed();
  bool contract_completed() const;
  void set_contract_completed(bool value);
  private:
  bool _internal_contract_completed() const;
  void _internal_set_contract_completed(bool value);
  public:

  // optional bool pa_is_radiant = 8;
  bool has_pa_is_radiant() const;
  private:
  bool _internal_has_pa_is_radiant() const;
  public:
  void clear_pa_is_radiant();
  bool pa_is_radiant() const;
  void set_pa_is_radiant(bool value);
  private:
  bool _internal_pa_is_radiant() const;
  void _internal_set_pa_is_radiant(bool value);
  public:

  // optional float contract_complete_time = 7;
  bool has_contract_complete_time() const;
  private:
  bool _internal_has_contract_complete_time() const;
  public:
  void clear_contract_complete_time();
  float contract_complete_time() const;
  void set_contract_complete_time(float value);
  private:
  float _internal_contract_complete_time() const;
  void _internal_set_contract_complete_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutAssassinMiniGameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > winning_players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > losing_players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > arcana_owners_;
    uint32_t target_hero_id_;
    bool assassin_won_;
    bool contract_completed_;
    bool pa_is_radiant_;
    float contract_complete_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCKillSummaries_KillSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCKillSummaries.KillSummary) */ {
 public:
  inline CMsgServerToGCKillSummaries_KillSummary() : CMsgServerToGCKillSummaries_KillSummary(nullptr) {}
  ~CMsgServerToGCKillSummaries_KillSummary() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCKillSummaries_KillSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from);
  CMsgServerToGCKillSummaries_KillSummary(CMsgServerToGCKillSummaries_KillSummary&& from) noexcept
    : CMsgServerToGCKillSummaries_KillSummary() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCKillSummaries_KillSummary& operator=(const CMsgServerToGCKillSummaries_KillSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCKillSummaries_KillSummary& operator=(CMsgServerToGCKillSummaries_KillSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCKillSummaries_KillSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCKillSummaries_KillSummary* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCKillSummaries_KillSummary*>(
               &_CMsgServerToGCKillSummaries_KillSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgServerToGCKillSummaries_KillSummary& a, CMsgServerToGCKillSummaries_KillSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCKillSummaries_KillSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCKillSummaries_KillSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCKillSummaries_KillSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCKillSummaries_KillSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCKillSummaries_KillSummary& from) {
    CMsgServerToGCKillSummaries_KillSummary::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCKillSummaries_KillSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCKillSummaries.KillSummary";
  }
  protected:
  explicit CMsgServerToGCKillSummaries_KillSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKillerHeroIdFieldNumber = 1,
    kVictimHeroIdFieldNumber = 2,
    kKillCountFieldNumber = 3,
  };
  // optional uint32 killer_hero_id = 1;
  bool has_killer_hero_id() const;
  private:
  bool _internal_has_killer_hero_id() const;
  public:
  void clear_killer_hero_id();
  uint32_t killer_hero_id() const;
  void set_killer_hero_id(uint32_t value);
  private:
  uint32_t _internal_killer_hero_id() const;
  void _internal_set_killer_hero_id(uint32_t value);
  public:

  // optional uint32 victim_hero_id = 2;
  bool has_victim_hero_id() const;
  private:
  bool _internal_has_victim_hero_id() const;
  public:
  void clear_victim_hero_id();
  uint32_t victim_hero_id() const;
  void set_victim_hero_id(uint32_t value);
  private:
  uint32_t _internal_victim_hero_id() const;
  void _internal_set_victim_hero_id(uint32_t value);
  public:

  // optional uint32 kill_count = 3;
  bool has_kill_count() const;
  private:
  bool _internal_has_kill_count() const;
  public:
  void clear_kill_count();
  uint32_t kill_count() const;
  void set_kill_count(uint32_t value);
  private:
  uint32_t _internal_kill_count() const;
  void _internal_set_kill_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCKillSummaries.KillSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t killer_hero_id_;
    uint32_t victim_hero_id_;
    uint32_t kill_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCKillSummaries final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCKillSummaries) */ {
 public:
  inline CMsgServerToGCKillSummaries() : CMsgServerToGCKillSummaries(nullptr) {}
  ~CMsgServerToGCKillSummaries() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCKillSummaries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from);
  CMsgServerToGCKillSummaries(CMsgServerToGCKillSummaries&& from) noexcept
    : CMsgServerToGCKillSummaries() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCKillSummaries& operator=(const CMsgServerToGCKillSummaries& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCKillSummaries& operator=(CMsgServerToGCKillSummaries&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCKillSummaries& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCKillSummaries* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCKillSummaries*>(
               &_CMsgServerToGCKillSummaries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgServerToGCKillSummaries& a, CMsgServerToGCKillSummaries& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCKillSummaries* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCKillSummaries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCKillSummaries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCKillSummaries>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCKillSummaries& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCKillSummaries& from) {
    CMsgServerToGCKillSummaries::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCKillSummaries* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCKillSummaries";
  }
  protected:
  explicit CMsgServerToGCKillSummaries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCKillSummaries_KillSummary KillSummary;

  // accessors -------------------------------------------------------

  enum : int {
    kSummariesFieldNumber = 2,
    kIngameeventIdFieldNumber = 1,
  };
  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  int summaries_size() const;
  private:
  int _internal_summaries_size() const;
  public:
  void clear_summaries();
  ::CMsgServerToGCKillSummaries_KillSummary* mutable_summaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCKillSummaries_KillSummary >*
      mutable_summaries();
  private:
  const ::CMsgServerToGCKillSummaries_KillSummary& _internal_summaries(int index) const;
  ::CMsgServerToGCKillSummaries_KillSummary* _internal_add_summaries();
  public:
  const ::CMsgServerToGCKillSummaries_KillSummary& summaries(int index) const;
  ::CMsgServerToGCKillSummaries_KillSummary* add_summaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCKillSummaries_KillSummary >&
      summaries() const;

  // optional uint32 ingameevent_id = 1;
  bool has_ingameevent_id() const;
  private:
  bool _internal_has_ingameevent_id() const;
  public:
  void clear_ingameevent_id();
  uint32_t ingameevent_id() const;
  void set_ingameevent_id(uint32_t value);
  private:
  uint32_t _internal_ingameevent_id() const;
  void _internal_set_ingameevent_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCKillSummaries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCKillSummaries_KillSummary > summaries_;
    uint32_t ingameevent_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerPredictionResult_Prediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerPredictionResult.Prediction) */ {
 public:
  inline CMsgGCToServerPredictionResult_Prediction() : CMsgGCToServerPredictionResult_Prediction(nullptr) {}
  ~CMsgGCToServerPredictionResult_Prediction() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from);
  CMsgGCToServerPredictionResult_Prediction(CMsgGCToServerPredictionResult_Prediction&& from) noexcept
    : CMsgGCToServerPredictionResult_Prediction() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerPredictionResult_Prediction& operator=(const CMsgGCToServerPredictionResult_Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerPredictionResult_Prediction& operator=(CMsgGCToServerPredictionResult_Prediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerPredictionResult_Prediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerPredictionResult_Prediction* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerPredictionResult_Prediction*>(
               &_CMsgGCToServerPredictionResult_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgGCToServerPredictionResult_Prediction& a, CMsgGCToServerPredictionResult_Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerPredictionResult_Prediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerPredictionResult_Prediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerPredictionResult_Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerPredictionResult_Prediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerPredictionResult_Prediction& from) {
    CMsgGCToServerPredictionResult_Prediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerPredictionResult_Prediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerPredictionResult.Prediction";
  }
  protected:
  explicit CMsgGCToServerPredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToServerPredictionResult_Prediction_EResult EResult;
  static constexpr EResult k_eResult_ItemGranted =
    CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_ItemGranted;
  static constexpr EResult k_eResult_Destroyed =
    CMsgGCToServerPredictionResult_Prediction_EResult_k_eResult_Destroyed;
  static inline bool EResult_IsValid(int value) {
    return CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgGCToServerPredictionResult_Prediction_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgGCToServerPredictionResult_Prediction_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgGCToServerPredictionResult_Prediction_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgGCToServerPredictionResult_Prediction_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgGCToServerPredictionResult_Prediction_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgGCToServerPredictionResult_Prediction_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGrantedItemDefsFieldNumber = 6,
    kItemDefFieldNumber = 1,
    kNumCorrectFieldNumber = 2,
    kNumFailsFieldNumber = 3,
    kResultFieldNumber = 4,
  };
  // repeated uint32 granted_item_defs = 6;
  int granted_item_defs_size() const;
  private:
  int _internal_granted_item_defs_size() const;
  public:
  void clear_granted_item_defs();
  private:
  uint32_t _internal_granted_item_defs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_granted_item_defs() const;
  void _internal_add_granted_item_defs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_granted_item_defs();
  public:
  uint32_t granted_item_defs(int index) const;
  void set_granted_item_defs(int index, uint32_t value);
  void add_granted_item_defs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      granted_item_defs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_granted_item_defs();

  // optional uint32 item_def = 1;
  bool has_item_def() const;
  private:
  bool _internal_has_item_def() const;
  public:
  void clear_item_def();
  uint32_t item_def() const;
  void set_item_def(uint32_t value);
  private:
  uint32_t _internal_item_def() const;
  void _internal_set_item_def(uint32_t value);
  public:

  // optional uint32 num_correct = 2;
  bool has_num_correct() const;
  private:
  bool _internal_has_num_correct() const;
  public:
  void clear_num_correct();
  uint32_t num_correct() const;
  void set_num_correct(uint32_t value);
  private:
  uint32_t _internal_num_correct() const;
  void _internal_set_num_correct(uint32_t value);
  public:

  // optional uint32 num_fails = 3;
  bool has_num_fails() const;
  private:
  bool _internal_has_num_fails() const;
  public:
  void clear_num_fails();
  uint32_t num_fails() const;
  void set_num_fails(uint32_t value);
  private:
  uint32_t _internal_num_fails() const;
  void _internal_set_num_fails(uint32_t value);
  public:

  // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgGCToServerPredictionResult_Prediction_EResult result() const;
  void set_result(::CMsgGCToServerPredictionResult_Prediction_EResult value);
  private:
  ::CMsgGCToServerPredictionResult_Prediction_EResult _internal_result() const;
  void _internal_set_result(::CMsgGCToServerPredictionResult_Prediction_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerPredictionResult.Prediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > granted_item_defs_;
    uint32_t item_def_;
    uint32_t num_correct_;
    uint32_t num_fails_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerPredictionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerPredictionResult) */ {
 public:
  inline CMsgGCToServerPredictionResult() : CMsgGCToServerPredictionResult(nullptr) {}
  ~CMsgGCToServerPredictionResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from);
  CMsgGCToServerPredictionResult(CMsgGCToServerPredictionResult&& from) noexcept
    : CMsgGCToServerPredictionResult() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerPredictionResult& operator=(const CMsgGCToServerPredictionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerPredictionResult& operator=(CMsgGCToServerPredictionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerPredictionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerPredictionResult* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerPredictionResult*>(
               &_CMsgGCToServerPredictionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgGCToServerPredictionResult& a, CMsgGCToServerPredictionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerPredictionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerPredictionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerPredictionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerPredictionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerPredictionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerPredictionResult& from) {
    CMsgGCToServerPredictionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerPredictionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerPredictionResult";
  }
  protected:
  explicit CMsgGCToServerPredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToServerPredictionResult_Prediction Prediction;

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 4,
    kMatchIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kCorrectFieldNumber = 3,
  };
  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  ::CMsgGCToServerPredictionResult_Prediction* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerPredictionResult_Prediction >*
      mutable_predictions();
  private:
  const ::CMsgGCToServerPredictionResult_Prediction& _internal_predictions(int index) const;
  ::CMsgGCToServerPredictionResult_Prediction* _internal_add_predictions();
  public:
  const ::CMsgGCToServerPredictionResult_Prediction& predictions(int index) const;
  ::CMsgGCToServerPredictionResult_Prediction* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerPredictionResult_Prediction >&
      predictions() const;

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional bool correct = 3;
  bool has_correct() const;
  private:
  bool _internal_has_correct() const;
  public:
  void clear_correct();
  bool correct() const;
  void set_correct(bool value);
  private:
  bool _internal_correct() const;
  void _internal_set_correct(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerPredictionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerPredictionResult_Prediction > predictions_;
    uint64_t match_id_;
    uint32_t account_id_;
    bool correct_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCLockCharmTrading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCLockCharmTrading) */ {
 public:
  inline CMsgServerToGCLockCharmTrading() : CMsgServerToGCLockCharmTrading(nullptr) {}
  ~CMsgServerToGCLockCharmTrading() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCLockCharmTrading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from);
  CMsgServerToGCLockCharmTrading(CMsgServerToGCLockCharmTrading&& from) noexcept
    : CMsgServerToGCLockCharmTrading() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCLockCharmTrading& operator=(const CMsgServerToGCLockCharmTrading& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCLockCharmTrading& operator=(CMsgServerToGCLockCharmTrading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCLockCharmTrading& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCLockCharmTrading* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCLockCharmTrading*>(
               &_CMsgServerToGCLockCharmTrading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgServerToGCLockCharmTrading& a, CMsgServerToGCLockCharmTrading& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCLockCharmTrading* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCLockCharmTrading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCLockCharmTrading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCLockCharmTrading>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCLockCharmTrading& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCLockCharmTrading& from) {
    CMsgServerToGCLockCharmTrading::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCLockCharmTrading* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCLockCharmTrading";
  }
  protected:
  explicit CMsgServerToGCLockCharmTrading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional uint64 item_id = 2;
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  uint64_t item_id() const;
  void set_item_id(uint64_t value);
  private:
  uint64_t _internal_item_id() const;
  void _internal_set_item_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCLockCharmTrading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t item_id_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutUpdatePlayerChallenge_Challenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutUpdatePlayerChallenge.Challenge) */ {
 public:
  inline CMsgSignOutUpdatePlayerChallenge_Challenge() : CMsgSignOutUpdatePlayerChallenge_Challenge(nullptr) {}
  ~CMsgSignOutUpdatePlayerChallenge_Challenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallenge_Challenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from);
  CMsgSignOutUpdatePlayerChallenge_Challenge(CMsgSignOutUpdatePlayerChallenge_Challenge&& from) noexcept
    : CMsgSignOutUpdatePlayerChallenge_Challenge() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutUpdatePlayerChallenge_Challenge& operator=(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutUpdatePlayerChallenge_Challenge& operator=(CMsgSignOutUpdatePlayerChallenge_Challenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutUpdatePlayerChallenge_Challenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutUpdatePlayerChallenge_Challenge* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutUpdatePlayerChallenge_Challenge*>(
               &_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgSignOutUpdatePlayerChallenge_Challenge& a, CMsgSignOutUpdatePlayerChallenge_Challenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutUpdatePlayerChallenge_Challenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutUpdatePlayerChallenge_Challenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
    CMsgSignOutUpdatePlayerChallenge_Challenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutUpdatePlayerChallenge.Challenge";
  }
  protected:
  explicit CMsgSignOutUpdatePlayerChallenge_Challenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSlotIdFieldNumber = 2,
    kSequenceIdFieldNumber = 3,
    kProgressFieldNumber = 4,
    kChallengeRankFieldNumber = 5,
  };
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 slot_id = 2;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 sequence_id = 3;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // optional uint32 progress = 4;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // optional uint32 challenge_rank = 5;
  bool has_challenge_rank() const;
  private:
  bool _internal_has_challenge_rank() const;
  public:
  void clear_challenge_rank();
  uint32_t challenge_rank() const;
  void set_challenge_rank(uint32_t value);
  private:
  uint32_t _internal_challenge_rank() const;
  void _internal_set_challenge_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutUpdatePlayerChallenge.Challenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int event_id_;
    uint32_t slot_id_;
    uint32_t sequence_id_;
    uint32_t progress_;
    uint32_t challenge_rank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutUpdatePlayerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutUpdatePlayerChallenge) */ {
 public:
  inline CMsgSignOutUpdatePlayerChallenge() : CMsgSignOutUpdatePlayerChallenge(nullptr) {}
  ~CMsgSignOutUpdatePlayerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from);
  CMsgSignOutUpdatePlayerChallenge(CMsgSignOutUpdatePlayerChallenge&& from) noexcept
    : CMsgSignOutUpdatePlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutUpdatePlayerChallenge& operator=(const CMsgSignOutUpdatePlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutUpdatePlayerChallenge& operator=(CMsgSignOutUpdatePlayerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutUpdatePlayerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutUpdatePlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutUpdatePlayerChallenge*>(
               &_CMsgSignOutUpdatePlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgSignOutUpdatePlayerChallenge& a, CMsgSignOutUpdatePlayerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutUpdatePlayerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutUpdatePlayerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutUpdatePlayerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutUpdatePlayerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutUpdatePlayerChallenge& from) {
    CMsgSignOutUpdatePlayerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutUpdatePlayerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutUpdatePlayerChallenge";
  }
  protected:
  explicit CMsgSignOutUpdatePlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutUpdatePlayerChallenge_Challenge Challenge;

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedFieldNumber = 2,
    kRerolledFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kHeroIdFieldNumber = 5,
    kMatchIdFieldNumber = 4,
  };
  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  int completed_size() const;
  private:
  int _internal_completed_size() const;
  public:
  void clear_completed();
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* mutable_completed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >*
      mutable_completed();
  private:
  const ::CMsgSignOutUpdatePlayerChallenge_Challenge& _internal_completed(int index) const;
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* _internal_add_completed();
  public:
  const ::CMsgSignOutUpdatePlayerChallenge_Challenge& completed(int index) const;
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* add_completed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >&
      completed() const;

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  int rerolled_size() const;
  private:
  int _internal_rerolled_size() const;
  public:
  void clear_rerolled();
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* mutable_rerolled(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >*
      mutable_rerolled();
  private:
  const ::CMsgSignOutUpdatePlayerChallenge_Challenge& _internal_rerolled(int index) const;
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* _internal_add_rerolled();
  public:
  const ::CMsgSignOutUpdatePlayerChallenge_Challenge& rerolled(int index) const;
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* add_rerolled();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >&
      rerolled() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 5;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint64 match_id = 4;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutUpdatePlayerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge > completed_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge > rerolled_;
    uint32_t account_id_;
    uint32_t hero_id_;
    uint64_t match_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCRerollPlayerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCRerollPlayerChallenge) */ {
 public:
  inline CMsgServerToGCRerollPlayerChallenge() : CMsgServerToGCRerollPlayerChallenge(nullptr) {}
  ~CMsgServerToGCRerollPlayerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from);
  CMsgServerToGCRerollPlayerChallenge(CMsgServerToGCRerollPlayerChallenge&& from) noexcept
    : CMsgServerToGCRerollPlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCRerollPlayerChallenge& operator=(const CMsgServerToGCRerollPlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCRerollPlayerChallenge& operator=(CMsgServerToGCRerollPlayerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCRerollPlayerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCRerollPlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCRerollPlayerChallenge*>(
               &_CMsgServerToGCRerollPlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgServerToGCRerollPlayerChallenge& a, CMsgServerToGCRerollPlayerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCRerollPlayerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCRerollPlayerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCRerollPlayerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCRerollPlayerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCRerollPlayerChallenge& from) {
    CMsgServerToGCRerollPlayerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCRerollPlayerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCRerollPlayerChallenge";
  }
  protected:
  explicit CMsgServerToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRerollMsgFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  bool has_reroll_msg() const;
  private:
  bool _internal_has_reroll_msg() const;
  public:
  void clear_reroll_msg();
  const ::CMsgClientToGCRerollPlayerChallenge& reroll_msg() const;
  PROTOBUF_NODISCARD ::CMsgClientToGCRerollPlayerChallenge* release_reroll_msg();
  ::CMsgClientToGCRerollPlayerChallenge* mutable_reroll_msg();
  void set_allocated_reroll_msg(::CMsgClientToGCRerollPlayerChallenge* reroll_msg);
  private:
  const ::CMsgClientToGCRerollPlayerChallenge& _internal_reroll_msg() const;
  ::CMsgClientToGCRerollPlayerChallenge* _internal_mutable_reroll_msg();
  public:
  void unsafe_arena_set_allocated_reroll_msg(
      ::CMsgClientToGCRerollPlayerChallenge* reroll_msg);
  ::CMsgClientToGCRerollPlayerChallenge* unsafe_arena_release_reroll_msg();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCRerollPlayerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgClientToGCRerollPlayerChallenge* reroll_msg_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpendWager_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpendWager.Player) */ {
 public:
  inline CMsgSpendWager_Player() : CMsgSpendWager_Player(nullptr) {}
  ~CMsgSpendWager_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgSpendWager_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpendWager_Player(const CMsgSpendWager_Player& from);
  CMsgSpendWager_Player(CMsgSpendWager_Player&& from) noexcept
    : CMsgSpendWager_Player() {
    *this = ::std::move(from);
  }

  inline CMsgSpendWager_Player& operator=(const CMsgSpendWager_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpendWager_Player& operator=(CMsgSpendWager_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSpendWager_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpendWager_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgSpendWager_Player*>(
               &_CMsgSpendWager_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgSpendWager_Player& a, CMsgSpendWager_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpendWager_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpendWager_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSpendWager_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSpendWager_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSpendWager_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSpendWager_Player& from) {
    CMsgSpendWager_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpendWager_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpendWager.Player";
  }
  protected:
  explicit CMsgSpendWager_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kWagerFieldNumber = 2,
    kWagerTokenItemIdFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 wager = 2;
  bool has_wager() const;
  private:
  bool _internal_has_wager() const;
  public:
  void clear_wager();
  uint32_t wager() const;
  void set_wager(uint32_t value);
  private:
  uint32_t _internal_wager() const;
  void _internal_set_wager(uint32_t value);
  public:

  // optional uint64 wager_token_item_id = 3;
  bool has_wager_token_item_id() const;
  private:
  bool _internal_has_wager_token_item_id() const;
  public:
  void clear_wager_token_item_id();
  uint64_t wager_token_item_id() const;
  void set_wager_token_item_id(uint64_t value);
  private:
  uint64_t _internal_wager_token_item_id() const;
  void _internal_set_wager_token_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpendWager.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t wager_;
    uint64_t wager_token_item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpendWager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpendWager) */ {
 public:
  inline CMsgSpendWager() : CMsgSpendWager(nullptr) {}
  ~CMsgSpendWager() override;
  explicit PROTOBUF_CONSTEXPR CMsgSpendWager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpendWager(const CMsgSpendWager& from);
  CMsgSpendWager(CMsgSpendWager&& from) noexcept
    : CMsgSpendWager() {
    *this = ::std::move(from);
  }

  inline CMsgSpendWager& operator=(const CMsgSpendWager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpendWager& operator=(CMsgSpendWager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSpendWager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpendWager* internal_default_instance() {
    return reinterpret_cast<const CMsgSpendWager*>(
               &_CMsgSpendWager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CMsgSpendWager& a, CMsgSpendWager& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpendWager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpendWager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSpendWager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSpendWager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSpendWager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSpendWager& from) {
    CMsgSpendWager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpendWager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpendWager";
  }
  protected:
  explicit CMsgSpendWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSpendWager_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kMatchIdFieldNumber = 4,
    kServerSteamIdFieldNumber = 5,
  };
  // repeated .CMsgSpendWager.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgSpendWager_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpendWager_Player >*
      mutable_players();
  private:
  const ::CMsgSpendWager_Player& _internal_players(int index) const;
  ::CMsgSpendWager_Player* _internal_add_players();
  public:
  const ::CMsgSpendWager_Player& players(int index) const;
  ::CMsgSpendWager_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpendWager_Player >&
      players() const;

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint64 match_id = 4;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint64 server_steam_id = 5;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  uint64_t server_steam_id() const;
  void set_server_steam_id(uint64_t value);
  private:
  uint64_t _internal_server_steam_id() const;
  void _internal_set_server_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpendWager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpendWager_Player > players_;
    int event_id_;
    uint32_t timestamp_;
    uint64_t match_id_;
    uint64_t server_steam_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutXPCoins_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutXPCoins.Player) */ {
 public:
  inline CMsgSignOutXPCoins_Player() : CMsgSignOutXPCoins_Player(nullptr) {}
  ~CMsgSignOutXPCoins_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutXPCoins_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutXPCoins_Player(const CMsgSignOutXPCoins_Player& from);
  CMsgSignOutXPCoins_Player(CMsgSignOutXPCoins_Player&& from) noexcept
    : CMsgSignOutXPCoins_Player() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutXPCoins_Player& operator=(const CMsgSignOutXPCoins_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutXPCoins_Player& operator=(CMsgSignOutXPCoins_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutXPCoins_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutXPCoins_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutXPCoins_Player*>(
               &_CMsgSignOutXPCoins_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CMsgSignOutXPCoins_Player& a, CMsgSignOutXPCoins_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutXPCoins_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutXPCoins_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutXPCoins_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutXPCoins_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutXPCoins_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutXPCoins_Player& from) {
    CMsgSignOutXPCoins_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutXPCoins_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutXPCoins.Player";
  }
  protected:
  explicit CMsgSignOutXPCoins_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kXpGainedFieldNumber = 2,
    kWagerTokenItemIdFieldNumber = 4,
    kCoinsSpentFieldNumber = 3,
    kRankWagerFieldNumber = 5,
    kWagerStreakFieldNumber = 6,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 xp_gained = 2;
  bool has_xp_gained() const;
  private:
  bool _internal_has_xp_gained() const;
  public:
  void clear_xp_gained();
  uint32_t xp_gained() const;
  void set_xp_gained(uint32_t value);
  private:
  uint32_t _internal_xp_gained() const;
  void _internal_set_xp_gained(uint32_t value);
  public:

  // optional uint64 wager_token_item_id = 4;
  bool has_wager_token_item_id() const;
  private:
  bool _internal_has_wager_token_item_id() const;
  public:
  void clear_wager_token_item_id();
  uint64_t wager_token_item_id() const;
  void set_wager_token_item_id(uint64_t value);
  private:
  uint64_t _internal_wager_token_item_id() const;
  void _internal_set_wager_token_item_id(uint64_t value);
  public:

  // optional uint32 coins_spent = 3;
  bool has_coins_spent() const;
  private:
  bool _internal_has_coins_spent() const;
  public:
  void clear_coins_spent();
  uint32_t coins_spent() const;
  void set_coins_spent(uint32_t value);
  private:
  uint32_t _internal_coins_spent() const;
  void _internal_set_coins_spent(uint32_t value);
  public:

  // optional uint32 rank_wager = 5;
  bool has_rank_wager() const;
  private:
  bool _internal_has_rank_wager() const;
  public:
  void clear_rank_wager();
  uint32_t rank_wager() const;
  void set_rank_wager(uint32_t value);
  private:
  uint32_t _internal_rank_wager() const;
  void _internal_set_rank_wager(uint32_t value);
  public:

  // optional uint32 wager_streak = 6;
  bool has_wager_streak() const;
  private:
  bool _internal_has_wager_streak() const;
  public:
  void clear_wager_streak();
  uint32_t wager_streak() const;
  void set_wager_streak(uint32_t value);
  private:
  uint32_t _internal_wager_streak() const;
  void _internal_set_wager_streak(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutXPCoins.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t xp_gained_;
    uint64_t wager_token_item_id_;
    uint32_t coins_spent_;
    uint32_t rank_wager_;
    uint32_t wager_streak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutXPCoins final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutXPCoins) */ {
 public:
  inline CMsgSignOutXPCoins() : CMsgSignOutXPCoins(nullptr) {}
  ~CMsgSignOutXPCoins() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutXPCoins(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutXPCoins(const CMsgSignOutXPCoins& from);
  CMsgSignOutXPCoins(CMsgSignOutXPCoins&& from) noexcept
    : CMsgSignOutXPCoins() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutXPCoins& operator=(const CMsgSignOutXPCoins& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutXPCoins& operator=(CMsgSignOutXPCoins&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutXPCoins& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutXPCoins* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutXPCoins*>(
               &_CMsgSignOutXPCoins_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CMsgSignOutXPCoins& a, CMsgSignOutXPCoins& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutXPCoins* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutXPCoins* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutXPCoins* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutXPCoins>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutXPCoins& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutXPCoins& from) {
    CMsgSignOutXPCoins::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutXPCoins* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutXPCoins";
  }
  protected:
  explicit CMsgSignOutXPCoins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutXPCoins_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kMatchIdFieldNumber = 3,
    kEventIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // repeated .CMsgSignOutXPCoins.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgSignOutXPCoins_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutXPCoins_Player >*
      mutable_players();
  private:
  const ::CMsgSignOutXPCoins_Player& _internal_players(int index) const;
  ::CMsgSignOutXPCoins_Player* _internal_add_players();
  public:
  const ::CMsgSignOutXPCoins_Player& players(int index) const;
  ::CMsgSignOutXPCoins_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutXPCoins_Player >&
      players() const;

  // optional uint64 match_id = 3;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutXPCoins)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutXPCoins_Player > players_;
    uint64_t match_id_;
    int event_id_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutBounties_Bounty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutBounties.Bounty) */ {
 public:
  inline CMsgSignOutBounties_Bounty() : CMsgSignOutBounties_Bounty(nullptr) {}
  ~CMsgSignOutBounties_Bounty() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutBounties_Bounty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutBounties_Bounty(const CMsgSignOutBounties_Bounty& from);
  CMsgSignOutBounties_Bounty(CMsgSignOutBounties_Bounty&& from) noexcept
    : CMsgSignOutBounties_Bounty() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutBounties_Bounty& operator=(const CMsgSignOutBounties_Bounty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutBounties_Bounty& operator=(CMsgSignOutBounties_Bounty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutBounties_Bounty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutBounties_Bounty* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutBounties_Bounty*>(
               &_CMsgSignOutBounties_Bounty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CMsgSignOutBounties_Bounty& a, CMsgSignOutBounties_Bounty& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutBounties_Bounty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutBounties_Bounty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutBounties_Bounty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutBounties_Bounty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutBounties_Bounty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutBounties_Bounty& from) {
    CMsgSignOutBounties_Bounty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutBounties_Bounty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutBounties.Bounty";
  }
  protected:
  explicit CMsgSignOutBounties_Bounty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIssuerAccountIdFieldNumber = 1,
    kCompleterAccountIdFieldNumber = 2,
    kTargetAccountIdFieldNumber = 3,
  };
  // optional uint32 issuer_account_id = 1;
  bool has_issuer_account_id() const;
  private:
  bool _internal_has_issuer_account_id() const;
  public:
  void clear_issuer_account_id();
  uint32_t issuer_account_id() const;
  void set_issuer_account_id(uint32_t value);
  private:
  uint32_t _internal_issuer_account_id() const;
  void _internal_set_issuer_account_id(uint32_t value);
  public:

  // optional uint32 completer_account_id = 2;
  bool has_completer_account_id() const;
  private:
  bool _internal_has_completer_account_id() const;
  public:
  void clear_completer_account_id();
  uint32_t completer_account_id() const;
  void set_completer_account_id(uint32_t value);
  private:
  uint32_t _internal_completer_account_id() const;
  void _internal_set_completer_account_id(uint32_t value);
  public:

  // optional uint32 target_account_id = 3;
  bool has_target_account_id() const;
  private:
  bool _internal_has_target_account_id() const;
  public:
  void clear_target_account_id();
  uint32_t target_account_id() const;
  void set_target_account_id(uint32_t value);
  private:
  uint32_t _internal_target_account_id() const;
  void _internal_set_target_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutBounties.Bounty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t issuer_account_id_;
    uint32_t completer_account_id_;
    uint32_t target_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutBounties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutBounties) */ {
 public:
  inline CMsgSignOutBounties() : CMsgSignOutBounties(nullptr) {}
  ~CMsgSignOutBounties() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutBounties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutBounties(const CMsgSignOutBounties& from);
  CMsgSignOutBounties(CMsgSignOutBounties&& from) noexcept
    : CMsgSignOutBounties() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutBounties& operator=(const CMsgSignOutBounties& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutBounties& operator=(CMsgSignOutBounties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutBounties& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutBounties* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutBounties*>(
               &_CMsgSignOutBounties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CMsgSignOutBounties& a, CMsgSignOutBounties& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutBounties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutBounties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutBounties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutBounties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutBounties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutBounties& from) {
    CMsgSignOutBounties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutBounties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutBounties";
  }
  protected:
  explicit CMsgSignOutBounties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutBounties_Bounty Bounty;

  // accessors -------------------------------------------------------

  enum : int {
    kBountiesFieldNumber = 1,
    kMatchIdFieldNumber = 3,
    kEventIdFieldNumber = 2,
    kTimestampFieldNumber = 4,
  };
  // repeated .CMsgSignOutBounties.Bounty bounties = 1;
  int bounties_size() const;
  private:
  int _internal_bounties_size() const;
  public:
  void clear_bounties();
  ::CMsgSignOutBounties_Bounty* mutable_bounties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutBounties_Bounty >*
      mutable_bounties();
  private:
  const ::CMsgSignOutBounties_Bounty& _internal_bounties(int index) const;
  ::CMsgSignOutBounties_Bounty* _internal_add_bounties();
  public:
  const ::CMsgSignOutBounties_Bounty& bounties(int index) const;
  ::CMsgSignOutBounties_Bounty* add_bounties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutBounties_Bounty >&
      bounties() const;

  // optional uint64 match_id = 3;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutBounties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutBounties_Bounty > bounties_;
    uint64_t match_id_;
    int event_id_;
    uint32_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutCommunityGoalProgress_EventGoalIncrement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutCommunityGoalProgress.EventGoalIncrement) */ {
 public:
  inline CMsgSignOutCommunityGoalProgress_EventGoalIncrement() : CMsgSignOutCommunityGoalProgress_EventGoalIncrement(nullptr) {}
  ~CMsgSignOutCommunityGoalProgress_EventGoalIncrement() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgress_EventGoalIncrement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutCommunityGoalProgress_EventGoalIncrement(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from);
  CMsgSignOutCommunityGoalProgress_EventGoalIncrement(CMsgSignOutCommunityGoalProgress_EventGoalIncrement&& from) noexcept
    : CMsgSignOutCommunityGoalProgress_EventGoalIncrement() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutCommunityGoalProgress_EventGoalIncrement& operator=(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutCommunityGoalProgress_EventGoalIncrement& operator=(CMsgSignOutCommunityGoalProgress_EventGoalIncrement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutCommunityGoalProgress_EventGoalIncrement* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutCommunityGoalProgress_EventGoalIncrement*>(
               &_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement& a, CMsgSignOutCommunityGoalProgress_EventGoalIncrement& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutCommunityGoalProgress_EventGoalIncrement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutCommunityGoalProgress_EventGoalIncrement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
    CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutCommunityGoalProgress.EventGoalIncrement";
  }
  protected:
  explicit CMsgSignOutCommunityGoalProgress_EventGoalIncrement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGoalIdFieldNumber = 1,
    kIncrementAmountFieldNumber = 2,
  };
  // optional uint32 event_goal_id = 1;
  bool has_event_goal_id() const;
  private:
  bool _internal_has_event_goal_id() const;
  public:
  void clear_event_goal_id();
  uint32_t event_goal_id() const;
  void set_event_goal_id(uint32_t value);
  private:
  uint32_t _internal_event_goal_id() const;
  void _internal_set_event_goal_id(uint32_t value);
  public:

  // optional uint32 increment_amount = 2;
  bool has_increment_amount() const;
  private:
  bool _internal_has_increment_amount() const;
  public:
  void clear_increment_amount();
  uint32_t increment_amount() const;
  void set_increment_amount(uint32_t value);
  private:
  uint32_t _internal_increment_amount() const;
  void _internal_set_increment_amount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_goal_id_;
    uint32_t increment_amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutCommunityGoalProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutCommunityGoalProgress) */ {
 public:
  inline CMsgSignOutCommunityGoalProgress() : CMsgSignOutCommunityGoalProgress(nullptr) {}
  ~CMsgSignOutCommunityGoalProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutCommunityGoalProgress(const CMsgSignOutCommunityGoalProgress& from);
  CMsgSignOutCommunityGoalProgress(CMsgSignOutCommunityGoalProgress&& from) noexcept
    : CMsgSignOutCommunityGoalProgress() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutCommunityGoalProgress& operator=(const CMsgSignOutCommunityGoalProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutCommunityGoalProgress& operator=(CMsgSignOutCommunityGoalProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutCommunityGoalProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutCommunityGoalProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutCommunityGoalProgress*>(
               &_CMsgSignOutCommunityGoalProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CMsgSignOutCommunityGoalProgress& a, CMsgSignOutCommunityGoalProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutCommunityGoalProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutCommunityGoalProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutCommunityGoalProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutCommunityGoalProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutCommunityGoalProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutCommunityGoalProgress& from) {
    CMsgSignOutCommunityGoalProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutCommunityGoalProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutCommunityGoalProgress";
  }
  protected:
  explicit CMsgSignOutCommunityGoalProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutCommunityGoalProgress_EventGoalIncrement EventGoalIncrement;

  // accessors -------------------------------------------------------

  enum : int {
    kEventIncrementsFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  int event_increments_size() const;
  private:
  int _internal_event_increments_size() const;
  public:
  void clear_event_increments();
  ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* mutable_event_increments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >*
      mutable_event_increments();
  private:
  const ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement& _internal_event_increments(int index) const;
  ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* _internal_add_event_increments();
  public:
  const ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement& event_increments(int index) const;
  ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* add_event_increments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >&
      event_increments() const;

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutCommunityGoalProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement > event_increments_;
    int event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCloseCompendiumInGamePredictionVoting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCloseCompendiumInGamePredictionVoting) */ {
 public:
  inline CMsgServerToGCCloseCompendiumInGamePredictionVoting() : CMsgServerToGCCloseCompendiumInGamePredictionVoting(nullptr) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVoting() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVoting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCloseCompendiumInGamePredictionVoting(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from);
  CMsgServerToGCCloseCompendiumInGamePredictionVoting(CMsgServerToGCCloseCompendiumInGamePredictionVoting&& from) noexcept
    : CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCloseCompendiumInGamePredictionVoting& operator=(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCloseCompendiumInGamePredictionVoting& operator=(CMsgServerToGCCloseCompendiumInGamePredictionVoting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCloseCompendiumInGamePredictionVoting& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCloseCompendiumInGamePredictionVoting* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCloseCompendiumInGamePredictionVoting*>(
               &_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgServerToGCCloseCompendiumInGamePredictionVoting& a, CMsgServerToGCCloseCompendiumInGamePredictionVoting& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCloseCompendiumInGamePredictionVoting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCloseCompendiumInGamePredictionVoting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
    CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCloseCompendiumInGamePredictionVoting";
  }
  protected:
  explicit CMsgServerToGCCloseCompendiumInGamePredictionVoting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kHltvDelayFieldNumber = 2,
    kLeagueIdFieldNumber = 3,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 hltv_delay = 2;
  bool has_hltv_delay() const;
  private:
  bool _internal_has_hltv_delay() const;
  public:
  void clear_hltv_delay();
  uint32_t hltv_delay() const;
  void set_hltv_delay(uint32_t value);
  private:
  uint32_t _internal_hltv_delay() const;
  void _internal_set_hltv_delay(uint32_t value);
  public:

  // optional uint32 league_id = 3;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    uint32_t hltv_delay_;
    uint32_t league_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse) */ {
 public:
  inline CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() : CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(nullptr) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from);
  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse&& from) noexcept
    : CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& operator=(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& operator=(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse*>(
               &_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& a, CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
    CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse";
  }
  protected:
  explicit CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult) */ {
 public:
  inline CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() : CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(nullptr) {}
  ~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from);
  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult&& from) noexcept
    : CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& operator=(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& operator=(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult*>(
               &_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& a, CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
    CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult";
  }
  protected:
  explicit CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionIdFieldNumber = 1,
    kPredictionValueFieldNumber = 2,
    kPredictionValueIsMaskFieldNumber = 3,
  };
  // optional uint32 prediction_id = 1;
  bool has_prediction_id() const;
  private:
  bool _internal_has_prediction_id() const;
  public:
  void clear_prediction_id();
  uint32_t prediction_id() const;
  void set_prediction_id(uint32_t value);
  private:
  uint32_t _internal_prediction_id() const;
  void _internal_set_prediction_id(uint32_t value);
  public:

  // optional uint32 prediction_value = 2;
  bool has_prediction_value() const;
  private:
  bool _internal_has_prediction_value() const;
  public:
  void clear_prediction_value();
  uint32_t prediction_value() const;
  void set_prediction_value(uint32_t value);
  private:
  uint32_t _internal_prediction_value() const;
  void _internal_set_prediction_value(uint32_t value);
  public:

  // optional bool prediction_value_is_mask = 3;
  bool has_prediction_value_is_mask() const;
  private:
  bool _internal_has_prediction_value_is_mask() const;
  public:
  void clear_prediction_value_is_mask();
  bool prediction_value_is_mask() const;
  void set_prediction_value_is_mask(bool value);
  private:
  bool _internal_prediction_value_is_mask() const;
  void _internal_set_prediction_value_is_mask(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t prediction_id_;
    uint32_t prediction_value_;
    bool prediction_value_is_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCompendiumInGamePredictionResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCompendiumInGamePredictionResults) */ {
 public:
  inline CMsgServerToGCCompendiumInGamePredictionResults() : CMsgServerToGCCompendiumInGamePredictionResults(nullptr) {}
  ~CMsgServerToGCCompendiumInGamePredictionResults() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCompendiumInGamePredictionResults(const CMsgServerToGCCompendiumInGamePredictionResults& from);
  CMsgServerToGCCompendiumInGamePredictionResults(CMsgServerToGCCompendiumInGamePredictionResults&& from) noexcept
    : CMsgServerToGCCompendiumInGamePredictionResults() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCompendiumInGamePredictionResults& operator=(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCompendiumInGamePredictionResults& operator=(CMsgServerToGCCompendiumInGamePredictionResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCompendiumInGamePredictionResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCompendiumInGamePredictionResults* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCompendiumInGamePredictionResults*>(
               &_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CMsgServerToGCCompendiumInGamePredictionResults& a, CMsgServerToGCCompendiumInGamePredictionResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCompendiumInGamePredictionResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCompendiumInGamePredictionResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCompendiumInGamePredictionResults& from) {
    CMsgServerToGCCompendiumInGamePredictionResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCompendiumInGamePredictionResults";
  }
  protected:
  explicit CMsgServerToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult PredictionResult;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kMatchIdFieldNumber = 1,
    kLeagueIdFieldNumber = 3,
    kLeagueNodeIdFieldNumber = 4,
  };
  // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >*
      mutable_results();
  private:
  const ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& _internal_results(int index) const;
  ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* _internal_add_results();
  public:
  const ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& results(int index) const;
  ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >&
      results() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 league_id = 3;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 league_node_id = 4;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  uint32_t league_node_id() const;
  void set_league_node_id(uint32_t value);
  private:
  uint32_t _internal_league_node_id() const;
  void _internal_set_league_node_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCompendiumInGamePredictionResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult > results_;
    uint64_t match_id_;
    uint32_t league_id_;
    uint32_t league_node_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCompendiumChosenInGamePredictions_Prediction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction) */ {
 public:
  inline CMsgServerToGCCompendiumChosenInGamePredictions_Prediction() : CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(nullptr) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictions_Prediction() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from);
  CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction&& from) noexcept
    : CMsgServerToGCCompendiumChosenInGamePredictions_Prediction() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& operator=(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& operator=(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction*>(
               &_CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& a, CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCompendiumChosenInGamePredictions_Prediction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from) {
    CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCompendiumChosenInGamePredictions.Prediction";
  }
  protected:
  explicit CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionIdFieldNumber = 1,
  };
  // optional uint32 prediction_id = 1;
  bool has_prediction_id() const;
  private:
  bool _internal_has_prediction_id() const;
  public:
  void clear_prediction_id();
  uint32_t prediction_id() const;
  void set_prediction_id(uint32_t value);
  private:
  uint32_t _internal_prediction_id() const;
  void _internal_set_prediction_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t prediction_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCompendiumChosenInGamePredictions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCompendiumChosenInGamePredictions) */ {
 public:
  inline CMsgServerToGCCompendiumChosenInGamePredictions() : CMsgServerToGCCompendiumChosenInGamePredictions(nullptr) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictions() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCompendiumChosenInGamePredictions(const CMsgServerToGCCompendiumChosenInGamePredictions& from);
  CMsgServerToGCCompendiumChosenInGamePredictions(CMsgServerToGCCompendiumChosenInGamePredictions&& from) noexcept
    : CMsgServerToGCCompendiumChosenInGamePredictions() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCompendiumChosenInGamePredictions& operator=(const CMsgServerToGCCompendiumChosenInGamePredictions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCompendiumChosenInGamePredictions& operator=(CMsgServerToGCCompendiumChosenInGamePredictions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCompendiumChosenInGamePredictions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCompendiumChosenInGamePredictions* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCompendiumChosenInGamePredictions*>(
               &_CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(CMsgServerToGCCompendiumChosenInGamePredictions& a, CMsgServerToGCCompendiumChosenInGamePredictions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCompendiumChosenInGamePredictions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCompendiumChosenInGamePredictions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCompendiumChosenInGamePredictions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCompendiumChosenInGamePredictions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCompendiumChosenInGamePredictions& from) {
    CMsgServerToGCCompendiumChosenInGamePredictions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCompendiumChosenInGamePredictions";
  }
  protected:
  explicit CMsgServerToGCCompendiumChosenInGamePredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCCompendiumChosenInGamePredictions_Prediction Prediction;

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsChosenFieldNumber = 2,
    kMatchIdFieldNumber = 1,
    kLeagueIdFieldNumber = 3,
  };
  // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
  int predictions_chosen_size() const;
  private:
  int _internal_predictions_chosen_size() const;
  public:
  void clear_predictions_chosen();
  ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* mutable_predictions_chosen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >*
      mutable_predictions_chosen();
  private:
  const ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& _internal_predictions_chosen(int index) const;
  ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* _internal_add_predictions_chosen();
  public:
  const ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& predictions_chosen(int index) const;
  ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* add_predictions_chosen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >&
      predictions_chosen() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 league_id = 3;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCompendiumChosenInGamePredictions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction > predictions_chosen_;
    uint64_t match_id_;
    uint32_t league_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToGCCompendiumInGamePredictionResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToGCCompendiumInGamePredictionResults) */ {
 public:
  inline CMsgGCToGCCompendiumInGamePredictionResults() : CMsgGCToGCCompendiumInGamePredictionResults(nullptr) {}
  ~CMsgGCToGCCompendiumInGamePredictionResults() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToGCCompendiumInGamePredictionResults(const CMsgGCToGCCompendiumInGamePredictionResults& from);
  CMsgGCToGCCompendiumInGamePredictionResults(CMsgGCToGCCompendiumInGamePredictionResults&& from) noexcept
    : CMsgGCToGCCompendiumInGamePredictionResults() {
    *this = ::std::move(from);
  }

  inline CMsgGCToGCCompendiumInGamePredictionResults& operator=(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToGCCompendiumInGamePredictionResults& operator=(CMsgGCToGCCompendiumInGamePredictionResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToGCCompendiumInGamePredictionResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToGCCompendiumInGamePredictionResults* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToGCCompendiumInGamePredictionResults*>(
               &_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(CMsgGCToGCCompendiumInGamePredictionResults& a, CMsgGCToGCCompendiumInGamePredictionResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToGCCompendiumInGamePredictionResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToGCCompendiumInGamePredictionResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToGCCompendiumInGamePredictionResults& from) {
    CMsgGCToGCCompendiumInGamePredictionResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToGCCompendiumInGamePredictionResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToGCCompendiumInGamePredictionResults";
  }
  protected:
  explicit CMsgGCToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::CMsgServerToGCCompendiumInGamePredictionResults& results() const;
  PROTOBUF_NODISCARD ::CMsgServerToGCCompendiumInGamePredictionResults* release_results();
  ::CMsgServerToGCCompendiumInGamePredictionResults* mutable_results();
  void set_allocated_results(::CMsgServerToGCCompendiumInGamePredictionResults* results);
  private:
  const ::CMsgServerToGCCompendiumInGamePredictionResults& _internal_results() const;
  ::CMsgServerToGCCompendiumInGamePredictionResults* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::CMsgServerToGCCompendiumInGamePredictionResults* results);
  ::CMsgServerToGCCompendiumInGamePredictionResults* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:CMsgGCToGCCompendiumInGamePredictionResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgServerToGCCompendiumInGamePredictionResults* results_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase) */ {
 public:
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() : CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(nullptr) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from);
  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase&& from) noexcept
    : CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& operator=(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& operator=(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase*>(
               &_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& a, CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryItemsFieldNumber = 5,
    kTalentsSkilledFieldNumber = 7,
    kGoldFieldNumber = 2,
    kNetWorthFieldNumber = 3,
    kGameTimeFieldNumber = 4,
    kItemFieldNumber = 1,
  };
  // repeated int32 inventory_items = 5;
  int inventory_items_size() const;
  private:
  int _internal_inventory_items_size() const;
  public:
  void clear_inventory_items();
  private:
  int32_t _internal_inventory_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_inventory_items() const;
  void _internal_add_inventory_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_inventory_items();
  public:
  int32_t inventory_items(int index) const;
  void set_inventory_items(int index, int32_t value);
  void add_inventory_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      inventory_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_inventory_items();

  // repeated bool talents_skilled = 7;
  int talents_skilled_size() const;
  private:
  int _internal_talents_skilled_size() const;
  public:
  void clear_talents_skilled();
  private:
  bool _internal_talents_skilled(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_talents_skilled() const;
  void _internal_add_talents_skilled(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_talents_skilled();
  public:
  bool talents_skilled(int index) const;
  void set_talents_skilled(int index, bool value);
  void add_talents_skilled(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      talents_skilled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_talents_skilled();

  // optional uint32 gold = 2;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 net_worth = 3;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 game_time = 4;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  uint32_t game_time() const;
  void set_game_time(uint32_t value);
  private:
  uint32_t _internal_game_time() const;
  void _internal_set_game_time(uint32_t value);
  public:

  // optional int32 item = 1 [default = -1];
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  int32_t item() const;
  void set_item(int32_t value);
  private:
  int32_t _internal_item() const;
  void _internal_set_item(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > inventory_items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > talents_skilled_;
    uint32_t gold_;
    uint32_t net_worth_;
    uint32_t game_time_;
    int32_t item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerItemPurchaseHistory_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player) */ {
 public:
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() : CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(nullptr) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from);
  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player&& from) noexcept
    : CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& operator=(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& operator=(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player*>(
               &_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& a, CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerItemPurchaseHistory.Player";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 4,
    kEnemyHeroIdsFieldNumber = 5,
    kItemPurchasesFieldNumber = 6,
    kPlayerSlotFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kLaneFieldNumber = 7,
    kIsWinnerFieldNumber = 8,
  };
  // repeated uint32 allied_hero_ids = 4;
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 5;
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  int item_purchases_size() const;
  private:
  int _internal_item_purchases_size() const;
  public:
  void clear_item_purchases();
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* mutable_item_purchases(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >*
      mutable_item_purchases();
  private:
  const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& _internal_item_purchases(int index) const;
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* _internal_add_item_purchases();
  public:
  const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& item_purchases(int index) const;
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* add_item_purchases();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >&
      item_purchases() const;

  // optional uint32 player_slot = 1;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 lane = 7;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional bool is_winner = 8;
  bool has_is_winner() const;
  private:
  bool _internal_has_is_winner() const;
  public:
  void clear_is_winner();
  bool is_winner() const;
  void set_is_winner(bool value);
  private:
  bool _internal_is_winner() const;
  void _internal_set_is_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase > item_purchases_;
    uint32_t player_slot_;
    uint32_t account_id_;
    uint32_t hero_id_;
    uint32_t lane_;
    bool is_winner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerItemPurchaseHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerItemPurchaseHistory) */ {
 public:
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory() : CMsgServerToGCMatchPlayerItemPurchaseHistory(nullptr) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerItemPurchaseHistory(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from);
  CMsgServerToGCMatchPlayerItemPurchaseHistory(CMsgServerToGCMatchPlayerItemPurchaseHistory&& from) noexcept
    : CMsgServerToGCMatchPlayerItemPurchaseHistory() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerItemPurchaseHistory& operator=(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerItemPurchaseHistory& operator=(CMsgServerToGCMatchPlayerItemPurchaseHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerItemPurchaseHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerItemPurchaseHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory*>(
               &_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(CMsgServerToGCMatchPlayerItemPurchaseHistory& a, CMsgServerToGCMatchPlayerItemPurchaseHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerItemPurchaseHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerItemPurchaseHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
    CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerItemPurchaseHistory";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerItemPurchaseHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase ItemPurchase;
  typedef CMsgServerToGCMatchPlayerItemPurchaseHistory_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kMatchIdFieldNumber = 1,
    kMmrFieldNumber = 2,
  };
  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >*
      mutable_players();
  private:
  const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& _internal_players(int index) const;
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* _internal_add_players();
  public:
  const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& players(int index) const;
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >&
      players() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 mmr = 2;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerItemPurchaseHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player > players_;
    uint64_t match_id_;
    uint32_t mmr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip) */ {
 public:
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip() : CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(nullptr) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from);
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip&& from) noexcept
    : CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& operator=(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& operator=(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip*>(
               &_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& a, CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from) {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryItemsFieldNumber = 3,
    kTalentsSkilledFieldNumber = 4,
    kAvailableNeutralItemsFieldNumber = 5,
    kGameTimeFieldNumber = 2,
    kItemFieldNumber = 1,
  };
  // repeated int32 inventory_items = 3;
  int inventory_items_size() const;
  private:
  int _internal_inventory_items_size() const;
  public:
  void clear_inventory_items();
  private:
  int32_t _internal_inventory_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_inventory_items() const;
  void _internal_add_inventory_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_inventory_items();
  public:
  int32_t inventory_items(int index) const;
  void set_inventory_items(int index, int32_t value);
  void add_inventory_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      inventory_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_inventory_items();

  // repeated bool talents_skilled = 4;
  int talents_skilled_size() const;
  private:
  int _internal_talents_skilled_size() const;
  public:
  void clear_talents_skilled();
  private:
  bool _internal_talents_skilled(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_talents_skilled() const;
  void _internal_add_talents_skilled(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_talents_skilled();
  public:
  bool talents_skilled(int index) const;
  void set_talents_skilled(int index, bool value);
  void add_talents_skilled(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      talents_skilled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_talents_skilled();

  // repeated int32 available_neutral_items = 5;
  int available_neutral_items_size() const;
  private:
  int _internal_available_neutral_items_size() const;
  public:
  void clear_available_neutral_items();
  private:
  int32_t _internal_available_neutral_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_available_neutral_items() const;
  void _internal_add_available_neutral_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_available_neutral_items();
  public:
  int32_t available_neutral_items(int index) const;
  void set_available_neutral_items(int index, int32_t value);
  void add_available_neutral_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      available_neutral_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_available_neutral_items();

  // optional uint32 game_time = 2;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  uint32_t game_time() const;
  void set_game_time(uint32_t value);
  private:
  uint32_t _internal_game_time() const;
  void _internal_set_game_time(uint32_t value);
  public:

  // optional int32 item = 1 [default = -1];
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  int32_t item() const;
  void set_item(int32_t value);
  private:
  int32_t _internal_item() const;
  void _internal_set_item(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > inventory_items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > talents_skilled_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > available_neutral_items_;
    uint32_t game_time_;
    int32_t item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player) */ {
 public:
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player() : CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(nullptr) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from);
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player&& from) noexcept
    : CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& operator=(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& operator=(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player*>(
               &_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& a, CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from) {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 2,
    kEnemyHeroIdsFieldNumber = 3,
    kItemEquipsFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kIsWinnerFieldNumber = 5,
  };
  // repeated uint32 allied_hero_ids = 2;
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 3;
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
  int item_equips_size() const;
  private:
  int _internal_item_equips_size() const;
  public:
  void clear_item_equips();
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* mutable_item_equips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >*
      mutable_item_equips();
  private:
  const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& _internal_item_equips(int index) const;
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* _internal_add_item_equips();
  public:
  const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& item_equips(int index) const;
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* add_item_equips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >&
      item_equips() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional bool is_winner = 5;
  bool has_is_winner() const;
  private:
  bool _internal_has_is_winner() const;
  public:
  void clear_is_winner();
  bool is_winner() const;
  void set_is_winner(bool value);
  private:
  bool _internal_is_winner() const;
  void _internal_set_is_winner(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip > item_equips_;
    uint32_t account_id_;
    bool is_winner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchPlayerNeutralItemEquipHistory) */ {
 public:
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory() : CMsgServerToGCMatchPlayerNeutralItemEquipHistory(nullptr) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from);
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory(CMsgServerToGCMatchPlayerNeutralItemEquipHistory&& from) noexcept
    : CMsgServerToGCMatchPlayerNeutralItemEquipHistory() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory& operator=(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchPlayerNeutralItemEquipHistory& operator=(CMsgServerToGCMatchPlayerNeutralItemEquipHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchPlayerNeutralItemEquipHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory*>(
               &_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory& a, CMsgServerToGCMatchPlayerNeutralItemEquipHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchPlayerNeutralItemEquipHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from) {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchPlayerNeutralItemEquipHistory";
  }
  protected:
  explicit CMsgServerToGCMatchPlayerNeutralItemEquipHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip ItemEquip;
  typedef CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kMatchIdFieldNumber = 1,
  };
  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >*
      mutable_players();
  private:
  const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& _internal_players(int index) const;
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* _internal_add_players();
  public:
  const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& players(int index) const;
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >&
      players() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player > players_;
    uint64_t match_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchStateHistory_PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchStateHistory.PlayerState) */ {
 public:
  inline CMsgServerToGCMatchStateHistory_PlayerState() : CMsgServerToGCMatchStateHistory_PlayerState(nullptr) {}
  ~CMsgServerToGCMatchStateHistory_PlayerState() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchStateHistory_PlayerState(const CMsgServerToGCMatchStateHistory_PlayerState& from);
  CMsgServerToGCMatchStateHistory_PlayerState(CMsgServerToGCMatchStateHistory_PlayerState&& from) noexcept
    : CMsgServerToGCMatchStateHistory_PlayerState() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchStateHistory_PlayerState& operator=(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchStateHistory_PlayerState& operator=(CMsgServerToGCMatchStateHistory_PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchStateHistory_PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchStateHistory_PlayerState* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchStateHistory_PlayerState*>(
               &_CMsgServerToGCMatchStateHistory_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(CMsgServerToGCMatchStateHistory_PlayerState& a, CMsgServerToGCMatchStateHistory_PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchStateHistory_PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchStateHistory_PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchStateHistory_PlayerState& from) {
    CMsgServerToGCMatchStateHistory_PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchStateHistory_PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchStateHistory.PlayerState";
  }
  protected:
  explicit CMsgServerToGCMatchStateHistory_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kNetWorthFieldNumber = 2,
    kLevelFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kRespawnTimeFieldNumber = 5,
    kHasBuybackFieldNumber = 6,
    kHasAegisFieldNumber = 7,
    kHasRapierFieldNumber = 8,
    kDistanceFieldNumber = 9,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 net_worth = 2;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 respawn_time = 5;
  bool has_respawn_time() const;
  private:
  bool _internal_has_respawn_time() const;
  public:
  void clear_respawn_time();
  uint32_t respawn_time() const;
  void set_respawn_time(uint32_t value);
  private:
  uint32_t _internal_respawn_time() const;
  void _internal_set_respawn_time(uint32_t value);
  public:

  // optional bool has_buyback = 6;
  bool has_has_buyback() const;
  private:
  bool _internal_has_has_buyback() const;
  public:
  void clear_has_buyback();
  bool has_buyback() const;
  void set_has_buyback(bool value);
  private:
  bool _internal_has_buyback() const;
  void _internal_set_has_buyback(bool value);
  public:

  // optional bool has_aegis = 7;
  bool has_has_aegis() const;
  private:
  bool _internal_has_has_aegis() const;
  public:
  void clear_has_aegis();
  bool has_aegis() const;
  void set_has_aegis(bool value);
  private:
  bool _internal_has_aegis() const;
  void _internal_set_has_aegis(bool value);
  public:

  // optional bool has_rapier = 8;
  bool has_has_rapier() const;
  private:
  bool _internal_has_has_rapier() const;
  public:
  void clear_has_rapier();
  bool has_rapier() const;
  void set_has_rapier(bool value);
  private:
  bool _internal_has_rapier() const;
  void _internal_set_has_rapier(bool value);
  public:

  // optional uint32 distance = 9;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchStateHistory.PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t net_worth_;
    uint32_t level_;
    uint32_t deaths_;
    uint32_t respawn_time_;
    bool has_buyback_;
    bool has_aegis_;
    bool has_rapier_;
    uint32_t distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchStateHistory_TeamState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchStateHistory.TeamState) */ {
 public:
  inline CMsgServerToGCMatchStateHistory_TeamState() : CMsgServerToGCMatchStateHistory_TeamState(nullptr) {}
  ~CMsgServerToGCMatchStateHistory_TeamState() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_TeamState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchStateHistory_TeamState(const CMsgServerToGCMatchStateHistory_TeamState& from);
  CMsgServerToGCMatchStateHistory_TeamState(CMsgServerToGCMatchStateHistory_TeamState&& from) noexcept
    : CMsgServerToGCMatchStateHistory_TeamState() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchStateHistory_TeamState& operator=(const CMsgServerToGCMatchStateHistory_TeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchStateHistory_TeamState& operator=(CMsgServerToGCMatchStateHistory_TeamState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchStateHistory_TeamState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchStateHistory_TeamState* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchStateHistory_TeamState*>(
               &_CMsgServerToGCMatchStateHistory_TeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(CMsgServerToGCMatchStateHistory_TeamState& a, CMsgServerToGCMatchStateHistory_TeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchStateHistory_TeamState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchStateHistory_TeamState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchStateHistory_TeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchStateHistory_TeamState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchStateHistory_TeamState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchStateHistory_TeamState& from) {
    CMsgServerToGCMatchStateHistory_TeamState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchStateHistory_TeamState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchStateHistory.TeamState";
  }
  protected:
  explicit CMsgServerToGCMatchStateHistory_TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatesFieldNumber = 2,
    kTowerHealthPctFieldNumber = 3,
    kBarracksHealthPctFieldNumber = 4,
    kTeamFieldNumber = 1,
    kAncientHealthPctFieldNumber = 5,
    kGlyphCooldownFieldNumber = 6,
    kKillsFieldNumber = 7,
    kCreepDistanceSafeFieldNumber = 8,
    kCreepDistanceMidFieldNumber = 9,
    kCreepDistanceOffFieldNumber = 10,
  };
  // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
  int player_states_size() const;
  private:
  int _internal_player_states_size() const;
  public:
  void clear_player_states();
  ::CMsgServerToGCMatchStateHistory_PlayerState* mutable_player_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_PlayerState >*
      mutable_player_states();
  private:
  const ::CMsgServerToGCMatchStateHistory_PlayerState& _internal_player_states(int index) const;
  ::CMsgServerToGCMatchStateHistory_PlayerState* _internal_add_player_states();
  public:
  const ::CMsgServerToGCMatchStateHistory_PlayerState& player_states(int index) const;
  ::CMsgServerToGCMatchStateHistory_PlayerState* add_player_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_PlayerState >&
      player_states() const;

  // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
  int tower_health_pct_size() const;
  private:
  int _internal_tower_health_pct_size() const;
  public:
  void clear_tower_health_pct();
  private:
  uint32_t _internal_tower_health_pct(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tower_health_pct() const;
  void _internal_add_tower_health_pct(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tower_health_pct();
  public:
  uint32_t tower_health_pct(int index) const;
  void set_tower_health_pct(int index, uint32_t value);
  void add_tower_health_pct(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tower_health_pct() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tower_health_pct();

  // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
  int barracks_health_pct_size() const;
  private:
  int _internal_barracks_health_pct_size() const;
  public:
  void clear_barracks_health_pct();
  private:
  uint32_t _internal_barracks_health_pct(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_barracks_health_pct() const;
  void _internal_add_barracks_health_pct(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_barracks_health_pct();
  public:
  uint32_t barracks_health_pct(int index) const;
  void set_barracks_health_pct(int index, uint32_t value);
  void add_barracks_health_pct(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      barracks_health_pct() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_barracks_health_pct();

  // optional uint32 team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 ancient_health_pct = 5;
  bool has_ancient_health_pct() const;
  private:
  bool _internal_has_ancient_health_pct() const;
  public:
  void clear_ancient_health_pct();
  uint32_t ancient_health_pct() const;
  void set_ancient_health_pct(uint32_t value);
  private:
  uint32_t _internal_ancient_health_pct() const;
  void _internal_set_ancient_health_pct(uint32_t value);
  public:

  // optional uint32 glyph_cooldown = 6;
  bool has_glyph_cooldown() const;
  private:
  bool _internal_has_glyph_cooldown() const;
  public:
  void clear_glyph_cooldown();
  uint32_t glyph_cooldown() const;
  void set_glyph_cooldown(uint32_t value);
  private:
  uint32_t _internal_glyph_cooldown() const;
  void _internal_set_glyph_cooldown(uint32_t value);
  public:

  // optional uint32 kills = 7;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 creep_distance_safe = 8;
  bool has_creep_distance_safe() const;
  private:
  bool _internal_has_creep_distance_safe() const;
  public:
  void clear_creep_distance_safe();
  uint32_t creep_distance_safe() const;
  void set_creep_distance_safe(uint32_t value);
  private:
  uint32_t _internal_creep_distance_safe() const;
  void _internal_set_creep_distance_safe(uint32_t value);
  public:

  // optional uint32 creep_distance_mid = 9;
  bool has_creep_distance_mid() const;
  private:
  bool _internal_has_creep_distance_mid() const;
  public:
  void clear_creep_distance_mid();
  uint32_t creep_distance_mid() const;
  void set_creep_distance_mid(uint32_t value);
  private:
  uint32_t _internal_creep_distance_mid() const;
  void _internal_set_creep_distance_mid(uint32_t value);
  public:

  // optional uint32 creep_distance_off = 10;
  bool has_creep_distance_off() const;
  private:
  bool _internal_has_creep_distance_off() const;
  public:
  void clear_creep_distance_off();
  uint32_t creep_distance_off() const;
  void set_creep_distance_off(uint32_t value);
  private:
  uint32_t _internal_creep_distance_off() const;
  void _internal_set_creep_distance_off(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchStateHistory.TeamState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_PlayerState > player_states_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tower_health_pct_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > barracks_health_pct_;
    uint32_t team_;
    uint32_t ancient_health_pct_;
    uint32_t glyph_cooldown_;
    uint32_t kills_;
    uint32_t creep_distance_safe_;
    uint32_t creep_distance_mid_;
    uint32_t creep_distance_off_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchStateHistory_MatchState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchStateHistory.MatchState) */ {
 public:
  inline CMsgServerToGCMatchStateHistory_MatchState() : CMsgServerToGCMatchStateHistory_MatchState(nullptr) {}
  ~CMsgServerToGCMatchStateHistory_MatchState() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_MatchState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchStateHistory_MatchState(const CMsgServerToGCMatchStateHistory_MatchState& from);
  CMsgServerToGCMatchStateHistory_MatchState(CMsgServerToGCMatchStateHistory_MatchState&& from) noexcept
    : CMsgServerToGCMatchStateHistory_MatchState() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchStateHistory_MatchState& operator=(const CMsgServerToGCMatchStateHistory_MatchState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchStateHistory_MatchState& operator=(CMsgServerToGCMatchStateHistory_MatchState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchStateHistory_MatchState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchStateHistory_MatchState* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchStateHistory_MatchState*>(
               &_CMsgServerToGCMatchStateHistory_MatchState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(CMsgServerToGCMatchStateHistory_MatchState& a, CMsgServerToGCMatchStateHistory_MatchState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchStateHistory_MatchState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchStateHistory_MatchState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchStateHistory_MatchState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchStateHistory_MatchState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchStateHistory_MatchState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchStateHistory_MatchState& from) {
    CMsgServerToGCMatchStateHistory_MatchState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchStateHistory_MatchState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchStateHistory.MatchState";
  }
  protected:
  explicit CMsgServerToGCMatchStateHistory_MatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiantStateFieldNumber = 2,
    kDireStateFieldNumber = 3,
    kGameTimeFieldNumber = 1,
  };
  // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
  bool has_radiant_state() const;
  private:
  bool _internal_has_radiant_state() const;
  public:
  void clear_radiant_state();
  const ::CMsgServerToGCMatchStateHistory_TeamState& radiant_state() const;
  PROTOBUF_NODISCARD ::CMsgServerToGCMatchStateHistory_TeamState* release_radiant_state();
  ::CMsgServerToGCMatchStateHistory_TeamState* mutable_radiant_state();
  void set_allocated_radiant_state(::CMsgServerToGCMatchStateHistory_TeamState* radiant_state);
  private:
  const ::CMsgServerToGCMatchStateHistory_TeamState& _internal_radiant_state() const;
  ::CMsgServerToGCMatchStateHistory_TeamState* _internal_mutable_radiant_state();
  public:
  void unsafe_arena_set_allocated_radiant_state(
      ::CMsgServerToGCMatchStateHistory_TeamState* radiant_state);
  ::CMsgServerToGCMatchStateHistory_TeamState* unsafe_arena_release_radiant_state();

  // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
  bool has_dire_state() const;
  private:
  bool _internal_has_dire_state() const;
  public:
  void clear_dire_state();
  const ::CMsgServerToGCMatchStateHistory_TeamState& dire_state() const;
  PROTOBUF_NODISCARD ::CMsgServerToGCMatchStateHistory_TeamState* release_dire_state();
  ::CMsgServerToGCMatchStateHistory_TeamState* mutable_dire_state();
  void set_allocated_dire_state(::CMsgServerToGCMatchStateHistory_TeamState* dire_state);
  private:
  const ::CMsgServerToGCMatchStateHistory_TeamState& _internal_dire_state() const;
  ::CMsgServerToGCMatchStateHistory_TeamState* _internal_mutable_dire_state();
  public:
  void unsafe_arena_set_allocated_dire_state(
      ::CMsgServerToGCMatchStateHistory_TeamState* dire_state);
  ::CMsgServerToGCMatchStateHistory_TeamState* unsafe_arena_release_dire_state();

  // optional uint32 game_time = 1;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  uint32_t game_time() const;
  void set_game_time(uint32_t value);
  private:
  uint32_t _internal_game_time() const;
  void _internal_set_game_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchStateHistory.MatchState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgServerToGCMatchStateHistory_TeamState* radiant_state_;
    ::CMsgServerToGCMatchStateHistory_TeamState* dire_state_;
    uint32_t game_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCMatchStateHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCMatchStateHistory) */ {
 public:
  inline CMsgServerToGCMatchStateHistory() : CMsgServerToGCMatchStateHistory(nullptr) {}
  ~CMsgServerToGCMatchStateHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCMatchStateHistory(const CMsgServerToGCMatchStateHistory& from);
  CMsgServerToGCMatchStateHistory(CMsgServerToGCMatchStateHistory&& from) noexcept
    : CMsgServerToGCMatchStateHistory() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCMatchStateHistory& operator=(const CMsgServerToGCMatchStateHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCMatchStateHistory& operator=(CMsgServerToGCMatchStateHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCMatchStateHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCMatchStateHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCMatchStateHistory*>(
               &_CMsgServerToGCMatchStateHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(CMsgServerToGCMatchStateHistory& a, CMsgServerToGCMatchStateHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCMatchStateHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCMatchStateHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCMatchStateHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCMatchStateHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCMatchStateHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCMatchStateHistory& from) {
    CMsgServerToGCMatchStateHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCMatchStateHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCMatchStateHistory";
  }
  protected:
  explicit CMsgServerToGCMatchStateHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCMatchStateHistory_PlayerState PlayerState;
  typedef CMsgServerToGCMatchStateHistory_TeamState TeamState;
  typedef CMsgServerToGCMatchStateHistory_MatchState MatchState;

  // accessors -------------------------------------------------------

  enum : int {
    kMatchStatesFieldNumber = 4,
    kMatchIdFieldNumber = 1,
    kRadiantWonFieldNumber = 2,
    kMmrFieldNumber = 3,
  };
  // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  int match_states_size() const;
  private:
  int _internal_match_states_size() const;
  public:
  void clear_match_states();
  ::CMsgServerToGCMatchStateHistory_MatchState* mutable_match_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_MatchState >*
      mutable_match_states();
  private:
  const ::CMsgServerToGCMatchStateHistory_MatchState& _internal_match_states(int index) const;
  ::CMsgServerToGCMatchStateHistory_MatchState* _internal_add_match_states();
  public:
  const ::CMsgServerToGCMatchStateHistory_MatchState& match_states(int index) const;
  ::CMsgServerToGCMatchStateHistory_MatchState* add_match_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_MatchState >&
      match_states() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional bool radiant_won = 2;
  bool has_radiant_won() const;
  private:
  bool _internal_has_radiant_won() const;
  public:
  void clear_radiant_won();
  bool radiant_won() const;
  void set_radiant_won(bool value);
  private:
  bool _internal_radiant_won() const;
  void _internal_set_radiant_won(bool value);
  public:

  // optional uint32 mmr = 3;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCMatchStateHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_MatchState > match_states_;
    uint64_t match_id_;
    bool radiant_won_;
    uint32_t mmr_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchStateSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchStateSteamMLEntry) */ {
 public:
  inline CMsgMatchStateSteamMLEntry() : CMsgMatchStateSteamMLEntry(nullptr) {}
  ~CMsgMatchStateSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchStateSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchStateSteamMLEntry(const CMsgMatchStateSteamMLEntry& from);
  CMsgMatchStateSteamMLEntry(CMsgMatchStateSteamMLEntry&& from) noexcept
    : CMsgMatchStateSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgMatchStateSteamMLEntry& operator=(const CMsgMatchStateSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchStateSteamMLEntry& operator=(CMsgMatchStateSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchStateSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchStateSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchStateSteamMLEntry*>(
               &_CMsgMatchStateSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(CMsgMatchStateSteamMLEntry& a, CMsgMatchStateSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchStateSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchStateSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchStateSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchStateSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchStateSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchStateSteamMLEntry& from) {
    CMsgMatchStateSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchStateSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchStateSteamMLEntry";
  }
  protected:
  explicit CMsgMatchStateSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchStateFieldNumber = 1,
    kMmrFieldNumber = 2,
    kRadiantWonFieldNumber = 3,
  };
  // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
  bool has_match_state() const;
  private:
  bool _internal_has_match_state() const;
  public:
  void clear_match_state();
  const ::CMsgServerToGCMatchStateHistory_MatchState& match_state() const;
  PROTOBUF_NODISCARD ::CMsgServerToGCMatchStateHistory_MatchState* release_match_state();
  ::CMsgServerToGCMatchStateHistory_MatchState* mutable_match_state();
  void set_allocated_match_state(::CMsgServerToGCMatchStateHistory_MatchState* match_state);
  private:
  const ::CMsgServerToGCMatchStateHistory_MatchState& _internal_match_state() const;
  ::CMsgServerToGCMatchStateHistory_MatchState* _internal_mutable_match_state();
  public:
  void unsafe_arena_set_allocated_match_state(
      ::CMsgServerToGCMatchStateHistory_MatchState* match_state);
  ::CMsgServerToGCMatchStateHistory_MatchState* unsafe_arena_release_match_state();

  // optional uint32 mmr = 2;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // optional bool radiant_won = 3;
  bool has_radiant_won() const;
  private:
  bool _internal_has_radiant_won() const;
  public:
  void clear_radiant_won();
  bool radiant_won() const;
  void set_radiant_won(bool value);
  private:
  bool _internal_radiant_won() const;
  void _internal_set_radiant_won(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchStateSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgServerToGCMatchStateHistory_MatchState* match_state_;
    uint32_t mmr_;
    bool radiant_won_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgLaneSelectionSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLaneSelectionSteamMLEntry) */ {
 public:
  inline CMsgLaneSelectionSteamMLEntry() : CMsgLaneSelectionSteamMLEntry(nullptr) {}
  ~CMsgLaneSelectionSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgLaneSelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLaneSelectionSteamMLEntry(const CMsgLaneSelectionSteamMLEntry& from);
  CMsgLaneSelectionSteamMLEntry(CMsgLaneSelectionSteamMLEntry&& from) noexcept
    : CMsgLaneSelectionSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgLaneSelectionSteamMLEntry& operator=(const CMsgLaneSelectionSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLaneSelectionSteamMLEntry& operator=(CMsgLaneSelectionSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLaneSelectionSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLaneSelectionSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgLaneSelectionSteamMLEntry*>(
               &_CMsgLaneSelectionSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(CMsgLaneSelectionSteamMLEntry& a, CMsgLaneSelectionSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLaneSelectionSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLaneSelectionSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLaneSelectionSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLaneSelectionSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLaneSelectionSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLaneSelectionSteamMLEntry& from) {
    CMsgLaneSelectionSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLaneSelectionSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLaneSelectionSteamMLEntry";
  }
  protected:
  explicit CMsgLaneSelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdsFieldNumber = 1,
    kLanesFieldNumber = 2,
  };
  // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
  int hero_ids_size() const;
  private:
  int _internal_hero_ids_size() const;
  public:
  void clear_hero_ids();
  private:
  uint32_t _internal_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_hero_ids() const;
  void _internal_add_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_hero_ids();
  public:
  uint32_t hero_ids(int index) const;
  void set_hero_ids(int index, uint32_t value);
  void add_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_hero_ids();

  // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
  int lanes_size() const;
  private:
  int _internal_lanes_size() const;
  public:
  void clear_lanes();
  private:
  uint32_t _internal_lanes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_lanes() const;
  void _internal_add_lanes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_lanes();
  public:
  uint32_t lanes(int index) const;
  void set_lanes(int index, uint32_t value);
  void add_lanes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      lanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_lanes();

  // @@protoc_insertion_point(class_scope:CMsgLaneSelectionSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > lanes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgAbilitySelectionSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAbilitySelectionSteamMLEntry) */ {
 public:
  inline CMsgAbilitySelectionSteamMLEntry() : CMsgAbilitySelectionSteamMLEntry(nullptr) {}
  ~CMsgAbilitySelectionSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgAbilitySelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAbilitySelectionSteamMLEntry(const CMsgAbilitySelectionSteamMLEntry& from);
  CMsgAbilitySelectionSteamMLEntry(CMsgAbilitySelectionSteamMLEntry&& from) noexcept
    : CMsgAbilitySelectionSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgAbilitySelectionSteamMLEntry& operator=(const CMsgAbilitySelectionSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAbilitySelectionSteamMLEntry& operator=(CMsgAbilitySelectionSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAbilitySelectionSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAbilitySelectionSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgAbilitySelectionSteamMLEntry*>(
               &_CMsgAbilitySelectionSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(CMsgAbilitySelectionSteamMLEntry& a, CMsgAbilitySelectionSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAbilitySelectionSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAbilitySelectionSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAbilitySelectionSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAbilitySelectionSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAbilitySelectionSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAbilitySelectionSteamMLEntry& from) {
    CMsgAbilitySelectionSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAbilitySelectionSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAbilitySelectionSteamMLEntry";
  }
  protected:
  explicit CMsgAbilitySelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnemyHeroIdsFieldNumber = 3,
    kAbilitiesFieldNumber = 5,
    kMmrFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kLaneFieldNumber = 4,
    kSelectedAbilityFieldNumber = 6,
  };
  // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated int32 abilities = 5 [(.steamml_max_entries) = 25];
  int abilities_size() const;
  private:
  int _internal_abilities_size() const;
  public:
  void clear_abilities();
  private:
  int32_t _internal_abilities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_abilities() const;
  void _internal_add_abilities(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_abilities();
  public:
  int32_t abilities(int index) const;
  void set_abilities(int index, int32_t value);
  void add_abilities(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      abilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_abilities();

  // optional uint32 mmr = 1;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 lane = 4;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional int32 selected_ability = 6 [default = -1];
  bool has_selected_ability() const;
  private:
  bool _internal_has_selected_ability() const;
  public:
  void clear_selected_ability();
  int32_t selected_ability() const;
  void set_selected_ability(int32_t value);
  private:
  int32_t _internal_selected_ability() const;
  void _internal_set_selected_ability(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAbilitySelectionSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > abilities_;
    uint32_t mmr_;
    uint32_t hero_id_;
    uint32_t lane_;
    int32_t selected_ability_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgItemPurchasePregameSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgItemPurchasePregameSteamMLEntry) */ {
 public:
  inline CMsgItemPurchasePregameSteamMLEntry() : CMsgItemPurchasePregameSteamMLEntry(nullptr) {}
  ~CMsgItemPurchasePregameSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgItemPurchasePregameSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgItemPurchasePregameSteamMLEntry(const CMsgItemPurchasePregameSteamMLEntry& from);
  CMsgItemPurchasePregameSteamMLEntry(CMsgItemPurchasePregameSteamMLEntry&& from) noexcept
    : CMsgItemPurchasePregameSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgItemPurchasePregameSteamMLEntry& operator=(const CMsgItemPurchasePregameSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgItemPurchasePregameSteamMLEntry& operator=(CMsgItemPurchasePregameSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgItemPurchasePregameSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgItemPurchasePregameSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgItemPurchasePregameSteamMLEntry*>(
               &_CMsgItemPurchasePregameSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(CMsgItemPurchasePregameSteamMLEntry& a, CMsgItemPurchasePregameSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgItemPurchasePregameSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgItemPurchasePregameSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgItemPurchasePregameSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgItemPurchasePregameSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgItemPurchasePregameSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgItemPurchasePregameSteamMLEntry& from) {
    CMsgItemPurchasePregameSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgItemPurchasePregameSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgItemPurchasePregameSteamMLEntry";
  }
  protected:
  explicit CMsgItemPurchasePregameSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 5,
    kEnemyHeroIdsFieldNumber = 6,
    kItemsFieldNumber = 7,
    kMmrFieldNumber = 1,
    kLaneFieldNumber = 2,
    kBalanceFieldNumber = 3,
    kHeroIdFieldNumber = 4,
  };
  // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated int32 items = 7 [(.steamml_max_entries) = 9];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // optional uint32 mmr = 1;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // optional uint32 lane = 2;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional float balance = 3;
  bool has_balance() const;
  private:
  bool _internal_has_balance() const;
  public:
  void clear_balance();
  float balance() const;
  void set_balance(float value);
  private:
  float _internal_balance() const;
  void _internal_set_balance(float value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgItemPurchasePregameSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    uint32_t mmr_;
    uint32_t lane_;
    float balance_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgItemPurchaseSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgItemPurchaseSteamMLEntry) */ {
 public:
  inline CMsgItemPurchaseSteamMLEntry() : CMsgItemPurchaseSteamMLEntry(nullptr) {}
  ~CMsgItemPurchaseSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgItemPurchaseSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgItemPurchaseSteamMLEntry(const CMsgItemPurchaseSteamMLEntry& from);
  CMsgItemPurchaseSteamMLEntry(CMsgItemPurchaseSteamMLEntry&& from) noexcept
    : CMsgItemPurchaseSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgItemPurchaseSteamMLEntry& operator=(const CMsgItemPurchaseSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgItemPurchaseSteamMLEntry& operator=(CMsgItemPurchaseSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgItemPurchaseSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgItemPurchaseSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgItemPurchaseSteamMLEntry*>(
               &_CMsgItemPurchaseSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(CMsgItemPurchaseSteamMLEntry& a, CMsgItemPurchaseSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgItemPurchaseSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgItemPurchaseSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgItemPurchaseSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgItemPurchaseSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgItemPurchaseSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgItemPurchaseSteamMLEntry& from) {
    CMsgItemPurchaseSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgItemPurchaseSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgItemPurchaseSteamMLEntry";
  }
  protected:
  explicit CMsgItemPurchaseSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 4,
    kEnemyHeroIdsFieldNumber = 5,
    kItemsFieldNumber = 6,
    kItemsToBePurchasedFieldNumber = 7,
    kMmrFieldNumber = 1,
    kLaneFieldNumber = 2,
    kHeroIdFieldNumber = 3,
  };
  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // repeated int32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
  int items_to_be_purchased_size() const;
  private:
  int _internal_items_to_be_purchased_size() const;
  public:
  void clear_items_to_be_purchased();
  private:
  int32_t _internal_items_to_be_purchased(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items_to_be_purchased() const;
  void _internal_add_items_to_be_purchased(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items_to_be_purchased();
  public:
  int32_t items_to_be_purchased(int index) const;
  void set_items_to_be_purchased(int index, int32_t value);
  void add_items_to_be_purchased(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items_to_be_purchased() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items_to_be_purchased();

  // optional uint32 mmr = 1;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // optional uint32 lane = 2;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgItemPurchaseSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_to_be_purchased_;
    uint32_t mmr_;
    uint32_t lane_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgItemPurchaseSequenceSteamMLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgItemPurchaseSequenceSteamMLEntry) */ {
 public:
  inline CMsgItemPurchaseSequenceSteamMLEntry() : CMsgItemPurchaseSequenceSteamMLEntry(nullptr) {}
  ~CMsgItemPurchaseSequenceSteamMLEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgItemPurchaseSequenceSteamMLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgItemPurchaseSequenceSteamMLEntry(const CMsgItemPurchaseSequenceSteamMLEntry& from);
  CMsgItemPurchaseSequenceSteamMLEntry(CMsgItemPurchaseSequenceSteamMLEntry&& from) noexcept
    : CMsgItemPurchaseSequenceSteamMLEntry() {
    *this = ::std::move(from);
  }

  inline CMsgItemPurchaseSequenceSteamMLEntry& operator=(const CMsgItemPurchaseSequenceSteamMLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgItemPurchaseSequenceSteamMLEntry& operator=(CMsgItemPurchaseSequenceSteamMLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgItemPurchaseSequenceSteamMLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgItemPurchaseSequenceSteamMLEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgItemPurchaseSequenceSteamMLEntry*>(
               &_CMsgItemPurchaseSequenceSteamMLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(CMsgItemPurchaseSequenceSteamMLEntry& a, CMsgItemPurchaseSequenceSteamMLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgItemPurchaseSequenceSteamMLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgItemPurchaseSequenceSteamMLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgItemPurchaseSequenceSteamMLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgItemPurchaseSequenceSteamMLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgItemPurchaseSequenceSteamMLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgItemPurchaseSequenceSteamMLEntry& from) {
    CMsgItemPurchaseSequenceSteamMLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgItemPurchaseSequenceSteamMLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgItemPurchaseSequenceSteamMLEntry";
  }
  protected:
  explicit CMsgItemPurchaseSequenceSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 4,
    kEnemyHeroIdsFieldNumber = 5,
    kItemsFieldNumber = 6,
    kMmrFieldNumber = 1,
    kLaneFieldNumber = 2,
    kHeroIdFieldNumber = 3,
    kItemToBePurchasedFieldNumber = 7,
  };
  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  private:
  int32_t _internal_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_items() const;
  void _internal_add_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_items();
  public:
  int32_t items(int index) const;
  void set_items(int index, int32_t value);
  void add_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_items();

  // optional uint32 mmr = 1;
  bool has_mmr() const;
  private:
  bool _internal_has_mmr() const;
  public:
  void clear_mmr();
  uint32_t mmr() const;
  void set_mmr(uint32_t value);
  private:
  uint32_t _internal_mmr() const;
  void _internal_set_mmr(uint32_t value);
  public:

  // optional uint32 lane = 2;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional int32 item_to_be_purchased = 7 [default = -1];
  bool has_item_to_be_purchased() const;
  private:
  bool _internal_has_item_to_be_purchased() const;
  public:
  void clear_item_to_be_purchased();
  int32_t item_to_be_purchased() const;
  void set_item_to_be_purchased(int32_t value);
  private:
  int32_t _internal_item_to_be_purchased() const;
  void _internal_set_item_to_be_purchased(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgItemPurchaseSequenceSteamMLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > items_;
    uint32_t mmr_;
    uint32_t lane_;
    uint32_t hero_id_;
    int32_t item_to_be_purchased_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCavernCrawlIsHeroActive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCavernCrawlIsHeroActive) */ {
 public:
  inline CMsgServerToGCCavernCrawlIsHeroActive() : CMsgServerToGCCavernCrawlIsHeroActive(nullptr) {}
  ~CMsgServerToGCCavernCrawlIsHeroActive() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCavernCrawlIsHeroActive(const CMsgServerToGCCavernCrawlIsHeroActive& from);
  CMsgServerToGCCavernCrawlIsHeroActive(CMsgServerToGCCavernCrawlIsHeroActive&& from) noexcept
    : CMsgServerToGCCavernCrawlIsHeroActive() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCavernCrawlIsHeroActive& operator=(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCavernCrawlIsHeroActive& operator=(CMsgServerToGCCavernCrawlIsHeroActive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCavernCrawlIsHeroActive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCavernCrawlIsHeroActive* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCavernCrawlIsHeroActive*>(
               &_CMsgServerToGCCavernCrawlIsHeroActive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(CMsgServerToGCCavernCrawlIsHeroActive& a, CMsgServerToGCCavernCrawlIsHeroActive& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCavernCrawlIsHeroActive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCavernCrawlIsHeroActive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCavernCrawlIsHeroActive& from) {
    CMsgServerToGCCavernCrawlIsHeroActive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCavernCrawlIsHeroActive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCavernCrawlIsHeroActive";
  }
  protected:
  explicit CMsgServerToGCCavernCrawlIsHeroActive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kHeroIdFieldNumber = 4,
    kTurboModeFieldNumber = 5,
    kPreferredMapVariantFieldNumber = 3,
  };
  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional bool turbo_mode = 5;
  bool has_turbo_mode() const;
  private:
  bool _internal_has_turbo_mode() const;
  public:
  void clear_turbo_mode();
  bool turbo_mode() const;
  void set_turbo_mode(bool value);
  private:
  bool _internal_turbo_mode() const;
  void _internal_set_turbo_mode(bool value);
  public:

  // optional uint32 preferred_map_variant = 3 [default = 255];
  bool has_preferred_map_variant() const;
  private:
  bool _internal_has_preferred_map_variant() const;
  public:
  void clear_preferred_map_variant();
  uint32_t preferred_map_variant() const;
  void set_preferred_map_variant(uint32_t value);
  private:
  uint32_t _internal_preferred_map_variant() const;
  void _internal_set_preferred_map_variant(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCavernCrawlIsHeroActive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_id_;
    uint32_t account_id_;
    uint32_t hero_id_;
    bool turbo_mode_;
    uint32_t preferred_map_variant_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCPlayerChallengeHistory_PlayerChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge) */ {
 public:
  inline CMsgServerToGCPlayerChallengeHistory_PlayerChallenge() : CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(nullptr) {}
  ~CMsgServerToGCPlayerChallengeHistory_PlayerChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from);
  CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge&& from) noexcept
    : CMsgServerToGCPlayerChallengeHistory_PlayerChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& operator=(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& operator=(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge*>(
               &_CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& a, CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from) {
    CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCPlayerChallengeHistory.PlayerChallenge";
  }
  protected:
  explicit CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kChallengeTypeFieldNumber = 2,
    kChallengeId1FieldNumber = 3,
    kChallengeId2FieldNumber = 4,
    kProgressValueStartFieldNumber = 5,
    kProgressValueEndFieldNumber = 6,
    kAuditDataFieldNumber = 8,
    kTeamWonFieldNumber = 7,
    kHeroIdFieldNumber = 9,
    kRankCompletedFieldNumber = 10,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
  bool has_challenge_type() const;
  private:
  bool _internal_has_challenge_type() const;
  public:
  void clear_challenge_type();
  ::EPlayerChallengeHistoryType challenge_type() const;
  void set_challenge_type(::EPlayerChallengeHistoryType value);
  private:
  ::EPlayerChallengeHistoryType _internal_challenge_type() const;
  void _internal_set_challenge_type(::EPlayerChallengeHistoryType value);
  public:

  // optional uint32 challenge_id1 = 3;
  bool has_challenge_id1() const;
  private:
  bool _internal_has_challenge_id1() const;
  public:
  void clear_challenge_id1();
  uint32_t challenge_id1() const;
  void set_challenge_id1(uint32_t value);
  private:
  uint32_t _internal_challenge_id1() const;
  void _internal_set_challenge_id1(uint32_t value);
  public:

  // optional uint32 challenge_id2 = 4;
  bool has_challenge_id2() const;
  private:
  bool _internal_has_challenge_id2() const;
  public:
  void clear_challenge_id2();
  uint32_t challenge_id2() const;
  void set_challenge_id2(uint32_t value);
  private:
  uint32_t _internal_challenge_id2() const;
  void _internal_set_challenge_id2(uint32_t value);
  public:

  // optional uint32 progress_value_start = 5;
  bool has_progress_value_start() const;
  private:
  bool _internal_has_progress_value_start() const;
  public:
  void clear_progress_value_start();
  uint32_t progress_value_start() const;
  void set_progress_value_start(uint32_t value);
  private:
  uint32_t _internal_progress_value_start() const;
  void _internal_set_progress_value_start(uint32_t value);
  public:

  // optional uint32 progress_value_end = 6;
  bool has_progress_value_end() const;
  private:
  bool _internal_has_progress_value_end() const;
  public:
  void clear_progress_value_end();
  uint32_t progress_value_end() const;
  void set_progress_value_end(uint32_t value);
  private:
  uint32_t _internal_progress_value_end() const;
  void _internal_set_progress_value_end(uint32_t value);
  public:

  // optional uint64 audit_data = 8;
  bool has_audit_data() const;
  private:
  bool _internal_has_audit_data() const;
  public:
  void clear_audit_data();
  uint64_t audit_data() const;
  void set_audit_data(uint64_t value);
  private:
  uint64_t _internal_audit_data() const;
  void _internal_set_audit_data(uint64_t value);
  public:

  // optional bool team_won = 7;
  bool has_team_won() const;
  private:
  bool _internal_has_team_won() const;
  public:
  void clear_team_won();
  bool team_won() const;
  void set_team_won(bool value);
  private:
  bool _internal_team_won() const;
  void _internal_set_team_won(bool value);
  public:

  // optional uint32 hero_id = 9;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 rank_completed = 10;
  bool has_rank_completed() const;
  private:
  bool _internal_has_rank_completed() const;
  public:
  void clear_rank_completed();
  uint32_t rank_completed() const;
  void set_rank_completed(uint32_t value);
  private:
  uint32_t _internal_rank_completed() const;
  void _internal_set_rank_completed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    int challenge_type_;
    uint32_t challenge_id1_;
    uint32_t challenge_id2_;
    uint32_t progress_value_start_;
    uint32_t progress_value_end_;
    uint64_t audit_data_;
    bool team_won_;
    uint32_t hero_id_;
    uint32_t rank_completed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCPlayerChallengeHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCPlayerChallengeHistory) */ {
 public:
  inline CMsgServerToGCPlayerChallengeHistory() : CMsgServerToGCPlayerChallengeHistory(nullptr) {}
  ~CMsgServerToGCPlayerChallengeHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCPlayerChallengeHistory(const CMsgServerToGCPlayerChallengeHistory& from);
  CMsgServerToGCPlayerChallengeHistory(CMsgServerToGCPlayerChallengeHistory&& from) noexcept
    : CMsgServerToGCPlayerChallengeHistory() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCPlayerChallengeHistory& operator=(const CMsgServerToGCPlayerChallengeHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCPlayerChallengeHistory& operator=(CMsgServerToGCPlayerChallengeHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCPlayerChallengeHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCPlayerChallengeHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCPlayerChallengeHistory*>(
               &_CMsgServerToGCPlayerChallengeHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(CMsgServerToGCPlayerChallengeHistory& a, CMsgServerToGCPlayerChallengeHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCPlayerChallengeHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCPlayerChallengeHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCPlayerChallengeHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCPlayerChallengeHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCPlayerChallengeHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCPlayerChallengeHistory& from) {
    CMsgServerToGCPlayerChallengeHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCPlayerChallengeHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCPlayerChallengeHistory";
  }
  protected:
  explicit CMsgServerToGCPlayerChallengeHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCPlayerChallengeHistory_PlayerChallenge PlayerChallenge;

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeRecordsFieldNumber = 3,
    kMatchIdFieldNumber = 1,
    kAverageRankFieldNumber = 2,
  };
  // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
  int challenge_records_size() const;
  private:
  int _internal_challenge_records_size() const;
  public:
  void clear_challenge_records();
  ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* mutable_challenge_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >*
      mutable_challenge_records();
  private:
  const ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& _internal_challenge_records(int index) const;
  ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* _internal_add_challenge_records();
  public:
  const ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& challenge_records(int index) const;
  ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* add_challenge_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >&
      challenge_records() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 average_rank = 2;
  bool has_average_rank() const;
  private:
  bool _internal_has_average_rank() const;
  public:
  void clear_average_rank();
  uint32_t average_rank() const;
  void set_average_rank(uint32_t value);
  private:
  uint32_t _internal_average_rank() const;
  void _internal_set_average_rank(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCPlayerChallengeHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge > challenge_records_;
    uint64_t match_id_;
    uint32_t average_rank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults) */ {
 public:
  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults() : CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(nullptr) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from);
  CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults&& from) noexcept
    : CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& operator=(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& operator=(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults*>(
               &_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& a, CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from) {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults";
  }
  protected:
  explicit CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathIdCompletedFieldNumber = 1,
    kRoomIdClaimedFieldNumber = 2,
  };
  // optional uint32 path_id_completed = 1 [default = 255];
  bool has_path_id_completed() const;
  private:
  bool _internal_has_path_id_completed() const;
  public:
  void clear_path_id_completed();
  uint32_t path_id_completed() const;
  void set_path_id_completed(uint32_t value);
  private:
  uint32_t _internal_path_id_completed() const;
  void _internal_set_path_id_completed(uint32_t value);
  public:

  // optional uint32 room_id_claimed = 2 [default = 255];
  bool has_room_id_claimed() const;
  private:
  bool _internal_has_room_id_claimed() const;
  public:
  void clear_room_id_claimed();
  uint32_t room_id_claimed() const;
  void set_room_id_claimed(uint32_t value);
  private:
  uint32_t _internal_room_id_claimed() const;
  void _internal_set_room_id_claimed(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t path_id_completed_;
    uint32_t room_id_claimed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCCavernCrawlIsHeroActiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCCavernCrawlIsHeroActiveResponse) */ {
 public:
  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse() : CMsgServerToGCCavernCrawlIsHeroActiveResponse(nullptr) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCCavernCrawlIsHeroActiveResponse(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from);
  CMsgServerToGCCavernCrawlIsHeroActiveResponse(CMsgServerToGCCavernCrawlIsHeroActiveResponse&& from) noexcept
    : CMsgServerToGCCavernCrawlIsHeroActiveResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse& operator=(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCCavernCrawlIsHeroActiveResponse& operator=(CMsgServerToGCCavernCrawlIsHeroActiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCCavernCrawlIsHeroActiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCCavernCrawlIsHeroActiveResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCCavernCrawlIsHeroActiveResponse*>(
               &_CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(CMsgServerToGCCavernCrawlIsHeroActiveResponse& a, CMsgServerToGCCavernCrawlIsHeroActiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCCavernCrawlIsHeroActiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCCavernCrawlIsHeroActiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCCavernCrawlIsHeroActiveResponse";
  }
  protected:
  explicit CMsgServerToGCCavernCrawlIsHeroActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults MapResults;

  // accessors -------------------------------------------------------

  enum : int {
    kMapResultsFieldNumber = 3,
    kResultFieldNumber = 1,
    kPotentialWinningsFieldNumber = 2,
    kPotentialPlusShardWinningsFieldNumber = 4,
    kMapVariantFieldNumber = 5,
  };
  // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
  int map_results_size() const;
  private:
  int _internal_map_results_size() const;
  public:
  void clear_map_results();
  ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* mutable_map_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >*
      mutable_map_results();
  private:
  const ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& _internal_map_results(int index) const;
  ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* _internal_add_map_results();
  public:
  const ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& map_results(int index) const;
  ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* add_map_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >&
      map_results() const;

  // optional bool result = 1;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // optional uint32 potential_winnings = 2;
  bool has_potential_winnings() const;
  private:
  bool _internal_has_potential_winnings() const;
  public:
  void clear_potential_winnings();
  uint32_t potential_winnings() const;
  void set_potential_winnings(uint32_t value);
  private:
  uint32_t _internal_potential_winnings() const;
  void _internal_set_potential_winnings(uint32_t value);
  public:

  // optional uint32 potential_plus_shard_winnings = 4;
  bool has_potential_plus_shard_winnings() const;
  private:
  bool _internal_has_potential_plus_shard_winnings() const;
  public:
  void clear_potential_plus_shard_winnings();
  uint32_t potential_plus_shard_winnings() const;
  void set_potential_plus_shard_winnings(uint32_t value);
  private:
  uint32_t _internal_potential_plus_shard_winnings() const;
  void _internal_set_potential_plus_shard_winnings(uint32_t value);
  public:

  // optional uint32 map_variant = 5 [default = 255];
  bool has_map_variant() const;
  private:
  bool _internal_has_map_variant() const;
  public:
  void clear_map_variant();
  uint32_t map_variant() const;
  void set_map_variant(uint32_t value);
  private:
  uint32_t _internal_map_variant() const;
  void _internal_set_map_variant(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults > map_results_;
    bool result_;
    uint32_t potential_winnings_;
    uint32_t potential_plus_shard_winnings_;
    uint32_t map_variant_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCtoServerTensorflowInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCtoServerTensorflowInstance) */ {
 public:
  inline CMsgGCtoServerTensorflowInstance() : CMsgGCtoServerTensorflowInstance(nullptr) {}
  ~CMsgGCtoServerTensorflowInstance() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCtoServerTensorflowInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCtoServerTensorflowInstance(const CMsgGCtoServerTensorflowInstance& from);
  CMsgGCtoServerTensorflowInstance(CMsgGCtoServerTensorflowInstance&& from) noexcept
    : CMsgGCtoServerTensorflowInstance() {
    *this = ::std::move(from);
  }

  inline CMsgGCtoServerTensorflowInstance& operator=(const CMsgGCtoServerTensorflowInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCtoServerTensorflowInstance& operator=(CMsgGCtoServerTensorflowInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCtoServerTensorflowInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCtoServerTensorflowInstance* internal_default_instance() {
    return reinterpret_cast<const CMsgGCtoServerTensorflowInstance*>(
               &_CMsgGCtoServerTensorflowInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(CMsgGCtoServerTensorflowInstance& a, CMsgGCtoServerTensorflowInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCtoServerTensorflowInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCtoServerTensorflowInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCtoServerTensorflowInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCtoServerTensorflowInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCtoServerTensorflowInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCtoServerTensorflowInstance& from) {
    CMsgGCtoServerTensorflowInstance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCtoServerTensorflowInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCtoServerTensorflowInstance";
  }
  protected:
  explicit CMsgGCtoServerTensorflowInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInstanceFieldNumber = 1,
  };
  // optional uint32 server_instance = 1;
  bool has_server_instance() const;
  private:
  bool _internal_has_server_instance() const;
  public:
  void clear_server_instance();
  uint32_t server_instance() const;
  void set_server_instance(uint32_t value);
  private:
  uint32_t _internal_server_instance() const;
  void _internal_set_server_instance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCtoServerTensorflowInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t server_instance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDetailedGameStats_PlayerStatEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDetailedGameStats.PlayerStatEntry) */ {
 public:
  inline CMsgDetailedGameStats_PlayerStatEntry() : CMsgDetailedGameStats_PlayerStatEntry(nullptr) {}
  ~CMsgDetailedGameStats_PlayerStatEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerStatEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDetailedGameStats_PlayerStatEntry(const CMsgDetailedGameStats_PlayerStatEntry& from);
  CMsgDetailedGameStats_PlayerStatEntry(CMsgDetailedGameStats_PlayerStatEntry&& from) noexcept
    : CMsgDetailedGameStats_PlayerStatEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDetailedGameStats_PlayerStatEntry& operator=(const CMsgDetailedGameStats_PlayerStatEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDetailedGameStats_PlayerStatEntry& operator=(CMsgDetailedGameStats_PlayerStatEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDetailedGameStats_PlayerStatEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDetailedGameStats_PlayerStatEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDetailedGameStats_PlayerStatEntry*>(
               &_CMsgDetailedGameStats_PlayerStatEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(CMsgDetailedGameStats_PlayerStatEntry& a, CMsgDetailedGameStats_PlayerStatEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDetailedGameStats_PlayerStatEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDetailedGameStats_PlayerStatEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDetailedGameStats_PlayerStatEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDetailedGameStats_PlayerStatEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDetailedGameStats_PlayerStatEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDetailedGameStats_PlayerStatEntry& from) {
    CMsgDetailedGameStats_PlayerStatEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDetailedGameStats_PlayerStatEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDetailedGameStats.PlayerStatEntry";
  }
  protected:
  explicit CMsgDetailedGameStats_PlayerStatEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalEarnedGoldFieldNumber = 1,
    kTotalNetworthFieldNumber = 2,
    kLevelFieldNumber = 3,
    kTotalDpsFieldNumber = 4,
    kAverageDpsFieldNumber = 5,
    kAbilityDamageOutputFieldNumber = 6,
    kBaseHealthFieldNumber = 7,
    kTotalHealthFieldNumber = 8,
    kTotalManaFieldNumber = 9,
    kBasePhysicalDamageReductionPctFieldNumber = 10,
    kTotalPhysicalDamageReductionPctFieldNumber = 11,
    kBaseAbilityDamageReductionPctFieldNumber = 12,
    kTotalAbilityDamageReductionPctFieldNumber = 13,
    kAbilityDamageBlockFieldNumber = 14,
    kPhysicalDamageBlockFieldNumber = 15,
    kManaRegenFieldNumber = 16,
    kHealthRegenFieldNumber = 17,
    kPhysicalMagicDmgPctFieldNumber = 18,
    kKillsFieldNumber = 19,
    kDeathsFieldNumber = 20,
    kAssistsFieldNumber = 21,
    kGoldFromKillsFieldNumber = 22,
    kGoldFromCreepsFieldNumber = 23,
    kGoldSharedFieldNumber = 24,
    kXpFromKillsFieldNumber = 25,
    kXpFromCreepsFieldNumber = 26,
    kTotalXpFieldNumber = 27,
    kAbilityCastsFieldNumber = 28,
    kItemCastsFieldNumber = 29,
    kTotalTimeStunnedFieldNumber = 30,
    kItemCountFieldNumber = 31,
  };
  // optional uint32 total_earned_gold = 1;
  bool has_total_earned_gold() const;
  private:
  bool _internal_has_total_earned_gold() const;
  public:
  void clear_total_earned_gold();
  uint32_t total_earned_gold() const;
  void set_total_earned_gold(uint32_t value);
  private:
  uint32_t _internal_total_earned_gold() const;
  void _internal_set_total_earned_gold(uint32_t value);
  public:

  // optional uint32 total_networth = 2;
  bool has_total_networth() const;
  private:
  bool _internal_has_total_networth() const;
  public:
  void clear_total_networth();
  uint32_t total_networth() const;
  void set_total_networth(uint32_t value);
  private:
  uint32_t _internal_total_networth() const;
  void _internal_set_total_networth(uint32_t value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 total_dps = 4;
  bool has_total_dps() const;
  private:
  bool _internal_has_total_dps() const;
  public:
  void clear_total_dps();
  uint32_t total_dps() const;
  void set_total_dps(uint32_t value);
  private:
  uint32_t _internal_total_dps() const;
  void _internal_set_total_dps(uint32_t value);
  public:

  // optional uint32 average_dps = 5;
  bool has_average_dps() const;
  private:
  bool _internal_has_average_dps() const;
  public:
  void clear_average_dps();
  uint32_t average_dps() const;
  void set_average_dps(uint32_t value);
  private:
  uint32_t _internal_average_dps() const;
  void _internal_set_average_dps(uint32_t value);
  public:

  // optional uint32 ability_damage_output = 6;
  bool has_ability_damage_output() const;
  private:
  bool _internal_has_ability_damage_output() const;
  public:
  void clear_ability_damage_output();
  uint32_t ability_damage_output() const;
  void set_ability_damage_output(uint32_t value);
  private:
  uint32_t _internal_ability_damage_output() const;
  void _internal_set_ability_damage_output(uint32_t value);
  public:

  // optional uint32 base_health = 7;
  bool has_base_health() const;
  private:
  bool _internal_has_base_health() const;
  public:
  void clear_base_health();
  uint32_t base_health() const;
  void set_base_health(uint32_t value);
  private:
  uint32_t _internal_base_health() const;
  void _internal_set_base_health(uint32_t value);
  public:

  // optional uint32 total_health = 8;
  bool has_total_health() const;
  private:
  bool _internal_has_total_health() const;
  public:
  void clear_total_health();
  uint32_t total_health() const;
  void set_total_health(uint32_t value);
  private:
  uint32_t _internal_total_health() const;
  void _internal_set_total_health(uint32_t value);
  public:

  // optional uint32 total_mana = 9;
  bool has_total_mana() const;
  private:
  bool _internal_has_total_mana() const;
  public:
  void clear_total_mana();
  uint32_t total_mana() const;
  void set_total_mana(uint32_t value);
  private:
  uint32_t _internal_total_mana() const;
  void _internal_set_total_mana(uint32_t value);
  public:

  // optional float base_physical_damage_reduction_pct = 10;
  bool has_base_physical_damage_reduction_pct() const;
  private:
  bool _internal_has_base_physical_damage_reduction_pct() const;
  public:
  void clear_base_physical_damage_reduction_pct();
  float base_physical_damage_reduction_pct() const;
  void set_base_physical_damage_reduction_pct(float value);
  private:
  float _internal_base_physical_damage_reduction_pct() const;
  void _internal_set_base_physical_damage_reduction_pct(float value);
  public:

  // optional float total_physical_damage_reduction_pct = 11;
  bool has_total_physical_damage_reduction_pct() const;
  private:
  bool _internal_has_total_physical_damage_reduction_pct() const;
  public:
  void clear_total_physical_damage_reduction_pct();
  float total_physical_damage_reduction_pct() const;
  void set_total_physical_damage_reduction_pct(float value);
  private:
  float _internal_total_physical_damage_reduction_pct() const;
  void _internal_set_total_physical_damage_reduction_pct(float value);
  public:

  // optional float base_ability_damage_reduction_pct = 12;
  bool has_base_ability_damage_reduction_pct() const;
  private:
  bool _internal_has_base_ability_damage_reduction_pct() const;
  public:
  void clear_base_ability_damage_reduction_pct();
  float base_ability_damage_reduction_pct() const;
  void set_base_ability_damage_reduction_pct(float value);
  private:
  float _internal_base_ability_damage_reduction_pct() const;
  void _internal_set_base_ability_damage_reduction_pct(float value);
  public:

  // optional float total_ability_damage_reduction_pct = 13;
  bool has_total_ability_damage_reduction_pct() const;
  private:
  bool _internal_has_total_ability_damage_reduction_pct() const;
  public:
  void clear_total_ability_damage_reduction_pct();
  float total_ability_damage_reduction_pct() const;
  void set_total_ability_damage_reduction_pct(float value);
  private:
  float _internal_total_ability_damage_reduction_pct() const;
  void _internal_set_total_ability_damage_reduction_pct(float value);
  public:

  // optional float ability_damage_block = 14;
  bool has_ability_damage_block() const;
  private:
  bool _internal_has_ability_damage_block() const;
  public:
  void clear_ability_damage_block();
  float ability_damage_block() const;
  void set_ability_damage_block(float value);
  private:
  float _internal_ability_damage_block() const;
  void _internal_set_ability_damage_block(float value);
  public:

  // optional float physical_damage_block = 15;
  bool has_physical_damage_block() const;
  private:
  bool _internal_has_physical_damage_block() const;
  public:
  void clear_physical_damage_block();
  float physical_damage_block() const;
  void set_physical_damage_block(float value);
  private:
  float _internal_physical_damage_block() const;
  void _internal_set_physical_damage_block(float value);
  public:

  // optional uint32 mana_regen = 16;
  bool has_mana_regen() const;
  private:
  bool _internal_has_mana_regen() const;
  public:
  void clear_mana_regen();
  uint32_t mana_regen() const;
  void set_mana_regen(uint32_t value);
  private:
  uint32_t _internal_mana_regen() const;
  void _internal_set_mana_regen(uint32_t value);
  public:

  // optional uint32 health_regen = 17;
  bool has_health_regen() const;
  private:
  bool _internal_has_health_regen() const;
  public:
  void clear_health_regen();
  uint32_t health_regen() const;
  void set_health_regen(uint32_t value);
  private:
  uint32_t _internal_health_regen() const;
  void _internal_set_health_regen(uint32_t value);
  public:

  // optional float physical_magic_dmg_pct = 18;
  bool has_physical_magic_dmg_pct() const;
  private:
  bool _internal_has_physical_magic_dmg_pct() const;
  public:
  void clear_physical_magic_dmg_pct();
  float physical_magic_dmg_pct() const;
  void set_physical_magic_dmg_pct(float value);
  private:
  float _internal_physical_magic_dmg_pct() const;
  void _internal_set_physical_magic_dmg_pct(float value);
  public:

  // optional uint32 kills = 19;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 deaths = 20;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 assists = 21;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  uint32_t assists() const;
  void set_assists(uint32_t value);
  private:
  uint32_t _internal_assists() const;
  void _internal_set_assists(uint32_t value);
  public:

  // optional uint32 gold_from_kills = 22;
  bool has_gold_from_kills() const;
  private:
  bool _internal_has_gold_from_kills() const;
  public:
  void clear_gold_from_kills();
  uint32_t gold_from_kills() const;
  void set_gold_from_kills(uint32_t value);
  private:
  uint32_t _internal_gold_from_kills() const;
  void _internal_set_gold_from_kills(uint32_t value);
  public:

  // optional uint32 gold_from_creeps = 23;
  bool has_gold_from_creeps() const;
  private:
  bool _internal_has_gold_from_creeps() const;
  public:
  void clear_gold_from_creeps();
  uint32_t gold_from_creeps() const;
  void set_gold_from_creeps(uint32_t value);
  private:
  uint32_t _internal_gold_from_creeps() const;
  void _internal_set_gold_from_creeps(uint32_t value);
  public:

  // optional uint32 gold_shared = 24;
  bool has_gold_shared() const;
  private:
  bool _internal_has_gold_shared() const;
  public:
  void clear_gold_shared();
  uint32_t gold_shared() const;
  void set_gold_shared(uint32_t value);
  private:
  uint32_t _internal_gold_shared() const;
  void _internal_set_gold_shared(uint32_t value);
  public:

  // optional uint32 xp_from_kills = 25;
  bool has_xp_from_kills() const;
  private:
  bool _internal_has_xp_from_kills() const;
  public:
  void clear_xp_from_kills();
  uint32_t xp_from_kills() const;
  void set_xp_from_kills(uint32_t value);
  private:
  uint32_t _internal_xp_from_kills() const;
  void _internal_set_xp_from_kills(uint32_t value);
  public:

  // optional uint32 xp_from_creeps = 26;
  bool has_xp_from_creeps() const;
  private:
  bool _internal_has_xp_from_creeps() const;
  public:
  void clear_xp_from_creeps();
  uint32_t xp_from_creeps() const;
  void set_xp_from_creeps(uint32_t value);
  private:
  uint32_t _internal_xp_from_creeps() const;
  void _internal_set_xp_from_creeps(uint32_t value);
  public:

  // optional uint32 total_xp = 27;
  bool has_total_xp() const;
  private:
  bool _internal_has_total_xp() const;
  public:
  void clear_total_xp();
  uint32_t total_xp() const;
  void set_total_xp(uint32_t value);
  private:
  uint32_t _internal_total_xp() const;
  void _internal_set_total_xp(uint32_t value);
  public:

  // optional uint32 ability_casts = 28;
  bool has_ability_casts() const;
  private:
  bool _internal_has_ability_casts() const;
  public:
  void clear_ability_casts();
  uint32_t ability_casts() const;
  void set_ability_casts(uint32_t value);
  private:
  uint32_t _internal_ability_casts() const;
  void _internal_set_ability_casts(uint32_t value);
  public:

  // optional uint32 item_casts = 29;
  bool has_item_casts() const;
  private:
  bool _internal_has_item_casts() const;
  public:
  void clear_item_casts();
  uint32_t item_casts() const;
  void set_item_casts(uint32_t value);
  private:
  uint32_t _internal_item_casts() const;
  void _internal_set_item_casts(uint32_t value);
  public:

  // optional float total_time_stunned = 30;
  bool has_total_time_stunned() const;
  private:
  bool _internal_has_total_time_stunned() const;
  public:
  void clear_total_time_stunned();
  float total_time_stunned() const;
  void set_total_time_stunned(float value);
  private:
  float _internal_total_time_stunned() const;
  void _internal_set_total_time_stunned(float value);
  public:

  // optional uint32 item_count = 31;
  bool has_item_count() const;
  private:
  bool _internal_has_item_count() const;
  public:
  void clear_item_count();
  uint32_t item_count() const;
  void set_item_count(uint32_t value);
  private:
  uint32_t _internal_item_count() const;
  void _internal_set_item_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDetailedGameStats.PlayerStatEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t total_earned_gold_;
    uint32_t total_networth_;
    uint32_t level_;
    uint32_t total_dps_;
    uint32_t average_dps_;
    uint32_t ability_damage_output_;
    uint32_t base_health_;
    uint32_t total_health_;
    uint32_t total_mana_;
    float base_physical_damage_reduction_pct_;
    float total_physical_damage_reduction_pct_;
    float base_ability_damage_reduction_pct_;
    float total_ability_damage_reduction_pct_;
    float ability_damage_block_;
    float physical_damage_block_;
    uint32_t mana_regen_;
    uint32_t health_regen_;
    float physical_magic_dmg_pct_;
    uint32_t kills_;
    uint32_t deaths_;
    uint32_t assists_;
    uint32_t gold_from_kills_;
    uint32_t gold_from_creeps_;
    uint32_t gold_shared_;
    uint32_t xp_from_kills_;
    uint32_t xp_from_creeps_;
    uint32_t total_xp_;
    uint32_t ability_casts_;
    uint32_t item_casts_;
    float total_time_stunned_;
    uint32_t item_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDetailedGameStats_GameStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDetailedGameStats.GameStats) */ {
 public:
  inline CMsgDetailedGameStats_GameStats() : CMsgDetailedGameStats_GameStats(nullptr) {}
  ~CMsgDetailedGameStats_GameStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDetailedGameStats_GameStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDetailedGameStats_GameStats(const CMsgDetailedGameStats_GameStats& from);
  CMsgDetailedGameStats_GameStats(CMsgDetailedGameStats_GameStats&& from) noexcept
    : CMsgDetailedGameStats_GameStats() {
    *this = ::std::move(from);
  }

  inline CMsgDetailedGameStats_GameStats& operator=(const CMsgDetailedGameStats_GameStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDetailedGameStats_GameStats& operator=(CMsgDetailedGameStats_GameStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDetailedGameStats_GameStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDetailedGameStats_GameStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDetailedGameStats_GameStats*>(
               &_CMsgDetailedGameStats_GameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(CMsgDetailedGameStats_GameStats& a, CMsgDetailedGameStats_GameStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDetailedGameStats_GameStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDetailedGameStats_GameStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDetailedGameStats_GameStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDetailedGameStats_GameStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDetailedGameStats_GameStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDetailedGameStats_GameStats& from) {
    CMsgDetailedGameStats_GameStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDetailedGameStats_GameStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDetailedGameStats.GameStats";
  }
  protected:
  explicit CMsgDetailedGameStats_GameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTowerDeathTimeT1FieldNumber = 1,
    kTowerDeathTimeT2FieldNumber = 2,
    kTowerDeathTimeT3FieldNumber = 3,
  };
  // optional uint32 tower_death_time_t1 = 1;
  bool has_tower_death_time_t1() const;
  private:
  bool _internal_has_tower_death_time_t1() const;
  public:
  void clear_tower_death_time_t1();
  uint32_t tower_death_time_t1() const;
  void set_tower_death_time_t1(uint32_t value);
  private:
  uint32_t _internal_tower_death_time_t1() const;
  void _internal_set_tower_death_time_t1(uint32_t value);
  public:

  // optional uint32 tower_death_time_t2 = 2;
  bool has_tower_death_time_t2() const;
  private:
  bool _internal_has_tower_death_time_t2() const;
  public:
  void clear_tower_death_time_t2();
  uint32_t tower_death_time_t2() const;
  void set_tower_death_time_t2(uint32_t value);
  private:
  uint32_t _internal_tower_death_time_t2() const;
  void _internal_set_tower_death_time_t2(uint32_t value);
  public:

  // optional uint32 tower_death_time_t3 = 3;
  bool has_tower_death_time_t3() const;
  private:
  bool _internal_has_tower_death_time_t3() const;
  public:
  void clear_tower_death_time_t3();
  uint32_t tower_death_time_t3() const;
  void set_tower_death_time_t3(uint32_t value);
  private:
  uint32_t _internal_tower_death_time_t3() const;
  void _internal_set_tower_death_time_t3(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDetailedGameStats.GameStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t tower_death_time_t1_;
    uint32_t tower_death_time_t2_;
    uint32_t tower_death_time_t3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDetailedGameStats_MinuteEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDetailedGameStats.MinuteEntry) */ {
 public:
  inline CMsgDetailedGameStats_MinuteEntry() : CMsgDetailedGameStats_MinuteEntry(nullptr) {}
  ~CMsgDetailedGameStats_MinuteEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgDetailedGameStats_MinuteEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDetailedGameStats_MinuteEntry(const CMsgDetailedGameStats_MinuteEntry& from);
  CMsgDetailedGameStats_MinuteEntry(CMsgDetailedGameStats_MinuteEntry&& from) noexcept
    : CMsgDetailedGameStats_MinuteEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDetailedGameStats_MinuteEntry& operator=(const CMsgDetailedGameStats_MinuteEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDetailedGameStats_MinuteEntry& operator=(CMsgDetailedGameStats_MinuteEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDetailedGameStats_MinuteEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDetailedGameStats_MinuteEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDetailedGameStats_MinuteEntry*>(
               &_CMsgDetailedGameStats_MinuteEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(CMsgDetailedGameStats_MinuteEntry& a, CMsgDetailedGameStats_MinuteEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDetailedGameStats_MinuteEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDetailedGameStats_MinuteEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDetailedGameStats_MinuteEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDetailedGameStats_MinuteEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDetailedGameStats_MinuteEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDetailedGameStats_MinuteEntry& from) {
    CMsgDetailedGameStats_MinuteEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDetailedGameStats_MinuteEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDetailedGameStats.MinuteEntry";
  }
  protected:
  explicit CMsgDetailedGameStats_MinuteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kMinuteFieldNumber = 1,
  };
  // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMsgDetailedGameStats_PlayerStatEntry* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerStatEntry >*
      mutable_stats();
  private:
  const ::CMsgDetailedGameStats_PlayerStatEntry& _internal_stats(int index) const;
  ::CMsgDetailedGameStats_PlayerStatEntry* _internal_add_stats();
  public:
  const ::CMsgDetailedGameStats_PlayerStatEntry& stats(int index) const;
  ::CMsgDetailedGameStats_PlayerStatEntry* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerStatEntry >&
      stats() const;

  // optional uint32 minute = 1;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  uint32_t minute() const;
  void set_minute(uint32_t value);
  private:
  uint32_t _internal_minute() const;
  void _internal_set_minute(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDetailedGameStats.MinuteEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerStatEntry > stats_;
    uint32_t minute_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDetailedGameStats_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDetailedGameStats.PlayerInfo) */ {
 public:
  inline CMsgDetailedGameStats_PlayerInfo() : CMsgDetailedGameStats_PlayerInfo(nullptr) {}
  ~CMsgDetailedGameStats_PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDetailedGameStats_PlayerInfo(const CMsgDetailedGameStats_PlayerInfo& from);
  CMsgDetailedGameStats_PlayerInfo(CMsgDetailedGameStats_PlayerInfo&& from) noexcept
    : CMsgDetailedGameStats_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDetailedGameStats_PlayerInfo& operator=(const CMsgDetailedGameStats_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDetailedGameStats_PlayerInfo& operator=(CMsgDetailedGameStats_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDetailedGameStats_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDetailedGameStats_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDetailedGameStats_PlayerInfo*>(
               &_CMsgDetailedGameStats_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CMsgDetailedGameStats_PlayerInfo& a, CMsgDetailedGameStats_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDetailedGameStats_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDetailedGameStats_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDetailedGameStats_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDetailedGameStats_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDetailedGameStats_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDetailedGameStats_PlayerInfo& from) {
    CMsgDetailedGameStats_PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDetailedGameStats_PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDetailedGameStats.PlayerInfo";
  }
  protected:
  explicit CMsgDetailedGameStats_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kPlayerSlotFieldNumber = 3,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 player_slot = 3;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDetailedGameStats.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t hero_id_;
    uint32_t player_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgDetailedGameStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDetailedGameStats) */ {
 public:
  inline CMsgDetailedGameStats() : CMsgDetailedGameStats(nullptr) {}
  ~CMsgDetailedGameStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDetailedGameStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDetailedGameStats(const CMsgDetailedGameStats& from);
  CMsgDetailedGameStats(CMsgDetailedGameStats&& from) noexcept
    : CMsgDetailedGameStats() {
    *this = ::std::move(from);
  }

  inline CMsgDetailedGameStats& operator=(const CMsgDetailedGameStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDetailedGameStats& operator=(CMsgDetailedGameStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDetailedGameStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDetailedGameStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDetailedGameStats*>(
               &_CMsgDetailedGameStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CMsgDetailedGameStats& a, CMsgDetailedGameStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDetailedGameStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDetailedGameStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDetailedGameStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDetailedGameStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDetailedGameStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDetailedGameStats& from) {
    CMsgDetailedGameStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDetailedGameStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDetailedGameStats";
  }
  protected:
  explicit CMsgDetailedGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDetailedGameStats_PlayerStatEntry PlayerStatEntry;
  typedef CMsgDetailedGameStats_GameStats GameStats;
  typedef CMsgDetailedGameStats_MinuteEntry MinuteEntry;
  typedef CMsgDetailedGameStats_PlayerInfo PlayerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMinutesFieldNumber = 1,
    kPlayerInfoFieldNumber = 2,
    kGameStatsFieldNumber = 3,
  };
  // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
  int minutes_size() const;
  private:
  int _internal_minutes_size() const;
  public:
  void clear_minutes();
  ::CMsgDetailedGameStats_MinuteEntry* mutable_minutes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_MinuteEntry >*
      mutable_minutes();
  private:
  const ::CMsgDetailedGameStats_MinuteEntry& _internal_minutes(int index) const;
  ::CMsgDetailedGameStats_MinuteEntry* _internal_add_minutes();
  public:
  const ::CMsgDetailedGameStats_MinuteEntry& minutes(int index) const;
  ::CMsgDetailedGameStats_MinuteEntry* add_minutes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_MinuteEntry >&
      minutes() const;

  // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
  int player_info_size() const;
  private:
  int _internal_player_info_size() const;
  public:
  void clear_player_info();
  ::CMsgDetailedGameStats_PlayerInfo* mutable_player_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerInfo >*
      mutable_player_info();
  private:
  const ::CMsgDetailedGameStats_PlayerInfo& _internal_player_info(int index) const;
  ::CMsgDetailedGameStats_PlayerInfo* _internal_add_player_info();
  public:
  const ::CMsgDetailedGameStats_PlayerInfo& player_info(int index) const;
  ::CMsgDetailedGameStats_PlayerInfo* add_player_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerInfo >&
      player_info() const;

  // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
  bool has_game_stats() const;
  private:
  bool _internal_has_game_stats() const;
  public:
  void clear_game_stats();
  const ::CMsgDetailedGameStats_GameStats& game_stats() const;
  PROTOBUF_NODISCARD ::CMsgDetailedGameStats_GameStats* release_game_stats();
  ::CMsgDetailedGameStats_GameStats* mutable_game_stats();
  void set_allocated_game_stats(::CMsgDetailedGameStats_GameStats* game_stats);
  private:
  const ::CMsgDetailedGameStats_GameStats& _internal_game_stats() const;
  ::CMsgDetailedGameStats_GameStats* _internal_mutable_game_stats();
  public:
  void unsafe_arena_set_allocated_game_stats(
      ::CMsgDetailedGameStats_GameStats* game_stats);
  ::CMsgDetailedGameStats_GameStats* unsafe_arena_release_game_stats();

  // @@protoc_insertion_point(class_scope:CMsgDetailedGameStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_MinuteEntry > minutes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerInfo > player_info_;
    ::CMsgDetailedGameStats_GameStats* game_stats_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgNeutralItemStats_NeutralItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNeutralItemStats.NeutralItem) */ {
 public:
  inline CMsgNeutralItemStats_NeutralItem() : CMsgNeutralItemStats_NeutralItem(nullptr) {}
  ~CMsgNeutralItemStats_NeutralItem() override;
  explicit PROTOBUF_CONSTEXPR CMsgNeutralItemStats_NeutralItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNeutralItemStats_NeutralItem(const CMsgNeutralItemStats_NeutralItem& from);
  CMsgNeutralItemStats_NeutralItem(CMsgNeutralItemStats_NeutralItem&& from) noexcept
    : CMsgNeutralItemStats_NeutralItem() {
    *this = ::std::move(from);
  }

  inline CMsgNeutralItemStats_NeutralItem& operator=(const CMsgNeutralItemStats_NeutralItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNeutralItemStats_NeutralItem& operator=(CMsgNeutralItemStats_NeutralItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNeutralItemStats_NeutralItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNeutralItemStats_NeutralItem* internal_default_instance() {
    return reinterpret_cast<const CMsgNeutralItemStats_NeutralItem*>(
               &_CMsgNeutralItemStats_NeutralItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(CMsgNeutralItemStats_NeutralItem& a, CMsgNeutralItemStats_NeutralItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNeutralItemStats_NeutralItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNeutralItemStats_NeutralItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNeutralItemStats_NeutralItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNeutralItemStats_NeutralItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNeutralItemStats_NeutralItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgNeutralItemStats_NeutralItem& from) {
    CMsgNeutralItemStats_NeutralItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNeutralItemStats_NeutralItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNeutralItemStats.NeutralItem";
  }
  protected:
  explicit CMsgNeutralItemStats_NeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeDroppedFieldNumber = 2,
    kTeamFieldNumber = 3,
    kTimeLastEquippedFieldNumber = 4,
    kTimeLastUnequippedFieldNumber = 5,
    kDurationEquippedFieldNumber = 6,
    kItemIdFieldNumber = 1,
  };
  // optional uint32 time_dropped = 2;
  bool has_time_dropped() const;
  private:
  bool _internal_has_time_dropped() const;
  public:
  void clear_time_dropped();
  uint32_t time_dropped() const;
  void set_time_dropped(uint32_t value);
  private:
  uint32_t _internal_time_dropped() const;
  void _internal_set_time_dropped(uint32_t value);
  public:

  // optional uint32 team = 3;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 time_last_equipped = 4;
  bool has_time_last_equipped() const;
  private:
  bool _internal_has_time_last_equipped() const;
  public:
  void clear_time_last_equipped();
  uint32_t time_last_equipped() const;
  void set_time_last_equipped(uint32_t value);
  private:
  uint32_t _internal_time_last_equipped() const;
  void _internal_set_time_last_equipped(uint32_t value);
  public:

  // optional uint32 time_last_unequipped = 5;
  bool has_time_last_unequipped() const;
  private:
  bool _internal_has_time_last_unequipped() const;
  public:
  void clear_time_last_unequipped();
  uint32_t time_last_unequipped() const;
  void set_time_last_unequipped(uint32_t value);
  private:
  uint32_t _internal_time_last_unequipped() const;
  void _internal_set_time_last_unequipped(uint32_t value);
  public:

  // optional uint32 duration_equipped = 6;
  bool has_duration_equipped() const;
  private:
  bool _internal_has_duration_equipped() const;
  public:
  void clear_duration_equipped();
  uint32_t duration_equipped() const;
  void set_duration_equipped(uint32_t value);
  private:
  uint32_t _internal_duration_equipped() const;
  void _internal_set_duration_equipped(uint32_t value);
  public:

  // optional int32 item_id = 1 [default = -1];
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgNeutralItemStats.NeutralItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t time_dropped_;
    uint32_t team_;
    uint32_t time_last_equipped_;
    uint32_t time_last_unequipped_;
    uint32_t duration_equipped_;
    int32_t item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgNeutralItemStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgNeutralItemStats) */ {
 public:
  inline CMsgNeutralItemStats() : CMsgNeutralItemStats(nullptr) {}
  ~CMsgNeutralItemStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgNeutralItemStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgNeutralItemStats(const CMsgNeutralItemStats& from);
  CMsgNeutralItemStats(CMsgNeutralItemStats&& from) noexcept
    : CMsgNeutralItemStats() {
    *this = ::std::move(from);
  }

  inline CMsgNeutralItemStats& operator=(const CMsgNeutralItemStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgNeutralItemStats& operator=(CMsgNeutralItemStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgNeutralItemStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgNeutralItemStats* internal_default_instance() {
    return reinterpret_cast<const CMsgNeutralItemStats*>(
               &_CMsgNeutralItemStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(CMsgNeutralItemStats& a, CMsgNeutralItemStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgNeutralItemStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgNeutralItemStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgNeutralItemStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgNeutralItemStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgNeutralItemStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgNeutralItemStats& from) {
    CMsgNeutralItemStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgNeutralItemStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgNeutralItemStats";
  }
  protected:
  explicit CMsgNeutralItemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgNeutralItemStats_NeutralItem NeutralItem;

  // accessors -------------------------------------------------------

  enum : int {
    kNeutralItemsFieldNumber = 1,
  };
  // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
  int neutral_items_size() const;
  private:
  int _internal_neutral_items_size() const;
  public:
  void clear_neutral_items();
  ::CMsgNeutralItemStats_NeutralItem* mutable_neutral_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNeutralItemStats_NeutralItem >*
      mutable_neutral_items();
  private:
  const ::CMsgNeutralItemStats_NeutralItem& _internal_neutral_items(int index) const;
  ::CMsgNeutralItemStats_NeutralItem* _internal_add_neutral_items();
  public:
  const ::CMsgNeutralItemStats_NeutralItem& neutral_items(int index) const;
  ::CMsgNeutralItemStats_NeutralItem* add_neutral_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNeutralItemStats_NeutralItem >&
      neutral_items() const;

  // @@protoc_insertion_point(class_scope:CMsgNeutralItemStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNeutralItemStats_NeutralItem > neutral_items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerLobbyHeroBanRates_HeroBanEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry) */ {
 public:
  inline CMsgGCToServerLobbyHeroBanRates_HeroBanEntry() : CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(nullptr) {}
  ~CMsgGCToServerLobbyHeroBanRates_HeroBanEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from);
  CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry&& from) noexcept
    : CMsgGCToServerLobbyHeroBanRates_HeroBanEntry() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& operator=(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& operator=(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry*>(
               &_CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& a, CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from) {
    CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerLobbyHeroBanRates.HeroBanEntry";
  }
  protected:
  explicit CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kBanCountFieldNumber = 2,
    kPickCountFieldNumber = 3,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 ban_count = 2;
  bool has_ban_count() const;
  private:
  bool _internal_has_ban_count() const;
  public:
  void clear_ban_count();
  uint32_t ban_count() const;
  void set_ban_count(uint32_t value);
  private:
  uint32_t _internal_ban_count() const;
  void _internal_set_ban_count(uint32_t value);
  public:

  // optional uint32 pick_count = 3;
  bool has_pick_count() const;
  private:
  bool _internal_has_pick_count() const;
  public:
  void clear_pick_count();
  uint32_t pick_count() const;
  void set_pick_count(uint32_t value);
  private:
  uint32_t _internal_pick_count() const;
  void _internal_set_pick_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t ban_count_;
    uint32_t pick_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerLobbyHeroBanRates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerLobbyHeroBanRates) */ {
 public:
  inline CMsgGCToServerLobbyHeroBanRates() : CMsgGCToServerLobbyHeroBanRates(nullptr) {}
  ~CMsgGCToServerLobbyHeroBanRates() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerLobbyHeroBanRates(const CMsgGCToServerLobbyHeroBanRates& from);
  CMsgGCToServerLobbyHeroBanRates(CMsgGCToServerLobbyHeroBanRates&& from) noexcept
    : CMsgGCToServerLobbyHeroBanRates() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerLobbyHeroBanRates& operator=(const CMsgGCToServerLobbyHeroBanRates& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerLobbyHeroBanRates& operator=(CMsgGCToServerLobbyHeroBanRates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerLobbyHeroBanRates& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerLobbyHeroBanRates* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerLobbyHeroBanRates*>(
               &_CMsgGCToServerLobbyHeroBanRates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(CMsgGCToServerLobbyHeroBanRates& a, CMsgGCToServerLobbyHeroBanRates& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerLobbyHeroBanRates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerLobbyHeroBanRates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerLobbyHeroBanRates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerLobbyHeroBanRates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerLobbyHeroBanRates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerLobbyHeroBanRates& from) {
    CMsgGCToServerLobbyHeroBanRates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerLobbyHeroBanRates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerLobbyHeroBanRates";
  }
  protected:
  explicit CMsgGCToServerLobbyHeroBanRates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToServerLobbyHeroBanRates_HeroBanEntry HeroBanEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kBanDataFieldNumber = 1,
  };
  // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
  int ban_data_size() const;
  private:
  int _internal_ban_data_size() const;
  public:
  void clear_ban_data();
  ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* mutable_ban_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >*
      mutable_ban_data();
  private:
  const ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& _internal_ban_data(int index) const;
  ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* _internal_add_ban_data();
  public:
  const ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& ban_data(int index) const;
  ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* add_ban_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >&
      ban_data() const;

  // @@protoc_insertion_point(class_scope:CMsgGCToServerLobbyHeroBanRates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry > ban_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGuildContractProgress_CompletedGuildEventContracts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts) */ {
 public:
  inline CMsgSignOutGuildContractProgress_CompletedGuildEventContracts() : CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(nullptr) {}
  ~CMsgSignOutGuildContractProgress_CompletedGuildEventContracts() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from);
  CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts&& from) noexcept
    : CMsgSignOutGuildContractProgress_CompletedGuildEventContracts() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& operator=(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& operator=(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts*>(
               &_CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& a, CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from) {
    CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGuildContractProgress.CompletedGuildEventContracts";
  }
  protected:
  explicit CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractsFieldNumber = 3,
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
  };
  // repeated uint64 contracts = 3;
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;
  public:
  void clear_contracts();
  private:
  uint64_t _internal_contracts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_contracts() const;
  void _internal_add_contracts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_contracts();
  public:
  uint64_t contracts(int index) const;
  void set_contracts(int index, uint64_t value);
  void add_contracts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      contracts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_contracts();

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional uint32 event_id = 2;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > contracts_;
    uint32_t guild_id_;
    uint32_t event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGuildContractProgress_PlayerContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGuildContractProgress.PlayerContract) */ {
 public:
  inline CMsgSignOutGuildContractProgress_PlayerContract() : CMsgSignOutGuildContractProgress_PlayerContract(nullptr) {}
  ~CMsgSignOutGuildContractProgress_PlayerContract() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_PlayerContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGuildContractProgress_PlayerContract(const CMsgSignOutGuildContractProgress_PlayerContract& from);
  CMsgSignOutGuildContractProgress_PlayerContract(CMsgSignOutGuildContractProgress_PlayerContract&& from) noexcept
    : CMsgSignOutGuildContractProgress_PlayerContract() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGuildContractProgress_PlayerContract& operator=(const CMsgSignOutGuildContractProgress_PlayerContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGuildContractProgress_PlayerContract& operator=(CMsgSignOutGuildContractProgress_PlayerContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGuildContractProgress_PlayerContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGuildContractProgress_PlayerContract* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGuildContractProgress_PlayerContract*>(
               &_CMsgSignOutGuildContractProgress_PlayerContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(CMsgSignOutGuildContractProgress_PlayerContract& a, CMsgSignOutGuildContractProgress_PlayerContract& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGuildContractProgress_PlayerContract* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGuildContractProgress_PlayerContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGuildContractProgress_PlayerContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGuildContractProgress_PlayerContract>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGuildContractProgress_PlayerContract& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGuildContractProgress_PlayerContract& from) {
    CMsgSignOutGuildContractProgress_PlayerContract::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGuildContractProgress_PlayerContract* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGuildContractProgress.PlayerContract";
  }
  protected:
  explicit CMsgSignOutGuildContractProgress_PlayerContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedContractsFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
  int completed_contracts_size() const;
  private:
  int _internal_completed_contracts_size() const;
  public:
  void clear_completed_contracts();
  ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* mutable_completed_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >*
      mutable_completed_contracts();
  private:
  const ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& _internal_completed_contracts(int index) const;
  ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* _internal_add_completed_contracts();
  public:
  const ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& completed_contracts(int index) const;
  ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* add_completed_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >&
      completed_contracts() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutGuildContractProgress.PlayerContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts > completed_contracts_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGuildContractProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGuildContractProgress) */ {
 public:
  inline CMsgSignOutGuildContractProgress() : CMsgSignOutGuildContractProgress(nullptr) {}
  ~CMsgSignOutGuildContractProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGuildContractProgress(const CMsgSignOutGuildContractProgress& from);
  CMsgSignOutGuildContractProgress(CMsgSignOutGuildContractProgress&& from) noexcept
    : CMsgSignOutGuildContractProgress() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGuildContractProgress& operator=(const CMsgSignOutGuildContractProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGuildContractProgress& operator=(CMsgSignOutGuildContractProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGuildContractProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGuildContractProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGuildContractProgress*>(
               &_CMsgSignOutGuildContractProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(CMsgSignOutGuildContractProgress& a, CMsgSignOutGuildContractProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGuildContractProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGuildContractProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGuildContractProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGuildContractProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGuildContractProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGuildContractProgress& from) {
    CMsgSignOutGuildContractProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGuildContractProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGuildContractProgress";
  }
  protected:
  explicit CMsgSignOutGuildContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutGuildContractProgress_CompletedGuildEventContracts CompletedGuildEventContracts;
  typedef CMsgSignOutGuildContractProgress_PlayerContract PlayerContract;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerContractsFieldNumber = 1,
  };
  // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
  int player_contracts_size() const;
  private:
  int _internal_player_contracts_size() const;
  public:
  void clear_player_contracts();
  ::CMsgSignOutGuildContractProgress_PlayerContract* mutable_player_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_PlayerContract >*
      mutable_player_contracts();
  private:
  const ::CMsgSignOutGuildContractProgress_PlayerContract& _internal_player_contracts(int index) const;
  ::CMsgSignOutGuildContractProgress_PlayerContract* _internal_add_player_contracts();
  public:
  const ::CMsgSignOutGuildContractProgress_PlayerContract& player_contracts(int index) const;
  ::CMsgSignOutGuildContractProgress_PlayerContract* add_player_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_PlayerContract >&
      player_contracts() const;

  // @@protoc_insertion_point(class_scope:CMsgSignOutGuildContractProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_PlayerContract > player_contracts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGuildChallengeProgress_ChallengeProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGuildChallengeProgress.ChallengeProgress) */ {
 public:
  inline CMsgSignOutGuildChallengeProgress_ChallengeProgress() : CMsgSignOutGuildChallengeProgress_ChallengeProgress(nullptr) {}
  ~CMsgSignOutGuildChallengeProgress_ChallengeProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgress_ChallengeProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGuildChallengeProgress_ChallengeProgress(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from);
  CMsgSignOutGuildChallengeProgress_ChallengeProgress(CMsgSignOutGuildChallengeProgress_ChallengeProgress&& from) noexcept
    : CMsgSignOutGuildChallengeProgress_ChallengeProgress() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGuildChallengeProgress_ChallengeProgress& operator=(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGuildChallengeProgress_ChallengeProgress& operator=(CMsgSignOutGuildChallengeProgress_ChallengeProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGuildChallengeProgress_ChallengeProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGuildChallengeProgress_ChallengeProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGuildChallengeProgress_ChallengeProgress*>(
               &_CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(CMsgSignOutGuildChallengeProgress_ChallengeProgress& a, CMsgSignOutGuildChallengeProgress_ChallengeProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGuildChallengeProgress_ChallengeProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGuildChallengeProgress_ChallengeProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGuildChallengeProgress_ChallengeProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGuildChallengeProgress_ChallengeProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from) {
    CMsgSignOutGuildChallengeProgress_ChallengeProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGuildChallengeProgress_ChallengeProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGuildChallengeProgress.ChallengeProgress";
  }
  protected:
  explicit CMsgSignOutGuildChallengeProgress_ChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeInstanceTimestampFieldNumber = 4,
    kChallengePeriodSerialFieldNumber = 5,
    kProgressFieldNumber = 6,
    kChallengeParameterFieldNumber = 7,
  };
  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional uint32 event_id = 2;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  uint32_t challenge_instance_id() const;
  void set_challenge_instance_id(uint32_t value);
  private:
  uint32_t _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(uint32_t value);
  public:

  // optional uint32 challenge_instance_timestamp = 4;
  bool has_challenge_instance_timestamp() const;
  private:
  bool _internal_has_challenge_instance_timestamp() const;
  public:
  void clear_challenge_instance_timestamp();
  uint32_t challenge_instance_timestamp() const;
  void set_challenge_instance_timestamp(uint32_t value);
  private:
  uint32_t _internal_challenge_instance_timestamp() const;
  void _internal_set_challenge_instance_timestamp(uint32_t value);
  public:

  // optional uint32 challenge_period_serial = 5;
  bool has_challenge_period_serial() const;
  private:
  bool _internal_has_challenge_period_serial() const;
  public:
  void clear_challenge_period_serial();
  uint32_t challenge_period_serial() const;
  void set_challenge_period_serial(uint32_t value);
  private:
  uint32_t _internal_challenge_period_serial() const;
  void _internal_set_challenge_period_serial(uint32_t value);
  public:

  // optional uint32 progress = 6;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // optional uint32 challenge_parameter = 7;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  uint32_t challenge_parameter() const;
  void set_challenge_parameter(uint32_t value);
  private:
  uint32_t _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t guild_id_;
    uint32_t event_id_;
    uint32_t challenge_instance_id_;
    uint32_t challenge_instance_timestamp_;
    uint32_t challenge_period_serial_;
    uint32_t progress_;
    uint32_t challenge_parameter_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutGuildChallengeProgress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutGuildChallengeProgress) */ {
 public:
  inline CMsgSignOutGuildChallengeProgress() : CMsgSignOutGuildChallengeProgress(nullptr) {}
  ~CMsgSignOutGuildChallengeProgress() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutGuildChallengeProgress(const CMsgSignOutGuildChallengeProgress& from);
  CMsgSignOutGuildChallengeProgress(CMsgSignOutGuildChallengeProgress&& from) noexcept
    : CMsgSignOutGuildChallengeProgress() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutGuildChallengeProgress& operator=(const CMsgSignOutGuildChallengeProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutGuildChallengeProgress& operator=(CMsgSignOutGuildChallengeProgress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutGuildChallengeProgress& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutGuildChallengeProgress* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutGuildChallengeProgress*>(
               &_CMsgSignOutGuildChallengeProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(CMsgSignOutGuildChallengeProgress& a, CMsgSignOutGuildChallengeProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutGuildChallengeProgress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutGuildChallengeProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutGuildChallengeProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutGuildChallengeProgress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutGuildChallengeProgress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutGuildChallengeProgress& from) {
    CMsgSignOutGuildChallengeProgress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutGuildChallengeProgress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutGuildChallengeProgress";
  }
  protected:
  explicit CMsgSignOutGuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutGuildChallengeProgress_ChallengeProgress ChallengeProgress;

  // accessors -------------------------------------------------------

  enum : int {
    kGuildChallengesProgressesFieldNumber = 1,
  };
  // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
  int guild_challenges_progresses_size() const;
  private:
  int _internal_guild_challenges_progresses_size() const;
  public:
  void clear_guild_challenges_progresses();
  ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* mutable_guild_challenges_progresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >*
      mutable_guild_challenges_progresses();
  private:
  const ::CMsgSignOutGuildChallengeProgress_ChallengeProgress& _internal_guild_challenges_progresses(int index) const;
  ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* _internal_add_guild_challenges_progresses();
  public:
  const ::CMsgSignOutGuildChallengeProgress_ChallengeProgress& guild_challenges_progresses(int index) const;
  ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* add_guild_challenges_progresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >&
      guild_challenges_progresses() const;

  // @@protoc_insertion_point(class_scope:CMsgSignOutGuildChallengeProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress > guild_challenges_progresses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutMVPStats_Player_KillEaterEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutMVPStats.Player.KillEaterEvent) */ {
 public:
  inline CMsgSignOutMVPStats_Player_KillEaterEvent() : CMsgSignOutMVPStats_Player_KillEaterEvent(nullptr) {}
  ~CMsgSignOutMVPStats_Player_KillEaterEvent() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_Player_KillEaterEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutMVPStats_Player_KillEaterEvent(const CMsgSignOutMVPStats_Player_KillEaterEvent& from);
  CMsgSignOutMVPStats_Player_KillEaterEvent(CMsgSignOutMVPStats_Player_KillEaterEvent&& from) noexcept
    : CMsgSignOutMVPStats_Player_KillEaterEvent() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutMVPStats_Player_KillEaterEvent& operator=(const CMsgSignOutMVPStats_Player_KillEaterEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutMVPStats_Player_KillEaterEvent& operator=(CMsgSignOutMVPStats_Player_KillEaterEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutMVPStats_Player_KillEaterEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutMVPStats_Player_KillEaterEvent* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutMVPStats_Player_KillEaterEvent*>(
               &_CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(CMsgSignOutMVPStats_Player_KillEaterEvent& a, CMsgSignOutMVPStats_Player_KillEaterEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutMVPStats_Player_KillEaterEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutMVPStats_Player_KillEaterEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutMVPStats_Player_KillEaterEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutMVPStats_Player_KillEaterEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutMVPStats_Player_KillEaterEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutMVPStats_Player_KillEaterEvent& from) {
    CMsgSignOutMVPStats_Player_KillEaterEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutMVPStats_Player_KillEaterEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutMVPStats.Player.KillEaterEvent";
  }
  protected:
  explicit CMsgSignOutMVPStats_Player_KillEaterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // required uint32 event_type = 1;
  bool has_event_type() const;
  private:
  bool _internal_has_event_type() const;
  public:
  void clear_event_type();
  uint32_t event_type() const;
  void set_event_type(uint32_t value);
  private:
  uint32_t _internal_event_type() const;
  void _internal_set_event_type(uint32_t value);
  public:

  // required uint32 amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint32_t amount() const;
  void set_amount(uint32_t value);
  private:
  uint32_t _internal_amount() const;
  void _internal_set_amount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutMVPStats.Player.KillEaterEvent)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_type_;
    uint32_t amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutMVPStats_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutMVPStats.Player) */ {
 public:
  inline CMsgSignOutMVPStats_Player() : CMsgSignOutMVPStats_Player(nullptr) {}
  ~CMsgSignOutMVPStats_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutMVPStats_Player(const CMsgSignOutMVPStats_Player& from);
  CMsgSignOutMVPStats_Player(CMsgSignOutMVPStats_Player&& from) noexcept
    : CMsgSignOutMVPStats_Player() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutMVPStats_Player& operator=(const CMsgSignOutMVPStats_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutMVPStats_Player& operator=(CMsgSignOutMVPStats_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutMVPStats_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutMVPStats_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutMVPStats_Player*>(
               &_CMsgSignOutMVPStats_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(CMsgSignOutMVPStats_Player& a, CMsgSignOutMVPStats_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutMVPStats_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutMVPStats_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutMVPStats_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutMVPStats_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutMVPStats_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutMVPStats_Player& from) {
    CMsgSignOutMVPStats_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutMVPStats_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutMVPStats.Player";
  }
  protected:
  explicit CMsgSignOutMVPStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutMVPStats_Player_KillEaterEvent KillEaterEvent;

  // accessors -------------------------------------------------------

  enum : int {
    kKillEaterEventsFieldNumber = 34,
    kTeamIdFieldNumber = 1,
    kTeamNetworthRankFieldNumber = 2,
    kAccountIdFieldNumber = 3,
    kHeroIdFieldNumber = 4,
    kRoleFieldNumber = 5,
    kKillsFieldNumber = 6,
    kDeathsFieldNumber = 7,
    kAssistsFieldNumber = 8,
    kXpFieldNumber = 9,
    kNetWorthFieldNumber = 10,
    kSupportGoldSpentFieldNumber = 12,
    kWardsPlacedFieldNumber = 13,
    kWardsSpottedForDewardingFieldNumber = 14,
    kCampsStackedFieldNumber = 15,
    kLastHitsFieldNumber = 16,
    kDeniesFieldNumber = 17,
    kBuildingDamageFieldNumber = 19,
    kOtherDamageFieldNumber = 20,
    kTripleKillsFieldNumber = 26,
    kRampagesFieldNumber = 28,
    kFirstBloodFieldNumber = 31,
    kPlayerSlotFieldNumber = 32,
    kRankFieldNumber = 33,
    kHighestKillstreakFieldNumber = 35,
  };
  // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
  int kill_eater_events_size() const;
  private:
  int _internal_kill_eater_events_size() const;
  public:
  void clear_kill_eater_events();
  ::CMsgSignOutMVPStats_Player_KillEaterEvent* mutable_kill_eater_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player_KillEaterEvent >*
      mutable_kill_eater_events();
  private:
  const ::CMsgSignOutMVPStats_Player_KillEaterEvent& _internal_kill_eater_events(int index) const;
  ::CMsgSignOutMVPStats_Player_KillEaterEvent* _internal_add_kill_eater_events();
  public:
  const ::CMsgSignOutMVPStats_Player_KillEaterEvent& kill_eater_events(int index) const;
  ::CMsgSignOutMVPStats_Player_KillEaterEvent* add_kill_eater_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player_KillEaterEvent >&
      kill_eater_events() const;

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 team_networth_rank = 2;
  bool has_team_networth_rank() const;
  private:
  bool _internal_has_team_networth_rank() const;
  public:
  void clear_team_networth_rank();
  uint32_t team_networth_rank() const;
  void set_team_networth_rank(uint32_t value);
  private:
  uint32_t _internal_team_networth_rank() const;
  void _internal_set_team_networth_rank(uint32_t value);
  public:

  // optional uint32 account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 role = 5;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  uint32_t role() const;
  void set_role(uint32_t value);
  private:
  uint32_t _internal_role() const;
  void _internal_set_role(uint32_t value);
  public:

  // optional int32 kills = 6;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  int32_t kills() const;
  void set_kills(int32_t value);
  private:
  int32_t _internal_kills() const;
  void _internal_set_kills(int32_t value);
  public:

  // optional int32 deaths = 7;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  int32_t deaths() const;
  void set_deaths(int32_t value);
  private:
  int32_t _internal_deaths() const;
  void _internal_set_deaths(int32_t value);
  public:

  // optional int32 assists = 8;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  int32_t assists() const;
  void set_assists(int32_t value);
  private:
  int32_t _internal_assists() const;
  void _internal_set_assists(int32_t value);
  public:

  // optional int32 xp = 9;
  bool has_xp() const;
  private:
  bool _internal_has_xp() const;
  public:
  void clear_xp();
  int32_t xp() const;
  void set_xp(int32_t value);
  private:
  int32_t _internal_xp() const;
  void _internal_set_xp(int32_t value);
  public:

  // optional int32 net_worth = 10;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  int32_t net_worth() const;
  void set_net_worth(int32_t value);
  private:
  int32_t _internal_net_worth() const;
  void _internal_set_net_worth(int32_t value);
  public:

  // optional int32 support_gold_spent = 12;
  bool has_support_gold_spent() const;
  private:
  bool _internal_has_support_gold_spent() const;
  public:
  void clear_support_gold_spent();
  int32_t support_gold_spent() const;
  void set_support_gold_spent(int32_t value);
  private:
  int32_t _internal_support_gold_spent() const;
  void _internal_set_support_gold_spent(int32_t value);
  public:

  // optional int32 wards_placed = 13;
  bool has_wards_placed() const;
  private:
  bool _internal_has_wards_placed() const;
  public:
  void clear_wards_placed();
  int32_t wards_placed() const;
  void set_wards_placed(int32_t value);
  private:
  int32_t _internal_wards_placed() const;
  void _internal_set_wards_placed(int32_t value);
  public:

  // optional int32 wards_spotted_for_dewarding = 14;
  bool has_wards_spotted_for_dewarding() const;
  private:
  bool _internal_has_wards_spotted_for_dewarding() const;
  public:
  void clear_wards_spotted_for_dewarding();
  int32_t wards_spotted_for_dewarding() const;
  void set_wards_spotted_for_dewarding(int32_t value);
  private:
  int32_t _internal_wards_spotted_for_dewarding() const;
  void _internal_set_wards_spotted_for_dewarding(int32_t value);
  public:

  // optional int32 camps_stacked = 15;
  bool has_camps_stacked() const;
  private:
  bool _internal_has_camps_stacked() const;
  public:
  void clear_camps_stacked();
  int32_t camps_stacked() const;
  void set_camps_stacked(int32_t value);
  private:
  int32_t _internal_camps_stacked() const;
  void _internal_set_camps_stacked(int32_t value);
  public:

  // optional int32 last_hits = 16;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  int32_t last_hits() const;
  void set_last_hits(int32_t value);
  private:
  int32_t _internal_last_hits() const;
  void _internal_set_last_hits(int32_t value);
  public:

  // optional int32 denies = 17;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  int32_t denies() const;
  void set_denies(int32_t value);
  private:
  int32_t _internal_denies() const;
  void _internal_set_denies(int32_t value);
  public:

  // optional int32 building_damage = 19;
  bool has_building_damage() const;
  private:
  bool _internal_has_building_damage() const;
  public:
  void clear_building_damage();
  int32_t building_damage() const;
  void set_building_damage(int32_t value);
  private:
  int32_t _internal_building_damage() const;
  void _internal_set_building_damage(int32_t value);
  public:

  // optional int32 other_damage = 20;
  bool has_other_damage() const;
  private:
  bool _internal_has_other_damage() const;
  public:
  void clear_other_damage();
  int32_t other_damage() const;
  void set_other_damage(int32_t value);
  private:
  int32_t _internal_other_damage() const;
  void _internal_set_other_damage(int32_t value);
  public:

  // optional int32 triple_kills = 26;
  bool has_triple_kills() const;
  private:
  bool _internal_has_triple_kills() const;
  public:
  void clear_triple_kills();
  int32_t triple_kills() const;
  void set_triple_kills(int32_t value);
  private:
  int32_t _internal_triple_kills() const;
  void _internal_set_triple_kills(int32_t value);
  public:

  // optional int32 rampages = 28;
  bool has_rampages() const;
  private:
  bool _internal_has_rampages() const;
  public:
  void clear_rampages();
  int32_t rampages() const;
  void set_rampages(int32_t value);
  private:
  int32_t _internal_rampages() const;
  void _internal_set_rampages(int32_t value);
  public:

  // optional int32 first_blood = 31;
  bool has_first_blood() const;
  private:
  bool _internal_has_first_blood() const;
  public:
  void clear_first_blood();
  int32_t first_blood() const;
  void set_first_blood(int32_t value);
  private:
  int32_t _internal_first_blood() const;
  void _internal_set_first_blood(int32_t value);
  public:

  // optional uint32 player_slot = 32;
  bool has_player_slot() const;
  private:
  bool _internal_has_player_slot() const;
  public:
  void clear_player_slot();
  uint32_t player_slot() const;
  void set_player_slot(uint32_t value);
  private:
  uint32_t _internal_player_slot() const;
  void _internal_set_player_slot(uint32_t value);
  public:

  // optional uint32 rank = 33;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // optional uint32 highest_killstreak = 35;
  bool has_highest_killstreak() const;
  private:
  bool _internal_has_highest_killstreak() const;
  public:
  void clear_highest_killstreak();
  uint32_t highest_killstreak() const;
  void set_highest_killstreak(uint32_t value);
  private:
  uint32_t _internal_highest_killstreak() const;
  void _internal_set_highest_killstreak(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutMVPStats.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player_KillEaterEvent > kill_eater_events_;
    uint32_t team_id_;
    uint32_t team_networth_rank_;
    uint32_t account_id_;
    uint32_t hero_id_;
    uint32_t role_;
    int32_t kills_;
    int32_t deaths_;
    int32_t assists_;
    int32_t xp_;
    int32_t net_worth_;
    int32_t support_gold_spent_;
    int32_t wards_placed_;
    int32_t wards_spotted_for_dewarding_;
    int32_t camps_stacked_;
    int32_t last_hits_;
    int32_t denies_;
    int32_t building_damage_;
    int32_t other_damage_;
    int32_t triple_kills_;
    int32_t rampages_;
    int32_t first_blood_;
    uint32_t player_slot_;
    uint32_t rank_;
    uint32_t highest_killstreak_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutMVPStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutMVPStats) */ {
 public:
  inline CMsgSignOutMVPStats() : CMsgSignOutMVPStats(nullptr) {}
  ~CMsgSignOutMVPStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutMVPStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutMVPStats(const CMsgSignOutMVPStats& from);
  CMsgSignOutMVPStats(CMsgSignOutMVPStats&& from) noexcept
    : CMsgSignOutMVPStats() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutMVPStats& operator=(const CMsgSignOutMVPStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutMVPStats& operator=(CMsgSignOutMVPStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutMVPStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutMVPStats* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutMVPStats*>(
               &_CMsgSignOutMVPStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(CMsgSignOutMVPStats& a, CMsgSignOutMVPStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutMVPStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutMVPStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutMVPStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutMVPStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutMVPStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutMVPStats& from) {
    CMsgSignOutMVPStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutMVPStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutMVPStats";
  }
  protected:
  explicit CMsgSignOutMVPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSignOutMVPStats_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 5,
    kMatchIdFieldNumber = 1,
    kGameModeFieldNumber = 2,
    kWinningTeamFieldNumber = 3,
    kGameTimeFieldNumber = 4,
  };
  // repeated .CMsgSignOutMVPStats.Player players = 5;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgSignOutMVPStats_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player >*
      mutable_players();
  private:
  const ::CMsgSignOutMVPStats_Player& _internal_players(int index) const;
  ::CMsgSignOutMVPStats_Player* _internal_add_players();
  public:
  const ::CMsgSignOutMVPStats_Player& players(int index) const;
  ::CMsgSignOutMVPStats_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player >&
      players() const;

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional uint32 game_mode = 2;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 winning_team = 3;
  bool has_winning_team() const;
  private:
  bool _internal_has_winning_team() const;
  public:
  void clear_winning_team();
  uint32_t winning_team() const;
  void set_winning_team(uint32_t value);
  private:
  uint32_t _internal_winning_team() const;
  void _internal_set_winning_team(uint32_t value);
  public:

  // optional float game_time = 4;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutMVPStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player > players_;
    uint64_t match_id_;
    uint32_t game_mode_;
    uint32_t winning_team_;
    float game_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerRecordTrainingData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerRecordTrainingData) */ {
 public:
  inline CMsgGCToServerRecordTrainingData() : CMsgGCToServerRecordTrainingData(nullptr) {}
  ~CMsgGCToServerRecordTrainingData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerRecordTrainingData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerRecordTrainingData(const CMsgGCToServerRecordTrainingData& from);
  CMsgGCToServerRecordTrainingData(CMsgGCToServerRecordTrainingData&& from) noexcept
    : CMsgGCToServerRecordTrainingData() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerRecordTrainingData& operator=(const CMsgGCToServerRecordTrainingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerRecordTrainingData& operator=(CMsgGCToServerRecordTrainingData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerRecordTrainingData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerRecordTrainingData* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerRecordTrainingData*>(
               &_CMsgGCToServerRecordTrainingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(CMsgGCToServerRecordTrainingData& a, CMsgGCToServerRecordTrainingData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerRecordTrainingData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerRecordTrainingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerRecordTrainingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerRecordTrainingData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerRecordTrainingData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerRecordTrainingData& from) {
    CMsgGCToServerRecordTrainingData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerRecordTrainingData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerRecordTrainingData";
  }
  protected:
  explicit CMsgGCToServerRecordTrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // optional bool enable = 1;
  bool has_enable() const;
  private:
  bool _internal_has_enable() const;
  public:
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerRecordTrainingData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetGuildContracts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetGuildContracts) */ {
 public:
  inline CMsgServerToGCGetGuildContracts() : CMsgServerToGCGetGuildContracts(nullptr) {}
  ~CMsgServerToGCGetGuildContracts() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContracts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetGuildContracts(const CMsgServerToGCGetGuildContracts& from);
  CMsgServerToGCGetGuildContracts(CMsgServerToGCGetGuildContracts&& from) noexcept
    : CMsgServerToGCGetGuildContracts() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetGuildContracts& operator=(const CMsgServerToGCGetGuildContracts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetGuildContracts& operator=(CMsgServerToGCGetGuildContracts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetGuildContracts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetGuildContracts* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetGuildContracts*>(
               &_CMsgServerToGCGetGuildContracts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(CMsgServerToGCGetGuildContracts& a, CMsgServerToGCGetGuildContracts& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetGuildContracts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetGuildContracts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetGuildContracts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetGuildContracts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetGuildContracts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetGuildContracts& from) {
    CMsgServerToGCGetGuildContracts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetGuildContracts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetGuildContracts";
  }
  protected:
  explicit CMsgServerToGCGetGuildContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetGuildContracts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetGuildContractsResponse_ContractDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetGuildContractsResponse.ContractDetails) */ {
 public:
  inline CMsgServerToGCGetGuildContractsResponse_ContractDetails() : CMsgServerToGCGetGuildContractsResponse_ContractDetails(nullptr) {}
  ~CMsgServerToGCGetGuildContractsResponse_ContractDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_ContractDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetGuildContractsResponse_ContractDetails(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from);
  CMsgServerToGCGetGuildContractsResponse_ContractDetails(CMsgServerToGCGetGuildContractsResponse_ContractDetails&& from) noexcept
    : CMsgServerToGCGetGuildContractsResponse_ContractDetails() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetGuildContractsResponse_ContractDetails& operator=(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetGuildContractsResponse_ContractDetails& operator=(CMsgServerToGCGetGuildContractsResponse_ContractDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetGuildContractsResponse_ContractDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetGuildContractsResponse_ContractDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetGuildContractsResponse_ContractDetails*>(
               &_CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(CMsgServerToGCGetGuildContractsResponse_ContractDetails& a, CMsgServerToGCGetGuildContractsResponse_ContractDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetGuildContractsResponse_ContractDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetGuildContractsResponse_ContractDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetGuildContractsResponse_ContractDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetGuildContractsResponse_ContractDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from) {
    CMsgServerToGCGetGuildContractsResponse_ContractDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetGuildContractsResponse_ContractDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetGuildContractsResponse.ContractDetails";
  }
  protected:
  explicit CMsgServerToGCGetGuildContractsResponse_ContractDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractIdFieldNumber = 1,
    kChallengeInstanceIdFieldNumber = 2,
    kChallengeParameterFieldNumber = 3,
    kContractStarsFieldNumber = 4,
    kContractSlotFieldNumber = 5,
  };
  // optional uint64 contract_id = 1;
  bool has_contract_id() const;
  private:
  bool _internal_has_contract_id() const;
  public:
  void clear_contract_id();
  uint64_t contract_id() const;
  void set_contract_id(uint64_t value);
  private:
  uint64_t _internal_contract_id() const;
  void _internal_set_contract_id(uint64_t value);
  public:

  // optional uint32 challenge_instance_id = 2;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  uint32_t challenge_instance_id() const;
  void set_challenge_instance_id(uint32_t value);
  private:
  uint32_t _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(uint32_t value);
  public:

  // optional uint32 challenge_parameter = 3;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  uint32_t challenge_parameter() const;
  void set_challenge_parameter(uint32_t value);
  private:
  uint32_t _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(uint32_t value);
  public:

  // optional uint32 contract_stars = 4;
  bool has_contract_stars() const;
  private:
  bool _internal_has_contract_stars() const;
  public:
  void clear_contract_stars();
  uint32_t contract_stars() const;
  void set_contract_stars(uint32_t value);
  private:
  uint32_t _internal_contract_stars() const;
  void _internal_set_contract_stars(uint32_t value);
  public:

  // optional uint32 contract_slot = 5;
  bool has_contract_slot() const;
  private:
  bool _internal_has_contract_slot() const;
  public:
  void clear_contract_slot();
  uint32_t contract_slot() const;
  void set_contract_slot(uint32_t value);
  private:
  uint32_t _internal_contract_slot() const;
  void _internal_set_contract_slot(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t contract_id_;
    uint32_t challenge_instance_id_;
    uint32_t challenge_parameter_;
    uint32_t contract_stars_;
    uint32_t contract_slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetGuildContractsResponse_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetGuildContractsResponse.Player) */ {
 public:
  inline CMsgServerToGCGetGuildContractsResponse_Player() : CMsgServerToGCGetGuildContractsResponse_Player(nullptr) {}
  ~CMsgServerToGCGetGuildContractsResponse_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetGuildContractsResponse_Player(const CMsgServerToGCGetGuildContractsResponse_Player& from);
  CMsgServerToGCGetGuildContractsResponse_Player(CMsgServerToGCGetGuildContractsResponse_Player&& from) noexcept
    : CMsgServerToGCGetGuildContractsResponse_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetGuildContractsResponse_Player& operator=(const CMsgServerToGCGetGuildContractsResponse_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetGuildContractsResponse_Player& operator=(CMsgServerToGCGetGuildContractsResponse_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetGuildContractsResponse_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetGuildContractsResponse_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetGuildContractsResponse_Player*>(
               &_CMsgServerToGCGetGuildContractsResponse_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(CMsgServerToGCGetGuildContractsResponse_Player& a, CMsgServerToGCGetGuildContractsResponse_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetGuildContractsResponse_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetGuildContractsResponse_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetGuildContractsResponse_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetGuildContractsResponse_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetGuildContractsResponse_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetGuildContractsResponse_Player& from) {
    CMsgServerToGCGetGuildContractsResponse_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetGuildContractsResponse_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetGuildContractsResponse.Player";
  }
  protected:
  explicit CMsgServerToGCGetGuildContractsResponse_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractsFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kGuildIdFieldNumber = 2,
    kEventIdFieldNumber = 3,
  };
  // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
  int contracts_size() const;
  private:
  int _internal_contracts_size() const;
  public:
  void clear_contracts();
  ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* mutable_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >*
      mutable_contracts();
  private:
  const ::CMsgServerToGCGetGuildContractsResponse_ContractDetails& _internal_contracts(int index) const;
  ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* _internal_add_contracts();
  public:
  const ::CMsgServerToGCGetGuildContractsResponse_ContractDetails& contracts(int index) const;
  ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* add_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >&
      contracts() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 guild_id = 2;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetGuildContractsResponse.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails > contracts_;
    uint32_t account_id_;
    uint32_t guild_id_;
    int event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetGuildContractsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetGuildContractsResponse) */ {
 public:
  inline CMsgServerToGCGetGuildContractsResponse() : CMsgServerToGCGetGuildContractsResponse(nullptr) {}
  ~CMsgServerToGCGetGuildContractsResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetGuildContractsResponse(const CMsgServerToGCGetGuildContractsResponse& from);
  CMsgServerToGCGetGuildContractsResponse(CMsgServerToGCGetGuildContractsResponse&& from) noexcept
    : CMsgServerToGCGetGuildContractsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetGuildContractsResponse& operator=(const CMsgServerToGCGetGuildContractsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetGuildContractsResponse& operator=(CMsgServerToGCGetGuildContractsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetGuildContractsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetGuildContractsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetGuildContractsResponse*>(
               &_CMsgServerToGCGetGuildContractsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(CMsgServerToGCGetGuildContractsResponse& a, CMsgServerToGCGetGuildContractsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetGuildContractsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetGuildContractsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetGuildContractsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetGuildContractsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetGuildContractsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetGuildContractsResponse& from) {
    CMsgServerToGCGetGuildContractsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetGuildContractsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetGuildContractsResponse";
  }
  protected:
  explicit CMsgServerToGCGetGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCGetGuildContractsResponse_ContractDetails ContractDetails;
  typedef CMsgServerToGCGetGuildContractsResponse_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerContractsFieldNumber = 1,
  };
  // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
  int player_contracts_size() const;
  private:
  int _internal_player_contracts_size() const;
  public:
  void clear_player_contracts();
  ::CMsgServerToGCGetGuildContractsResponse_Player* mutable_player_contracts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_Player >*
      mutable_player_contracts();
  private:
  const ::CMsgServerToGCGetGuildContractsResponse_Player& _internal_player_contracts(int index) const;
  ::CMsgServerToGCGetGuildContractsResponse_Player* _internal_add_player_contracts();
  public:
  const ::CMsgServerToGCGetGuildContractsResponse_Player& player_contracts(int index) const;
  ::CMsgServerToGCGetGuildContractsResponse_Player* add_player_contracts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_Player >&
      player_contracts() const;

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetGuildContractsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_Player > player_contracts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchDiretideCandy_CandyDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchDiretideCandy.CandyDetails) */ {
 public:
  inline CMsgMatchDiretideCandy_CandyDetails() : CMsgMatchDiretideCandy_CandyDetails(nullptr) {}
  ~CMsgMatchDiretideCandy_CandyDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_CandyDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchDiretideCandy_CandyDetails(const CMsgMatchDiretideCandy_CandyDetails& from);
  CMsgMatchDiretideCandy_CandyDetails(CMsgMatchDiretideCandy_CandyDetails&& from) noexcept
    : CMsgMatchDiretideCandy_CandyDetails() {
    *this = ::std::move(from);
  }

  inline CMsgMatchDiretideCandy_CandyDetails& operator=(const CMsgMatchDiretideCandy_CandyDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchDiretideCandy_CandyDetails& operator=(CMsgMatchDiretideCandy_CandyDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchDiretideCandy_CandyDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchDiretideCandy_CandyDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchDiretideCandy_CandyDetails*>(
               &_CMsgMatchDiretideCandy_CandyDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CMsgMatchDiretideCandy_CandyDetails& a, CMsgMatchDiretideCandy_CandyDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchDiretideCandy_CandyDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchDiretideCandy_CandyDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchDiretideCandy_CandyDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchDiretideCandy_CandyDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchDiretideCandy_CandyDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchDiretideCandy_CandyDetails& from) {
    CMsgMatchDiretideCandy_CandyDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchDiretideCandy_CandyDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchDiretideCandy.CandyDetails";
  }
  protected:
  explicit CMsgMatchDiretideCandy_CandyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kAuditFieldNumber = 2,
  };
  // optional uint32 amount = 1;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  uint32_t amount() const;
  void set_amount(uint32_t value);
  private:
  uint32_t _internal_amount() const;
  void _internal_set_amount(uint32_t value);
  public:

  // optional uint32 audit = 2;
  bool has_audit() const;
  private:
  bool _internal_has_audit() const;
  public:
  void clear_audit();
  uint32_t audit() const;
  void set_audit(uint32_t value);
  private:
  uint32_t _internal_audit() const;
  void _internal_set_audit(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchDiretideCandy.CandyDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t amount_;
    uint32_t audit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchDiretideCandy_PlayerCandy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchDiretideCandy.PlayerCandy) */ {
 public:
  inline CMsgMatchDiretideCandy_PlayerCandy() : CMsgMatchDiretideCandy_PlayerCandy(nullptr) {}
  ~CMsgMatchDiretideCandy_PlayerCandy() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_PlayerCandy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchDiretideCandy_PlayerCandy(const CMsgMatchDiretideCandy_PlayerCandy& from);
  CMsgMatchDiretideCandy_PlayerCandy(CMsgMatchDiretideCandy_PlayerCandy&& from) noexcept
    : CMsgMatchDiretideCandy_PlayerCandy() {
    *this = ::std::move(from);
  }

  inline CMsgMatchDiretideCandy_PlayerCandy& operator=(const CMsgMatchDiretideCandy_PlayerCandy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchDiretideCandy_PlayerCandy& operator=(CMsgMatchDiretideCandy_PlayerCandy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchDiretideCandy_PlayerCandy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchDiretideCandy_PlayerCandy* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchDiretideCandy_PlayerCandy*>(
               &_CMsgMatchDiretideCandy_PlayerCandy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(CMsgMatchDiretideCandy_PlayerCandy& a, CMsgMatchDiretideCandy_PlayerCandy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchDiretideCandy_PlayerCandy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchDiretideCandy_PlayerCandy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchDiretideCandy_PlayerCandy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchDiretideCandy_PlayerCandy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchDiretideCandy_PlayerCandy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchDiretideCandy_PlayerCandy& from) {
    CMsgMatchDiretideCandy_PlayerCandy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchDiretideCandy_PlayerCandy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchDiretideCandy.PlayerCandy";
  }
  protected:
  explicit CMsgMatchDiretideCandy_PlayerCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandyBreakdownFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kCandyAmountFieldNumber = 3,
    kConsumesPeriodicResourceFieldNumber = 4,
  };
  // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
  int candy_breakdown_size() const;
  private:
  int _internal_candy_breakdown_size() const;
  public:
  void clear_candy_breakdown();
  ::CMsgMatchDiretideCandy_CandyDetails* mutable_candy_breakdown(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_CandyDetails >*
      mutable_candy_breakdown();
  private:
  const ::CMsgMatchDiretideCandy_CandyDetails& _internal_candy_breakdown(int index) const;
  ::CMsgMatchDiretideCandy_CandyDetails* _internal_add_candy_breakdown();
  public:
  const ::CMsgMatchDiretideCandy_CandyDetails& candy_breakdown(int index) const;
  ::CMsgMatchDiretideCandy_CandyDetails* add_candy_breakdown();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_CandyDetails >&
      candy_breakdown() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 candy_amount = 3;
  bool has_candy_amount() const;
  private:
  bool _internal_has_candy_amount() const;
  public:
  void clear_candy_amount();
  uint32_t candy_amount() const;
  void set_candy_amount(uint32_t value);
  private:
  uint32_t _internal_candy_amount() const;
  void _internal_set_candy_amount(uint32_t value);
  public:

  // optional bool consumes_periodic_resource = 4;
  bool has_consumes_periodic_resource() const;
  private:
  bool _internal_has_consumes_periodic_resource() const;
  public:
  void clear_consumes_periodic_resource();
  bool consumes_periodic_resource() const;
  void set_consumes_periodic_resource(bool value);
  private:
  bool _internal_consumes_periodic_resource() const;
  void _internal_set_consumes_periodic_resource(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchDiretideCandy.PlayerCandy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_CandyDetails > candy_breakdown_;
    uint32_t account_id_;
    uint32_t candy_amount_;
    bool consumes_periodic_resource_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgMatchDiretideCandy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgMatchDiretideCandy) */ {
 public:
  inline CMsgMatchDiretideCandy() : CMsgMatchDiretideCandy(nullptr) {}
  ~CMsgMatchDiretideCandy() override;
  explicit PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgMatchDiretideCandy(const CMsgMatchDiretideCandy& from);
  CMsgMatchDiretideCandy(CMsgMatchDiretideCandy&& from) noexcept
    : CMsgMatchDiretideCandy() {
    *this = ::std::move(from);
  }

  inline CMsgMatchDiretideCandy& operator=(const CMsgMatchDiretideCandy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgMatchDiretideCandy& operator=(CMsgMatchDiretideCandy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgMatchDiretideCandy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgMatchDiretideCandy* internal_default_instance() {
    return reinterpret_cast<const CMsgMatchDiretideCandy*>(
               &_CMsgMatchDiretideCandy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(CMsgMatchDiretideCandy& a, CMsgMatchDiretideCandy& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgMatchDiretideCandy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgMatchDiretideCandy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgMatchDiretideCandy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgMatchDiretideCandy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgMatchDiretideCandy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgMatchDiretideCandy& from) {
    CMsgMatchDiretideCandy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgMatchDiretideCandy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgMatchDiretideCandy";
  }
  protected:
  explicit CMsgMatchDiretideCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgMatchDiretideCandy_CandyDetails CandyDetails;
  typedef CMsgMatchDiretideCandy_PlayerCandy PlayerCandy;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCandyDataFieldNumber = 1,
    kEventIdFieldNumber = 2,
  };
  // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
  int player_candy_data_size() const;
  private:
  int _internal_player_candy_data_size() const;
  public:
  void clear_player_candy_data();
  ::CMsgMatchDiretideCandy_PlayerCandy* mutable_player_candy_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_PlayerCandy >*
      mutable_player_candy_data();
  private:
  const ::CMsgMatchDiretideCandy_PlayerCandy& _internal_player_candy_data(int index) const;
  ::CMsgMatchDiretideCandy_PlayerCandy* _internal_add_player_candy_data();
  public:
  const ::CMsgMatchDiretideCandy_PlayerCandy& player_candy_data(int index) const;
  ::CMsgMatchDiretideCandy_PlayerCandy* add_player_candy_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_PlayerCandy >&
      player_candy_data() const;

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgMatchDiretideCandy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_PlayerCandy > player_candy_data_;
    int event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerCheerData_CheerTypeCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerCheerData.CheerTypeCount) */ {
 public:
  inline CMsgGCToServerCheerData_CheerTypeCount() : CMsgGCToServerCheerData_CheerTypeCount(nullptr) {}
  ~CMsgGCToServerCheerData_CheerTypeCount() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerCheerData_CheerTypeCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerCheerData_CheerTypeCount(const CMsgGCToServerCheerData_CheerTypeCount& from);
  CMsgGCToServerCheerData_CheerTypeCount(CMsgGCToServerCheerData_CheerTypeCount&& from) noexcept
    : CMsgGCToServerCheerData_CheerTypeCount() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerCheerData_CheerTypeCount& operator=(const CMsgGCToServerCheerData_CheerTypeCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerCheerData_CheerTypeCount& operator=(CMsgGCToServerCheerData_CheerTypeCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerCheerData_CheerTypeCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerCheerData_CheerTypeCount* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerCheerData_CheerTypeCount*>(
               &_CMsgGCToServerCheerData_CheerTypeCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(CMsgGCToServerCheerData_CheerTypeCount& a, CMsgGCToServerCheerData_CheerTypeCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerCheerData_CheerTypeCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerCheerData_CheerTypeCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerCheerData_CheerTypeCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerCheerData_CheerTypeCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerCheerData_CheerTypeCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerCheerData_CheerTypeCount& from) {
    CMsgGCToServerCheerData_CheerTypeCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerCheerData_CheerTypeCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerCheerData.CheerTypeCount";
  }
  protected:
  explicit CMsgGCToServerCheerData_CheerTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypeFieldNumber = 1,
    kCheerCountFieldNumber = 2,
  };
  // optional uint32 cheer_type = 1;
  bool has_cheer_type() const;
  private:
  bool _internal_has_cheer_type() const;
  public:
  void clear_cheer_type();
  uint32_t cheer_type() const;
  void set_cheer_type(uint32_t value);
  private:
  uint32_t _internal_cheer_type() const;
  void _internal_set_cheer_type(uint32_t value);
  public:

  // optional uint32 cheer_count = 2;
  bool has_cheer_count() const;
  private:
  bool _internal_has_cheer_count() const;
  public:
  void clear_cheer_count();
  uint32_t cheer_count() const;
  void set_cheer_count(uint32_t value);
  private:
  uint32_t _internal_cheer_count() const;
  void _internal_set_cheer_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToServerCheerData.CheerTypeCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t cheer_type_;
    uint32_t cheer_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerCheerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerCheerData) */ {
 public:
  inline CMsgGCToServerCheerData() : CMsgGCToServerCheerData(nullptr) {}
  ~CMsgGCToServerCheerData() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerCheerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerCheerData(const CMsgGCToServerCheerData& from);
  CMsgGCToServerCheerData(CMsgGCToServerCheerData&& from) noexcept
    : CMsgGCToServerCheerData() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerCheerData& operator=(const CMsgGCToServerCheerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerCheerData& operator=(CMsgGCToServerCheerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerCheerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerCheerData* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerCheerData*>(
               &_CMsgGCToServerCheerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(CMsgGCToServerCheerData& a, CMsgGCToServerCheerData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerCheerData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerCheerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerCheerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerCheerData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerCheerData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerCheerData& from) {
    CMsgGCToServerCheerData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerCheerData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerCheerData";
  }
  protected:
  explicit CMsgGCToServerCheerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToServerCheerData_CheerTypeCount CheerTypeCount;

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypesFieldNumber = 1,
  };
  // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
  int cheer_types_size() const;
  private:
  int _internal_cheer_types_size() const;
  public:
  void clear_cheer_types();
  ::CMsgGCToServerCheerData_CheerTypeCount* mutable_cheer_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerCheerData_CheerTypeCount >*
      mutable_cheer_types();
  private:
  const ::CMsgGCToServerCheerData_CheerTypeCount& _internal_cheer_types(int index) const;
  ::CMsgGCToServerCheerData_CheerTypeCount* _internal_add_cheer_types();
  public:
  const ::CMsgGCToServerCheerData_CheerTypeCount& cheer_types(int index) const;
  ::CMsgGCToServerCheerData_CheerTypeCount* add_cheer_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerCheerData_CheerTypeCount >&
      cheer_types() const;

  // @@protoc_insertion_point(class_scope:CMsgGCToServerCheerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerCheerData_CheerTypeCount > cheer_types_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgCheerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCheerConfig) */ {
 public:
  inline CMsgCheerConfig() : CMsgCheerConfig(nullptr) {}
  ~CMsgCheerConfig() override;
  explicit PROTOBUF_CONSTEXPR CMsgCheerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCheerConfig(const CMsgCheerConfig& from);
  CMsgCheerConfig(CMsgCheerConfig&& from) noexcept
    : CMsgCheerConfig() {
    *this = ::std::move(from);
  }

  inline CMsgCheerConfig& operator=(const CMsgCheerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCheerConfig& operator=(CMsgCheerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCheerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCheerConfig* internal_default_instance() {
    return reinterpret_cast<const CMsgCheerConfig*>(
               &_CMsgCheerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(CMsgCheerConfig& a, CMsgCheerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCheerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCheerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCheerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCheerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCheerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCheerConfig& from) {
    CMsgCheerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCheerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCheerConfig";
  }
  protected:
  explicit CMsgCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheersEnabledFieldNumber = 1,
    kIsValidLeagueIdFieldNumber = 2,
    kWindowDurationFieldNumber = 3,
    kWindowBucketCountFieldNumber = 4,
    kCrowdLevelPushTimeFieldNumber = 6,
    kCrowdLevelLowFieldNumber = 10,
    kCrowdLevelMediumFieldNumber = 11,
    kCrowdLevelHighFieldNumber = 12,
    kCheerScaleStartFieldNumber = 13,
    kCheerScaleSpeedFieldNumber = 14,
    kCheerScalePushMarkFieldNumber = 15,
    kCheerScalePullMarkFieldNumber = 16,
    kCheerScalePctOfMaxCpsClampFieldNumber = 17,
    kCheerFactorBronzeFieldNumber = 18,
    kCheerFactorSilverFieldNumber = 19,
    kCheerFactorGoldFieldNumber = 20,
    kCheerScaleDampenerValueFieldNumber = 21,
    kCheerScaleDampenerLerpTimeFieldNumber = 22,
  };
  // optional bool cheers_enabled = 1;
  bool has_cheers_enabled() const;
  private:
  bool _internal_has_cheers_enabled() const;
  public:
  void clear_cheers_enabled();
  bool cheers_enabled() const;
  void set_cheers_enabled(bool value);
  private:
  bool _internal_cheers_enabled() const;
  void _internal_set_cheers_enabled(bool value);
  public:

  // optional bool is_valid_league_id = 2;
  bool has_is_valid_league_id() const;
  private:
  bool _internal_has_is_valid_league_id() const;
  public:
  void clear_is_valid_league_id();
  bool is_valid_league_id() const;
  void set_is_valid_league_id(bool value);
  private:
  bool _internal_is_valid_league_id() const;
  void _internal_set_is_valid_league_id(bool value);
  public:

  // optional float window_duration = 3;
  bool has_window_duration() const;
  private:
  bool _internal_has_window_duration() const;
  public:
  void clear_window_duration();
  float window_duration() const;
  void set_window_duration(float value);
  private:
  float _internal_window_duration() const;
  void _internal_set_window_duration(float value);
  public:

  // optional uint32 window_bucket_count = 4;
  bool has_window_bucket_count() const;
  private:
  bool _internal_has_window_bucket_count() const;
  public:
  void clear_window_bucket_count();
  uint32_t window_bucket_count() const;
  void set_window_bucket_count(uint32_t value);
  private:
  uint32_t _internal_window_bucket_count() const;
  void _internal_set_window_bucket_count(uint32_t value);
  public:

  // optional float crowd_level_push_time = 6;
  bool has_crowd_level_push_time() const;
  private:
  bool _internal_has_crowd_level_push_time() const;
  public:
  void clear_crowd_level_push_time();
  float crowd_level_push_time() const;
  void set_crowd_level_push_time(float value);
  private:
  float _internal_crowd_level_push_time() const;
  void _internal_set_crowd_level_push_time(float value);
  public:

  // optional uint32 crowd_level_low = 10;
  bool has_crowd_level_low() const;
  private:
  bool _internal_has_crowd_level_low() const;
  public:
  void clear_crowd_level_low();
  uint32_t crowd_level_low() const;
  void set_crowd_level_low(uint32_t value);
  private:
  uint32_t _internal_crowd_level_low() const;
  void _internal_set_crowd_level_low(uint32_t value);
  public:

  // optional uint32 crowd_level_medium = 11;
  bool has_crowd_level_medium() const;
  private:
  bool _internal_has_crowd_level_medium() const;
  public:
  void clear_crowd_level_medium();
  uint32_t crowd_level_medium() const;
  void set_crowd_level_medium(uint32_t value);
  private:
  uint32_t _internal_crowd_level_medium() const;
  void _internal_set_crowd_level_medium(uint32_t value);
  public:

  // optional uint32 crowd_level_high = 12;
  bool has_crowd_level_high() const;
  private:
  bool _internal_has_crowd_level_high() const;
  public:
  void clear_crowd_level_high();
  uint32_t crowd_level_high() const;
  void set_crowd_level_high(uint32_t value);
  private:
  uint32_t _internal_crowd_level_high() const;
  void _internal_set_crowd_level_high(uint32_t value);
  public:

  // optional float cheer_scale_start = 13;
  bool has_cheer_scale_start() const;
  private:
  bool _internal_has_cheer_scale_start() const;
  public:
  void clear_cheer_scale_start();
  float cheer_scale_start() const;
  void set_cheer_scale_start(float value);
  private:
  float _internal_cheer_scale_start() const;
  void _internal_set_cheer_scale_start(float value);
  public:

  // optional float cheer_scale_speed = 14;
  bool has_cheer_scale_speed() const;
  private:
  bool _internal_has_cheer_scale_speed() const;
  public:
  void clear_cheer_scale_speed();
  float cheer_scale_speed() const;
  void set_cheer_scale_speed(float value);
  private:
  float _internal_cheer_scale_speed() const;
  void _internal_set_cheer_scale_speed(float value);
  public:

  // optional uint32 cheer_scale_push_mark = 15;
  bool has_cheer_scale_push_mark() const;
  private:
  bool _internal_has_cheer_scale_push_mark() const;
  public:
  void clear_cheer_scale_push_mark();
  uint32_t cheer_scale_push_mark() const;
  void set_cheer_scale_push_mark(uint32_t value);
  private:
  uint32_t _internal_cheer_scale_push_mark() const;
  void _internal_set_cheer_scale_push_mark(uint32_t value);
  public:

  // optional uint32 cheer_scale_pull_mark = 16;
  bool has_cheer_scale_pull_mark() const;
  private:
  bool _internal_has_cheer_scale_pull_mark() const;
  public:
  void clear_cheer_scale_pull_mark();
  uint32_t cheer_scale_pull_mark() const;
  void set_cheer_scale_pull_mark(uint32_t value);
  private:
  uint32_t _internal_cheer_scale_pull_mark() const;
  void _internal_set_cheer_scale_pull_mark(uint32_t value);
  public:

  // optional float cheer_scale_pct_of_max_cps_clamp = 17;
  bool has_cheer_scale_pct_of_max_cps_clamp() const;
  private:
  bool _internal_has_cheer_scale_pct_of_max_cps_clamp() const;
  public:
  void clear_cheer_scale_pct_of_max_cps_clamp();
  float cheer_scale_pct_of_max_cps_clamp() const;
  void set_cheer_scale_pct_of_max_cps_clamp(float value);
  private:
  float _internal_cheer_scale_pct_of_max_cps_clamp() const;
  void _internal_set_cheer_scale_pct_of_max_cps_clamp(float value);
  public:

  // optional float cheer_factor_bronze = 18;
  bool has_cheer_factor_bronze() const;
  private:
  bool _internal_has_cheer_factor_bronze() const;
  public:
  void clear_cheer_factor_bronze();
  float cheer_factor_bronze() const;
  void set_cheer_factor_bronze(float value);
  private:
  float _internal_cheer_factor_bronze() const;
  void _internal_set_cheer_factor_bronze(float value);
  public:

  // optional float cheer_factor_silver = 19;
  bool has_cheer_factor_silver() const;
  private:
  bool _internal_has_cheer_factor_silver() const;
  public:
  void clear_cheer_factor_silver();
  float cheer_factor_silver() const;
  void set_cheer_factor_silver(float value);
  private:
  float _internal_cheer_factor_silver() const;
  void _internal_set_cheer_factor_silver(float value);
  public:

  // optional float cheer_factor_gold = 20;
  bool has_cheer_factor_gold() const;
  private:
  bool _internal_has_cheer_factor_gold() const;
  public:
  void clear_cheer_factor_gold();
  float cheer_factor_gold() const;
  void set_cheer_factor_gold(float value);
  private:
  float _internal_cheer_factor_gold() const;
  void _internal_set_cheer_factor_gold(float value);
  public:

  // optional float cheer_scale_dampener_value = 21;
  bool has_cheer_scale_dampener_value() const;
  private:
  bool _internal_has_cheer_scale_dampener_value() const;
  public:
  void clear_cheer_scale_dampener_value();
  float cheer_scale_dampener_value() const;
  void set_cheer_scale_dampener_value(float value);
  private:
  float _internal_cheer_scale_dampener_value() const;
  void _internal_set_cheer_scale_dampener_value(float value);
  public:

  // optional uint32 cheer_scale_dampener_lerp_time = 22;
  bool has_cheer_scale_dampener_lerp_time() const;
  private:
  bool _internal_has_cheer_scale_dampener_lerp_time() const;
  public:
  void clear_cheer_scale_dampener_lerp_time();
  uint32_t cheer_scale_dampener_lerp_time() const;
  void set_cheer_scale_dampener_lerp_time(uint32_t value);
  private:
  uint32_t _internal_cheer_scale_dampener_lerp_time() const;
  void _internal_set_cheer_scale_dampener_lerp_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCheerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool cheers_enabled_;
    bool is_valid_league_id_;
    float window_duration_;
    uint32_t window_bucket_count_;
    float crowd_level_push_time_;
    uint32_t crowd_level_low_;
    uint32_t crowd_level_medium_;
    uint32_t crowd_level_high_;
    float cheer_scale_start_;
    float cheer_scale_speed_;
    uint32_t cheer_scale_push_mark_;
    uint32_t cheer_scale_pull_mark_;
    float cheer_scale_pct_of_max_cps_clamp_;
    float cheer_factor_bronze_;
    float cheer_factor_silver_;
    float cheer_factor_gold_;
    float cheer_scale_dampener_value_;
    uint32_t cheer_scale_dampener_lerp_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerCheerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerCheerConfig) */ {
 public:
  inline CMsgGCToServerCheerConfig() : CMsgGCToServerCheerConfig(nullptr) {}
  ~CMsgGCToServerCheerConfig() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerCheerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerCheerConfig(const CMsgGCToServerCheerConfig& from);
  CMsgGCToServerCheerConfig(CMsgGCToServerCheerConfig&& from) noexcept
    : CMsgGCToServerCheerConfig() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerCheerConfig& operator=(const CMsgGCToServerCheerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerCheerConfig& operator=(CMsgGCToServerCheerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerCheerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerCheerConfig* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerCheerConfig*>(
               &_CMsgGCToServerCheerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(CMsgGCToServerCheerConfig& a, CMsgGCToServerCheerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerCheerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerCheerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerCheerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerCheerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerCheerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerCheerConfig& from) {
    CMsgGCToServerCheerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerCheerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerCheerConfig";
  }
  protected:
  explicit CMsgGCToServerCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerConfigFieldNumber = 1,
  };
  // optional .CMsgCheerConfig cheer_config = 1;
  bool has_cheer_config() const;
  private:
  bool _internal_has_cheer_config() const;
  public:
  void clear_cheer_config();
  const ::CMsgCheerConfig& cheer_config() const;
  PROTOBUF_NODISCARD ::CMsgCheerConfig* release_cheer_config();
  ::CMsgCheerConfig* mutable_cheer_config();
  void set_allocated_cheer_config(::CMsgCheerConfig* cheer_config);
  private:
  const ::CMsgCheerConfig& _internal_cheer_config() const;
  ::CMsgCheerConfig* _internal_mutable_cheer_config();
  public:
  void unsafe_arena_set_allocated_cheer_config(
      ::CMsgCheerConfig* cheer_config);
  ::CMsgCheerConfig* unsafe_arena_release_cheer_config();

  // @@protoc_insertion_point(class_scope:CMsgGCToServerCheerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgCheerConfig* cheer_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetCheerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetCheerConfig) */ {
 public:
  inline CMsgServerToGCGetCheerConfig() : CMsgServerToGCGetCheerConfig(nullptr) {}
  ~CMsgServerToGCGetCheerConfig() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetCheerConfig(const CMsgServerToGCGetCheerConfig& from);
  CMsgServerToGCGetCheerConfig(CMsgServerToGCGetCheerConfig&& from) noexcept
    : CMsgServerToGCGetCheerConfig() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetCheerConfig& operator=(const CMsgServerToGCGetCheerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetCheerConfig& operator=(CMsgServerToGCGetCheerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetCheerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetCheerConfig* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetCheerConfig*>(
               &_CMsgServerToGCGetCheerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(CMsgServerToGCGetCheerConfig& a, CMsgServerToGCGetCheerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetCheerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetCheerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetCheerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetCheerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetCheerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetCheerConfig& from) {
    CMsgServerToGCGetCheerConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetCheerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetCheerConfig";
  }
  protected:
  explicit CMsgServerToGCGetCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetCheerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetCheerConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetCheerConfigResponse) */ {
 public:
  inline CMsgServerToGCGetCheerConfigResponse() : CMsgServerToGCGetCheerConfigResponse(nullptr) {}
  ~CMsgServerToGCGetCheerConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetCheerConfigResponse(const CMsgServerToGCGetCheerConfigResponse& from);
  CMsgServerToGCGetCheerConfigResponse(CMsgServerToGCGetCheerConfigResponse&& from) noexcept
    : CMsgServerToGCGetCheerConfigResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetCheerConfigResponse& operator=(const CMsgServerToGCGetCheerConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetCheerConfigResponse& operator=(CMsgServerToGCGetCheerConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetCheerConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetCheerConfigResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetCheerConfigResponse*>(
               &_CMsgServerToGCGetCheerConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(CMsgServerToGCGetCheerConfigResponse& a, CMsgServerToGCGetCheerConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetCheerConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetCheerConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetCheerConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetCheerConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetCheerConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetCheerConfigResponse& from) {
    CMsgServerToGCGetCheerConfigResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetCheerConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetCheerConfigResponse";
  }
  protected:
  explicit CMsgServerToGCGetCheerConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerConfigFieldNumber = 2,
  };
  // optional .CMsgCheerConfig cheer_config = 2;
  bool has_cheer_config() const;
  private:
  bool _internal_has_cheer_config() const;
  public:
  void clear_cheer_config();
  const ::CMsgCheerConfig& cheer_config() const;
  PROTOBUF_NODISCARD ::CMsgCheerConfig* release_cheer_config();
  ::CMsgCheerConfig* mutable_cheer_config();
  void set_allocated_cheer_config(::CMsgCheerConfig* cheer_config);
  private:
  const ::CMsgCheerConfig& _internal_cheer_config() const;
  ::CMsgCheerConfig* _internal_mutable_cheer_config();
  public:
  void unsafe_arena_set_allocated_cheer_config(
      ::CMsgCheerConfig* cheer_config);
  ::CMsgCheerConfig* unsafe_arena_release_cheer_config();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetCheerConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgCheerConfig* cheer_config_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerCheerScalesOverride final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerCheerScalesOverride) */ {
 public:
  inline CMsgGCToServerCheerScalesOverride() : CMsgGCToServerCheerScalesOverride(nullptr) {}
  ~CMsgGCToServerCheerScalesOverride() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerCheerScalesOverride(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerCheerScalesOverride(const CMsgGCToServerCheerScalesOverride& from);
  CMsgGCToServerCheerScalesOverride(CMsgGCToServerCheerScalesOverride&& from) noexcept
    : CMsgGCToServerCheerScalesOverride() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerCheerScalesOverride& operator=(const CMsgGCToServerCheerScalesOverride& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerCheerScalesOverride& operator=(CMsgGCToServerCheerScalesOverride&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerCheerScalesOverride& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerCheerScalesOverride* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerCheerScalesOverride*>(
               &_CMsgGCToServerCheerScalesOverride_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(CMsgGCToServerCheerScalesOverride& a, CMsgGCToServerCheerScalesOverride& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerCheerScalesOverride* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerCheerScalesOverride* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerCheerScalesOverride* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerCheerScalesOverride>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerCheerScalesOverride& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerCheerScalesOverride& from) {
    CMsgGCToServerCheerScalesOverride::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerCheerScalesOverride* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerCheerScalesOverride";
  }
  protected:
  explicit CMsgGCToServerCheerScalesOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalesFieldNumber = 1,
  };
  // repeated float scales = 1;
  int scales_size() const;
  private:
  int _internal_scales_size() const;
  public:
  void clear_scales();
  private:
  float _internal_scales(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scales() const;
  void _internal_add_scales(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scales();
  public:
  float scales(int index) const;
  void set_scales(int index, float value);
  void add_scales(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scales() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scales();

  // @@protoc_insertion_point(class_scope:CMsgGCToServerCheerScalesOverride)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scales_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerGetCheerState final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCToServerGetCheerState) */ {
 public:
  inline CMsgGCToServerGetCheerState() : CMsgGCToServerGetCheerState(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerGetCheerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerGetCheerState(const CMsgGCToServerGetCheerState& from);
  CMsgGCToServerGetCheerState(CMsgGCToServerGetCheerState&& from) noexcept
    : CMsgGCToServerGetCheerState() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerGetCheerState& operator=(const CMsgGCToServerGetCheerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerGetCheerState& operator=(CMsgGCToServerGetCheerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerGetCheerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerGetCheerState* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerGetCheerState*>(
               &_CMsgGCToServerGetCheerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(CMsgGCToServerGetCheerState& a, CMsgGCToServerGetCheerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerGetCheerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerGetCheerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerGetCheerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerGetCheerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCToServerGetCheerState& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCToServerGetCheerState& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerGetCheerState";
  }
  protected:
  explicit CMsgGCToServerGetCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToServerGetCheerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgCheerTypeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCheerTypeState) */ {
 public:
  inline CMsgCheerTypeState() : CMsgCheerTypeState(nullptr) {}
  ~CMsgCheerTypeState() override;
  explicit PROTOBUF_CONSTEXPR CMsgCheerTypeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCheerTypeState(const CMsgCheerTypeState& from);
  CMsgCheerTypeState(CMsgCheerTypeState&& from) noexcept
    : CMsgCheerTypeState() {
    *this = ::std::move(from);
  }

  inline CMsgCheerTypeState& operator=(const CMsgCheerTypeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCheerTypeState& operator=(CMsgCheerTypeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCheerTypeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCheerTypeState* internal_default_instance() {
    return reinterpret_cast<const CMsgCheerTypeState*>(
               &_CMsgCheerTypeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(CMsgCheerTypeState& a, CMsgCheerTypeState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCheerTypeState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCheerTypeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCheerTypeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCheerTypeState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCheerTypeState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCheerTypeState& from) {
    CMsgCheerTypeState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCheerTypeState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCheerTypeState";
  }
  protected:
  explicit CMsgCheerTypeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerCountsFieldNumber = 1,
    kMaxPerSecondFieldNumber = 2,
    kCheerScaleFieldNumber = 3,
    kOverrideScaleFieldNumber = 4,
  };
  // repeated uint32 cheer_counts = 1;
  int cheer_counts_size() const;
  private:
  int _internal_cheer_counts_size() const;
  public:
  void clear_cheer_counts();
  private:
  uint32_t _internal_cheer_counts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cheer_counts() const;
  void _internal_add_cheer_counts(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cheer_counts();
  public:
  uint32_t cheer_counts(int index) const;
  void set_cheer_counts(int index, uint32_t value);
  void add_cheer_counts(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cheer_counts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cheer_counts();

  // optional float max_per_second = 2;
  bool has_max_per_second() const;
  private:
  bool _internal_has_max_per_second() const;
  public:
  void clear_max_per_second();
  float max_per_second() const;
  void set_max_per_second(float value);
  private:
  float _internal_max_per_second() const;
  void _internal_set_max_per_second(float value);
  public:

  // optional float cheer_scale = 3;
  bool has_cheer_scale() const;
  private:
  bool _internal_has_cheer_scale() const;
  public:
  void clear_cheer_scale();
  float cheer_scale() const;
  void set_cheer_scale(float value);
  private:
  float _internal_cheer_scale() const;
  void _internal_set_cheer_scale(float value);
  public:

  // optional float override_scale = 4;
  bool has_override_scale() const;
  private:
  bool _internal_has_override_scale() const;
  public:
  void clear_override_scale();
  float override_scale() const;
  void set_override_scale(float value);
  private:
  float _internal_override_scale() const;
  void _internal_set_override_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCheerTypeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cheer_counts_;
    float max_per_second_;
    float cheer_scale_;
    float override_scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgCheerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCheerState) */ {
 public:
  inline CMsgCheerState() : CMsgCheerState(nullptr) {}
  ~CMsgCheerState() override;
  explicit PROTOBUF_CONSTEXPR CMsgCheerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCheerState(const CMsgCheerState& from);
  CMsgCheerState(CMsgCheerState&& from) noexcept
    : CMsgCheerState() {
    *this = ::std::move(from);
  }

  inline CMsgCheerState& operator=(const CMsgCheerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCheerState& operator=(CMsgCheerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgCheerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCheerState* internal_default_instance() {
    return reinterpret_cast<const CMsgCheerState*>(
               &_CMsgCheerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(CMsgCheerState& a, CMsgCheerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCheerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCheerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgCheerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgCheerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgCheerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgCheerState& from) {
    CMsgCheerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCheerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCheerState";
  }
  protected:
  explicit CMsgCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerTypesFieldNumber = 1,
    kRadiantCrowdLevelFieldNumber = 2,
    kDireCrowdLevelFieldNumber = 3,
  };
  // repeated .CMsgCheerTypeState cheer_types = 1;
  int cheer_types_size() const;
  private:
  int _internal_cheer_types_size() const;
  public:
  void clear_cheer_types();
  ::CMsgCheerTypeState* mutable_cheer_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCheerTypeState >*
      mutable_cheer_types();
  private:
  const ::CMsgCheerTypeState& _internal_cheer_types(int index) const;
  ::CMsgCheerTypeState* _internal_add_cheer_types();
  public:
  const ::CMsgCheerTypeState& cheer_types(int index) const;
  ::CMsgCheerTypeState* add_cheer_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCheerTypeState >&
      cheer_types() const;

  // optional uint32 radiant_crowd_level = 2;
  bool has_radiant_crowd_level() const;
  private:
  bool _internal_has_radiant_crowd_level() const;
  public:
  void clear_radiant_crowd_level();
  uint32_t radiant_crowd_level() const;
  void set_radiant_crowd_level(uint32_t value);
  private:
  uint32_t _internal_radiant_crowd_level() const;
  void _internal_set_radiant_crowd_level(uint32_t value);
  public:

  // optional uint32 dire_crowd_level = 3;
  bool has_dire_crowd_level() const;
  private:
  bool _internal_has_dire_crowd_level() const;
  public:
  void clear_dire_crowd_level();
  uint32_t dire_crowd_level() const;
  void set_dire_crowd_level(uint32_t value);
  private:
  uint32_t _internal_dire_crowd_level() const;
  void _internal_set_dire_crowd_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCheerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCheerTypeState > cheer_types_;
    uint32_t radiant_crowd_level_;
    uint32_t dire_crowd_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCReportCheerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCReportCheerState) */ {
 public:
  inline CMsgServerToGCReportCheerState() : CMsgServerToGCReportCheerState(nullptr) {}
  ~CMsgServerToGCReportCheerState() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCReportCheerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCReportCheerState(const CMsgServerToGCReportCheerState& from);
  CMsgServerToGCReportCheerState(CMsgServerToGCReportCheerState&& from) noexcept
    : CMsgServerToGCReportCheerState() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCReportCheerState& operator=(const CMsgServerToGCReportCheerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCReportCheerState& operator=(CMsgServerToGCReportCheerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCReportCheerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCReportCheerState* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCReportCheerState*>(
               &_CMsgServerToGCReportCheerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(CMsgServerToGCReportCheerState& a, CMsgServerToGCReportCheerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCReportCheerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCReportCheerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCReportCheerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCReportCheerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCReportCheerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCReportCheerState& from) {
    CMsgServerToGCReportCheerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCReportCheerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCReportCheerState";
  }
  protected:
  explicit CMsgServerToGCReportCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheerConfigFieldNumber = 1,
    kCheerStateFieldNumber = 2,
  };
  // optional .CMsgCheerConfig cheer_config = 1;
  bool has_cheer_config() const;
  private:
  bool _internal_has_cheer_config() const;
  public:
  void clear_cheer_config();
  const ::CMsgCheerConfig& cheer_config() const;
  PROTOBUF_NODISCARD ::CMsgCheerConfig* release_cheer_config();
  ::CMsgCheerConfig* mutable_cheer_config();
  void set_allocated_cheer_config(::CMsgCheerConfig* cheer_config);
  private:
  const ::CMsgCheerConfig& _internal_cheer_config() const;
  ::CMsgCheerConfig* _internal_mutable_cheer_config();
  public:
  void unsafe_arena_set_allocated_cheer_config(
      ::CMsgCheerConfig* cheer_config);
  ::CMsgCheerConfig* unsafe_arena_release_cheer_config();

  // optional .CMsgCheerState cheer_state = 2;
  bool has_cheer_state() const;
  private:
  bool _internal_has_cheer_state() const;
  public:
  void clear_cheer_state();
  const ::CMsgCheerState& cheer_state() const;
  PROTOBUF_NODISCARD ::CMsgCheerState* release_cheer_state();
  ::CMsgCheerState* mutable_cheer_state();
  void set_allocated_cheer_state(::CMsgCheerState* cheer_state);
  private:
  const ::CMsgCheerState& _internal_cheer_state() const;
  ::CMsgCheerState* _internal_mutable_cheer_state();
  public:
  void unsafe_arena_set_allocated_cheer_state(
      ::CMsgCheerState* cheer_state);
  ::CMsgCheerState* unsafe_arena_release_cheer_state();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCReportCheerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgCheerConfig* cheer_config_;
    ::CMsgCheerState* cheer_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetStickerHeroes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetStickerHeroes) */ {
 public:
  inline CMsgServerToGCGetStickerHeroes() : CMsgServerToGCGetStickerHeroes(nullptr) {}
  ~CMsgServerToGCGetStickerHeroes() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetStickerHeroes(const CMsgServerToGCGetStickerHeroes& from);
  CMsgServerToGCGetStickerHeroes(CMsgServerToGCGetStickerHeroes&& from) noexcept
    : CMsgServerToGCGetStickerHeroes() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetStickerHeroes& operator=(const CMsgServerToGCGetStickerHeroes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetStickerHeroes& operator=(CMsgServerToGCGetStickerHeroes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetStickerHeroes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetStickerHeroes* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetStickerHeroes*>(
               &_CMsgServerToGCGetStickerHeroes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(CMsgServerToGCGetStickerHeroes& a, CMsgServerToGCGetStickerHeroes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetStickerHeroes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetStickerHeroes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetStickerHeroes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetStickerHeroes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetStickerHeroes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetStickerHeroes& from) {
    CMsgServerToGCGetStickerHeroes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetStickerHeroes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetStickerHeroes";
  }
  protected:
  explicit CMsgServerToGCGetStickerHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 1,
  };
  // repeated uint32 account_ids = 1;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetStickerHeroes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetStickerHeroesResponse_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetStickerHeroesResponse.Player) */ {
 public:
  inline CMsgServerToGCGetStickerHeroesResponse_Player() : CMsgServerToGCGetStickerHeroesResponse_Player(nullptr) {}
  ~CMsgServerToGCGetStickerHeroesResponse_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponse_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetStickerHeroesResponse_Player(const CMsgServerToGCGetStickerHeroesResponse_Player& from);
  CMsgServerToGCGetStickerHeroesResponse_Player(CMsgServerToGCGetStickerHeroesResponse_Player&& from) noexcept
    : CMsgServerToGCGetStickerHeroesResponse_Player() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetStickerHeroesResponse_Player& operator=(const CMsgServerToGCGetStickerHeroesResponse_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetStickerHeroesResponse_Player& operator=(CMsgServerToGCGetStickerHeroesResponse_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetStickerHeroesResponse_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetStickerHeroesResponse_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetStickerHeroesResponse_Player*>(
               &_CMsgServerToGCGetStickerHeroesResponse_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(CMsgServerToGCGetStickerHeroesResponse_Player& a, CMsgServerToGCGetStickerHeroesResponse_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetStickerHeroesResponse_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetStickerHeroesResponse_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetStickerHeroesResponse_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetStickerHeroesResponse_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetStickerHeroesResponse_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetStickerHeroesResponse_Player& from) {
    CMsgServerToGCGetStickerHeroesResponse_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetStickerHeroesResponse_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetStickerHeroesResponse.Player";
  }
  protected:
  explicit CMsgServerToGCGetStickerHeroesResponse_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStickersFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional .CMsgStickerHeroes stickers = 2;
  bool has_stickers() const;
  private:
  bool _internal_has_stickers() const;
  public:
  void clear_stickers();
  const ::CMsgStickerHeroes& stickers() const;
  PROTOBUF_NODISCARD ::CMsgStickerHeroes* release_stickers();
  ::CMsgStickerHeroes* mutable_stickers();
  void set_allocated_stickers(::CMsgStickerHeroes* stickers);
  private:
  const ::CMsgStickerHeroes& _internal_stickers() const;
  ::CMsgStickerHeroes* _internal_mutable_stickers();
  public:
  void unsafe_arena_set_allocated_stickers(
      ::CMsgStickerHeroes* stickers);
  ::CMsgStickerHeroes* unsafe_arena_release_stickers();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetStickerHeroesResponse.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgStickerHeroes* stickers_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgServerToGCGetStickerHeroesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgServerToGCGetStickerHeroesResponse) */ {
 public:
  inline CMsgServerToGCGetStickerHeroesResponse() : CMsgServerToGCGetStickerHeroesResponse(nullptr) {}
  ~CMsgServerToGCGetStickerHeroesResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgServerToGCGetStickerHeroesResponse(const CMsgServerToGCGetStickerHeroesResponse& from);
  CMsgServerToGCGetStickerHeroesResponse(CMsgServerToGCGetStickerHeroesResponse&& from) noexcept
    : CMsgServerToGCGetStickerHeroesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgServerToGCGetStickerHeroesResponse& operator=(const CMsgServerToGCGetStickerHeroesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgServerToGCGetStickerHeroesResponse& operator=(CMsgServerToGCGetStickerHeroesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgServerToGCGetStickerHeroesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgServerToGCGetStickerHeroesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgServerToGCGetStickerHeroesResponse*>(
               &_CMsgServerToGCGetStickerHeroesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(CMsgServerToGCGetStickerHeroesResponse& a, CMsgServerToGCGetStickerHeroesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgServerToGCGetStickerHeroesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgServerToGCGetStickerHeroesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgServerToGCGetStickerHeroesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgServerToGCGetStickerHeroesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgServerToGCGetStickerHeroesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgServerToGCGetStickerHeroesResponse& from) {
    CMsgServerToGCGetStickerHeroesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgServerToGCGetStickerHeroesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgServerToGCGetStickerHeroesResponse";
  }
  protected:
  explicit CMsgServerToGCGetStickerHeroesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgServerToGCGetStickerHeroesResponse_Player Player;

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .CMsgServerToGCGetStickerHeroesResponse.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgServerToGCGetStickerHeroesResponse_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetStickerHeroesResponse_Player >*
      mutable_players();
  private:
  const ::CMsgServerToGCGetStickerHeroesResponse_Player& _internal_players(int index) const;
  ::CMsgServerToGCGetStickerHeroesResponse_Player* _internal_add_players();
  public:
  const ::CMsgServerToGCGetStickerHeroesResponse_Player& players(int index) const;
  ::CMsgServerToGCGetStickerHeroesResponse_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetStickerHeroesResponse_Player >&
      players() const;

  // @@protoc_insertion_point(class_scope:CMsgServerToGCGetStickerHeroesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetStickerHeroesResponse_Player > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerSetSteamLearnDisable final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgGCToServerSetSteamLearnDisable) */ {
 public:
  inline CMsgGCToServerSetSteamLearnDisable() : CMsgGCToServerSetSteamLearnDisable(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnDisable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerSetSteamLearnDisable(const CMsgGCToServerSetSteamLearnDisable& from);
  CMsgGCToServerSetSteamLearnDisable(CMsgGCToServerSetSteamLearnDisable&& from) noexcept
    : CMsgGCToServerSetSteamLearnDisable() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerSetSteamLearnDisable& operator=(const CMsgGCToServerSetSteamLearnDisable& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerSetSteamLearnDisable& operator=(CMsgGCToServerSetSteamLearnDisable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerSetSteamLearnDisable& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerSetSteamLearnDisable* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerSetSteamLearnDisable*>(
               &_CMsgGCToServerSetSteamLearnDisable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(CMsgGCToServerSetSteamLearnDisable& a, CMsgGCToServerSetSteamLearnDisable& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerSetSteamLearnDisable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerSetSteamLearnDisable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerSetSteamLearnDisable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerSetSteamLearnDisable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgGCToServerSetSteamLearnDisable& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgGCToServerSetSteamLearnDisable& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerSetSteamLearnDisable";
  }
  protected:
  explicit CMsgGCToServerSetSteamLearnDisable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToServerSetSteamLearnDisable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToServerSetSteamLearnKeysChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToServerSetSteamLearnKeysChanged) */ {
 public:
  inline CMsgGCToServerSetSteamLearnKeysChanged() : CMsgGCToServerSetSteamLearnKeysChanged(nullptr) {}
  ~CMsgGCToServerSetSteamLearnKeysChanged() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnKeysChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToServerSetSteamLearnKeysChanged(const CMsgGCToServerSetSteamLearnKeysChanged& from);
  CMsgGCToServerSetSteamLearnKeysChanged(CMsgGCToServerSetSteamLearnKeysChanged&& from) noexcept
    : CMsgGCToServerSetSteamLearnKeysChanged() {
    *this = ::std::move(from);
  }

  inline CMsgGCToServerSetSteamLearnKeysChanged& operator=(const CMsgGCToServerSetSteamLearnKeysChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToServerSetSteamLearnKeysChanged& operator=(CMsgGCToServerSetSteamLearnKeysChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToServerSetSteamLearnKeysChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToServerSetSteamLearnKeysChanged* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToServerSetSteamLearnKeysChanged*>(
               &_CMsgGCToServerSetSteamLearnKeysChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(CMsgGCToServerSetSteamLearnKeysChanged& a, CMsgGCToServerSetSteamLearnKeysChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToServerSetSteamLearnKeysChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToServerSetSteamLearnKeysChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToServerSetSteamLearnKeysChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToServerSetSteamLearnKeysChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToServerSetSteamLearnKeysChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToServerSetSteamLearnKeysChanged& from) {
    CMsgGCToServerSetSteamLearnKeysChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToServerSetSteamLearnKeysChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToServerSetSteamLearnKeysChanged";
  }
  protected:
  explicit CMsgGCToServerSetSteamLearnKeysChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // optional .CMsgSteamLearnHMACKeys keys = 1;
  bool has_keys() const;
  private:
  bool _internal_has_keys() const;
  public:
  void clear_keys();
  const ::CMsgSteamLearnHMACKeys& keys() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnHMACKeys* release_keys();
  ::CMsgSteamLearnHMACKeys* mutable_keys();
  void set_allocated_keys(::CMsgSteamLearnHMACKeys* keys);
  private:
  const ::CMsgSteamLearnHMACKeys& _internal_keys() const;
  ::CMsgSteamLearnHMACKeys* _internal_mutable_keys();
  public:
  void unsafe_arena_set_allocated_keys(
      ::CMsgSteamLearnHMACKeys* keys);
  ::CMsgSteamLearnHMACKeys* unsafe_arena_release_keys();

  // @@protoc_insertion_point(class_scope:CMsgGCToServerSetSteamLearnKeysChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgSteamLearnHMACKeys* keys_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchInfo) */ {
 public:
  inline CMsgSteamLearnMatchInfo() : CMsgSteamLearnMatchInfo(nullptr) {}
  ~CMsgSteamLearnMatchInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchInfo(const CMsgSteamLearnMatchInfo& from);
  CMsgSteamLearnMatchInfo(CMsgSteamLearnMatchInfo&& from) noexcept
    : CMsgSteamLearnMatchInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchInfo& operator=(const CMsgSteamLearnMatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchInfo& operator=(CMsgSteamLearnMatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchInfo*>(
               &_CMsgSteamLearnMatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(CMsgSteamLearnMatchInfo& a, CMsgSteamLearnMatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchInfo& from) {
    CMsgSteamLearnMatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchInfo";
  }
  protected:
  explicit CMsgSteamLearnMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageMmrFieldNumber = 1,
    kRadiantWonFieldNumber = 2,
    kDurationFieldNumber = 3,
    kGameModeFieldNumber = 4,
    kLobbyTypeFieldNumber = 5,
  };
  // optional uint32 average_mmr = 1;
  bool has_average_mmr() const;
  private:
  bool _internal_has_average_mmr() const;
  public:
  void clear_average_mmr();
  uint32_t average_mmr() const;
  void set_average_mmr(uint32_t value);
  private:
  uint32_t _internal_average_mmr() const;
  void _internal_set_average_mmr(uint32_t value);
  public:

  // optional bool radiant_won = 2;
  bool has_radiant_won() const;
  private:
  bool _internal_has_radiant_won() const;
  public:
  void clear_radiant_won();
  bool radiant_won() const;
  void set_radiant_won(bool value);
  private:
  bool _internal_radiant_won() const;
  void _internal_set_radiant_won(bool value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 game_mode = 4;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional uint32 lobby_type = 5;
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  uint32_t lobby_type() const;
  void set_lobby_type(uint32_t value);
  private:
  uint32_t _internal_lobby_type() const;
  void _internal_set_lobby_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t average_mmr_;
    bool radiant_won_;
    uint32_t duration_;
    uint32_t game_mode_;
    uint32_t lobby_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchHeroes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchHeroes) */ {
 public:
  inline CMsgSteamLearnMatchHeroes() : CMsgSteamLearnMatchHeroes(nullptr) {}
  ~CMsgSteamLearnMatchHeroes() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHeroes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchHeroes(const CMsgSteamLearnMatchHeroes& from);
  CMsgSteamLearnMatchHeroes(CMsgSteamLearnMatchHeroes&& from) noexcept
    : CMsgSteamLearnMatchHeroes() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchHeroes& operator=(const CMsgSteamLearnMatchHeroes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchHeroes& operator=(CMsgSteamLearnMatchHeroes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchHeroes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchHeroes* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchHeroes*>(
               &_CMsgSteamLearnMatchHeroes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(CMsgSteamLearnMatchHeroes& a, CMsgSteamLearnMatchHeroes& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchHeroes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchHeroes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchHeroes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchHeroes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchHeroes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchHeroes& from) {
    CMsgSteamLearnMatchHeroes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchHeroes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchHeroes";
  }
  protected:
  explicit CMsgSteamLearnMatchHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiantHeroIdsFieldNumber = 1,
    kDireHeroIdsFieldNumber = 2,
    kRadiantLanesFieldNumber = 3,
    kDireLanesFieldNumber = 4,
  };
  // repeated uint32 radiant_hero_ids = 1 [(.steamlearn_count) = 5];
  int radiant_hero_ids_size() const;
  private:
  int _internal_radiant_hero_ids_size() const;
  public:
  void clear_radiant_hero_ids();
  private:
  uint32_t _internal_radiant_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_radiant_hero_ids() const;
  void _internal_add_radiant_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_radiant_hero_ids();
  public:
  uint32_t radiant_hero_ids(int index) const;
  void set_radiant_hero_ids(int index, uint32_t value);
  void add_radiant_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      radiant_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_radiant_hero_ids();

  // repeated uint32 dire_hero_ids = 2 [(.steamlearn_count) = 5];
  int dire_hero_ids_size() const;
  private:
  int _internal_dire_hero_ids_size() const;
  public:
  void clear_dire_hero_ids();
  private:
  uint32_t _internal_dire_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_dire_hero_ids() const;
  void _internal_add_dire_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_dire_hero_ids();
  public:
  uint32_t dire_hero_ids(int index) const;
  void set_dire_hero_ids(int index, uint32_t value);
  void add_dire_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      dire_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_dire_hero_ids();

  // repeated uint32 radiant_lanes = 3 [(.steamlearn_count) = 5];
  int radiant_lanes_size() const;
  private:
  int _internal_radiant_lanes_size() const;
  public:
  void clear_radiant_lanes();
  private:
  uint32_t _internal_radiant_lanes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_radiant_lanes() const;
  void _internal_add_radiant_lanes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_radiant_lanes();
  public:
  uint32_t radiant_lanes(int index) const;
  void set_radiant_lanes(int index, uint32_t value);
  void add_radiant_lanes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      radiant_lanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_radiant_lanes();

  // repeated uint32 dire_lanes = 4 [(.steamlearn_count) = 5];
  int dire_lanes_size() const;
  private:
  int _internal_dire_lanes_size() const;
  public:
  void clear_dire_lanes();
  private:
  uint32_t _internal_dire_lanes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_dire_lanes() const;
  void _internal_add_dire_lanes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_dire_lanes();
  public:
  uint32_t dire_lanes(int index) const;
  void set_dire_lanes(int index, uint32_t value);
  void add_dire_lanes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      dire_lanes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_dire_lanes();

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchHeroes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > radiant_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > dire_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > radiant_lanes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > dire_lanes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchHero) */ {
 public:
  inline CMsgSteamLearnMatchHero() : CMsgSteamLearnMatchHero(nullptr) {}
  ~CMsgSteamLearnMatchHero() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchHero(const CMsgSteamLearnMatchHero& from);
  CMsgSteamLearnMatchHero(CMsgSteamLearnMatchHero&& from) noexcept
    : CMsgSteamLearnMatchHero() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchHero& operator=(const CMsgSteamLearnMatchHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchHero& operator=(CMsgSteamLearnMatchHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchHero* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchHero*>(
               &_CMsgSteamLearnMatchHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(CMsgSteamLearnMatchHero& a, CMsgSteamLearnMatchHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchHero& from) {
    CMsgSteamLearnMatchHero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchHero";
  }
  protected:
  explicit CMsgSteamLearnMatchHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlliedHeroIdsFieldNumber = 3,
    kEnemyHeroIdsFieldNumber = 4,
    kHeroIdFieldNumber = 1,
    kLaneFieldNumber = 2,
  };
  // repeated uint32 allied_hero_ids = 3 [(.steamlearn_count) = 4];
  int allied_hero_ids_size() const;
  private:
  int _internal_allied_hero_ids_size() const;
  public:
  void clear_allied_hero_ids();
  private:
  uint32_t _internal_allied_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_allied_hero_ids() const;
  void _internal_add_allied_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_allied_hero_ids();
  public:
  uint32_t allied_hero_ids(int index) const;
  void set_allied_hero_ids(int index, uint32_t value);
  void add_allied_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      allied_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_allied_hero_ids();

  // repeated uint32 enemy_hero_ids = 4 [(.steamlearn_count) = 5];
  int enemy_hero_ids_size() const;
  private:
  int _internal_enemy_hero_ids_size() const;
  public:
  void clear_enemy_hero_ids();
  private:
  uint32_t _internal_enemy_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enemy_hero_ids() const;
  void _internal_add_enemy_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enemy_hero_ids();
  public:
  uint32_t enemy_hero_ids(int index) const;
  void set_enemy_hero_ids(int index, uint32_t value);
  void add_enemy_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enemy_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enemy_hero_ids();

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 lane = 2;
  bool has_lane() const;
  private:
  bool _internal_has_lane() const;
  public:
  void clear_lane();
  uint32_t lane() const;
  void set_lane(uint32_t value);
  private:
  uint32_t _internal_lane() const;
  void _internal_set_lane(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > allied_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enemy_hero_ids_;
    uint32_t hero_id_;
    uint32_t lane_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchState_PlayerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchState.PlayerState) */ {
 public:
  inline CMsgSteamLearnMatchState_PlayerState() : CMsgSteamLearnMatchState_PlayerState(nullptr) {}
  ~CMsgSteamLearnMatchState_PlayerState() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_PlayerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchState_PlayerState(const CMsgSteamLearnMatchState_PlayerState& from);
  CMsgSteamLearnMatchState_PlayerState(CMsgSteamLearnMatchState_PlayerState&& from) noexcept
    : CMsgSteamLearnMatchState_PlayerState() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchState_PlayerState& operator=(const CMsgSteamLearnMatchState_PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchState_PlayerState& operator=(CMsgSteamLearnMatchState_PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchState_PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchState_PlayerState* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchState_PlayerState*>(
               &_CMsgSteamLearnMatchState_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(CMsgSteamLearnMatchState_PlayerState& a, CMsgSteamLearnMatchState_PlayerState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchState_PlayerState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchState_PlayerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchState_PlayerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchState_PlayerState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchState_PlayerState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchState_PlayerState& from) {
    CMsgSteamLearnMatchState_PlayerState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchState_PlayerState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchState.PlayerState";
  }
  protected:
  explicit CMsgSteamLearnMatchState_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kNetWorthFieldNumber = 2,
    kLevelFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kRespawnTimeFieldNumber = 5,
    kHasBuybackFieldNumber = 6,
    kHasAegisFieldNumber = 7,
    kHasRapierFieldNumber = 8,
    kDistanceFieldNumber = 9,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 net_worth = 2;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  uint32_t deaths() const;
  void set_deaths(uint32_t value);
  private:
  uint32_t _internal_deaths() const;
  void _internal_set_deaths(uint32_t value);
  public:

  // optional uint32 respawn_time = 5;
  bool has_respawn_time() const;
  private:
  bool _internal_has_respawn_time() const;
  public:
  void clear_respawn_time();
  uint32_t respawn_time() const;
  void set_respawn_time(uint32_t value);
  private:
  uint32_t _internal_respawn_time() const;
  void _internal_set_respawn_time(uint32_t value);
  public:

  // optional bool has_buyback = 6;
  bool has_has_buyback() const;
  private:
  bool _internal_has_has_buyback() const;
  public:
  void clear_has_buyback();
  bool has_buyback() const;
  void set_has_buyback(bool value);
  private:
  bool _internal_has_buyback() const;
  void _internal_set_has_buyback(bool value);
  public:

  // optional bool has_aegis = 7;
  bool has_has_aegis() const;
  private:
  bool _internal_has_has_aegis() const;
  public:
  void clear_has_aegis();
  bool has_aegis() const;
  void set_has_aegis(bool value);
  private:
  bool _internal_has_aegis() const;
  void _internal_set_has_aegis(bool value);
  public:

  // optional bool has_rapier = 8;
  bool has_has_rapier() const;
  private:
  bool _internal_has_has_rapier() const;
  public:
  void clear_has_rapier();
  bool has_rapier() const;
  void set_has_rapier(bool value);
  private:
  bool _internal_has_rapier() const;
  void _internal_set_has_rapier(bool value);
  public:

  // optional uint32 distance = 9;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchState.PlayerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t net_worth_;
    uint32_t level_;
    uint32_t deaths_;
    uint32_t respawn_time_;
    bool has_buyback_;
    bool has_aegis_;
    bool has_rapier_;
    uint32_t distance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchState_TeamState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchState.TeamState) */ {
 public:
  inline CMsgSteamLearnMatchState_TeamState() : CMsgSteamLearnMatchState_TeamState(nullptr) {}
  ~CMsgSteamLearnMatchState_TeamState() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_TeamState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchState_TeamState(const CMsgSteamLearnMatchState_TeamState& from);
  CMsgSteamLearnMatchState_TeamState(CMsgSteamLearnMatchState_TeamState&& from) noexcept
    : CMsgSteamLearnMatchState_TeamState() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchState_TeamState& operator=(const CMsgSteamLearnMatchState_TeamState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchState_TeamState& operator=(CMsgSteamLearnMatchState_TeamState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchState_TeamState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchState_TeamState* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchState_TeamState*>(
               &_CMsgSteamLearnMatchState_TeamState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(CMsgSteamLearnMatchState_TeamState& a, CMsgSteamLearnMatchState_TeamState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchState_TeamState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchState_TeamState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchState_TeamState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchState_TeamState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchState_TeamState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchState_TeamState& from) {
    CMsgSteamLearnMatchState_TeamState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchState_TeamState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchState.TeamState";
  }
  protected:
  explicit CMsgSteamLearnMatchState_TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerStatesFieldNumber = 2,
    kTowerHealthPctFieldNumber = 3,
    kBarracksHealthPctFieldNumber = 4,
    kTeamFieldNumber = 1,
    kAncientHealthPctFieldNumber = 5,
    kGlyphCooldownFieldNumber = 6,
    kKillsFieldNumber = 7,
    kCreepDistanceSafeFieldNumber = 8,
    kCreepDistanceMidFieldNumber = 9,
    kCreepDistanceOffFieldNumber = 10,
  };
  // repeated .CMsgSteamLearnMatchState.PlayerState player_states = 2 [(.steamlearn_count) = 5];
  int player_states_size() const;
  private:
  int _internal_player_states_size() const;
  public:
  void clear_player_states();
  ::CMsgSteamLearnMatchState_PlayerState* mutable_player_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnMatchState_PlayerState >*
      mutable_player_states();
  private:
  const ::CMsgSteamLearnMatchState_PlayerState& _internal_player_states(int index) const;
  ::CMsgSteamLearnMatchState_PlayerState* _internal_add_player_states();
  public:
  const ::CMsgSteamLearnMatchState_PlayerState& player_states(int index) const;
  ::CMsgSteamLearnMatchState_PlayerState* add_player_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnMatchState_PlayerState >&
      player_states() const;

  // repeated uint32 tower_health_pct = 3 [(.steamlearn_count) = 11];
  int tower_health_pct_size() const;
  private:
  int _internal_tower_health_pct_size() const;
  public:
  void clear_tower_health_pct();
  private:
  uint32_t _internal_tower_health_pct(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_tower_health_pct() const;
  void _internal_add_tower_health_pct(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_tower_health_pct();
  public:
  uint32_t tower_health_pct(int index) const;
  void set_tower_health_pct(int index, uint32_t value);
  void add_tower_health_pct(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      tower_health_pct() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_tower_health_pct();

  // repeated uint32 barracks_health_pct = 4 [(.steamlearn_count) = 6];
  int barracks_health_pct_size() const;
  private:
  int _internal_barracks_health_pct_size() const;
  public:
  void clear_barracks_health_pct();
  private:
  uint32_t _internal_barracks_health_pct(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_barracks_health_pct() const;
  void _internal_add_barracks_health_pct(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_barracks_health_pct();
  public:
  uint32_t barracks_health_pct(int index) const;
  void set_barracks_health_pct(int index, uint32_t value);
  void add_barracks_health_pct(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      barracks_health_pct() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_barracks_health_pct();

  // optional uint32 team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  uint32_t team() const;
  void set_team(uint32_t value);
  private:
  uint32_t _internal_team() const;
  void _internal_set_team(uint32_t value);
  public:

  // optional uint32 ancient_health_pct = 5;
  bool has_ancient_health_pct() const;
  private:
  bool _internal_has_ancient_health_pct() const;
  public:
  void clear_ancient_health_pct();
  uint32_t ancient_health_pct() const;
  void set_ancient_health_pct(uint32_t value);
  private:
  uint32_t _internal_ancient_health_pct() const;
  void _internal_set_ancient_health_pct(uint32_t value);
  public:

  // optional uint32 glyph_cooldown = 6;
  bool has_glyph_cooldown() const;
  private:
  bool _internal_has_glyph_cooldown() const;
  public:
  void clear_glyph_cooldown();
  uint32_t glyph_cooldown() const;
  void set_glyph_cooldown(uint32_t value);
  private:
  uint32_t _internal_glyph_cooldown() const;
  void _internal_set_glyph_cooldown(uint32_t value);
  public:

  // optional uint32 kills = 7;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  uint32_t kills() const;
  void set_kills(uint32_t value);
  private:
  uint32_t _internal_kills() const;
  void _internal_set_kills(uint32_t value);
  public:

  // optional uint32 creep_distance_safe = 8;
  bool has_creep_distance_safe() const;
  private:
  bool _internal_has_creep_distance_safe() const;
  public:
  void clear_creep_distance_safe();
  uint32_t creep_distance_safe() const;
  void set_creep_distance_safe(uint32_t value);
  private:
  uint32_t _internal_creep_distance_safe() const;
  void _internal_set_creep_distance_safe(uint32_t value);
  public:

  // optional uint32 creep_distance_mid = 9;
  bool has_creep_distance_mid() const;
  private:
  bool _internal_has_creep_distance_mid() const;
  public:
  void clear_creep_distance_mid();
  uint32_t creep_distance_mid() const;
  void set_creep_distance_mid(uint32_t value);
  private:
  uint32_t _internal_creep_distance_mid() const;
  void _internal_set_creep_distance_mid(uint32_t value);
  public:

  // optional uint32 creep_distance_off = 10;
  bool has_creep_distance_off() const;
  private:
  bool _internal_has_creep_distance_off() const;
  public:
  void clear_creep_distance_off();
  uint32_t creep_distance_off() const;
  void set_creep_distance_off(uint32_t value);
  private:
  uint32_t _internal_creep_distance_off() const;
  void _internal_set_creep_distance_off(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchState.TeamState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnMatchState_PlayerState > player_states_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > tower_health_pct_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > barracks_health_pct_;
    uint32_t team_;
    uint32_t ancient_health_pct_;
    uint32_t glyph_cooldown_;
    uint32_t kills_;
    uint32_t creep_distance_safe_;
    uint32_t creep_distance_mid_;
    uint32_t creep_distance_off_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnMatchState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnMatchState) */ {
 public:
  inline CMsgSteamLearnMatchState() : CMsgSteamLearnMatchState(nullptr) {}
  ~CMsgSteamLearnMatchState() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnMatchState(const CMsgSteamLearnMatchState& from);
  CMsgSteamLearnMatchState(CMsgSteamLearnMatchState&& from) noexcept
    : CMsgSteamLearnMatchState() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnMatchState& operator=(const CMsgSteamLearnMatchState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnMatchState& operator=(CMsgSteamLearnMatchState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnMatchState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnMatchState* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnMatchState*>(
               &_CMsgSteamLearnMatchState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(CMsgSteamLearnMatchState& a, CMsgSteamLearnMatchState& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnMatchState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnMatchState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnMatchState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnMatchState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnMatchState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnMatchState& from) {
    CMsgSteamLearnMatchState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnMatchState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnMatchState";
  }
  protected:
  explicit CMsgSteamLearnMatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgSteamLearnMatchState_PlayerState PlayerState;
  typedef CMsgSteamLearnMatchState_TeamState TeamState;

  // accessors -------------------------------------------------------

  enum : int {
    kRadiantStateFieldNumber = 2,
    kDireStateFieldNumber = 3,
    kGameTimeFieldNumber = 1,
  };
  // optional .CMsgSteamLearnMatchState.TeamState radiant_state = 2;
  bool has_radiant_state() const;
  private:
  bool _internal_has_radiant_state() const;
  public:
  void clear_radiant_state();
  const ::CMsgSteamLearnMatchState_TeamState& radiant_state() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnMatchState_TeamState* release_radiant_state();
  ::CMsgSteamLearnMatchState_TeamState* mutable_radiant_state();
  void set_allocated_radiant_state(::CMsgSteamLearnMatchState_TeamState* radiant_state);
  private:
  const ::CMsgSteamLearnMatchState_TeamState& _internal_radiant_state() const;
  ::CMsgSteamLearnMatchState_TeamState* _internal_mutable_radiant_state();
  public:
  void unsafe_arena_set_allocated_radiant_state(
      ::CMsgSteamLearnMatchState_TeamState* radiant_state);
  ::CMsgSteamLearnMatchState_TeamState* unsafe_arena_release_radiant_state();

  // optional .CMsgSteamLearnMatchState.TeamState dire_state = 3;
  bool has_dire_state() const;
  private:
  bool _internal_has_dire_state() const;
  public:
  void clear_dire_state();
  const ::CMsgSteamLearnMatchState_TeamState& dire_state() const;
  PROTOBUF_NODISCARD ::CMsgSteamLearnMatchState_TeamState* release_dire_state();
  ::CMsgSteamLearnMatchState_TeamState* mutable_dire_state();
  void set_allocated_dire_state(::CMsgSteamLearnMatchState_TeamState* dire_state);
  private:
  const ::CMsgSteamLearnMatchState_TeamState& _internal_dire_state() const;
  ::CMsgSteamLearnMatchState_TeamState* _internal_mutable_dire_state();
  public:
  void unsafe_arena_set_allocated_dire_state(
      ::CMsgSteamLearnMatchState_TeamState* dire_state);
  ::CMsgSteamLearnMatchState_TeamState* unsafe_arena_release_dire_state();

  // optional float game_time = 1;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnMatchState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgSteamLearnMatchState_TeamState* radiant_state_;
    ::CMsgSteamLearnMatchState_TeamState* dire_state_;
    float game_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnItemPurchase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnItemPurchase) */ {
 public:
  inline CMsgSteamLearnItemPurchase() : CMsgSteamLearnItemPurchase(nullptr) {}
  ~CMsgSteamLearnItemPurchase() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnItemPurchase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnItemPurchase(const CMsgSteamLearnItemPurchase& from);
  CMsgSteamLearnItemPurchase(CMsgSteamLearnItemPurchase&& from) noexcept
    : CMsgSteamLearnItemPurchase() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnItemPurchase& operator=(const CMsgSteamLearnItemPurchase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnItemPurchase& operator=(CMsgSteamLearnItemPurchase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnItemPurchase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnItemPurchase* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnItemPurchase*>(
               &_CMsgSteamLearnItemPurchase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(CMsgSteamLearnItemPurchase& a, CMsgSteamLearnItemPurchase& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnItemPurchase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnItemPurchase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnItemPurchase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnItemPurchase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnItemPurchase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnItemPurchase& from) {
    CMsgSteamLearnItemPurchase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnItemPurchase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnItemPurchase";
  }
  protected:
  explicit CMsgSteamLearnItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryItemsFieldNumber = 2,
    kGoldFieldNumber = 4,
    kNetWorthFieldNumber = 5,
    kIsRadiantTeamFieldNumber = 6,
    kGameTimeFieldNumber = 7,
    kIsUsingDotaPlusFieldNumber = 8,
    kItemIdFieldNumber = 1,
  };
  // repeated int32 inventory_items = 2 [(.steamlearn_count) = 20];
  int inventory_items_size() const;
  private:
  int _internal_inventory_items_size() const;
  public:
  void clear_inventory_items();
  private:
  int32_t _internal_inventory_items(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_inventory_items() const;
  void _internal_add_inventory_items(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_inventory_items();
  public:
  int32_t inventory_items(int index) const;
  void set_inventory_items(int index, int32_t value);
  void add_inventory_items(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      inventory_items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_inventory_items();

  // optional uint32 gold = 4;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  uint32_t gold() const;
  void set_gold(uint32_t value);
  private:
  uint32_t _internal_gold() const;
  void _internal_set_gold(uint32_t value);
  public:

  // optional uint32 net_worth = 5;
  bool has_net_worth() const;
  private:
  bool _internal_has_net_worth() const;
  public:
  void clear_net_worth();
  uint32_t net_worth() const;
  void set_net_worth(uint32_t value);
  private:
  uint32_t _internal_net_worth() const;
  void _internal_set_net_worth(uint32_t value);
  public:

  // optional uint32 is_radiant_team = 6;
  bool has_is_radiant_team() const;
  private:
  bool _internal_has_is_radiant_team() const;
  public:
  void clear_is_radiant_team();
  uint32_t is_radiant_team() const;
  void set_is_radiant_team(uint32_t value);
  private:
  uint32_t _internal_is_radiant_team() const;
  void _internal_set_is_radiant_team(uint32_t value);
  public:

  // optional float game_time = 7;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // optional bool is_using_dota_plus = 8;
  bool has_is_using_dota_plus() const;
  private:
  bool _internal_has_is_using_dota_plus() const;
  public:
  void clear_is_using_dota_plus();
  bool is_using_dota_plus() const;
  void set_is_using_dota_plus(bool value);
  private:
  bool _internal_is_using_dota_plus() const;
  void _internal_set_is_using_dota_plus(bool value);
  public:

  // optional int32 item_id = 1 [default = -1];
  bool has_item_id() const;
  private:
  bool _internal_has_item_id() const;
  public:
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnItemPurchase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > inventory_items_;
    uint32_t gold_;
    uint32_t net_worth_;
    uint32_t is_radiant_team_;
    float game_time_;
    bool is_using_dota_plus_;
    int32_t item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamLearnAbilitySkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamLearnAbilitySkill) */ {
 public:
  inline CMsgSteamLearnAbilitySkill() : CMsgSteamLearnAbilitySkill(nullptr) {}
  ~CMsgSteamLearnAbilitySkill() override;
  explicit PROTOBUF_CONSTEXPR CMsgSteamLearnAbilitySkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSteamLearnAbilitySkill(const CMsgSteamLearnAbilitySkill& from);
  CMsgSteamLearnAbilitySkill(CMsgSteamLearnAbilitySkill&& from) noexcept
    : CMsgSteamLearnAbilitySkill() {
    *this = ::std::move(from);
  }

  inline CMsgSteamLearnAbilitySkill& operator=(const CMsgSteamLearnAbilitySkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamLearnAbilitySkill& operator=(CMsgSteamLearnAbilitySkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamLearnAbilitySkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSteamLearnAbilitySkill* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamLearnAbilitySkill*>(
               &_CMsgSteamLearnAbilitySkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(CMsgSteamLearnAbilitySkill& a, CMsgSteamLearnAbilitySkill& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSteamLearnAbilitySkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamLearnAbilitySkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamLearnAbilitySkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSteamLearnAbilitySkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSteamLearnAbilitySkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSteamLearnAbilitySkill& from) {
    CMsgSteamLearnAbilitySkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamLearnAbilitySkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamLearnAbilitySkill";
  }
  protected:
  explicit CMsgSteamLearnAbilitySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkilledAbilitiesFieldNumber = 2,
    kGameTimeFieldNumber = 3,
    kIsUsingDotaPlusFieldNumber = 4,
    kAbilityIdFieldNumber = 1,
  };
  // repeated int32 skilled_abilities = 2 [(.steamlearn_count) = 30];
  int skilled_abilities_size() const;
  private:
  int _internal_skilled_abilities_size() const;
  public:
  void clear_skilled_abilities();
  private:
  int32_t _internal_skilled_abilities(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skilled_abilities() const;
  void _internal_add_skilled_abilities(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skilled_abilities();
  public:
  int32_t skilled_abilities(int index) const;
  void set_skilled_abilities(int index, int32_t value);
  void add_skilled_abilities(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skilled_abilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skilled_abilities();

  // optional float game_time = 3;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // optional bool is_using_dota_plus = 4;
  bool has_is_using_dota_plus() const;
  private:
  bool _internal_has_is_using_dota_plus() const;
  public:
  void clear_is_using_dota_plus();
  bool is_using_dota_plus() const;
  void set_is_using_dota_plus(bool value);
  private:
  bool _internal_is_using_dota_plus() const;
  void _internal_set_is_using_dota_plus(bool value);
  public:

  // optional int32 ability_id = 1 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSteamLearnAbilitySkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skilled_abilities_;
    float game_time_;
    bool is_using_dota_plus_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CMsgSignOutMuertaMinigame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSignOutMuertaMinigame) */ {
 public:
  inline CMsgSignOutMuertaMinigame() : CMsgSignOutMuertaMinigame(nullptr) {}
  ~CMsgSignOutMuertaMinigame() override;
  explicit PROTOBUF_CONSTEXPR CMsgSignOutMuertaMinigame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSignOutMuertaMinigame(const CMsgSignOutMuertaMinigame& from);
  CMsgSignOutMuertaMinigame(CMsgSignOutMuertaMinigame&& from) noexcept
    : CMsgSignOutMuertaMinigame() {
    *this = ::std::move(from);
  }

  inline CMsgSignOutMuertaMinigame& operator=(const CMsgSignOutMuertaMinigame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSignOutMuertaMinigame& operator=(CMsgSignOutMuertaMinigame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSignOutMuertaMinigame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSignOutMuertaMinigame* internal_default_instance() {
    return reinterpret_cast<const CMsgSignOutMuertaMinigame*>(
               &_CMsgSignOutMuertaMinigame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(CMsgSignOutMuertaMinigame& a, CMsgSignOutMuertaMinigame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSignOutMuertaMinigame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSignOutMuertaMinigame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSignOutMuertaMinigame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgSignOutMuertaMinigame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgSignOutMuertaMinigame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgSignOutMuertaMinigame& from) {
    CMsgSignOutMuertaMinigame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSignOutMuertaMinigame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSignOutMuertaMinigame";
  }
  protected:
  explicit CMsgSignOutMuertaMinigame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGameDataFieldNumber = 1,
  };
  // optional bytes event_game_data = 1;
  bool has_event_game_data() const;
  private:
  bool _internal_has_event_game_data() const;
  public:
  void clear_event_game_data();
  const std::string& event_game_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_game_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_game_data();
  PROTOBUF_NODISCARD std::string* release_event_game_data();
  void set_allocated_event_game_data(std::string* event_game_data);
  private:
  const std::string& _internal_event_game_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_game_data(const std::string& value);
  std::string* _internal_mutable_event_game_data();
  public:

  // @@protoc_insertion_point(class_scope:CMsgSignOutMuertaMinigame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_game_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgPoorNetworkConditions_Player

// optional uint32 account_id = 1;
inline bool CMsgPoorNetworkConditions_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPoorNetworkConditions_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgPoorNetworkConditions_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgPoorNetworkConditions_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgPoorNetworkConditions_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.Player.account_id)
  return _internal_account_id();
}
inline void CMsgPoorNetworkConditions_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgPoorNetworkConditions_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPoorNetworkConditions.Player.account_id)
}

// optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
inline bool CMsgPoorNetworkConditions_Player::_internal_has_disconnect_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPoorNetworkConditions_Player::has_disconnect_reason() const {
  return _internal_has_disconnect_reason();
}
inline void CMsgPoorNetworkConditions_Player::clear_disconnect_reason() {
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ENetworkDisconnectionReason CMsgPoorNetworkConditions_Player::_internal_disconnect_reason() const {
  return static_cast< ::ENetworkDisconnectionReason >(_impl_.disconnect_reason_);
}
inline ::ENetworkDisconnectionReason CMsgPoorNetworkConditions_Player::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.Player.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void CMsgPoorNetworkConditions_Player::_internal_set_disconnect_reason(::ENetworkDisconnectionReason value) {
  assert(::ENetworkDisconnectionReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.disconnect_reason_ = value;
}
inline void CMsgPoorNetworkConditions_Player::set_disconnect_reason(::ENetworkDisconnectionReason value) {
  _internal_set_disconnect_reason(value);
  // @@protoc_insertion_point(field_set:CMsgPoorNetworkConditions.Player.disconnect_reason)
}

// optional uint32 num_bad_intervals = 3;
inline bool CMsgPoorNetworkConditions_Player::_internal_has_num_bad_intervals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPoorNetworkConditions_Player::has_num_bad_intervals() const {
  return _internal_has_num_bad_intervals();
}
inline void CMsgPoorNetworkConditions_Player::clear_num_bad_intervals() {
  _impl_.num_bad_intervals_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgPoorNetworkConditions_Player::_internal_num_bad_intervals() const {
  return _impl_.num_bad_intervals_;
}
inline uint32_t CMsgPoorNetworkConditions_Player::num_bad_intervals() const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.Player.num_bad_intervals)
  return _internal_num_bad_intervals();
}
inline void CMsgPoorNetworkConditions_Player::_internal_set_num_bad_intervals(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_bad_intervals_ = value;
}
inline void CMsgPoorNetworkConditions_Player::set_num_bad_intervals(uint32_t value) {
  _internal_set_num_bad_intervals(value);
  // @@protoc_insertion_point(field_set:CMsgPoorNetworkConditions.Player.num_bad_intervals)
}

// optional uint32 peak_loss_pct = 4;
inline bool CMsgPoorNetworkConditions_Player::_internal_has_peak_loss_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPoorNetworkConditions_Player::has_peak_loss_pct() const {
  return _internal_has_peak_loss_pct();
}
inline void CMsgPoorNetworkConditions_Player::clear_peak_loss_pct() {
  _impl_.peak_loss_pct_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgPoorNetworkConditions_Player::_internal_peak_loss_pct() const {
  return _impl_.peak_loss_pct_;
}
inline uint32_t CMsgPoorNetworkConditions_Player::peak_loss_pct() const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.Player.peak_loss_pct)
  return _internal_peak_loss_pct();
}
inline void CMsgPoorNetworkConditions_Player::_internal_set_peak_loss_pct(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.peak_loss_pct_ = value;
}
inline void CMsgPoorNetworkConditions_Player::set_peak_loss_pct(uint32_t value) {
  _internal_set_peak_loss_pct(value);
  // @@protoc_insertion_point(field_set:CMsgPoorNetworkConditions.Player.peak_loss_pct)
}

// -------------------------------------------------------------------

// CMsgPoorNetworkConditions

// optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
inline bool CMsgPoorNetworkConditions::_internal_has_detection_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPoorNetworkConditions::has_detection_type() const {
  return _internal_has_detection_type();
}
inline void CMsgPoorNetworkConditions::clear_detection_type() {
  _impl_.detection_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EPoorNetworkConditionsType CMsgPoorNetworkConditions::_internal_detection_type() const {
  return static_cast< ::EPoorNetworkConditionsType >(_impl_.detection_type_);
}
inline ::EPoorNetworkConditionsType CMsgPoorNetworkConditions::detection_type() const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.detection_type)
  return _internal_detection_type();
}
inline void CMsgPoorNetworkConditions::_internal_set_detection_type(::EPoorNetworkConditionsType value) {
  assert(::EPoorNetworkConditionsType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.detection_type_ = value;
}
inline void CMsgPoorNetworkConditions::set_detection_type(::EPoorNetworkConditionsType value) {
  _internal_set_detection_type(value);
  // @@protoc_insertion_point(field_set:CMsgPoorNetworkConditions.detection_type)
}

// repeated .CMsgPoorNetworkConditions.Player players = 2;
inline int CMsgPoorNetworkConditions::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgPoorNetworkConditions::players_size() const {
  return _internal_players_size();
}
inline void CMsgPoorNetworkConditions::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPoorNetworkConditions.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPoorNetworkConditions_Player >*
CMsgPoorNetworkConditions::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPoorNetworkConditions.players)
  return &_impl_.players_;
}
inline const ::CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgPoorNetworkConditions_Player& CMsgPoorNetworkConditions::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPoorNetworkConditions.players)
  return _internal_players(index);
}
inline ::CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgPoorNetworkConditions_Player* CMsgPoorNetworkConditions::add_players() {
  ::CMsgPoorNetworkConditions_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgPoorNetworkConditions.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPoorNetworkConditions_Player >&
CMsgPoorNetworkConditions::players() const {
  // @@protoc_insertion_point(field_list:CMsgPoorNetworkConditions.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgGameserverCrash

// optional uint64 match_id = 1;
inline bool CMsgGameserverCrash::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGameserverCrash::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGameserverCrash::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgGameserverCrash::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.match_id)
  return _internal_match_id();
}
inline void CMsgGameserverCrash::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgGameserverCrash::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.match_id)
}

// optional fixed64 lobby_id = 2;
inline bool CMsgGameserverCrash::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgGameserverCrash::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGameserverCrash::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CMsgGameserverCrash::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgGameserverCrash::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lobby_id_ = value;
}
inline void CMsgGameserverCrash::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.lobby_id)
}

// optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgGameserverCrash::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgGameserverCrash::clear_game_state() {
  _impl_.game_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::DOTA_GameState CMsgGameserverCrash::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(_impl_.game_state_);
}
inline ::DOTA_GameState CMsgGameserverCrash::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.game_state)
  return _internal_game_state();
}
inline void CMsgGameserverCrash::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_state_ = value;
}
inline void CMsgGameserverCrash::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.game_state)
}

// optional fixed32 sentinel_save_time = 4;
inline bool CMsgGameserverCrash::_internal_has_sentinel_save_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_sentinel_save_time() const {
  return _internal_has_sentinel_save_time();
}
inline void CMsgGameserverCrash::clear_sentinel_save_time() {
  _impl_.sentinel_save_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameserverCrash::_internal_sentinel_save_time() const {
  return _impl_.sentinel_save_time_;
}
inline uint32_t CMsgGameserverCrash::sentinel_save_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.sentinel_save_time)
  return _internal_sentinel_save_time();
}
inline void CMsgGameserverCrash::_internal_set_sentinel_save_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sentinel_save_time_ = value;
}
inline void CMsgGameserverCrash::set_sentinel_save_time(uint32_t value) {
  _internal_set_sentinel_save_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.sentinel_save_time)
}

// optional fixed64 custom_game_id = 11;
inline bool CMsgGameserverCrash::_internal_has_custom_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgGameserverCrash::clear_custom_game_id() {
  _impl_.custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgGameserverCrash::_internal_custom_game_id() const {
  return _impl_.custom_game_id_;
}
inline uint64_t CMsgGameserverCrash::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgGameserverCrash::_internal_set_custom_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.custom_game_id_ = value;
}
inline void CMsgGameserverCrash::set_custom_game_id(uint64_t value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.custom_game_id)
}

// optional uint32 tournament_id = 12;
inline bool CMsgGameserverCrash::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgGameserverCrash::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameserverCrash::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgGameserverCrash::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgGameserverCrash::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tournament_id_ = value;
}
inline void CMsgGameserverCrash::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.tournament_id)
}

// optional fixed64 server_steam_id = 5;
inline bool CMsgGameserverCrash::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgGameserverCrash::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgGameserverCrash::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgGameserverCrash::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgGameserverCrash::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgGameserverCrash::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.server_steam_id)
}

// optional fixed32 server_public_ip_addr = 6;
inline bool CMsgGameserverCrash::_internal_has_server_public_ip_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_server_public_ip_addr() const {
  return _internal_has_server_public_ip_addr();
}
inline void CMsgGameserverCrash::clear_server_public_ip_addr() {
  _impl_.server_public_ip_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameserverCrash::_internal_server_public_ip_addr() const {
  return _impl_.server_public_ip_addr_;
}
inline uint32_t CMsgGameserverCrash::server_public_ip_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.server_public_ip_addr)
  return _internal_server_public_ip_addr();
}
inline void CMsgGameserverCrash::_internal_set_server_public_ip_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.server_public_ip_addr_ = value;
}
inline void CMsgGameserverCrash::set_server_public_ip_addr(uint32_t value) {
  _internal_set_server_public_ip_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.server_public_ip_addr)
}

// optional uint32 server_port = 7;
inline bool CMsgGameserverCrash::_internal_has_server_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgGameserverCrash::clear_server_port() {
  _impl_.server_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameserverCrash::_internal_server_port() const {
  return _impl_.server_port_;
}
inline uint32_t CMsgGameserverCrash::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.server_port)
  return _internal_server_port();
}
inline void CMsgGameserverCrash::_internal_set_server_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.server_port_ = value;
}
inline void CMsgGameserverCrash::set_server_port(uint32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.server_port)
}

// optional uint32 server_cluster = 8;
inline bool CMsgGameserverCrash::_internal_has_server_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_server_cluster() const {
  return _internal_has_server_cluster();
}
inline void CMsgGameserverCrash::clear_server_cluster() {
  _impl_.server_cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameserverCrash::_internal_server_cluster() const {
  return _impl_.server_cluster_;
}
inline uint32_t CMsgGameserverCrash::server_cluster() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.server_cluster)
  return _internal_server_cluster();
}
inline void CMsgGameserverCrash::_internal_set_server_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.server_cluster_ = value;
}
inline void CMsgGameserverCrash::set_server_cluster(uint32_t value) {
  _internal_set_server_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.server_cluster)
}

// optional uint32 pid = 9;
inline bool CMsgGameserverCrash::_internal_has_pid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_pid() const {
  return _internal_has_pid();
}
inline void CMsgGameserverCrash::clear_pid() {
  _impl_.pid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGameserverCrash::_internal_pid() const {
  return _impl_.pid_;
}
inline uint32_t CMsgGameserverCrash::pid() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.pid)
  return _internal_pid();
}
inline void CMsgGameserverCrash::_internal_set_pid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pid_ = value;
}
inline void CMsgGameserverCrash::set_pid(uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.pid)
}

// optional uint32 engine = 10;
inline bool CMsgGameserverCrash::_internal_has_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameserverCrash::has_engine() const {
  return _internal_has_engine();
}
inline void CMsgGameserverCrash::clear_engine() {
  _impl_.engine_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameserverCrash::_internal_engine() const {
  return _impl_.engine_;
}
inline uint32_t CMsgGameserverCrash::engine() const {
  // @@protoc_insertion_point(field_get:CMsgGameserverCrash.engine)
  return _internal_engine();
}
inline void CMsgGameserverCrash::_internal_set_engine(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.engine_ = value;
}
inline void CMsgGameserverCrash::set_engine(uint32_t value) {
  _internal_set_engine(value);
  // @@protoc_insertion_point(field_set:CMsgGameserverCrash.engine)
}

// -------------------------------------------------------------------

// CMsgConnectedPlayers_Player

// optional fixed64 steam_id = 1;
inline bool CMsgConnectedPlayers_Player::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers_Player::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgConnectedPlayers_Player::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgConnectedPlayers_Player::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgConnectedPlayers_Player::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.steam_id)
  return _internal_steam_id();
}
inline void CMsgConnectedPlayers_Player::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CMsgConnectedPlayers_Player::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.Player.steam_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgConnectedPlayers_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgConnectedPlayers_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgConnectedPlayers_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgConnectedPlayers_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgConnectedPlayers_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgConnectedPlayers_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.Player.hero_id)
}

// optional .CMsgLeaverState leaver_state = 3;
inline bool CMsgConnectedPlayers_Player::_internal_has_leaver_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leaver_state_ != nullptr);
  return value;
}
inline bool CMsgConnectedPlayers_Player::has_leaver_state() const {
  return _internal_has_leaver_state();
}
inline const ::CMsgLeaverState& CMsgConnectedPlayers_Player::_internal_leaver_state() const {
  const ::CMsgLeaverState* p = _impl_.leaver_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgLeaverState&>(
      ::_CMsgLeaverState_default_instance_);
}
inline const ::CMsgLeaverState& CMsgConnectedPlayers_Player::leaver_state() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.leaver_state)
  return _internal_leaver_state();
}
inline void CMsgConnectedPlayers_Player::unsafe_arena_set_allocated_leaver_state(
    ::CMsgLeaverState* leaver_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaver_state_);
  }
  _impl_.leaver_state_ = leaver_state;
  if (leaver_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgConnectedPlayers.Player.leaver_state)
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::release_leaver_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLeaverState* temp = _impl_.leaver_state_;
  _impl_.leaver_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::unsafe_arena_release_leaver_state() {
  // @@protoc_insertion_point(field_release:CMsgConnectedPlayers.Player.leaver_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLeaverState* temp = _impl_.leaver_state_;
  _impl_.leaver_state_ = nullptr;
  return temp;
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::_internal_mutable_leaver_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leaver_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgLeaverState>(GetArenaForAllocation());
    _impl_.leaver_state_ = p;
  }
  return _impl_.leaver_state_;
}
inline ::CMsgLeaverState* CMsgConnectedPlayers_Player::mutable_leaver_state() {
  ::CMsgLeaverState* _msg = _internal_mutable_leaver_state();
  // @@protoc_insertion_point(field_mutable:CMsgConnectedPlayers.Player.leaver_state)
  return _msg;
}
inline void CMsgConnectedPlayers_Player::set_allocated_leaver_state(::CMsgLeaverState* leaver_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaver_state_);
  }
  if (leaver_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaver_state));
    if (message_arena != submessage_arena) {
      leaver_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaver_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leaver_state_ = leaver_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgConnectedPlayers.Player.leaver_state)
}

// optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
inline bool CMsgConnectedPlayers_Player::_internal_has_disconnect_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers_Player::has_disconnect_reason() const {
  return _internal_has_disconnect_reason();
}
inline void CMsgConnectedPlayers_Player::clear_disconnect_reason() {
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::ENetworkDisconnectionReason CMsgConnectedPlayers_Player::_internal_disconnect_reason() const {
  return static_cast< ::ENetworkDisconnectionReason >(_impl_.disconnect_reason_);
}
inline ::ENetworkDisconnectionReason CMsgConnectedPlayers_Player::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.Player.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void CMsgConnectedPlayers_Player::_internal_set_disconnect_reason(::ENetworkDisconnectionReason value) {
  assert(::ENetworkDisconnectionReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.disconnect_reason_ = value;
}
inline void CMsgConnectedPlayers_Player::set_disconnect_reason(::ENetworkDisconnectionReason value) {
  _internal_set_disconnect_reason(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.Player.disconnect_reason)
}

// -------------------------------------------------------------------

// CMsgConnectedPlayers

// repeated .CMsgConnectedPlayers.Player connected_players = 1;
inline int CMsgConnectedPlayers::_internal_connected_players_size() const {
  return _impl_.connected_players_.size();
}
inline int CMsgConnectedPlayers::connected_players_size() const {
  return _internal_connected_players_size();
}
inline void CMsgConnectedPlayers::clear_connected_players() {
  _impl_.connected_players_.Clear();
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_connected_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgConnectedPlayers.connected_players)
  return _impl_.connected_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_connected_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgConnectedPlayers.connected_players)
  return &_impl_.connected_players_;
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::_internal_connected_players(int index) const {
  return _impl_.connected_players_.Get(index);
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::connected_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.connected_players)
  return _internal_connected_players(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::_internal_add_connected_players() {
  return _impl_.connected_players_.Add();
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_connected_players() {
  ::CMsgConnectedPlayers_Player* _add = _internal_add_connected_players();
  // @@protoc_insertion_point(field_add:CMsgConnectedPlayers.connected_players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::connected_players() const {
  // @@protoc_insertion_point(field_list:CMsgConnectedPlayers.connected_players)
  return _impl_.connected_players_;
}

// repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
inline int CMsgConnectedPlayers::_internal_disconnected_players_size() const {
  return _impl_.disconnected_players_.size();
}
inline int CMsgConnectedPlayers::disconnected_players_size() const {
  return _internal_disconnected_players_size();
}
inline void CMsgConnectedPlayers::clear_disconnected_players() {
  _impl_.disconnected_players_.Clear();
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::mutable_disconnected_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgConnectedPlayers.disconnected_players)
  return _impl_.disconnected_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >*
CMsgConnectedPlayers::mutable_disconnected_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgConnectedPlayers.disconnected_players)
  return &_impl_.disconnected_players_;
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::_internal_disconnected_players(int index) const {
  return _impl_.disconnected_players_.Get(index);
}
inline const ::CMsgConnectedPlayers_Player& CMsgConnectedPlayers::disconnected_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.disconnected_players)
  return _internal_disconnected_players(index);
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::_internal_add_disconnected_players() {
  return _impl_.disconnected_players_.Add();
}
inline ::CMsgConnectedPlayers_Player* CMsgConnectedPlayers::add_disconnected_players() {
  ::CMsgConnectedPlayers_Player* _add = _internal_add_disconnected_players();
  // @@protoc_insertion_point(field_add:CMsgConnectedPlayers.disconnected_players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgConnectedPlayers_Player >&
CMsgConnectedPlayers::disconnected_players() const {
  // @@protoc_insertion_point(field_list:CMsgConnectedPlayers.disconnected_players)
  return _impl_.disconnected_players_;
}

// optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CMsgConnectedPlayers::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_game_state() const {
  return _internal_has_game_state();
}
inline void CMsgConnectedPlayers::clear_game_state() {
  _impl_.game_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameState CMsgConnectedPlayers::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(_impl_.game_state_);
}
inline ::DOTA_GameState CMsgConnectedPlayers::game_state() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.game_state)
  return _internal_game_state();
}
inline void CMsgConnectedPlayers::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_state_ = value;
}
inline void CMsgConnectedPlayers::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.game_state)
}

// optional bool first_blood_happened = 6;
inline bool CMsgConnectedPlayers::_internal_has_first_blood_happened() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_first_blood_happened() const {
  return _internal_has_first_blood_happened();
}
inline void CMsgConnectedPlayers::clear_first_blood_happened() {
  _impl_.first_blood_happened_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgConnectedPlayers::_internal_first_blood_happened() const {
  return _impl_.first_blood_happened_;
}
inline bool CMsgConnectedPlayers::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.first_blood_happened)
  return _internal_first_blood_happened();
}
inline void CMsgConnectedPlayers::_internal_set_first_blood_happened(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.first_blood_happened_ = value;
}
inline void CMsgConnectedPlayers::set_first_blood_happened(bool value) {
  _internal_set_first_blood_happened(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.first_blood_happened)
}

// optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
inline bool CMsgConnectedPlayers::_internal_has_poor_network_conditions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poor_network_conditions_ != nullptr);
  return value;
}
inline bool CMsgConnectedPlayers::has_poor_network_conditions() const {
  return _internal_has_poor_network_conditions();
}
inline void CMsgConnectedPlayers::clear_poor_network_conditions() {
  if (_impl_.poor_network_conditions_ != nullptr) _impl_.poor_network_conditions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgPoorNetworkConditions& CMsgConnectedPlayers::_internal_poor_network_conditions() const {
  const ::CMsgPoorNetworkConditions* p = _impl_.poor_network_conditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPoorNetworkConditions&>(
      ::_CMsgPoorNetworkConditions_default_instance_);
}
inline const ::CMsgPoorNetworkConditions& CMsgConnectedPlayers::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.poor_network_conditions)
  return _internal_poor_network_conditions();
}
inline void CMsgConnectedPlayers::unsafe_arena_set_allocated_poor_network_conditions(
    ::CMsgPoorNetworkConditions* poor_network_conditions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poor_network_conditions_);
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgConnectedPlayers.poor_network_conditions)
}
inline ::CMsgPoorNetworkConditions* CMsgConnectedPlayers::release_poor_network_conditions() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgConnectedPlayers::unsafe_arena_release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:CMsgConnectedPlayers.poor_network_conditions)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgConnectedPlayers::_internal_mutable_poor_network_conditions() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.poor_network_conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPoorNetworkConditions>(GetArenaForAllocation());
    _impl_.poor_network_conditions_ = p;
  }
  return _impl_.poor_network_conditions_;
}
inline ::CMsgPoorNetworkConditions* CMsgConnectedPlayers::mutable_poor_network_conditions() {
  ::CMsgPoorNetworkConditions* _msg = _internal_mutable_poor_network_conditions();
  // @@protoc_insertion_point(field_mutable:CMsgConnectedPlayers.poor_network_conditions)
  return _msg;
}
inline void CMsgConnectedPlayers::set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poor_network_conditions_;
  }
  if (poor_network_conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poor_network_conditions);
    if (message_arena != submessage_arena) {
      poor_network_conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poor_network_conditions, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  // @@protoc_insertion_point(field_set_allocated:CMsgConnectedPlayers.poor_network_conditions)
}

// optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
inline bool CMsgConnectedPlayers::_internal_has_send_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_send_reason() const {
  return _internal_has_send_reason();
}
inline void CMsgConnectedPlayers::clear_send_reason() {
  _impl_.send_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::_internal_send_reason() const {
  return static_cast< ::CMsgConnectedPlayers_SendReason >(_impl_.send_reason_);
}
inline ::CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::send_reason() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.send_reason)
  return _internal_send_reason();
}
inline void CMsgConnectedPlayers::_internal_set_send_reason(::CMsgConnectedPlayers_SendReason value) {
  assert(::CMsgConnectedPlayers_SendReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.send_reason_ = value;
}
inline void CMsgConnectedPlayers::set_send_reason(::CMsgConnectedPlayers_SendReason value) {
  _internal_set_send_reason(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.send_reason)
}

// optional uint32 radiant_kills = 11;
inline bool CMsgConnectedPlayers::_internal_has_radiant_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_radiant_kills() const {
  return _internal_has_radiant_kills();
}
inline void CMsgConnectedPlayers::clear_radiant_kills() {
  _impl_.radiant_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgConnectedPlayers::_internal_radiant_kills() const {
  return _impl_.radiant_kills_;
}
inline uint32_t CMsgConnectedPlayers::radiant_kills() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.radiant_kills)
  return _internal_radiant_kills();
}
inline void CMsgConnectedPlayers::_internal_set_radiant_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.radiant_kills_ = value;
}
inline void CMsgConnectedPlayers::set_radiant_kills(uint32_t value) {
  _internal_set_radiant_kills(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.radiant_kills)
}

// optional uint32 dire_kills = 12;
inline bool CMsgConnectedPlayers::_internal_has_dire_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_dire_kills() const {
  return _internal_has_dire_kills();
}
inline void CMsgConnectedPlayers::clear_dire_kills() {
  _impl_.dire_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgConnectedPlayers::_internal_dire_kills() const {
  return _impl_.dire_kills_;
}
inline uint32_t CMsgConnectedPlayers::dire_kills() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.dire_kills)
  return _internal_dire_kills();
}
inline void CMsgConnectedPlayers::_internal_set_dire_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dire_kills_ = value;
}
inline void CMsgConnectedPlayers::set_dire_kills(uint32_t value) {
  _internal_set_dire_kills(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.dire_kills)
}

// optional int32 radiant_lead = 14;
inline bool CMsgConnectedPlayers::_internal_has_radiant_lead() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_radiant_lead() const {
  return _internal_has_radiant_lead();
}
inline void CMsgConnectedPlayers::clear_radiant_lead() {
  _impl_.radiant_lead_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgConnectedPlayers::_internal_radiant_lead() const {
  return _impl_.radiant_lead_;
}
inline int32_t CMsgConnectedPlayers::radiant_lead() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.radiant_lead)
  return _internal_radiant_lead();
}
inline void CMsgConnectedPlayers::_internal_set_radiant_lead(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.radiant_lead_ = value;
}
inline void CMsgConnectedPlayers::set_radiant_lead(int32_t value) {
  _internal_set_radiant_lead(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.radiant_lead)
}

// optional uint32 building_state = 15;
inline bool CMsgConnectedPlayers::_internal_has_building_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgConnectedPlayers::has_building_state() const {
  return _internal_has_building_state();
}
inline void CMsgConnectedPlayers::clear_building_state() {
  _impl_.building_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgConnectedPlayers::_internal_building_state() const {
  return _impl_.building_state_;
}
inline uint32_t CMsgConnectedPlayers::building_state() const {
  // @@protoc_insertion_point(field_get:CMsgConnectedPlayers.building_state)
  return _internal_building_state();
}
inline void CMsgConnectedPlayers::_internal_set_building_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.building_state_ = value;
}
inline void CMsgConnectedPlayers::set_building_state(uint32_t value) {
  _internal_set_building_state(value);
  // @@protoc_insertion_point(field_set:CMsgConnectedPlayers.building_state)
}

// -------------------------------------------------------------------

// CMsgGameServerInfo

// optional fixed32 server_public_ip_addr = 1;
inline bool CMsgGameServerInfo::_internal_has_server_public_ip_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_public_ip_addr() const {
  return _internal_has_server_public_ip_addr();
}
inline void CMsgGameServerInfo::clear_server_public_ip_addr() {
  _impl_.server_public_ip_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_public_ip_addr() const {
  return _impl_.server_public_ip_addr_;
}
inline uint32_t CMsgGameServerInfo::server_public_ip_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_public_ip_addr)
  return _internal_server_public_ip_addr();
}
inline void CMsgGameServerInfo::_internal_set_server_public_ip_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.server_public_ip_addr_ = value;
}
inline void CMsgGameServerInfo::set_server_public_ip_addr(uint32_t value) {
  _internal_set_server_public_ip_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_public_ip_addr)
}

// optional fixed32 server_private_ip_addr = 2;
inline bool CMsgGameServerInfo::_internal_has_server_private_ip_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_private_ip_addr() const {
  return _internal_has_server_private_ip_addr();
}
inline void CMsgGameServerInfo::clear_server_private_ip_addr() {
  _impl_.server_private_ip_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_private_ip_addr() const {
  return _impl_.server_private_ip_addr_;
}
inline uint32_t CMsgGameServerInfo::server_private_ip_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_private_ip_addr)
  return _internal_server_private_ip_addr();
}
inline void CMsgGameServerInfo::_internal_set_server_private_ip_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.server_private_ip_addr_ = value;
}
inline void CMsgGameServerInfo::set_server_private_ip_addr(uint32_t value) {
  _internal_set_server_private_ip_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_private_ip_addr)
}

// optional uint32 server_port = 3;
inline bool CMsgGameServerInfo::_internal_has_server_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_port() const {
  return _internal_has_server_port();
}
inline void CMsgGameServerInfo::clear_server_port() {
  _impl_.server_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_port() const {
  return _impl_.server_port_;
}
inline uint32_t CMsgGameServerInfo::server_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_port)
  return _internal_server_port();
}
inline void CMsgGameServerInfo::_internal_set_server_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.server_port_ = value;
}
inline void CMsgGameServerInfo::set_server_port(uint32_t value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_port)
}

// optional uint32 server_tv_port = 4;
inline bool CMsgGameServerInfo::_internal_has_server_tv_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_tv_port() const {
  return _internal_has_server_tv_port();
}
inline void CMsgGameServerInfo::clear_server_tv_port() {
  _impl_.server_tv_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_tv_port() const {
  return _impl_.server_tv_port_;
}
inline uint32_t CMsgGameServerInfo::server_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_tv_port)
  return _internal_server_tv_port();
}
inline void CMsgGameServerInfo::_internal_set_server_tv_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.server_tv_port_ = value;
}
inline void CMsgGameServerInfo::set_server_tv_port(uint32_t value) {
  _internal_set_server_tv_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_tv_port)
}

// optional uint32 assigned_server_tv_port = 22;
inline bool CMsgGameServerInfo::_internal_has_assigned_server_tv_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_assigned_server_tv_port() const {
  return _internal_has_assigned_server_tv_port();
}
inline void CMsgGameServerInfo::clear_assigned_server_tv_port() {
  _impl_.assigned_server_tv_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgGameServerInfo::_internal_assigned_server_tv_port() const {
  return _impl_.assigned_server_tv_port_;
}
inline uint32_t CMsgGameServerInfo::assigned_server_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.assigned_server_tv_port)
  return _internal_assigned_server_tv_port();
}
inline void CMsgGameServerInfo::_internal_set_assigned_server_tv_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.assigned_server_tv_port_ = value;
}
inline void CMsgGameServerInfo::set_assigned_server_tv_port(uint32_t value) {
  _internal_set_assigned_server_tv_port(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.assigned_server_tv_port)
}

// optional bytes legacy_server_steamdatagram_address = 27;
inline bool CMsgGameServerInfo::_internal_has_legacy_server_steamdatagram_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_legacy_server_steamdatagram_address() const {
  return _internal_has_legacy_server_steamdatagram_address();
}
inline void CMsgGameServerInfo::clear_legacy_server_steamdatagram_address() {
  _impl_.legacy_server_steamdatagram_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameServerInfo::legacy_server_steamdatagram_address() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.legacy_server_steamdatagram_address)
  return _internal_legacy_server_steamdatagram_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerInfo::set_legacy_server_steamdatagram_address(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.legacy_server_steamdatagram_address_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.legacy_server_steamdatagram_address)
}
inline std::string* CMsgGameServerInfo::mutable_legacy_server_steamdatagram_address() {
  std::string* _s = _internal_mutable_legacy_server_steamdatagram_address();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerInfo.legacy_server_steamdatagram_address)
  return _s;
}
inline const std::string& CMsgGameServerInfo::_internal_legacy_server_steamdatagram_address() const {
  return _impl_.legacy_server_steamdatagram_address_.Get();
}
inline void CMsgGameServerInfo::_internal_set_legacy_server_steamdatagram_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.legacy_server_steamdatagram_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerInfo::_internal_mutable_legacy_server_steamdatagram_address() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.legacy_server_steamdatagram_address_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameServerInfo::release_legacy_server_steamdatagram_address() {
  // @@protoc_insertion_point(field_release:CMsgGameServerInfo.legacy_server_steamdatagram_address)
  if (!_internal_has_legacy_server_steamdatagram_address()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.legacy_server_steamdatagram_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legacy_server_steamdatagram_address_.IsDefault()) {
    _impl_.legacy_server_steamdatagram_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerInfo::set_allocated_legacy_server_steamdatagram_address(std::string* legacy_server_steamdatagram_address) {
  if (legacy_server_steamdatagram_address != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.legacy_server_steamdatagram_address_.SetAllocated(legacy_server_steamdatagram_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.legacy_server_steamdatagram_address_.IsDefault()) {
    _impl_.legacy_server_steamdatagram_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerInfo.legacy_server_steamdatagram_address)
}

// optional string server_key = 5;
inline bool CMsgGameServerInfo::_internal_has_server_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_key() const {
  return _internal_has_server_key();
}
inline void CMsgGameServerInfo::clear_server_key() {
  _impl_.server_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerInfo::server_key() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_key)
  return _internal_server_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerInfo::set_server_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.server_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_key)
}
inline std::string* CMsgGameServerInfo::mutable_server_key() {
  std::string* _s = _internal_mutable_server_key();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerInfo.server_key)
  return _s;
}
inline const std::string& CMsgGameServerInfo::_internal_server_key() const {
  return _impl_.server_key_.Get();
}
inline void CMsgGameServerInfo::_internal_set_server_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerInfo::_internal_mutable_server_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.server_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameServerInfo::release_server_key() {
  // @@protoc_insertion_point(field_release:CMsgGameServerInfo.server_key)
  if (!_internal_has_server_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.server_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_key_.IsDefault()) {
    _impl_.server_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerInfo::set_allocated_server_key(std::string* server_key) {
  if (server_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.server_key_.SetAllocated(server_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_key_.IsDefault()) {
    _impl_.server_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerInfo.server_key)
}

// optional bool server_hibernation = 6;
inline bool CMsgGameServerInfo::_internal_has_server_hibernation() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_hibernation() const {
  return _internal_has_server_hibernation();
}
inline void CMsgGameServerInfo::clear_server_hibernation() {
  _impl_.server_hibernation_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool CMsgGameServerInfo::_internal_server_hibernation() const {
  return _impl_.server_hibernation_;
}
inline bool CMsgGameServerInfo::server_hibernation() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_hibernation)
  return _internal_server_hibernation();
}
inline void CMsgGameServerInfo::_internal_set_server_hibernation(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.server_hibernation_ = value;
}
inline void CMsgGameServerInfo::set_server_hibernation(bool value) {
  _internal_set_server_hibernation(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_hibernation)
}

// optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
inline bool CMsgGameServerInfo::_internal_has_server_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_type() const {
  return _internal_has_server_type();
}
inline void CMsgGameServerInfo::clear_server_type() {
  _impl_.server_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::CMsgGameServerInfo_ServerType CMsgGameServerInfo::_internal_server_type() const {
  return static_cast< ::CMsgGameServerInfo_ServerType >(_impl_.server_type_);
}
inline ::CMsgGameServerInfo_ServerType CMsgGameServerInfo::server_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_type)
  return _internal_server_type();
}
inline void CMsgGameServerInfo::_internal_set_server_type(::CMsgGameServerInfo_ServerType value) {
  assert(::CMsgGameServerInfo_ServerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.server_type_ = value;
}
inline void CMsgGameServerInfo::set_server_type(::CMsgGameServerInfo_ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_type)
}

// optional uint32 server_region = 8;
inline bool CMsgGameServerInfo::_internal_has_server_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgGameServerInfo::clear_server_region() {
  _impl_.server_region_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_region() const {
  return _impl_.server_region_;
}
inline uint32_t CMsgGameServerInfo::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_region)
  return _internal_server_region();
}
inline void CMsgGameServerInfo::_internal_set_server_region(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.server_region_ = value;
}
inline void CMsgGameServerInfo::set_server_region(uint32_t value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_region)
}

// optional float server_loadavg = 9;
inline bool CMsgGameServerInfo::_internal_has_server_loadavg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_loadavg() const {
  return _internal_has_server_loadavg();
}
inline void CMsgGameServerInfo::clear_server_loadavg() {
  _impl_.server_loadavg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CMsgGameServerInfo::_internal_server_loadavg() const {
  return _impl_.server_loadavg_;
}
inline float CMsgGameServerInfo::server_loadavg() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_loadavg)
  return _internal_server_loadavg();
}
inline void CMsgGameServerInfo::_internal_set_server_loadavg(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.server_loadavg_ = value;
}
inline void CMsgGameServerInfo::set_server_loadavg(float value) {
  _internal_set_server_loadavg(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_loadavg)
}

// optional float server_tv_broadcast_time = 10;
inline bool CMsgGameServerInfo::_internal_has_server_tv_broadcast_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_tv_broadcast_time() const {
  return _internal_has_server_tv_broadcast_time();
}
inline void CMsgGameServerInfo::clear_server_tv_broadcast_time() {
  _impl_.server_tv_broadcast_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgGameServerInfo::_internal_server_tv_broadcast_time() const {
  return _impl_.server_tv_broadcast_time_;
}
inline float CMsgGameServerInfo::server_tv_broadcast_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_tv_broadcast_time)
  return _internal_server_tv_broadcast_time();
}
inline void CMsgGameServerInfo::_internal_set_server_tv_broadcast_time(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.server_tv_broadcast_time_ = value;
}
inline void CMsgGameServerInfo::set_server_tv_broadcast_time(float value) {
  _internal_set_server_tv_broadcast_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_tv_broadcast_time)
}

// optional float server_game_time = 11;
inline bool CMsgGameServerInfo::_internal_has_server_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_game_time() const {
  return _internal_has_server_game_time();
}
inline void CMsgGameServerInfo::clear_server_game_time() {
  _impl_.server_game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CMsgGameServerInfo::_internal_server_game_time() const {
  return _impl_.server_game_time_;
}
inline float CMsgGameServerInfo::server_game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_game_time)
  return _internal_server_game_time();
}
inline void CMsgGameServerInfo::_internal_set_server_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.server_game_time_ = value;
}
inline void CMsgGameServerInfo::set_server_game_time(float value) {
  _internal_set_server_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_game_time)
}

// optional fixed64 server_relay_connected_steam_id = 12;
inline bool CMsgGameServerInfo::_internal_has_server_relay_connected_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_relay_connected_steam_id() const {
  return _internal_has_server_relay_connected_steam_id();
}
inline void CMsgGameServerInfo::clear_server_relay_connected_steam_id() {
  _impl_.server_relay_connected_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint64_t CMsgGameServerInfo::_internal_server_relay_connected_steam_id() const {
  return _impl_.server_relay_connected_steam_id_;
}
inline uint64_t CMsgGameServerInfo::server_relay_connected_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_relay_connected_steam_id)
  return _internal_server_relay_connected_steam_id();
}
inline void CMsgGameServerInfo::_internal_set_server_relay_connected_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.server_relay_connected_steam_id_ = value;
}
inline void CMsgGameServerInfo::set_server_relay_connected_steam_id(uint64_t value) {
  _internal_set_server_relay_connected_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_relay_connected_steam_id)
}

// optional uint32 relay_slots_max = 13;
inline bool CMsgGameServerInfo::_internal_has_relay_slots_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_relay_slots_max() const {
  return _internal_has_relay_slots_max();
}
inline void CMsgGameServerInfo::clear_relay_slots_max() {
  _impl_.relay_slots_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGameServerInfo::_internal_relay_slots_max() const {
  return _impl_.relay_slots_max_;
}
inline uint32_t CMsgGameServerInfo::relay_slots_max() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relay_slots_max)
  return _internal_relay_slots_max();
}
inline void CMsgGameServerInfo::_internal_set_relay_slots_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.relay_slots_max_ = value;
}
inline void CMsgGameServerInfo::set_relay_slots_max(uint32_t value) {
  _internal_set_relay_slots_max(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relay_slots_max)
}

// optional int32 relays_connected = 14;
inline bool CMsgGameServerInfo::_internal_has_relays_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_relays_connected() const {
  return _internal_has_relays_connected();
}
inline void CMsgGameServerInfo::clear_relays_connected() {
  _impl_.relays_connected_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CMsgGameServerInfo::_internal_relays_connected() const {
  return _impl_.relays_connected_;
}
inline int32_t CMsgGameServerInfo::relays_connected() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relays_connected)
  return _internal_relays_connected();
}
inline void CMsgGameServerInfo::_internal_set_relays_connected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.relays_connected_ = value;
}
inline void CMsgGameServerInfo::set_relays_connected(int32_t value) {
  _internal_set_relays_connected(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relays_connected)
}

// optional int32 relay_clients_connected = 15;
inline bool CMsgGameServerInfo::_internal_has_relay_clients_connected() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_relay_clients_connected() const {
  return _internal_has_relay_clients_connected();
}
inline void CMsgGameServerInfo::clear_relay_clients_connected() {
  _impl_.relay_clients_connected_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgGameServerInfo::_internal_relay_clients_connected() const {
  return _impl_.relay_clients_connected_;
}
inline int32_t CMsgGameServerInfo::relay_clients_connected() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relay_clients_connected)
  return _internal_relay_clients_connected();
}
inline void CMsgGameServerInfo::_internal_set_relay_clients_connected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.relay_clients_connected_ = value;
}
inline void CMsgGameServerInfo::set_relay_clients_connected(int32_t value) {
  _internal_set_relay_clients_connected(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relay_clients_connected)
}

// optional fixed64 relayed_game_server_steam_id = 16;
inline bool CMsgGameServerInfo::_internal_has_relayed_game_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_relayed_game_server_steam_id() const {
  return _internal_has_relayed_game_server_steam_id();
}
inline void CMsgGameServerInfo::clear_relayed_game_server_steam_id() {
  _impl_.relayed_game_server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint64_t CMsgGameServerInfo::_internal_relayed_game_server_steam_id() const {
  return _impl_.relayed_game_server_steam_id_;
}
inline uint64_t CMsgGameServerInfo::relayed_game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.relayed_game_server_steam_id)
  return _internal_relayed_game_server_steam_id();
}
inline void CMsgGameServerInfo::_internal_set_relayed_game_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.relayed_game_server_steam_id_ = value;
}
inline void CMsgGameServerInfo::set_relayed_game_server_steam_id(uint64_t value) {
  _internal_set_relayed_game_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.relayed_game_server_steam_id)
}

// optional uint32 parent_relay_count = 17;
inline bool CMsgGameServerInfo::_internal_has_parent_relay_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_parent_relay_count() const {
  return _internal_has_parent_relay_count();
}
inline void CMsgGameServerInfo::clear_parent_relay_count() {
  _impl_.parent_relay_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgGameServerInfo::_internal_parent_relay_count() const {
  return _impl_.parent_relay_count_;
}
inline uint32_t CMsgGameServerInfo::parent_relay_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.parent_relay_count)
  return _internal_parent_relay_count();
}
inline void CMsgGameServerInfo::_internal_set_parent_relay_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.parent_relay_count_ = value;
}
inline void CMsgGameServerInfo::set_parent_relay_count(uint32_t value) {
  _internal_set_parent_relay_count(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.parent_relay_count)
}

// optional fixed64 tv_secret_code = 18;
inline bool CMsgGameServerInfo::_internal_has_tv_secret_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_tv_secret_code() const {
  return _internal_has_tv_secret_code();
}
inline void CMsgGameServerInfo::clear_tv_secret_code() {
  _impl_.tv_secret_code_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint64_t CMsgGameServerInfo::_internal_tv_secret_code() const {
  return _impl_.tv_secret_code_;
}
inline uint64_t CMsgGameServerInfo::tv_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.tv_secret_code)
  return _internal_tv_secret_code();
}
inline void CMsgGameServerInfo::_internal_set_tv_secret_code(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.tv_secret_code_ = value;
}
inline void CMsgGameServerInfo::set_tv_secret_code(uint64_t value) {
  _internal_set_tv_secret_code(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.tv_secret_code)
}

// optional uint32 server_version = 19;
inline bool CMsgGameServerInfo::_internal_has_server_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGameServerInfo::clear_server_version() {
  _impl_.server_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_version() const {
  return _impl_.server_version_;
}
inline uint32_t CMsgGameServerInfo::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_version)
  return _internal_server_version();
}
inline void CMsgGameServerInfo::_internal_set_server_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.server_version_ = value;
}
inline void CMsgGameServerInfo::set_server_version(uint32_t value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_version)
}

// optional uint32 server_cluster = 20;
inline bool CMsgGameServerInfo::_internal_has_server_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_server_cluster() const {
  return _internal_has_server_cluster();
}
inline void CMsgGameServerInfo::clear_server_cluster() {
  _impl_.server_cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgGameServerInfo::_internal_server_cluster() const {
  return _impl_.server_cluster_;
}
inline uint32_t CMsgGameServerInfo::server_cluster() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.server_cluster)
  return _internal_server_cluster();
}
inline void CMsgGameServerInfo::_internal_set_server_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.server_cluster_ = value;
}
inline void CMsgGameServerInfo::set_server_cluster(uint32_t value) {
  _internal_set_server_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.server_cluster)
}

// optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
inline bool CMsgGameServerInfo::_internal_has_allow_custom_games() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_allow_custom_games() const {
  return _internal_has_allow_custom_games();
}
inline void CMsgGameServerInfo::clear_allow_custom_games() {
  _impl_.allow_custom_games_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::CMsgGameServerInfo_CustomGames CMsgGameServerInfo::_internal_allow_custom_games() const {
  return static_cast< ::CMsgGameServerInfo_CustomGames >(_impl_.allow_custom_games_);
}
inline ::CMsgGameServerInfo_CustomGames CMsgGameServerInfo::allow_custom_games() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.allow_custom_games)
  return _internal_allow_custom_games();
}
inline void CMsgGameServerInfo::_internal_set_allow_custom_games(::CMsgGameServerInfo_CustomGames value) {
  assert(::CMsgGameServerInfo_CustomGames_IsValid(value));
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.allow_custom_games_ = value;
}
inline void CMsgGameServerInfo::set_allow_custom_games(::CMsgGameServerInfo_CustomGames value) {
  _internal_set_allow_custom_games(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.allow_custom_games)
}

// optional uint32 build_version = 24;
inline bool CMsgGameServerInfo::_internal_has_build_version() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_build_version() const {
  return _internal_has_build_version();
}
inline void CMsgGameServerInfo::clear_build_version() {
  _impl_.build_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgGameServerInfo::_internal_build_version() const {
  return _impl_.build_version_;
}
inline uint32_t CMsgGameServerInfo::build_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.build_version)
  return _internal_build_version();
}
inline void CMsgGameServerInfo::_internal_set_build_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.build_version_ = value;
}
inline void CMsgGameServerInfo::set_build_version(uint32_t value) {
  _internal_set_build_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.build_version)
}

// optional uint32 tf_server_count = 25;
inline bool CMsgGameServerInfo::_internal_has_tf_server_count() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_tf_server_count() const {
  return _internal_has_tf_server_count();
}
inline void CMsgGameServerInfo::clear_tf_server_count() {
  _impl_.tf_server_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgGameServerInfo::_internal_tf_server_count() const {
  return _impl_.tf_server_count_;
}
inline uint32_t CMsgGameServerInfo::tf_server_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.tf_server_count)
  return _internal_tf_server_count();
}
inline void CMsgGameServerInfo::_internal_set_tf_server_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.tf_server_count_ = value;
}
inline void CMsgGameServerInfo::set_tf_server_count(uint32_t value) {
  _internal_set_tf_server_count(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.tf_server_count)
}

// optional uint32 srcds_instance = 26;
inline bool CMsgGameServerInfo::_internal_has_srcds_instance() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_srcds_instance() const {
  return _internal_has_srcds_instance();
}
inline void CMsgGameServerInfo::clear_srcds_instance() {
  _impl_.srcds_instance_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgGameServerInfo::_internal_srcds_instance() const {
  return _impl_.srcds_instance_;
}
inline uint32_t CMsgGameServerInfo::srcds_instance() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.srcds_instance)
  return _internal_srcds_instance();
}
inline void CMsgGameServerInfo::_internal_set_srcds_instance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.srcds_instance_ = value;
}
inline void CMsgGameServerInfo::set_srcds_instance(uint32_t value) {
  _internal_set_srcds_instance(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.srcds_instance)
}

// optional bool dev_force_server_type = 28;
inline bool CMsgGameServerInfo::_internal_has_dev_force_server_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_dev_force_server_type() const {
  return _internal_has_dev_force_server_type();
}
inline void CMsgGameServerInfo::clear_dev_force_server_type() {
  _impl_.dev_force_server_type_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool CMsgGameServerInfo::_internal_dev_force_server_type() const {
  return _impl_.dev_force_server_type_;
}
inline bool CMsgGameServerInfo::dev_force_server_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.dev_force_server_type)
  return _internal_dev_force_server_type();
}
inline void CMsgGameServerInfo::_internal_set_dev_force_server_type(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.dev_force_server_type_ = value;
}
inline void CMsgGameServerInfo::set_dev_force_server_type(bool value) {
  _internal_set_dev_force_server_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.dev_force_server_type)
}

// optional bool is_recording_match_training_data = 29;
inline bool CMsgGameServerInfo::_internal_has_is_recording_match_training_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgGameServerInfo::has_is_recording_match_training_data() const {
  return _internal_has_is_recording_match_training_data();
}
inline void CMsgGameServerInfo::clear_is_recording_match_training_data() {
  _impl_.is_recording_match_training_data_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool CMsgGameServerInfo::_internal_is_recording_match_training_data() const {
  return _impl_.is_recording_match_training_data_;
}
inline bool CMsgGameServerInfo::is_recording_match_training_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerInfo.is_recording_match_training_data)
  return _internal_is_recording_match_training_data();
}
inline void CMsgGameServerInfo::_internal_set_is_recording_match_training_data(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.is_recording_match_training_data_ = value;
}
inline void CMsgGameServerInfo::set_is_recording_match_training_data(bool value) {
  _internal_set_is_recording_match_training_data(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerInfo.is_recording_match_training_data)
}

// -------------------------------------------------------------------

// CMsgLeaverDetected

// optional fixed64 steam_id = 1;
inline bool CMsgLeaverDetected::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLeaverDetected::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgLeaverDetected::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgLeaverDetected::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgLeaverDetected::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.steam_id)
  return _internal_steam_id();
}
inline void CMsgLeaverDetected::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steam_id_ = value;
}
inline void CMsgLeaverDetected::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.steam_id)
}

// optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
inline bool CMsgLeaverDetected::_internal_has_leaver_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLeaverDetected::has_leaver_status() const {
  return _internal_has_leaver_status();
}
inline void CMsgLeaverDetected::clear_leaver_status() {
  _impl_.leaver_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::DOTALeaverStatus_t CMsgLeaverDetected::_internal_leaver_status() const {
  return static_cast< ::DOTALeaverStatus_t >(_impl_.leaver_status_);
}
inline ::DOTALeaverStatus_t CMsgLeaverDetected::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.leaver_status)
  return _internal_leaver_status();
}
inline void CMsgLeaverDetected::_internal_set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.leaver_status_ = value;
}
inline void CMsgLeaverDetected::set_leaver_status(::DOTALeaverStatus_t value) {
  _internal_set_leaver_status(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.leaver_status)
}

// optional .CMsgLeaverState leaver_state = 4;
inline bool CMsgLeaverDetected::_internal_has_leaver_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leaver_state_ != nullptr);
  return value;
}
inline bool CMsgLeaverDetected::has_leaver_state() const {
  return _internal_has_leaver_state();
}
inline const ::CMsgLeaverState& CMsgLeaverDetected::_internal_leaver_state() const {
  const ::CMsgLeaverState* p = _impl_.leaver_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgLeaverState&>(
      ::_CMsgLeaverState_default_instance_);
}
inline const ::CMsgLeaverState& CMsgLeaverDetected::leaver_state() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.leaver_state)
  return _internal_leaver_state();
}
inline void CMsgLeaverDetected::unsafe_arena_set_allocated_leaver_state(
    ::CMsgLeaverState* leaver_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaver_state_);
  }
  _impl_.leaver_state_ = leaver_state;
  if (leaver_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgLeaverDetected.leaver_state)
}
inline ::CMsgLeaverState* CMsgLeaverDetected::release_leaver_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLeaverState* temp = _impl_.leaver_state_;
  _impl_.leaver_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgLeaverState* CMsgLeaverDetected::unsafe_arena_release_leaver_state() {
  // @@protoc_insertion_point(field_release:CMsgLeaverDetected.leaver_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLeaverState* temp = _impl_.leaver_state_;
  _impl_.leaver_state_ = nullptr;
  return temp;
}
inline ::CMsgLeaverState* CMsgLeaverDetected::_internal_mutable_leaver_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leaver_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgLeaverState>(GetArenaForAllocation());
    _impl_.leaver_state_ = p;
  }
  return _impl_.leaver_state_;
}
inline ::CMsgLeaverState* CMsgLeaverDetected::mutable_leaver_state() {
  ::CMsgLeaverState* _msg = _internal_mutable_leaver_state();
  // @@protoc_insertion_point(field_mutable:CMsgLeaverDetected.leaver_state)
  return _msg;
}
inline void CMsgLeaverDetected::set_allocated_leaver_state(::CMsgLeaverState* leaver_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leaver_state_);
  }
  if (leaver_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leaver_state));
    if (message_arena != submessage_arena) {
      leaver_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leaver_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leaver_state_ = leaver_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgLeaverDetected.leaver_state)
}

// optional uint32 server_cluster = 5;
inline bool CMsgLeaverDetected::_internal_has_server_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLeaverDetected::has_server_cluster() const {
  return _internal_has_server_cluster();
}
inline void CMsgLeaverDetected::clear_server_cluster() {
  _impl_.server_cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgLeaverDetected::_internal_server_cluster() const {
  return _impl_.server_cluster_;
}
inline uint32_t CMsgLeaverDetected::server_cluster() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.server_cluster)
  return _internal_server_cluster();
}
inline void CMsgLeaverDetected::_internal_set_server_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.server_cluster_ = value;
}
inline void CMsgLeaverDetected::set_server_cluster(uint32_t value) {
  _internal_set_server_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.server_cluster)
}

// optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
inline bool CMsgLeaverDetected::_internal_has_disconnect_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLeaverDetected::has_disconnect_reason() const {
  return _internal_has_disconnect_reason();
}
inline void CMsgLeaverDetected::clear_disconnect_reason() {
  _impl_.disconnect_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::ENetworkDisconnectionReason CMsgLeaverDetected::_internal_disconnect_reason() const {
  return static_cast< ::ENetworkDisconnectionReason >(_impl_.disconnect_reason_);
}
inline ::ENetworkDisconnectionReason CMsgLeaverDetected::disconnect_reason() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.disconnect_reason)
  return _internal_disconnect_reason();
}
inline void CMsgLeaverDetected::_internal_set_disconnect_reason(::ENetworkDisconnectionReason value) {
  assert(::ENetworkDisconnectionReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.disconnect_reason_ = value;
}
inline void CMsgLeaverDetected::set_disconnect_reason(::ENetworkDisconnectionReason value) {
  _internal_set_disconnect_reason(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverDetected.disconnect_reason)
}

// optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
inline bool CMsgLeaverDetected::_internal_has_poor_network_conditions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poor_network_conditions_ != nullptr);
  return value;
}
inline bool CMsgLeaverDetected::has_poor_network_conditions() const {
  return _internal_has_poor_network_conditions();
}
inline void CMsgLeaverDetected::clear_poor_network_conditions() {
  if (_impl_.poor_network_conditions_ != nullptr) _impl_.poor_network_conditions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPoorNetworkConditions& CMsgLeaverDetected::_internal_poor_network_conditions() const {
  const ::CMsgPoorNetworkConditions* p = _impl_.poor_network_conditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPoorNetworkConditions&>(
      ::_CMsgPoorNetworkConditions_default_instance_);
}
inline const ::CMsgPoorNetworkConditions& CMsgLeaverDetected::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetected.poor_network_conditions)
  return _internal_poor_network_conditions();
}
inline void CMsgLeaverDetected::unsafe_arena_set_allocated_poor_network_conditions(
    ::CMsgPoorNetworkConditions* poor_network_conditions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poor_network_conditions_);
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgLeaverDetected.poor_network_conditions)
}
inline ::CMsgPoorNetworkConditions* CMsgLeaverDetected::release_poor_network_conditions() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgLeaverDetected::unsafe_arena_release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:CMsgLeaverDetected.poor_network_conditions)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgLeaverDetected::_internal_mutable_poor_network_conditions() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.poor_network_conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPoorNetworkConditions>(GetArenaForAllocation());
    _impl_.poor_network_conditions_ = p;
  }
  return _impl_.poor_network_conditions_;
}
inline ::CMsgPoorNetworkConditions* CMsgLeaverDetected::mutable_poor_network_conditions() {
  ::CMsgPoorNetworkConditions* _msg = _internal_mutable_poor_network_conditions();
  // @@protoc_insertion_point(field_mutable:CMsgLeaverDetected.poor_network_conditions)
  return _msg;
}
inline void CMsgLeaverDetected::set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poor_network_conditions_;
  }
  if (poor_network_conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poor_network_conditions);
    if (message_arena != submessage_arena) {
      poor_network_conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poor_network_conditions, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  // @@protoc_insertion_point(field_set_allocated:CMsgLeaverDetected.poor_network_conditions)
}

// -------------------------------------------------------------------

// CMsgLeaverDetectedResponse

// optional uint32 result = 1;
inline bool CMsgLeaverDetectedResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLeaverDetectedResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgLeaverDetectedResponse::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLeaverDetectedResponse::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t CMsgLeaverDetectedResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgLeaverDetectedResponse.result)
  return _internal_result();
}
inline void CMsgLeaverDetectedResponse::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgLeaverDetectedResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgLeaverDetectedResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyFinalPlayerStats

// repeated .CMsgDOTAFantasyPlayerStats stats = 2;
inline int CMsgDOTAFantasyFinalPlayerStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgDOTAFantasyFinalPlayerStats::stats_size() const {
  return _internal_stats_size();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyFinalPlayerStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyFinalPlayerStats.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyFinalPlayerStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyFinalPlayerStats.stats)
  return &_impl_.stats_;
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyFinalPlayerStats::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyFinalPlayerStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyFinalPlayerStats.stats)
  return _internal_stats(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyFinalPlayerStats::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyFinalPlayerStats::add_stats() {
  ::CMsgDOTAFantasyPlayerStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyFinalPlayerStats.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyFinalPlayerStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyFinalPlayerStats.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLivePlayerStats

// repeated .CMsgDOTAFantasyPlayerStats stats = 2;
inline int CMsgDOTAFantasyLivePlayerStats::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgDOTAFantasyLivePlayerStats::stats_size() const {
  return _internal_stats_size();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyLivePlayerStats::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLivePlayerStats.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyLivePlayerStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLivePlayerStats.stats)
  return &_impl_.stats_;
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyLivePlayerStats::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyLivePlayerStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLivePlayerStats.stats)
  return _internal_stats(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyLivePlayerStats::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyLivePlayerStats::add_stats() {
  ::CMsgDOTAFantasyPlayerStats* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLivePlayerStats.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyLivePlayerStats::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLivePlayerStats.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// CMsgServerToGCRealtimeStats

// optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
inline bool CMsgServerToGCRealtimeStats::_internal_has_delayed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.delayed_ != nullptr);
  return value;
}
inline bool CMsgServerToGCRealtimeStats::has_delayed() const {
  return _internal_has_delayed();
}
inline const ::CMsgDOTARealtimeGameStatsTerse& CMsgServerToGCRealtimeStats::_internal_delayed() const {
  const ::CMsgDOTARealtimeGameStatsTerse* p = _impl_.delayed_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTARealtimeGameStatsTerse&>(
      ::_CMsgDOTARealtimeGameStatsTerse_default_instance_);
}
inline const ::CMsgDOTARealtimeGameStatsTerse& CMsgServerToGCRealtimeStats::delayed() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRealtimeStats.delayed)
  return _internal_delayed();
}
inline void CMsgServerToGCRealtimeStats::unsafe_arena_set_allocated_delayed(
    ::CMsgDOTARealtimeGameStatsTerse* delayed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delayed_);
  }
  _impl_.delayed_ = delayed;
  if (delayed) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCRealtimeStats.delayed)
}
inline ::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::release_delayed() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStatsTerse* temp = _impl_.delayed_;
  _impl_.delayed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::unsafe_arena_release_delayed() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCRealtimeStats.delayed)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTARealtimeGameStatsTerse* temp = _impl_.delayed_;
  _impl_.delayed_ = nullptr;
  return temp;
}
inline ::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::_internal_mutable_delayed() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.delayed_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTARealtimeGameStatsTerse>(GetArenaForAllocation());
    _impl_.delayed_ = p;
  }
  return _impl_.delayed_;
}
inline ::CMsgDOTARealtimeGameStatsTerse* CMsgServerToGCRealtimeStats::mutable_delayed() {
  ::CMsgDOTARealtimeGameStatsTerse* _msg = _internal_mutable_delayed();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCRealtimeStats.delayed)
  return _msg;
}
inline void CMsgServerToGCRealtimeStats::set_allocated_delayed(::CMsgDOTARealtimeGameStatsTerse* delayed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delayed_);
  }
  if (delayed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delayed));
    if (message_arena != submessage_arena) {
      delayed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delayed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.delayed_ = delayed;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCRealtimeStats.delayed)
}

// -------------------------------------------------------------------

// CMsgGCToServerRealtimeStatsStartStop

// optional bool delayed = 1;
inline bool CMsgGCToServerRealtimeStatsStartStop::_internal_has_delayed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerRealtimeStatsStartStop::has_delayed() const {
  return _internal_has_delayed();
}
inline void CMsgGCToServerRealtimeStatsStartStop::clear_delayed() {
  _impl_.delayed_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCToServerRealtimeStatsStartStop::_internal_delayed() const {
  return _impl_.delayed_;
}
inline bool CMsgGCToServerRealtimeStatsStartStop::delayed() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerRealtimeStatsStartStop.delayed)
  return _internal_delayed();
}
inline void CMsgGCToServerRealtimeStatsStartStop::_internal_set_delayed(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.delayed_ = value;
}
inline void CMsgGCToServerRealtimeStatsStartStop::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerRealtimeStatsStartStop.delayed)
}

// -------------------------------------------------------------------

// CMsgGCToServerUpdateSteamBroadcasting

// optional bool active = 1;
inline bool CMsgGCToServerUpdateSteamBroadcasting::_internal_has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerUpdateSteamBroadcasting::has_active() const {
  return _internal_has_active();
}
inline void CMsgGCToServerUpdateSteamBroadcasting::clear_active() {
  _impl_.active_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCToServerUpdateSteamBroadcasting::_internal_active() const {
  return _impl_.active_;
}
inline bool CMsgGCToServerUpdateSteamBroadcasting::active() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerUpdateSteamBroadcasting.active)
  return _internal_active();
}
inline void CMsgGCToServerUpdateSteamBroadcasting::_internal_set_active(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_ = value;
}
inline void CMsgGCToServerUpdateSteamBroadcasting::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerUpdateSteamBroadcasting.active)
}

// -------------------------------------------------------------------

// CMsgSignOutGameplayStats_CPlayer

// optional fixed64 steam_id = 1;
inline bool CMsgSignOutGameplayStats_CPlayer::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutGameplayStats_CPlayer::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgSignOutGameplayStats_CPlayer::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSignOutGameplayStats_CPlayer::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgSignOutGameplayStats_CPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CPlayer.steam_id)
  return _internal_steam_id();
}
inline void CMsgSignOutGameplayStats_CPlayer::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgSignOutGameplayStats_CPlayer::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGameplayStats.CPlayer.steam_id)
}

// optional uint32 player_slot = 2;
inline bool CMsgSignOutGameplayStats_CPlayer::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutGameplayStats_CPlayer::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgSignOutGameplayStats_CPlayer::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutGameplayStats_CPlayer::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgSignOutGameplayStats_CPlayer::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CPlayer.player_slot)
  return _internal_player_slot();
}
inline void CMsgSignOutGameplayStats_CPlayer::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_slot_ = value;
}
inline void CMsgSignOutGameplayStats_CPlayer::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGameplayStats.CPlayer.player_slot)
}

// optional uint32 hero_id = 3;
inline bool CMsgSignOutGameplayStats_CPlayer::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutGameplayStats_CPlayer::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSignOutGameplayStats_CPlayer::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutGameplayStats_CPlayer::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSignOutGameplayStats_CPlayer::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CPlayer.hero_id)
  return _internal_hero_id();
}
inline void CMsgSignOutGameplayStats_CPlayer::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgSignOutGameplayStats_CPlayer::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGameplayStats.CPlayer.hero_id)
}

// repeated .CMatchPlayerTimedStats timed_player_stats = 4;
inline int CMsgSignOutGameplayStats_CPlayer::_internal_timed_player_stats_size() const {
  return _impl_.timed_player_stats_.size();
}
inline int CMsgSignOutGameplayStats_CPlayer::timed_player_stats_size() const {
  return _internal_timed_player_stats_size();
}
inline ::CMatchPlayerTimedStats* CMsgSignOutGameplayStats_CPlayer::mutable_timed_player_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGameplayStats.CPlayer.timed_player_stats)
  return _impl_.timed_player_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerTimedStats >*
CMsgSignOutGameplayStats_CPlayer::mutable_timed_player_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGameplayStats.CPlayer.timed_player_stats)
  return &_impl_.timed_player_stats_;
}
inline const ::CMatchPlayerTimedStats& CMsgSignOutGameplayStats_CPlayer::_internal_timed_player_stats(int index) const {
  return _impl_.timed_player_stats_.Get(index);
}
inline const ::CMatchPlayerTimedStats& CMsgSignOutGameplayStats_CPlayer::timed_player_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CPlayer.timed_player_stats)
  return _internal_timed_player_stats(index);
}
inline ::CMatchPlayerTimedStats* CMsgSignOutGameplayStats_CPlayer::_internal_add_timed_player_stats() {
  return _impl_.timed_player_stats_.Add();
}
inline ::CMatchPlayerTimedStats* CMsgSignOutGameplayStats_CPlayer::add_timed_player_stats() {
  ::CMatchPlayerTimedStats* _add = _internal_add_timed_player_stats();
  // @@protoc_insertion_point(field_add:CMsgSignOutGameplayStats.CPlayer.timed_player_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerTimedStats >&
CMsgSignOutGameplayStats_CPlayer::timed_player_stats() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGameplayStats.CPlayer.timed_player_stats)
  return _impl_.timed_player_stats_;
}

// -------------------------------------------------------------------

// CMsgSignOutGameplayStats_CTeam

// optional bool is_winning_team = 1;
inline bool CMsgSignOutGameplayStats_CTeam::_internal_has_is_winning_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutGameplayStats_CTeam::has_is_winning_team() const {
  return _internal_has_is_winning_team();
}
inline void CMsgSignOutGameplayStats_CTeam::clear_is_winning_team() {
  _impl_.is_winning_team_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgSignOutGameplayStats_CTeam::_internal_is_winning_team() const {
  return _impl_.is_winning_team_;
}
inline bool CMsgSignOutGameplayStats_CTeam::is_winning_team() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CTeam.is_winning_team)
  return _internal_is_winning_team();
}
inline void CMsgSignOutGameplayStats_CTeam::_internal_set_is_winning_team(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_winning_team_ = value;
}
inline void CMsgSignOutGameplayStats_CTeam::set_is_winning_team(bool value) {
  _internal_set_is_winning_team(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGameplayStats.CTeam.is_winning_team)
}

// optional bool is_radiant_team = 2;
inline bool CMsgSignOutGameplayStats_CTeam::_internal_has_is_radiant_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutGameplayStats_CTeam::has_is_radiant_team() const {
  return _internal_has_is_radiant_team();
}
inline void CMsgSignOutGameplayStats_CTeam::clear_is_radiant_team() {
  _impl_.is_radiant_team_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSignOutGameplayStats_CTeam::_internal_is_radiant_team() const {
  return _impl_.is_radiant_team_;
}
inline bool CMsgSignOutGameplayStats_CTeam::is_radiant_team() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CTeam.is_radiant_team)
  return _internal_is_radiant_team();
}
inline void CMsgSignOutGameplayStats_CTeam::_internal_set_is_radiant_team(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_radiant_team_ = value;
}
inline void CMsgSignOutGameplayStats_CTeam::set_is_radiant_team(bool value) {
  _internal_set_is_radiant_team(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGameplayStats.CTeam.is_radiant_team)
}

// repeated .CMatchTeamTimedStats timed_team_stats = 3;
inline int CMsgSignOutGameplayStats_CTeam::_internal_timed_team_stats_size() const {
  return _impl_.timed_team_stats_.size();
}
inline int CMsgSignOutGameplayStats_CTeam::timed_team_stats_size() const {
  return _internal_timed_team_stats_size();
}
inline ::CMatchTeamTimedStats* CMsgSignOutGameplayStats_CTeam::mutable_timed_team_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGameplayStats.CTeam.timed_team_stats)
  return _impl_.timed_team_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchTeamTimedStats >*
CMsgSignOutGameplayStats_CTeam::mutable_timed_team_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGameplayStats.CTeam.timed_team_stats)
  return &_impl_.timed_team_stats_;
}
inline const ::CMatchTeamTimedStats& CMsgSignOutGameplayStats_CTeam::_internal_timed_team_stats(int index) const {
  return _impl_.timed_team_stats_.Get(index);
}
inline const ::CMatchTeamTimedStats& CMsgSignOutGameplayStats_CTeam::timed_team_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CTeam.timed_team_stats)
  return _internal_timed_team_stats(index);
}
inline ::CMatchTeamTimedStats* CMsgSignOutGameplayStats_CTeam::_internal_add_timed_team_stats() {
  return _impl_.timed_team_stats_.Add();
}
inline ::CMatchTeamTimedStats* CMsgSignOutGameplayStats_CTeam::add_timed_team_stats() {
  ::CMatchTeamTimedStats* _add = _internal_add_timed_team_stats();
  // @@protoc_insertion_point(field_add:CMsgSignOutGameplayStats.CTeam.timed_team_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchTeamTimedStats >&
CMsgSignOutGameplayStats_CTeam::timed_team_stats() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGameplayStats.CTeam.timed_team_stats)
  return _impl_.timed_team_stats_;
}

// repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
inline int CMsgSignOutGameplayStats_CTeam::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgSignOutGameplayStats_CTeam::players_size() const {
  return _internal_players_size();
}
inline void CMsgSignOutGameplayStats_CTeam::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgSignOutGameplayStats_CPlayer* CMsgSignOutGameplayStats_CTeam::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGameplayStats.CTeam.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CPlayer >*
CMsgSignOutGameplayStats_CTeam::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGameplayStats.CTeam.players)
  return &_impl_.players_;
}
inline const ::CMsgSignOutGameplayStats_CPlayer& CMsgSignOutGameplayStats_CTeam::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgSignOutGameplayStats_CPlayer& CMsgSignOutGameplayStats_CTeam::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.CTeam.players)
  return _internal_players(index);
}
inline ::CMsgSignOutGameplayStats_CPlayer* CMsgSignOutGameplayStats_CTeam::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgSignOutGameplayStats_CPlayer* CMsgSignOutGameplayStats_CTeam::add_players() {
  ::CMsgSignOutGameplayStats_CPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgSignOutGameplayStats.CTeam.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CPlayer >&
CMsgSignOutGameplayStats_CTeam::players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGameplayStats.CTeam.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgSignOutGameplayStats

// repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
inline int CMsgSignOutGameplayStats::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgSignOutGameplayStats::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgSignOutGameplayStats::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgSignOutGameplayStats_CTeam* CMsgSignOutGameplayStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGameplayStats.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CTeam >*
CMsgSignOutGameplayStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGameplayStats.teams)
  return &_impl_.teams_;
}
inline const ::CMsgSignOutGameplayStats_CTeam& CMsgSignOutGameplayStats::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgSignOutGameplayStats_CTeam& CMsgSignOutGameplayStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGameplayStats.teams)
  return _internal_teams(index);
}
inline ::CMsgSignOutGameplayStats_CTeam* CMsgSignOutGameplayStats::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgSignOutGameplayStats_CTeam* CMsgSignOutGameplayStats::add_teams() {
  ::CMsgSignOutGameplayStats_CTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgSignOutGameplayStats.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGameplayStats_CTeam >&
CMsgSignOutGameplayStats::teams() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGameplayStats.teams)
  return _impl_.teams_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData

// optional uint32 dota_team = 1;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_has_dota_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::has_dota_team() const {
  return _internal_has_dota_team();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_dota_team() {
  _impl_.dota_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_dota_team() const {
  return _impl_.dota_team_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.dota_team)
  return _internal_dota_team();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_set_dota_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.dota_team_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_dota_team(uint32_t value) {
  _internal_set_dota_team(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.dota_team)
}

// optional bool winner = 2;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_has_winner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::has_winner() const {
  return _internal_has_winner();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::clear_winner() {
  _impl_.winner_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_winner() const {
  return _impl_.winner_;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.winner)
  return _internal_winner();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_internal_set_winner(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.winner_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::set_winner(bool value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData.winner)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived

// optional uint32 pre_reduction = 1;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_has_pre_reduction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::has_pre_reduction() const {
  return _internal_has_pre_reduction();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::clear_pre_reduction() {
  _impl_.pre_reduction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_pre_reduction() const {
  return _impl_.pre_reduction_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::pre_reduction() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.pre_reduction)
  return _internal_pre_reduction();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_set_pre_reduction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pre_reduction_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::set_pre_reduction(uint32_t value) {
  _internal_set_pre_reduction(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.pre_reduction)
}

// optional uint32 post_reduction = 2;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_has_post_reduction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::has_post_reduction() const {
  return _internal_has_post_reduction();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::clear_post_reduction() {
  _impl_.post_reduction_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_post_reduction() const {
  return _impl_.post_reduction_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::post_reduction() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.post_reduction)
  return _internal_post_reduction();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_set_post_reduction(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.post_reduction_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::set_post_reduction(uint32_t value) {
  _internal_set_post_reduction(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.post_reduction)
}

// optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_has_damage_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::has_damage_type() const {
  return _internal_has_damage_type();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::clear_damage_type() {
  _impl_.damage_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_damage_type() const {
  return static_cast< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType >(_impl_.damage_type_);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::damage_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.damage_type)
  return _internal_damage_type();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_internal_set_damage_type(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType value) {
  assert(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.damage_type_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::set_damage_type(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType value) {
  _internal_set_damage_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived.damage_type)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam_CPlayer

// optional fixed64 steam_id = 1;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgGameMatchSignOut_CTeam_CPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.steam_id)
  return _internal_steam_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.steam_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
  return _internal_hero_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_id)
}

// repeated int32 items = 4;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::items_size() const {
  return _internal_items_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return _internal_items(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::items() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.items)
  return _internal_mutable_items();
}

// repeated uint32 item_purchase_times = 63;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_item_purchase_times_size() const {
  return _impl_.item_purchase_times_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::item_purchase_times_size() const {
  return _internal_item_purchase_times_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_item_purchase_times() {
  _impl_.item_purchase_times_.Clear();
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_item_purchase_times(int index) const {
  return _impl_.item_purchase_times_.Get(index);
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::item_purchase_times(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.item_purchase_times)
  return _internal_item_purchase_times(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_item_purchase_times(int index, uint32_t value) {
  _impl_.item_purchase_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.item_purchase_times)
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_item_purchase_times(uint32_t value) {
  _impl_.item_purchase_times_.Add(value);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_item_purchase_times(uint32_t value) {
  _internal_add_item_purchase_times(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.item_purchase_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_item_purchase_times() const {
  return _impl_.item_purchase_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::item_purchase_times() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.item_purchase_times)
  return _internal_item_purchase_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mutable_item_purchase_times() {
  return &_impl_.item_purchase_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_item_purchase_times() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.item_purchase_times)
  return _internal_mutable_item_purchase_times();
}

// optional uint32 gold = 5;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold)
  return _internal_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gold_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold)
}

// optional uint32 kills = 6;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::kills() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.kills)
  return _internal_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.kills_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.kills)
}

// optional uint32 deaths = 7;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
  return _internal_deaths();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.deaths_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.deaths)
}

// optional uint32 assists = 8;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::assists() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.assists)
  return _internal_assists();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.assists_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.assists)
}

// optional uint32 leaver_status = 9;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_leaver_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_leaver_status() const {
  return _internal_has_leaver_status();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_leaver_status() {
  _impl_.leaver_status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_leaver_status() const {
  return _impl_.leaver_status_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::leaver_status() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
  return _internal_leaver_status();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_leaver_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.leaver_status_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_leaver_status(uint32_t value) {
  _internal_set_leaver_status(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.leaver_status)
}

// optional uint32 last_hits = 10;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
  return _internal_last_hits();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.last_hits_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.last_hits)
}

// optional uint32 denies = 11;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::denies() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.denies)
  return _internal_denies();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.denies_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.denies)
}

// optional uint32 gold_per_min = 12;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_gold_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_per_min() const {
  return _internal_has_gold_per_min();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_per_min() {
  _impl_.gold_per_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_gold_per_min() const {
  return _impl_.gold_per_min_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
  return _internal_gold_per_min();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_gold_per_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.gold_per_min_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_per_min(uint32_t value) {
  _internal_set_gold_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold_per_min)
}

// optional uint32 xp_per_minute = 13;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_xp_per_minute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_xp_per_minute() const {
  return _internal_has_xp_per_minute();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_xp_per_minute() {
  _impl_.xp_per_minute_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_xp_per_minute() const {
  return _impl_.xp_per_minute_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::xp_per_minute() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
  return _internal_xp_per_minute();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_xp_per_minute(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.xp_per_minute_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_xp_per_minute(uint32_t value) {
  _internal_set_xp_per_minute(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.xp_per_minute)
}

// optional uint32 gold_spent = 14;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_gold_spent() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_spent() const {
  return _internal_has_gold_spent();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_spent() {
  _impl_.gold_spent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_gold_spent() const {
  return _impl_.gold_spent_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
  return _internal_gold_spent();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_gold_spent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.gold_spent_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_spent(uint32_t value) {
  _internal_set_gold_spent(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold_spent)
}

// optional uint32 level = 15;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_level() const {
  return _internal_has_level();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::level() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.level)
  return _internal_level();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.level_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.level)
}

// optional uint32 scaled_hero_damage = 16;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_scaled_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_hero_damage() const {
  return _internal_has_scaled_hero_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_hero_damage() {
  _impl_.scaled_hero_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_scaled_hero_damage() const {
  return _impl_.scaled_hero_damage_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_damage)
  return _internal_scaled_hero_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_scaled_hero_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.scaled_hero_damage_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_hero_damage(uint32_t value) {
  _internal_set_scaled_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 17;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_scaled_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_tower_damage() const {
  return _internal_has_scaled_tower_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_tower_damage() {
  _impl_.scaled_tower_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_scaled_tower_damage() const {
  return _impl_.scaled_tower_damage_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_tower_damage)
  return _internal_scaled_tower_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_scaled_tower_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.scaled_tower_damage_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_tower_damage(uint32_t value) {
  _internal_set_scaled_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 18;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_scaled_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_scaled_hero_healing() const {
  return _internal_has_scaled_hero_healing();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_scaled_hero_healing() {
  _impl_.scaled_hero_healing_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_scaled_hero_healing() const {
  return _impl_.scaled_hero_healing_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_healing)
  return _internal_scaled_hero_healing();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_scaled_hero_healing(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.scaled_hero_healing_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_scaled_hero_healing(uint32_t value) {
  _internal_set_scaled_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.scaled_hero_healing)
}

// optional uint32 time_last_seen = 19;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_time_last_seen() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_last_seen() const {
  return _internal_has_time_last_seen();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_last_seen() {
  _impl_.time_last_seen_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_time_last_seen() const {
  return _impl_.time_last_seen_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::time_last_seen() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
  return _internal_time_last_seen();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_time_last_seen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.time_last_seen_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_last_seen(uint32_t value) {
  _internal_set_time_last_seen(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.time_last_seen)
}

// optional uint32 support_ability_value = 20;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_support_ability_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_ability_value() const {
  return _internal_has_support_ability_value();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_ability_value() {
  _impl_.support_ability_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_support_ability_value() const {
  return _impl_.support_ability_value_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::support_ability_value() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
  return _internal_support_ability_value();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_support_ability_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.support_ability_value_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_ability_value(uint32_t value) {
  _internal_set_support_ability_value(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.support_ability_value)
}

// optional uint64 party_id = 21;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_party_id() const {
  return _internal_has_party_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_party_id() {
  _impl_.party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_party_id() const {
  return _impl_.party_id_;
}
inline uint64_t CMsgGameMatchSignOut_CTeam_CPlayer::party_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
  return _internal_party_id();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.party_id_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_party_id(uint64_t value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.party_id)
}

// optional uint32 claimed_farm_gold = 27;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_claimed_farm_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_farm_gold() const {
  return _internal_has_claimed_farm_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_farm_gold() {
  _impl_.claimed_farm_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_claimed_farm_gold() const {
  return _impl_.claimed_farm_gold_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
  return _internal_claimed_farm_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_claimed_farm_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.claimed_farm_gold_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_farm_gold(uint32_t value) {
  _internal_set_claimed_farm_gold(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_farm_gold)
}

// optional uint32 support_gold = 28;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_support_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_support_gold() const {
  return _internal_has_support_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_support_gold() {
  _impl_.support_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_support_gold() const {
  return _impl_.support_gold_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::support_gold() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
  return _internal_support_gold();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_support_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.support_gold_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_support_gold(uint32_t value) {
  _internal_set_support_gold(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.support_gold)
}

// optional uint32 claimed_denies = 29;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_claimed_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_denies() const {
  return _internal_has_claimed_denies();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_denies() {
  _impl_.claimed_denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_claimed_denies() const {
  return _impl_.claimed_denies_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::claimed_denies() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
  return _internal_claimed_denies();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_claimed_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.claimed_denies_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_denies(uint32_t value) {
  _internal_set_claimed_denies(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_denies)
}

// optional uint32 claimed_misses = 30;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_claimed_misses() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_claimed_misses() const {
  return _internal_has_claimed_misses();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_claimed_misses() {
  _impl_.claimed_misses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_claimed_misses() const {
  return _impl_.claimed_misses_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::claimed_misses() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
  return _internal_claimed_misses();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_claimed_misses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.claimed_misses_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_claimed_misses(uint32_t value) {
  _internal_set_claimed_misses(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.claimed_misses)
}

// optional uint32 misses = 31;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_misses() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_misses() const {
  return _internal_has_misses();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_misses() {
  _impl_.misses_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_misses() const {
  return _impl_.misses_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::misses() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.misses)
  return _internal_misses();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_misses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.misses_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_misses(uint32_t value) {
  _internal_set_misses(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.misses)
}

// optional uint32 net_worth = 34;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.net_worth)
  return _internal_net_worth();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.net_worth_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.net_worth)
}

// optional uint32 hero_damage = 37;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_damage() const {
  return _internal_has_hero_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage() {
  _impl_.hero_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_damage() const {
  return _impl_.hero_damage_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
  return _internal_hero_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.hero_damage_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_damage(uint32_t value) {
  _internal_set_hero_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage)
}

// optional uint32 tower_damage = 38;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_tower_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_tower_damage() const {
  return _internal_has_tower_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_tower_damage() {
  _impl_.tower_damage_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_tower_damage() const {
  return _impl_.tower_damage_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::tower_damage() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
  return _internal_tower_damage();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_tower_damage(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.tower_damage_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_tower_damage(uint32_t value) {
  _internal_set_tower_damage(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.tower_damage)
}

// optional uint32 hero_healing = 39;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_healing() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_healing() const {
  return _internal_has_hero_healing();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_healing() {
  _impl_.hero_healing_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_healing() const {
  return _impl_.hero_healing_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::hero_healing() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
  return _internal_hero_healing();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_healing(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.hero_healing_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_healing(uint32_t value) {
  _internal_set_hero_healing(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_healing)
}

// repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_ability_upgrades_size() const {
  return _impl_.ability_upgrades_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades_size() const {
  return _internal_ability_upgrades_size();
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return _impl_.ability_upgrades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return &_impl_.ability_upgrades_;
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_ability_upgrades(int index) const {
  return _impl_.ability_upgrades_.Get(index);
}
inline const ::CMatchPlayerAbilityUpgrade& CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return _internal_ability_upgrades(index);
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_ability_upgrades() {
  return _impl_.ability_upgrades_.Add();
}
inline ::CMatchPlayerAbilityUpgrade* CMsgGameMatchSignOut_CTeam_CPlayer::add_ability_upgrades() {
  ::CMatchPlayerAbilityUpgrade* _add = _internal_add_ability_upgrades();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerAbilityUpgrade >&
CMsgGameMatchSignOut_CTeam_CPlayer::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_upgrades)
  return _impl_.ability_upgrades_;
}

// repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_additional_units_inventory_size() const {
  return _impl_.additional_units_inventory_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory_size() const {
  return _internal_additional_units_inventory_size();
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return _impl_.additional_units_inventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return &_impl_.additional_units_inventory_;
}
inline const ::CMatchAdditionalUnitInventory& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_additional_units_inventory(int index) const {
  return _impl_.additional_units_inventory_.Get(index);
}
inline const ::CMatchAdditionalUnitInventory& CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return _internal_additional_units_inventory(index);
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_additional_units_inventory() {
  return _impl_.additional_units_inventory_.Add();
}
inline ::CMatchAdditionalUnitInventory* CMsgGameMatchSignOut_CTeam_CPlayer::add_additional_units_inventory() {
  ::CMatchAdditionalUnitInventory* _add = _internal_add_additional_units_inventory();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchAdditionalUnitInventory >&
CMsgGameMatchSignOut_CTeam_CPlayer::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.additional_units_inventory)
  return _impl_.additional_units_inventory_;
}

// repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_permanent_buffs_size() const {
  return _impl_.permanent_buffs_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs_size() const {
  return _internal_permanent_buffs_size();
}
inline ::CMatchPlayerPermanentBuff* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return _impl_.permanent_buffs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return &_impl_.permanent_buffs_;
}
inline const ::CMatchPlayerPermanentBuff& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_permanent_buffs(int index) const {
  return _impl_.permanent_buffs_.Get(index);
}
inline const ::CMatchPlayerPermanentBuff& CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return _internal_permanent_buffs(index);
}
inline ::CMatchPlayerPermanentBuff* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_permanent_buffs() {
  return _impl_.permanent_buffs_.Add();
}
inline ::CMatchPlayerPermanentBuff* CMsgGameMatchSignOut_CTeam_CPlayer::add_permanent_buffs() {
  ::CMatchPlayerPermanentBuff* _add = _internal_add_permanent_buffs();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchPlayerPermanentBuff >&
CMsgGameMatchSignOut_CTeam_CPlayer::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.permanent_buffs)
  return _impl_.permanent_buffs_;
}

// optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_custom_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_game_data_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_custom_game_data() const {
  return _internal_has_custom_game_data();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_custom_game_data() {
  if (_impl_.custom_game_data_ != nullptr) _impl_.custom_game_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_custom_game_data() const {
  const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* p = _impl_.custom_game_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&>(
      ::_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_);
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& CMsgGameMatchSignOut_CTeam_CPlayer::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  return _internal_custom_game_data();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::unsafe_arena_set_allocated_custom_game_data(
    ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_game_data_);
  }
  _impl_.custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::release_custom_game_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::unsafe_arena_release_custom_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
  return temp;
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mutable_custom_game_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>(GetArenaForAllocation());
    _impl_.custom_game_data_ = p;
  }
  return _impl_.custom_game_data_;
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_custom_game_data() {
  ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* _msg = _internal_mutable_custom_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
  return _msg;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_allocated_custom_game_data(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* custom_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_game_data_;
  }
  if (custom_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_game_data);
    if (message_arena != submessage_arena) {
      custom_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.CTeam.CPlayer.custom_game_data)
}

// optional uint32 match_player_flags = 36;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_match_player_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_match_player_flags() const {
  return _internal_has_match_player_flags();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_match_player_flags() {
  _impl_.match_player_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_match_player_flags() const {
  return _impl_.match_player_flags_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::match_player_flags() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.match_player_flags)
  return _internal_match_player_flags();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_match_player_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.match_player_flags_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_match_player_flags(uint32_t value) {
  _internal_set_match_player_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.match_player_flags)
}

// repeated int32 talent_ability_ids = 41;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_talent_ability_ids_size() const {
  return _impl_.talent_ability_ids_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids_size() const {
  return _internal_talent_ability_ids_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_talent_ability_ids() {
  _impl_.talent_ability_ids_.Clear();
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_talent_ability_ids(int index) const {
  return _impl_.talent_ability_ids_.Get(index);
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return _internal_talent_ability_ids(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_talent_ability_ids(int index, int32_t value) {
  _impl_.talent_ability_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_talent_ability_ids(int32_t value) {
  _impl_.talent_ability_ids_.Add(value);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_talent_ability_ids(int32_t value) {
  _internal_add_talent_ability_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_talent_ability_ids() const {
  return _impl_.talent_ability_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::talent_ability_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return _internal_talent_ability_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mutable_talent_ability_ids() {
  return &_impl_.talent_ability_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_talent_ability_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.talent_ability_ids)
  return _internal_mutable_talent_ability_ids();
}

// optional uint32 hero_pick_order = 42;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_pick_order() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_pick_order() const {
  return _internal_has_hero_pick_order();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_pick_order() {
  _impl_.hero_pick_order_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_pick_order() const {
  return _impl_.hero_pick_order_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::hero_pick_order() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_pick_order)
  return _internal_hero_pick_order();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_pick_order(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.hero_pick_order_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_pick_order(uint32_t value) {
  _internal_set_hero_pick_order(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_pick_order)
}

// optional bool hero_was_randomed = 43;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_was_randomed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_was_randomed() const {
  return _internal_has_hero_was_randomed();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_was_randomed() {
  _impl_.hero_was_randomed_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_was_randomed() const {
  return _impl_.hero_was_randomed_;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::hero_was_randomed() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_randomed)
  return _internal_hero_was_randomed();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_was_randomed(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.hero_was_randomed_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_was_randomed(bool value) {
  _internal_set_hero_was_randomed(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_randomed)
}

// optional bool hero_was_dota_plus_suggestion = 50;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_hero_was_dota_plus_suggestion() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_hero_was_dota_plus_suggestion() const {
  return _internal_has_hero_was_dota_plus_suggestion();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_was_dota_plus_suggestion() {
  _impl_.hero_was_dota_plus_suggestion_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_was_dota_plus_suggestion() const {
  return _impl_.hero_was_dota_plus_suggestion_;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::hero_was_dota_plus_suggestion() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_dota_plus_suggestion)
  return _internal_hero_was_dota_plus_suggestion();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_hero_was_dota_plus_suggestion(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.hero_was_dota_plus_suggestion_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_hero_was_dota_plus_suggestion(bool value) {
  _internal_set_hero_was_dota_plus_suggestion(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.hero_was_dota_plus_suggestion)
}

// optional uint32 lane = 45;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::lane() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.lane)
  return _internal_lane();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.lane_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.lane)
}

// optional bool is_using_plus_guide = 47;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_is_using_plus_guide() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_is_using_plus_guide() const {
  return _internal_has_is_using_plus_guide();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_is_using_plus_guide() {
  _impl_.is_using_plus_guide_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_is_using_plus_guide() const {
  return _impl_.is_using_plus_guide_;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::is_using_plus_guide() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.is_using_plus_guide)
  return _internal_is_using_plus_guide();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_is_using_plus_guide(bool value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.is_using_plus_guide_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_is_using_plus_guide(bool value) {
  _internal_set_is_using_plus_guide(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.is_using_plus_guide)
}

// repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_damage_received_size() const {
  return _impl_.hero_damage_received_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_received_size() const {
  return _internal_hero_damage_received_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage_received() {
  _impl_.hero_damage_received_.Clear();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_hero_damage_received(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received)
  return _impl_.hero_damage_received_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_hero_damage_received() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received)
  return &_impl_.hero_damage_received_;
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_damage_received(int index) const {
  return _impl_.hero_damage_received_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_received(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received)
  return _internal_hero_damage_received(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_hero_damage_received() {
  return _impl_.hero_damage_received_.Add();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::add_hero_damage_received() {
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* _add = _internal_add_hero_damage_received();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >&
CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_received() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_received)
  return _impl_.hero_damage_received_;
}

// repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_damage_dealt_size() const {
  return _impl_.hero_damage_dealt_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_dealt_size() const {
  return _internal_hero_damage_dealt_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_hero_damage_dealt() {
  _impl_.hero_damage_dealt_.Clear();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::mutable_hero_damage_dealt(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt)
  return _impl_.hero_damage_dealt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_hero_damage_dealt() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt)
  return &_impl_.hero_damage_dealt_;
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& CMsgGameMatchSignOut_CTeam_CPlayer::_internal_hero_damage_dealt(int index) const {
  return _impl_.hero_damage_dealt_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_dealt(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt)
  return _internal_hero_damage_dealt(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_hero_damage_dealt() {
  return _impl_.hero_damage_dealt_.Add();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* CMsgGameMatchSignOut_CTeam_CPlayer::add_hero_damage_dealt() {
  ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* _add = _internal_add_hero_damage_dealt();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >&
CMsgGameMatchSignOut_CTeam_CPlayer::hero_damage_dealt() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.hero_damage_dealt)
  return _impl_.hero_damage_dealt_;
}

// optional uint32 seconds_dead = 51;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_seconds_dead() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_seconds_dead() const {
  return _internal_has_seconds_dead();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_seconds_dead() {
  _impl_.seconds_dead_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_seconds_dead() const {
  return _impl_.seconds_dead_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::seconds_dead() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.seconds_dead)
  return _internal_seconds_dead();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_seconds_dead(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.seconds_dead_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_seconds_dead(uint32_t value) {
  _internal_set_seconds_dead(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.seconds_dead)
}

// optional uint32 gold_lost_to_death = 52;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_gold_lost_to_death() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_gold_lost_to_death() const {
  return _internal_has_gold_lost_to_death();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_gold_lost_to_death() {
  _impl_.gold_lost_to_death_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_gold_lost_to_death() const {
  return _impl_.gold_lost_to_death_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::gold_lost_to_death() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.gold_lost_to_death)
  return _internal_gold_lost_to_death();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_gold_lost_to_death(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.gold_lost_to_death_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_gold_lost_to_death(uint32_t value) {
  _internal_set_gold_lost_to_death(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.gold_lost_to_death)
}

// optional uint32 command_count = 53;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_command_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_command_count() const {
  return _internal_has_command_count();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_command_count() {
  _impl_.command_count_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_command_count() const {
  return _impl_.command_count_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::command_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.command_count)
  return _internal_command_count();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_command_count(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.command_count_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_command_count(uint32_t value) {
  _internal_set_command_count(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.command_count)
}

// optional uint32 mouse_click_cast_command_count = 54;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_mouse_click_cast_command_count() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_mouse_click_cast_command_count() const {
  return _internal_has_mouse_click_cast_command_count();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_mouse_click_cast_command_count() {
  _impl_.mouse_click_cast_command_count_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mouse_click_cast_command_count() const {
  return _impl_.mouse_click_cast_command_count_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::mouse_click_cast_command_count() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.mouse_click_cast_command_count)
  return _internal_mouse_click_cast_command_count();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_mouse_click_cast_command_count(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.mouse_click_cast_command_count_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_mouse_click_cast_command_count(uint32_t value) {
  _internal_set_mouse_click_cast_command_count(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.mouse_click_cast_command_count)
}

// optional uint32 teleports_used = 55;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_teleports_used() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_teleports_used() const {
  return _internal_has_teleports_used();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_teleports_used() {
  _impl_.teleports_used_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_teleports_used() const {
  return _impl_.teleports_used_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::teleports_used() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.teleports_used)
  return _internal_teleports_used();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_teleports_used(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.teleports_used_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_teleports_used(uint32_t value) {
  _internal_set_teleports_used(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.teleports_used)
}

// optional uint32 cavern_crawl_preferred_map_variant = 56 [default = 255];
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_cavern_crawl_preferred_map_variant() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_cavern_crawl_preferred_map_variant() const {
  return _internal_has_cavern_crawl_preferred_map_variant();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_cavern_crawl_preferred_map_variant() {
  _impl_.cavern_crawl_preferred_map_variant_ = 255u;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_cavern_crawl_preferred_map_variant() const {
  return _impl_.cavern_crawl_preferred_map_variant_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::cavern_crawl_preferred_map_variant() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.cavern_crawl_preferred_map_variant)
  return _internal_cavern_crawl_preferred_map_variant();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_cavern_crawl_preferred_map_variant(uint32_t value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.cavern_crawl_preferred_map_variant_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_cavern_crawl_preferred_map_variant(uint32_t value) {
  _internal_set_cavern_crawl_preferred_map_variant(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.cavern_crawl_preferred_map_variant)
}

// optional uint32 bounty_runes = 57;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_bounty_runes() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_bounty_runes() const {
  return _internal_has_bounty_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_bounty_runes() {
  _impl_.bounty_runes_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_bounty_runes() const {
  return _impl_.bounty_runes_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::bounty_runes() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.bounty_runes)
  return _internal_bounty_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_bounty_runes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.bounty_runes_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_bounty_runes(uint32_t value) {
  _internal_set_bounty_runes(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.bounty_runes)
}

// optional uint32 outposts_captured = 58;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_outposts_captured() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_outposts_captured() const {
  return _internal_has_outposts_captured();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_outposts_captured() {
  _impl_.outposts_captured_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_outposts_captured() const {
  return _impl_.outposts_captured_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::outposts_captured() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.outposts_captured)
  return _internal_outposts_captured();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_outposts_captured(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.outposts_captured_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_outposts_captured(uint32_t value) {
  _internal_set_outposts_captured(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.outposts_captured)
}

// optional uint32 dewards = 59;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_dewards() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_dewards() const {
  return _internal_has_dewards();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_dewards() {
  _impl_.dewards_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_dewards() const {
  return _impl_.dewards_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::dewards() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.dewards)
  return _internal_dewards();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_dewards(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.dewards_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_dewards(uint32_t value) {
  _internal_set_dewards(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.dewards)
}

// optional uint32 wards_placed = 60;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_wards_placed() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_wards_placed() const {
  return _internal_has_wards_placed();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_wards_placed() {
  _impl_.wards_placed_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_wards_placed() const {
  return _impl_.wards_placed_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.wards_placed)
  return _internal_wards_placed();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_wards_placed(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.wards_placed_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_wards_placed(uint32_t value) {
  _internal_set_wards_placed(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.wards_placed)
}

// optional uint32 camps_stacked = 61;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_camps_stacked() {
  _impl_.camps_stacked_ = 0u;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_camps_stacked() const {
  return _impl_.camps_stacked_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_camps_stacked(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.camps_stacked_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_camps_stacked(uint32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.camps_stacked)
}

// optional uint32 player_slot = 62;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.player_slot)
  return _internal_player_slot();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.player_slot_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.player_slot)
}

// optional uint32 predicted_position = 66;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_predicted_position() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_predicted_position() const {
  return _internal_has_predicted_position();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_predicted_position() {
  _impl_.predicted_position_ = 0u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_predicted_position() const {
  return _impl_.predicted_position_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::predicted_position() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.predicted_position)
  return _internal_predicted_position();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_predicted_position(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.predicted_position_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_predicted_position(uint32_t value) {
  _internal_set_predicted_position(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.predicted_position)
}

// optional uint32 lane_outcomes = 67 [default = 255];
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_lane_outcomes() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_lane_outcomes() const {
  return _internal_has_lane_outcomes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_lane_outcomes() {
  _impl_.lane_outcomes_ = 255u;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_lane_outcomes() const {
  return _impl_.lane_outcomes_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::lane_outcomes() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.lane_outcomes)
  return _internal_lane_outcomes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_lane_outcomes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.lane_outcomes_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_lane_outcomes(uint32_t value) {
  _internal_set_lane_outcomes(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.lane_outcomes)
}

// optional uint32 friendly_t1_destroyed_time = 68;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_friendly_t1_destroyed_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_friendly_t1_destroyed_time() const {
  return _internal_has_friendly_t1_destroyed_time();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_friendly_t1_destroyed_time() {
  _impl_.friendly_t1_destroyed_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_friendly_t1_destroyed_time() const {
  return _impl_.friendly_t1_destroyed_time_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::friendly_t1_destroyed_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.friendly_t1_destroyed_time)
  return _internal_friendly_t1_destroyed_time();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_friendly_t1_destroyed_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.friendly_t1_destroyed_time_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_friendly_t1_destroyed_time(uint32_t value) {
  _internal_set_friendly_t1_destroyed_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.friendly_t1_destroyed_time)
}

// optional uint32 enemy_t1_destroyed_time = 69;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_enemy_t1_destroyed_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_enemy_t1_destroyed_time() const {
  return _internal_has_enemy_t1_destroyed_time();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_enemy_t1_destroyed_time() {
  _impl_.enemy_t1_destroyed_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_enemy_t1_destroyed_time() const {
  return _impl_.enemy_t1_destroyed_time_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::enemy_t1_destroyed_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.enemy_t1_destroyed_time)
  return _internal_enemy_t1_destroyed_time();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_enemy_t1_destroyed_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.enemy_t1_destroyed_time_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_enemy_t1_destroyed_time(uint32_t value) {
  _internal_set_enemy_t1_destroyed_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.enemy_t1_destroyed_time)
}

// optional uint32 friendly_roshan_kills = 70;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_friendly_roshan_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_friendly_roshan_kills() const {
  return _internal_has_friendly_roshan_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_friendly_roshan_kills() {
  _impl_.friendly_roshan_kills_ = 0u;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_friendly_roshan_kills() const {
  return _impl_.friendly_roshan_kills_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::friendly_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.friendly_roshan_kills)
  return _internal_friendly_roshan_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_friendly_roshan_kills(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.friendly_roshan_kills_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_friendly_roshan_kills(uint32_t value) {
  _internal_set_friendly_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.friendly_roshan_kills)
}

// optional uint32 enemy_roshan_kills = 71;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_enemy_roshan_kills() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_enemy_roshan_kills() const {
  return _internal_has_enemy_roshan_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_enemy_roshan_kills() {
  _impl_.enemy_roshan_kills_ = 0u;
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_enemy_roshan_kills() const {
  return _impl_.enemy_roshan_kills_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::enemy_roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.enemy_roshan_kills)
  return _internal_enemy_roshan_kills();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_enemy_roshan_kills(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.enemy_roshan_kills_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_enemy_roshan_kills(uint32_t value) {
  _internal_set_enemy_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.enemy_roshan_kills)
}

// optional uint32 power_runes = 72;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_power_runes() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_power_runes() const {
  return _internal_has_power_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_power_runes() {
  _impl_.power_runes_ = 0u;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_power_runes() const {
  return _impl_.power_runes_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::power_runes() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.power_runes)
  return _internal_power_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_power_runes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.power_runes_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_power_runes(uint32_t value) {
  _internal_set_power_runes(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.power_runes)
}

// optional uint32 water_runes = 73;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_water_runes() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_water_runes() const {
  return _internal_has_water_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_water_runes() {
  _impl_.water_runes_ = 0u;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_water_runes() const {
  return _impl_.water_runes_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::water_runes() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.water_runes)
  return _internal_water_runes();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_water_runes(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.water_runes_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_water_runes(uint32_t value) {
  _internal_set_water_runes(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.water_runes)
}

// optional float stun_duration = 74;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_stun_duration() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_stun_duration() const {
  return _internal_has_stun_duration();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_stun_duration() {
  _impl_.stun_duration_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::_internal_stun_duration() const {
  return _impl_.stun_duration_;
}
inline float CMsgGameMatchSignOut_CTeam_CPlayer::stun_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.stun_duration)
  return _internal_stun_duration();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_stun_duration(float value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.stun_duration_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_stun_duration(float value) {
  _internal_set_stun_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.stun_duration)
}

// optional .DOTA_GC_TEAM team_number = 75 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_team_number() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_team_number() const {
  return _internal_has_team_number();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_team_number() {
  _impl_.team_number_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::DOTA_GC_TEAM CMsgGameMatchSignOut_CTeam_CPlayer::_internal_team_number() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.team_number_);
}
inline ::DOTA_GC_TEAM CMsgGameMatchSignOut_CTeam_CPlayer::team_number() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.team_number)
  return _internal_team_number();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_team_number(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.team_number_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_team_number(::DOTA_GC_TEAM value) {
  _internal_set_team_number(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.team_number)
}

// optional uint32 team_slot = 76;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_team_slot() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_team_slot() const {
  return _internal_has_team_slot();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_team_slot() {
  _impl_.team_slot_ = 0u;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_team_slot() const {
  return _impl_.team_slot_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::team_slot() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.team_slot)
  return _internal_team_slot();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_team_slot(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.team_slot_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_team_slot(uint32_t value) {
  _internal_set_team_slot(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.team_slot)
}

// optional uint32 time_purchased_shard = 77;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_time_purchased_shard() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_purchased_shard() const {
  return _internal_has_time_purchased_shard();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_purchased_shard() {
  _impl_.time_purchased_shard_ = 0u;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_time_purchased_shard() const {
  return _impl_.time_purchased_shard_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::time_purchased_shard() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.time_purchased_shard)
  return _internal_time_purchased_shard();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_time_purchased_shard(uint32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.time_purchased_shard_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_purchased_shard(uint32_t value) {
  _internal_set_time_purchased_shard(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.time_purchased_shard)
}

// optional uint32 time_purchased_aghs = 78;
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::_internal_has_time_purchased_aghs() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CTeam_CPlayer::has_time_purchased_aghs() const {
  return _internal_has_time_purchased_aghs();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_time_purchased_aghs() {
  _impl_.time_purchased_aghs_ = 0u;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_time_purchased_aghs() const {
  return _impl_.time_purchased_aghs_;
}
inline uint32_t CMsgGameMatchSignOut_CTeam_CPlayer::time_purchased_aghs() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.time_purchased_aghs)
  return _internal_time_purchased_aghs();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_set_time_purchased_aghs(uint32_t value) {
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.time_purchased_aghs_ = value;
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_time_purchased_aghs(uint32_t value) {
  _internal_set_time_purchased_aghs(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.time_purchased_aghs)
}

// repeated int32 ability_draft_abilities = 79;
inline int CMsgGameMatchSignOut_CTeam_CPlayer::_internal_ability_draft_abilities_size() const {
  return _impl_.ability_draft_abilities_.size();
}
inline int CMsgGameMatchSignOut_CTeam_CPlayer::ability_draft_abilities_size() const {
  return _internal_ability_draft_abilities_size();
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_draft_abilities() {
  _impl_.ability_draft_abilities_.Clear();
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::_internal_ability_draft_abilities(int index) const {
  return _impl_.ability_draft_abilities_.Get(index);
}
inline int32_t CMsgGameMatchSignOut_CTeam_CPlayer::ability_draft_abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.CPlayer.ability_draft_abilities)
  return _internal_ability_draft_abilities(index);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::set_ability_draft_abilities(int index, int32_t value) {
  _impl_.ability_draft_abilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CTeam.CPlayer.ability_draft_abilities)
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::_internal_add_ability_draft_abilities(int32_t value) {
  _impl_.ability_draft_abilities_.Add(value);
}
inline void CMsgGameMatchSignOut_CTeam_CPlayer::add_ability_draft_abilities(int32_t value) {
  _internal_add_ability_draft_abilities(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.CPlayer.ability_draft_abilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_ability_draft_abilities() const {
  return _impl_.ability_draft_abilities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgGameMatchSignOut_CTeam_CPlayer::ability_draft_abilities() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_draft_abilities)
  return _internal_ability_draft_abilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::_internal_mutable_ability_draft_abilities() {
  return &_impl_.ability_draft_abilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgGameMatchSignOut_CTeam_CPlayer::mutable_ability_draft_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.CPlayer.ability_draft_abilities)
  return _internal_mutable_ability_draft_abilities();
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CTeam

// repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
inline int CMsgGameMatchSignOut_CTeam::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgGameMatchSignOut_CTeam::players_size() const {
  return _internal_players_size();
}
inline void CMsgGameMatchSignOut_CTeam::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CTeam.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >*
CMsgGameMatchSignOut_CTeam::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.CTeam.players)
  return &_impl_.players_;
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CTeam_CPlayer& CMsgGameMatchSignOut_CTeam::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CTeam.players)
  return _internal_players(index);
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgGameMatchSignOut_CTeam_CPlayer* CMsgGameMatchSignOut_CTeam::add_players() {
  ::CMsgGameMatchSignOut_CTeam_CPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.CTeam.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam_CPlayer >&
CMsgGameMatchSignOut_CTeam::players() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.CTeam.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CAdditionalSignoutMsg

// optional uint32 id = 1;
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_id() const {
  return _internal_has_id();
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CAdditionalSignoutMsg.id)
  return _internal_id();
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CAdditionalSignoutMsg.id)
}

// optional bytes contents = 2;
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_has_contents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::has_contents() const {
  return _internal_has_contents();
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::clear_contents() {
  _impl_.contents_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameMatchSignOut_CAdditionalSignoutMsg::contents() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_contents(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}
inline std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  return _s;
}
inline const std::string& CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_contents() const {
  return _impl_.contents_.Get();
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_set_contents(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_internal_mutable_contents() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contents_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut_CAdditionalSignoutMsg::release_contents() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
  if (!_internal_has_contents()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contents_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.CAdditionalSignoutMsg.contents)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CSocialFeedMatchEvent

// optional uint32 account_id = 1;
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CSocialFeedMatchEvent.account_id)
  return _internal_account_id();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CSocialFeedMatchEvent.account_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CSocialFeedMatchEvent.timestamp)
  return _internal_timestamp();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CSocialFeedMatchEvent.timestamp)
}

// optional uint32 event_type = 3;
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_event_type() {
  _impl_.event_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_event_type() const {
  return _impl_.event_type_;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CSocialFeedMatchEvent.event_type)
  return _internal_event_type();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_set_event_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.event_type_ = value;
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_event_type(uint32_t value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CSocialFeedMatchEvent.event_type)
}

// optional int32 game_time = 4;
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_game_time() const {
  return _impl_.game_time_;
}
inline int32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CSocialFeedMatchEvent.game_time)
  return _internal_game_time();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_set_game_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_time_ = value;
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_game_time(int32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CSocialFeedMatchEvent.game_time)
}

// optional uint32 replay_time = 5;
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_has_replay_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::has_replay_time() const {
  return _internal_has_replay_time();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::clear_replay_time() {
  _impl_.replay_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_replay_time() const {
  return _impl_.replay_time_;
}
inline uint32_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::replay_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CSocialFeedMatchEvent.replay_time)
  return _internal_replay_time();
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::_internal_set_replay_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.replay_time_ = value;
}
inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::set_replay_time(uint32_t value) {
  _internal_set_replay_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CSocialFeedMatchEvent.replay_time)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_CCustomGameData

// optional uint32 publish_timestamp = 1;
inline bool CMsgGameMatchSignOut_CCustomGameData::_internal_has_publish_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_CCustomGameData::has_publish_timestamp() const {
  return _internal_has_publish_timestamp();
}
inline void CMsgGameMatchSignOut_CCustomGameData::clear_publish_timestamp() {
  _impl_.publish_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOut_CCustomGameData::_internal_publish_timestamp() const {
  return _impl_.publish_timestamp_;
}
inline uint32_t CMsgGameMatchSignOut_CCustomGameData::publish_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.CCustomGameData.publish_timestamp)
  return _internal_publish_timestamp();
}
inline void CMsgGameMatchSignOut_CCustomGameData::_internal_set_publish_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.publish_timestamp_ = value;
}
inline void CMsgGameMatchSignOut_CCustomGameData::set_publish_timestamp(uint32_t value) {
  _internal_set_publish_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.CCustomGameData.publish_timestamp)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_EventGameLeaderboardEntry

// optional string name_suffix = 1;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_name_suffix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_name_suffix() const {
  return _internal_has_name_suffix();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_name_suffix() {
  _impl_.name_suffix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameMatchSignOut_EventGameLeaderboardEntry::name_suffix() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  return _internal_name_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_name_suffix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}
inline std::string* CMsgGameMatchSignOut_EventGameLeaderboardEntry::mutable_name_suffix() {
  std::string* _s = _internal_mutable_name_suffix();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  return _s;
}
inline const std::string& CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_name_suffix() const {
  return _impl_.name_suffix_.Get();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_name_suffix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_mutable_name_suffix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut_EventGameLeaderboardEntry::release_name_suffix() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
  if (!_internal_has_name_suffix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_suffix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_suffix_.IsDefault()) {
    _impl_.name_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_allocated_name_suffix(std::string* name_suffix) {
  if (name_suffix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_suffix_.SetAllocated(name_suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_suffix_.IsDefault()) {
    _impl_.name_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix)
}

// optional int32 score = 2;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_score() const {
  return _internal_has_score();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_score() const {
  return _impl_.score_;
}
inline int32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::score() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.score)
  return _internal_score();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_score(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_score(int32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.score)
}

// optional uint32 extra_data_1 = 3;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_extra_data_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_1() const {
  return _internal_has_extra_data_1();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_1() {
  _impl_.extra_data_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_extra_data_1() const {
  return _impl_.extra_data_1_;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_1() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_1)
  return _internal_extra_data_1();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_extra_data_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.extra_data_1_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_1(uint32_t value) {
  _internal_set_extra_data_1(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_1)
}

// optional uint32 extra_data_2 = 4;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_extra_data_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_2() const {
  return _internal_has_extra_data_2();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_2() {
  _impl_.extra_data_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_extra_data_2() const {
  return _impl_.extra_data_2_;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_2() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_2)
  return _internal_extra_data_2();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_extra_data_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.extra_data_2_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_2(uint32_t value) {
  _internal_set_extra_data_2(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_2)
}

// optional uint32 extra_data_3 = 5;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_extra_data_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_3() const {
  return _internal_has_extra_data_3();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_3() {
  _impl_.extra_data_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_extra_data_3() const {
  return _impl_.extra_data_3_;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_3() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_3)
  return _internal_extra_data_3();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_extra_data_3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.extra_data_3_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_3(uint32_t value) {
  _internal_set_extra_data_3(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_3)
}

// optional uint32 extra_data_4 = 6;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_extra_data_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_4() const {
  return _internal_has_extra_data_4();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_4() {
  _impl_.extra_data_4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_extra_data_4() const {
  return _impl_.extra_data_4_;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_4() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_4)
  return _internal_extra_data_4();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_extra_data_4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.extra_data_4_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_4(uint32_t value) {
  _internal_set_extra_data_4(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_4)
}

// optional uint32 extra_data_5 = 7;
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_has_extra_data_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::has_extra_data_5() const {
  return _internal_has_extra_data_5();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::clear_extra_data_5() {
  _impl_.extra_data_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_extra_data_5() const {
  return _impl_.extra_data_5_;
}
inline uint32_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::extra_data_5() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_5)
  return _internal_extra_data_5();
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::_internal_set_extra_data_5(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.extra_data_5_ = value;
}
inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::set_extra_data_5(uint32_t value) {
  _internal_set_extra_data_5(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.EventGameLeaderboardEntry.extra_data_5)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut_WardPlacement

// optional int32 player_id = 1 [default = -1];
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgGameMatchSignOut_WardPlacement::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgGameMatchSignOut_WardPlacement::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.player_id)
  return _internal_player_id();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.player_id_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.player_id)
}

// optional uint32 team_id = 2;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.team_id)
  return _internal_team_id();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.team_id)
}

// optional uint32 placed_time = 3;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_placed_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_placed_time() const {
  return _internal_has_placed_time();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_placed_time() {
  _impl_.placed_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_placed_time() const {
  return _impl_.placed_time_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::placed_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.placed_time)
  return _internal_placed_time();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_placed_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.placed_time_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_placed_time(uint32_t value) {
  _internal_set_placed_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.placed_time)
}

// optional uint32 building_state = 4;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_building_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_building_state() const {
  return _internal_has_building_state();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_building_state() {
  _impl_.building_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_building_state() const {
  return _impl_.building_state_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::building_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.building_state)
  return _internal_building_state();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_building_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.building_state_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_building_state(uint32_t value) {
  _internal_set_building_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.building_state)
}

// optional uint32 creep_state = 5;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_creep_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_creep_state() const {
  return _internal_has_creep_state();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_creep_state() {
  _impl_.creep_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_creep_state() const {
  return _impl_.creep_state_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::creep_state() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.creep_state)
  return _internal_creep_state();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_creep_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.creep_state_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_creep_state(uint32_t value) {
  _internal_set_creep_state(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.creep_state)
}

// optional bool roshan_alive = 6;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_roshan_alive() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_roshan_alive() const {
  return _internal_has_roshan_alive();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_roshan_alive() {
  _impl_.roshan_alive_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_roshan_alive() const {
  return _impl_.roshan_alive_;
}
inline bool CMsgGameMatchSignOut_WardPlacement::roshan_alive() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.roshan_alive)
  return _internal_roshan_alive();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_roshan_alive(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.roshan_alive_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_roshan_alive(bool value) {
  _internal_set_roshan_alive(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.roshan_alive)
}

// optional uint32 position_x = 7;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_position_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_position_x() const {
  return _internal_has_position_x();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_position_x() {
  _impl_.position_x_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_position_x() const {
  return _impl_.position_x_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::position_x() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.position_x)
  return _internal_position_x();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_position_x(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.position_x_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_position_x(uint32_t value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.position_x)
}

// optional uint32 position_y = 8;
inline bool CMsgGameMatchSignOut_WardPlacement::_internal_has_position_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut_WardPlacement::has_position_y() const {
  return _internal_has_position_y();
}
inline void CMsgGameMatchSignOut_WardPlacement::clear_position_y() {
  _impl_.position_y_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::_internal_position_y() const {
  return _impl_.position_y_;
}
inline uint32_t CMsgGameMatchSignOut_WardPlacement::position_y() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.WardPlacement.position_y)
  return _internal_position_y();
}
inline void CMsgGameMatchSignOut_WardPlacement::_internal_set_position_y(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.position_y_ = value;
}
inline void CMsgGameMatchSignOut_WardPlacement::set_position_y(uint32_t value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.WardPlacement.position_y)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOut

// optional uint64 match_id = 1 [(.key_field) = true];
inline bool CMsgGameMatchSignOut::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGameMatchSignOut::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgGameMatchSignOut::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgGameMatchSignOut::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.match_id)
  return _internal_match_id();
}
inline void CMsgGameMatchSignOut::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.match_id_ = value;
}
inline void CMsgGameMatchSignOut::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.match_id)
}

// optional uint32 duration = 2;
inline bool CMsgGameMatchSignOut::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgGameMatchSignOut::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgGameMatchSignOut::duration() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.duration)
  return _internal_duration();
}
inline void CMsgGameMatchSignOut::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.duration_ = value;
}
inline void CMsgGameMatchSignOut::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.duration)
}

// optional bool good_guys_win = 3;
inline bool CMsgGameMatchSignOut::_internal_has_good_guys_win() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_good_guys_win() const {
  return _internal_has_good_guys_win();
}
inline void CMsgGameMatchSignOut::clear_good_guys_win() {
  _impl_.good_guys_win_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgGameMatchSignOut::_internal_good_guys_win() const {
  return _impl_.good_guys_win_;
}
inline bool CMsgGameMatchSignOut::good_guys_win() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.good_guys_win)
  return _internal_good_guys_win();
}
inline void CMsgGameMatchSignOut::_internal_set_good_guys_win(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.good_guys_win_ = value;
}
inline void CMsgGameMatchSignOut::set_good_guys_win(bool value) {
  _internal_set_good_guys_win(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.good_guys_win)
}

// optional fixed32 date = 4;
inline bool CMsgGameMatchSignOut::_internal_has_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_date() const {
  return _internal_has_date();
}
inline void CMsgGameMatchSignOut::clear_date() {
  _impl_.date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_date() const {
  return _impl_.date_;
}
inline uint32_t CMsgGameMatchSignOut::date() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.date)
  return _internal_date();
}
inline void CMsgGameMatchSignOut::_internal_set_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.date_ = value;
}
inline void CMsgGameMatchSignOut::set_date(uint32_t value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.date)
}

// repeated uint32 num_players = 5;
inline int CMsgGameMatchSignOut::_internal_num_players_size() const {
  return _impl_.num_players_.size();
}
inline int CMsgGameMatchSignOut::num_players_size() const {
  return _internal_num_players_size();
}
inline void CMsgGameMatchSignOut::clear_num_players() {
  _impl_.num_players_.Clear();
}
inline uint32_t CMsgGameMatchSignOut::_internal_num_players(int index) const {
  return _impl_.num_players_.Get(index);
}
inline uint32_t CMsgGameMatchSignOut::num_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.num_players)
  return _internal_num_players(index);
}
inline void CMsgGameMatchSignOut::set_num_players(int index, uint32_t value) {
  _impl_.num_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.num_players)
}
inline void CMsgGameMatchSignOut::_internal_add_num_players(uint32_t value) {
  _impl_.num_players_.Add(value);
}
inline void CMsgGameMatchSignOut::add_num_players(uint32_t value) {
  _internal_add_num_players(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.num_players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::_internal_num_players() const {
  return _impl_.num_players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::num_players() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.num_players)
  return _internal_num_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::_internal_mutable_num_players() {
  return &_impl_.num_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::mutable_num_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.num_players)
  return _internal_mutable_num_players();
}

// repeated .CMsgGameMatchSignOut.CTeam teams = 6;
inline int CMsgGameMatchSignOut::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgGameMatchSignOut::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgGameMatchSignOut::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >*
CMsgGameMatchSignOut::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.teams)
  return &_impl_.teams_;
}
inline const ::CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CTeam& CMsgGameMatchSignOut::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.teams)
  return _internal_teams(index);
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgGameMatchSignOut_CTeam* CMsgGameMatchSignOut::add_teams() {
  ::CMsgGameMatchSignOut_CTeam* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CTeam >&
CMsgGameMatchSignOut::teams() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.teams)
  return _impl_.teams_;
}

// repeated uint32 tower_status = 8;
inline int CMsgGameMatchSignOut::_internal_tower_status_size() const {
  return _impl_.tower_status_.size();
}
inline int CMsgGameMatchSignOut::tower_status_size() const {
  return _internal_tower_status_size();
}
inline void CMsgGameMatchSignOut::clear_tower_status() {
  _impl_.tower_status_.Clear();
}
inline uint32_t CMsgGameMatchSignOut::_internal_tower_status(int index) const {
  return _impl_.tower_status_.Get(index);
}
inline uint32_t CMsgGameMatchSignOut::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.tower_status)
  return _internal_tower_status(index);
}
inline void CMsgGameMatchSignOut::set_tower_status(int index, uint32_t value) {
  _impl_.tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.tower_status)
}
inline void CMsgGameMatchSignOut::_internal_add_tower_status(uint32_t value) {
  _impl_.tower_status_.Add(value);
}
inline void CMsgGameMatchSignOut::add_tower_status(uint32_t value) {
  _internal_add_tower_status(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.tower_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::_internal_tower_status() const {
  return _impl_.tower_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::tower_status() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.tower_status)
  return _internal_tower_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::_internal_mutable_tower_status() {
  return &_impl_.tower_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.tower_status)
  return _internal_mutable_tower_status();
}

// repeated uint32 barracks_status = 9;
inline int CMsgGameMatchSignOut::_internal_barracks_status_size() const {
  return _impl_.barracks_status_.size();
}
inline int CMsgGameMatchSignOut::barracks_status_size() const {
  return _internal_barracks_status_size();
}
inline void CMsgGameMatchSignOut::clear_barracks_status() {
  _impl_.barracks_status_.Clear();
}
inline uint32_t CMsgGameMatchSignOut::_internal_barracks_status(int index) const {
  return _impl_.barracks_status_.Get(index);
}
inline uint32_t CMsgGameMatchSignOut::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.barracks_status)
  return _internal_barracks_status(index);
}
inline void CMsgGameMatchSignOut::set_barracks_status(int index, uint32_t value) {
  _impl_.barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.barracks_status)
}
inline void CMsgGameMatchSignOut::_internal_add_barracks_status(uint32_t value) {
  _impl_.barracks_status_.Add(value);
}
inline void CMsgGameMatchSignOut::add_barracks_status(uint32_t value) {
  _internal_add_barracks_status(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.barracks_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::_internal_barracks_status() const {
  return _impl_.barracks_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::barracks_status() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.barracks_status)
  return _internal_barracks_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::_internal_mutable_barracks_status() {
  return &_impl_.barracks_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.barracks_status)
  return _internal_mutable_barracks_status();
}

// optional uint32 cluster = 10;
inline bool CMsgGameMatchSignOut::_internal_has_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_cluster() const {
  return _internal_has_cluster();
}
inline void CMsgGameMatchSignOut::clear_cluster() {
  _impl_.cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_cluster() const {
  return _impl_.cluster_;
}
inline uint32_t CMsgGameMatchSignOut::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.cluster)
  return _internal_cluster();
}
inline void CMsgGameMatchSignOut::_internal_set_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.cluster_ = value;
}
inline void CMsgGameMatchSignOut::set_cluster(uint32_t value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.cluster)
}

// optional string server_addr = 11;
inline bool CMsgGameMatchSignOut::_internal_has_server_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_server_addr() const {
  return _internal_has_server_addr();
}
inline void CMsgGameMatchSignOut::clear_server_addr() {
  _impl_.server_addr_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameMatchSignOut::server_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.server_addr)
  return _internal_server_addr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOut::set_server_addr(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.server_addr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.server_addr)
}
inline std::string* CMsgGameMatchSignOut::mutable_server_addr() {
  std::string* _s = _internal_mutable_server_addr();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.server_addr)
  return _s;
}
inline const std::string& CMsgGameMatchSignOut::_internal_server_addr() const {
  return _impl_.server_addr_.Get();
}
inline void CMsgGameMatchSignOut::_internal_set_server_addr(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_addr_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut::_internal_mutable_server_addr() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.server_addr_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOut::release_server_addr() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.server_addr)
  if (!_internal_has_server_addr()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.server_addr_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_addr_.IsDefault()) {
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOut::set_allocated_server_addr(std::string* server_addr) {
  if (server_addr != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.server_addr_.SetAllocated(server_addr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_addr_.IsDefault()) {
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.server_addr)
}

// optional uint32 first_blood_time = 12;
inline bool CMsgGameMatchSignOut::_internal_has_first_blood_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_first_blood_time() const {
  return _internal_has_first_blood_time();
}
inline void CMsgGameMatchSignOut::clear_first_blood_time() {
  _impl_.first_blood_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_first_blood_time() const {
  return _impl_.first_blood_time_;
}
inline uint32_t CMsgGameMatchSignOut::first_blood_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.first_blood_time)
  return _internal_first_blood_time();
}
inline void CMsgGameMatchSignOut::_internal_set_first_blood_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.first_blood_time_ = value;
}
inline void CMsgGameMatchSignOut::set_first_blood_time(uint32_t value) {
  _internal_set_first_blood_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.first_blood_time)
}

// optional uint32 event_score = 14;
inline bool CMsgGameMatchSignOut::_internal_has_event_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_event_score() const {
  return _internal_has_event_score();
}
inline void CMsgGameMatchSignOut::clear_event_score() {
  _impl_.event_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_event_score() const {
  return _impl_.event_score_;
}
inline uint32_t CMsgGameMatchSignOut::event_score() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.event_score)
  return _internal_event_score();
}
inline void CMsgGameMatchSignOut::_internal_set_event_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.event_score_ = value;
}
inline void CMsgGameMatchSignOut::set_event_score(uint32_t value) {
  _internal_set_event_score(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.event_score)
}

// repeated .CMatchHeroSelectEvent picks_bans = 15;
inline int CMsgGameMatchSignOut::_internal_picks_bans_size() const {
  return _impl_.picks_bans_.size();
}
inline int CMsgGameMatchSignOut::picks_bans_size() const {
  return _internal_picks_bans_size();
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.picks_bans)
  return _impl_.picks_bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgGameMatchSignOut::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.picks_bans)
  return &_impl_.picks_bans_;
}
inline const ::CMatchHeroSelectEvent& CMsgGameMatchSignOut::_internal_picks_bans(int index) const {
  return _impl_.picks_bans_.Get(index);
}
inline const ::CMatchHeroSelectEvent& CMsgGameMatchSignOut::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.picks_bans)
  return _internal_picks_bans(index);
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::_internal_add_picks_bans() {
  return _impl_.picks_bans_.Add();
}
inline ::CMatchHeroSelectEvent* CMsgGameMatchSignOut::add_picks_bans() {
  ::CMatchHeroSelectEvent* _add = _internal_add_picks_bans();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.picks_bans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgGameMatchSignOut::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.picks_bans)
  return _impl_.picks_bans_;
}

// repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
inline int CMsgGameMatchSignOut::_internal_fantasy_stats_size() const {
  return _impl_.fantasy_stats_.size();
}
inline int CMsgGameMatchSignOut::fantasy_stats_size() const {
  return _internal_fantasy_stats_size();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::mutable_fantasy_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.fantasy_stats)
  return _impl_.fantasy_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >*
CMsgGameMatchSignOut::mutable_fantasy_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.fantasy_stats)
  return &_impl_.fantasy_stats_;
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgGameMatchSignOut::_internal_fantasy_stats(int index) const {
  return _impl_.fantasy_stats_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerStats& CMsgGameMatchSignOut::fantasy_stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.fantasy_stats)
  return _internal_fantasy_stats(index);
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::_internal_add_fantasy_stats() {
  return _impl_.fantasy_stats_.Add();
}
inline ::CMsgDOTAFantasyPlayerStats* CMsgGameMatchSignOut::add_fantasy_stats() {
  ::CMsgDOTAFantasyPlayerStats* _add = _internal_add_fantasy_stats();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.fantasy_stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStats >&
CMsgGameMatchSignOut::fantasy_stats() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.fantasy_stats)
  return _impl_.fantasy_stats_;
}

// repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
inline int CMsgGameMatchSignOut::_internal_player_strange_count_adjustments_size() const {
  return _impl_.player_strange_count_adjustments_.size();
}
inline int CMsgGameMatchSignOut::player_strange_count_adjustments_size() const {
  return _internal_player_strange_count_adjustments_size();
}
inline ::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::mutable_player_strange_count_adjustments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.player_strange_count_adjustments)
  return _impl_.player_strange_count_adjustments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >*
CMsgGameMatchSignOut::mutable_player_strange_count_adjustments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.player_strange_count_adjustments)
  return &_impl_.player_strange_count_adjustments_;
}
inline const ::CMsgEconPlayerStrangeCountAdjustment& CMsgGameMatchSignOut::_internal_player_strange_count_adjustments(int index) const {
  return _impl_.player_strange_count_adjustments_.Get(index);
}
inline const ::CMsgEconPlayerStrangeCountAdjustment& CMsgGameMatchSignOut::player_strange_count_adjustments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.player_strange_count_adjustments)
  return _internal_player_strange_count_adjustments(index);
}
inline ::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::_internal_add_player_strange_count_adjustments() {
  return _impl_.player_strange_count_adjustments_.Add();
}
inline ::CMsgEconPlayerStrangeCountAdjustment* CMsgGameMatchSignOut::add_player_strange_count_adjustments() {
  ::CMsgEconPlayerStrangeCountAdjustment* _add = _internal_add_player_strange_count_adjustments();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.player_strange_count_adjustments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgEconPlayerStrangeCountAdjustment >&
CMsgGameMatchSignOut::player_strange_count_adjustments() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.player_strange_count_adjustments)
  return _impl_.player_strange_count_adjustments_;
}

// optional bool automatic_surrender = 18;
inline bool CMsgGameMatchSignOut::_internal_has_automatic_surrender() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_automatic_surrender() const {
  return _internal_has_automatic_surrender();
}
inline void CMsgGameMatchSignOut::clear_automatic_surrender() {
  _impl_.automatic_surrender_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgGameMatchSignOut::_internal_automatic_surrender() const {
  return _impl_.automatic_surrender_;
}
inline bool CMsgGameMatchSignOut::automatic_surrender() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.automatic_surrender)
  return _internal_automatic_surrender();
}
inline void CMsgGameMatchSignOut::_internal_set_automatic_surrender(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.automatic_surrender_ = value;
}
inline void CMsgGameMatchSignOut::set_automatic_surrender(bool value) {
  _internal_set_automatic_surrender(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.automatic_surrender)
}

// optional uint32 server_version = 19;
inline bool CMsgGameMatchSignOut::_internal_has_server_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGameMatchSignOut::clear_server_version() {
  _impl_.server_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_server_version() const {
  return _impl_.server_version_;
}
inline uint32_t CMsgGameMatchSignOut::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.server_version)
  return _internal_server_version();
}
inline void CMsgGameMatchSignOut::_internal_set_server_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.server_version_ = value;
}
inline void CMsgGameMatchSignOut::set_server_version(uint32_t value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.server_version)
}

// optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
inline bool CMsgGameMatchSignOut::_internal_has_poor_network_conditions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poor_network_conditions_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignOut::has_poor_network_conditions() const {
  return _internal_has_poor_network_conditions();
}
inline void CMsgGameMatchSignOut::clear_poor_network_conditions() {
  if (_impl_.poor_network_conditions_ != nullptr) _impl_.poor_network_conditions_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgPoorNetworkConditions& CMsgGameMatchSignOut::_internal_poor_network_conditions() const {
  const ::CMsgPoorNetworkConditions* p = _impl_.poor_network_conditions_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPoorNetworkConditions&>(
      ::_CMsgPoorNetworkConditions_default_instance_);
}
inline const ::CMsgPoorNetworkConditions& CMsgGameMatchSignOut::poor_network_conditions() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.poor_network_conditions)
  return _internal_poor_network_conditions();
}
inline void CMsgGameMatchSignOut::unsafe_arena_set_allocated_poor_network_conditions(
    ::CMsgPoorNetworkConditions* poor_network_conditions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poor_network_conditions_);
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  if (poor_network_conditions) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignOut.poor_network_conditions)
}
inline ::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::release_poor_network_conditions() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::unsafe_arena_release_poor_network_conditions() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.poor_network_conditions)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgPoorNetworkConditions* temp = _impl_.poor_network_conditions_;
  _impl_.poor_network_conditions_ = nullptr;
  return temp;
}
inline ::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::_internal_mutable_poor_network_conditions() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.poor_network_conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPoorNetworkConditions>(GetArenaForAllocation());
    _impl_.poor_network_conditions_ = p;
  }
  return _impl_.poor_network_conditions_;
}
inline ::CMsgPoorNetworkConditions* CMsgGameMatchSignOut::mutable_poor_network_conditions() {
  ::CMsgPoorNetworkConditions* _msg = _internal_mutable_poor_network_conditions();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.poor_network_conditions)
  return _msg;
}
inline void CMsgGameMatchSignOut::set_allocated_poor_network_conditions(::CMsgPoorNetworkConditions* poor_network_conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.poor_network_conditions_;
  }
  if (poor_network_conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(poor_network_conditions);
    if (message_arena != submessage_arena) {
      poor_network_conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poor_network_conditions, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.poor_network_conditions_ = poor_network_conditions;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.poor_network_conditions)
}

// repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
inline int CMsgGameMatchSignOut::_internal_additional_msgs_size() const {
  return _impl_.additional_msgs_.size();
}
inline int CMsgGameMatchSignOut::additional_msgs_size() const {
  return _internal_additional_msgs_size();
}
inline void CMsgGameMatchSignOut::clear_additional_msgs() {
  _impl_.additional_msgs_.Clear();
}
inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::mutable_additional_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.additional_msgs)
  return _impl_.additional_msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >*
CMsgGameMatchSignOut::mutable_additional_msgs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.additional_msgs)
  return &_impl_.additional_msgs_;
}
inline const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut::_internal_additional_msgs(int index) const {
  return _impl_.additional_msgs_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CAdditionalSignoutMsg& CMsgGameMatchSignOut::additional_msgs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.additional_msgs)
  return _internal_additional_msgs(index);
}
inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::_internal_add_additional_msgs() {
  return _impl_.additional_msgs_.Add();
}
inline ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* CMsgGameMatchSignOut::add_additional_msgs() {
  ::CMsgGameMatchSignOut_CAdditionalSignoutMsg* _add = _internal_add_additional_msgs();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.additional_msgs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >&
CMsgGameMatchSignOut::additional_msgs() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.additional_msgs)
  return _impl_.additional_msgs_;
}

// repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
inline int CMsgGameMatchSignOut::_internal_social_feed_events_size() const {
  return _impl_.social_feed_events_.size();
}
inline int CMsgGameMatchSignOut::social_feed_events_size() const {
  return _internal_social_feed_events_size();
}
inline void CMsgGameMatchSignOut::clear_social_feed_events() {
  _impl_.social_feed_events_.Clear();
}
inline ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut::mutable_social_feed_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.social_feed_events)
  return _impl_.social_feed_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >*
CMsgGameMatchSignOut::mutable_social_feed_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.social_feed_events)
  return &_impl_.social_feed_events_;
}
inline const ::CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut::_internal_social_feed_events(int index) const {
  return _impl_.social_feed_events_.Get(index);
}
inline const ::CMsgGameMatchSignOut_CSocialFeedMatchEvent& CMsgGameMatchSignOut::social_feed_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.social_feed_events)
  return _internal_social_feed_events(index);
}
inline ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut::_internal_add_social_feed_events() {
  return _impl_.social_feed_events_.Add();
}
inline ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* CMsgGameMatchSignOut::add_social_feed_events() {
  ::CMsgGameMatchSignOut_CSocialFeedMatchEvent* _add = _internal_add_social_feed_events();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.social_feed_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >&
CMsgGameMatchSignOut::social_feed_events() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.social_feed_events)
  return _impl_.social_feed_events_;
}

// optional sint32 average_networth_delta = 22;
inline bool CMsgGameMatchSignOut::_internal_has_average_networth_delta() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_average_networth_delta() const {
  return _internal_has_average_networth_delta();
}
inline void CMsgGameMatchSignOut::clear_average_networth_delta() {
  _impl_.average_networth_delta_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CMsgGameMatchSignOut::_internal_average_networth_delta() const {
  return _impl_.average_networth_delta_;
}
inline int32_t CMsgGameMatchSignOut::average_networth_delta() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.average_networth_delta)
  return _internal_average_networth_delta();
}
inline void CMsgGameMatchSignOut::_internal_set_average_networth_delta(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.average_networth_delta_ = value;
}
inline void CMsgGameMatchSignOut::set_average_networth_delta(int32_t value) {
  _internal_set_average_networth_delta(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.average_networth_delta)
}

// optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
inline bool CMsgGameMatchSignOut::_internal_has_custom_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_game_data_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignOut::has_custom_game_data() const {
  return _internal_has_custom_game_data();
}
inline void CMsgGameMatchSignOut::clear_custom_game_data() {
  if (_impl_.custom_game_data_ != nullptr) _impl_.custom_game_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut::_internal_custom_game_data() const {
  const ::CMsgGameMatchSignOut_CCustomGameData* p = _impl_.custom_game_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgGameMatchSignOut_CCustomGameData&>(
      ::_CMsgGameMatchSignOut_CCustomGameData_default_instance_);
}
inline const ::CMsgGameMatchSignOut_CCustomGameData& CMsgGameMatchSignOut::custom_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.custom_game_data)
  return _internal_custom_game_data();
}
inline void CMsgGameMatchSignOut::unsafe_arena_set_allocated_custom_game_data(
    ::CMsgGameMatchSignOut_CCustomGameData* custom_game_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_game_data_);
  }
  _impl_.custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignOut.custom_game_data)
}
inline ::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::release_custom_game_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgGameMatchSignOut_CCustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::unsafe_arena_release_custom_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.custom_game_data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgGameMatchSignOut_CCustomGameData* temp = _impl_.custom_game_data_;
  _impl_.custom_game_data_ = nullptr;
  return temp;
}
inline ::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::_internal_mutable_custom_game_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.custom_game_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgGameMatchSignOut_CCustomGameData>(GetArenaForAllocation());
    _impl_.custom_game_data_ = p;
  }
  return _impl_.custom_game_data_;
}
inline ::CMsgGameMatchSignOut_CCustomGameData* CMsgGameMatchSignOut::mutable_custom_game_data() {
  ::CMsgGameMatchSignOut_CCustomGameData* _msg = _internal_mutable_custom_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.custom_game_data)
  return _msg;
}
inline void CMsgGameMatchSignOut::set_allocated_custom_game_data(::CMsgGameMatchSignOut_CCustomGameData* custom_game_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.custom_game_data_;
  }
  if (custom_game_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom_game_data);
    if (message_arena != submessage_arena) {
      custom_game_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_game_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.custom_game_data_ = custom_game_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.custom_game_data)
}

// optional uint32 match_flags = 38;
inline bool CMsgGameMatchSignOut::_internal_has_match_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_match_flags() const {
  return _internal_has_match_flags();
}
inline void CMsgGameMatchSignOut::clear_match_flags() {
  _impl_.match_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_match_flags() const {
  return _impl_.match_flags_;
}
inline uint32_t CMsgGameMatchSignOut::match_flags() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.match_flags)
  return _internal_match_flags();
}
inline void CMsgGameMatchSignOut::_internal_set_match_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.match_flags_ = value;
}
inline void CMsgGameMatchSignOut::set_match_flags(uint32_t value) {
  _internal_set_match_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.match_flags)
}

// repeated uint32 team_scores = 39;
inline int CMsgGameMatchSignOut::_internal_team_scores_size() const {
  return _impl_.team_scores_.size();
}
inline int CMsgGameMatchSignOut::team_scores_size() const {
  return _internal_team_scores_size();
}
inline void CMsgGameMatchSignOut::clear_team_scores() {
  _impl_.team_scores_.Clear();
}
inline uint32_t CMsgGameMatchSignOut::_internal_team_scores(int index) const {
  return _impl_.team_scores_.Get(index);
}
inline uint32_t CMsgGameMatchSignOut::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.team_scores)
  return _internal_team_scores(index);
}
inline void CMsgGameMatchSignOut::set_team_scores(int index, uint32_t value) {
  _impl_.team_scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.team_scores)
}
inline void CMsgGameMatchSignOut::_internal_add_team_scores(uint32_t value) {
  _impl_.team_scores_.Add(value);
}
inline void CMsgGameMatchSignOut::add_team_scores(uint32_t value) {
  _internal_add_team_scores(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.team_scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::_internal_team_scores() const {
  return _impl_.team_scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOut::team_scores() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.team_scores)
  return _internal_team_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::_internal_mutable_team_scores() {
  return &_impl_.team_scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOut::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.team_scores)
  return _internal_mutable_team_scores();
}

// optional uint32 pre_game_duration = 40;
inline bool CMsgGameMatchSignOut::_internal_has_pre_game_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_pre_game_duration() const {
  return _internal_has_pre_game_duration();
}
inline void CMsgGameMatchSignOut::clear_pre_game_duration() {
  _impl_.pre_game_duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgGameMatchSignOut::_internal_pre_game_duration() const {
  return _impl_.pre_game_duration_;
}
inline uint32_t CMsgGameMatchSignOut::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.pre_game_duration)
  return _internal_pre_game_duration();
}
inline void CMsgGameMatchSignOut::_internal_set_pre_game_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.pre_game_duration_ = value;
}
inline void CMsgGameMatchSignOut::set_pre_game_duration(uint32_t value) {
  _internal_set_pre_game_duration(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.pre_game_duration)
}

// repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
inline int CMsgGameMatchSignOut::_internal_event_game_leaderboard_entries_size() const {
  return _impl_.event_game_leaderboard_entries_.size();
}
inline int CMsgGameMatchSignOut::event_game_leaderboard_entries_size() const {
  return _internal_event_game_leaderboard_entries_size();
}
inline void CMsgGameMatchSignOut::clear_event_game_leaderboard_entries() {
  _impl_.event_game_leaderboard_entries_.Clear();
}
inline ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut::mutable_event_game_leaderboard_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return _impl_.event_game_leaderboard_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >*
CMsgGameMatchSignOut::mutable_event_game_leaderboard_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return &_impl_.event_game_leaderboard_entries_;
}
inline const ::CMsgGameMatchSignOut_EventGameLeaderboardEntry& CMsgGameMatchSignOut::_internal_event_game_leaderboard_entries(int index) const {
  return _impl_.event_game_leaderboard_entries_.Get(index);
}
inline const ::CMsgGameMatchSignOut_EventGameLeaderboardEntry& CMsgGameMatchSignOut::event_game_leaderboard_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return _internal_event_game_leaderboard_entries(index);
}
inline ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut::_internal_add_event_game_leaderboard_entries() {
  return _impl_.event_game_leaderboard_entries_.Add();
}
inline ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* CMsgGameMatchSignOut::add_event_game_leaderboard_entries() {
  ::CMsgGameMatchSignOut_EventGameLeaderboardEntry* _add = _internal_add_event_game_leaderboard_entries();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >&
CMsgGameMatchSignOut::event_game_leaderboard_entries() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.event_game_leaderboard_entries)
  return _impl_.event_game_leaderboard_entries_;
}

// repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
inline int CMsgGameMatchSignOut::_internal_ward_placements_size() const {
  return _impl_.ward_placements_.size();
}
inline int CMsgGameMatchSignOut::ward_placements_size() const {
  return _internal_ward_placements_size();
}
inline void CMsgGameMatchSignOut::clear_ward_placements() {
  _impl_.ward_placements_.Clear();
}
inline ::CMsgGameMatchSignOut_WardPlacement* CMsgGameMatchSignOut::mutable_ward_placements(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.ward_placements)
  return _impl_.ward_placements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_WardPlacement >*
CMsgGameMatchSignOut::mutable_ward_placements() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.ward_placements)
  return &_impl_.ward_placements_;
}
inline const ::CMsgGameMatchSignOut_WardPlacement& CMsgGameMatchSignOut::_internal_ward_placements(int index) const {
  return _impl_.ward_placements_.Get(index);
}
inline const ::CMsgGameMatchSignOut_WardPlacement& CMsgGameMatchSignOut::ward_placements(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.ward_placements)
  return _internal_ward_placements(index);
}
inline ::CMsgGameMatchSignOut_WardPlacement* CMsgGameMatchSignOut::_internal_add_ward_placements() {
  return _impl_.ward_placements_.Add();
}
inline ::CMsgGameMatchSignOut_WardPlacement* CMsgGameMatchSignOut::add_ward_placements() {
  ::CMsgGameMatchSignOut_WardPlacement* _add = _internal_add_ward_placements();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.ward_placements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignOut_WardPlacement >&
CMsgGameMatchSignOut::ward_placements() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.ward_placements)
  return _impl_.ward_placements_;
}

// optional .CMsgSignOutGameplayStats gameplay_stats = 44;
inline bool CMsgGameMatchSignOut::_internal_has_gameplay_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gameplay_stats_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignOut::has_gameplay_stats() const {
  return _internal_has_gameplay_stats();
}
inline void CMsgGameMatchSignOut::clear_gameplay_stats() {
  if (_impl_.gameplay_stats_ != nullptr) _impl_.gameplay_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgSignOutGameplayStats& CMsgGameMatchSignOut::_internal_gameplay_stats() const {
  const ::CMsgSignOutGameplayStats* p = _impl_.gameplay_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSignOutGameplayStats&>(
      ::_CMsgSignOutGameplayStats_default_instance_);
}
inline const ::CMsgSignOutGameplayStats& CMsgGameMatchSignOut::gameplay_stats() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.gameplay_stats)
  return _internal_gameplay_stats();
}
inline void CMsgGameMatchSignOut::unsafe_arena_set_allocated_gameplay_stats(
    ::CMsgSignOutGameplayStats* gameplay_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gameplay_stats_);
  }
  _impl_.gameplay_stats_ = gameplay_stats;
  if (gameplay_stats) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignOut.gameplay_stats)
}
inline ::CMsgSignOutGameplayStats* CMsgGameMatchSignOut::release_gameplay_stats() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgSignOutGameplayStats* temp = _impl_.gameplay_stats_;
  _impl_.gameplay_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSignOutGameplayStats* CMsgGameMatchSignOut::unsafe_arena_release_gameplay_stats() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOut.gameplay_stats)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CMsgSignOutGameplayStats* temp = _impl_.gameplay_stats_;
  _impl_.gameplay_stats_ = nullptr;
  return temp;
}
inline ::CMsgSignOutGameplayStats* CMsgGameMatchSignOut::_internal_mutable_gameplay_stats() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.gameplay_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSignOutGameplayStats>(GetArenaForAllocation());
    _impl_.gameplay_stats_ = p;
  }
  return _impl_.gameplay_stats_;
}
inline ::CMsgSignOutGameplayStats* CMsgGameMatchSignOut::mutable_gameplay_stats() {
  ::CMsgSignOutGameplayStats* _msg = _internal_mutable_gameplay_stats();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.gameplay_stats)
  return _msg;
}
inline void CMsgGameMatchSignOut::set_allocated_gameplay_stats(::CMsgSignOutGameplayStats* gameplay_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gameplay_stats_;
  }
  if (gameplay_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gameplay_stats);
    if (message_arena != submessage_arena) {
      gameplay_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gameplay_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.gameplay_stats_ = gameplay_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOut.gameplay_stats)
}

// repeated .CExtraMsgBlock extra_messages = 54;
inline int CMsgGameMatchSignOut::_internal_extra_messages_size() const {
  return _impl_.extra_messages_.size();
}
inline int CMsgGameMatchSignOut::extra_messages_size() const {
  return _internal_extra_messages_size();
}
inline ::CExtraMsgBlock* CMsgGameMatchSignOut::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOut.extra_messages)
  return _impl_.extra_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CExtraMsgBlock >*
CMsgGameMatchSignOut::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOut.extra_messages)
  return &_impl_.extra_messages_;
}
inline const ::CExtraMsgBlock& CMsgGameMatchSignOut::_internal_extra_messages(int index) const {
  return _impl_.extra_messages_.Get(index);
}
inline const ::CExtraMsgBlock& CMsgGameMatchSignOut::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.extra_messages)
  return _internal_extra_messages(index);
}
inline ::CExtraMsgBlock* CMsgGameMatchSignOut::_internal_add_extra_messages() {
  return _impl_.extra_messages_.Add();
}
inline ::CExtraMsgBlock* CMsgGameMatchSignOut::add_extra_messages() {
  ::CExtraMsgBlock* _add = _internal_add_extra_messages();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOut.extra_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CExtraMsgBlock >&
CMsgGameMatchSignOut::extra_messages() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOut.extra_messages)
  return _impl_.extra_messages_;
}

// optional bool training_data_recorded = 55;
inline bool CMsgGameMatchSignOut::_internal_has_training_data_recorded() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_training_data_recorded() const {
  return _internal_has_training_data_recorded();
}
inline void CMsgGameMatchSignOut::clear_training_data_recorded() {
  _impl_.training_data_recorded_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgGameMatchSignOut::_internal_training_data_recorded() const {
  return _impl_.training_data_recorded_;
}
inline bool CMsgGameMatchSignOut::training_data_recorded() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.training_data_recorded)
  return _internal_training_data_recorded();
}
inline void CMsgGameMatchSignOut::_internal_set_training_data_recorded(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.training_data_recorded_ = value;
}
inline void CMsgGameMatchSignOut::set_training_data_recorded(bool value) {
  _internal_set_training_data_recorded(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.training_data_recorded)
}

// optional .DOTA_GC_TEAM winning_team = 56 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgGameMatchSignOut::_internal_has_winning_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_winning_team() const {
  return _internal_has_winning_team();
}
inline void CMsgGameMatchSignOut::clear_winning_team() {
  _impl_.winning_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::DOTA_GC_TEAM CMsgGameMatchSignOut::_internal_winning_team() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.winning_team_);
}
inline ::DOTA_GC_TEAM CMsgGameMatchSignOut::winning_team() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.winning_team)
  return _internal_winning_team();
}
inline void CMsgGameMatchSignOut::_internal_set_winning_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.winning_team_ = value;
}
inline void CMsgGameMatchSignOut::set_winning_team(::DOTA_GC_TEAM value) {
  _internal_set_winning_team(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.winning_team)
}

// optional float normalized_win_probability_diff = 57;
inline bool CMsgGameMatchSignOut::_internal_has_normalized_win_probability_diff() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOut::has_normalized_win_probability_diff() const {
  return _internal_has_normalized_win_probability_diff();
}
inline void CMsgGameMatchSignOut::clear_normalized_win_probability_diff() {
  _impl_.normalized_win_probability_diff_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CMsgGameMatchSignOut::_internal_normalized_win_probability_diff() const {
  return _impl_.normalized_win_probability_diff_;
}
inline float CMsgGameMatchSignOut::normalized_win_probability_diff() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOut.normalized_win_probability_diff)
  return _internal_normalized_win_probability_diff();
}
inline void CMsgGameMatchSignOut::_internal_set_normalized_win_probability_diff(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.normalized_win_probability_diff_ = value;
}
inline void CMsgGameMatchSignOut::set_normalized_win_probability_diff(float value) {
  _internal_set_normalized_win_probability_diff(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOut.normalized_win_probability_diff)
}

// -------------------------------------------------------------------

// CMsgSignOutDraftInfo

// optional uint32 radiant_captain_account_id = 1;
inline bool CMsgSignOutDraftInfo::_internal_has_radiant_captain_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutDraftInfo::has_radiant_captain_account_id() const {
  return _internal_has_radiant_captain_account_id();
}
inline void CMsgSignOutDraftInfo::clear_radiant_captain_account_id() {
  _impl_.radiant_captain_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutDraftInfo::_internal_radiant_captain_account_id() const {
  return _impl_.radiant_captain_account_id_;
}
inline uint32_t CMsgSignOutDraftInfo::radiant_captain_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutDraftInfo.radiant_captain_account_id)
  return _internal_radiant_captain_account_id();
}
inline void CMsgSignOutDraftInfo::_internal_set_radiant_captain_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.radiant_captain_account_id_ = value;
}
inline void CMsgSignOutDraftInfo::set_radiant_captain_account_id(uint32_t value) {
  _internal_set_radiant_captain_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutDraftInfo.radiant_captain_account_id)
}

// optional uint32 dire_captain_account_id = 2;
inline bool CMsgSignOutDraftInfo::_internal_has_dire_captain_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutDraftInfo::has_dire_captain_account_id() const {
  return _internal_has_dire_captain_account_id();
}
inline void CMsgSignOutDraftInfo::clear_dire_captain_account_id() {
  _impl_.dire_captain_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutDraftInfo::_internal_dire_captain_account_id() const {
  return _impl_.dire_captain_account_id_;
}
inline uint32_t CMsgSignOutDraftInfo::dire_captain_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutDraftInfo.dire_captain_account_id)
  return _internal_dire_captain_account_id();
}
inline void CMsgSignOutDraftInfo::_internal_set_dire_captain_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dire_captain_account_id_ = value;
}
inline void CMsgSignOutDraftInfo::set_dire_captain_account_id(uint32_t value) {
  _internal_set_dire_captain_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutDraftInfo.dire_captain_account_id)
}

// repeated .CMatchHeroSelectEvent picks_bans = 3;
inline int CMsgSignOutDraftInfo::_internal_picks_bans_size() const {
  return _impl_.picks_bans_.size();
}
inline int CMsgSignOutDraftInfo::picks_bans_size() const {
  return _internal_picks_bans_size();
}
inline ::CMatchHeroSelectEvent* CMsgSignOutDraftInfo::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutDraftInfo.picks_bans)
  return _impl_.picks_bans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >*
CMsgSignOutDraftInfo::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutDraftInfo.picks_bans)
  return &_impl_.picks_bans_;
}
inline const ::CMatchHeroSelectEvent& CMsgSignOutDraftInfo::_internal_picks_bans(int index) const {
  return _impl_.picks_bans_.Get(index);
}
inline const ::CMatchHeroSelectEvent& CMsgSignOutDraftInfo::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutDraftInfo.picks_bans)
  return _internal_picks_bans(index);
}
inline ::CMatchHeroSelectEvent* CMsgSignOutDraftInfo::_internal_add_picks_bans() {
  return _impl_.picks_bans_.Add();
}
inline ::CMatchHeroSelectEvent* CMsgSignOutDraftInfo::add_picks_bans() {
  ::CMatchHeroSelectEvent* _add = _internal_add_picks_bans();
  // @@protoc_insertion_point(field_add:CMsgSignOutDraftInfo.picks_bans)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMatchHeroSelectEvent >&
CMsgSignOutDraftInfo::picks_bans() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutDraftInfo.picks_bans)
  return _impl_.picks_bans_;
}

// -------------------------------------------------------------------

// CMsgSignOutBotInfo

// optional bool allow_cheats = 1;
inline bool CMsgSignOutBotInfo::_internal_has_allow_cheats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutBotInfo::has_allow_cheats() const {
  return _internal_has_allow_cheats();
}
inline void CMsgSignOutBotInfo::clear_allow_cheats() {
  _impl_.allow_cheats_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSignOutBotInfo::_internal_allow_cheats() const {
  return _impl_.allow_cheats_;
}
inline bool CMsgSignOutBotInfo::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBotInfo.allow_cheats)
  return _internal_allow_cheats();
}
inline void CMsgSignOutBotInfo::_internal_set_allow_cheats(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.allow_cheats_ = value;
}
inline void CMsgSignOutBotInfo::set_allow_cheats(bool value) {
  _internal_set_allow_cheats(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBotInfo.allow_cheats)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgSignOutBotInfo::_internal_has_bot_difficulty_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutBotInfo::has_bot_difficulty_radiant() const {
  return _internal_has_bot_difficulty_radiant();
}
inline void CMsgSignOutBotInfo::clear_bot_difficulty_radiant() {
  _impl_.bot_difficulty_radiant_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::DOTABotDifficulty CMsgSignOutBotInfo::_internal_bot_difficulty_radiant() const {
  return static_cast< ::DOTABotDifficulty >(_impl_.bot_difficulty_radiant_);
}
inline ::DOTABotDifficulty CMsgSignOutBotInfo::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBotInfo.bot_difficulty_radiant)
  return _internal_bot_difficulty_radiant();
}
inline void CMsgSignOutBotInfo::_internal_set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bot_difficulty_radiant_ = value;
}
inline void CMsgSignOutBotInfo::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBotInfo.bot_difficulty_radiant)
}

// optional bool created_lobby = 3;
inline bool CMsgSignOutBotInfo::_internal_has_created_lobby() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutBotInfo::has_created_lobby() const {
  return _internal_has_created_lobby();
}
inline void CMsgSignOutBotInfo::clear_created_lobby() {
  _impl_.created_lobby_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSignOutBotInfo::_internal_created_lobby() const {
  return _impl_.created_lobby_;
}
inline bool CMsgSignOutBotInfo::created_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBotInfo.created_lobby)
  return _internal_created_lobby();
}
inline void CMsgSignOutBotInfo::_internal_set_created_lobby(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.created_lobby_ = value;
}
inline void CMsgSignOutBotInfo::set_created_lobby(bool value) {
  _internal_set_created_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBotInfo.created_lobby)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgSignOutBotInfo::_internal_has_bot_difficulty_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutBotInfo::has_bot_difficulty_dire() const {
  return _internal_has_bot_difficulty_dire();
}
inline void CMsgSignOutBotInfo::clear_bot_difficulty_dire() {
  _impl_.bot_difficulty_dire_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::DOTABotDifficulty CMsgSignOutBotInfo::_internal_bot_difficulty_dire() const {
  return static_cast< ::DOTABotDifficulty >(_impl_.bot_difficulty_dire_);
}
inline ::DOTABotDifficulty CMsgSignOutBotInfo::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBotInfo.bot_difficulty_dire)
  return _internal_bot_difficulty_dire();
}
inline void CMsgSignOutBotInfo::_internal_set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bot_difficulty_dire_ = value;
}
inline void CMsgSignOutBotInfo::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_dire(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBotInfo.bot_difficulty_dire)
}

// -------------------------------------------------------------------

// CMsgSignOutTextMuteInfo_TextMuteMessage

// optional uint32 region = 1;
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_has_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::has_region() const {
  return _internal_has_region();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::clear_region() {
  _impl_.region_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_region() const {
  return _impl_.region_;
}
inline uint32_t CMsgSignOutTextMuteInfo_TextMuteMessage::region() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutTextMuteInfo.TextMuteMessage.region)
  return _internal_region();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_set_region(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_ = value;
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::set_region(uint32_t value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutTextMuteInfo.TextMuteMessage.region)
}

// optional bool caused_text_mute = 2;
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_has_caused_text_mute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::has_caused_text_mute() const {
  return _internal_has_caused_text_mute();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::clear_caused_text_mute() {
  _impl_.caused_text_mute_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_caused_text_mute() const {
  return _impl_.caused_text_mute_;
}
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::caused_text_mute() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutTextMuteInfo.TextMuteMessage.caused_text_mute)
  return _internal_caused_text_mute();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_set_caused_text_mute(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.caused_text_mute_ = value;
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::set_caused_text_mute(bool value) {
  _internal_set_caused_text_mute(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutTextMuteInfo.TextMuteMessage.caused_text_mute)
}

// optional string chat_message = 3;
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_has_chat_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutTextMuteInfo_TextMuteMessage::has_chat_message() const {
  return _internal_has_chat_message();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::clear_chat_message() {
  _impl_.chat_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSignOutTextMuteInfo_TextMuteMessage::chat_message() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message)
  return _internal_chat_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSignOutTextMuteInfo_TextMuteMessage::set_chat_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.chat_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message)
}
inline std::string* CMsgSignOutTextMuteInfo_TextMuteMessage::mutable_chat_message() {
  std::string* _s = _internal_mutable_chat_message();
  // @@protoc_insertion_point(field_mutable:CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message)
  return _s;
}
inline const std::string& CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_chat_message() const {
  return _impl_.chat_message_.Get();
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_set_chat_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chat_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSignOutTextMuteInfo_TextMuteMessage::_internal_mutable_chat_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chat_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSignOutTextMuteInfo_TextMuteMessage::release_chat_message() {
  // @@protoc_insertion_point(field_release:CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message)
  if (!_internal_has_chat_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.chat_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_message_.IsDefault()) {
    _impl_.chat_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSignOutTextMuteInfo_TextMuteMessage::set_allocated_chat_message(std::string* chat_message) {
  if (chat_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chat_message_.SetAllocated(chat_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_message_.IsDefault()) {
    _impl_.chat_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message)
}

// -------------------------------------------------------------------

// CMsgSignOutTextMuteInfo

// repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
inline int CMsgSignOutTextMuteInfo::_internal_text_mute_messages_size() const {
  return _impl_.text_mute_messages_.size();
}
inline int CMsgSignOutTextMuteInfo::text_mute_messages_size() const {
  return _internal_text_mute_messages_size();
}
inline void CMsgSignOutTextMuteInfo::clear_text_mute_messages() {
  _impl_.text_mute_messages_.Clear();
}
inline ::CMsgSignOutTextMuteInfo_TextMuteMessage* CMsgSignOutTextMuteInfo::mutable_text_mute_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutTextMuteInfo.text_mute_messages)
  return _impl_.text_mute_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutTextMuteInfo_TextMuteMessage >*
CMsgSignOutTextMuteInfo::mutable_text_mute_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutTextMuteInfo.text_mute_messages)
  return &_impl_.text_mute_messages_;
}
inline const ::CMsgSignOutTextMuteInfo_TextMuteMessage& CMsgSignOutTextMuteInfo::_internal_text_mute_messages(int index) const {
  return _impl_.text_mute_messages_.Get(index);
}
inline const ::CMsgSignOutTextMuteInfo_TextMuteMessage& CMsgSignOutTextMuteInfo::text_mute_messages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutTextMuteInfo.text_mute_messages)
  return _internal_text_mute_messages(index);
}
inline ::CMsgSignOutTextMuteInfo_TextMuteMessage* CMsgSignOutTextMuteInfo::_internal_add_text_mute_messages() {
  return _impl_.text_mute_messages_.Add();
}
inline ::CMsgSignOutTextMuteInfo_TextMuteMessage* CMsgSignOutTextMuteInfo::add_text_mute_messages() {
  ::CMsgSignOutTextMuteInfo_TextMuteMessage* _add = _internal_add_text_mute_messages();
  // @@protoc_insertion_point(field_add:CMsgSignOutTextMuteInfo.text_mute_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutTextMuteInfo_TextMuteMessage >&
CMsgSignOutTextMuteInfo::text_mute_messages() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutTextMuteInfo.text_mute_messages)
  return _impl_.text_mute_messages_;
}

// -------------------------------------------------------------------

// CMsgSignOutPlayerStats

// optional int32 account_id = 1;
inline bool CMsgSignOutPlayerStats::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutPlayerStats::clear_account_id() {
  _impl_.account_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgSignOutPlayerStats::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t CMsgSignOutPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutPlayerStats::_internal_set_account_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutPlayerStats::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.account_id)
}

// optional uint64 match_id = 2;
inline bool CMsgSignOutPlayerStats::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSignOutPlayerStats::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSignOutPlayerStats::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSignOutPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.match_id)
  return _internal_match_id();
}
inline void CMsgSignOutPlayerStats::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgSignOutPlayerStats::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.match_id)
}

// optional uint32 rank = 3;
inline bool CMsgSignOutPlayerStats::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgSignOutPlayerStats::clear_rank() {
  _impl_.rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CMsgSignOutPlayerStats::rank() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.rank)
  return _internal_rank();
}
inline void CMsgSignOutPlayerStats::_internal_set_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rank_ = value;
}
inline void CMsgSignOutPlayerStats::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.rank)
}

// optional uint32 hero_id = 4;
inline bool CMsgSignOutPlayerStats::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSignOutPlayerStats::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSignOutPlayerStats::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.hero_id)
  return _internal_hero_id();
}
inline void CMsgSignOutPlayerStats::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgSignOutPlayerStats::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.hero_id)
}

// optional uint32 rampages = 5;
inline bool CMsgSignOutPlayerStats::_internal_has_rampages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_rampages() const {
  return _internal_has_rampages();
}
inline void CMsgSignOutPlayerStats::clear_rampages() {
  _impl_.rampages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_rampages() const {
  return _impl_.rampages_;
}
inline uint32_t CMsgSignOutPlayerStats::rampages() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.rampages)
  return _internal_rampages();
}
inline void CMsgSignOutPlayerStats::_internal_set_rampages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rampages_ = value;
}
inline void CMsgSignOutPlayerStats::set_rampages(uint32_t value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.rampages)
}

// optional uint32 triple_kills = 6;
inline bool CMsgSignOutPlayerStats::_internal_has_triple_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CMsgSignOutPlayerStats::clear_triple_kills() {
  _impl_.triple_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_triple_kills() const {
  return _impl_.triple_kills_;
}
inline uint32_t CMsgSignOutPlayerStats::triple_kills() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.triple_kills)
  return _internal_triple_kills();
}
inline void CMsgSignOutPlayerStats::_internal_set_triple_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.triple_kills_ = value;
}
inline void CMsgSignOutPlayerStats::set_triple_kills(uint32_t value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.triple_kills)
}

// optional uint32 first_blood_claimed = 7;
inline bool CMsgSignOutPlayerStats::_internal_has_first_blood_claimed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_first_blood_claimed() const {
  return _internal_has_first_blood_claimed();
}
inline void CMsgSignOutPlayerStats::clear_first_blood_claimed() {
  _impl_.first_blood_claimed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_first_blood_claimed() const {
  return _impl_.first_blood_claimed_;
}
inline uint32_t CMsgSignOutPlayerStats::first_blood_claimed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.first_blood_claimed)
  return _internal_first_blood_claimed();
}
inline void CMsgSignOutPlayerStats::_internal_set_first_blood_claimed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.first_blood_claimed_ = value;
}
inline void CMsgSignOutPlayerStats::set_first_blood_claimed(uint32_t value) {
  _internal_set_first_blood_claimed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.first_blood_claimed)
}

// optional uint32 first_blood_given = 8;
inline bool CMsgSignOutPlayerStats::_internal_has_first_blood_given() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_first_blood_given() const {
  return _internal_has_first_blood_given();
}
inline void CMsgSignOutPlayerStats::clear_first_blood_given() {
  _impl_.first_blood_given_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_first_blood_given() const {
  return _impl_.first_blood_given_;
}
inline uint32_t CMsgSignOutPlayerStats::first_blood_given() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.first_blood_given)
  return _internal_first_blood_given();
}
inline void CMsgSignOutPlayerStats::_internal_set_first_blood_given(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.first_blood_given_ = value;
}
inline void CMsgSignOutPlayerStats::set_first_blood_given(uint32_t value) {
  _internal_set_first_blood_given(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.first_blood_given)
}

// optional uint32 couriers_killed = 9;
inline bool CMsgSignOutPlayerStats::_internal_has_couriers_killed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_couriers_killed() const {
  return _internal_has_couriers_killed();
}
inline void CMsgSignOutPlayerStats::clear_couriers_killed() {
  _impl_.couriers_killed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_couriers_killed() const {
  return _impl_.couriers_killed_;
}
inline uint32_t CMsgSignOutPlayerStats::couriers_killed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.couriers_killed)
  return _internal_couriers_killed();
}
inline void CMsgSignOutPlayerStats::_internal_set_couriers_killed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.couriers_killed_ = value;
}
inline void CMsgSignOutPlayerStats::set_couriers_killed(uint32_t value) {
  _internal_set_couriers_killed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.couriers_killed)
}

// optional uint32 aegises_snatched = 10;
inline bool CMsgSignOutPlayerStats::_internal_has_aegises_snatched() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_aegises_snatched() const {
  return _internal_has_aegises_snatched();
}
inline void CMsgSignOutPlayerStats::clear_aegises_snatched() {
  _impl_.aegises_snatched_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_aegises_snatched() const {
  return _impl_.aegises_snatched_;
}
inline uint32_t CMsgSignOutPlayerStats::aegises_snatched() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.aegises_snatched)
  return _internal_aegises_snatched();
}
inline void CMsgSignOutPlayerStats::_internal_set_aegises_snatched(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.aegises_snatched_ = value;
}
inline void CMsgSignOutPlayerStats::set_aegises_snatched(uint32_t value) {
  _internal_set_aegises_snatched(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.aegises_snatched)
}

// optional uint32 cheeses_eaten = 11;
inline bool CMsgSignOutPlayerStats::_internal_has_cheeses_eaten() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_cheeses_eaten() const {
  return _internal_has_cheeses_eaten();
}
inline void CMsgSignOutPlayerStats::clear_cheeses_eaten() {
  _impl_.cheeses_eaten_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_cheeses_eaten() const {
  return _impl_.cheeses_eaten_;
}
inline uint32_t CMsgSignOutPlayerStats::cheeses_eaten() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.cheeses_eaten)
  return _internal_cheeses_eaten();
}
inline void CMsgSignOutPlayerStats::_internal_set_cheeses_eaten(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cheeses_eaten_ = value;
}
inline void CMsgSignOutPlayerStats::set_cheeses_eaten(uint32_t value) {
  _internal_set_cheeses_eaten(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.cheeses_eaten)
}

// optional uint32 creeps_stacked = 12;
inline bool CMsgSignOutPlayerStats::_internal_has_creeps_stacked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_creeps_stacked() const {
  return _internal_has_creeps_stacked();
}
inline void CMsgSignOutPlayerStats::clear_creeps_stacked() {
  _impl_.creeps_stacked_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_creeps_stacked() const {
  return _impl_.creeps_stacked_;
}
inline uint32_t CMsgSignOutPlayerStats::creeps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.creeps_stacked)
  return _internal_creeps_stacked();
}
inline void CMsgSignOutPlayerStats::_internal_set_creeps_stacked(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.creeps_stacked_ = value;
}
inline void CMsgSignOutPlayerStats::set_creeps_stacked(uint32_t value) {
  _internal_set_creeps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.creeps_stacked)
}

// optional float fight_score = 13;
inline bool CMsgSignOutPlayerStats::_internal_has_fight_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_fight_score() const {
  return _internal_has_fight_score();
}
inline void CMsgSignOutPlayerStats::clear_fight_score() {
  _impl_.fight_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgSignOutPlayerStats::_internal_fight_score() const {
  return _impl_.fight_score_;
}
inline float CMsgSignOutPlayerStats::fight_score() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.fight_score)
  return _internal_fight_score();
}
inline void CMsgSignOutPlayerStats::_internal_set_fight_score(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fight_score_ = value;
}
inline void CMsgSignOutPlayerStats::set_fight_score(float value) {
  _internal_set_fight_score(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.fight_score)
}

// optional float farm_score = 14;
inline bool CMsgSignOutPlayerStats::_internal_has_farm_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_farm_score() const {
  return _internal_has_farm_score();
}
inline void CMsgSignOutPlayerStats::clear_farm_score() {
  _impl_.farm_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float CMsgSignOutPlayerStats::_internal_farm_score() const {
  return _impl_.farm_score_;
}
inline float CMsgSignOutPlayerStats::farm_score() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.farm_score)
  return _internal_farm_score();
}
inline void CMsgSignOutPlayerStats::_internal_set_farm_score(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.farm_score_ = value;
}
inline void CMsgSignOutPlayerStats::set_farm_score(float value) {
  _internal_set_farm_score(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.farm_score)
}

// optional float support_score = 15;
inline bool CMsgSignOutPlayerStats::_internal_has_support_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_support_score() const {
  return _internal_has_support_score();
}
inline void CMsgSignOutPlayerStats::clear_support_score() {
  _impl_.support_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CMsgSignOutPlayerStats::_internal_support_score() const {
  return _impl_.support_score_;
}
inline float CMsgSignOutPlayerStats::support_score() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.support_score)
  return _internal_support_score();
}
inline void CMsgSignOutPlayerStats::_internal_set_support_score(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.support_score_ = value;
}
inline void CMsgSignOutPlayerStats::set_support_score(float value) {
  _internal_set_support_score(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.support_score)
}

// optional float push_score = 16;
inline bool CMsgSignOutPlayerStats::_internal_has_push_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_push_score() const {
  return _internal_has_push_score();
}
inline void CMsgSignOutPlayerStats::clear_push_score() {
  _impl_.push_score_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float CMsgSignOutPlayerStats::_internal_push_score() const {
  return _impl_.push_score_;
}
inline float CMsgSignOutPlayerStats::push_score() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.push_score)
  return _internal_push_score();
}
inline void CMsgSignOutPlayerStats::_internal_set_push_score(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.push_score_ = value;
}
inline void CMsgSignOutPlayerStats::set_push_score(float value) {
  _internal_set_push_score(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.push_score)
}

// optional uint32 kills = 17;
inline bool CMsgSignOutPlayerStats::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgSignOutPlayerStats::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgSignOutPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.kills)
  return _internal_kills();
}
inline void CMsgSignOutPlayerStats::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.kills_ = value;
}
inline void CMsgSignOutPlayerStats::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.kills)
}

// optional uint32 deaths = 18;
inline bool CMsgSignOutPlayerStats::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgSignOutPlayerStats::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgSignOutPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.deaths)
  return _internal_deaths();
}
inline void CMsgSignOutPlayerStats::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.deaths_ = value;
}
inline void CMsgSignOutPlayerStats::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.deaths)
}

// optional uint32 assists = 19;
inline bool CMsgSignOutPlayerStats::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgSignOutPlayerStats::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgSignOutPlayerStats::assists() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.assists)
  return _internal_assists();
}
inline void CMsgSignOutPlayerStats::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.assists_ = value;
}
inline void CMsgSignOutPlayerStats::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.assists)
}

// optional uint32 last_hits = 20;
inline bool CMsgSignOutPlayerStats::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgSignOutPlayerStats::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgSignOutPlayerStats::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.last_hits)
  return _internal_last_hits();
}
inline void CMsgSignOutPlayerStats::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.last_hits_ = value;
}
inline void CMsgSignOutPlayerStats::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.last_hits)
}

// optional uint32 denies = 21;
inline bool CMsgSignOutPlayerStats::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgSignOutPlayerStats::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgSignOutPlayerStats::denies() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.denies)
  return _internal_denies();
}
inline void CMsgSignOutPlayerStats::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.denies_ = value;
}
inline void CMsgSignOutPlayerStats::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.denies)
}

// optional float gpm = 22;
inline bool CMsgSignOutPlayerStats::_internal_has_gpm() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgSignOutPlayerStats::clear_gpm() {
  _impl_.gpm_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float CMsgSignOutPlayerStats::_internal_gpm() const {
  return _impl_.gpm_;
}
inline float CMsgSignOutPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.gpm)
  return _internal_gpm();
}
inline void CMsgSignOutPlayerStats::_internal_set_gpm(float value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.gpm_ = value;
}
inline void CMsgSignOutPlayerStats::set_gpm(float value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.gpm)
}

// optional float xppm = 23;
inline bool CMsgSignOutPlayerStats::_internal_has_xppm() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_xppm() const {
  return _internal_has_xppm();
}
inline void CMsgSignOutPlayerStats::clear_xppm() {
  _impl_.xppm_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline float CMsgSignOutPlayerStats::_internal_xppm() const {
  return _impl_.xppm_;
}
inline float CMsgSignOutPlayerStats::xppm() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.xppm)
  return _internal_xppm();
}
inline void CMsgSignOutPlayerStats::_internal_set_xppm(float value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.xppm_ = value;
}
inline void CMsgSignOutPlayerStats::set_xppm(float value) {
  _internal_set_xppm(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.xppm)
}

// optional float net_worth = 24;
inline bool CMsgSignOutPlayerStats::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgSignOutPlayerStats::clear_net_worth() {
  _impl_.net_worth_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline float CMsgSignOutPlayerStats::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline float CMsgSignOutPlayerStats::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.net_worth)
  return _internal_net_worth();
}
inline void CMsgSignOutPlayerStats::_internal_set_net_worth(float value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.net_worth_ = value;
}
inline void CMsgSignOutPlayerStats::set_net_worth(float value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.net_worth)
}

// optional float damage = 25;
inline bool CMsgSignOutPlayerStats::_internal_has_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_damage() const {
  return _internal_has_damage();
}
inline void CMsgSignOutPlayerStats::clear_damage() {
  _impl_.damage_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline float CMsgSignOutPlayerStats::_internal_damage() const {
  return _impl_.damage_;
}
inline float CMsgSignOutPlayerStats::damage() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.damage)
  return _internal_damage();
}
inline void CMsgSignOutPlayerStats::_internal_set_damage(float value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.damage_ = value;
}
inline void CMsgSignOutPlayerStats::set_damage(float value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.damage)
}

// optional float heals = 26;
inline bool CMsgSignOutPlayerStats::_internal_has_heals() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_heals() const {
  return _internal_has_heals();
}
inline void CMsgSignOutPlayerStats::clear_heals() {
  _impl_.heals_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline float CMsgSignOutPlayerStats::_internal_heals() const {
  return _impl_.heals_;
}
inline float CMsgSignOutPlayerStats::heals() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.heals)
  return _internal_heals();
}
inline void CMsgSignOutPlayerStats::_internal_set_heals(float value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.heals_ = value;
}
inline void CMsgSignOutPlayerStats::set_heals(float value) {
  _internal_set_heals(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.heals)
}

// optional uint32 rapiers_purchased = 27;
inline bool CMsgSignOutPlayerStats::_internal_has_rapiers_purchased() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_rapiers_purchased() const {
  return _internal_has_rapiers_purchased();
}
inline void CMsgSignOutPlayerStats::clear_rapiers_purchased() {
  _impl_.rapiers_purchased_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_rapiers_purchased() const {
  return _impl_.rapiers_purchased_;
}
inline uint32_t CMsgSignOutPlayerStats::rapiers_purchased() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.rapiers_purchased)
  return _internal_rapiers_purchased();
}
inline void CMsgSignOutPlayerStats::_internal_set_rapiers_purchased(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.rapiers_purchased_ = value;
}
inline void CMsgSignOutPlayerStats::set_rapiers_purchased(uint32_t value) {
  _internal_set_rapiers_purchased(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.rapiers_purchased)
}

// optional uint32 observer_wards_placed = 28;
inline bool CMsgSignOutPlayerStats::_internal_has_observer_wards_placed() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_observer_wards_placed() const {
  return _internal_has_observer_wards_placed();
}
inline void CMsgSignOutPlayerStats::clear_observer_wards_placed() {
  _impl_.observer_wards_placed_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_observer_wards_placed() const {
  return _impl_.observer_wards_placed_;
}
inline uint32_t CMsgSignOutPlayerStats::observer_wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.observer_wards_placed)
  return _internal_observer_wards_placed();
}
inline void CMsgSignOutPlayerStats::_internal_set_observer_wards_placed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.observer_wards_placed_ = value;
}
inline void CMsgSignOutPlayerStats::set_observer_wards_placed(uint32_t value) {
  _internal_set_observer_wards_placed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.observer_wards_placed)
}

// optional uint32 wards_destroyed = 29;
inline bool CMsgSignOutPlayerStats::_internal_has_wards_destroyed() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_wards_destroyed() const {
  return _internal_has_wards_destroyed();
}
inline void CMsgSignOutPlayerStats::clear_wards_destroyed() {
  _impl_.wards_destroyed_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_wards_destroyed() const {
  return _impl_.wards_destroyed_;
}
inline uint32_t CMsgSignOutPlayerStats::wards_destroyed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.wards_destroyed)
  return _internal_wards_destroyed();
}
inline void CMsgSignOutPlayerStats::_internal_set_wards_destroyed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.wards_destroyed_ = value;
}
inline void CMsgSignOutPlayerStats::set_wards_destroyed(uint32_t value) {
  _internal_set_wards_destroyed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.wards_destroyed)
}

// optional uint32 lobby_type = 30;
inline bool CMsgSignOutPlayerStats::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgSignOutPlayerStats::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgSignOutPlayerStats::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgSignOutPlayerStats::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgSignOutPlayerStats::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutPlayerStats.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgSignOutPlayerStats::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.lobby_type_ = value;
}
inline void CMsgSignOutPlayerStats::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutPlayerStats.lobby_type)
}

// -------------------------------------------------------------------

// CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail

// optional uint32 type = 1 [default = 4294967295];
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::has_type() const {
  return _internal_has_type();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::clear_type() {
  _impl_.type_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_type() const {
  return _impl_.type_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::type() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail.type)
  return _internal_type();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_set_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.type_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::set_type(uint32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail.type)
}

// optional uint32 count = 2;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::has_count() const {
  return _internal_has_count();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::count() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail.count)
  return _internal_count();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_internal_set_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.count_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail.count)
}

// -------------------------------------------------------------------

// CMsgSignOutCommunicationSummary_PlayerCommunication

// optional uint32 account_id = 1;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.account_id)
}

// optional uint32 pings = 2;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_pings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_pings() const {
  return _internal_has_pings();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_pings() {
  _impl_.pings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_pings() const {
  return _impl_.pings_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::pings() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.pings)
  return _internal_pings();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_pings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pings_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_pings(uint32_t value) {
  _internal_set_pings(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.pings)
}

// optional uint32 max_pings_per_interval = 3;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_max_pings_per_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_max_pings_per_interval() const {
  return _internal_has_max_pings_per_interval();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_max_pings_per_interval() {
  _impl_.max_pings_per_interval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_max_pings_per_interval() const {
  return _impl_.max_pings_per_interval_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::max_pings_per_interval() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.max_pings_per_interval)
  return _internal_max_pings_per_interval();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_max_pings_per_interval(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_pings_per_interval_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_max_pings_per_interval(uint32_t value) {
  _internal_set_max_pings_per_interval(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.max_pings_per_interval)
}

// optional uint32 teammate_pings = 4;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_teammate_pings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_teammate_pings() const {
  return _internal_has_teammate_pings();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_teammate_pings() {
  _impl_.teammate_pings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_teammate_pings() const {
  return _impl_.teammate_pings_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::teammate_pings() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.teammate_pings)
  return _internal_teammate_pings();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_teammate_pings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.teammate_pings_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_teammate_pings(uint32_t value) {
  _internal_set_teammate_pings(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.teammate_pings)
}

// optional uint32 max_teammate_pings_per_interval = 5;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_max_teammate_pings_per_interval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_max_teammate_pings_per_interval() const {
  return _internal_has_max_teammate_pings_per_interval();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_max_teammate_pings_per_interval() {
  _impl_.max_teammate_pings_per_interval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_max_teammate_pings_per_interval() const {
  return _impl_.max_teammate_pings_per_interval_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::max_teammate_pings_per_interval() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.max_teammate_pings_per_interval)
  return _internal_max_teammate_pings_per_interval();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_max_teammate_pings_per_interval(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.max_teammate_pings_per_interval_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_max_teammate_pings_per_interval(uint32_t value) {
  _internal_set_max_teammate_pings_per_interval(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.max_teammate_pings_per_interval)
}

// optional uint32 team_chat_messages = 6;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_team_chat_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_team_chat_messages() const {
  return _internal_has_team_chat_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_team_chat_messages() {
  _impl_.team_chat_messages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_team_chat_messages() const {
  return _impl_.team_chat_messages_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::team_chat_messages() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.team_chat_messages)
  return _internal_team_chat_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_team_chat_messages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_chat_messages_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_team_chat_messages(uint32_t value) {
  _internal_set_team_chat_messages(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.team_chat_messages)
}

// optional uint32 all_chat_messages = 7;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_all_chat_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_all_chat_messages() const {
  return _internal_has_all_chat_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_all_chat_messages() {
  _impl_.all_chat_messages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_all_chat_messages() const {
  return _impl_.all_chat_messages_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::all_chat_messages() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.all_chat_messages)
  return _internal_all_chat_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_all_chat_messages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.all_chat_messages_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_all_chat_messages(uint32_t value) {
  _internal_set_all_chat_messages(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.all_chat_messages)
}

// optional uint32 chat_wheel_messages = 8;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_chat_wheel_messages() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_chat_wheel_messages() const {
  return _internal_has_chat_wheel_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_chat_wheel_messages() {
  _impl_.chat_wheel_messages_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_chat_wheel_messages() const {
  return _impl_.chat_wheel_messages_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::chat_wheel_messages() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.chat_wheel_messages)
  return _internal_chat_wheel_messages();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_chat_wheel_messages(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.chat_wheel_messages_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_chat_wheel_messages(uint32_t value) {
  _internal_set_chat_wheel_messages(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.chat_wheel_messages)
}

// optional uint32 pauses = 9;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_pauses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_pauses() const {
  return _internal_has_pauses();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_pauses() {
  _impl_.pauses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_pauses() const {
  return _impl_.pauses_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::pauses() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.pauses)
  return _internal_pauses();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_pauses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.pauses_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_pauses(uint32_t value) {
  _internal_set_pauses(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.pauses)
}

// optional uint32 unpauses = 10;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_unpauses() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_unpauses() const {
  return _internal_has_unpauses();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_unpauses() {
  _impl_.unpauses_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_unpauses() const {
  return _impl_.unpauses_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::unpauses() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.unpauses)
  return _internal_unpauses();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_unpauses(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.unpauses_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_unpauses(uint32_t value) {
  _internal_set_unpauses(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.unpauses)
}

// optional uint32 lines_drawn = 11;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_lines_drawn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_lines_drawn() const {
  return _internal_has_lines_drawn();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_lines_drawn() {
  _impl_.lines_drawn_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_lines_drawn() const {
  return _impl_.lines_drawn_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::lines_drawn() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.lines_drawn)
  return _internal_lines_drawn();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_lines_drawn(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.lines_drawn_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_lines_drawn(uint32_t value) {
  _internal_set_lines_drawn(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.lines_drawn)
}

// optional uint32 voice_chat_seconds = 12;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_voice_chat_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_voice_chat_seconds() const {
  return _internal_has_voice_chat_seconds();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_voice_chat_seconds() {
  _impl_.voice_chat_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_voice_chat_seconds() const {
  return _impl_.voice_chat_seconds_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::voice_chat_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.voice_chat_seconds)
  return _internal_voice_chat_seconds();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_voice_chat_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.voice_chat_seconds_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_voice_chat_seconds(uint32_t value) {
  _internal_set_voice_chat_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.voice_chat_seconds)
}

// optional uint32 chat_mutes = 13;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_chat_mutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_chat_mutes() const {
  return _internal_has_chat_mutes();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_chat_mutes() {
  _impl_.chat_mutes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_chat_mutes() const {
  return _impl_.chat_mutes_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::chat_mutes() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.chat_mutes)
  return _internal_chat_mutes();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_chat_mutes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.chat_mutes_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_chat_mutes(uint32_t value) {
  _internal_set_chat_mutes(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.chat_mutes)
}

// optional uint32 voice_mutes = 14;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_voice_mutes() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_voice_mutes() const {
  return _internal_has_voice_mutes();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_voice_mutes() {
  _impl_.voice_mutes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_voice_mutes() const {
  return _impl_.voice_mutes_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::voice_mutes() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.voice_mutes)
  return _internal_voice_mutes();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_voice_mutes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.voice_mutes_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_voice_mutes(uint32_t value) {
  _internal_set_voice_mutes(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.voice_mutes)
}

// repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
inline int CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_ping_details_size() const {
  return _impl_.ping_details_.size();
}
inline int CMsgSignOutCommunicationSummary_PlayerCommunication::ping_details_size() const {
  return _internal_ping_details_size();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_ping_details() {
  _impl_.ping_details_.Clear();
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* CMsgSignOutCommunicationSummary_PlayerCommunication::mutable_ping_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details)
  return _impl_.ping_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >*
CMsgSignOutCommunicationSummary_PlayerCommunication::mutable_ping_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details)
  return &_impl_.ping_details_;
}
inline const ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_ping_details(int index) const {
  return _impl_.ping_details_.Get(index);
}
inline const ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& CMsgSignOutCommunicationSummary_PlayerCommunication::ping_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details)
  return _internal_ping_details(index);
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_add_ping_details() {
  return _impl_.ping_details_.Add();
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* CMsgSignOutCommunicationSummary_PlayerCommunication::add_ping_details() {
  ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* _add = _internal_add_ping_details();
  // @@protoc_insertion_point(field_add:CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >&
CMsgSignOutCommunicationSummary_PlayerCommunication::ping_details() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutCommunicationSummary.PlayerCommunication.ping_details)
  return _impl_.ping_details_;
}

// optional uint32 comms_blocks_solo = 16;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_comms_blocks_solo() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_comms_blocks_solo() const {
  return _internal_has_comms_blocks_solo();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_comms_blocks_solo() {
  _impl_.comms_blocks_solo_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_comms_blocks_solo() const {
  return _impl_.comms_blocks_solo_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::comms_blocks_solo() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.comms_blocks_solo)
  return _internal_comms_blocks_solo();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_comms_blocks_solo(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.comms_blocks_solo_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_comms_blocks_solo(uint32_t value) {
  _internal_set_comms_blocks_solo(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.comms_blocks_solo)
}

// optional uint32 comms_blocks_mass = 17;
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_has_comms_blocks_mass() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSignOutCommunicationSummary_PlayerCommunication::has_comms_blocks_mass() const {
  return _internal_has_comms_blocks_mass();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::clear_comms_blocks_mass() {
  _impl_.comms_blocks_mass_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_comms_blocks_mass() const {
  return _impl_.comms_blocks_mass_;
}
inline uint32_t CMsgSignOutCommunicationSummary_PlayerCommunication::comms_blocks_mass() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.PlayerCommunication.comms_blocks_mass)
  return _internal_comms_blocks_mass();
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::_internal_set_comms_blocks_mass(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.comms_blocks_mass_ = value;
}
inline void CMsgSignOutCommunicationSummary_PlayerCommunication::set_comms_blocks_mass(uint32_t value) {
  _internal_set_comms_blocks_mass(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunicationSummary.PlayerCommunication.comms_blocks_mass)
}

// -------------------------------------------------------------------

// CMsgSignOutCommunicationSummary

// repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
inline int CMsgSignOutCommunicationSummary::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgSignOutCommunicationSummary::players_size() const {
  return _internal_players_size();
}
inline void CMsgSignOutCommunicationSummary::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutCommunicationSummary.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication >*
CMsgSignOutCommunicationSummary::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutCommunicationSummary.players)
  return &_impl_.players_;
}
inline const ::CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgSignOutCommunicationSummary_PlayerCommunication& CMsgSignOutCommunicationSummary::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunicationSummary.players)
  return _internal_players(index);
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgSignOutCommunicationSummary_PlayerCommunication* CMsgSignOutCommunicationSummary::add_players() {
  ::CMsgSignOutCommunicationSummary_PlayerCommunication* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgSignOutCommunicationSummary.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunicationSummary_PlayerCommunication >&
CMsgSignOutCommunicationSummary::players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutCommunicationSummary.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignoutResponse_PlayerMetadata

// optional uint32 hero_id = 1;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.hero_id)
  return _internal_hero_id();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.hero_id)
}

// optional uint32 avg_kills_x16 = 2;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_avg_kills_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_kills_x16() const {
  return _internal_has_avg_kills_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_kills_x16() {
  _impl_.avg_kills_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_avg_kills_x16() const {
  return _impl_.avg_kills_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_kills_x16)
  return _internal_avg_kills_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_avg_kills_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.avg_kills_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_kills_x16(uint32_t value) {
  _internal_set_avg_kills_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 3;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_avg_deaths_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_deaths_x16() const {
  return _internal_has_avg_deaths_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_deaths_x16() {
  _impl_.avg_deaths_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_avg_deaths_x16() const {
  return _impl_.avg_deaths_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_deaths_x16)
  return _internal_avg_deaths_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_avg_deaths_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.avg_deaths_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_deaths_x16(uint32_t value) {
  _internal_set_avg_deaths_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 4;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_avg_assists_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_assists_x16() const {
  return _internal_has_avg_assists_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_assists_x16() {
  _impl_.avg_assists_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_avg_assists_x16() const {
  return _impl_.avg_assists_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_assists_x16)
  return _internal_avg_assists_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_avg_assists_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.avg_assists_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_assists_x16(uint32_t value) {
  _internal_set_avg_assists_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 5;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_avg_gpm_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_gpm_x16() const {
  return _internal_has_avg_gpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_gpm_x16() {
  _impl_.avg_gpm_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_avg_gpm_x16() const {
  return _impl_.avg_gpm_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_gpm_x16)
  return _internal_avg_gpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_avg_gpm_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.avg_gpm_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_gpm_x16(uint32_t value) {
  _internal_set_avg_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 6;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_avg_xpm_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_avg_xpm_x16() const {
  return _internal_has_avg_xpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_avg_xpm_x16() {
  _impl_.avg_xpm_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_avg_xpm_x16() const {
  return _impl_.avg_xpm_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_xpm_x16)
  return _internal_avg_xpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_avg_xpm_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.avg_xpm_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_avg_xpm_x16(uint32_t value) {
  _internal_set_avg_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 7;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_best_kills_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_kills_x16() const {
  return _internal_has_best_kills_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_kills_x16() {
  _impl_.best_kills_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_best_kills_x16() const {
  return _impl_.best_kills_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.best_kills_x16)
  return _internal_best_kills_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_best_kills_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.best_kills_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_kills_x16(uint32_t value) {
  _internal_set_best_kills_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.best_kills_x16)
}

// optional uint32 best_assists_x16 = 8;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_best_assists_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_assists_x16() const {
  return _internal_has_best_assists_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_assists_x16() {
  _impl_.best_assists_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_best_assists_x16() const {
  return _impl_.best_assists_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.best_assists_x16)
  return _internal_best_assists_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_best_assists_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.best_assists_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_assists_x16(uint32_t value) {
  _internal_set_best_assists_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 9;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_best_gpm_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_gpm_x16() const {
  return _internal_has_best_gpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_gpm_x16() {
  _impl_.best_gpm_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_best_gpm_x16() const {
  return _impl_.best_gpm_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.best_gpm_x16)
  return _internal_best_gpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_best_gpm_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.best_gpm_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_gpm_x16(uint32_t value) {
  _internal_set_best_gpm_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 10;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_best_xpm_x16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_xpm_x16() const {
  return _internal_has_best_xpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_xpm_x16() {
  _impl_.best_xpm_x16_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_best_xpm_x16() const {
  return _impl_.best_xpm_x16_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.best_xpm_x16)
  return _internal_best_xpm_x16();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_best_xpm_x16(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.best_xpm_x16_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_xpm_x16(uint32_t value) {
  _internal_set_best_xpm_x16(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.best_xpm_x16)
}

// optional uint32 win_streak = 11;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_win_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_win_streak() const {
  return _internal_has_win_streak();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_win_streak() {
  _impl_.win_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_win_streak() const {
  return _impl_.win_streak_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::win_streak() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.win_streak)
  return _internal_win_streak();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_win_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.win_streak_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_win_streak(uint32_t value) {
  _internal_set_win_streak(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.win_streak)
}

// optional uint32 best_win_streak = 12;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_best_win_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_best_win_streak() const {
  return _internal_has_best_win_streak();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_best_win_streak() {
  _impl_.best_win_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_best_win_streak() const {
  return _impl_.best_win_streak_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::best_win_streak() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.best_win_streak)
  return _internal_best_win_streak();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_best_win_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.best_win_streak_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_best_win_streak(uint32_t value) {
  _internal_set_best_win_streak(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.best_win_streak)
}

// optional uint32 games_played = 13;
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_has_games_played() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse_PlayerMetadata::has_games_played() const {
  return _internal_has_games_played();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::clear_games_played() {
  _impl_.games_played_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_games_played() const {
  return _impl_.games_played_;
}
inline uint32_t CMsgGameMatchSignoutResponse_PlayerMetadata::games_played() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.PlayerMetadata.games_played)
  return _internal_games_played();
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::_internal_set_games_played(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.games_played_ = value;
}
inline void CMsgGameMatchSignoutResponse_PlayerMetadata::set_games_played(uint32_t value) {
  _internal_set_games_played(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.PlayerMetadata.games_played)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignoutResponse

// optional uint64 match_id = 1;
inline bool CMsgGameMatchSignoutResponse::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGameMatchSignoutResponse::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgGameMatchSignoutResponse::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgGameMatchSignoutResponse::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.match_id)
  return _internal_match_id();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_id_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.match_id)
}

// optional fixed32 replay_salt = 2;
inline bool CMsgGameMatchSignoutResponse::_internal_has_replay_salt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_replay_salt() const {
  return _internal_has_replay_salt();
}
inline void CMsgGameMatchSignoutResponse::clear_replay_salt() {
  _impl_.replay_salt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignoutResponse::_internal_replay_salt() const {
  return _impl_.replay_salt_;
}
inline uint32_t CMsgGameMatchSignoutResponse::replay_salt() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.replay_salt)
  return _internal_replay_salt();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_replay_salt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.replay_salt_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_replay_salt(uint32_t value) {
  _internal_set_replay_salt(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.replay_salt)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
inline int CMsgGameMatchSignoutResponse::_internal_timed_reward_details_size() const {
  return _impl_.timed_reward_details_.size();
}
inline int CMsgGameMatchSignoutResponse::timed_reward_details_size() const {
  return _internal_timed_reward_details_size();
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.timed_reward_details)
  return _impl_.timed_reward_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CMsgGameMatchSignoutResponse::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignoutResponse.timed_reward_details)
  return &_impl_.timed_reward_details_;
}
inline const ::CLobbyTimedRewardDetails& CMsgGameMatchSignoutResponse::_internal_timed_reward_details(int index) const {
  return _impl_.timed_reward_details_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CMsgGameMatchSignoutResponse::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.timed_reward_details)
  return _internal_timed_reward_details(index);
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::_internal_add_timed_reward_details() {
  return _impl_.timed_reward_details_.Add();
}
inline ::CLobbyTimedRewardDetails* CMsgGameMatchSignoutResponse::add_timed_reward_details() {
  ::CLobbyTimedRewardDetails* _add = _internal_add_timed_reward_details();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignoutResponse.timed_reward_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CMsgGameMatchSignoutResponse::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignoutResponse.timed_reward_details)
  return _impl_.timed_reward_details_;
}

// repeated .CSODOTALobbyMember xp_reward_details = 4;
inline int CMsgGameMatchSignoutResponse::_internal_xp_reward_details_size() const {
  return _impl_.xp_reward_details_.size();
}
inline int CMsgGameMatchSignoutResponse::xp_reward_details_size() const {
  return _internal_xp_reward_details_size();
}
inline ::CSODOTALobbyMember* CMsgGameMatchSignoutResponse::mutable_xp_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.xp_reward_details)
  return _impl_.xp_reward_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
CMsgGameMatchSignoutResponse::mutable_xp_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignoutResponse.xp_reward_details)
  return &_impl_.xp_reward_details_;
}
inline const ::CSODOTALobbyMember& CMsgGameMatchSignoutResponse::_internal_xp_reward_details(int index) const {
  return _impl_.xp_reward_details_.Get(index);
}
inline const ::CSODOTALobbyMember& CMsgGameMatchSignoutResponse::xp_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.xp_reward_details)
  return _internal_xp_reward_details(index);
}
inline ::CSODOTALobbyMember* CMsgGameMatchSignoutResponse::_internal_add_xp_reward_details() {
  return _impl_.xp_reward_details_.Add();
}
inline ::CSODOTALobbyMember* CMsgGameMatchSignoutResponse::add_xp_reward_details() {
  ::CSODOTALobbyMember* _add = _internal_add_xp_reward_details();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignoutResponse.xp_reward_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
CMsgGameMatchSignoutResponse::xp_reward_details() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignoutResponse.xp_reward_details)
  return _impl_.xp_reward_details_;
}

// optional uint32 leagueid = 5;
inline bool CMsgGameMatchSignoutResponse::_internal_has_leagueid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_leagueid() const {
  return _internal_has_leagueid();
}
inline void CMsgGameMatchSignoutResponse::clear_leagueid() {
  _impl_.leagueid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignoutResponse::_internal_leagueid() const {
  return _impl_.leagueid_;
}
inline uint32_t CMsgGameMatchSignoutResponse::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.leagueid)
  return _internal_leagueid();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_leagueid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.leagueid_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_leagueid(uint32_t value) {
  _internal_set_leagueid(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.leagueid)
}

// optional fixed32 metadata_private_key = 7;
inline bool CMsgGameMatchSignoutResponse::_internal_has_metadata_private_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_metadata_private_key() const {
  return _internal_has_metadata_private_key();
}
inline void CMsgGameMatchSignoutResponse::clear_metadata_private_key() {
  _impl_.metadata_private_key_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgGameMatchSignoutResponse::_internal_metadata_private_key() const {
  return _impl_.metadata_private_key_;
}
inline uint32_t CMsgGameMatchSignoutResponse::metadata_private_key() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.metadata_private_key)
  return _internal_metadata_private_key();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_metadata_private_key(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.metadata_private_key_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_metadata_private_key(uint32_t value) {
  _internal_set_metadata_private_key(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.metadata_private_key)
}

// optional .CMsgDOTAMatch match_details = 8;
inline bool CMsgGameMatchSignoutResponse::_internal_has_match_details() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_details_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_match_details() const {
  return _internal_has_match_details();
}
inline const ::CMsgDOTAMatch& CMsgGameMatchSignoutResponse::_internal_match_details() const {
  const ::CMsgDOTAMatch* p = _impl_.match_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAMatch&>(
      ::_CMsgDOTAMatch_default_instance_);
}
inline const ::CMsgDOTAMatch& CMsgGameMatchSignoutResponse::match_details() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.match_details)
  return _internal_match_details();
}
inline void CMsgGameMatchSignoutResponse::unsafe_arena_set_allocated_match_details(
    ::CMsgDOTAMatch* match_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_details_);
  }
  _impl_.match_details_ = match_details;
  if (match_details) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignoutResponse.match_details)
}
inline ::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::release_match_details() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = _impl_.match_details_;
  _impl_.match_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::unsafe_arena_release_match_details() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignoutResponse.match_details)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAMatch* temp = _impl_.match_details_;
  _impl_.match_details_ = nullptr;
  return temp;
}
inline ::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::_internal_mutable_match_details() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAMatch>(GetArenaForAllocation());
    _impl_.match_details_ = p;
  }
  return _impl_.match_details_;
}
inline ::CMsgDOTAMatch* CMsgGameMatchSignoutResponse::mutable_match_details() {
  ::CMsgDOTAMatch* _msg = _internal_mutable_match_details();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.match_details)
  return _msg;
}
inline void CMsgGameMatchSignoutResponse::set_allocated_match_details(::CMsgDOTAMatch* match_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_details_);
  }
  if (match_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_details));
    if (message_arena != submessage_arena) {
      match_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_details, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_details_ = match_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignoutResponse.match_details)
}

// repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
inline int CMsgGameMatchSignoutResponse::_internal_players_metadata_size() const {
  return _impl_.players_metadata_.size();
}
inline int CMsgGameMatchSignoutResponse::players_metadata_size() const {
  return _internal_players_metadata_size();
}
inline void CMsgGameMatchSignoutResponse::clear_players_metadata() {
  _impl_.players_metadata_.Clear();
}
inline ::CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse::mutable_players_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.players_metadata)
  return _impl_.players_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_PlayerMetadata >*
CMsgGameMatchSignoutResponse::mutable_players_metadata() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignoutResponse.players_metadata)
  return &_impl_.players_metadata_;
}
inline const ::CMsgGameMatchSignoutResponse_PlayerMetadata& CMsgGameMatchSignoutResponse::_internal_players_metadata(int index) const {
  return _impl_.players_metadata_.Get(index);
}
inline const ::CMsgGameMatchSignoutResponse_PlayerMetadata& CMsgGameMatchSignoutResponse::players_metadata(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.players_metadata)
  return _internal_players_metadata(index);
}
inline ::CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse::_internal_add_players_metadata() {
  return _impl_.players_metadata_.Add();
}
inline ::CMsgGameMatchSignoutResponse_PlayerMetadata* CMsgGameMatchSignoutResponse::add_players_metadata() {
  ::CMsgGameMatchSignoutResponse_PlayerMetadata* _add = _internal_add_players_metadata();
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignoutResponse.players_metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGameMatchSignoutResponse_PlayerMetadata >&
CMsgGameMatchSignoutResponse::players_metadata() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignoutResponse.players_metadata)
  return _impl_.players_metadata_;
}

// optional .CMvpData mvp_data = 10;
inline bool CMsgGameMatchSignoutResponse::_internal_has_mvp_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mvp_data_ != nullptr);
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_mvp_data() const {
  return _internal_has_mvp_data();
}
inline const ::CMvpData& CMsgGameMatchSignoutResponse::_internal_mvp_data() const {
  const ::CMvpData* p = _impl_.mvp_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMvpData&>(
      ::_CMvpData_default_instance_);
}
inline const ::CMvpData& CMsgGameMatchSignoutResponse::mvp_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.mvp_data)
  return _internal_mvp_data();
}
inline void CMsgGameMatchSignoutResponse::unsafe_arena_set_allocated_mvp_data(
    ::CMvpData* mvp_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mvp_data_);
  }
  _impl_.mvp_data_ = mvp_data;
  if (mvp_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGameMatchSignoutResponse.mvp_data)
}
inline ::CMvpData* CMsgGameMatchSignoutResponse::release_mvp_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMvpData* temp = _impl_.mvp_data_;
  _impl_.mvp_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMvpData* CMsgGameMatchSignoutResponse::unsafe_arena_release_mvp_data() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignoutResponse.mvp_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMvpData* temp = _impl_.mvp_data_;
  _impl_.mvp_data_ = nullptr;
  return temp;
}
inline ::CMvpData* CMsgGameMatchSignoutResponse::_internal_mutable_mvp_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.mvp_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMvpData>(GetArenaForAllocation());
    _impl_.mvp_data_ = p;
  }
  return _impl_.mvp_data_;
}
inline ::CMvpData* CMsgGameMatchSignoutResponse::mutable_mvp_data() {
  ::CMvpData* _msg = _internal_mutable_mvp_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignoutResponse.mvp_data)
  return _msg;
}
inline void CMsgGameMatchSignoutResponse::set_allocated_mvp_data(::CMvpData* mvp_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mvp_data_);
  }
  if (mvp_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mvp_data));
    if (message_arena != submessage_arena) {
      mvp_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mvp_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.mvp_data_ = mvp_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignoutResponse.mvp_data)
}

// optional fixed64 ow_private_key = 11;
inline bool CMsgGameMatchSignoutResponse::_internal_has_ow_private_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_ow_private_key() const {
  return _internal_has_ow_private_key();
}
inline void CMsgGameMatchSignoutResponse::clear_ow_private_key() {
  _impl_.ow_private_key_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgGameMatchSignoutResponse::_internal_ow_private_key() const {
  return _impl_.ow_private_key_;
}
inline uint64_t CMsgGameMatchSignoutResponse::ow_private_key() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.ow_private_key)
  return _internal_ow_private_key();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_ow_private_key(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ow_private_key_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_ow_private_key(uint64_t value) {
  _internal_set_ow_private_key(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.ow_private_key)
}

// optional fixed32 ow_salt = 12;
inline bool CMsgGameMatchSignoutResponse::_internal_has_ow_salt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_ow_salt() const {
  return _internal_has_ow_salt();
}
inline void CMsgGameMatchSignoutResponse::clear_ow_salt() {
  _impl_.ow_salt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgGameMatchSignoutResponse::_internal_ow_salt() const {
  return _impl_.ow_salt_;
}
inline uint32_t CMsgGameMatchSignoutResponse::ow_salt() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.ow_salt)
  return _internal_ow_salt();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_ow_salt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ow_salt_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_ow_salt(uint32_t value) {
  _internal_set_ow_salt(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.ow_salt)
}

// optional uint64 ow_replay_id = 13;
inline bool CMsgGameMatchSignoutResponse::_internal_has_ow_replay_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgGameMatchSignoutResponse::has_ow_replay_id() const {
  return _internal_has_ow_replay_id();
}
inline void CMsgGameMatchSignoutResponse::clear_ow_replay_id() {
  _impl_.ow_replay_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgGameMatchSignoutResponse::_internal_ow_replay_id() const {
  return _impl_.ow_replay_id_;
}
inline uint64_t CMsgGameMatchSignoutResponse::ow_replay_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignoutResponse.ow_replay_id)
  return _internal_ow_replay_id();
}
inline void CMsgGameMatchSignoutResponse::_internal_set_ow_replay_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ow_replay_id_ = value;
}
inline void CMsgGameMatchSignoutResponse::set_ow_replay_id(uint64_t value) {
  _internal_set_ow_replay_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignoutResponse.ow_replay_id)
}

// -------------------------------------------------------------------

// CMsgTimedRewardContainer

// repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
inline int CMsgTimedRewardContainer::_internal_timed_reward_details_size() const {
  return _impl_.timed_reward_details_.size();
}
inline int CMsgTimedRewardContainer::timed_reward_details_size() const {
  return _internal_timed_reward_details_size();
}
inline ::CLobbyTimedRewardDetails* CMsgTimedRewardContainer::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTimedRewardContainer.timed_reward_details)
  return _impl_.timed_reward_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CMsgTimedRewardContainer::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTimedRewardContainer.timed_reward_details)
  return &_impl_.timed_reward_details_;
}
inline const ::CLobbyTimedRewardDetails& CMsgTimedRewardContainer::_internal_timed_reward_details(int index) const {
  return _impl_.timed_reward_details_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CMsgTimedRewardContainer::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTimedRewardContainer.timed_reward_details)
  return _internal_timed_reward_details(index);
}
inline ::CLobbyTimedRewardDetails* CMsgTimedRewardContainer::_internal_add_timed_reward_details() {
  return _impl_.timed_reward_details_.Add();
}
inline ::CLobbyTimedRewardDetails* CMsgTimedRewardContainer::add_timed_reward_details() {
  ::CLobbyTimedRewardDetails* _add = _internal_add_timed_reward_details();
  // @@protoc_insertion_point(field_add:CMsgTimedRewardContainer.timed_reward_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CMsgTimedRewardContainer::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CMsgTimedRewardContainer.timed_reward_details)
  return _impl_.timed_reward_details_;
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutPermissionRequest

// optional uint32 server_version = 1;
inline bool CMsgGameMatchSignOutPermissionRequest::_internal_has_server_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionRequest::has_server_version() const {
  return _internal_has_server_version();
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_server_version() {
  _impl_.server_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::_internal_server_version() const {
  return _impl_.server_version_;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::server_version() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionRequest.server_version)
  return _internal_server_version();
}
inline void CMsgGameMatchSignOutPermissionRequest::_internal_set_server_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_version_ = value;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_server_version(uint32_t value) {
  _internal_set_server_version(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionRequest.server_version)
}

// optional uint32 local_attempt = 2;
inline bool CMsgGameMatchSignOutPermissionRequest::_internal_has_local_attempt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionRequest::has_local_attempt() const {
  return _internal_has_local_attempt();
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_local_attempt() {
  _impl_.local_attempt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::_internal_local_attempt() const {
  return _impl_.local_attempt_;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::local_attempt() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionRequest.local_attempt)
  return _internal_local_attempt();
}
inline void CMsgGameMatchSignOutPermissionRequest::_internal_set_local_attempt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.local_attempt_ = value;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_local_attempt(uint32_t value) {
  _internal_set_local_attempt(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionRequest.local_attempt)
}

// optional uint32 total_attempt = 3;
inline bool CMsgGameMatchSignOutPermissionRequest::_internal_has_total_attempt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionRequest::has_total_attempt() const {
  return _internal_has_total_attempt();
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_total_attempt() {
  _impl_.total_attempt_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::_internal_total_attempt() const {
  return _impl_.total_attempt_;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::total_attempt() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionRequest.total_attempt)
  return _internal_total_attempt();
}
inline void CMsgGameMatchSignOutPermissionRequest::_internal_set_total_attempt(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.total_attempt_ = value;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_total_attempt(uint32_t value) {
  _internal_set_total_attempt(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionRequest.total_attempt)
}

// optional uint32 seconds_waited = 4;
inline bool CMsgGameMatchSignOutPermissionRequest::_internal_has_seconds_waited() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionRequest::has_seconds_waited() const {
  return _internal_has_seconds_waited();
}
inline void CMsgGameMatchSignOutPermissionRequest::clear_seconds_waited() {
  _impl_.seconds_waited_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::_internal_seconds_waited() const {
  return _impl_.seconds_waited_;
}
inline uint32_t CMsgGameMatchSignOutPermissionRequest::seconds_waited() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionRequest.seconds_waited)
  return _internal_seconds_waited();
}
inline void CMsgGameMatchSignOutPermissionRequest::_internal_set_seconds_waited(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.seconds_waited_ = value;
}
inline void CMsgGameMatchSignOutPermissionRequest::set_seconds_waited(uint32_t value) {
  _internal_set_seconds_waited(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionRequest.seconds_waited)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutPermissionResponse

// optional bool permission_granted = 1 [default = false];
inline bool CMsgGameMatchSignOutPermissionResponse::_internal_has_permission_granted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionResponse::has_permission_granted() const {
  return _internal_has_permission_granted();
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_permission_granted() {
  _impl_.permission_granted_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGameMatchSignOutPermissionResponse::_internal_permission_granted() const {
  return _impl_.permission_granted_;
}
inline bool CMsgGameMatchSignOutPermissionResponse::permission_granted() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionResponse.permission_granted)
  return _internal_permission_granted();
}
inline void CMsgGameMatchSignOutPermissionResponse::_internal_set_permission_granted(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.permission_granted_ = value;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_permission_granted(bool value) {
  _internal_set_permission_granted(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionResponse.permission_granted)
}

// optional bool abandon_signout = 2 [default = false];
inline bool CMsgGameMatchSignOutPermissionResponse::_internal_has_abandon_signout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionResponse::has_abandon_signout() const {
  return _internal_has_abandon_signout();
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_abandon_signout() {
  _impl_.abandon_signout_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGameMatchSignOutPermissionResponse::_internal_abandon_signout() const {
  return _impl_.abandon_signout_;
}
inline bool CMsgGameMatchSignOutPermissionResponse::abandon_signout() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionResponse.abandon_signout)
  return _internal_abandon_signout();
}
inline void CMsgGameMatchSignOutPermissionResponse::_internal_set_abandon_signout(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.abandon_signout_ = value;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_abandon_signout(bool value) {
  _internal_set_abandon_signout(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionResponse.abandon_signout)
}

// optional uint32 retry_delay_seconds = 3 [default = 0];
inline bool CMsgGameMatchSignOutPermissionResponse::_internal_has_retry_delay_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPermissionResponse::has_retry_delay_seconds() const {
  return _internal_has_retry_delay_seconds();
}
inline void CMsgGameMatchSignOutPermissionResponse::clear_retry_delay_seconds() {
  _impl_.retry_delay_seconds_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameMatchSignOutPermissionResponse::_internal_retry_delay_seconds() const {
  return _impl_.retry_delay_seconds_;
}
inline uint32_t CMsgGameMatchSignOutPermissionResponse::retry_delay_seconds() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPermissionResponse.retry_delay_seconds)
  return _internal_retry_delay_seconds();
}
inline void CMsgGameMatchSignOutPermissionResponse::_internal_set_retry_delay_seconds(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.retry_delay_seconds_ = value;
}
inline void CMsgGameMatchSignOutPermissionResponse::set_retry_delay_seconds(uint32_t value) {
  _internal_set_retry_delay_seconds(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPermissionResponse.retry_delay_seconds)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutEventGameData

// optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CMsgGameMatchSignOutEventGameData::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutEventGameData::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgGameMatchSignOutEventGameData::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EEvent CMsgGameMatchSignOutEventGameData::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgGameMatchSignOutEventGameData::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutEventGameData.event_id)
  return _internal_event_id();
}
inline void CMsgGameMatchSignOutEventGameData::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_id_ = value;
}
inline void CMsgGameMatchSignOutEventGameData::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutEventGameData.event_id)
}

// optional string game_name = 2;
inline bool CMsgGameMatchSignOutEventGameData::_internal_has_game_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutEventGameData::has_game_name() const {
  return _internal_has_game_name();
}
inline void CMsgGameMatchSignOutEventGameData::clear_game_name() {
  _impl_.game_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutEventGameData.game_name)
  return _internal_game_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOutEventGameData::set_game_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.game_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutEventGameData.game_name)
}
inline std::string* CMsgGameMatchSignOutEventGameData::mutable_game_name() {
  std::string* _s = _internal_mutable_game_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOutEventGameData.game_name)
  return _s;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::_internal_game_name() const {
  return _impl_.game_name_.Get();
}
inline void CMsgGameMatchSignOutEventGameData::_internal_set_game_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::_internal_mutable_game_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.game_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOutEventGameData.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.game_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.game_name_.IsDefault()) {
    _impl_.game_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOutEventGameData::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.game_name_.SetAllocated(game_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.game_name_.IsDefault()) {
    _impl_.game_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOutEventGameData.game_name)
}

// optional string map_name = 3;
inline bool CMsgGameMatchSignOutEventGameData::_internal_has_map_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutEventGameData::has_map_name() const {
  return _internal_has_map_name();
}
inline void CMsgGameMatchSignOutEventGameData::clear_map_name() {
  _impl_.map_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::map_name() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutEventGameData.map_name)
  return _internal_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOutEventGameData::set_map_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutEventGameData.map_name)
}
inline std::string* CMsgGameMatchSignOutEventGameData::mutable_map_name() {
  std::string* _s = _internal_mutable_map_name();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOutEventGameData.map_name)
  return _s;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::_internal_map_name() const {
  return _impl_.map_name_.Get();
}
inline void CMsgGameMatchSignOutEventGameData::_internal_set_map_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::_internal_mutable_map_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::release_map_name() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOutEventGameData.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.map_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOutEventGameData::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.map_name_.SetAllocated(map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.map_name_.IsDefault()) {
    _impl_.map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOutEventGameData.map_name)
}

// optional bytes event_game_data = 4;
inline bool CMsgGameMatchSignOutEventGameData::_internal_has_event_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutEventGameData::has_event_game_data() const {
  return _internal_has_event_game_data();
}
inline void CMsgGameMatchSignOutEventGameData::clear_event_game_data() {
  _impl_.event_game_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::event_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutEventGameData.event_game_data)
  return _internal_event_game_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameMatchSignOutEventGameData::set_event_game_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.event_game_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutEventGameData.event_game_data)
}
inline std::string* CMsgGameMatchSignOutEventGameData::mutable_event_game_data() {
  std::string* _s = _internal_mutable_event_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameMatchSignOutEventGameData.event_game_data)
  return _s;
}
inline const std::string& CMsgGameMatchSignOutEventGameData::_internal_event_game_data() const {
  return _impl_.event_game_data_.Get();
}
inline void CMsgGameMatchSignOutEventGameData::_internal_set_event_game_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.event_game_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::_internal_mutable_event_game_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.event_game_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameMatchSignOutEventGameData::release_event_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameMatchSignOutEventGameData.event_game_data)
  if (!_internal_has_event_game_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.event_game_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_data_.IsDefault()) {
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameMatchSignOutEventGameData::set_allocated_event_game_data(std::string* event_game_data) {
  if (event_game_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.event_game_data_.SetAllocated(event_game_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_data_.IsDefault()) {
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameMatchSignOutEventGameData.event_game_data)
}

// optional uint32 start_time = 5;
inline bool CMsgGameMatchSignOutEventGameData::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutEventGameData::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgGameMatchSignOutEventGameData::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGameMatchSignOutEventGameData::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgGameMatchSignOutEventGameData::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutEventGameData.start_time)
  return _internal_start_time();
}
inline void CMsgGameMatchSignOutEventGameData::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_time_ = value;
}
inline void CMsgGameMatchSignOutEventGameData::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutEventGameData.start_time)
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutPerfData

// repeated float average_frame_time = 1;
inline int CMsgGameMatchSignOutPerfData::_internal_average_frame_time_size() const {
  return _impl_.average_frame_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_frame_time_size() const {
  return _internal_average_frame_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_frame_time() {
  _impl_.average_frame_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_frame_time(int index) const {
  return _impl_.average_frame_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_frame_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_frame_time)
  return _internal_average_frame_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_frame_time(int index, float value) {
  _impl_.average_frame_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_frame_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_frame_time(float value) {
  _impl_.average_frame_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_frame_time(float value) {
  _internal_add_average_frame_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_frame_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_frame_time() const {
  return _impl_.average_frame_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_frame_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_frame_time)
  return _internal_average_frame_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_frame_time() {
  return &_impl_.average_frame_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_frame_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_frame_time)
  return _internal_mutable_average_frame_time();
}

// repeated float max_frame_time = 2;
inline int CMsgGameMatchSignOutPerfData::_internal_max_frame_time_size() const {
  return _impl_.max_frame_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_frame_time_size() const {
  return _internal_max_frame_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_frame_time() {
  _impl_.max_frame_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_frame_time(int index) const {
  return _impl_.max_frame_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_frame_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_frame_time)
  return _internal_max_frame_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_frame_time(int index, float value) {
  _impl_.max_frame_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_frame_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_frame_time(float value) {
  _impl_.max_frame_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_frame_time(float value) {
  _internal_add_max_frame_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_frame_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_frame_time() const {
  return _impl_.max_frame_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_frame_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_frame_time)
  return _internal_max_frame_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_frame_time() {
  return &_impl_.max_frame_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_frame_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_frame_time)
  return _internal_mutable_max_frame_time();
}

// optional float server_average_frame_time = 3;
inline bool CMsgGameMatchSignOutPerfData::_internal_has_server_average_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPerfData::has_server_average_frame_time() const {
  return _internal_has_server_average_frame_time();
}
inline void CMsgGameMatchSignOutPerfData::clear_server_average_frame_time() {
  _impl_.server_average_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgGameMatchSignOutPerfData::_internal_server_average_frame_time() const {
  return _impl_.server_average_frame_time_;
}
inline float CMsgGameMatchSignOutPerfData::server_average_frame_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.server_average_frame_time)
  return _internal_server_average_frame_time();
}
inline void CMsgGameMatchSignOutPerfData::_internal_set_server_average_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_average_frame_time_ = value;
}
inline void CMsgGameMatchSignOutPerfData::set_server_average_frame_time(float value) {
  _internal_set_server_average_frame_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.server_average_frame_time)
}

// optional float server_max_frame_time = 4;
inline bool CMsgGameMatchSignOutPerfData::_internal_has_server_max_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameMatchSignOutPerfData::has_server_max_frame_time() const {
  return _internal_has_server_max_frame_time();
}
inline void CMsgGameMatchSignOutPerfData::clear_server_max_frame_time() {
  _impl_.server_max_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgGameMatchSignOutPerfData::_internal_server_max_frame_time() const {
  return _impl_.server_max_frame_time_;
}
inline float CMsgGameMatchSignOutPerfData::server_max_frame_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.server_max_frame_time)
  return _internal_server_max_frame_time();
}
inline void CMsgGameMatchSignOutPerfData::_internal_set_server_max_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.server_max_frame_time_ = value;
}
inline void CMsgGameMatchSignOutPerfData::set_server_max_frame_time(float value) {
  _internal_set_server_max_frame_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.server_max_frame_time)
}

// repeated float average_compute_time = 5;
inline int CMsgGameMatchSignOutPerfData::_internal_average_compute_time_size() const {
  return _impl_.average_compute_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_compute_time_size() const {
  return _internal_average_compute_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_compute_time() {
  _impl_.average_compute_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_compute_time(int index) const {
  return _impl_.average_compute_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_compute_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_compute_time)
  return _internal_average_compute_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_compute_time(int index, float value) {
  _impl_.average_compute_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_compute_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_compute_time(float value) {
  _impl_.average_compute_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_compute_time(float value) {
  _internal_add_average_compute_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_compute_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_compute_time() const {
  return _impl_.average_compute_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_compute_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_compute_time)
  return _internal_average_compute_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_compute_time() {
  return &_impl_.average_compute_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_compute_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_compute_time)
  return _internal_mutable_average_compute_time();
}

// repeated float max_compute_time = 6;
inline int CMsgGameMatchSignOutPerfData::_internal_max_compute_time_size() const {
  return _impl_.max_compute_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_compute_time_size() const {
  return _internal_max_compute_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_compute_time() {
  _impl_.max_compute_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_compute_time(int index) const {
  return _impl_.max_compute_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_compute_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_compute_time)
  return _internal_max_compute_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_compute_time(int index, float value) {
  _impl_.max_compute_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_compute_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_compute_time(float value) {
  _impl_.max_compute_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_compute_time(float value) {
  _internal_add_max_compute_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_compute_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_compute_time() const {
  return _impl_.max_compute_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_compute_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_compute_time)
  return _internal_max_compute_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_compute_time() {
  return &_impl_.max_compute_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_compute_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_compute_time)
  return _internal_mutable_max_compute_time();
}

// repeated float average_client_tick_time = 7;
inline int CMsgGameMatchSignOutPerfData::_internal_average_client_tick_time_size() const {
  return _impl_.average_client_tick_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_client_tick_time_size() const {
  return _internal_average_client_tick_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_client_tick_time() {
  _impl_.average_client_tick_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_client_tick_time(int index) const {
  return _impl_.average_client_tick_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_client_tick_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_client_tick_time)
  return _internal_average_client_tick_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_client_tick_time(int index, float value) {
  _impl_.average_client_tick_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_client_tick_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_client_tick_time(float value) {
  _impl_.average_client_tick_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_client_tick_time(float value) {
  _internal_add_average_client_tick_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_client_tick_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_client_tick_time() const {
  return _impl_.average_client_tick_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_client_tick_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_client_tick_time)
  return _internal_average_client_tick_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_client_tick_time() {
  return &_impl_.average_client_tick_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_client_tick_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_client_tick_time)
  return _internal_mutable_average_client_tick_time();
}

// repeated float max_client_tick_time = 8;
inline int CMsgGameMatchSignOutPerfData::_internal_max_client_tick_time_size() const {
  return _impl_.max_client_tick_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_client_tick_time_size() const {
  return _internal_max_client_tick_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_client_tick_time() {
  _impl_.max_client_tick_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_client_tick_time(int index) const {
  return _impl_.max_client_tick_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_client_tick_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_client_tick_time)
  return _internal_max_client_tick_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_client_tick_time(int index, float value) {
  _impl_.max_client_tick_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_client_tick_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_client_tick_time(float value) {
  _impl_.max_client_tick_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_client_tick_time(float value) {
  _internal_add_max_client_tick_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_client_tick_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_client_tick_time() const {
  return _impl_.max_client_tick_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_client_tick_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_client_tick_time)
  return _internal_max_client_tick_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_client_tick_time() {
  return &_impl_.max_client_tick_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_client_tick_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_client_tick_time)
  return _internal_mutable_max_client_tick_time();
}

// repeated float average_client_simulate_time = 9;
inline int CMsgGameMatchSignOutPerfData::_internal_average_client_simulate_time_size() const {
  return _impl_.average_client_simulate_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_client_simulate_time_size() const {
  return _internal_average_client_simulate_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_client_simulate_time() {
  _impl_.average_client_simulate_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_client_simulate_time(int index) const {
  return _impl_.average_client_simulate_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_client_simulate_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_client_simulate_time)
  return _internal_average_client_simulate_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_client_simulate_time(int index, float value) {
  _impl_.average_client_simulate_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_client_simulate_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_client_simulate_time(float value) {
  _impl_.average_client_simulate_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_client_simulate_time(float value) {
  _internal_add_average_client_simulate_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_client_simulate_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_client_simulate_time() const {
  return _impl_.average_client_simulate_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_client_simulate_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_client_simulate_time)
  return _internal_average_client_simulate_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_client_simulate_time() {
  return &_impl_.average_client_simulate_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_client_simulate_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_client_simulate_time)
  return _internal_mutable_average_client_simulate_time();
}

// repeated float max_client_simulate_time = 10;
inline int CMsgGameMatchSignOutPerfData::_internal_max_client_simulate_time_size() const {
  return _impl_.max_client_simulate_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_client_simulate_time_size() const {
  return _internal_max_client_simulate_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_client_simulate_time() {
  _impl_.max_client_simulate_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_client_simulate_time(int index) const {
  return _impl_.max_client_simulate_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_client_simulate_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_client_simulate_time)
  return _internal_max_client_simulate_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_client_simulate_time(int index, float value) {
  _impl_.max_client_simulate_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_client_simulate_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_client_simulate_time(float value) {
  _impl_.max_client_simulate_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_client_simulate_time(float value) {
  _internal_add_max_client_simulate_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_client_simulate_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_client_simulate_time() const {
  return _impl_.max_client_simulate_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_client_simulate_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_client_simulate_time)
  return _internal_max_client_simulate_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_client_simulate_time() {
  return &_impl_.max_client_simulate_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_client_simulate_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_client_simulate_time)
  return _internal_mutable_max_client_simulate_time();
}

// repeated float average_output_time = 11;
inline int CMsgGameMatchSignOutPerfData::_internal_average_output_time_size() const {
  return _impl_.average_output_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_output_time_size() const {
  return _internal_average_output_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_output_time() {
  _impl_.average_output_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_output_time(int index) const {
  return _impl_.average_output_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_output_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_output_time)
  return _internal_average_output_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_output_time(int index, float value) {
  _impl_.average_output_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_output_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_output_time(float value) {
  _impl_.average_output_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_output_time(float value) {
  _internal_add_average_output_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_output_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_output_time() const {
  return _impl_.average_output_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_output_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_output_time)
  return _internal_average_output_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_output_time() {
  return &_impl_.average_output_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_output_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_output_time)
  return _internal_mutable_average_output_time();
}

// repeated float max_output_time = 12;
inline int CMsgGameMatchSignOutPerfData::_internal_max_output_time_size() const {
  return _impl_.max_output_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_output_time_size() const {
  return _internal_max_output_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_output_time() {
  _impl_.max_output_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_output_time(int index) const {
  return _impl_.max_output_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_output_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_output_time)
  return _internal_max_output_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_output_time(int index, float value) {
  _impl_.max_output_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_output_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_output_time(float value) {
  _impl_.max_output_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_output_time(float value) {
  _internal_add_max_output_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_output_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_output_time() const {
  return _impl_.max_output_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_output_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_output_time)
  return _internal_max_output_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_output_time() {
  return &_impl_.max_output_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_output_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_output_time)
  return _internal_mutable_max_output_time();
}

// repeated float average_wait_for_rendering_to_complete_time = 13;
inline int CMsgGameMatchSignOutPerfData::_internal_average_wait_for_rendering_to_complete_time_size() const {
  return _impl_.average_wait_for_rendering_to_complete_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_wait_for_rendering_to_complete_time_size() const {
  return _internal_average_wait_for_rendering_to_complete_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_wait_for_rendering_to_complete_time() {
  _impl_.average_wait_for_rendering_to_complete_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_wait_for_rendering_to_complete_time(int index) const {
  return _impl_.average_wait_for_rendering_to_complete_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_wait_for_rendering_to_complete_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_wait_for_rendering_to_complete_time)
  return _internal_average_wait_for_rendering_to_complete_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_wait_for_rendering_to_complete_time(int index, float value) {
  _impl_.average_wait_for_rendering_to_complete_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_wait_for_rendering_to_complete_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_wait_for_rendering_to_complete_time(float value) {
  _impl_.average_wait_for_rendering_to_complete_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_wait_for_rendering_to_complete_time(float value) {
  _internal_add_average_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_wait_for_rendering_to_complete_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_wait_for_rendering_to_complete_time() const {
  return _impl_.average_wait_for_rendering_to_complete_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_wait_for_rendering_to_complete_time)
  return _internal_average_wait_for_rendering_to_complete_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_wait_for_rendering_to_complete_time() {
  return &_impl_.average_wait_for_rendering_to_complete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_wait_for_rendering_to_complete_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_wait_for_rendering_to_complete_time)
  return _internal_mutable_average_wait_for_rendering_to_complete_time();
}

// repeated float max_wait_for_rendering_to_complete_time = 14;
inline int CMsgGameMatchSignOutPerfData::_internal_max_wait_for_rendering_to_complete_time_size() const {
  return _impl_.max_wait_for_rendering_to_complete_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_wait_for_rendering_to_complete_time_size() const {
  return _internal_max_wait_for_rendering_to_complete_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_wait_for_rendering_to_complete_time() {
  _impl_.max_wait_for_rendering_to_complete_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_wait_for_rendering_to_complete_time(int index) const {
  return _impl_.max_wait_for_rendering_to_complete_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_wait_for_rendering_to_complete_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_wait_for_rendering_to_complete_time)
  return _internal_max_wait_for_rendering_to_complete_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_wait_for_rendering_to_complete_time(int index, float value) {
  _impl_.max_wait_for_rendering_to_complete_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_wait_for_rendering_to_complete_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_wait_for_rendering_to_complete_time(float value) {
  _impl_.max_wait_for_rendering_to_complete_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_wait_for_rendering_to_complete_time(float value) {
  _internal_add_max_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_wait_for_rendering_to_complete_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_wait_for_rendering_to_complete_time() const {
  return _impl_.max_wait_for_rendering_to_complete_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_wait_for_rendering_to_complete_time)
  return _internal_max_wait_for_rendering_to_complete_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_wait_for_rendering_to_complete_time() {
  return &_impl_.max_wait_for_rendering_to_complete_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_wait_for_rendering_to_complete_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_wait_for_rendering_to_complete_time)
  return _internal_mutable_max_wait_for_rendering_to_complete_time();
}

// repeated float average_swap_time = 15;
inline int CMsgGameMatchSignOutPerfData::_internal_average_swap_time_size() const {
  return _impl_.average_swap_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_swap_time_size() const {
  return _internal_average_swap_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_swap_time() {
  _impl_.average_swap_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_swap_time(int index) const {
  return _impl_.average_swap_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_swap_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_swap_time)
  return _internal_average_swap_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_swap_time(int index, float value) {
  _impl_.average_swap_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_swap_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_swap_time(float value) {
  _impl_.average_swap_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_swap_time(float value) {
  _internal_add_average_swap_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_swap_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_swap_time() const {
  return _impl_.average_swap_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_swap_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_swap_time)
  return _internal_average_swap_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_swap_time() {
  return &_impl_.average_swap_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_swap_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_swap_time)
  return _internal_mutable_average_swap_time();
}

// repeated float max_swap_time = 16;
inline int CMsgGameMatchSignOutPerfData::_internal_max_swap_time_size() const {
  return _impl_.max_swap_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_swap_time_size() const {
  return _internal_max_swap_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_swap_time() {
  _impl_.max_swap_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_swap_time(int index) const {
  return _impl_.max_swap_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_swap_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_swap_time)
  return _internal_max_swap_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_swap_time(int index, float value) {
  _impl_.max_swap_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_swap_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_swap_time(float value) {
  _impl_.max_swap_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_swap_time(float value) {
  _internal_add_max_swap_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_swap_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_swap_time() const {
  return _impl_.max_swap_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_swap_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_swap_time)
  return _internal_max_swap_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_swap_time() {
  return &_impl_.max_swap_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_swap_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_swap_time)
  return _internal_mutable_max_swap_time();
}

// repeated float average_frame_update_time = 17;
inline int CMsgGameMatchSignOutPerfData::_internal_average_frame_update_time_size() const {
  return _impl_.average_frame_update_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_frame_update_time_size() const {
  return _internal_average_frame_update_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_frame_update_time() {
  _impl_.average_frame_update_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_frame_update_time(int index) const {
  return _impl_.average_frame_update_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_frame_update_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_frame_update_time)
  return _internal_average_frame_update_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_frame_update_time(int index, float value) {
  _impl_.average_frame_update_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_frame_update_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_frame_update_time(float value) {
  _impl_.average_frame_update_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_frame_update_time(float value) {
  _internal_add_average_frame_update_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_frame_update_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_frame_update_time() const {
  return _impl_.average_frame_update_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_frame_update_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_frame_update_time)
  return _internal_average_frame_update_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_frame_update_time() {
  return &_impl_.average_frame_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_frame_update_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_frame_update_time)
  return _internal_mutable_average_frame_update_time();
}

// repeated float max_frame_update_time = 18;
inline int CMsgGameMatchSignOutPerfData::_internal_max_frame_update_time_size() const {
  return _impl_.max_frame_update_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_frame_update_time_size() const {
  return _internal_max_frame_update_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_frame_update_time() {
  _impl_.max_frame_update_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_frame_update_time(int index) const {
  return _impl_.max_frame_update_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_frame_update_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_frame_update_time)
  return _internal_max_frame_update_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_frame_update_time(int index, float value) {
  _impl_.max_frame_update_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_frame_update_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_frame_update_time(float value) {
  _impl_.max_frame_update_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_frame_update_time(float value) {
  _internal_add_max_frame_update_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_frame_update_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_frame_update_time() const {
  return _impl_.max_frame_update_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_frame_update_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_frame_update_time)
  return _internal_max_frame_update_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_frame_update_time() {
  return &_impl_.max_frame_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_frame_update_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_frame_update_time)
  return _internal_mutable_max_frame_update_time();
}

// repeated float average_idle_time = 19;
inline int CMsgGameMatchSignOutPerfData::_internal_average_idle_time_size() const {
  return _impl_.average_idle_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_idle_time_size() const {
  return _internal_average_idle_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_idle_time() {
  _impl_.average_idle_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_idle_time(int index) const {
  return _impl_.average_idle_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_idle_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_idle_time)
  return _internal_average_idle_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_idle_time(int index, float value) {
  _impl_.average_idle_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_idle_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_idle_time(float value) {
  _impl_.average_idle_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_idle_time(float value) {
  _internal_add_average_idle_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_idle_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_idle_time() const {
  return _impl_.average_idle_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_idle_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_idle_time)
  return _internal_average_idle_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_idle_time() {
  return &_impl_.average_idle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_idle_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_idle_time)
  return _internal_mutable_average_idle_time();
}

// repeated float max_idle_time = 20;
inline int CMsgGameMatchSignOutPerfData::_internal_max_idle_time_size() const {
  return _impl_.max_idle_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_idle_time_size() const {
  return _internal_max_idle_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_idle_time() {
  _impl_.max_idle_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_idle_time(int index) const {
  return _impl_.max_idle_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_idle_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_idle_time)
  return _internal_max_idle_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_idle_time(int index, float value) {
  _impl_.max_idle_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_idle_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_idle_time(float value) {
  _impl_.max_idle_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_idle_time(float value) {
  _internal_add_max_idle_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_idle_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_idle_time() const {
  return _impl_.max_idle_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_idle_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_idle_time)
  return _internal_max_idle_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_idle_time() {
  return &_impl_.max_idle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_idle_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_idle_time)
  return _internal_mutable_max_idle_time();
}

// repeated float average_input_processing_time = 21;
inline int CMsgGameMatchSignOutPerfData::_internal_average_input_processing_time_size() const {
  return _impl_.average_input_processing_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::average_input_processing_time_size() const {
  return _internal_average_input_processing_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_average_input_processing_time() {
  _impl_.average_input_processing_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_average_input_processing_time(int index) const {
  return _impl_.average_input_processing_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::average_input_processing_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.average_input_processing_time)
  return _internal_average_input_processing_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_average_input_processing_time(int index, float value) {
  _impl_.average_input_processing_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.average_input_processing_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_average_input_processing_time(float value) {
  _impl_.average_input_processing_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_average_input_processing_time(float value) {
  _internal_add_average_input_processing_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.average_input_processing_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_average_input_processing_time() const {
  return _impl_.average_input_processing_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::average_input_processing_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.average_input_processing_time)
  return _internal_average_input_processing_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_average_input_processing_time() {
  return &_impl_.average_input_processing_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_average_input_processing_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.average_input_processing_time)
  return _internal_mutable_average_input_processing_time();
}

// repeated float max_input_processing_time = 22;
inline int CMsgGameMatchSignOutPerfData::_internal_max_input_processing_time_size() const {
  return _impl_.max_input_processing_time_.size();
}
inline int CMsgGameMatchSignOutPerfData::max_input_processing_time_size() const {
  return _internal_max_input_processing_time_size();
}
inline void CMsgGameMatchSignOutPerfData::clear_max_input_processing_time() {
  _impl_.max_input_processing_time_.Clear();
}
inline float CMsgGameMatchSignOutPerfData::_internal_max_input_processing_time(int index) const {
  return _impl_.max_input_processing_time_.Get(index);
}
inline float CMsgGameMatchSignOutPerfData::max_input_processing_time(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutPerfData.max_input_processing_time)
  return _internal_max_input_processing_time(index);
}
inline void CMsgGameMatchSignOutPerfData::set_max_input_processing_time(int index, float value) {
  _impl_.max_input_processing_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutPerfData.max_input_processing_time)
}
inline void CMsgGameMatchSignOutPerfData::_internal_add_max_input_processing_time(float value) {
  _impl_.max_input_processing_time_.Add(value);
}
inline void CMsgGameMatchSignOutPerfData::add_max_input_processing_time(float value) {
  _internal_add_max_input_processing_time(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutPerfData.max_input_processing_time)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::_internal_max_input_processing_time() const {
  return _impl_.max_input_processing_time_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGameMatchSignOutPerfData::max_input_processing_time() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutPerfData.max_input_processing_time)
  return _internal_max_input_processing_time();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::_internal_mutable_max_input_processing_time() {
  return &_impl_.max_input_processing_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGameMatchSignOutPerfData::mutable_max_input_processing_time() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutPerfData.max_input_processing_time)
  return _internal_mutable_max_input_processing_time();
}

// -------------------------------------------------------------------

// CMsgGameMatchSignOutBanData

// repeated uint32 hero_bans = 1;
inline int CMsgGameMatchSignOutBanData::_internal_hero_bans_size() const {
  return _impl_.hero_bans_.size();
}
inline int CMsgGameMatchSignOutBanData::hero_bans_size() const {
  return _internal_hero_bans_size();
}
inline void CMsgGameMatchSignOutBanData::clear_hero_bans() {
  _impl_.hero_bans_.Clear();
}
inline uint32_t CMsgGameMatchSignOutBanData::_internal_hero_bans(int index) const {
  return _impl_.hero_bans_.Get(index);
}
inline uint32_t CMsgGameMatchSignOutBanData::hero_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutBanData.hero_bans)
  return _internal_hero_bans(index);
}
inline void CMsgGameMatchSignOutBanData::set_hero_bans(int index, uint32_t value) {
  _impl_.hero_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutBanData.hero_bans)
}
inline void CMsgGameMatchSignOutBanData::_internal_add_hero_bans(uint32_t value) {
  _impl_.hero_bans_.Add(value);
}
inline void CMsgGameMatchSignOutBanData::add_hero_bans(uint32_t value) {
  _internal_add_hero_bans(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutBanData.hero_bans)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOutBanData::_internal_hero_bans() const {
  return _impl_.hero_bans_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOutBanData::hero_bans() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutBanData.hero_bans)
  return _internal_hero_bans();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOutBanData::_internal_mutable_hero_bans() {
  return &_impl_.hero_bans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOutBanData::mutable_hero_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutBanData.hero_bans)
  return _internal_mutable_hero_bans();
}

// repeated uint32 hero_ban_votes = 2;
inline int CMsgGameMatchSignOutBanData::_internal_hero_ban_votes_size() const {
  return _impl_.hero_ban_votes_.size();
}
inline int CMsgGameMatchSignOutBanData::hero_ban_votes_size() const {
  return _internal_hero_ban_votes_size();
}
inline void CMsgGameMatchSignOutBanData::clear_hero_ban_votes() {
  _impl_.hero_ban_votes_.Clear();
}
inline uint32_t CMsgGameMatchSignOutBanData::_internal_hero_ban_votes(int index) const {
  return _impl_.hero_ban_votes_.Get(index);
}
inline uint32_t CMsgGameMatchSignOutBanData::hero_ban_votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameMatchSignOutBanData.hero_ban_votes)
  return _internal_hero_ban_votes(index);
}
inline void CMsgGameMatchSignOutBanData::set_hero_ban_votes(int index, uint32_t value) {
  _impl_.hero_ban_votes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameMatchSignOutBanData.hero_ban_votes)
}
inline void CMsgGameMatchSignOutBanData::_internal_add_hero_ban_votes(uint32_t value) {
  _impl_.hero_ban_votes_.Add(value);
}
inline void CMsgGameMatchSignOutBanData::add_hero_ban_votes(uint32_t value) {
  _internal_add_hero_ban_votes(value);
  // @@protoc_insertion_point(field_add:CMsgGameMatchSignOutBanData.hero_ban_votes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOutBanData::_internal_hero_ban_votes() const {
  return _impl_.hero_ban_votes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGameMatchSignOutBanData::hero_ban_votes() const {
  // @@protoc_insertion_point(field_list:CMsgGameMatchSignOutBanData.hero_ban_votes)
  return _internal_hero_ban_votes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOutBanData::_internal_mutable_hero_ban_votes() {
  return &_impl_.hero_ban_votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGameMatchSignOutBanData::mutable_hero_ban_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameMatchSignOutBanData.hero_ban_votes)
  return _internal_mutable_hero_ban_votes();
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility

// optional int32 ability_id = 1 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_id)
  return _internal_ability_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ability_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_id)
}

// optional uint32 ability_level = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_has_ability_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::has_ability_level() const {
  return _internal_has_ability_level();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::clear_ability_level() {
  _impl_.ability_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_ability_level() const {
  return _impl_.ability_level_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ability_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_level)
  return _internal_ability_level();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_internal_set_ability_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ability_level_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::set_ability_level(uint32_t value) {
  _internal_set_ability_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility.ability_level)
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team_Player

// optional uint32 player_slot = 1;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_slot_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.player_slot)
}

// optional string player_name = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_player_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_player_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  return _s;
}
inline const std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_player_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_mutable_player_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.player_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.Team.Player.player_name)
}

// optional string hero_name = 3;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_hero_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_name() const {
  return _internal_has_hero_name();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_name() {
  _impl_.hero_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::hero_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return _internal_hero_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.hero_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_hero_name() {
  std::string* _s = _internal_mutable_hero_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  return _s;
}
inline const std::string& CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_hero_name() const {
  return _impl_.hero_name_.Get();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_hero_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_mutable_hero_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.hero_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTALiveScoreboardUpdate_Team_Player::release_hero_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
  if (!_internal_has_hero_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.hero_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hero_name_.IsDefault()) {
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_allocated_hero_name(std::string* hero_name) {
  if (hero_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.hero_name_.SetAllocated(hero_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hero_name_.IsDefault()) {
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name)
}

// optional uint32 hero_id = 4;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.hero_id)
}

// optional uint32 kills = 5;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
  return _internal_kills();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.kills_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.kills)
}

// optional uint32 deaths = 6;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
  return _internal_deaths();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.deaths_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.deaths)
}

// optional uint32 assists = 7;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
  return _internal_assists();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.assists_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.assists)
}

// optional uint32 last_hits = 8;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_last_hits() {
  _impl_.last_hits_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
  return _internal_last_hits();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_last_hits(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.last_hits_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_last_hits(uint32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.last_hits)
}

// optional uint32 denies = 9;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_denies() {
  _impl_.denies_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_denies() const {
  return _impl_.denies_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
  return _internal_denies();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_denies(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.denies_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_denies(uint32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.denies)
}

// optional uint32 gold = 10;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::gold() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
  return _internal_gold();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.gold_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.gold)
}

// optional uint32 level = 11;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_level() const {
  return _internal_has_level();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.level)
  return _internal_level();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.level_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.level)
}

// optional float gold_per_min = 12;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_gold_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_gold_per_min() const {
  return _internal_has_gold_per_min();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_gold_per_min() {
  _impl_.gold_per_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_gold_per_min() const {
  return _impl_.gold_per_min_;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
  return _internal_gold_per_min();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_gold_per_min(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.gold_per_min_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_gold_per_min(float value) {
  _internal_set_gold_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.gold_per_min)
}

// optional float xp_per_min = 13;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_xp_per_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_xp_per_min() const {
  return _internal_has_xp_per_min();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_xp_per_min() {
  _impl_.xp_per_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_xp_per_min() const {
  return _impl_.xp_per_min_;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
  return _internal_xp_per_min();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_xp_per_min(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.xp_per_min_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_xp_per_min(float value) {
  _internal_set_xp_per_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.xp_per_min)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_ultimate_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_state() const {
  return _internal_has_ultimate_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_state() {
  _impl_.ultimate_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_ultimate_state() const {
  return static_cast< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState >(_impl_.ultimate_state_);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
  return _internal_ultimate_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  assert(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.ultimate_state_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_state(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState value) {
  _internal_set_ultimate_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_state)
}

// optional float ultimate_cooldown = 15;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_ultimate_cooldown() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_ultimate_cooldown() const {
  return _internal_has_ultimate_cooldown();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_ultimate_cooldown() {
  _impl_.ultimate_cooldown_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_ultimate_cooldown() const {
  return _impl_.ultimate_cooldown_;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
  return _internal_ultimate_cooldown();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_ultimate_cooldown(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.ultimate_cooldown_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_ultimate_cooldown(float value) {
  _internal_set_ultimate_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.ultimate_cooldown)
}

// optional int32 item0 = 16 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item0() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item0() const {
  return _internal_has_item0();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item0() {
  _impl_.item0_ = -1;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item0() const {
  return _impl_.item0_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
  return _internal_item0();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item0(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.item0_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item0(int32_t value) {
  _internal_set_item0(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item0)
}

// optional int32 item1 = 17 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item1() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item1() const {
  return _internal_has_item1();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item1() {
  _impl_.item1_ = -1;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item1() const {
  return _impl_.item1_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
  return _internal_item1();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item1(int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.item1_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item1(int32_t value) {
  _internal_set_item1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item1)
}

// optional int32 item2 = 18 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item2() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item2() const {
  return _internal_has_item2();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item2() {
  _impl_.item2_ = -1;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item2() const {
  return _impl_.item2_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
  return _internal_item2();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item2(int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.item2_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item2(int32_t value) {
  _internal_set_item2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item2)
}

// optional int32 item3 = 19 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item3() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item3() const {
  return _internal_has_item3();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item3() {
  _impl_.item3_ = -1;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item3() const {
  return _impl_.item3_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
  return _internal_item3();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item3(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.item3_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item3(int32_t value) {
  _internal_set_item3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item3)
}

// optional int32 item4 = 20 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item4() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item4() const {
  return _internal_has_item4();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item4() {
  _impl_.item4_ = -1;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item4() const {
  return _impl_.item4_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
  return _internal_item4();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item4(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.item4_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item4(int32_t value) {
  _internal_set_item4(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item4)
}

// optional int32 item5 = 21 [default = -1];
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_item5() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_item5() const {
  return _internal_has_item5();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_item5() {
  _impl_.item5_ = -1;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_item5() const {
  return _impl_.item5_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate_Team_Player::item5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
  return _internal_item5();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_item5(int32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.item5_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_item5(int32_t value) {
  _internal_set_item5(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.item5)
}

// optional uint32 respawn_timer = 22;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_respawn_timer() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_respawn_timer() const {
  return _internal_has_respawn_timer();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_respawn_timer() {
  _impl_.respawn_timer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_respawn_timer() const {
  return _impl_.respawn_timer_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::respawn_timer() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
  return _internal_respawn_timer();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_respawn_timer(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.respawn_timer_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_respawn_timer(uint32_t value) {
  _internal_set_respawn_timer(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.respawn_timer)
}

// optional uint32 account_id = 23;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.account_id)
  return _internal_account_id();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.account_id)
}

// optional float position_x = 24;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_position_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_position_x() const {
  return _internal_has_position_x();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_position_x() {
  _impl_.position_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_position_x() const {
  return _impl_.position_x_;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::position_x() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.position_x)
  return _internal_position_x();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_position_x(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.position_x_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_position_x(float value) {
  _internal_set_position_x(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.position_x)
}

// optional float position_y = 25;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_position_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_position_y() const {
  return _internal_has_position_y();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_position_y() {
  _impl_.position_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_position_y() const {
  return _impl_.position_y_;
}
inline float CMsgDOTALiveScoreboardUpdate_Team_Player::position_y() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.position_y)
  return _internal_position_y();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_position_y(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.position_y_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_position_y(float value) {
  _internal_set_position_y(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.position_y)
}

// optional uint32 net_worth = 26;
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team_Player::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.net_worth)
  return _internal_net_worth();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.net_worth_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.Player.net_worth)
}

// repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
inline int CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgDOTALiveScoreboardUpdate_Team_Player::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team_Player::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return _impl_.abilities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >*
CMsgDOTALiveScoreboardUpdate_Team_Player::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return &_impl_.abilities_;
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& CMsgDOTALiveScoreboardUpdate_Team_Player::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return _internal_abilities(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player::_internal_add_abilities() {
  return _impl_.abilities_.Add();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* CMsgDOTALiveScoreboardUpdate_Team_Player::add_abilities() {
  ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* _add = _internal_add_abilities();
  // @@protoc_insertion_point(field_add:CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >&
CMsgDOTALiveScoreboardUpdate_Team_Player::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALiveScoreboardUpdate.Team.Player.abilities)
  return _impl_.abilities_;
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate_Team

// repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
inline int CMsgDOTALiveScoreboardUpdate_Team::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTALiveScoreboardUpdate_Team::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.Team.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALiveScoreboardUpdate.Team.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team_Player& CMsgDOTALiveScoreboardUpdate_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.players)
  return _internal_players(index);
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTALiveScoreboardUpdate_Team_Player* CMsgDOTALiveScoreboardUpdate_Team::add_players() {
  ::CMsgDOTALiveScoreboardUpdate_Team_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTALiveScoreboardUpdate.Team.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALiveScoreboardUpdate_Team_Player >&
CMsgDOTALiveScoreboardUpdate_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALiveScoreboardUpdate.Team.players)
  return _impl_.players_;
}

// optional uint32 score = 2;
inline bool CMsgDOTALiveScoreboardUpdate_Team::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_score() {
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.score)
  return _internal_score();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::_internal_set_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.score_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.score)
}

// optional uint32 tower_state = 3;
inline bool CMsgDOTALiveScoreboardUpdate_Team::_internal_has_tower_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team::has_tower_state() const {
  return _internal_has_tower_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_tower_state() {
  _impl_.tower_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::_internal_tower_state() const {
  return _impl_.tower_state_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::tower_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.tower_state)
  return _internal_tower_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::_internal_set_tower_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tower_state_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_tower_state(uint32_t value) {
  _internal_set_tower_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.tower_state)
}

// optional uint32 barracks_state = 4;
inline bool CMsgDOTALiveScoreboardUpdate_Team::_internal_has_barracks_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate_Team::has_barracks_state() const {
  return _internal_has_barracks_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_barracks_state() {
  _impl_.barracks_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::_internal_barracks_state() const {
  return _impl_.barracks_state_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::barracks_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.barracks_state)
  return _internal_barracks_state();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::_internal_set_barracks_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.barracks_state_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_barracks_state(uint32_t value) {
  _internal_set_barracks_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.barracks_state)
}

// repeated uint32 hero_picks = 5;
inline int CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_picks_size() const {
  return _impl_.hero_picks_.size();
}
inline int CMsgDOTALiveScoreboardUpdate_Team::hero_picks_size() const {
  return _internal_hero_picks_size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_hero_picks() {
  _impl_.hero_picks_.Clear();
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_picks(int index) const {
  return _impl_.hero_picks_.Get(index);
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::hero_picks(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return _internal_hero_picks(index);
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_hero_picks(int index, uint32_t value) {
  _impl_.hero_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
}
inline void CMsgDOTALiveScoreboardUpdate_Team::_internal_add_hero_picks(uint32_t value) {
  _impl_.hero_picks_.Add(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team::add_hero_picks(uint32_t value) {
  _internal_add_hero_picks(value);
  // @@protoc_insertion_point(field_add:CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_picks() const {
  return _impl_.hero_picks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALiveScoreboardUpdate_Team::hero_picks() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return _internal_hero_picks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALiveScoreboardUpdate_Team::_internal_mutable_hero_picks() {
  return &_impl_.hero_picks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_hero_picks() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALiveScoreboardUpdate.Team.hero_picks)
  return _internal_mutable_hero_picks();
}

// repeated uint32 hero_bans = 6;
inline int CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_bans_size() const {
  return _impl_.hero_bans_.size();
}
inline int CMsgDOTALiveScoreboardUpdate_Team::hero_bans_size() const {
  return _internal_hero_bans_size();
}
inline void CMsgDOTALiveScoreboardUpdate_Team::clear_hero_bans() {
  _impl_.hero_bans_.Clear();
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_bans(int index) const {
  return _impl_.hero_bans_.Get(index);
}
inline uint32_t CMsgDOTALiveScoreboardUpdate_Team::hero_bans(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return _internal_hero_bans(index);
}
inline void CMsgDOTALiveScoreboardUpdate_Team::set_hero_bans(int index, uint32_t value) {
  _impl_.hero_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
}
inline void CMsgDOTALiveScoreboardUpdate_Team::_internal_add_hero_bans(uint32_t value) {
  _impl_.hero_bans_.Add(value);
}
inline void CMsgDOTALiveScoreboardUpdate_Team::add_hero_bans(uint32_t value) {
  _internal_add_hero_bans(value);
  // @@protoc_insertion_point(field_add:CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALiveScoreboardUpdate_Team::_internal_hero_bans() const {
  return _impl_.hero_bans_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALiveScoreboardUpdate_Team::hero_bans() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return _internal_hero_bans();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALiveScoreboardUpdate_Team::_internal_mutable_hero_bans() {
  return &_impl_.hero_bans_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALiveScoreboardUpdate_Team::mutable_hero_bans() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALiveScoreboardUpdate.Team.hero_bans)
  return _internal_mutable_hero_bans();
}

// -------------------------------------------------------------------

// CMsgDOTALiveScoreboardUpdate

// optional uint32 tournament_id = 1;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tournament_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.tournament_id)
}

// optional uint32 tournament_game_id = 2;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_tournament_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_tournament_game_id() const {
  return _internal_has_tournament_game_id();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_tournament_game_id() {
  _impl_.tournament_game_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::_internal_tournament_game_id() const {
  return _impl_.tournament_game_id_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.tournament_game_id)
  return _internal_tournament_game_id();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_tournament_game_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tournament_game_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_tournament_game_id(uint32_t value) {
  _internal_set_tournament_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.tournament_game_id)
}

// optional float duration = 3;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTALiveScoreboardUpdate::_internal_duration() const {
  return _impl_.duration_;
}
inline float CMsgDOTALiveScoreboardUpdate::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.duration)
  return _internal_duration();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.duration_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.duration)
}

// optional int32 hltv_delay = 4;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_hltv_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_hltv_delay() const {
  return _internal_has_hltv_delay();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_hltv_delay() {
  _impl_.hltv_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgDOTALiveScoreboardUpdate::_internal_hltv_delay() const {
  return _impl_.hltv_delay_;
}
inline int32_t CMsgDOTALiveScoreboardUpdate::hltv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.hltv_delay)
  return _internal_hltv_delay();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_hltv_delay(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.hltv_delay_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_hltv_delay(int32_t value) {
  _internal_set_hltv_delay(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.hltv_delay)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_team_good() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_good_ != nullptr);
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_team_good() const {
  return _internal_has_team_good();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_good() {
  if (_impl_.team_good_ != nullptr) _impl_.team_good_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::_internal_team_good() const {
  const ::CMsgDOTALiveScoreboardUpdate_Team* p = _impl_.team_good_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTALiveScoreboardUpdate_Team&>(
      ::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_good() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.team_good)
  return _internal_team_good();
}
inline void CMsgDOTALiveScoreboardUpdate::unsafe_arena_set_allocated_team_good(
    ::CMsgDOTALiveScoreboardUpdate_Team* team_good) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_good_);
  }
  _impl_.team_good_ = team_good;
  if (team_good) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTALiveScoreboardUpdate.team_good)
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_good() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = _impl_.team_good_;
  _impl_.team_good_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::unsafe_arena_release_team_good() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.team_good)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = _impl_.team_good_;
  _impl_.team_good_ = nullptr;
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::_internal_mutable_team_good() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.team_good_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate_Team>(GetArenaForAllocation());
    _impl_.team_good_ = p;
  }
  return _impl_.team_good_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_good() {
  ::CMsgDOTALiveScoreboardUpdate_Team* _msg = _internal_mutable_team_good();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.team_good)
  return _msg;
}
inline void CMsgDOTALiveScoreboardUpdate::set_allocated_team_good(::CMsgDOTALiveScoreboardUpdate_Team* team_good) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_good_;
  }
  if (team_good) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_good);
    if (message_arena != submessage_arena) {
      team_good = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_good, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_good_ = team_good;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.team_good)
}

// optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_team_bad() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.team_bad_ != nullptr);
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_team_bad() const {
  return _internal_has_team_bad();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_team_bad() {
  if (_impl_.team_bad_ != nullptr) _impl_.team_bad_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::_internal_team_bad() const {
  const ::CMsgDOTALiveScoreboardUpdate_Team* p = _impl_.team_bad_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTALiveScoreboardUpdate_Team&>(
      ::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_);
}
inline const ::CMsgDOTALiveScoreboardUpdate_Team& CMsgDOTALiveScoreboardUpdate::team_bad() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.team_bad)
  return _internal_team_bad();
}
inline void CMsgDOTALiveScoreboardUpdate::unsafe_arena_set_allocated_team_bad(
    ::CMsgDOTALiveScoreboardUpdate_Team* team_bad) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.team_bad_);
  }
  _impl_.team_bad_ = team_bad;
  if (team_bad) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTALiveScoreboardUpdate.team_bad)
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::release_team_bad() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = _impl_.team_bad_;
  _impl_.team_bad_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::unsafe_arena_release_team_bad() {
  // @@protoc_insertion_point(field_release:CMsgDOTALiveScoreboardUpdate.team_bad)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTALiveScoreboardUpdate_Team* temp = _impl_.team_bad_;
  _impl_.team_bad_ = nullptr;
  return temp;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::_internal_mutable_team_bad() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.team_bad_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTALiveScoreboardUpdate_Team>(GetArenaForAllocation());
    _impl_.team_bad_ = p;
  }
  return _impl_.team_bad_;
}
inline ::CMsgDOTALiveScoreboardUpdate_Team* CMsgDOTALiveScoreboardUpdate::mutable_team_bad() {
  ::CMsgDOTALiveScoreboardUpdate_Team* _msg = _internal_mutable_team_bad();
  // @@protoc_insertion_point(field_mutable:CMsgDOTALiveScoreboardUpdate.team_bad)
  return _msg;
}
inline void CMsgDOTALiveScoreboardUpdate::set_allocated_team_bad(::CMsgDOTALiveScoreboardUpdate_Team* team_bad) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.team_bad_;
  }
  if (team_bad) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_bad);
    if (message_arena != submessage_arena) {
      team_bad = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_bad, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_bad_ = team_bad;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTALiveScoreboardUpdate.team_bad)
}

// optional uint32 roshan_respawn_timer = 7;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_roshan_respawn_timer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_roshan_respawn_timer() const {
  return _internal_has_roshan_respawn_timer();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_roshan_respawn_timer() {
  _impl_.roshan_respawn_timer_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::_internal_roshan_respawn_timer() const {
  return _impl_.roshan_respawn_timer_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::roshan_respawn_timer() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
  return _internal_roshan_respawn_timer();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_roshan_respawn_timer(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.roshan_respawn_timer_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_roshan_respawn_timer(uint32_t value) {
  _internal_set_roshan_respawn_timer(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.roshan_respawn_timer)
}

// optional uint32 league_id = 8;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTALiveScoreboardUpdate::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.league_id)
  return _internal_league_id();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.league_id)
}

// optional uint64 match_id = 9;
inline bool CMsgDOTALiveScoreboardUpdate::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTALiveScoreboardUpdate::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTALiveScoreboardUpdate::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CMsgDOTALiveScoreboardUpdate::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTALiveScoreboardUpdate::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALiveScoreboardUpdate.match_id)
  return _internal_match_id();
}
inline void CMsgDOTALiveScoreboardUpdate::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTALiveScoreboardUpdate::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALiveScoreboardUpdate.match_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestBatchPlayerResources

// repeated uint32 account_ids = 1 [packed = true];
inline int CMsgServerToGCRequestBatchPlayerResources::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgServerToGCRequestBatchPlayerResources::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgServerToGCRequestBatchPlayerResources::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResources::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResources::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResources.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgServerToGCRequestBatchPlayerResources::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResources.account_ids)
}
inline void CMsgServerToGCRequestBatchPlayerResources::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgServerToGCRequestBatchPlayerResources::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCRequestBatchPlayerResources.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCRequestBatchPlayerResources::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCRequestBatchPlayerResources::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCRequestBatchPlayerResources.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCRequestBatchPlayerResources::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCRequestBatchPlayerResources::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCRequestBatchPlayerResources.account_ids)
  return _internal_mutable_account_ids();
}

// repeated uint32 rank_types = 4 [packed = true];
inline int CMsgServerToGCRequestBatchPlayerResources::_internal_rank_types_size() const {
  return _impl_.rank_types_.size();
}
inline int CMsgServerToGCRequestBatchPlayerResources::rank_types_size() const {
  return _internal_rank_types_size();
}
inline void CMsgServerToGCRequestBatchPlayerResources::clear_rank_types() {
  _impl_.rank_types_.Clear();
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResources::_internal_rank_types(int index) const {
  return _impl_.rank_types_.Get(index);
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResources::rank_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResources.rank_types)
  return _internal_rank_types(index);
}
inline void CMsgServerToGCRequestBatchPlayerResources::set_rank_types(int index, uint32_t value) {
  _impl_.rank_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResources.rank_types)
}
inline void CMsgServerToGCRequestBatchPlayerResources::_internal_add_rank_types(uint32_t value) {
  _impl_.rank_types_.Add(value);
}
inline void CMsgServerToGCRequestBatchPlayerResources::add_rank_types(uint32_t value) {
  _internal_add_rank_types(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCRequestBatchPlayerResources.rank_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCRequestBatchPlayerResources::_internal_rank_types() const {
  return _impl_.rank_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCRequestBatchPlayerResources::rank_types() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCRequestBatchPlayerResources.rank_types)
  return _internal_rank_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCRequestBatchPlayerResources::_internal_mutable_rank_types() {
  return &_impl_.rank_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCRequestBatchPlayerResources::mutable_rank_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCRequestBatchPlayerResources.rank_types)
  return _internal_mutable_rank_types();
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestBatchPlayerResourcesResponse_Result

// optional uint32 account_id = 1;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.account_id)
}

// optional bool prevent_text_chat = 2;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_prevent_text_chat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_prevent_text_chat() const {
  return _internal_has_prevent_text_chat();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_prevent_text_chat() {
  _impl_.prevent_text_chat_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_prevent_text_chat() const {
  return _impl_.prevent_text_chat_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::prevent_text_chat() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.prevent_text_chat)
  return _internal_prevent_text_chat();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_prevent_text_chat(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prevent_text_chat_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_prevent_text_chat(bool value) {
  _internal_set_prevent_text_chat(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.prevent_text_chat)
}

// optional bool prevent_voice_chat = 3;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_prevent_voice_chat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_prevent_voice_chat() const {
  return _internal_has_prevent_voice_chat();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_prevent_voice_chat() {
  _impl_.prevent_voice_chat_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_prevent_voice_chat() const {
  return _impl_.prevent_voice_chat_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::prevent_voice_chat() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.prevent_voice_chat)
  return _internal_prevent_voice_chat();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_prevent_voice_chat(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.prevent_voice_chat_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_prevent_voice_chat(bool value) {
  _internal_set_prevent_voice_chat(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.prevent_voice_chat)
}

// optional uint32 rank = 4;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_rank() {
  _impl_.rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::rank() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.rank)
  return _internal_rank();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rank_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.rank)
}

// optional bool rank_calibrated = 5;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_rank_calibrated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_rank_calibrated() const {
  return _internal_has_rank_calibrated();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_rank_calibrated() {
  _impl_.rank_calibrated_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_rank_calibrated() const {
  return _impl_.rank_calibrated_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::rank_calibrated() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.rank_calibrated)
  return _internal_rank_calibrated();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_rank_calibrated(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rank_calibrated_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_rank_calibrated(bool value) {
  _internal_set_rank_calibrated(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.rank_calibrated)
}

// optional bool low_priority = 6;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_low_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_low_priority() {
  _impl_.low_priority_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_low_priority() const {
  return _impl_.low_priority_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::low_priority() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.low_priority)
  return _internal_low_priority();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_low_priority(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.low_priority_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.low_priority)
}

// optional bool is_new_player = 7;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_is_new_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_is_new_player() const {
  return _internal_has_is_new_player();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_is_new_player() {
  _impl_.is_new_player_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_is_new_player() const {
  return _impl_.is_new_player_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::is_new_player() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.is_new_player)
  return _internal_is_new_player();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_is_new_player(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.is_new_player_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_is_new_player(bool value) {
  _internal_set_is_new_player(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.is_new_player)
}

// optional bool is_guide_player = 8;
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_has_is_guide_player() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::has_is_guide_player() const {
  return _internal_has_is_guide_player();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::clear_is_guide_player() {
  _impl_.is_guide_player_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_is_guide_player() const {
  return _impl_.is_guide_player_;
}
inline bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::is_guide_player() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.is_guide_player)
  return _internal_is_guide_player();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_internal_set_is_guide_player(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_guide_player_ = value;
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::set_is_guide_player(bool value) {
  _internal_set_is_guide_player(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result.is_guide_player)
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestBatchPlayerResourcesResponse

// repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
inline int CMsgServerToGCRequestBatchPlayerResourcesResponse::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int CMsgServerToGCRequestBatchPlayerResourcesResponse::results_size() const {
  return _internal_results_size();
}
inline void CMsgServerToGCRequestBatchPlayerResourcesResponse::clear_results() {
  _impl_.results_.Clear();
}
inline ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* CMsgServerToGCRequestBatchPlayerResourcesResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCRequestBatchPlayerResourcesResponse.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >*
CMsgServerToGCRequestBatchPlayerResourcesResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCRequestBatchPlayerResourcesResponse.results)
  return &_impl_.results_;
}
inline const ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& CMsgServerToGCRequestBatchPlayerResourcesResponse::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& CMsgServerToGCRequestBatchPlayerResourcesResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestBatchPlayerResourcesResponse.results)
  return _internal_results(index);
}
inline ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* CMsgServerToGCRequestBatchPlayerResourcesResponse::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* CMsgServerToGCRequestBatchPlayerResourcesResponse::add_results() {
  ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:CMsgServerToGCRequestBatchPlayerResourcesResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >&
CMsgServerToGCRequestBatchPlayerResourcesResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCRequestBatchPlayerResourcesResponse.results)
  return _impl_.results_;
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerFailedToConnect

// repeated fixed64 failed_loaders = 1;
inline int CMsgDOTAPlayerFailedToConnect::_internal_failed_loaders_size() const {
  return _impl_.failed_loaders_.size();
}
inline int CMsgDOTAPlayerFailedToConnect::failed_loaders_size() const {
  return _internal_failed_loaders_size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_failed_loaders() {
  _impl_.failed_loaders_.Clear();
}
inline uint64_t CMsgDOTAPlayerFailedToConnect::_internal_failed_loaders(int index) const {
  return _impl_.failed_loaders_.Get(index);
}
inline uint64_t CMsgDOTAPlayerFailedToConnect::failed_loaders(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return _internal_failed_loaders(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_failed_loaders(int index, uint64_t value) {
  _impl_.failed_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
inline void CMsgDOTAPlayerFailedToConnect::_internal_add_failed_loaders(uint64_t value) {
  _impl_.failed_loaders_.Add(value);
}
inline void CMsgDOTAPlayerFailedToConnect::add_failed_loaders(uint64_t value) {
  _internal_add_failed_loaders(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerFailedToConnect.failed_loaders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgDOTAPlayerFailedToConnect::_internal_failed_loaders() const {
  return _impl_.failed_loaders_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgDOTAPlayerFailedToConnect::failed_loaders() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return _internal_failed_loaders();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgDOTAPlayerFailedToConnect::_internal_mutable_failed_loaders() {
  return &_impl_.failed_loaders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgDOTAPlayerFailedToConnect::mutable_failed_loaders() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerFailedToConnect.failed_loaders)
  return _internal_mutable_failed_loaders();
}

// repeated fixed64 abandoned_loaders = 2;
inline int CMsgDOTAPlayerFailedToConnect::_internal_abandoned_loaders_size() const {
  return _impl_.abandoned_loaders_.size();
}
inline int CMsgDOTAPlayerFailedToConnect::abandoned_loaders_size() const {
  return _internal_abandoned_loaders_size();
}
inline void CMsgDOTAPlayerFailedToConnect::clear_abandoned_loaders() {
  _impl_.abandoned_loaders_.Clear();
}
inline uint64_t CMsgDOTAPlayerFailedToConnect::_internal_abandoned_loaders(int index) const {
  return _impl_.abandoned_loaders_.Get(index);
}
inline uint64_t CMsgDOTAPlayerFailedToConnect::abandoned_loaders(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return _internal_abandoned_loaders(index);
}
inline void CMsgDOTAPlayerFailedToConnect::set_abandoned_loaders(int index, uint64_t value) {
  _impl_.abandoned_loaders_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
inline void CMsgDOTAPlayerFailedToConnect::_internal_add_abandoned_loaders(uint64_t value) {
  _impl_.abandoned_loaders_.Add(value);
}
inline void CMsgDOTAPlayerFailedToConnect::add_abandoned_loaders(uint64_t value) {
  _internal_add_abandoned_loaders(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgDOTAPlayerFailedToConnect::_internal_abandoned_loaders() const {
  return _impl_.abandoned_loaders_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgDOTAPlayerFailedToConnect::abandoned_loaders() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return _internal_abandoned_loaders();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgDOTAPlayerFailedToConnect::_internal_mutable_abandoned_loaders() {
  return &_impl_.abandoned_loaders_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgDOTAPlayerFailedToConnect::mutable_abandoned_loaders() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerFailedToConnect.abandoned_loaders)
  return _internal_mutable_abandoned_loaders();
}

// -------------------------------------------------------------------

// CMsgGCToRelayConnect

// optional uint32 source_tv_public_addr = 1;
inline bool CMsgGCToRelayConnect::_internal_has_source_tv_public_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_source_tv_public_addr() const {
  return _internal_has_source_tv_public_addr();
}
inline void CMsgGCToRelayConnect::clear_source_tv_public_addr() {
  _impl_.source_tv_public_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToRelayConnect::_internal_source_tv_public_addr() const {
  return _impl_.source_tv_public_addr_;
}
inline uint32_t CMsgGCToRelayConnect::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_public_addr)
  return _internal_source_tv_public_addr();
}
inline void CMsgGCToRelayConnect::_internal_set_source_tv_public_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_tv_public_addr_ = value;
}
inline void CMsgGCToRelayConnect::set_source_tv_public_addr(uint32_t value) {
  _internal_set_source_tv_public_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 2;
inline bool CMsgGCToRelayConnect::_internal_has_source_tv_private_addr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_source_tv_private_addr() const {
  return _internal_has_source_tv_private_addr();
}
inline void CMsgGCToRelayConnect::clear_source_tv_private_addr() {
  _impl_.source_tv_private_addr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToRelayConnect::_internal_source_tv_private_addr() const {
  return _impl_.source_tv_private_addr_;
}
inline uint32_t CMsgGCToRelayConnect::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_private_addr)
  return _internal_source_tv_private_addr();
}
inline void CMsgGCToRelayConnect::_internal_set_source_tv_private_addr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_tv_private_addr_ = value;
}
inline void CMsgGCToRelayConnect::set_source_tv_private_addr(uint32_t value) {
  _internal_set_source_tv_private_addr(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_private_addr)
}

// optional uint32 source_tv_port = 3;
inline bool CMsgGCToRelayConnect::_internal_has_source_tv_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_source_tv_port() const {
  return _internal_has_source_tv_port();
}
inline void CMsgGCToRelayConnect::clear_source_tv_port() {
  _impl_.source_tv_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgGCToRelayConnect::_internal_source_tv_port() const {
  return _impl_.source_tv_port_;
}
inline uint32_t CMsgGCToRelayConnect::source_tv_port() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_port)
  return _internal_source_tv_port();
}
inline void CMsgGCToRelayConnect::_internal_set_source_tv_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.source_tv_port_ = value;
}
inline void CMsgGCToRelayConnect::set_source_tv_port(uint32_t value) {
  _internal_set_source_tv_port(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_port)
}

// optional uint64 game_server_steam_id = 4;
inline bool CMsgGCToRelayConnect::_internal_has_game_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_game_server_steam_id() const {
  return _internal_has_game_server_steam_id();
}
inline void CMsgGCToRelayConnect::clear_game_server_steam_id() {
  _impl_.game_server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgGCToRelayConnect::_internal_game_server_steam_id() const {
  return _impl_.game_server_steam_id_;
}
inline uint64_t CMsgGCToRelayConnect::game_server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.game_server_steam_id)
  return _internal_game_server_steam_id();
}
inline void CMsgGCToRelayConnect::_internal_set_game_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_server_steam_id_ = value;
}
inline void CMsgGCToRelayConnect::set_game_server_steam_id(uint64_t value) {
  _internal_set_game_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.game_server_steam_id)
}

// optional uint32 parent_count = 5;
inline bool CMsgGCToRelayConnect::_internal_has_parent_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_parent_count() const {
  return _internal_has_parent_count();
}
inline void CMsgGCToRelayConnect::clear_parent_count() {
  _impl_.parent_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgGCToRelayConnect::_internal_parent_count() const {
  return _impl_.parent_count_;
}
inline uint32_t CMsgGCToRelayConnect::parent_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.parent_count)
  return _internal_parent_count();
}
inline void CMsgGCToRelayConnect::_internal_set_parent_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.parent_count_ = value;
}
inline void CMsgGCToRelayConnect::set_parent_count(uint32_t value) {
  _internal_set_parent_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.parent_count)
}

// optional fixed64 tv_unique_secret_code = 6;
inline bool CMsgGCToRelayConnect::_internal_has_tv_unique_secret_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_tv_unique_secret_code() const {
  return _internal_has_tv_unique_secret_code();
}
inline void CMsgGCToRelayConnect::clear_tv_unique_secret_code() {
  _impl_.tv_unique_secret_code_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgGCToRelayConnect::_internal_tv_unique_secret_code() const {
  return _impl_.tv_unique_secret_code_;
}
inline uint64_t CMsgGCToRelayConnect::tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.tv_unique_secret_code)
  return _internal_tv_unique_secret_code();
}
inline void CMsgGCToRelayConnect::_internal_set_tv_unique_secret_code(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.tv_unique_secret_code_ = value;
}
inline void CMsgGCToRelayConnect::set_tv_unique_secret_code(uint64_t value) {
  _internal_set_tv_unique_secret_code(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.tv_unique_secret_code)
}

// optional fixed64 source_tv_steamid = 7;
inline bool CMsgGCToRelayConnect::_internal_has_source_tv_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCToRelayConnect::has_source_tv_steamid() const {
  return _internal_has_source_tv_steamid();
}
inline void CMsgGCToRelayConnect::clear_source_tv_steamid() {
  _impl_.source_tv_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgGCToRelayConnect::_internal_source_tv_steamid() const {
  return _impl_.source_tv_steamid_;
}
inline uint64_t CMsgGCToRelayConnect::source_tv_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCToRelayConnect.source_tv_steamid)
  return _internal_source_tv_steamid();
}
inline void CMsgGCToRelayConnect::_internal_set_source_tv_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.source_tv_steamid_ = value;
}
inline void CMsgGCToRelayConnect::set_source_tv_steamid(uint64_t value) {
  _internal_set_source_tv_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCToRelayConnect.source_tv_steamid)
}

// -------------------------------------------------------------------

// CMsgGCGCToLANServerRelayConnect

// optional fixed64 relay_steamid = 1;
inline bool CMsgGCGCToLANServerRelayConnect::_internal_has_relay_steamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCGCToLANServerRelayConnect::has_relay_steamid() const {
  return _internal_has_relay_steamid();
}
inline void CMsgGCGCToLANServerRelayConnect::clear_relay_steamid() {
  _impl_.relay_steamid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCGCToLANServerRelayConnect::_internal_relay_steamid() const {
  return _impl_.relay_steamid_;
}
inline uint64_t CMsgGCGCToLANServerRelayConnect::relay_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgGCGCToLANServerRelayConnect.relay_steamid)
  return _internal_relay_steamid();
}
inline void CMsgGCGCToLANServerRelayConnect::_internal_set_relay_steamid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.relay_steamid_ = value;
}
inline void CMsgGCGCToLANServerRelayConnect::set_relay_steamid(uint64_t value) {
  _internal_set_relay_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgGCGCToLANServerRelayConnect.relay_steamid)
}

// -------------------------------------------------------------------

// CMsgGCBanStatusRequest

// optional uint32 account_id = 1;
inline bool CMsgGCBanStatusRequest::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCBanStatusRequest::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCBanStatusRequest::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCBanStatusRequest::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCBanStatusRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusRequest.account_id)
  return _internal_account_id();
}
inline void CMsgGCBanStatusRequest::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgGCBanStatusRequest::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusRequest.account_id)
}

// -------------------------------------------------------------------

// CMsgGCBanStatusResponse

// optional uint32 result = 1;
inline bool CMsgGCBanStatusResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCBanStatusResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgGCBanStatusResponse::clear_result() {
  _impl_.result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCBanStatusResponse::_internal_result() const {
  return _impl_.result_;
}
inline uint32_t CMsgGCBanStatusResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.result)
  return _internal_result();
}
inline void CMsgGCBanStatusResponse::_internal_set_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgGCBanStatusResponse::set_result(uint32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.result)
}

// optional bool low_priority = 2;
inline bool CMsgGCBanStatusResponse::_internal_has_low_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCBanStatusResponse::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CMsgGCBanStatusResponse::clear_low_priority() {
  _impl_.low_priority_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCBanStatusResponse::_internal_low_priority() const {
  return _impl_.low_priority_;
}
inline bool CMsgGCBanStatusResponse::low_priority() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.low_priority)
  return _internal_low_priority();
}
inline void CMsgGCBanStatusResponse::_internal_set_low_priority(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.low_priority_ = value;
}
inline void CMsgGCBanStatusResponse::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.low_priority)
}

// optional bool text_chat_banned = 3;
inline bool CMsgGCBanStatusResponse::_internal_has_text_chat_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCBanStatusResponse::has_text_chat_banned() const {
  return _internal_has_text_chat_banned();
}
inline void CMsgGCBanStatusResponse::clear_text_chat_banned() {
  _impl_.text_chat_banned_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCBanStatusResponse::_internal_text_chat_banned() const {
  return _impl_.text_chat_banned_;
}
inline bool CMsgGCBanStatusResponse::text_chat_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.text_chat_banned)
  return _internal_text_chat_banned();
}
inline void CMsgGCBanStatusResponse::_internal_set_text_chat_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.text_chat_banned_ = value;
}
inline void CMsgGCBanStatusResponse::set_text_chat_banned(bool value) {
  _internal_set_text_chat_banned(value);
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.text_chat_banned)
}

// optional bool voice_chat_banned = 4;
inline bool CMsgGCBanStatusResponse::_internal_has_voice_chat_banned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCBanStatusResponse::has_voice_chat_banned() const {
  return _internal_has_voice_chat_banned();
}
inline void CMsgGCBanStatusResponse::clear_voice_chat_banned() {
  _impl_.voice_chat_banned_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgGCBanStatusResponse::_internal_voice_chat_banned() const {
  return _impl_.voice_chat_banned_;
}
inline bool CMsgGCBanStatusResponse::voice_chat_banned() const {
  // @@protoc_insertion_point(field_get:CMsgGCBanStatusResponse.voice_chat_banned)
  return _internal_voice_chat_banned();
}
inline void CMsgGCBanStatusResponse::_internal_set_voice_chat_banned(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.voice_chat_banned_ = value;
}
inline void CMsgGCBanStatusResponse::set_voice_chat_banned(bool value) {
  _internal_set_voice_chat_banned(value);
  // @@protoc_insertion_point(field_set:CMsgGCBanStatusResponse.voice_chat_banned)
}

// -------------------------------------------------------------------

// CMsgTournamentItemEvent

// optional fixed32 killer_account_id = 1;
inline bool CMsgTournamentItemEvent::_internal_has_killer_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_killer_account_id() const {
  return _internal_has_killer_account_id();
}
inline void CMsgTournamentItemEvent::clear_killer_account_id() {
  _impl_.killer_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_killer_account_id() const {
  return _impl_.killer_account_id_;
}
inline uint32_t CMsgTournamentItemEvent::killer_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.killer_account_id)
  return _internal_killer_account_id();
}
inline void CMsgTournamentItemEvent::_internal_set_killer_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.killer_account_id_ = value;
}
inline void CMsgTournamentItemEvent::set_killer_account_id(uint32_t value) {
  _internal_set_killer_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.killer_account_id)
}

// optional fixed32 victim_account_id = 2;
inline bool CMsgTournamentItemEvent::_internal_has_victim_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_victim_account_id() const {
  return _internal_has_victim_account_id();
}
inline void CMsgTournamentItemEvent::clear_victim_account_id() {
  _impl_.victim_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_victim_account_id() const {
  return _impl_.victim_account_id_;
}
inline uint32_t CMsgTournamentItemEvent::victim_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.victim_account_id)
  return _internal_victim_account_id();
}
inline void CMsgTournamentItemEvent::_internal_set_victim_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.victim_account_id_ = value;
}
inline void CMsgTournamentItemEvent::set_victim_account_id(uint32_t value) {
  _internal_set_victim_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.victim_account_id)
}

// optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEvent::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgTournamentItemEvent::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEvent::_internal_event_type() const {
  return static_cast< ::DOTA_TournamentEvents >(_impl_.event_type_);
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.event_type)
  return _internal_event_type();
}
inline void CMsgTournamentItemEvent::_internal_set_event_type(::DOTA_TournamentEvents value) {
  assert(::DOTA_TournamentEvents_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_type_ = value;
}
inline void CMsgTournamentItemEvent::set_event_type(::DOTA_TournamentEvents value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.event_type)
}

// optional int32 tv_delay = 4;
inline bool CMsgTournamentItemEvent::_internal_has_tv_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_tv_delay() const {
  return _internal_has_tv_delay();
}
inline void CMsgTournamentItemEvent::clear_tv_delay() {
  _impl_.tv_delay_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CMsgTournamentItemEvent::_internal_tv_delay() const {
  return _impl_.tv_delay_;
}
inline int32_t CMsgTournamentItemEvent::tv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.tv_delay)
  return _internal_tv_delay();
}
inline void CMsgTournamentItemEvent::_internal_set_tv_delay(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tv_delay_ = value;
}
inline void CMsgTournamentItemEvent::set_tv_delay(int32_t value) {
  _internal_set_tv_delay(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.tv_delay)
}

// optional int32 dota_time = 5;
inline bool CMsgTournamentItemEvent::_internal_has_dota_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_dota_time() const {
  return _internal_has_dota_time();
}
inline void CMsgTournamentItemEvent::clear_dota_time() {
  _impl_.dota_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgTournamentItemEvent::_internal_dota_time() const {
  return _impl_.dota_time_;
}
inline int32_t CMsgTournamentItemEvent::dota_time() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.dota_time)
  return _internal_dota_time();
}
inline void CMsgTournamentItemEvent::_internal_set_dota_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.dota_time_ = value;
}
inline void CMsgTournamentItemEvent::set_dota_time(int32_t value) {
  _internal_set_dota_time(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.dota_time)
}

// optional float replay_time = 6;
inline bool CMsgTournamentItemEvent::_internal_has_replay_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_replay_time() const {
  return _internal_has_replay_time();
}
inline void CMsgTournamentItemEvent::clear_replay_time() {
  _impl_.replay_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CMsgTournamentItemEvent::_internal_replay_time() const {
  return _impl_.replay_time_;
}
inline float CMsgTournamentItemEvent::replay_time() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.replay_time)
  return _internal_replay_time();
}
inline void CMsgTournamentItemEvent::_internal_set_replay_time(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.replay_time_ = value;
}
inline void CMsgTournamentItemEvent::set_replay_time(float value) {
  _internal_set_replay_time(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.replay_time)
}

// optional string loot_list = 7;
inline bool CMsgTournamentItemEvent::_internal_has_loot_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_loot_list() const {
  return _internal_has_loot_list();
}
inline void CMsgTournamentItemEvent::clear_loot_list() {
  _impl_.loot_list_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgTournamentItemEvent::loot_list() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.loot_list)
  return _internal_loot_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgTournamentItemEvent::set_loot_list(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.loot_list_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.loot_list)
}
inline std::string* CMsgTournamentItemEvent::mutable_loot_list() {
  std::string* _s = _internal_mutable_loot_list();
  // @@protoc_insertion_point(field_mutable:CMsgTournamentItemEvent.loot_list)
  return _s;
}
inline const std::string& CMsgTournamentItemEvent::_internal_loot_list() const {
  return _impl_.loot_list_.Get();
}
inline void CMsgTournamentItemEvent::_internal_set_loot_list(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.loot_list_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgTournamentItemEvent::_internal_mutable_loot_list() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.loot_list_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgTournamentItemEvent::release_loot_list() {
  // @@protoc_insertion_point(field_release:CMsgTournamentItemEvent.loot_list)
  if (!_internal_has_loot_list()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.loot_list_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loot_list_.IsDefault()) {
    _impl_.loot_list_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgTournamentItemEvent::set_allocated_loot_list(std::string* loot_list) {
  if (loot_list != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.loot_list_.SetAllocated(loot_list, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.loot_list_.IsDefault()) {
    _impl_.loot_list_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgTournamentItemEvent.loot_list)
}

// optional uint32 event_team = 8;
inline bool CMsgTournamentItemEvent::_internal_has_event_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_event_team() const {
  return _internal_has_event_team();
}
inline void CMsgTournamentItemEvent::clear_event_team() {
  _impl_.event_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_event_team() const {
  return _impl_.event_team_;
}
inline uint32_t CMsgTournamentItemEvent::event_team() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.event_team)
  return _internal_event_team();
}
inline void CMsgTournamentItemEvent::_internal_set_event_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.event_team_ = value;
}
inline void CMsgTournamentItemEvent::set_event_team(uint32_t value) {
  _internal_set_event_team(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.event_team)
}

// optional uint32 multi_kill_count = 9;
inline bool CMsgTournamentItemEvent::_internal_has_multi_kill_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_multi_kill_count() const {
  return _internal_has_multi_kill_count();
}
inline void CMsgTournamentItemEvent::clear_multi_kill_count() {
  _impl_.multi_kill_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_multi_kill_count() const {
  return _impl_.multi_kill_count_;
}
inline uint32_t CMsgTournamentItemEvent::multi_kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.multi_kill_count)
  return _internal_multi_kill_count();
}
inline void CMsgTournamentItemEvent::_internal_set_multi_kill_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.multi_kill_count_ = value;
}
inline void CMsgTournamentItemEvent::set_multi_kill_count(uint32_t value) {
  _internal_set_multi_kill_count(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.multi_kill_count)
}

// optional uint32 winner_score = 10;
inline bool CMsgTournamentItemEvent::_internal_has_winner_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_winner_score() const {
  return _internal_has_winner_score();
}
inline void CMsgTournamentItemEvent::clear_winner_score() {
  _impl_.winner_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_winner_score() const {
  return _impl_.winner_score_;
}
inline uint32_t CMsgTournamentItemEvent::winner_score() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.winner_score)
  return _internal_winner_score();
}
inline void CMsgTournamentItemEvent::_internal_set_winner_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.winner_score_ = value;
}
inline void CMsgTournamentItemEvent::set_winner_score(uint32_t value) {
  _internal_set_winner_score(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.winner_score)
}

// optional uint32 loser_score = 11;
inline bool CMsgTournamentItemEvent::_internal_has_loser_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgTournamentItemEvent::has_loser_score() const {
  return _internal_has_loser_score();
}
inline void CMsgTournamentItemEvent::clear_loser_score() {
  _impl_.loser_score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgTournamentItemEvent::_internal_loser_score() const {
  return _impl_.loser_score_;
}
inline uint32_t CMsgTournamentItemEvent::loser_score() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.loser_score)
  return _internal_loser_score();
}
inline void CMsgTournamentItemEvent::_internal_set_loser_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.loser_score_ = value;
}
inline void CMsgTournamentItemEvent::set_loser_score(uint32_t value) {
  _internal_set_loser_score(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEvent.loser_score)
}

// repeated .CProtoItemHeroStatue hero_statues = 12;
inline int CMsgTournamentItemEvent::_internal_hero_statues_size() const {
  return _impl_.hero_statues_.size();
}
inline int CMsgTournamentItemEvent::hero_statues_size() const {
  return _internal_hero_statues_size();
}
inline ::CProtoItemHeroStatue* CMsgTournamentItemEvent::mutable_hero_statues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgTournamentItemEvent.hero_statues)
  return _impl_.hero_statues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CProtoItemHeroStatue >*
CMsgTournamentItemEvent::mutable_hero_statues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgTournamentItemEvent.hero_statues)
  return &_impl_.hero_statues_;
}
inline const ::CProtoItemHeroStatue& CMsgTournamentItemEvent::_internal_hero_statues(int index) const {
  return _impl_.hero_statues_.Get(index);
}
inline const ::CProtoItemHeroStatue& CMsgTournamentItemEvent::hero_statues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEvent.hero_statues)
  return _internal_hero_statues(index);
}
inline ::CProtoItemHeroStatue* CMsgTournamentItemEvent::_internal_add_hero_statues() {
  return _impl_.hero_statues_.Add();
}
inline ::CProtoItemHeroStatue* CMsgTournamentItemEvent::add_hero_statues() {
  ::CProtoItemHeroStatue* _add = _internal_add_hero_statues();
  // @@protoc_insertion_point(field_add:CMsgTournamentItemEvent.hero_statues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CProtoItemHeroStatue >&
CMsgTournamentItemEvent::hero_statues() const {
  // @@protoc_insertion_point(field_list:CMsgTournamentItemEvent.hero_statues)
  return _impl_.hero_statues_;
}

// -------------------------------------------------------------------

// CMsgTournamentItemEventResponse

// optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
inline bool CMsgTournamentItemEventResponse::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTournamentItemEventResponse::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgTournamentItemEventResponse::clear_event_type() {
  _impl_.event_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEventResponse::_internal_event_type() const {
  return static_cast< ::DOTA_TournamentEvents >(_impl_.event_type_);
}
inline ::DOTA_TournamentEvents CMsgTournamentItemEventResponse::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEventResponse.event_type)
  return _internal_event_type();
}
inline void CMsgTournamentItemEventResponse::_internal_set_event_type(::DOTA_TournamentEvents value) {
  assert(::DOTA_TournamentEvents_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_type_ = value;
}
inline void CMsgTournamentItemEventResponse::set_event_type(::DOTA_TournamentEvents value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEventResponse.event_type)
}

// optional uint32 viewers_granted = 6;
inline bool CMsgTournamentItemEventResponse::_internal_has_viewers_granted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgTournamentItemEventResponse::has_viewers_granted() const {
  return _internal_has_viewers_granted();
}
inline void CMsgTournamentItemEventResponse::clear_viewers_granted() {
  _impl_.viewers_granted_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgTournamentItemEventResponse::_internal_viewers_granted() const {
  return _impl_.viewers_granted_;
}
inline uint32_t CMsgTournamentItemEventResponse::viewers_granted() const {
  // @@protoc_insertion_point(field_get:CMsgTournamentItemEventResponse.viewers_granted)
  return _internal_viewers_granted();
}
inline void CMsgTournamentItemEventResponse::_internal_set_viewers_granted(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.viewers_granted_ = value;
}
inline void CMsgTournamentItemEventResponse::set_viewers_granted(uint32_t value) {
  _internal_set_viewers_granted(value);
  // @@protoc_insertion_point(field_set:CMsgTournamentItemEventResponse.viewers_granted)
}

// -------------------------------------------------------------------

// CMsgTeamFanfare

// optional uint64 match_id = 1;
inline bool CMsgTeamFanfare::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgTeamFanfare::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgTeamFanfare::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgTeamFanfare::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgTeamFanfare::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgTeamFanfare.match_id)
  return _internal_match_id();
}
inline void CMsgTeamFanfare::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgTeamFanfare::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgTeamFanfare.match_id)
}

// -------------------------------------------------------------------

// CMsgResponseTeamFanfare

// optional uint32 fanfare_goodguys = 1;
inline bool CMsgResponseTeamFanfare::_internal_has_fanfare_goodguys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgResponseTeamFanfare::has_fanfare_goodguys() const {
  return _internal_has_fanfare_goodguys();
}
inline void CMsgResponseTeamFanfare::clear_fanfare_goodguys() {
  _impl_.fanfare_goodguys_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgResponseTeamFanfare::_internal_fanfare_goodguys() const {
  return _impl_.fanfare_goodguys_;
}
inline uint32_t CMsgResponseTeamFanfare::fanfare_goodguys() const {
  // @@protoc_insertion_point(field_get:CMsgResponseTeamFanfare.fanfare_goodguys)
  return _internal_fanfare_goodguys();
}
inline void CMsgResponseTeamFanfare::_internal_set_fanfare_goodguys(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fanfare_goodguys_ = value;
}
inline void CMsgResponseTeamFanfare::set_fanfare_goodguys(uint32_t value) {
  _internal_set_fanfare_goodguys(value);
  // @@protoc_insertion_point(field_set:CMsgResponseTeamFanfare.fanfare_goodguys)
}

// optional uint32 fanfare_badguys = 2;
inline bool CMsgResponseTeamFanfare::_internal_has_fanfare_badguys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgResponseTeamFanfare::has_fanfare_badguys() const {
  return _internal_has_fanfare_badguys();
}
inline void CMsgResponseTeamFanfare::clear_fanfare_badguys() {
  _impl_.fanfare_badguys_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgResponseTeamFanfare::_internal_fanfare_badguys() const {
  return _impl_.fanfare_badguys_;
}
inline uint32_t CMsgResponseTeamFanfare::fanfare_badguys() const {
  // @@protoc_insertion_point(field_get:CMsgResponseTeamFanfare.fanfare_badguys)
  return _internal_fanfare_badguys();
}
inline void CMsgResponseTeamFanfare::_internal_set_fanfare_badguys(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fanfare_badguys_ = value;
}
inline void CMsgResponseTeamFanfare::set_fanfare_badguys(uint32_t value) {
  _internal_set_fanfare_badguys(value);
  // @@protoc_insertion_point(field_set:CMsgResponseTeamFanfare.fanfare_badguys)
}

// -------------------------------------------------------------------

// CMsgGameServerUploadSaveGame

// optional uint32 game_time = 1;
inline bool CMsgGameServerUploadSaveGame::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGameServerUploadSaveGame::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgGameServerUploadSaveGame::clear_game_time() {
  _impl_.game_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGameServerUploadSaveGame::_internal_game_time() const {
  return _impl_.game_time_;
}
inline uint32_t CMsgGameServerUploadSaveGame::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.game_time)
  return _internal_game_time();
}
inline void CMsgGameServerUploadSaveGame::_internal_set_game_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_time_ = value;
}
inline void CMsgGameServerUploadSaveGame::set_game_time(uint32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.game_time)
}

// optional bytes save_game_data = 2;
inline bool CMsgGameServerUploadSaveGame::_internal_has_save_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerUploadSaveGame::has_save_game_data() const {
  return _internal_has_save_game_data();
}
inline void CMsgGameServerUploadSaveGame::clear_save_game_data() {
  _impl_.save_game_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerUploadSaveGame::save_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.save_game_data)
  return _internal_save_game_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerUploadSaveGame::set_save_game_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.save_game_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.save_game_data)
}
inline std::string* CMsgGameServerUploadSaveGame::mutable_save_game_data() {
  std::string* _s = _internal_mutable_save_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerUploadSaveGame.save_game_data)
  return _s;
}
inline const std::string& CMsgGameServerUploadSaveGame::_internal_save_game_data() const {
  return _impl_.save_game_data_.Get();
}
inline void CMsgGameServerUploadSaveGame::_internal_set_save_game_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.save_game_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerUploadSaveGame::_internal_mutable_save_game_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.save_game_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameServerUploadSaveGame::release_save_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameServerUploadSaveGame.save_game_data)
  if (!_internal_has_save_game_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.save_game_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_game_data_.IsDefault()) {
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerUploadSaveGame::set_allocated_save_game_data(std::string* save_game_data) {
  if (save_game_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.save_game_data_.SetAllocated(save_game_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_game_data_.IsDefault()) {
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerUploadSaveGame.save_game_data)
}

// optional uint64 lobby_id = 3;
inline bool CMsgGameServerUploadSaveGame::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGameServerUploadSaveGame::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgGameServerUploadSaveGame::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGameServerUploadSaveGame::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CMsgGameServerUploadSaveGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgGameServerUploadSaveGame::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lobby_id_ = value;
}
inline void CMsgGameServerUploadSaveGame::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.lobby_id)
}

// repeated uint64 player_steam_ids = 4;
inline int CMsgGameServerUploadSaveGame::_internal_player_steam_ids_size() const {
  return _impl_.player_steam_ids_.size();
}
inline int CMsgGameServerUploadSaveGame::player_steam_ids_size() const {
  return _internal_player_steam_ids_size();
}
inline void CMsgGameServerUploadSaveGame::clear_player_steam_ids() {
  _impl_.player_steam_ids_.Clear();
}
inline uint64_t CMsgGameServerUploadSaveGame::_internal_player_steam_ids(int index) const {
  return _impl_.player_steam_ids_.Get(index);
}
inline uint64_t CMsgGameServerUploadSaveGame::player_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGameServerUploadSaveGame.player_steam_ids)
  return _internal_player_steam_ids(index);
}
inline void CMsgGameServerUploadSaveGame::set_player_steam_ids(int index, uint64_t value) {
  _impl_.player_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGameServerUploadSaveGame.player_steam_ids)
}
inline void CMsgGameServerUploadSaveGame::_internal_add_player_steam_ids(uint64_t value) {
  _impl_.player_steam_ids_.Add(value);
}
inline void CMsgGameServerUploadSaveGame::add_player_steam_ids(uint64_t value) {
  _internal_add_player_steam_ids(value);
  // @@protoc_insertion_point(field_add:CMsgGameServerUploadSaveGame.player_steam_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGameServerUploadSaveGame::_internal_player_steam_ids() const {
  return _impl_.player_steam_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgGameServerUploadSaveGame::player_steam_ids() const {
  // @@protoc_insertion_point(field_list:CMsgGameServerUploadSaveGame.player_steam_ids)
  return _internal_player_steam_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGameServerUploadSaveGame::_internal_mutable_player_steam_ids() {
  return &_impl_.player_steam_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgGameServerUploadSaveGame::mutable_player_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGameServerUploadSaveGame.player_steam_ids)
  return _internal_mutable_player_steam_ids();
}

// -------------------------------------------------------------------

// CMsgGameServerSaveGameResult

// optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
inline bool CMsgGameServerSaveGameResult::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerSaveGameResult::has_result() const {
  return _internal_has_result();
}
inline void CMsgGameServerSaveGameResult::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::_internal_result() const {
  return static_cast< ::CMsgGameServerSaveGameResult_Result >(_impl_.result_);
}
inline ::CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::result() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerSaveGameResult.result)
  return _internal_result();
}
inline void CMsgGameServerSaveGameResult::_internal_set_result(::CMsgGameServerSaveGameResult_Result value) {
  assert(::CMsgGameServerSaveGameResult_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgGameServerSaveGameResult::set_result(::CMsgGameServerSaveGameResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerSaveGameResult.result)
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGame

// optional uint32 save_id = 1;
inline bool CMsgGameServerGetLoadGame::_internal_has_save_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerGetLoadGame::has_save_id() const {
  return _internal_has_save_id();
}
inline void CMsgGameServerGetLoadGame::clear_save_id() {
  _impl_.save_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGameServerGetLoadGame::_internal_save_id() const {
  return _impl_.save_id_;
}
inline uint32_t CMsgGameServerGetLoadGame::save_id() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerGetLoadGame.save_id)
  return _internal_save_id();
}
inline void CMsgGameServerGetLoadGame::_internal_set_save_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.save_id_ = value;
}
inline void CMsgGameServerGetLoadGame::set_save_id(uint32_t value) {
  _internal_set_save_id(value);
  // @@protoc_insertion_point(field_set:CMsgGameServerGetLoadGame.save_id)
}

// -------------------------------------------------------------------

// CMsgGameServerGetLoadGameResult

// optional bytes save_game_data = 1;
inline bool CMsgGameServerGetLoadGameResult::_internal_has_save_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGameServerGetLoadGameResult::has_save_game_data() const {
  return _internal_has_save_game_data();
}
inline void CMsgGameServerGetLoadGameResult::clear_save_game_data() {
  _impl_.save_game_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGameServerGetLoadGameResult::save_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgGameServerGetLoadGameResult.save_game_data)
  return _internal_save_game_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGameServerGetLoadGameResult::set_save_game_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.save_game_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGameServerGetLoadGameResult.save_game_data)
}
inline std::string* CMsgGameServerGetLoadGameResult::mutable_save_game_data() {
  std::string* _s = _internal_mutable_save_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgGameServerGetLoadGameResult.save_game_data)
  return _s;
}
inline const std::string& CMsgGameServerGetLoadGameResult::_internal_save_game_data() const {
  return _impl_.save_game_data_.Get();
}
inline void CMsgGameServerGetLoadGameResult::_internal_set_save_game_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.save_game_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGameServerGetLoadGameResult::_internal_mutable_save_game_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.save_game_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGameServerGetLoadGameResult::release_save_game_data() {
  // @@protoc_insertion_point(field_release:CMsgGameServerGetLoadGameResult.save_game_data)
  if (!_internal_has_save_game_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.save_game_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_game_data_.IsDefault()) {
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGameServerGetLoadGameResult::set_allocated_save_game_data(std::string* save_game_data) {
  if (save_game_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.save_game_data_.SetAllocated(save_game_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.save_game_data_.IsDefault()) {
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGameServerGetLoadGameResult.save_game_data)
}

// -------------------------------------------------------------------

// CMsgDOTAAwardEventPoints_AwardPoints

// optional uint32 account_id = 1;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.account_id)
}

// optional int32 points = 2;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_points() const {
  return _internal_has_points();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_points() {
  _impl_.points_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTAAwardEventPoints_AwardPoints::_internal_points() const {
  return _impl_.points_;
}
inline int32_t CMsgDOTAAwardEventPoints_AwardPoints::points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.points)
  return _internal_points();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_points(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.points_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_points(int32_t value) {
  _internal_set_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.points)
}

// optional int32 premium_points = 3;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_premium_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_premium_points() const {
  return _internal_has_premium_points();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_premium_points() {
  _impl_.premium_points_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgDOTAAwardEventPoints_AwardPoints::_internal_premium_points() const {
  return _impl_.premium_points_;
}
inline int32_t CMsgDOTAAwardEventPoints_AwardPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.premium_points)
  return _internal_premium_points();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_premium_points(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.premium_points_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_premium_points(int32_t value) {
  _internal_set_premium_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.premium_points)
}

// optional uint32 trade_ban_time = 5;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_trade_ban_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_trade_ban_time() const {
  return _internal_has_trade_ban_time();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_trade_ban_time() {
  _impl_.trade_ban_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::_internal_trade_ban_time() const {
  return _impl_.trade_ban_time_;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::trade_ban_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.trade_ban_time)
  return _internal_trade_ban_time();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_trade_ban_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.trade_ban_time_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_trade_ban_time(uint32_t value) {
  _internal_set_trade_ban_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.trade_ban_time)
}

// optional bool eligible_for_periodic_adjustment = 6 [default = false];
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_eligible_for_periodic_adjustment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_eligible_for_periodic_adjustment() const {
  return _internal_has_eligible_for_periodic_adjustment();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_eligible_for_periodic_adjustment() {
  _impl_.eligible_for_periodic_adjustment_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_eligible_for_periodic_adjustment() const {
  return _impl_.eligible_for_periodic_adjustment_;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::eligible_for_periodic_adjustment() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.eligible_for_periodic_adjustment)
  return _internal_eligible_for_periodic_adjustment();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_eligible_for_periodic_adjustment(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.eligible_for_periodic_adjustment_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_eligible_for_periodic_adjustment(bool value) {
  _internal_set_eligible_for_periodic_adjustment(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.eligible_for_periodic_adjustment)
}

// optional uint32 point_cap_periodic_resource_id = 7;
inline bool CMsgDOTAAwardEventPoints_AwardPoints::_internal_has_point_cap_periodic_resource_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints_AwardPoints::has_point_cap_periodic_resource_id() const {
  return _internal_has_point_cap_periodic_resource_id();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::clear_point_cap_periodic_resource_id() {
  _impl_.point_cap_periodic_resource_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::_internal_point_cap_periodic_resource_id() const {
  return _impl_.point_cap_periodic_resource_id_;
}
inline uint32_t CMsgDOTAAwardEventPoints_AwardPoints::point_cap_periodic_resource_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.AwardPoints.point_cap_periodic_resource_id)
  return _internal_point_cap_periodic_resource_id();
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::_internal_set_point_cap_periodic_resource_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.point_cap_periodic_resource_id_ = value;
}
inline void CMsgDOTAAwardEventPoints_AwardPoints::set_point_cap_periodic_resource_id(uint32_t value) {
  _internal_set_point_cap_periodic_resource_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.AwardPoints.point_cap_periodic_resource_id)
}

// -------------------------------------------------------------------

// CMsgDOTAAwardEventPoints

// repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
inline int CMsgDOTAAwardEventPoints::_internal_award_points_size() const {
  return _impl_.award_points_.size();
}
inline int CMsgDOTAAwardEventPoints::award_points_size() const {
  return _internal_award_points_size();
}
inline void CMsgDOTAAwardEventPoints::clear_award_points() {
  _impl_.award_points_.Clear();
}
inline ::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::mutable_award_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAAwardEventPoints.award_points)
  return _impl_.award_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >*
CMsgDOTAAwardEventPoints::mutable_award_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAAwardEventPoints.award_points)
  return &_impl_.award_points_;
}
inline const ::CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints::_internal_award_points(int index) const {
  return _impl_.award_points_.Get(index);
}
inline const ::CMsgDOTAAwardEventPoints_AwardPoints& CMsgDOTAAwardEventPoints::award_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.award_points)
  return _internal_award_points(index);
}
inline ::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::_internal_add_award_points() {
  return _impl_.award_points_.Add();
}
inline ::CMsgDOTAAwardEventPoints_AwardPoints* CMsgDOTAAwardEventPoints::add_award_points() {
  ::CMsgDOTAAwardEventPoints_AwardPoints* _add = _internal_add_award_points();
  // @@protoc_insertion_point(field_add:CMsgDOTAAwardEventPoints.award_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAAwardEventPoints_AwardPoints >&
CMsgDOTAAwardEventPoints::award_points() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAAwardEventPoints.award_points)
  return _impl_.award_points_;
}

// optional uint64 match_id = 2;
inline bool CMsgDOTAAwardEventPoints::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTAAwardEventPoints::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAAwardEventPoints::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTAAwardEventPoints::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.match_id)
  return _internal_match_id();
}
inline void CMsgDOTAAwardEventPoints::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTAAwardEventPoints::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.match_id)
}

// optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
inline bool CMsgDOTAAwardEventPoints::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgDOTAAwardEventPoints::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CMsgDOTAAwardEventPoints::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgDOTAAwardEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.event_id)
  return _internal_event_id();
}
inline void CMsgDOTAAwardEventPoints::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgDOTAAwardEventPoints::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.event_id)
}

// optional uint32 timestamp = 5;
inline bool CMsgDOTAAwardEventPoints::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAAwardEventPoints::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAAwardEventPoints::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTAAwardEventPoints::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAAwardEventPoints::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTAAwardEventPoints::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.timestamp)
}

// optional uint32 audit_action = 6;
inline bool CMsgDOTAAwardEventPoints::_internal_has_audit_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAAwardEventPoints::has_audit_action() const {
  return _internal_has_audit_action();
}
inline void CMsgDOTAAwardEventPoints::clear_audit_action() {
  _impl_.audit_action_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAAwardEventPoints::_internal_audit_action() const {
  return _impl_.audit_action_;
}
inline uint32_t CMsgDOTAAwardEventPoints::audit_action() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAAwardEventPoints.audit_action)
  return _internal_audit_action();
}
inline void CMsgDOTAAwardEventPoints::_internal_set_audit_action(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.audit_action_ = value;
}
inline void CMsgDOTAAwardEventPoints::set_audit_action(uint32_t value) {
  _internal_set_audit_action(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAAwardEventPoints.audit_action)
}

// -------------------------------------------------------------------

// CMsgGCToServerPingRequest

// optional fixed64 request_id = 1;
inline bool CMsgGCToServerPingRequest::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerPingRequest::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgGCToServerPingRequest::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCToServerPingRequest::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t CMsgGCToServerPingRequest::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPingRequest.request_id)
  return _internal_request_id();
}
inline void CMsgGCToServerPingRequest::_internal_set_request_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_ = value;
}
inline void CMsgGCToServerPingRequest::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPingRequest.request_id)
}

// optional uint64 request_time = 2;
inline bool CMsgGCToServerPingRequest::_internal_has_request_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerPingRequest::has_request_time() const {
  return _internal_has_request_time();
}
inline void CMsgGCToServerPingRequest::clear_request_time() {
  _impl_.request_time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCToServerPingRequest::_internal_request_time() const {
  return _impl_.request_time_;
}
inline uint64_t CMsgGCToServerPingRequest::request_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPingRequest.request_time)
  return _internal_request_time();
}
inline void CMsgGCToServerPingRequest::_internal_set_request_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.request_time_ = value;
}
inline void CMsgGCToServerPingRequest::set_request_time(uint64_t value) {
  _internal_set_request_time(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPingRequest.request_time)
}

// -------------------------------------------------------------------

// CMsgGCToServerPingResponse

// optional fixed64 request_id = 1;
inline bool CMsgGCToServerPingResponse::_internal_has_request_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerPingResponse::has_request_id() const {
  return _internal_has_request_id();
}
inline void CMsgGCToServerPingResponse::clear_request_id() {
  _impl_.request_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCToServerPingResponse::_internal_request_id() const {
  return _impl_.request_id_;
}
inline uint64_t CMsgGCToServerPingResponse::request_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPingResponse.request_id)
  return _internal_request_id();
}
inline void CMsgGCToServerPingResponse::_internal_set_request_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.request_id_ = value;
}
inline void CMsgGCToServerPingResponse::set_request_id(uint64_t value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPingResponse.request_id)
}

// optional uint64 request_time = 2;
inline bool CMsgGCToServerPingResponse::_internal_has_request_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerPingResponse::has_request_time() const {
  return _internal_has_request_time();
}
inline void CMsgGCToServerPingResponse::clear_request_time() {
  _impl_.request_time_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgGCToServerPingResponse::_internal_request_time() const {
  return _impl_.request_time_;
}
inline uint64_t CMsgGCToServerPingResponse::request_time() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPingResponse.request_time)
  return _internal_request_time();
}
inline void CMsgGCToServerPingResponse::_internal_set_request_time(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.request_time_ = value;
}
inline void CMsgGCToServerPingResponse::set_request_time(uint64_t value) {
  _internal_set_request_time(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPingResponse.request_time)
}

// optional uint32 cluster = 3;
inline bool CMsgGCToServerPingResponse::_internal_has_cluster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToServerPingResponse::has_cluster() const {
  return _internal_has_cluster();
}
inline void CMsgGCToServerPingResponse::clear_cluster() {
  _impl_.cluster_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCToServerPingResponse::_internal_cluster() const {
  return _impl_.cluster_;
}
inline uint32_t CMsgGCToServerPingResponse::cluster() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPingResponse.cluster)
  return _internal_cluster();
}
inline void CMsgGCToServerPingResponse::_internal_set_cluster(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cluster_ = value;
}
inline void CMsgGCToServerPingResponse::set_cluster(uint32_t value) {
  _internal_set_cluster(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPingResponse.cluster)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchConnectionStats_Player

// optional uint32 account_id = 1;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.account_id)
}

// optional fixed32 ip = 2;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_ip() const {
  return _internal_has_ip();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_ip() {
  _impl_.ip_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::_internal_ip() const {
  return _impl_.ip_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::ip() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.ip)
  return _internal_ip();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_ip(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ip_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_ip(uint32_t value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.ip)
}

// optional uint32 avg_ping_ms = 3;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_avg_ping_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_avg_ping_ms() const {
  return _internal_has_avg_ping_ms();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_avg_ping_ms() {
  _impl_.avg_ping_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::_internal_avg_ping_ms() const {
  return _impl_.avg_ping_ms_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::avg_ping_ms() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.avg_ping_ms)
  return _internal_avg_ping_ms();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_avg_ping_ms(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.avg_ping_ms_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_avg_ping_ms(uint32_t value) {
  _internal_set_avg_ping_ms(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.avg_ping_ms)
}

// optional float packet_loss = 5;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_packet_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_packet_loss() const {
  return _internal_has_packet_loss();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_packet_loss() {
  _impl_.packet_loss_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgServerToGCMatchConnectionStats_Player::_internal_packet_loss() const {
  return _impl_.packet_loss_;
}
inline float CMsgServerToGCMatchConnectionStats_Player::packet_loss() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.packet_loss)
  return _internal_packet_loss();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_packet_loss(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.packet_loss_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_packet_loss(float value) {
  _internal_set_packet_loss(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.packet_loss)
}

// optional float ping_deviation = 6;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_ping_deviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_ping_deviation() const {
  return _internal_has_ping_deviation();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_ping_deviation() {
  _impl_.ping_deviation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgServerToGCMatchConnectionStats_Player::_internal_ping_deviation() const {
  return _impl_.ping_deviation_;
}
inline float CMsgServerToGCMatchConnectionStats_Player::ping_deviation() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.ping_deviation)
  return _internal_ping_deviation();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_ping_deviation(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.ping_deviation_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_ping_deviation(float value) {
  _internal_set_ping_deviation(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.ping_deviation)
}

// optional uint32 full_resends = 7;
inline bool CMsgServerToGCMatchConnectionStats_Player::_internal_has_full_resends() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats_Player::has_full_resends() const {
  return _internal_has_full_resends();
}
inline void CMsgServerToGCMatchConnectionStats_Player::clear_full_resends() {
  _impl_.full_resends_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::_internal_full_resends() const {
  return _impl_.full_resends_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats_Player::full_resends() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.Player.full_resends)
  return _internal_full_resends();
}
inline void CMsgServerToGCMatchConnectionStats_Player::_internal_set_full_resends(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.full_resends_ = value;
}
inline void CMsgServerToGCMatchConnectionStats_Player::set_full_resends(uint32_t value) {
  _internal_set_full_resends(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.Player.full_resends)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchConnectionStats

// optional uint64 match_id = 1;
inline bool CMsgServerToGCMatchConnectionStats::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCMatchConnectionStats::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCMatchConnectionStats::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCMatchConnectionStats::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCMatchConnectionStats::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCMatchConnectionStats::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.match_id)
}

// optional uint32 region_id = 2;
inline bool CMsgServerToGCMatchConnectionStats::_internal_has_region_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats::has_region_id() const {
  return _internal_has_region_id();
}
inline void CMsgServerToGCMatchConnectionStats::clear_region_id() {
  _impl_.region_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::_internal_region_id() const {
  return _impl_.region_id_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::region_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.region_id)
  return _internal_region_id();
}
inline void CMsgServerToGCMatchConnectionStats::_internal_set_region_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.region_id_ = value;
}
inline void CMsgServerToGCMatchConnectionStats::set_region_id(uint32_t value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.region_id)
}

// optional uint32 league_id = 3;
inline bool CMsgServerToGCMatchConnectionStats::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgServerToGCMatchConnectionStats::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.league_id)
  return _internal_league_id();
}
inline void CMsgServerToGCMatchConnectionStats::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.league_id_ = value;
}
inline void CMsgServerToGCMatchConnectionStats::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.league_id)
}

// repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
inline int CMsgServerToGCMatchConnectionStats::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgServerToGCMatchConnectionStats::players_size() const {
  return _internal_players_size();
}
inline void CMsgServerToGCMatchConnectionStats::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchConnectionStats.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchConnectionStats_Player >*
CMsgServerToGCMatchConnectionStats::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchConnectionStats.players)
  return &_impl_.players_;
}
inline const ::CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgServerToGCMatchConnectionStats_Player& CMsgServerToGCMatchConnectionStats::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.players)
  return _internal_players(index);
}
inline ::CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgServerToGCMatchConnectionStats_Player* CMsgServerToGCMatchConnectionStats::add_players() {
  ::CMsgServerToGCMatchConnectionStats_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchConnectionStats.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchConnectionStats_Player >&
CMsgServerToGCMatchConnectionStats::players() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchConnectionStats.players)
  return _impl_.players_;
}

// optional uint32 cluster_id = 5;
inline bool CMsgServerToGCMatchConnectionStats::_internal_has_cluster_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchConnectionStats::has_cluster_id() const {
  return _internal_has_cluster_id();
}
inline void CMsgServerToGCMatchConnectionStats::clear_cluster_id() {
  _impl_.cluster_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::_internal_cluster_id() const {
  return _impl_.cluster_id_;
}
inline uint32_t CMsgServerToGCMatchConnectionStats::cluster_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchConnectionStats.cluster_id)
  return _internal_cluster_id();
}
inline void CMsgServerToGCMatchConnectionStats::_internal_set_cluster_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cluster_id_ = value;
}
inline void CMsgServerToGCMatchConnectionStats::set_cluster_id(uint32_t value) {
  _internal_set_cluster_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchConnectionStats.cluster_id)
}

// -------------------------------------------------------------------

// CMsgServerGCUpdateSpectatorCount

// optional uint32 spectator_count = 1;
inline bool CMsgServerGCUpdateSpectatorCount::_internal_has_spectator_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerGCUpdateSpectatorCount::has_spectator_count() const {
  return _internal_has_spectator_count();
}
inline void CMsgServerGCUpdateSpectatorCount::clear_spectator_count() {
  _impl_.spectator_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerGCUpdateSpectatorCount::_internal_spectator_count() const {
  return _impl_.spectator_count_;
}
inline uint32_t CMsgServerGCUpdateSpectatorCount::spectator_count() const {
  // @@protoc_insertion_point(field_get:CMsgServerGCUpdateSpectatorCount.spectator_count)
  return _internal_spectator_count();
}
inline void CMsgServerGCUpdateSpectatorCount::_internal_set_spectator_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.spectator_count_ = value;
}
inline void CMsgServerGCUpdateSpectatorCount::set_spectator_count(uint32_t value) {
  _internal_set_spectator_count(value);
  // @@protoc_insertion_point(field_set:CMsgServerGCUpdateSpectatorCount.spectator_count)
}

// -------------------------------------------------------------------

// CSerializedCombatLog_Dictionary_DictString

// required uint32 id = 1;
inline bool CSerializedCombatLog_Dictionary_DictString::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSerializedCombatLog_Dictionary_DictString::has_id() const {
  return _internal_has_id();
}
inline void CSerializedCombatLog_Dictionary_DictString::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSerializedCombatLog_Dictionary_DictString::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSerializedCombatLog_Dictionary_DictString::id() const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.Dictionary.DictString.id)
  return _internal_id();
}
inline void CSerializedCombatLog_Dictionary_DictString::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void CSerializedCombatLog_Dictionary_DictString::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSerializedCombatLog.Dictionary.DictString.id)
}

// required string value = 2;
inline bool CSerializedCombatLog_Dictionary_DictString::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSerializedCombatLog_Dictionary_DictString::has_value() const {
  return _internal_has_value();
}
inline void CSerializedCombatLog_Dictionary_DictString::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSerializedCombatLog_Dictionary_DictString::value() const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.Dictionary.DictString.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSerializedCombatLog_Dictionary_DictString::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSerializedCombatLog.Dictionary.DictString.value)
}
inline std::string* CSerializedCombatLog_Dictionary_DictString::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:CSerializedCombatLog.Dictionary.DictString.value)
  return _s;
}
inline const std::string& CSerializedCombatLog_Dictionary_DictString::_internal_value() const {
  return _impl_.value_.Get();
}
inline void CSerializedCombatLog_Dictionary_DictString::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* CSerializedCombatLog_Dictionary_DictString::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* CSerializedCombatLog_Dictionary_DictString::release_value() {
  // @@protoc_insertion_point(field_release:CSerializedCombatLog.Dictionary.DictString.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSerializedCombatLog_Dictionary_DictString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSerializedCombatLog.Dictionary.DictString.value)
}

// -------------------------------------------------------------------

// CSerializedCombatLog_Dictionary

// repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
inline int CSerializedCombatLog_Dictionary::_internal_strings_size() const {
  return _impl_.strings_.size();
}
inline int CSerializedCombatLog_Dictionary::strings_size() const {
  return _internal_strings_size();
}
inline void CSerializedCombatLog_Dictionary::clear_strings() {
  _impl_.strings_.Clear();
}
inline ::CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:CSerializedCombatLog.Dictionary.strings)
  return _impl_.strings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSerializedCombatLog_Dictionary_DictString >*
CSerializedCombatLog_Dictionary::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:CSerializedCombatLog.Dictionary.strings)
  return &_impl_.strings_;
}
inline const ::CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary::_internal_strings(int index) const {
  return _impl_.strings_.Get(index);
}
inline const ::CSerializedCombatLog_Dictionary_DictString& CSerializedCombatLog_Dictionary::strings(int index) const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.Dictionary.strings)
  return _internal_strings(index);
}
inline ::CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary::_internal_add_strings() {
  return _impl_.strings_.Add();
}
inline ::CSerializedCombatLog_Dictionary_DictString* CSerializedCombatLog_Dictionary::add_strings() {
  ::CSerializedCombatLog_Dictionary_DictString* _add = _internal_add_strings();
  // @@protoc_insertion_point(field_add:CSerializedCombatLog.Dictionary.strings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSerializedCombatLog_Dictionary_DictString >&
CSerializedCombatLog_Dictionary::strings() const {
  // @@protoc_insertion_point(field_list:CSerializedCombatLog.Dictionary.strings)
  return _impl_.strings_;
}

// -------------------------------------------------------------------

// CSerializedCombatLog

// optional uint32 version = 1;
inline bool CSerializedCombatLog::_internal_has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSerializedCombatLog::has_version() const {
  return _internal_has_version();
}
inline void CSerializedCombatLog::clear_version() {
  _impl_.version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSerializedCombatLog::_internal_version() const {
  return _impl_.version_;
}
inline uint32_t CSerializedCombatLog::version() const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.version)
  return _internal_version();
}
inline void CSerializedCombatLog::_internal_set_version(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}
inline void CSerializedCombatLog::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CSerializedCombatLog.version)
}

// optional .CSerializedCombatLog.Dictionary dictionary = 2;
inline bool CSerializedCombatLog::_internal_has_dictionary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dictionary_ != nullptr);
  return value;
}
inline bool CSerializedCombatLog::has_dictionary() const {
  return _internal_has_dictionary();
}
inline void CSerializedCombatLog::clear_dictionary() {
  if (_impl_.dictionary_ != nullptr) _impl_.dictionary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CSerializedCombatLog_Dictionary& CSerializedCombatLog::_internal_dictionary() const {
  const ::CSerializedCombatLog_Dictionary* p = _impl_.dictionary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSerializedCombatLog_Dictionary&>(
      ::_CSerializedCombatLog_Dictionary_default_instance_);
}
inline const ::CSerializedCombatLog_Dictionary& CSerializedCombatLog::dictionary() const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.dictionary)
  return _internal_dictionary();
}
inline void CSerializedCombatLog::unsafe_arena_set_allocated_dictionary(
    ::CSerializedCombatLog_Dictionary* dictionary) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dictionary_);
  }
  _impl_.dictionary_ = dictionary;
  if (dictionary) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSerializedCombatLog.dictionary)
}
inline ::CSerializedCombatLog_Dictionary* CSerializedCombatLog::release_dictionary() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSerializedCombatLog_Dictionary* temp = _impl_.dictionary_;
  _impl_.dictionary_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CSerializedCombatLog_Dictionary* CSerializedCombatLog::unsafe_arena_release_dictionary() {
  // @@protoc_insertion_point(field_release:CSerializedCombatLog.dictionary)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CSerializedCombatLog_Dictionary* temp = _impl_.dictionary_;
  _impl_.dictionary_ = nullptr;
  return temp;
}
inline ::CSerializedCombatLog_Dictionary* CSerializedCombatLog::_internal_mutable_dictionary() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dictionary_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSerializedCombatLog_Dictionary>(GetArenaForAllocation());
    _impl_.dictionary_ = p;
  }
  return _impl_.dictionary_;
}
inline ::CSerializedCombatLog_Dictionary* CSerializedCombatLog::mutable_dictionary() {
  ::CSerializedCombatLog_Dictionary* _msg = _internal_mutable_dictionary();
  // @@protoc_insertion_point(field_mutable:CSerializedCombatLog.dictionary)
  return _msg;
}
inline void CSerializedCombatLog::set_allocated_dictionary(::CSerializedCombatLog_Dictionary* dictionary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dictionary_;
  }
  if (dictionary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dictionary);
    if (message_arena != submessage_arena) {
      dictionary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dictionary, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dictionary_ = dictionary;
  // @@protoc_insertion_point(field_set_allocated:CSerializedCombatLog.dictionary)
}

// repeated .CMsgDOTACombatLogEntry entries = 3;
inline int CSerializedCombatLog::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int CSerializedCombatLog::entries_size() const {
  return _internal_entries_size();
}
inline ::CMsgDOTACombatLogEntry* CSerializedCombatLog::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CSerializedCombatLog.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTACombatLogEntry >*
CSerializedCombatLog::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:CSerializedCombatLog.entries)
  return &_impl_.entries_;
}
inline const ::CMsgDOTACombatLogEntry& CSerializedCombatLog::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::CMsgDOTACombatLogEntry& CSerializedCombatLog::entries(int index) const {
  // @@protoc_insertion_point(field_get:CSerializedCombatLog.entries)
  return _internal_entries(index);
}
inline ::CMsgDOTACombatLogEntry* CSerializedCombatLog::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::CMsgDOTACombatLogEntry* CSerializedCombatLog::add_entries() {
  ::CMsgDOTACombatLogEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:CSerializedCombatLog.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTACombatLogEntry >&
CSerializedCombatLog::entries() const {
  // @@protoc_insertion_point(field_list:CSerializedCombatLog.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// CMsgServerToGCVictoryPredictions_Record

// optional uint32 account_id = 1;
inline bool CMsgServerToGCVictoryPredictions_Record::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCVictoryPredictions_Record::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCVictoryPredictions_Record::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCVictoryPredictions_Record::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCVictoryPredictions_Record::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCVictoryPredictions.Record.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCVictoryPredictions_Record::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCVictoryPredictions_Record::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCVictoryPredictions.Record.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgServerToGCVictoryPredictions_Record::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCVictoryPredictions_Record::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgServerToGCVictoryPredictions_Record::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCVictoryPredictions_Record::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgServerToGCVictoryPredictions_Record::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCVictoryPredictions.Record.item_id)
  return _internal_item_id();
}
inline void CMsgServerToGCVictoryPredictions_Record::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_id_ = value;
}
inline void CMsgServerToGCVictoryPredictions_Record::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCVictoryPredictions.Record.item_id)
}

// repeated uint64 item_ids = 5;
inline int CMsgServerToGCVictoryPredictions_Record::_internal_item_ids_size() const {
  return _impl_.item_ids_.size();
}
inline int CMsgServerToGCVictoryPredictions_Record::item_ids_size() const {
  return _internal_item_ids_size();
}
inline void CMsgServerToGCVictoryPredictions_Record::clear_item_ids() {
  _impl_.item_ids_.Clear();
}
inline uint64_t CMsgServerToGCVictoryPredictions_Record::_internal_item_ids(int index) const {
  return _impl_.item_ids_.Get(index);
}
inline uint64_t CMsgServerToGCVictoryPredictions_Record::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCVictoryPredictions.Record.item_ids)
  return _internal_item_ids(index);
}
inline void CMsgServerToGCVictoryPredictions_Record::set_item_ids(int index, uint64_t value) {
  _impl_.item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCVictoryPredictions.Record.item_ids)
}
inline void CMsgServerToGCVictoryPredictions_Record::_internal_add_item_ids(uint64_t value) {
  _impl_.item_ids_.Add(value);
}
inline void CMsgServerToGCVictoryPredictions_Record::add_item_ids(uint64_t value) {
  _internal_add_item_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCVictoryPredictions.Record.item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgServerToGCVictoryPredictions_Record::_internal_item_ids() const {
  return _impl_.item_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgServerToGCVictoryPredictions_Record::item_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCVictoryPredictions.Record.item_ids)
  return _internal_item_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgServerToGCVictoryPredictions_Record::_internal_mutable_item_ids() {
  return &_impl_.item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgServerToGCVictoryPredictions_Record::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCVictoryPredictions.Record.item_ids)
  return _internal_mutable_item_ids();
}

// -------------------------------------------------------------------

// CMsgServerToGCVictoryPredictions

// repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
inline int CMsgServerToGCVictoryPredictions::_internal_records_size() const {
  return _impl_.records_.size();
}
inline int CMsgServerToGCVictoryPredictions::records_size() const {
  return _internal_records_size();
}
inline void CMsgServerToGCVictoryPredictions::clear_records() {
  _impl_.records_.Clear();
}
inline ::CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCVictoryPredictions.records)
  return _impl_.records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCVictoryPredictions_Record >*
CMsgServerToGCVictoryPredictions::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCVictoryPredictions.records)
  return &_impl_.records_;
}
inline const ::CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions::_internal_records(int index) const {
  return _impl_.records_.Get(index);
}
inline const ::CMsgServerToGCVictoryPredictions_Record& CMsgServerToGCVictoryPredictions::records(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCVictoryPredictions.records)
  return _internal_records(index);
}
inline ::CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions::_internal_add_records() {
  return _impl_.records_.Add();
}
inline ::CMsgServerToGCVictoryPredictions_Record* CMsgServerToGCVictoryPredictions::add_records() {
  ::CMsgServerToGCVictoryPredictions_Record* _add = _internal_add_records();
  // @@protoc_insertion_point(field_add:CMsgServerToGCVictoryPredictions.records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCVictoryPredictions_Record >&
CMsgServerToGCVictoryPredictions::records() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCVictoryPredictions.records)
  return _impl_.records_;
}

// -------------------------------------------------------------------

// CMsgServerToGCRequestStatus

// -------------------------------------------------------------------

// CMsgServerToGCRequestStatus_Response

// optional uint32 response = 1;
inline bool CMsgServerToGCRequestStatus_Response::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCRequestStatus_Response::has_response() const {
  return _internal_has_response();
}
inline void CMsgServerToGCRequestStatus_Response::clear_response() {
  _impl_.response_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCRequestStatus_Response::_internal_response() const {
  return _impl_.response_;
}
inline uint32_t CMsgServerToGCRequestStatus_Response::response() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRequestStatus_Response.response)
  return _internal_response();
}
inline void CMsgServerToGCRequestStatus_Response::_internal_set_response(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgServerToGCRequestStatus_Response::set_response(uint32_t value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRequestStatus_Response.response)
}

// -------------------------------------------------------------------

// CMsgSignOutAssassinMiniGameInfo

// repeated fixed64 winning_players = 1;
inline int CMsgSignOutAssassinMiniGameInfo::_internal_winning_players_size() const {
  return _impl_.winning_players_.size();
}
inline int CMsgSignOutAssassinMiniGameInfo::winning_players_size() const {
  return _internal_winning_players_size();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_winning_players() {
  _impl_.winning_players_.Clear();
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::_internal_winning_players(int index) const {
  return _impl_.winning_players_.Get(index);
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::winning_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.winning_players)
  return _internal_winning_players(index);
}
inline void CMsgSignOutAssassinMiniGameInfo::set_winning_players(int index, uint64_t value) {
  _impl_.winning_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.winning_players)
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_add_winning_players(uint64_t value) {
  _impl_.winning_players_.Add(value);
}
inline void CMsgSignOutAssassinMiniGameInfo::add_winning_players(uint64_t value) {
  _internal_add_winning_players(value);
  // @@protoc_insertion_point(field_add:CMsgSignOutAssassinMiniGameInfo.winning_players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::_internal_winning_players() const {
  return _impl_.winning_players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::winning_players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutAssassinMiniGameInfo.winning_players)
  return _internal_winning_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::_internal_mutable_winning_players() {
  return &_impl_.winning_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::mutable_winning_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutAssassinMiniGameInfo.winning_players)
  return _internal_mutable_winning_players();
}

// repeated fixed64 losing_players = 2;
inline int CMsgSignOutAssassinMiniGameInfo::_internal_losing_players_size() const {
  return _impl_.losing_players_.size();
}
inline int CMsgSignOutAssassinMiniGameInfo::losing_players_size() const {
  return _internal_losing_players_size();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_losing_players() {
  _impl_.losing_players_.Clear();
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::_internal_losing_players(int index) const {
  return _impl_.losing_players_.Get(index);
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::losing_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.losing_players)
  return _internal_losing_players(index);
}
inline void CMsgSignOutAssassinMiniGameInfo::set_losing_players(int index, uint64_t value) {
  _impl_.losing_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.losing_players)
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_add_losing_players(uint64_t value) {
  _impl_.losing_players_.Add(value);
}
inline void CMsgSignOutAssassinMiniGameInfo::add_losing_players(uint64_t value) {
  _internal_add_losing_players(value);
  // @@protoc_insertion_point(field_add:CMsgSignOutAssassinMiniGameInfo.losing_players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::_internal_losing_players() const {
  return _impl_.losing_players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::losing_players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutAssassinMiniGameInfo.losing_players)
  return _internal_losing_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::_internal_mutable_losing_players() {
  return &_impl_.losing_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::mutable_losing_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutAssassinMiniGameInfo.losing_players)
  return _internal_mutable_losing_players();
}

// repeated fixed64 arcana_owners = 3;
inline int CMsgSignOutAssassinMiniGameInfo::_internal_arcana_owners_size() const {
  return _impl_.arcana_owners_.size();
}
inline int CMsgSignOutAssassinMiniGameInfo::arcana_owners_size() const {
  return _internal_arcana_owners_size();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_arcana_owners() {
  _impl_.arcana_owners_.Clear();
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::_internal_arcana_owners(int index) const {
  return _impl_.arcana_owners_.Get(index);
}
inline uint64_t CMsgSignOutAssassinMiniGameInfo::arcana_owners(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return _internal_arcana_owners(index);
}
inline void CMsgSignOutAssassinMiniGameInfo::set_arcana_owners(int index, uint64_t value) {
  _impl_.arcana_owners_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.arcana_owners)
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_add_arcana_owners(uint64_t value) {
  _impl_.arcana_owners_.Add(value);
}
inline void CMsgSignOutAssassinMiniGameInfo::add_arcana_owners(uint64_t value) {
  _internal_add_arcana_owners(value);
  // @@protoc_insertion_point(field_add:CMsgSignOutAssassinMiniGameInfo.arcana_owners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::_internal_arcana_owners() const {
  return _impl_.arcana_owners_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutAssassinMiniGameInfo::arcana_owners() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return _internal_arcana_owners();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::_internal_mutable_arcana_owners() {
  return &_impl_.arcana_owners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutAssassinMiniGameInfo::mutable_arcana_owners() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutAssassinMiniGameInfo.arcana_owners)
  return _internal_mutable_arcana_owners();
}

// optional bool assassin_won = 4;
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_has_assassin_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutAssassinMiniGameInfo::has_assassin_won() const {
  return _internal_has_assassin_won();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_assassin_won() {
  _impl_.assassin_won_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_assassin_won() const {
  return _impl_.assassin_won_;
}
inline bool CMsgSignOutAssassinMiniGameInfo::assassin_won() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.assassin_won)
  return _internal_assassin_won();
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_set_assassin_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.assassin_won_ = value;
}
inline void CMsgSignOutAssassinMiniGameInfo::set_assassin_won(bool value) {
  _internal_set_assassin_won(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.assassin_won)
}

// optional uint32 target_hero_id = 5;
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_has_target_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutAssassinMiniGameInfo::has_target_hero_id() const {
  return _internal_has_target_hero_id();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_target_hero_id() {
  _impl_.target_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutAssassinMiniGameInfo::_internal_target_hero_id() const {
  return _impl_.target_hero_id_;
}
inline uint32_t CMsgSignOutAssassinMiniGameInfo::target_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.target_hero_id)
  return _internal_target_hero_id();
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_set_target_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_hero_id_ = value;
}
inline void CMsgSignOutAssassinMiniGameInfo::set_target_hero_id(uint32_t value) {
  _internal_set_target_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.target_hero_id)
}

// optional bool contract_completed = 6;
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_has_contract_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutAssassinMiniGameInfo::has_contract_completed() const {
  return _internal_has_contract_completed();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_contract_completed() {
  _impl_.contract_completed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_contract_completed() const {
  return _impl_.contract_completed_;
}
inline bool CMsgSignOutAssassinMiniGameInfo::contract_completed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.contract_completed)
  return _internal_contract_completed();
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_set_contract_completed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.contract_completed_ = value;
}
inline void CMsgSignOutAssassinMiniGameInfo::set_contract_completed(bool value) {
  _internal_set_contract_completed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.contract_completed)
}

// optional float contract_complete_time = 7;
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_has_contract_complete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutAssassinMiniGameInfo::has_contract_complete_time() const {
  return _internal_has_contract_complete_time();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_contract_complete_time() {
  _impl_.contract_complete_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgSignOutAssassinMiniGameInfo::_internal_contract_complete_time() const {
  return _impl_.contract_complete_time_;
}
inline float CMsgSignOutAssassinMiniGameInfo::contract_complete_time() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.contract_complete_time)
  return _internal_contract_complete_time();
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_set_contract_complete_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.contract_complete_time_ = value;
}
inline void CMsgSignOutAssassinMiniGameInfo::set_contract_complete_time(float value) {
  _internal_set_contract_complete_time(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.contract_complete_time)
}

// optional bool pa_is_radiant = 8;
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_has_pa_is_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutAssassinMiniGameInfo::has_pa_is_radiant() const {
  return _internal_has_pa_is_radiant();
}
inline void CMsgSignOutAssassinMiniGameInfo::clear_pa_is_radiant() {
  _impl_.pa_is_radiant_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgSignOutAssassinMiniGameInfo::_internal_pa_is_radiant() const {
  return _impl_.pa_is_radiant_;
}
inline bool CMsgSignOutAssassinMiniGameInfo::pa_is_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutAssassinMiniGameInfo.pa_is_radiant)
  return _internal_pa_is_radiant();
}
inline void CMsgSignOutAssassinMiniGameInfo::_internal_set_pa_is_radiant(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.pa_is_radiant_ = value;
}
inline void CMsgSignOutAssassinMiniGameInfo::set_pa_is_radiant(bool value) {
  _internal_set_pa_is_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutAssassinMiniGameInfo.pa_is_radiant)
}

// -------------------------------------------------------------------

// CMsgServerToGCKillSummaries_KillSummary

// optional uint32 killer_hero_id = 1;
inline bool CMsgServerToGCKillSummaries_KillSummary::_internal_has_killer_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCKillSummaries_KillSummary::has_killer_hero_id() const {
  return _internal_has_killer_hero_id();
}
inline void CMsgServerToGCKillSummaries_KillSummary::clear_killer_hero_id() {
  _impl_.killer_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::_internal_killer_hero_id() const {
  return _impl_.killer_hero_id_;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::killer_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCKillSummaries.KillSummary.killer_hero_id)
  return _internal_killer_hero_id();
}
inline void CMsgServerToGCKillSummaries_KillSummary::_internal_set_killer_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.killer_hero_id_ = value;
}
inline void CMsgServerToGCKillSummaries_KillSummary::set_killer_hero_id(uint32_t value) {
  _internal_set_killer_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCKillSummaries.KillSummary.killer_hero_id)
}

// optional uint32 victim_hero_id = 2;
inline bool CMsgServerToGCKillSummaries_KillSummary::_internal_has_victim_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCKillSummaries_KillSummary::has_victim_hero_id() const {
  return _internal_has_victim_hero_id();
}
inline void CMsgServerToGCKillSummaries_KillSummary::clear_victim_hero_id() {
  _impl_.victim_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::_internal_victim_hero_id() const {
  return _impl_.victim_hero_id_;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::victim_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCKillSummaries.KillSummary.victim_hero_id)
  return _internal_victim_hero_id();
}
inline void CMsgServerToGCKillSummaries_KillSummary::_internal_set_victim_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.victim_hero_id_ = value;
}
inline void CMsgServerToGCKillSummaries_KillSummary::set_victim_hero_id(uint32_t value) {
  _internal_set_victim_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCKillSummaries.KillSummary.victim_hero_id)
}

// optional uint32 kill_count = 3;
inline bool CMsgServerToGCKillSummaries_KillSummary::_internal_has_kill_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCKillSummaries_KillSummary::has_kill_count() const {
  return _internal_has_kill_count();
}
inline void CMsgServerToGCKillSummaries_KillSummary::clear_kill_count() {
  _impl_.kill_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::_internal_kill_count() const {
  return _impl_.kill_count_;
}
inline uint32_t CMsgServerToGCKillSummaries_KillSummary::kill_count() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCKillSummaries.KillSummary.kill_count)
  return _internal_kill_count();
}
inline void CMsgServerToGCKillSummaries_KillSummary::_internal_set_kill_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.kill_count_ = value;
}
inline void CMsgServerToGCKillSummaries_KillSummary::set_kill_count(uint32_t value) {
  _internal_set_kill_count(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCKillSummaries.KillSummary.kill_count)
}

// -------------------------------------------------------------------

// CMsgServerToGCKillSummaries

// optional uint32 ingameevent_id = 1;
inline bool CMsgServerToGCKillSummaries::_internal_has_ingameevent_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCKillSummaries::has_ingameevent_id() const {
  return _internal_has_ingameevent_id();
}
inline void CMsgServerToGCKillSummaries::clear_ingameevent_id() {
  _impl_.ingameevent_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCKillSummaries::_internal_ingameevent_id() const {
  return _impl_.ingameevent_id_;
}
inline uint32_t CMsgServerToGCKillSummaries::ingameevent_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCKillSummaries.ingameevent_id)
  return _internal_ingameevent_id();
}
inline void CMsgServerToGCKillSummaries::_internal_set_ingameevent_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ingameevent_id_ = value;
}
inline void CMsgServerToGCKillSummaries::set_ingameevent_id(uint32_t value) {
  _internal_set_ingameevent_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCKillSummaries.ingameevent_id)
}

// repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
inline int CMsgServerToGCKillSummaries::_internal_summaries_size() const {
  return _impl_.summaries_.size();
}
inline int CMsgServerToGCKillSummaries::summaries_size() const {
  return _internal_summaries_size();
}
inline void CMsgServerToGCKillSummaries::clear_summaries() {
  _impl_.summaries_.Clear();
}
inline ::CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries::mutable_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCKillSummaries.summaries)
  return _impl_.summaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCKillSummaries_KillSummary >*
CMsgServerToGCKillSummaries::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCKillSummaries.summaries)
  return &_impl_.summaries_;
}
inline const ::CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries::_internal_summaries(int index) const {
  return _impl_.summaries_.Get(index);
}
inline const ::CMsgServerToGCKillSummaries_KillSummary& CMsgServerToGCKillSummaries::summaries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCKillSummaries.summaries)
  return _internal_summaries(index);
}
inline ::CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries::_internal_add_summaries() {
  return _impl_.summaries_.Add();
}
inline ::CMsgServerToGCKillSummaries_KillSummary* CMsgServerToGCKillSummaries::add_summaries() {
  ::CMsgServerToGCKillSummaries_KillSummary* _add = _internal_add_summaries();
  // @@protoc_insertion_point(field_add:CMsgServerToGCKillSummaries.summaries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCKillSummaries_KillSummary >&
CMsgServerToGCKillSummaries::summaries() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCKillSummaries.summaries)
  return _impl_.summaries_;
}

// -------------------------------------------------------------------

// CMsgGCToServerPredictionResult_Prediction

// optional uint32 item_def = 1;
inline bool CMsgGCToServerPredictionResult_Prediction::_internal_has_item_def() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult_Prediction::has_item_def() const {
  return _internal_has_item_def();
}
inline void CMsgGCToServerPredictionResult_Prediction::clear_item_def() {
  _impl_.item_def_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::_internal_item_def() const {
  return _impl_.item_def_;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::item_def() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.Prediction.item_def)
  return _internal_item_def();
}
inline void CMsgGCToServerPredictionResult_Prediction::_internal_set_item_def(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_def_ = value;
}
inline void CMsgGCToServerPredictionResult_Prediction::set_item_def(uint32_t value) {
  _internal_set_item_def(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.Prediction.item_def)
}

// optional uint32 num_correct = 2;
inline bool CMsgGCToServerPredictionResult_Prediction::_internal_has_num_correct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult_Prediction::has_num_correct() const {
  return _internal_has_num_correct();
}
inline void CMsgGCToServerPredictionResult_Prediction::clear_num_correct() {
  _impl_.num_correct_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::_internal_num_correct() const {
  return _impl_.num_correct_;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::num_correct() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.Prediction.num_correct)
  return _internal_num_correct();
}
inline void CMsgGCToServerPredictionResult_Prediction::_internal_set_num_correct(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_correct_ = value;
}
inline void CMsgGCToServerPredictionResult_Prediction::set_num_correct(uint32_t value) {
  _internal_set_num_correct(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.Prediction.num_correct)
}

// optional uint32 num_fails = 3;
inline bool CMsgGCToServerPredictionResult_Prediction::_internal_has_num_fails() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult_Prediction::has_num_fails() const {
  return _internal_has_num_fails();
}
inline void CMsgGCToServerPredictionResult_Prediction::clear_num_fails() {
  _impl_.num_fails_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::_internal_num_fails() const {
  return _impl_.num_fails_;
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::num_fails() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.Prediction.num_fails)
  return _internal_num_fails();
}
inline void CMsgGCToServerPredictionResult_Prediction::_internal_set_num_fails(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.num_fails_ = value;
}
inline void CMsgGCToServerPredictionResult_Prediction::set_num_fails(uint32_t value) {
  _internal_set_num_fails(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.Prediction.num_fails)
}

// optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
inline bool CMsgGCToServerPredictionResult_Prediction::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult_Prediction::has_result() const {
  return _internal_has_result();
}
inline void CMsgGCToServerPredictionResult_Prediction::clear_result() {
  _impl_.result_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::_internal_result() const {
  return static_cast< ::CMsgGCToServerPredictionResult_Prediction_EResult >(_impl_.result_);
}
inline ::CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.Prediction.result)
  return _internal_result();
}
inline void CMsgGCToServerPredictionResult_Prediction::_internal_set_result(::CMsgGCToServerPredictionResult_Prediction_EResult value) {
  assert(::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.result_ = value;
}
inline void CMsgGCToServerPredictionResult_Prediction::set_result(::CMsgGCToServerPredictionResult_Prediction_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.Prediction.result)
}

// repeated uint32 granted_item_defs = 6;
inline int CMsgGCToServerPredictionResult_Prediction::_internal_granted_item_defs_size() const {
  return _impl_.granted_item_defs_.size();
}
inline int CMsgGCToServerPredictionResult_Prediction::granted_item_defs_size() const {
  return _internal_granted_item_defs_size();
}
inline void CMsgGCToServerPredictionResult_Prediction::clear_granted_item_defs() {
  _impl_.granted_item_defs_.Clear();
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::_internal_granted_item_defs(int index) const {
  return _impl_.granted_item_defs_.Get(index);
}
inline uint32_t CMsgGCToServerPredictionResult_Prediction::granted_item_defs(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return _internal_granted_item_defs(index);
}
inline void CMsgGCToServerPredictionResult_Prediction::set_granted_item_defs(int index, uint32_t value) {
  _impl_.granted_item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
}
inline void CMsgGCToServerPredictionResult_Prediction::_internal_add_granted_item_defs(uint32_t value) {
  _impl_.granted_item_defs_.Add(value);
}
inline void CMsgGCToServerPredictionResult_Prediction::add_granted_item_defs(uint32_t value) {
  _internal_add_granted_item_defs(value);
  // @@protoc_insertion_point(field_add:CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCToServerPredictionResult_Prediction::_internal_granted_item_defs() const {
  return _impl_.granted_item_defs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgGCToServerPredictionResult_Prediction::granted_item_defs() const {
  // @@protoc_insertion_point(field_list:CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return _internal_granted_item_defs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCToServerPredictionResult_Prediction::_internal_mutable_granted_item_defs() {
  return &_impl_.granted_item_defs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgGCToServerPredictionResult_Prediction::mutable_granted_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToServerPredictionResult.Prediction.granted_item_defs)
  return _internal_mutable_granted_item_defs();
}

// -------------------------------------------------------------------

// CMsgGCToServerPredictionResult

// optional uint32 account_id = 1;
inline bool CMsgGCToServerPredictionResult::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgGCToServerPredictionResult::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToServerPredictionResult::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgGCToServerPredictionResult::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.account_id)
  return _internal_account_id();
}
inline void CMsgGCToServerPredictionResult::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgGCToServerPredictionResult::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.account_id)
}

// optional uint64 match_id = 2;
inline bool CMsgGCToServerPredictionResult::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgGCToServerPredictionResult::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCToServerPredictionResult::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgGCToServerPredictionResult::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.match_id)
  return _internal_match_id();
}
inline void CMsgGCToServerPredictionResult::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgGCToServerPredictionResult::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.match_id)
}

// optional bool correct = 3;
inline bool CMsgGCToServerPredictionResult::_internal_has_correct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToServerPredictionResult::has_correct() const {
  return _internal_has_correct();
}
inline void CMsgGCToServerPredictionResult::clear_correct() {
  _impl_.correct_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgGCToServerPredictionResult::_internal_correct() const {
  return _impl_.correct_;
}
inline bool CMsgGCToServerPredictionResult::correct() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.correct)
  return _internal_correct();
}
inline void CMsgGCToServerPredictionResult::_internal_set_correct(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.correct_ = value;
}
inline void CMsgGCToServerPredictionResult::set_correct(bool value) {
  _internal_set_correct(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerPredictionResult.correct)
}

// repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
inline int CMsgGCToServerPredictionResult::_internal_predictions_size() const {
  return _impl_.predictions_.size();
}
inline int CMsgGCToServerPredictionResult::predictions_size() const {
  return _internal_predictions_size();
}
inline void CMsgGCToServerPredictionResult::clear_predictions() {
  _impl_.predictions_.Clear();
}
inline ::CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToServerPredictionResult.predictions)
  return _impl_.predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerPredictionResult_Prediction >*
CMsgGCToServerPredictionResult::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToServerPredictionResult.predictions)
  return &_impl_.predictions_;
}
inline const ::CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult::_internal_predictions(int index) const {
  return _impl_.predictions_.Get(index);
}
inline const ::CMsgGCToServerPredictionResult_Prediction& CMsgGCToServerPredictionResult::predictions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerPredictionResult.predictions)
  return _internal_predictions(index);
}
inline ::CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult::_internal_add_predictions() {
  return _impl_.predictions_.Add();
}
inline ::CMsgGCToServerPredictionResult_Prediction* CMsgGCToServerPredictionResult::add_predictions() {
  ::CMsgGCToServerPredictionResult_Prediction* _add = _internal_add_predictions();
  // @@protoc_insertion_point(field_add:CMsgGCToServerPredictionResult.predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerPredictionResult_Prediction >&
CMsgGCToServerPredictionResult::predictions() const {
  // @@protoc_insertion_point(field_list:CMsgGCToServerPredictionResult.predictions)
  return _impl_.predictions_;
}

// -------------------------------------------------------------------

// CMsgServerToGCLockCharmTrading

// optional uint32 account_id = 1;
inline bool CMsgServerToGCLockCharmTrading::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCLockCharmTrading::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCLockCharmTrading::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCLockCharmTrading::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCLockCharmTrading::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCLockCharmTrading.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCLockCharmTrading::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCLockCharmTrading::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCLockCharmTrading.account_id)
}

// optional uint64 item_id = 2;
inline bool CMsgServerToGCLockCharmTrading::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCLockCharmTrading::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgServerToGCLockCharmTrading::clear_item_id() {
  _impl_.item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCLockCharmTrading::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint64_t CMsgServerToGCLockCharmTrading::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCLockCharmTrading.item_id)
  return _internal_item_id();
}
inline void CMsgServerToGCLockCharmTrading::_internal_set_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_id_ = value;
}
inline void CMsgServerToGCLockCharmTrading::set_item_id(uint64_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCLockCharmTrading.item_id)
}

// -------------------------------------------------------------------

// CMsgSignOutUpdatePlayerChallenge_Challenge

// optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgSignOutUpdatePlayerChallenge_Challenge::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.Challenge.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.Challenge.event_id)
}

// optional uint32 slot_id = 2;
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::slot_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.Challenge.slot_id)
  return _internal_slot_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.Challenge.slot_id)
}

// optional uint32 sequence_id = 3;
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.Challenge.sequence_id)
  return _internal_sequence_id();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_set_sequence_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.Challenge.sequence_id)
}

// optional uint32 progress = 4;
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_progress() const {
  return _internal_has_progress();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_progress() {
  _impl_.progress_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::progress() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.Challenge.progress)
  return _internal_progress();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_set_progress(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.progress_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.Challenge.progress)
}

// optional uint32 challenge_rank = 5;
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_has_challenge_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge_Challenge::has_challenge_rank() const {
  return _internal_has_challenge_rank();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::clear_challenge_rank() {
  _impl_.challenge_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_challenge_rank() const {
  return _impl_.challenge_rank_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge_Challenge::challenge_rank() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.Challenge.challenge_rank)
  return _internal_challenge_rank();
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::_internal_set_challenge_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.challenge_rank_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge_Challenge::set_challenge_rank(uint32_t value) {
  _internal_set_challenge_rank(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.Challenge.challenge_rank)
}

// -------------------------------------------------------------------

// CMsgSignOutUpdatePlayerChallenge

// optional uint32 account_id = 1;
inline bool CMsgSignOutUpdatePlayerChallenge::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.account_id)
}

// repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
inline int CMsgSignOutUpdatePlayerChallenge::_internal_completed_size() const {
  return _impl_.completed_.size();
}
inline int CMsgSignOutUpdatePlayerChallenge::completed_size() const {
  return _internal_completed_size();
}
inline void CMsgSignOutUpdatePlayerChallenge::clear_completed() {
  _impl_.completed_.Clear();
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::mutable_completed(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutUpdatePlayerChallenge.completed)
  return _impl_.completed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >*
CMsgSignOutUpdatePlayerChallenge::mutable_completed() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutUpdatePlayerChallenge.completed)
  return &_impl_.completed_;
}
inline const ::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::_internal_completed(int index) const {
  return _impl_.completed_.Get(index);
}
inline const ::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::completed(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.completed)
  return _internal_completed(index);
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::_internal_add_completed() {
  return _impl_.completed_.Add();
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::add_completed() {
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* _add = _internal_add_completed();
  // @@protoc_insertion_point(field_add:CMsgSignOutUpdatePlayerChallenge.completed)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >&
CMsgSignOutUpdatePlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutUpdatePlayerChallenge.completed)
  return _impl_.completed_;
}

// repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
inline int CMsgSignOutUpdatePlayerChallenge::_internal_rerolled_size() const {
  return _impl_.rerolled_.size();
}
inline int CMsgSignOutUpdatePlayerChallenge::rerolled_size() const {
  return _internal_rerolled_size();
}
inline void CMsgSignOutUpdatePlayerChallenge::clear_rerolled() {
  _impl_.rerolled_.Clear();
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::mutable_rerolled(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutUpdatePlayerChallenge.rerolled)
  return _impl_.rerolled_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >*
CMsgSignOutUpdatePlayerChallenge::mutable_rerolled() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutUpdatePlayerChallenge.rerolled)
  return &_impl_.rerolled_;
}
inline const ::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::_internal_rerolled(int index) const {
  return _impl_.rerolled_.Get(index);
}
inline const ::CMsgSignOutUpdatePlayerChallenge_Challenge& CMsgSignOutUpdatePlayerChallenge::rerolled(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.rerolled)
  return _internal_rerolled(index);
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::_internal_add_rerolled() {
  return _impl_.rerolled_.Add();
}
inline ::CMsgSignOutUpdatePlayerChallenge_Challenge* CMsgSignOutUpdatePlayerChallenge::add_rerolled() {
  ::CMsgSignOutUpdatePlayerChallenge_Challenge* _add = _internal_add_rerolled();
  // @@protoc_insertion_point(field_add:CMsgSignOutUpdatePlayerChallenge.rerolled)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutUpdatePlayerChallenge_Challenge >&
CMsgSignOutUpdatePlayerChallenge::rerolled() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutUpdatePlayerChallenge.rerolled)
  return _impl_.rerolled_;
}

// optional uint64 match_id = 4;
inline bool CMsgSignOutUpdatePlayerChallenge::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSignOutUpdatePlayerChallenge::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSignOutUpdatePlayerChallenge::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.match_id)
  return _internal_match_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.match_id)
}

// optional uint32 hero_id = 5;
inline bool CMsgSignOutUpdatePlayerChallenge::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutUpdatePlayerChallenge::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSignOutUpdatePlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutUpdatePlayerChallenge.hero_id)
  return _internal_hero_id();
}
inline void CMsgSignOutUpdatePlayerChallenge::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgSignOutUpdatePlayerChallenge::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutUpdatePlayerChallenge.hero_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCRerollPlayerChallenge

// optional uint32 account_id = 1;
inline bool CMsgServerToGCRerollPlayerChallenge::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCRerollPlayerChallenge::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCRerollPlayerChallenge::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCRerollPlayerChallenge::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCRerollPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRerollPlayerChallenge.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCRerollPlayerChallenge::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCRerollPlayerChallenge::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCRerollPlayerChallenge.account_id)
}

// optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
inline bool CMsgServerToGCRerollPlayerChallenge::_internal_has_reroll_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reroll_msg_ != nullptr);
  return value;
}
inline bool CMsgServerToGCRerollPlayerChallenge::has_reroll_msg() const {
  return _internal_has_reroll_msg();
}
inline const ::CMsgClientToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::_internal_reroll_msg() const {
  const ::CMsgClientToGCRerollPlayerChallenge* p = _impl_.reroll_msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientToGCRerollPlayerChallenge&>(
      ::_CMsgClientToGCRerollPlayerChallenge_default_instance_);
}
inline const ::CMsgClientToGCRerollPlayerChallenge& CMsgServerToGCRerollPlayerChallenge::reroll_msg() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  return _internal_reroll_msg();
}
inline void CMsgServerToGCRerollPlayerChallenge::unsafe_arena_set_allocated_reroll_msg(
    ::CMsgClientToGCRerollPlayerChallenge* reroll_msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reroll_msg_);
  }
  _impl_.reroll_msg_ = reroll_msg;
  if (reroll_msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCRerollPlayerChallenge.reroll_msg)
}
inline ::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::release_reroll_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgClientToGCRerollPlayerChallenge* temp = _impl_.reroll_msg_;
  _impl_.reroll_msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::unsafe_arena_release_reroll_msg() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgClientToGCRerollPlayerChallenge* temp = _impl_.reroll_msg_;
  _impl_.reroll_msg_ = nullptr;
  return temp;
}
inline ::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::_internal_mutable_reroll_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.reroll_msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientToGCRerollPlayerChallenge>(GetArenaForAllocation());
    _impl_.reroll_msg_ = p;
  }
  return _impl_.reroll_msg_;
}
inline ::CMsgClientToGCRerollPlayerChallenge* CMsgServerToGCRerollPlayerChallenge::mutable_reroll_msg() {
  ::CMsgClientToGCRerollPlayerChallenge* _msg = _internal_mutable_reroll_msg();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCRerollPlayerChallenge.reroll_msg)
  return _msg;
}
inline void CMsgServerToGCRerollPlayerChallenge::set_allocated_reroll_msg(::CMsgClientToGCRerollPlayerChallenge* reroll_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reroll_msg_);
  }
  if (reroll_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reroll_msg));
    if (message_arena != submessage_arena) {
      reroll_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reroll_msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.reroll_msg_ = reroll_msg;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCRerollPlayerChallenge.reroll_msg)
}

// -------------------------------------------------------------------

// CMsgSpendWager_Player

// optional uint32 account_id = 1;
inline bool CMsgSpendWager_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpendWager_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSpendWager_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSpendWager_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSpendWager_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.Player.account_id)
  return _internal_account_id();
}
inline void CMsgSpendWager_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgSpendWager_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.Player.account_id)
}

// optional uint32 wager = 2;
inline bool CMsgSpendWager_Player::_internal_has_wager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpendWager_Player::has_wager() const {
  return _internal_has_wager();
}
inline void CMsgSpendWager_Player::clear_wager() {
  _impl_.wager_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSpendWager_Player::_internal_wager() const {
  return _impl_.wager_;
}
inline uint32_t CMsgSpendWager_Player::wager() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.Player.wager)
  return _internal_wager();
}
inline void CMsgSpendWager_Player::_internal_set_wager(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.wager_ = value;
}
inline void CMsgSpendWager_Player::set_wager(uint32_t value) {
  _internal_set_wager(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.Player.wager)
}

// optional uint64 wager_token_item_id = 3;
inline bool CMsgSpendWager_Player::_internal_has_wager_token_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSpendWager_Player::has_wager_token_item_id() const {
  return _internal_has_wager_token_item_id();
}
inline void CMsgSpendWager_Player::clear_wager_token_item_id() {
  _impl_.wager_token_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSpendWager_Player::_internal_wager_token_item_id() const {
  return _impl_.wager_token_item_id_;
}
inline uint64_t CMsgSpendWager_Player::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.Player.wager_token_item_id)
  return _internal_wager_token_item_id();
}
inline void CMsgSpendWager_Player::_internal_set_wager_token_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.wager_token_item_id_ = value;
}
inline void CMsgSpendWager_Player::set_wager_token_item_id(uint64_t value) {
  _internal_set_wager_token_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.Player.wager_token_item_id)
}

// -------------------------------------------------------------------

// CMsgSpendWager

// repeated .CMsgSpendWager.Player players = 1;
inline int CMsgSpendWager::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgSpendWager::players_size() const {
  return _internal_players_size();
}
inline void CMsgSpendWager::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgSpendWager_Player* CMsgSpendWager::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSpendWager.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpendWager_Player >*
CMsgSpendWager::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSpendWager.players)
  return &_impl_.players_;
}
inline const ::CMsgSpendWager_Player& CMsgSpendWager::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgSpendWager_Player& CMsgSpendWager::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.players)
  return _internal_players(index);
}
inline ::CMsgSpendWager_Player* CMsgSpendWager::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgSpendWager_Player* CMsgSpendWager::add_players() {
  ::CMsgSpendWager_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgSpendWager.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpendWager_Player >&
CMsgSpendWager::players() const {
  // @@protoc_insertion_point(field_list:CMsgSpendWager.players)
  return _impl_.players_;
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgSpendWager::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpendWager::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSpendWager::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CMsgSpendWager::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgSpendWager::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.event_id)
  return _internal_event_id();
}
inline void CMsgSpendWager::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgSpendWager::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.event_id)
}

// optional uint32 timestamp = 3;
inline bool CMsgSpendWager::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpendWager::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgSpendWager::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSpendWager::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgSpendWager::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.timestamp)
  return _internal_timestamp();
}
inline void CMsgSpendWager::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void CMsgSpendWager::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.timestamp)
}

// optional uint64 match_id = 4;
inline bool CMsgSpendWager::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSpendWager::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSpendWager::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSpendWager::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSpendWager::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.match_id)
  return _internal_match_id();
}
inline void CMsgSpendWager::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.match_id_ = value;
}
inline void CMsgSpendWager::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.match_id)
}

// optional uint64 server_steam_id = 5;
inline bool CMsgSpendWager::_internal_has_server_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSpendWager::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgSpendWager::clear_server_steam_id() {
  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgSpendWager::_internal_server_steam_id() const {
  return _impl_.server_steam_id_;
}
inline uint64_t CMsgSpendWager::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpendWager.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgSpendWager::_internal_set_server_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.server_steam_id_ = value;
}
inline void CMsgSpendWager::set_server_steam_id(uint64_t value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpendWager.server_steam_id)
}

// -------------------------------------------------------------------

// CMsgSignOutXPCoins_Player

// optional uint32 account_id = 1;
inline bool CMsgSignOutXPCoins_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutXPCoins_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutXPCoins_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSignOutXPCoins_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.account_id)
}

// optional uint32 xp_gained = 2;
inline bool CMsgSignOutXPCoins_Player::_internal_has_xp_gained() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_xp_gained() const {
  return _internal_has_xp_gained();
}
inline void CMsgSignOutXPCoins_Player::clear_xp_gained() {
  _impl_.xp_gained_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutXPCoins_Player::_internal_xp_gained() const {
  return _impl_.xp_gained_;
}
inline uint32_t CMsgSignOutXPCoins_Player::xp_gained() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.xp_gained)
  return _internal_xp_gained();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_xp_gained(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.xp_gained_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_xp_gained(uint32_t value) {
  _internal_set_xp_gained(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.xp_gained)
}

// optional uint32 coins_spent = 3;
inline bool CMsgSignOutXPCoins_Player::_internal_has_coins_spent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_coins_spent() const {
  return _internal_has_coins_spent();
}
inline void CMsgSignOutXPCoins_Player::clear_coins_spent() {
  _impl_.coins_spent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutXPCoins_Player::_internal_coins_spent() const {
  return _impl_.coins_spent_;
}
inline uint32_t CMsgSignOutXPCoins_Player::coins_spent() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.coins_spent)
  return _internal_coins_spent();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_coins_spent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.coins_spent_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_coins_spent(uint32_t value) {
  _internal_set_coins_spent(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.coins_spent)
}

// optional uint64 wager_token_item_id = 4;
inline bool CMsgSignOutXPCoins_Player::_internal_has_wager_token_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_wager_token_item_id() const {
  return _internal_has_wager_token_item_id();
}
inline void CMsgSignOutXPCoins_Player::clear_wager_token_item_id() {
  _impl_.wager_token_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgSignOutXPCoins_Player::_internal_wager_token_item_id() const {
  return _impl_.wager_token_item_id_;
}
inline uint64_t CMsgSignOutXPCoins_Player::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.wager_token_item_id)
  return _internal_wager_token_item_id();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_wager_token_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.wager_token_item_id_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_wager_token_item_id(uint64_t value) {
  _internal_set_wager_token_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.wager_token_item_id)
}

// optional uint32 rank_wager = 5;
inline bool CMsgSignOutXPCoins_Player::_internal_has_rank_wager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_rank_wager() const {
  return _internal_has_rank_wager();
}
inline void CMsgSignOutXPCoins_Player::clear_rank_wager() {
  _impl_.rank_wager_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutXPCoins_Player::_internal_rank_wager() const {
  return _impl_.rank_wager_;
}
inline uint32_t CMsgSignOutXPCoins_Player::rank_wager() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.rank_wager)
  return _internal_rank_wager();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_rank_wager(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.rank_wager_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_rank_wager(uint32_t value) {
  _internal_set_rank_wager(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.rank_wager)
}

// optional uint32 wager_streak = 6;
inline bool CMsgSignOutXPCoins_Player::_internal_has_wager_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins_Player::has_wager_streak() const {
  return _internal_has_wager_streak();
}
inline void CMsgSignOutXPCoins_Player::clear_wager_streak() {
  _impl_.wager_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSignOutXPCoins_Player::_internal_wager_streak() const {
  return _impl_.wager_streak_;
}
inline uint32_t CMsgSignOutXPCoins_Player::wager_streak() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.Player.wager_streak)
  return _internal_wager_streak();
}
inline void CMsgSignOutXPCoins_Player::_internal_set_wager_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wager_streak_ = value;
}
inline void CMsgSignOutXPCoins_Player::set_wager_streak(uint32_t value) {
  _internal_set_wager_streak(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.Player.wager_streak)
}

// -------------------------------------------------------------------

// CMsgSignOutXPCoins

// repeated .CMsgSignOutXPCoins.Player players = 1;
inline int CMsgSignOutXPCoins::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgSignOutXPCoins::players_size() const {
  return _internal_players_size();
}
inline void CMsgSignOutXPCoins::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutXPCoins.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutXPCoins_Player >*
CMsgSignOutXPCoins::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutXPCoins.players)
  return &_impl_.players_;
}
inline const ::CMsgSignOutXPCoins_Player& CMsgSignOutXPCoins::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgSignOutXPCoins_Player& CMsgSignOutXPCoins::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.players)
  return _internal_players(index);
}
inline ::CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgSignOutXPCoins_Player* CMsgSignOutXPCoins::add_players() {
  ::CMsgSignOutXPCoins_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgSignOutXPCoins.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutXPCoins_Player >&
CMsgSignOutXPCoins::players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutXPCoins.players)
  return _impl_.players_;
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgSignOutXPCoins::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutXPCoins::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CMsgSignOutXPCoins::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgSignOutXPCoins::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutXPCoins::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutXPCoins::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.event_id)
}

// optional uint64 match_id = 3;
inline bool CMsgSignOutXPCoins::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSignOutXPCoins::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSignOutXPCoins::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSignOutXPCoins::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.match_id)
  return _internal_match_id();
}
inline void CMsgSignOutXPCoins::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgSignOutXPCoins::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.match_id)
}

// optional uint32 timestamp = 4;
inline bool CMsgSignOutXPCoins::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutXPCoins::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgSignOutXPCoins::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutXPCoins::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgSignOutXPCoins::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutXPCoins.timestamp)
  return _internal_timestamp();
}
inline void CMsgSignOutXPCoins::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CMsgSignOutXPCoins::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutXPCoins.timestamp)
}

// -------------------------------------------------------------------

// CMsgSignOutBounties_Bounty

// optional uint32 issuer_account_id = 1;
inline bool CMsgSignOutBounties_Bounty::_internal_has_issuer_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutBounties_Bounty::has_issuer_account_id() const {
  return _internal_has_issuer_account_id();
}
inline void CMsgSignOutBounties_Bounty::clear_issuer_account_id() {
  _impl_.issuer_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutBounties_Bounty::_internal_issuer_account_id() const {
  return _impl_.issuer_account_id_;
}
inline uint32_t CMsgSignOutBounties_Bounty::issuer_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.Bounty.issuer_account_id)
  return _internal_issuer_account_id();
}
inline void CMsgSignOutBounties_Bounty::_internal_set_issuer_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.issuer_account_id_ = value;
}
inline void CMsgSignOutBounties_Bounty::set_issuer_account_id(uint32_t value) {
  _internal_set_issuer_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.Bounty.issuer_account_id)
}

// optional uint32 completer_account_id = 2;
inline bool CMsgSignOutBounties_Bounty::_internal_has_completer_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutBounties_Bounty::has_completer_account_id() const {
  return _internal_has_completer_account_id();
}
inline void CMsgSignOutBounties_Bounty::clear_completer_account_id() {
  _impl_.completer_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutBounties_Bounty::_internal_completer_account_id() const {
  return _impl_.completer_account_id_;
}
inline uint32_t CMsgSignOutBounties_Bounty::completer_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.Bounty.completer_account_id)
  return _internal_completer_account_id();
}
inline void CMsgSignOutBounties_Bounty::_internal_set_completer_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.completer_account_id_ = value;
}
inline void CMsgSignOutBounties_Bounty::set_completer_account_id(uint32_t value) {
  _internal_set_completer_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.Bounty.completer_account_id)
}

// optional uint32 target_account_id = 3;
inline bool CMsgSignOutBounties_Bounty::_internal_has_target_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutBounties_Bounty::has_target_account_id() const {
  return _internal_has_target_account_id();
}
inline void CMsgSignOutBounties_Bounty::clear_target_account_id() {
  _impl_.target_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutBounties_Bounty::_internal_target_account_id() const {
  return _impl_.target_account_id_;
}
inline uint32_t CMsgSignOutBounties_Bounty::target_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.Bounty.target_account_id)
  return _internal_target_account_id();
}
inline void CMsgSignOutBounties_Bounty::_internal_set_target_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_account_id_ = value;
}
inline void CMsgSignOutBounties_Bounty::set_target_account_id(uint32_t value) {
  _internal_set_target_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.Bounty.target_account_id)
}

// -------------------------------------------------------------------

// CMsgSignOutBounties

// repeated .CMsgSignOutBounties.Bounty bounties = 1;
inline int CMsgSignOutBounties::_internal_bounties_size() const {
  return _impl_.bounties_.size();
}
inline int CMsgSignOutBounties::bounties_size() const {
  return _internal_bounties_size();
}
inline void CMsgSignOutBounties::clear_bounties() {
  _impl_.bounties_.Clear();
}
inline ::CMsgSignOutBounties_Bounty* CMsgSignOutBounties::mutable_bounties(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutBounties.bounties)
  return _impl_.bounties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutBounties_Bounty >*
CMsgSignOutBounties::mutable_bounties() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutBounties.bounties)
  return &_impl_.bounties_;
}
inline const ::CMsgSignOutBounties_Bounty& CMsgSignOutBounties::_internal_bounties(int index) const {
  return _impl_.bounties_.Get(index);
}
inline const ::CMsgSignOutBounties_Bounty& CMsgSignOutBounties::bounties(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.bounties)
  return _internal_bounties(index);
}
inline ::CMsgSignOutBounties_Bounty* CMsgSignOutBounties::_internal_add_bounties() {
  return _impl_.bounties_.Add();
}
inline ::CMsgSignOutBounties_Bounty* CMsgSignOutBounties::add_bounties() {
  ::CMsgSignOutBounties_Bounty* _add = _internal_add_bounties();
  // @@protoc_insertion_point(field_add:CMsgSignOutBounties.bounties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutBounties_Bounty >&
CMsgSignOutBounties::bounties() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutBounties.bounties)
  return _impl_.bounties_;
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgSignOutBounties::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutBounties::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutBounties::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CMsgSignOutBounties::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgSignOutBounties::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutBounties::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutBounties::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.event_id)
}

// optional uint64 match_id = 3;
inline bool CMsgSignOutBounties::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutBounties::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSignOutBounties::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSignOutBounties::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSignOutBounties::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.match_id)
  return _internal_match_id();
}
inline void CMsgSignOutBounties::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgSignOutBounties::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.match_id)
}

// optional uint32 timestamp = 4;
inline bool CMsgSignOutBounties::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutBounties::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgSignOutBounties::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutBounties::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgSignOutBounties::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutBounties.timestamp)
  return _internal_timestamp();
}
inline void CMsgSignOutBounties::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.timestamp_ = value;
}
inline void CMsgSignOutBounties::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutBounties.timestamp)
}

// -------------------------------------------------------------------

// CMsgSignOutCommunityGoalProgress_EventGoalIncrement

// optional uint32 event_goal_id = 1;
inline bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_has_event_goal_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::has_event_goal_id() const {
  return _internal_has_event_goal_id();
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_event_goal_id() {
  _impl_.event_goal_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_event_goal_id() const {
  return _impl_.event_goal_id_;
}
inline uint32_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::event_goal_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunityGoalProgress.EventGoalIncrement.event_goal_id)
  return _internal_event_goal_id();
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_set_event_goal_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_goal_id_ = value;
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_event_goal_id(uint32_t value) {
  _internal_set_event_goal_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunityGoalProgress.EventGoalIncrement.event_goal_id)
}

// optional uint32 increment_amount = 2;
inline bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_has_increment_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::has_increment_amount() const {
  return _internal_has_increment_amount();
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::clear_increment_amount() {
  _impl_.increment_amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_increment_amount() const {
  return _impl_.increment_amount_;
}
inline uint32_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::increment_amount() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunityGoalProgress.EventGoalIncrement.increment_amount)
  return _internal_increment_amount();
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_internal_set_increment_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.increment_amount_ = value;
}
inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::set_increment_amount(uint32_t value) {
  _internal_set_increment_amount(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunityGoalProgress.EventGoalIncrement.increment_amount)
}

// -------------------------------------------------------------------

// CMsgSignOutCommunityGoalProgress

// optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CMsgSignOutCommunityGoalProgress::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutCommunityGoalProgress::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutCommunityGoalProgress::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CMsgSignOutCommunityGoalProgress::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgSignOutCommunityGoalProgress::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunityGoalProgress.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutCommunityGoalProgress::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutCommunityGoalProgress::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutCommunityGoalProgress.event_id)
}

// repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
inline int CMsgSignOutCommunityGoalProgress::_internal_event_increments_size() const {
  return _impl_.event_increments_.size();
}
inline int CMsgSignOutCommunityGoalProgress::event_increments_size() const {
  return _internal_event_increments_size();
}
inline void CMsgSignOutCommunityGoalProgress::clear_event_increments() {
  _impl_.event_increments_.Clear();
}
inline ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress::mutable_event_increments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutCommunityGoalProgress.event_increments)
  return _impl_.event_increments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >*
CMsgSignOutCommunityGoalProgress::mutable_event_increments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutCommunityGoalProgress.event_increments)
  return &_impl_.event_increments_;
}
inline const ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement& CMsgSignOutCommunityGoalProgress::_internal_event_increments(int index) const {
  return _impl_.event_increments_.Get(index);
}
inline const ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement& CMsgSignOutCommunityGoalProgress::event_increments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutCommunityGoalProgress.event_increments)
  return _internal_event_increments(index);
}
inline ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress::_internal_add_event_increments() {
  return _impl_.event_increments_.Add();
}
inline ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* CMsgSignOutCommunityGoalProgress::add_event_increments() {
  ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement* _add = _internal_add_event_increments();
  // @@protoc_insertion_point(field_add:CMsgSignOutCommunityGoalProgress.event_increments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >&
CMsgSignOutCommunityGoalProgress::event_increments() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutCommunityGoalProgress.event_increments)
  return _impl_.event_increments_;
}

// -------------------------------------------------------------------

// CMsgServerToGCCloseCompendiumInGamePredictionVoting

// optional uint64 match_id = 1;
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCloseCompendiumInGamePredictionVoting.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCloseCompendiumInGamePredictionVoting.match_id)
}

// optional uint32 hltv_delay = 2;
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_has_hltv_delay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::has_hltv_delay() const {
  return _internal_has_hltv_delay();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_hltv_delay() {
  _impl_.hltv_delay_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_hltv_delay() const {
  return _impl_.hltv_delay_;
}
inline uint32_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::hltv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCloseCompendiumInGamePredictionVoting.hltv_delay)
  return _internal_hltv_delay();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_set_hltv_delay(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hltv_delay_ = value;
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_hltv_delay(uint32_t value) {
  _internal_set_hltv_delay(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCloseCompendiumInGamePredictionVoting.hltv_delay)
}

// optional uint32 league_id = 3;
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCloseCompendiumInGamePredictionVoting.league_id)
  return _internal_league_id();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.league_id_ = value;
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCloseCompendiumInGamePredictionVoting.league_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse

// optional bool result = 1;
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::clear_result() {
  _impl_.result_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.result)
  return _internal_result();
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_internal_set_result(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse.result)
}

// -------------------------------------------------------------------

// CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult

// optional uint32 prediction_id = 1;
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_has_prediction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_id() const {
  return _internal_has_prediction_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_id() {
  _impl_.prediction_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_prediction_id() const {
  return _impl_.prediction_id_;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_id)
  return _internal_prediction_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_set_prediction_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prediction_id_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_id(uint32_t value) {
  _internal_set_prediction_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_id)
}

// optional uint32 prediction_value = 2;
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_has_prediction_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_value() const {
  return _internal_has_prediction_value();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_value() {
  _impl_.prediction_value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_prediction_value() const {
  return _impl_.prediction_value_;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_value() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value)
  return _internal_prediction_value();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_set_prediction_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prediction_value_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_value(uint32_t value) {
  _internal_set_prediction_value(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value)
}

// optional bool prediction_value_is_mask = 3;
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_has_prediction_value_is_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::has_prediction_value_is_mask() const {
  return _internal_has_prediction_value_is_mask();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::clear_prediction_value_is_mask() {
  _impl_.prediction_value_is_mask_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_prediction_value_is_mask() const {
  return _impl_.prediction_value_is_mask_;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::prediction_value_is_mask() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value_is_mask)
  return _internal_prediction_value_is_mask();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_internal_set_prediction_value_is_mask(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prediction_value_is_mask_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::set_prediction_value_is_mask(bool value) {
  _internal_set_prediction_value_is_mask(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult.prediction_value_is_mask)
}

// -------------------------------------------------------------------

// CMsgServerToGCCompendiumInGamePredictionResults

// optional uint64 match_id = 1;
inline bool CMsgServerToGCCompendiumInGamePredictionResults::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCCompendiumInGamePredictionResults::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCCompendiumInGamePredictionResults::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.match_id)
}

// repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
inline int CMsgServerToGCCompendiumInGamePredictionResults::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int CMsgServerToGCCompendiumInGamePredictionResults::results_size() const {
  return _internal_results_size();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::clear_results() {
  _impl_.results_.Clear();
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCCompendiumInGamePredictionResults.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >*
CMsgServerToGCCompendiumInGamePredictionResults::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCCompendiumInGamePredictionResults.results)
  return &_impl_.results_;
}
inline const ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& CMsgServerToGCCompendiumInGamePredictionResults::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& CMsgServerToGCCompendiumInGamePredictionResults::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.results)
  return _internal_results(index);
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* CMsgServerToGCCompendiumInGamePredictionResults::add_results() {
  ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:CMsgServerToGCCompendiumInGamePredictionResults.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >&
CMsgServerToGCCompendiumInGamePredictionResults::results() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCCompendiumInGamePredictionResults.results)
  return _impl_.results_;
}

// optional uint32 league_id = 3;
inline bool CMsgServerToGCCompendiumInGamePredictionResults::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.league_id)
  return _internal_league_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.league_id_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.league_id)
}

// optional uint32 league_node_id = 4;
inline bool CMsgServerToGCCompendiumInGamePredictionResults::_internal_has_league_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumInGamePredictionResults::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::clear_league_node_id() {
  _impl_.league_node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults::_internal_league_node_id() const {
  return _impl_.league_node_id_;
}
inline uint32_t CMsgServerToGCCompendiumInGamePredictionResults::league_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumInGamePredictionResults.league_node_id)
  return _internal_league_node_id();
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::_internal_set_league_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.league_node_id_ = value;
}
inline void CMsgServerToGCCompendiumInGamePredictionResults::set_league_node_id(uint32_t value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumInGamePredictionResults.league_node_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCCompendiumChosenInGamePredictions_Prediction

// optional uint32 prediction_id = 1;
inline bool CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_internal_has_prediction_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::has_prediction_id() const {
  return _internal_has_prediction_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::clear_prediction_id() {
  _impl_.prediction_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_internal_prediction_id() const {
  return _impl_.prediction_id_;
}
inline uint32_t CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::prediction_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction.prediction_id)
  return _internal_prediction_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_internal_set_prediction_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prediction_id_ = value;
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::set_prediction_id(uint32_t value) {
  _internal_set_prediction_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction.prediction_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCCompendiumChosenInGamePredictions

// optional uint64 match_id = 1;
inline bool CMsgServerToGCCompendiumChosenInGamePredictions::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumChosenInGamePredictions::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCCompendiumChosenInGamePredictions::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCCompendiumChosenInGamePredictions::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumChosenInGamePredictions.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumChosenInGamePredictions.match_id)
}

// repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
inline int CMsgServerToGCCompendiumChosenInGamePredictions::_internal_predictions_chosen_size() const {
  return _impl_.predictions_chosen_.size();
}
inline int CMsgServerToGCCompendiumChosenInGamePredictions::predictions_chosen_size() const {
  return _internal_predictions_chosen_size();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::clear_predictions_chosen() {
  _impl_.predictions_chosen_.Clear();
}
inline ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* CMsgServerToGCCompendiumChosenInGamePredictions::mutable_predictions_chosen(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen)
  return _impl_.predictions_chosen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >*
CMsgServerToGCCompendiumChosenInGamePredictions::mutable_predictions_chosen() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen)
  return &_impl_.predictions_chosen_;
}
inline const ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& CMsgServerToGCCompendiumChosenInGamePredictions::_internal_predictions_chosen(int index) const {
  return _impl_.predictions_chosen_.Get(index);
}
inline const ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& CMsgServerToGCCompendiumChosenInGamePredictions::predictions_chosen(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen)
  return _internal_predictions_chosen(index);
}
inline ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* CMsgServerToGCCompendiumChosenInGamePredictions::_internal_add_predictions_chosen() {
  return _impl_.predictions_chosen_.Add();
}
inline ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* CMsgServerToGCCompendiumChosenInGamePredictions::add_predictions_chosen() {
  ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* _add = _internal_add_predictions_chosen();
  // @@protoc_insertion_point(field_add:CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >&
CMsgServerToGCCompendiumChosenInGamePredictions::predictions_chosen() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCCompendiumChosenInGamePredictions.predictions_chosen)
  return _impl_.predictions_chosen_;
}

// optional uint32 league_id = 3;
inline bool CMsgServerToGCCompendiumChosenInGamePredictions::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCompendiumChosenInGamePredictions::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCompendiumChosenInGamePredictions::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgServerToGCCompendiumChosenInGamePredictions::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCompendiumChosenInGamePredictions.league_id)
  return _internal_league_id();
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.league_id_ = value;
}
inline void CMsgServerToGCCompendiumChosenInGamePredictions::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCompendiumChosenInGamePredictions.league_id)
}

// -------------------------------------------------------------------

// CMsgGCToGCCompendiumInGamePredictionResults

// optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
inline bool CMsgGCToGCCompendiumInGamePredictionResults::_internal_has_results() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.results_ != nullptr);
  return value;
}
inline bool CMsgGCToGCCompendiumInGamePredictionResults::has_results() const {
  return _internal_has_results();
}
inline void CMsgGCToGCCompendiumInGamePredictionResults::clear_results() {
  if (_impl_.results_ != nullptr) _impl_.results_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgServerToGCCompendiumInGamePredictionResults& CMsgGCToGCCompendiumInGamePredictionResults::_internal_results() const {
  const ::CMsgServerToGCCompendiumInGamePredictionResults* p = _impl_.results_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgServerToGCCompendiumInGamePredictionResults&>(
      ::_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_);
}
inline const ::CMsgServerToGCCompendiumInGamePredictionResults& CMsgGCToGCCompendiumInGamePredictionResults::results() const {
  // @@protoc_insertion_point(field_get:CMsgGCToGCCompendiumInGamePredictionResults.results)
  return _internal_results();
}
inline void CMsgGCToGCCompendiumInGamePredictionResults::unsafe_arena_set_allocated_results(
    ::CMsgServerToGCCompendiumInGamePredictionResults* results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.results_);
  }
  _impl_.results_ = results;
  if (results) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCToGCCompendiumInGamePredictionResults.results)
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::release_results() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCCompendiumInGamePredictionResults* temp = _impl_.results_;
  _impl_.results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:CMsgGCToGCCompendiumInGamePredictionResults.results)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCCompendiumInGamePredictionResults* temp = _impl_.results_;
  _impl_.results_ = nullptr;
  return temp;
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::_internal_mutable_results() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.results_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgServerToGCCompendiumInGamePredictionResults>(GetArenaForAllocation());
    _impl_.results_ = p;
  }
  return _impl_.results_;
}
inline ::CMsgServerToGCCompendiumInGamePredictionResults* CMsgGCToGCCompendiumInGamePredictionResults::mutable_results() {
  ::CMsgServerToGCCompendiumInGamePredictionResults* _msg = _internal_mutable_results();
  // @@protoc_insertion_point(field_mutable:CMsgGCToGCCompendiumInGamePredictionResults.results)
  return _msg;
}
inline void CMsgGCToGCCompendiumInGamePredictionResults::set_allocated_results(::CMsgServerToGCCompendiumInGamePredictionResults* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.results_;
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(results);
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.results_ = results;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToGCCompendiumInGamePredictionResults.results)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase

// optional int32 item = 1 [default = -1];
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_item() const {
  return _internal_has_item();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_item() {
  _impl_.item_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_item() const {
  return _impl_.item_;
}
inline int32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::item() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.item)
  return _internal_item();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_set_item(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.item_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_item(int32_t value) {
  _internal_set_item(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.item)
}

// optional uint32 gold = 2;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::gold() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.gold)
  return _internal_gold();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gold_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.gold)
}

// optional uint32 net_worth = 3;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.net_worth)
  return _internal_net_worth();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.net_worth_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.net_worth)
}

// optional uint32 game_time = 4;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_game_time() {
  _impl_.game_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_game_time() const {
  return _impl_.game_time_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.game_time)
  return _internal_game_time();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_set_game_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_time_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_game_time(uint32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.game_time)
}

// repeated int32 inventory_items = 5;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_inventory_items_size() const {
  return _impl_.inventory_items_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::inventory_items_size() const {
  return _internal_inventory_items_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_inventory_items() {
  _impl_.inventory_items_.Clear();
}
inline int32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_inventory_items(int index) const {
  return _impl_.inventory_items_.Get(index);
}
inline int32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::inventory_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.inventory_items)
  return _internal_inventory_items(index);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_inventory_items(int index, int32_t value) {
  _impl_.inventory_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.inventory_items)
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_add_inventory_items(int32_t value) {
  _impl_.inventory_items_.Add(value);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::add_inventory_items(int32_t value) {
  _internal_add_inventory_items(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.inventory_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_inventory_items() const {
  return _impl_.inventory_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::inventory_items() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.inventory_items)
  return _internal_inventory_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_mutable_inventory_items() {
  return &_impl_.inventory_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::mutable_inventory_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.inventory_items)
  return _internal_mutable_inventory_items();
}

// repeated bool talents_skilled = 7;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_talents_skilled_size() const {
  return _impl_.talents_skilled_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::talents_skilled_size() const {
  return _internal_talents_skilled_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::clear_talents_skilled() {
  _impl_.talents_skilled_.Clear();
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_talents_skilled(int index) const {
  return _impl_.talents_skilled_.Get(index);
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::talents_skilled(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.talents_skilled)
  return _internal_talents_skilled(index);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::set_talents_skilled(int index, bool value) {
  _impl_.talents_skilled_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.talents_skilled)
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_add_talents_skilled(bool value) {
  _impl_.talents_skilled_.Add(value);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::add_talents_skilled(bool value) {
  _internal_add_talents_skilled(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.talents_skilled)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_talents_skilled() const {
  return _impl_.talents_skilled_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::talents_skilled() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.talents_skilled)
  return _internal_talents_skilled();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_internal_mutable_talents_skilled() {
  return &_impl_.talents_skilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::mutable_talents_skilled() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase.talents_skilled)
  return _internal_mutable_talents_skilled();
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerItemPurchaseHistory_Player

// optional uint32 player_slot = 1;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_slot_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.player_slot)
}

// optional uint32 account_id = 2;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.account_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.hero_id)
}

// repeated uint32 allied_hero_ids = 4;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 5;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_item_purchases_size() const {
  return _impl_.item_purchases_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases_size() const {
  return _internal_item_purchases_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_item_purchases() {
  _impl_.item_purchases_.Clear();
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_item_purchases(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return _impl_.item_purchases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >*
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return &_impl_.item_purchases_;
}
inline const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_item_purchases(int index) const {
  return _impl_.item_purchases_.Get(index);
}
inline const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return _internal_item_purchases(index);
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_add_item_purchases() {
  return _impl_.item_purchases_.Add();
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::add_item_purchases() {
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* _add = _internal_add_item_purchases();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >&
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::item_purchases() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.item_purchases)
  return _impl_.item_purchases_;
}

// optional uint32 lane = 7;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::lane() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.lane)
  return _internal_lane();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.lane_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.lane)
}

// optional bool is_winner = 8;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_has_is_winner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::has_is_winner() const {
  return _internal_has_is_winner();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::clear_is_winner() {
  _impl_.is_winner_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_is_winner() const {
  return _impl_.is_winner_;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::is_winner() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.is_winner)
  return _internal_is_winner();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_internal_set_is_winner(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_winner_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::set_is_winner(bool value) {
  _internal_set_is_winner(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player.is_winner)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerItemPurchaseHistory

// optional uint64 match_id = 1;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCMatchPlayerItemPurchaseHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.match_id)
}

// optional uint32 mmr = 2;
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerItemPurchaseHistory::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgServerToGCMatchPlayerItemPurchaseHistory::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.mmr)
  return _internal_mmr();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mmr_ = value;
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerItemPurchaseHistory.mmr)
}

// repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgServerToGCMatchPlayerItemPurchaseHistory::players_size() const {
  return _internal_players_size();
}
inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >*
CMsgServerToGCMatchPlayerItemPurchaseHistory::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return &_impl_.players_;
}
inline const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& CMsgServerToGCMatchPlayerItemPurchaseHistory::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return _internal_players(index);
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* CMsgServerToGCMatchPlayerItemPurchaseHistory::add_players() {
  ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >&
CMsgServerToGCMatchPlayerItemPurchaseHistory::players() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerItemPurchaseHistory.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip

// optional int32 item = 1 [default = -1];
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_has_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::has_item() const {
  return _internal_has_item();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::clear_item() {
  _impl_.item_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_item() const {
  return _impl_.item_;
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::item() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.item)
  return _internal_item();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_set_item(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_ = value;
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::set_item(int32_t value) {
  _internal_set_item(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.item)
}

// optional uint32 game_time = 2;
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::clear_game_time() {
  _impl_.game_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_game_time() const {
  return _impl_.game_time_;
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.game_time)
  return _internal_game_time();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_set_game_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_time_ = value;
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::set_game_time(uint32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.game_time)
}

// repeated int32 inventory_items = 3;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_inventory_items_size() const {
  return _impl_.inventory_items_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::inventory_items_size() const {
  return _internal_inventory_items_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::clear_inventory_items() {
  _impl_.inventory_items_.Clear();
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_inventory_items(int index) const {
  return _impl_.inventory_items_.Get(index);
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::inventory_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.inventory_items)
  return _internal_inventory_items(index);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::set_inventory_items(int index, int32_t value) {
  _impl_.inventory_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.inventory_items)
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_add_inventory_items(int32_t value) {
  _impl_.inventory_items_.Add(value);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::add_inventory_items(int32_t value) {
  _internal_add_inventory_items(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.inventory_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_inventory_items() const {
  return _impl_.inventory_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::inventory_items() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.inventory_items)
  return _internal_inventory_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_mutable_inventory_items() {
  return &_impl_.inventory_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::mutable_inventory_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.inventory_items)
  return _internal_mutable_inventory_items();
}

// repeated bool talents_skilled = 4;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_talents_skilled_size() const {
  return _impl_.talents_skilled_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::talents_skilled_size() const {
  return _internal_talents_skilled_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::clear_talents_skilled() {
  _impl_.talents_skilled_.Clear();
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_talents_skilled(int index) const {
  return _impl_.talents_skilled_.Get(index);
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::talents_skilled(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.talents_skilled)
  return _internal_talents_skilled(index);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::set_talents_skilled(int index, bool value) {
  _impl_.talents_skilled_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.talents_skilled)
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_add_talents_skilled(bool value) {
  _impl_.talents_skilled_.Add(value);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::add_talents_skilled(bool value) {
  _internal_add_talents_skilled(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.talents_skilled)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_talents_skilled() const {
  return _impl_.talents_skilled_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::talents_skilled() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.talents_skilled)
  return _internal_talents_skilled();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_mutable_talents_skilled() {
  return &_impl_.talents_skilled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::mutable_talents_skilled() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.talents_skilled)
  return _internal_mutable_talents_skilled();
}

// repeated int32 available_neutral_items = 5;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_available_neutral_items_size() const {
  return _impl_.available_neutral_items_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::available_neutral_items_size() const {
  return _internal_available_neutral_items_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::clear_available_neutral_items() {
  _impl_.available_neutral_items_.Clear();
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_available_neutral_items(int index) const {
  return _impl_.available_neutral_items_.Get(index);
}
inline int32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::available_neutral_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.available_neutral_items)
  return _internal_available_neutral_items(index);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::set_available_neutral_items(int index, int32_t value) {
  _impl_.available_neutral_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.available_neutral_items)
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_add_available_neutral_items(int32_t value) {
  _impl_.available_neutral_items_.Add(value);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::add_available_neutral_items(int32_t value) {
  _internal_add_available_neutral_items(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.available_neutral_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_available_neutral_items() const {
  return _impl_.available_neutral_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::available_neutral_items() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.available_neutral_items)
  return _internal_available_neutral_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_internal_mutable_available_neutral_items() {
  return &_impl_.available_neutral_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::mutable_available_neutral_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip.available_neutral_items)
  return _internal_mutable_available_neutral_items();
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player

// optional uint32 account_id = 1;
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.account_id)
}

// repeated uint32 allied_hero_ids = 2;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.allied_hero_ids)
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 3;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.enemy_hero_ids)
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_item_equips_size() const {
  return _impl_.item_equips_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::item_equips_size() const {
  return _internal_item_equips_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::clear_item_equips() {
  _impl_.item_equips_.Clear();
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::mutable_item_equips(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips)
  return _impl_.item_equips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::mutable_item_equips() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips)
  return &_impl_.item_equips_;
}
inline const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_item_equips(int index) const {
  return _impl_.item_equips_.Get(index);
}
inline const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::item_equips(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips)
  return _internal_item_equips(index);
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_add_item_equips() {
  return _impl_.item_equips_.Add();
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::add_item_equips() {
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* _add = _internal_add_item_equips();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::item_equips() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.item_equips)
  return _impl_.item_equips_;
}

// optional bool is_winner = 5;
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_has_is_winner() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::has_is_winner() const {
  return _internal_has_is_winner();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::clear_is_winner() {
  _impl_.is_winner_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_is_winner() const {
  return _impl_.is_winner_;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::is_winner() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.is_winner)
  return _internal_is_winner();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_internal_set_is_winner(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_winner_ = value;
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::set_is_winner(bool value) {
  _internal_set_is_winner(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player.is_winner)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchPlayerNeutralItemEquipHistory

// optional uint64 match_id = 1;
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.match_id)
}

// repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgServerToGCMatchPlayerNeutralItemEquipHistory::players_size() const {
  return _internal_players_size();
}
inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >*
CMsgServerToGCMatchPlayerNeutralItemEquipHistory::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players)
  return &_impl_.players_;
}
inline const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& CMsgServerToGCMatchPlayerNeutralItemEquipHistory::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players)
  return _internal_players(index);
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::add_players() {
  ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >&
CMsgServerToGCMatchPlayerNeutralItemEquipHistory::players() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchStateHistory_PlayerState

// optional uint32 hero_id = 1;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.hero_id)
  return _internal_hero_id();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.hero_id)
}

// optional uint32 net_worth = 2;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.net_worth)
  return _internal_net_worth();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.net_worth_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.net_worth)
}

// optional uint32 level = 3;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_level() const {
  return _internal_has_level();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::level() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.level)
  return _internal_level();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.level)
}

// optional uint32 deaths = 4;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.deaths)
  return _internal_deaths();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deaths_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.deaths)
}

// optional uint32 respawn_time = 5;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_respawn_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_respawn_time() const {
  return _internal_has_respawn_time();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_respawn_time() {
  _impl_.respawn_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_respawn_time() const {
  return _impl_.respawn_time_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.respawn_time)
  return _internal_respawn_time();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_respawn_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.respawn_time_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_respawn_time(uint32_t value) {
  _internal_set_respawn_time(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.respawn_time)
}

// optional bool has_buyback = 6;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_has_buyback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_has_buyback() const {
  return _internal_has_has_buyback();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_has_buyback() {
  _impl_.has_buyback_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_buyback() const {
  return _impl_.has_buyback_;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.has_buyback)
  return _internal_has_buyback();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_has_buyback(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.has_buyback_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_has_buyback(bool value) {
  _internal_set_has_buyback(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.has_buyback)
}

// optional bool has_aegis = 7;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_has_aegis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_has_aegis() const {
  return _internal_has_has_aegis();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_has_aegis() {
  _impl_.has_aegis_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_aegis() const {
  return _impl_.has_aegis_;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_aegis() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.has_aegis)
  return _internal_has_aegis();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_has_aegis(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.has_aegis_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_has_aegis(bool value) {
  _internal_set_has_aegis(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.has_aegis)
}

// optional bool has_rapier = 8;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_has_rapier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_has_rapier() const {
  return _internal_has_has_rapier();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_has_rapier() {
  _impl_.has_rapier_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_rapier() const {
  return _impl_.has_rapier_;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_rapier() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.has_rapier)
  return _internal_has_rapier();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_has_rapier(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.has_rapier_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_has_rapier(bool value) {
  _internal_set_has_rapier(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.has_rapier)
}

// optional uint32 distance = 9;
inline bool CMsgServerToGCMatchStateHistory_PlayerState::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_PlayerState::has_distance() const {
  return _internal_has_distance();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::clear_distance() {
  _impl_.distance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_PlayerState::distance() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.PlayerState.distance)
  return _internal_distance();
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::_internal_set_distance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.distance_ = value;
}
inline void CMsgServerToGCMatchStateHistory_PlayerState::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.PlayerState.distance)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchStateHistory_TeamState

// optional uint32 team = 1;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_team() const {
  return _internal_has_team();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::team() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.team)
  return _internal_team();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.team)
}

// repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
inline int CMsgServerToGCMatchStateHistory_TeamState::_internal_player_states_size() const {
  return _impl_.player_states_.size();
}
inline int CMsgServerToGCMatchStateHistory_TeamState::player_states_size() const {
  return _internal_player_states_size();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_player_states() {
  _impl_.player_states_.Clear();
}
inline ::CMsgServerToGCMatchStateHistory_PlayerState* CMsgServerToGCMatchStateHistory_TeamState::mutable_player_states(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchStateHistory.TeamState.player_states)
  return _impl_.player_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_PlayerState >*
CMsgServerToGCMatchStateHistory_TeamState::mutable_player_states() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchStateHistory.TeamState.player_states)
  return &_impl_.player_states_;
}
inline const ::CMsgServerToGCMatchStateHistory_PlayerState& CMsgServerToGCMatchStateHistory_TeamState::_internal_player_states(int index) const {
  return _impl_.player_states_.Get(index);
}
inline const ::CMsgServerToGCMatchStateHistory_PlayerState& CMsgServerToGCMatchStateHistory_TeamState::player_states(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.player_states)
  return _internal_player_states(index);
}
inline ::CMsgServerToGCMatchStateHistory_PlayerState* CMsgServerToGCMatchStateHistory_TeamState::_internal_add_player_states() {
  return _impl_.player_states_.Add();
}
inline ::CMsgServerToGCMatchStateHistory_PlayerState* CMsgServerToGCMatchStateHistory_TeamState::add_player_states() {
  ::CMsgServerToGCMatchStateHistory_PlayerState* _add = _internal_add_player_states();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchStateHistory.TeamState.player_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_PlayerState >&
CMsgServerToGCMatchStateHistory_TeamState::player_states() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchStateHistory.TeamState.player_states)
  return _impl_.player_states_;
}

// repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
inline int CMsgServerToGCMatchStateHistory_TeamState::_internal_tower_health_pct_size() const {
  return _impl_.tower_health_pct_.size();
}
inline int CMsgServerToGCMatchStateHistory_TeamState::tower_health_pct_size() const {
  return _internal_tower_health_pct_size();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_tower_health_pct() {
  _impl_.tower_health_pct_.Clear();
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_tower_health_pct(int index) const {
  return _impl_.tower_health_pct_.Get(index);
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::tower_health_pct(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.tower_health_pct)
  return _internal_tower_health_pct(index);
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_tower_health_pct(int index, uint32_t value) {
  _impl_.tower_health_pct_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.tower_health_pct)
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_add_tower_health_pct(uint32_t value) {
  _impl_.tower_health_pct_.Add(value);
}
inline void CMsgServerToGCMatchStateHistory_TeamState::add_tower_health_pct(uint32_t value) {
  _internal_add_tower_health_pct(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchStateHistory.TeamState.tower_health_pct)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchStateHistory_TeamState::_internal_tower_health_pct() const {
  return _impl_.tower_health_pct_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchStateHistory_TeamState::tower_health_pct() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchStateHistory.TeamState.tower_health_pct)
  return _internal_tower_health_pct();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchStateHistory_TeamState::_internal_mutable_tower_health_pct() {
  return &_impl_.tower_health_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchStateHistory_TeamState::mutable_tower_health_pct() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchStateHistory.TeamState.tower_health_pct)
  return _internal_mutable_tower_health_pct();
}

// repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
inline int CMsgServerToGCMatchStateHistory_TeamState::_internal_barracks_health_pct_size() const {
  return _impl_.barracks_health_pct_.size();
}
inline int CMsgServerToGCMatchStateHistory_TeamState::barracks_health_pct_size() const {
  return _internal_barracks_health_pct_size();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_barracks_health_pct() {
  _impl_.barracks_health_pct_.Clear();
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_barracks_health_pct(int index) const {
  return _impl_.barracks_health_pct_.Get(index);
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::barracks_health_pct(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.barracks_health_pct)
  return _internal_barracks_health_pct(index);
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_barracks_health_pct(int index, uint32_t value) {
  _impl_.barracks_health_pct_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.barracks_health_pct)
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_add_barracks_health_pct(uint32_t value) {
  _impl_.barracks_health_pct_.Add(value);
}
inline void CMsgServerToGCMatchStateHistory_TeamState::add_barracks_health_pct(uint32_t value) {
  _internal_add_barracks_health_pct(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchStateHistory.TeamState.barracks_health_pct)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchStateHistory_TeamState::_internal_barracks_health_pct() const {
  return _impl_.barracks_health_pct_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCMatchStateHistory_TeamState::barracks_health_pct() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchStateHistory.TeamState.barracks_health_pct)
  return _internal_barracks_health_pct();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchStateHistory_TeamState::_internal_mutable_barracks_health_pct() {
  return &_impl_.barracks_health_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCMatchStateHistory_TeamState::mutable_barracks_health_pct() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchStateHistory.TeamState.barracks_health_pct)
  return _internal_mutable_barracks_health_pct();
}

// optional uint32 ancient_health_pct = 5;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_ancient_health_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_ancient_health_pct() const {
  return _internal_has_ancient_health_pct();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_ancient_health_pct() {
  _impl_.ancient_health_pct_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_ancient_health_pct() const {
  return _impl_.ancient_health_pct_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::ancient_health_pct() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.ancient_health_pct)
  return _internal_ancient_health_pct();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_ancient_health_pct(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ancient_health_pct_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_ancient_health_pct(uint32_t value) {
  _internal_set_ancient_health_pct(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.ancient_health_pct)
}

// optional uint32 glyph_cooldown = 6;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_glyph_cooldown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_glyph_cooldown() const {
  return _internal_has_glyph_cooldown();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_glyph_cooldown() {
  _impl_.glyph_cooldown_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_glyph_cooldown() const {
  return _impl_.glyph_cooldown_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::glyph_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.glyph_cooldown)
  return _internal_glyph_cooldown();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_glyph_cooldown(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.glyph_cooldown_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_glyph_cooldown(uint32_t value) {
  _internal_set_glyph_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.glyph_cooldown)
}

// optional uint32 kills = 7;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::kills() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.kills)
  return _internal_kills();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kills_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.kills)
}

// optional uint32 creep_distance_safe = 8;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_creep_distance_safe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_creep_distance_safe() const {
  return _internal_has_creep_distance_safe();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_creep_distance_safe() {
  _impl_.creep_distance_safe_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_creep_distance_safe() const {
  return _impl_.creep_distance_safe_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::creep_distance_safe() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_safe)
  return _internal_creep_distance_safe();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_creep_distance_safe(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.creep_distance_safe_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_creep_distance_safe(uint32_t value) {
  _internal_set_creep_distance_safe(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_safe)
}

// optional uint32 creep_distance_mid = 9;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_creep_distance_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_creep_distance_mid() const {
  return _internal_has_creep_distance_mid();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_creep_distance_mid() {
  _impl_.creep_distance_mid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_creep_distance_mid() const {
  return _impl_.creep_distance_mid_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::creep_distance_mid() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_mid)
  return _internal_creep_distance_mid();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_creep_distance_mid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.creep_distance_mid_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_creep_distance_mid(uint32_t value) {
  _internal_set_creep_distance_mid(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_mid)
}

// optional uint32 creep_distance_off = 10;
inline bool CMsgServerToGCMatchStateHistory_TeamState::_internal_has_creep_distance_off() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_TeamState::has_creep_distance_off() const {
  return _internal_has_creep_distance_off();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::clear_creep_distance_off() {
  _impl_.creep_distance_off_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::_internal_creep_distance_off() const {
  return _impl_.creep_distance_off_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_TeamState::creep_distance_off() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_off)
  return _internal_creep_distance_off();
}
inline void CMsgServerToGCMatchStateHistory_TeamState::_internal_set_creep_distance_off(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.creep_distance_off_ = value;
}
inline void CMsgServerToGCMatchStateHistory_TeamState::set_creep_distance_off(uint32_t value) {
  _internal_set_creep_distance_off(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.TeamState.creep_distance_off)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchStateHistory_MatchState

// optional uint32 game_time = 1;
inline bool CMsgServerToGCMatchStateHistory_MatchState::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_MatchState::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::clear_game_time() {
  _impl_.game_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchStateHistory_MatchState::_internal_game_time() const {
  return _impl_.game_time_;
}
inline uint32_t CMsgServerToGCMatchStateHistory_MatchState::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.MatchState.game_time)
  return _internal_game_time();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::_internal_set_game_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_time_ = value;
}
inline void CMsgServerToGCMatchStateHistory_MatchState::set_game_time(uint32_t value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.MatchState.game_time)
}

// optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
inline bool CMsgServerToGCMatchStateHistory_MatchState::_internal_has_radiant_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radiant_state_ != nullptr);
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_MatchState::has_radiant_state() const {
  return _internal_has_radiant_state();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::clear_radiant_state() {
  if (_impl_.radiant_state_ != nullptr) _impl_.radiant_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgServerToGCMatchStateHistory_TeamState& CMsgServerToGCMatchStateHistory_MatchState::_internal_radiant_state() const {
  const ::CMsgServerToGCMatchStateHistory_TeamState* p = _impl_.radiant_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgServerToGCMatchStateHistory_TeamState&>(
      ::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_);
}
inline const ::CMsgServerToGCMatchStateHistory_TeamState& CMsgServerToGCMatchStateHistory_MatchState::radiant_state() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.MatchState.radiant_state)
  return _internal_radiant_state();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::unsafe_arena_set_allocated_radiant_state(
    ::CMsgServerToGCMatchStateHistory_TeamState* radiant_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radiant_state_);
  }
  _impl_.radiant_state_ = radiant_state;
  if (radiant_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCMatchStateHistory.MatchState.radiant_state)
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::release_radiant_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCMatchStateHistory_TeamState* temp = _impl_.radiant_state_;
  _impl_.radiant_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::unsafe_arena_release_radiant_state() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCMatchStateHistory.MatchState.radiant_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCMatchStateHistory_TeamState* temp = _impl_.radiant_state_;
  _impl_.radiant_state_ = nullptr;
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::_internal_mutable_radiant_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.radiant_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_TeamState>(GetArenaForAllocation());
    _impl_.radiant_state_ = p;
  }
  return _impl_.radiant_state_;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::mutable_radiant_state() {
  ::CMsgServerToGCMatchStateHistory_TeamState* _msg = _internal_mutable_radiant_state();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchStateHistory.MatchState.radiant_state)
  return _msg;
}
inline void CMsgServerToGCMatchStateHistory_MatchState::set_allocated_radiant_state(::CMsgServerToGCMatchStateHistory_TeamState* radiant_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.radiant_state_;
  }
  if (radiant_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(radiant_state);
    if (message_arena != submessage_arena) {
      radiant_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiant_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.radiant_state_ = radiant_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCMatchStateHistory.MatchState.radiant_state)
}

// optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
inline bool CMsgServerToGCMatchStateHistory_MatchState::_internal_has_dire_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dire_state_ != nullptr);
  return value;
}
inline bool CMsgServerToGCMatchStateHistory_MatchState::has_dire_state() const {
  return _internal_has_dire_state();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::clear_dire_state() {
  if (_impl_.dire_state_ != nullptr) _impl_.dire_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgServerToGCMatchStateHistory_TeamState& CMsgServerToGCMatchStateHistory_MatchState::_internal_dire_state() const {
  const ::CMsgServerToGCMatchStateHistory_TeamState* p = _impl_.dire_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgServerToGCMatchStateHistory_TeamState&>(
      ::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_);
}
inline const ::CMsgServerToGCMatchStateHistory_TeamState& CMsgServerToGCMatchStateHistory_MatchState::dire_state() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.MatchState.dire_state)
  return _internal_dire_state();
}
inline void CMsgServerToGCMatchStateHistory_MatchState::unsafe_arena_set_allocated_dire_state(
    ::CMsgServerToGCMatchStateHistory_TeamState* dire_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dire_state_);
  }
  _impl_.dire_state_ = dire_state;
  if (dire_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCMatchStateHistory.MatchState.dire_state)
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::release_dire_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgServerToGCMatchStateHistory_TeamState* temp = _impl_.dire_state_;
  _impl_.dire_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::unsafe_arena_release_dire_state() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCMatchStateHistory.MatchState.dire_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgServerToGCMatchStateHistory_TeamState* temp = _impl_.dire_state_;
  _impl_.dire_state_ = nullptr;
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::_internal_mutable_dire_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dire_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_TeamState>(GetArenaForAllocation());
    _impl_.dire_state_ = p;
  }
  return _impl_.dire_state_;
}
inline ::CMsgServerToGCMatchStateHistory_TeamState* CMsgServerToGCMatchStateHistory_MatchState::mutable_dire_state() {
  ::CMsgServerToGCMatchStateHistory_TeamState* _msg = _internal_mutable_dire_state();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchStateHistory.MatchState.dire_state)
  return _msg;
}
inline void CMsgServerToGCMatchStateHistory_MatchState::set_allocated_dire_state(::CMsgServerToGCMatchStateHistory_TeamState* dire_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dire_state_;
  }
  if (dire_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dire_state);
    if (message_arena != submessage_arena) {
      dire_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dire_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dire_state_ = dire_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCMatchStateHistory.MatchState.dire_state)
}

// -------------------------------------------------------------------

// CMsgServerToGCMatchStateHistory

// optional uint64 match_id = 1;
inline bool CMsgServerToGCMatchStateHistory::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCMatchStateHistory::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCMatchStateHistory::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCMatchStateHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCMatchStateHistory::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCMatchStateHistory::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.match_id)
}

// optional bool radiant_won = 2;
inline bool CMsgServerToGCMatchStateHistory::_internal_has_radiant_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory::has_radiant_won() const {
  return _internal_has_radiant_won();
}
inline void CMsgServerToGCMatchStateHistory::clear_radiant_won() {
  _impl_.radiant_won_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgServerToGCMatchStateHistory::_internal_radiant_won() const {
  return _impl_.radiant_won_;
}
inline bool CMsgServerToGCMatchStateHistory::radiant_won() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.radiant_won)
  return _internal_radiant_won();
}
inline void CMsgServerToGCMatchStateHistory::_internal_set_radiant_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.radiant_won_ = value;
}
inline void CMsgServerToGCMatchStateHistory::set_radiant_won(bool value) {
  _internal_set_radiant_won(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.radiant_won)
}

// optional uint32 mmr = 3;
inline bool CMsgServerToGCMatchStateHistory::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCMatchStateHistory::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgServerToGCMatchStateHistory::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCMatchStateHistory::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgServerToGCMatchStateHistory::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.mmr)
  return _internal_mmr();
}
inline void CMsgServerToGCMatchStateHistory::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.mmr_ = value;
}
inline void CMsgServerToGCMatchStateHistory::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCMatchStateHistory.mmr)
}

// repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
inline int CMsgServerToGCMatchStateHistory::_internal_match_states_size() const {
  return _impl_.match_states_.size();
}
inline int CMsgServerToGCMatchStateHistory::match_states_size() const {
  return _internal_match_states_size();
}
inline void CMsgServerToGCMatchStateHistory::clear_match_states() {
  _impl_.match_states_.Clear();
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgServerToGCMatchStateHistory::mutable_match_states(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCMatchStateHistory.match_states)
  return _impl_.match_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_MatchState >*
CMsgServerToGCMatchStateHistory::mutable_match_states() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCMatchStateHistory.match_states)
  return &_impl_.match_states_;
}
inline const ::CMsgServerToGCMatchStateHistory_MatchState& CMsgServerToGCMatchStateHistory::_internal_match_states(int index) const {
  return _impl_.match_states_.Get(index);
}
inline const ::CMsgServerToGCMatchStateHistory_MatchState& CMsgServerToGCMatchStateHistory::match_states(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCMatchStateHistory.match_states)
  return _internal_match_states(index);
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgServerToGCMatchStateHistory::_internal_add_match_states() {
  return _impl_.match_states_.Add();
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgServerToGCMatchStateHistory::add_match_states() {
  ::CMsgServerToGCMatchStateHistory_MatchState* _add = _internal_add_match_states();
  // @@protoc_insertion_point(field_add:CMsgServerToGCMatchStateHistory.match_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCMatchStateHistory_MatchState >&
CMsgServerToGCMatchStateHistory::match_states() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCMatchStateHistory.match_states)
  return _impl_.match_states_;
}

// -------------------------------------------------------------------

// CMsgMatchStateSteamMLEntry

// optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
inline bool CMsgMatchStateSteamMLEntry::_internal_has_match_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_state_ != nullptr);
  return value;
}
inline bool CMsgMatchStateSteamMLEntry::has_match_state() const {
  return _internal_has_match_state();
}
inline void CMsgMatchStateSteamMLEntry::clear_match_state() {
  if (_impl_.match_state_ != nullptr) _impl_.match_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgServerToGCMatchStateHistory_MatchState& CMsgMatchStateSteamMLEntry::_internal_match_state() const {
  const ::CMsgServerToGCMatchStateHistory_MatchState* p = _impl_.match_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgServerToGCMatchStateHistory_MatchState&>(
      ::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_);
}
inline const ::CMsgServerToGCMatchStateHistory_MatchState& CMsgMatchStateSteamMLEntry::match_state() const {
  // @@protoc_insertion_point(field_get:CMsgMatchStateSteamMLEntry.match_state)
  return _internal_match_state();
}
inline void CMsgMatchStateSteamMLEntry::unsafe_arena_set_allocated_match_state(
    ::CMsgServerToGCMatchStateHistory_MatchState* match_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_state_);
  }
  _impl_.match_state_ = match_state;
  if (match_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgMatchStateSteamMLEntry.match_state)
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgMatchStateSteamMLEntry::release_match_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCMatchStateHistory_MatchState* temp = _impl_.match_state_;
  _impl_.match_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgMatchStateSteamMLEntry::unsafe_arena_release_match_state() {
  // @@protoc_insertion_point(field_release:CMsgMatchStateSteamMLEntry.match_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgServerToGCMatchStateHistory_MatchState* temp = _impl_.match_state_;
  _impl_.match_state_ = nullptr;
  return temp;
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgMatchStateSteamMLEntry::_internal_mutable_match_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.match_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgServerToGCMatchStateHistory_MatchState>(GetArenaForAllocation());
    _impl_.match_state_ = p;
  }
  return _impl_.match_state_;
}
inline ::CMsgServerToGCMatchStateHistory_MatchState* CMsgMatchStateSteamMLEntry::mutable_match_state() {
  ::CMsgServerToGCMatchStateHistory_MatchState* _msg = _internal_mutable_match_state();
  // @@protoc_insertion_point(field_mutable:CMsgMatchStateSteamMLEntry.match_state)
  return _msg;
}
inline void CMsgMatchStateSteamMLEntry::set_allocated_match_state(::CMsgServerToGCMatchStateHistory_MatchState* match_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.match_state_;
  }
  if (match_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(match_state);
    if (message_arena != submessage_arena) {
      match_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.match_state_ = match_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgMatchStateSteamMLEntry.match_state)
}

// optional uint32 mmr = 2;
inline bool CMsgMatchStateSteamMLEntry::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchStateSteamMLEntry::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgMatchStateSteamMLEntry::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchStateSteamMLEntry::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgMatchStateSteamMLEntry::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgMatchStateSteamMLEntry.mmr)
  return _internal_mmr();
}
inline void CMsgMatchStateSteamMLEntry::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mmr_ = value;
}
inline void CMsgMatchStateSteamMLEntry::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgMatchStateSteamMLEntry.mmr)
}

// optional bool radiant_won = 3;
inline bool CMsgMatchStateSteamMLEntry::_internal_has_radiant_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchStateSteamMLEntry::has_radiant_won() const {
  return _internal_has_radiant_won();
}
inline void CMsgMatchStateSteamMLEntry::clear_radiant_won() {
  _impl_.radiant_won_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgMatchStateSteamMLEntry::_internal_radiant_won() const {
  return _impl_.radiant_won_;
}
inline bool CMsgMatchStateSteamMLEntry::radiant_won() const {
  // @@protoc_insertion_point(field_get:CMsgMatchStateSteamMLEntry.radiant_won)
  return _internal_radiant_won();
}
inline void CMsgMatchStateSteamMLEntry::_internal_set_radiant_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radiant_won_ = value;
}
inline void CMsgMatchStateSteamMLEntry::set_radiant_won(bool value) {
  _internal_set_radiant_won(value);
  // @@protoc_insertion_point(field_set:CMsgMatchStateSteamMLEntry.radiant_won)
}

// -------------------------------------------------------------------

// CMsgLaneSelectionSteamMLEntry

// repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
inline int CMsgLaneSelectionSteamMLEntry::_internal_hero_ids_size() const {
  return _impl_.hero_ids_.size();
}
inline int CMsgLaneSelectionSteamMLEntry::hero_ids_size() const {
  return _internal_hero_ids_size();
}
inline void CMsgLaneSelectionSteamMLEntry::clear_hero_ids() {
  _impl_.hero_ids_.Clear();
}
inline uint32_t CMsgLaneSelectionSteamMLEntry::_internal_hero_ids(int index) const {
  return _impl_.hero_ids_.Get(index);
}
inline uint32_t CMsgLaneSelectionSteamMLEntry::hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLaneSelectionSteamMLEntry.hero_ids)
  return _internal_hero_ids(index);
}
inline void CMsgLaneSelectionSteamMLEntry::set_hero_ids(int index, uint32_t value) {
  _impl_.hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLaneSelectionSteamMLEntry.hero_ids)
}
inline void CMsgLaneSelectionSteamMLEntry::_internal_add_hero_ids(uint32_t value) {
  _impl_.hero_ids_.Add(value);
}
inline void CMsgLaneSelectionSteamMLEntry::add_hero_ids(uint32_t value) {
  _internal_add_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgLaneSelectionSteamMLEntry.hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLaneSelectionSteamMLEntry::_internal_hero_ids() const {
  return _impl_.hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLaneSelectionSteamMLEntry::hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgLaneSelectionSteamMLEntry.hero_ids)
  return _internal_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLaneSelectionSteamMLEntry::_internal_mutable_hero_ids() {
  return &_impl_.hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLaneSelectionSteamMLEntry::mutable_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLaneSelectionSteamMLEntry.hero_ids)
  return _internal_mutable_hero_ids();
}

// repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
inline int CMsgLaneSelectionSteamMLEntry::_internal_lanes_size() const {
  return _impl_.lanes_.size();
}
inline int CMsgLaneSelectionSteamMLEntry::lanes_size() const {
  return _internal_lanes_size();
}
inline void CMsgLaneSelectionSteamMLEntry::clear_lanes() {
  _impl_.lanes_.Clear();
}
inline uint32_t CMsgLaneSelectionSteamMLEntry::_internal_lanes(int index) const {
  return _impl_.lanes_.Get(index);
}
inline uint32_t CMsgLaneSelectionSteamMLEntry::lanes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLaneSelectionSteamMLEntry.lanes)
  return _internal_lanes(index);
}
inline void CMsgLaneSelectionSteamMLEntry::set_lanes(int index, uint32_t value) {
  _impl_.lanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgLaneSelectionSteamMLEntry.lanes)
}
inline void CMsgLaneSelectionSteamMLEntry::_internal_add_lanes(uint32_t value) {
  _impl_.lanes_.Add(value);
}
inline void CMsgLaneSelectionSteamMLEntry::add_lanes(uint32_t value) {
  _internal_add_lanes(value);
  // @@protoc_insertion_point(field_add:CMsgLaneSelectionSteamMLEntry.lanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLaneSelectionSteamMLEntry::_internal_lanes() const {
  return _impl_.lanes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgLaneSelectionSteamMLEntry::lanes() const {
  // @@protoc_insertion_point(field_list:CMsgLaneSelectionSteamMLEntry.lanes)
  return _internal_lanes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLaneSelectionSteamMLEntry::_internal_mutable_lanes() {
  return &_impl_.lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgLaneSelectionSteamMLEntry::mutable_lanes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLaneSelectionSteamMLEntry.lanes)
  return _internal_mutable_lanes();
}

// -------------------------------------------------------------------

// CMsgAbilitySelectionSteamMLEntry

// optional uint32 mmr = 1;
inline bool CMsgAbilitySelectionSteamMLEntry::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAbilitySelectionSteamMLEntry::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.mmr)
  return _internal_mmr();
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mmr_ = value;
}
inline void CMsgAbilitySelectionSteamMLEntry::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.mmr)
}

// optional uint32 hero_id = 2;
inline bool CMsgAbilitySelectionSteamMLEntry::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAbilitySelectionSteamMLEntry::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.hero_id)
  return _internal_hero_id();
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgAbilitySelectionSteamMLEntry::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.hero_id)
}

// repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
inline int CMsgAbilitySelectionSteamMLEntry::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgAbilitySelectionSteamMLEntry::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgAbilitySelectionSteamMLEntry::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.enemy_hero_ids)
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgAbilitySelectionSteamMLEntry::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgAbilitySelectionSteamMLEntry.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgAbilitySelectionSteamMLEntry::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgAbilitySelectionSteamMLEntry::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgAbilitySelectionSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgAbilitySelectionSteamMLEntry::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgAbilitySelectionSteamMLEntry::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAbilitySelectionSteamMLEntry.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// optional uint32 lane = 4;
inline bool CMsgAbilitySelectionSteamMLEntry::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgAbilitySelectionSteamMLEntry::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgAbilitySelectionSteamMLEntry::lane() const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.lane)
  return _internal_lane();
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.lane_ = value;
}
inline void CMsgAbilitySelectionSteamMLEntry::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.lane)
}

// repeated int32 abilities = 5 [(.steamml_max_entries) = 25];
inline int CMsgAbilitySelectionSteamMLEntry::_internal_abilities_size() const {
  return _impl_.abilities_.size();
}
inline int CMsgAbilitySelectionSteamMLEntry::abilities_size() const {
  return _internal_abilities_size();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_abilities() {
  _impl_.abilities_.Clear();
}
inline int32_t CMsgAbilitySelectionSteamMLEntry::_internal_abilities(int index) const {
  return _impl_.abilities_.Get(index);
}
inline int32_t CMsgAbilitySelectionSteamMLEntry::abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.abilities)
  return _internal_abilities(index);
}
inline void CMsgAbilitySelectionSteamMLEntry::set_abilities(int index, int32_t value) {
  _impl_.abilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.abilities)
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_add_abilities(int32_t value) {
  _impl_.abilities_.Add(value);
}
inline void CMsgAbilitySelectionSteamMLEntry::add_abilities(int32_t value) {
  _internal_add_abilities(value);
  // @@protoc_insertion_point(field_add:CMsgAbilitySelectionSteamMLEntry.abilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgAbilitySelectionSteamMLEntry::_internal_abilities() const {
  return _impl_.abilities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgAbilitySelectionSteamMLEntry::abilities() const {
  // @@protoc_insertion_point(field_list:CMsgAbilitySelectionSteamMLEntry.abilities)
  return _internal_abilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgAbilitySelectionSteamMLEntry::_internal_mutable_abilities() {
  return &_impl_.abilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgAbilitySelectionSteamMLEntry::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAbilitySelectionSteamMLEntry.abilities)
  return _internal_mutable_abilities();
}

// optional int32 selected_ability = 6 [default = -1];
inline bool CMsgAbilitySelectionSteamMLEntry::_internal_has_selected_ability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgAbilitySelectionSteamMLEntry::has_selected_ability() const {
  return _internal_has_selected_ability();
}
inline void CMsgAbilitySelectionSteamMLEntry::clear_selected_ability() {
  _impl_.selected_ability_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgAbilitySelectionSteamMLEntry::_internal_selected_ability() const {
  return _impl_.selected_ability_;
}
inline int32_t CMsgAbilitySelectionSteamMLEntry::selected_ability() const {
  // @@protoc_insertion_point(field_get:CMsgAbilitySelectionSteamMLEntry.selected_ability)
  return _internal_selected_ability();
}
inline void CMsgAbilitySelectionSteamMLEntry::_internal_set_selected_ability(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.selected_ability_ = value;
}
inline void CMsgAbilitySelectionSteamMLEntry::set_selected_ability(int32_t value) {
  _internal_set_selected_ability(value);
  // @@protoc_insertion_point(field_set:CMsgAbilitySelectionSteamMLEntry.selected_ability)
}

// -------------------------------------------------------------------

// CMsgItemPurchasePregameSteamMLEntry

// optional uint32 mmr = 1;
inline bool CMsgItemPurchasePregameSteamMLEntry::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgItemPurchasePregameSteamMLEntry::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.mmr)
  return _internal_mmr();
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mmr_ = value;
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.mmr)
}

// optional uint32 lane = 2;
inline bool CMsgItemPurchasePregameSteamMLEntry::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgItemPurchasePregameSteamMLEntry::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::lane() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.lane)
  return _internal_lane();
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_ = value;
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.lane)
}

// optional float balance = 3;
inline bool CMsgItemPurchasePregameSteamMLEntry::_internal_has_balance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgItemPurchasePregameSteamMLEntry::has_balance() const {
  return _internal_has_balance();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_balance() {
  _impl_.balance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgItemPurchasePregameSteamMLEntry::_internal_balance() const {
  return _impl_.balance_;
}
inline float CMsgItemPurchasePregameSteamMLEntry::balance() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.balance)
  return _internal_balance();
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_set_balance(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.balance_ = value;
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_balance(float value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.balance)
}

// optional uint32 hero_id = 4;
inline bool CMsgItemPurchasePregameSteamMLEntry::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgItemPurchasePregameSteamMLEntry::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.hero_id)
  return _internal_hero_id();
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.hero_id)
}

// repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
inline int CMsgItemPurchasePregameSteamMLEntry::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgItemPurchasePregameSteamMLEntry::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.allied_hero_ids)
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgItemPurchasePregameSteamMLEntry::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchasePregameSteamMLEntry.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchasePregameSteamMLEntry::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchasePregameSteamMLEntry::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchasePregameSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchasePregameSteamMLEntry::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchasePregameSteamMLEntry::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchasePregameSteamMLEntry.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
inline int CMsgItemPurchasePregameSteamMLEntry::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgItemPurchasePregameSteamMLEntry::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchasePregameSteamMLEntry::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.enemy_hero_ids)
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgItemPurchasePregameSteamMLEntry::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchasePregameSteamMLEntry.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchasePregameSteamMLEntry::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchasePregameSteamMLEntry::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchasePregameSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchasePregameSteamMLEntry::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchasePregameSteamMLEntry::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchasePregameSteamMLEntry.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// repeated int32 items = 7 [(.steamml_max_entries) = 9];
inline int CMsgItemPurchasePregameSteamMLEntry::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgItemPurchasePregameSteamMLEntry::items_size() const {
  return _internal_items_size();
}
inline void CMsgItemPurchasePregameSteamMLEntry::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgItemPurchasePregameSteamMLEntry::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgItemPurchasePregameSteamMLEntry::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchasePregameSteamMLEntry.items)
  return _internal_items(index);
}
inline void CMsgItemPurchasePregameSteamMLEntry::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchasePregameSteamMLEntry.items)
}
inline void CMsgItemPurchasePregameSteamMLEntry::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgItemPurchasePregameSteamMLEntry::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchasePregameSteamMLEntry.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchasePregameSteamMLEntry::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchasePregameSteamMLEntry::items() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchasePregameSteamMLEntry.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchasePregameSteamMLEntry::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchasePregameSteamMLEntry::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchasePregameSteamMLEntry.items)
  return _internal_mutable_items();
}

// -------------------------------------------------------------------

// CMsgItemPurchaseSteamMLEntry

// optional uint32 mmr = 1;
inline bool CMsgItemPurchaseSteamMLEntry::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSteamMLEntry::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.mmr)
  return _internal_mmr();
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mmr_ = value;
}
inline void CMsgItemPurchaseSteamMLEntry::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.mmr)
}

// optional uint32 lane = 2;
inline bool CMsgItemPurchaseSteamMLEntry::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSteamMLEntry::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::lane() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.lane)
  return _internal_lane();
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_ = value;
}
inline void CMsgItemPurchaseSteamMLEntry::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.lane)
}

// optional uint32 hero_id = 3;
inline bool CMsgItemPurchaseSteamMLEntry::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSteamMLEntry::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.hero_id)
  return _internal_hero_id();
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgItemPurchaseSteamMLEntry::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.hero_id)
}

// repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
inline int CMsgItemPurchaseSteamMLEntry::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgItemPurchaseSteamMLEntry::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgItemPurchaseSteamMLEntry::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.allied_hero_ids)
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgItemPurchaseSteamMLEntry::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSteamMLEntry.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSteamMLEntry::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSteamMLEntry::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSteamMLEntry::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSteamMLEntry::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSteamMLEntry.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
inline int CMsgItemPurchaseSteamMLEntry::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgItemPurchaseSteamMLEntry::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchaseSteamMLEntry::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgItemPurchaseSteamMLEntry::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.enemy_hero_ids)
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgItemPurchaseSteamMLEntry::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSteamMLEntry.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSteamMLEntry::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSteamMLEntry::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSteamMLEntry::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSteamMLEntry::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSteamMLEntry.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// repeated int32 items = 6 [(.steamml_max_entries) = 20];
inline int CMsgItemPurchaseSteamMLEntry::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgItemPurchaseSteamMLEntry::items_size() const {
  return _internal_items_size();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgItemPurchaseSteamMLEntry::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgItemPurchaseSteamMLEntry::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.items)
  return _internal_items(index);
}
inline void CMsgItemPurchaseSteamMLEntry::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.items)
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgItemPurchaseSteamMLEntry::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSteamMLEntry.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSteamMLEntry::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSteamMLEntry::items() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSteamMLEntry.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSteamMLEntry::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSteamMLEntry::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSteamMLEntry.items)
  return _internal_mutable_items();
}

// repeated int32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
inline int CMsgItemPurchaseSteamMLEntry::_internal_items_to_be_purchased_size() const {
  return _impl_.items_to_be_purchased_.size();
}
inline int CMsgItemPurchaseSteamMLEntry::items_to_be_purchased_size() const {
  return _internal_items_to_be_purchased_size();
}
inline void CMsgItemPurchaseSteamMLEntry::clear_items_to_be_purchased() {
  _impl_.items_to_be_purchased_.Clear();
}
inline int32_t CMsgItemPurchaseSteamMLEntry::_internal_items_to_be_purchased(int index) const {
  return _impl_.items_to_be_purchased_.Get(index);
}
inline int32_t CMsgItemPurchaseSteamMLEntry::items_to_be_purchased(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSteamMLEntry.items_to_be_purchased)
  return _internal_items_to_be_purchased(index);
}
inline void CMsgItemPurchaseSteamMLEntry::set_items_to_be_purchased(int index, int32_t value) {
  _impl_.items_to_be_purchased_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSteamMLEntry.items_to_be_purchased)
}
inline void CMsgItemPurchaseSteamMLEntry::_internal_add_items_to_be_purchased(int32_t value) {
  _impl_.items_to_be_purchased_.Add(value);
}
inline void CMsgItemPurchaseSteamMLEntry::add_items_to_be_purchased(int32_t value) {
  _internal_add_items_to_be_purchased(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSteamMLEntry.items_to_be_purchased)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSteamMLEntry::_internal_items_to_be_purchased() const {
  return _impl_.items_to_be_purchased_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSteamMLEntry::items_to_be_purchased() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSteamMLEntry.items_to_be_purchased)
  return _internal_items_to_be_purchased();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSteamMLEntry::_internal_mutable_items_to_be_purchased() {
  return &_impl_.items_to_be_purchased_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSteamMLEntry::mutable_items_to_be_purchased() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSteamMLEntry.items_to_be_purchased)
  return _internal_mutable_items_to_be_purchased();
}

// -------------------------------------------------------------------

// CMsgItemPurchaseSequenceSteamMLEntry

// optional uint32 mmr = 1;
inline bool CMsgItemPurchaseSequenceSteamMLEntry::_internal_has_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSequenceSteamMLEntry::has_mmr() const {
  return _internal_has_mmr();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_mmr() {
  _impl_.mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_mmr() const {
  return _impl_.mmr_;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::mmr() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.mmr)
  return _internal_mmr();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_set_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mmr_ = value;
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_mmr(uint32_t value) {
  _internal_set_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.mmr)
}

// optional uint32 lane = 2;
inline bool CMsgItemPurchaseSequenceSteamMLEntry::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSequenceSteamMLEntry::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::lane() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.lane)
  return _internal_lane();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_ = value;
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.lane)
}

// optional uint32 hero_id = 3;
inline bool CMsgItemPurchaseSequenceSteamMLEntry::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSequenceSteamMLEntry::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.hero_id)
  return _internal_hero_id();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.hero_id)
}

// repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
inline int CMsgItemPurchaseSequenceSteamMLEntry::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgItemPurchaseSequenceSteamMLEntry::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.allied_hero_ids)
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSequenceSteamMLEntry.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSequenceSteamMLEntry.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSequenceSteamMLEntry.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
inline int CMsgItemPurchaseSequenceSteamMLEntry::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgItemPurchaseSequenceSteamMLEntry::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgItemPurchaseSequenceSteamMLEntry::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.enemy_hero_ids)
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSequenceSteamMLEntry.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSequenceSteamMLEntry.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSequenceSteamMLEntry.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// repeated int32 items = 6 [(.steamml_max_entries) = 20];
inline int CMsgItemPurchaseSequenceSteamMLEntry::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CMsgItemPurchaseSequenceSteamMLEntry::items_size() const {
  return _internal_items_size();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_items() {
  _impl_.items_.Clear();
}
inline int32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline int32_t CMsgItemPurchaseSequenceSteamMLEntry::items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.items)
  return _internal_items(index);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_items(int index, int32_t value) {
  _impl_.items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.items)
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_add_items(int32_t value) {
  _impl_.items_.Add(value);
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::add_items(int32_t value) {
  _internal_add_items(value);
  // @@protoc_insertion_point(field_add:CMsgItemPurchaseSequenceSteamMLEntry.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::_internal_items() const {
  return _impl_.items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgItemPurchaseSequenceSteamMLEntry::items() const {
  // @@protoc_insertion_point(field_list:CMsgItemPurchaseSequenceSteamMLEntry.items)
  return _internal_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::_internal_mutable_items() {
  return &_impl_.items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgItemPurchaseSequenceSteamMLEntry::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgItemPurchaseSequenceSteamMLEntry.items)
  return _internal_mutable_items();
}

// optional int32 item_to_be_purchased = 7 [default = -1];
inline bool CMsgItemPurchaseSequenceSteamMLEntry::_internal_has_item_to_be_purchased() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgItemPurchaseSequenceSteamMLEntry::has_item_to_be_purchased() const {
  return _internal_has_item_to_be_purchased();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::clear_item_to_be_purchased() {
  _impl_.item_to_be_purchased_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CMsgItemPurchaseSequenceSteamMLEntry::_internal_item_to_be_purchased() const {
  return _impl_.item_to_be_purchased_;
}
inline int32_t CMsgItemPurchaseSequenceSteamMLEntry::item_to_be_purchased() const {
  // @@protoc_insertion_point(field_get:CMsgItemPurchaseSequenceSteamMLEntry.item_to_be_purchased)
  return _internal_item_to_be_purchased();
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::_internal_set_item_to_be_purchased(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.item_to_be_purchased_ = value;
}
inline void CMsgItemPurchaseSequenceSteamMLEntry::set_item_to_be_purchased(int32_t value) {
  _internal_set_item_to_be_purchased(value);
  // @@protoc_insertion_point(field_set:CMsgItemPurchaseSequenceSteamMLEntry.item_to_be_purchased)
}

// -------------------------------------------------------------------

// CMsgServerToGCCavernCrawlIsHeroActive

// optional uint32 event_id = 1;
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActive.event_id)
  return _internal_event_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActive.event_id)
}

// optional uint32 account_id = 2;
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActive.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActive.account_id)
}

// optional uint32 preferred_map_variant = 3 [default = 255];
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_has_preferred_map_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::has_preferred_map_variant() const {
  return _internal_has_preferred_map_variant();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::clear_preferred_map_variant() {
  _impl_.preferred_map_variant_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::_internal_preferred_map_variant() const {
  return _impl_.preferred_map_variant_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::preferred_map_variant() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActive.preferred_map_variant)
  return _internal_preferred_map_variant();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::_internal_set_preferred_map_variant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.preferred_map_variant_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::set_preferred_map_variant(uint32_t value) {
  _internal_set_preferred_map_variant(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActive.preferred_map_variant)
}

// optional uint32 hero_id = 4;
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActive::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActive.hero_id)
  return _internal_hero_id();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.hero_id_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActive.hero_id)
}

// optional bool turbo_mode = 5;
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_has_turbo_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::has_turbo_mode() const {
  return _internal_has_turbo_mode();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::clear_turbo_mode() {
  _impl_.turbo_mode_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::_internal_turbo_mode() const {
  return _impl_.turbo_mode_;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActive::turbo_mode() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActive.turbo_mode)
  return _internal_turbo_mode();
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::_internal_set_turbo_mode(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.turbo_mode_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActive::set_turbo_mode(bool value) {
  _internal_set_turbo_mode(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActive.turbo_mode)
}

// -------------------------------------------------------------------

// CMsgServerToGCPlayerChallengeHistory_PlayerChallenge

// optional uint32 account_id = 1;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.account_id)
}

// optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_challenge_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_challenge_type() const {
  return _internal_has_challenge_type();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_challenge_type() {
  _impl_.challenge_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EPlayerChallengeHistoryType CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_challenge_type() const {
  return static_cast< ::EPlayerChallengeHistoryType >(_impl_.challenge_type_);
}
inline ::EPlayerChallengeHistoryType CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::challenge_type() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_type)
  return _internal_challenge_type();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_challenge_type(::EPlayerChallengeHistoryType value) {
  assert(::EPlayerChallengeHistoryType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.challenge_type_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_challenge_type(::EPlayerChallengeHistoryType value) {
  _internal_set_challenge_type(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_type)
}

// optional uint32 challenge_id1 = 3;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_challenge_id1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_challenge_id1() const {
  return _internal_has_challenge_id1();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_challenge_id1() {
  _impl_.challenge_id1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_challenge_id1() const {
  return _impl_.challenge_id1_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::challenge_id1() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_id1)
  return _internal_challenge_id1();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_challenge_id1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_id1_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_challenge_id1(uint32_t value) {
  _internal_set_challenge_id1(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_id1)
}

// optional uint32 challenge_id2 = 4;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_challenge_id2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_challenge_id2() const {
  return _internal_has_challenge_id2();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_challenge_id2() {
  _impl_.challenge_id2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_challenge_id2() const {
  return _impl_.challenge_id2_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::challenge_id2() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_id2)
  return _internal_challenge_id2();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_challenge_id2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.challenge_id2_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_challenge_id2(uint32_t value) {
  _internal_set_challenge_id2(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.challenge_id2)
}

// optional uint32 progress_value_start = 5;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_progress_value_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_progress_value_start() const {
  return _internal_has_progress_value_start();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_progress_value_start() {
  _impl_.progress_value_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_progress_value_start() const {
  return _impl_.progress_value_start_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::progress_value_start() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.progress_value_start)
  return _internal_progress_value_start();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_progress_value_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.progress_value_start_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_progress_value_start(uint32_t value) {
  _internal_set_progress_value_start(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.progress_value_start)
}

// optional uint32 progress_value_end = 6;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_progress_value_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_progress_value_end() const {
  return _internal_has_progress_value_end();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_progress_value_end() {
  _impl_.progress_value_end_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_progress_value_end() const {
  return _impl_.progress_value_end_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::progress_value_end() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.progress_value_end)
  return _internal_progress_value_end();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_progress_value_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.progress_value_end_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_progress_value_end(uint32_t value) {
  _internal_set_progress_value_end(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.progress_value_end)
}

// optional bool team_won = 7;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_team_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_team_won() const {
  return _internal_has_team_won();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_team_won() {
  _impl_.team_won_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_team_won() const {
  return _impl_.team_won_;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::team_won() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.team_won)
  return _internal_team_won();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_team_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.team_won_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_team_won(bool value) {
  _internal_set_team_won(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.team_won)
}

// optional uint64 audit_data = 8;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_audit_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_audit_data() const {
  return _internal_has_audit_data();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_audit_data() {
  _impl_.audit_data_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_audit_data() const {
  return _impl_.audit_data_;
}
inline uint64_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::audit_data() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.audit_data)
  return _internal_audit_data();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_audit_data(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.audit_data_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_audit_data(uint64_t value) {
  _internal_set_audit_data(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.audit_data)
}

// optional uint32 hero_id = 9;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.hero_id)
  return _internal_hero_id();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.hero_id_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.hero_id)
}

// optional uint32 rank_completed = 10;
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_has_rank_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::has_rank_completed() const {
  return _internal_has_rank_completed();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::clear_rank_completed() {
  _impl_.rank_completed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_rank_completed() const {
  return _impl_.rank_completed_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::rank_completed() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.rank_completed)
  return _internal_rank_completed();
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_internal_set_rank_completed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.rank_completed_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::set_rank_completed(uint32_t value) {
  _internal_set_rank_completed(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge.rank_completed)
}

// -------------------------------------------------------------------

// CMsgServerToGCPlayerChallengeHistory

// optional uint64 match_id = 1;
inline bool CMsgServerToGCPlayerChallengeHistory::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgServerToGCPlayerChallengeHistory::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCPlayerChallengeHistory::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgServerToGCPlayerChallengeHistory::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.match_id)
  return _internal_match_id();
}
inline void CMsgServerToGCPlayerChallengeHistory::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.match_id)
}

// optional uint32 average_rank = 2;
inline bool CMsgServerToGCPlayerChallengeHistory::_internal_has_average_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCPlayerChallengeHistory::has_average_rank() const {
  return _internal_has_average_rank();
}
inline void CMsgServerToGCPlayerChallengeHistory::clear_average_rank() {
  _impl_.average_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory::_internal_average_rank() const {
  return _impl_.average_rank_;
}
inline uint32_t CMsgServerToGCPlayerChallengeHistory::average_rank() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.average_rank)
  return _internal_average_rank();
}
inline void CMsgServerToGCPlayerChallengeHistory::_internal_set_average_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.average_rank_ = value;
}
inline void CMsgServerToGCPlayerChallengeHistory::set_average_rank(uint32_t value) {
  _internal_set_average_rank(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCPlayerChallengeHistory.average_rank)
}

// repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
inline int CMsgServerToGCPlayerChallengeHistory::_internal_challenge_records_size() const {
  return _impl_.challenge_records_.size();
}
inline int CMsgServerToGCPlayerChallengeHistory::challenge_records_size() const {
  return _internal_challenge_records_size();
}
inline void CMsgServerToGCPlayerChallengeHistory::clear_challenge_records() {
  _impl_.challenge_records_.Clear();
}
inline ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* CMsgServerToGCPlayerChallengeHistory::mutable_challenge_records(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCPlayerChallengeHistory.challenge_records)
  return _impl_.challenge_records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >*
CMsgServerToGCPlayerChallengeHistory::mutable_challenge_records() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCPlayerChallengeHistory.challenge_records)
  return &_impl_.challenge_records_;
}
inline const ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& CMsgServerToGCPlayerChallengeHistory::_internal_challenge_records(int index) const {
  return _impl_.challenge_records_.Get(index);
}
inline const ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& CMsgServerToGCPlayerChallengeHistory::challenge_records(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCPlayerChallengeHistory.challenge_records)
  return _internal_challenge_records(index);
}
inline ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* CMsgServerToGCPlayerChallengeHistory::_internal_add_challenge_records() {
  return _impl_.challenge_records_.Add();
}
inline ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* CMsgServerToGCPlayerChallengeHistory::add_challenge_records() {
  ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* _add = _internal_add_challenge_records();
  // @@protoc_insertion_point(field_add:CMsgServerToGCPlayerChallengeHistory.challenge_records)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >&
CMsgServerToGCPlayerChallengeHistory::challenge_records() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCPlayerChallengeHistory.challenge_records)
  return _impl_.challenge_records_;
}

// -------------------------------------------------------------------

// CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults

// optional uint32 path_id_completed = 1 [default = 255];
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_has_path_id_completed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::has_path_id_completed() const {
  return _internal_has_path_id_completed();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::clear_path_id_completed() {
  _impl_.path_id_completed_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_path_id_completed() const {
  return _impl_.path_id_completed_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::path_id_completed() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults.path_id_completed)
  return _internal_path_id_completed();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_set_path_id_completed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_id_completed_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::set_path_id_completed(uint32_t value) {
  _internal_set_path_id_completed(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults.path_id_completed)
}

// optional uint32 room_id_claimed = 2 [default = 255];
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_has_room_id_claimed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::has_room_id_claimed() const {
  return _internal_has_room_id_claimed();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::clear_room_id_claimed() {
  _impl_.room_id_claimed_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_room_id_claimed() const {
  return _impl_.room_id_claimed_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::room_id_claimed() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults.room_id_claimed)
  return _internal_room_id_claimed();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_internal_set_room_id_claimed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.room_id_claimed_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::set_room_id_claimed(uint32_t value) {
  _internal_set_room_id_claimed(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults.room_id_claimed)
}

// -------------------------------------------------------------------

// CMsgServerToGCCavernCrawlIsHeroActiveResponse

// optional bool result = 1;
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::clear_result() {
  _impl_.result_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.result)
  return _internal_result();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_set_result(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.result)
}

// optional uint32 map_variant = 5 [default = 255];
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_has_map_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::has_map_variant() const {
  return _internal_has_map_variant();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::clear_map_variant() {
  _impl_.map_variant_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_map_variant() const {
  return _impl_.map_variant_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::map_variant() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_variant)
  return _internal_map_variant();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_set_map_variant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.map_variant_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::set_map_variant(uint32_t value) {
  _internal_set_map_variant(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_variant)
}

// optional uint32 potential_winnings = 2;
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_has_potential_winnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::has_potential_winnings() const {
  return _internal_has_potential_winnings();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::clear_potential_winnings() {
  _impl_.potential_winnings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_potential_winnings() const {
  return _impl_.potential_winnings_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::potential_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.potential_winnings)
  return _internal_potential_winnings();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_set_potential_winnings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.potential_winnings_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::set_potential_winnings(uint32_t value) {
  _internal_set_potential_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.potential_winnings)
}

// repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
inline int CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_map_results_size() const {
  return _impl_.map_results_.size();
}
inline int CMsgServerToGCCavernCrawlIsHeroActiveResponse::map_results_size() const {
  return _internal_map_results_size();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::clear_map_results() {
  _impl_.map_results_.Clear();
}
inline ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* CMsgServerToGCCavernCrawlIsHeroActiveResponse::mutable_map_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results)
  return _impl_.map_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >*
CMsgServerToGCCavernCrawlIsHeroActiveResponse::mutable_map_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results)
  return &_impl_.map_results_;
}
inline const ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_map_results(int index) const {
  return _impl_.map_results_.Get(index);
}
inline const ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& CMsgServerToGCCavernCrawlIsHeroActiveResponse::map_results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results)
  return _internal_map_results(index);
}
inline ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_add_map_results() {
  return _impl_.map_results_.Add();
}
inline ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* CMsgServerToGCCavernCrawlIsHeroActiveResponse::add_map_results() {
  ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* _add = _internal_add_map_results();
  // @@protoc_insertion_point(field_add:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >&
CMsgServerToGCCavernCrawlIsHeroActiveResponse::map_results() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCCavernCrawlIsHeroActiveResponse.map_results)
  return _impl_.map_results_;
}

// optional uint32 potential_plus_shard_winnings = 4;
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_has_potential_plus_shard_winnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::has_potential_plus_shard_winnings() const {
  return _internal_has_potential_plus_shard_winnings();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::clear_potential_plus_shard_winnings() {
  _impl_.potential_plus_shard_winnings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_potential_plus_shard_winnings() const {
  return _impl_.potential_plus_shard_winnings_;
}
inline uint32_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::potential_plus_shard_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCCavernCrawlIsHeroActiveResponse.potential_plus_shard_winnings)
  return _internal_potential_plus_shard_winnings();
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::_internal_set_potential_plus_shard_winnings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.potential_plus_shard_winnings_ = value;
}
inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::set_potential_plus_shard_winnings(uint32_t value) {
  _internal_set_potential_plus_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCCavernCrawlIsHeroActiveResponse.potential_plus_shard_winnings)
}

// -------------------------------------------------------------------

// CMsgGCtoServerTensorflowInstance

// optional uint32 server_instance = 1;
inline bool CMsgGCtoServerTensorflowInstance::_internal_has_server_instance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCtoServerTensorflowInstance::has_server_instance() const {
  return _internal_has_server_instance();
}
inline void CMsgGCtoServerTensorflowInstance::clear_server_instance() {
  _impl_.server_instance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCtoServerTensorflowInstance::_internal_server_instance() const {
  return _impl_.server_instance_;
}
inline uint32_t CMsgGCtoServerTensorflowInstance::server_instance() const {
  // @@protoc_insertion_point(field_get:CMsgGCtoServerTensorflowInstance.server_instance)
  return _internal_server_instance();
}
inline void CMsgGCtoServerTensorflowInstance::_internal_set_server_instance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.server_instance_ = value;
}
inline void CMsgGCtoServerTensorflowInstance::set_server_instance(uint32_t value) {
  _internal_set_server_instance(value);
  // @@protoc_insertion_point(field_set:CMsgGCtoServerTensorflowInstance.server_instance)
}

// -------------------------------------------------------------------

// CMsgDetailedGameStats_PlayerStatEntry

// optional uint32 total_earned_gold = 1;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_earned_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_earned_gold() const {
  return _internal_has_total_earned_gold();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_earned_gold() {
  _impl_.total_earned_gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_earned_gold() const {
  return _impl_.total_earned_gold_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_earned_gold() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_earned_gold)
  return _internal_total_earned_gold();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_earned_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.total_earned_gold_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_earned_gold(uint32_t value) {
  _internal_set_total_earned_gold(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_earned_gold)
}

// optional uint32 total_networth = 2;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_networth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_networth() const {
  return _internal_has_total_networth();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_networth() {
  _impl_.total_networth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_networth() const {
  return _impl_.total_networth_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_networth() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_networth)
  return _internal_total_networth();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_networth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.total_networth_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_networth(uint32_t value) {
  _internal_set_total_networth(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_networth)
}

// optional uint32 level = 3;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_level() const {
  return _internal_has_level();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::level() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.level)
  return _internal_level();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.level)
}

// optional uint32 total_dps = 4;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_dps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_dps() const {
  return _internal_has_total_dps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_dps() {
  _impl_.total_dps_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_dps() const {
  return _impl_.total_dps_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_dps() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_dps)
  return _internal_total_dps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_dps(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.total_dps_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_dps(uint32_t value) {
  _internal_set_total_dps(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_dps)
}

// optional uint32 average_dps = 5;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_average_dps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_average_dps() const {
  return _internal_has_average_dps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_average_dps() {
  _impl_.average_dps_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_average_dps() const {
  return _impl_.average_dps_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::average_dps() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.average_dps)
  return _internal_average_dps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_average_dps(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.average_dps_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_average_dps(uint32_t value) {
  _internal_set_average_dps(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.average_dps)
}

// optional uint32 ability_damage_output = 6;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_ability_damage_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_ability_damage_output() const {
  return _internal_has_ability_damage_output();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_ability_damage_output() {
  _impl_.ability_damage_output_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_ability_damage_output() const {
  return _impl_.ability_damage_output_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::ability_damage_output() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.ability_damage_output)
  return _internal_ability_damage_output();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_ability_damage_output(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ability_damage_output_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_ability_damage_output(uint32_t value) {
  _internal_set_ability_damage_output(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.ability_damage_output)
}

// optional uint32 base_health = 7;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_base_health() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_base_health() const {
  return _internal_has_base_health();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_base_health() {
  _impl_.base_health_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_base_health() const {
  return _impl_.base_health_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::base_health() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.base_health)
  return _internal_base_health();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_base_health(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.base_health_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_base_health(uint32_t value) {
  _internal_set_base_health(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.base_health)
}

// optional uint32 total_health = 8;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_health() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_health() const {
  return _internal_has_total_health();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_health() {
  _impl_.total_health_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_health() const {
  return _impl_.total_health_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_health() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_health)
  return _internal_total_health();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_health(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.total_health_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_health(uint32_t value) {
  _internal_set_total_health(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_health)
}

// optional uint32 total_mana = 9;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_mana() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_mana() const {
  return _internal_has_total_mana();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_mana() {
  _impl_.total_mana_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_mana() const {
  return _impl_.total_mana_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_mana() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_mana)
  return _internal_total_mana();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_mana(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.total_mana_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_mana(uint32_t value) {
  _internal_set_total_mana(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_mana)
}

// optional float base_physical_damage_reduction_pct = 10;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_base_physical_damage_reduction_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_base_physical_damage_reduction_pct() const {
  return _internal_has_base_physical_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_base_physical_damage_reduction_pct() {
  _impl_.base_physical_damage_reduction_pct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_base_physical_damage_reduction_pct() const {
  return _impl_.base_physical_damage_reduction_pct_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::base_physical_damage_reduction_pct() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.base_physical_damage_reduction_pct)
  return _internal_base_physical_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_base_physical_damage_reduction_pct(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.base_physical_damage_reduction_pct_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_base_physical_damage_reduction_pct(float value) {
  _internal_set_base_physical_damage_reduction_pct(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.base_physical_damage_reduction_pct)
}

// optional float total_physical_damage_reduction_pct = 11;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_physical_damage_reduction_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_physical_damage_reduction_pct() const {
  return _internal_has_total_physical_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_physical_damage_reduction_pct() {
  _impl_.total_physical_damage_reduction_pct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_total_physical_damage_reduction_pct() const {
  return _impl_.total_physical_damage_reduction_pct_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::total_physical_damage_reduction_pct() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_physical_damage_reduction_pct)
  return _internal_total_physical_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_physical_damage_reduction_pct(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.total_physical_damage_reduction_pct_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_physical_damage_reduction_pct(float value) {
  _internal_set_total_physical_damage_reduction_pct(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_physical_damage_reduction_pct)
}

// optional float base_ability_damage_reduction_pct = 12;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_base_ability_damage_reduction_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_base_ability_damage_reduction_pct() const {
  return _internal_has_base_ability_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_base_ability_damage_reduction_pct() {
  _impl_.base_ability_damage_reduction_pct_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_base_ability_damage_reduction_pct() const {
  return _impl_.base_ability_damage_reduction_pct_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::base_ability_damage_reduction_pct() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.base_ability_damage_reduction_pct)
  return _internal_base_ability_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_base_ability_damage_reduction_pct(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.base_ability_damage_reduction_pct_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_base_ability_damage_reduction_pct(float value) {
  _internal_set_base_ability_damage_reduction_pct(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.base_ability_damage_reduction_pct)
}

// optional float total_ability_damage_reduction_pct = 13;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_ability_damage_reduction_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_ability_damage_reduction_pct() const {
  return _internal_has_total_ability_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_ability_damage_reduction_pct() {
  _impl_.total_ability_damage_reduction_pct_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_total_ability_damage_reduction_pct() const {
  return _impl_.total_ability_damage_reduction_pct_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::total_ability_damage_reduction_pct() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_ability_damage_reduction_pct)
  return _internal_total_ability_damage_reduction_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_ability_damage_reduction_pct(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.total_ability_damage_reduction_pct_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_ability_damage_reduction_pct(float value) {
  _internal_set_total_ability_damage_reduction_pct(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_ability_damage_reduction_pct)
}

// optional float ability_damage_block = 14;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_ability_damage_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_ability_damage_block() const {
  return _internal_has_ability_damage_block();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_ability_damage_block() {
  _impl_.ability_damage_block_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_ability_damage_block() const {
  return _impl_.ability_damage_block_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::ability_damage_block() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.ability_damage_block)
  return _internal_ability_damage_block();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_ability_damage_block(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.ability_damage_block_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_ability_damage_block(float value) {
  _internal_set_ability_damage_block(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.ability_damage_block)
}

// optional float physical_damage_block = 15;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_physical_damage_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_physical_damage_block() const {
  return _internal_has_physical_damage_block();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_physical_damage_block() {
  _impl_.physical_damage_block_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_physical_damage_block() const {
  return _impl_.physical_damage_block_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::physical_damage_block() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.physical_damage_block)
  return _internal_physical_damage_block();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_physical_damage_block(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.physical_damage_block_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_physical_damage_block(float value) {
  _internal_set_physical_damage_block(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.physical_damage_block)
}

// optional uint32 mana_regen = 16;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_mana_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_mana_regen() const {
  return _internal_has_mana_regen();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_mana_regen() {
  _impl_.mana_regen_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_mana_regen() const {
  return _impl_.mana_regen_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::mana_regen() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.mana_regen)
  return _internal_mana_regen();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_mana_regen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.mana_regen_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_mana_regen(uint32_t value) {
  _internal_set_mana_regen(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.mana_regen)
}

// optional uint32 health_regen = 17;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_health_regen() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_health_regen() const {
  return _internal_has_health_regen();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_health_regen() {
  _impl_.health_regen_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_health_regen() const {
  return _impl_.health_regen_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::health_regen() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.health_regen)
  return _internal_health_regen();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_health_regen(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.health_regen_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_health_regen(uint32_t value) {
  _internal_set_health_regen(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.health_regen)
}

// optional float physical_magic_dmg_pct = 18;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_physical_magic_dmg_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_physical_magic_dmg_pct() const {
  return _internal_has_physical_magic_dmg_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_physical_magic_dmg_pct() {
  _impl_.physical_magic_dmg_pct_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_physical_magic_dmg_pct() const {
  return _impl_.physical_magic_dmg_pct_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::physical_magic_dmg_pct() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.physical_magic_dmg_pct)
  return _internal_physical_magic_dmg_pct();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_physical_magic_dmg_pct(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.physical_magic_dmg_pct_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_physical_magic_dmg_pct(float value) {
  _internal_set_physical_magic_dmg_pct(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.physical_magic_dmg_pct)
}

// optional uint32 kills = 19;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.kills)
  return _internal_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.kills_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.kills)
}

// optional uint32 deaths = 20;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.deaths)
  return _internal_deaths();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.deaths_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.deaths)
}

// optional uint32 assists = 21;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_assists() {
  _impl_.assists_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_assists() const {
  return _impl_.assists_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.assists)
  return _internal_assists();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_assists(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.assists_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_assists(uint32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.assists)
}

// optional uint32 gold_from_kills = 22;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_gold_from_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_gold_from_kills() const {
  return _internal_has_gold_from_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_gold_from_kills() {
  _impl_.gold_from_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_gold_from_kills() const {
  return _impl_.gold_from_kills_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::gold_from_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.gold_from_kills)
  return _internal_gold_from_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_gold_from_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.gold_from_kills_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_gold_from_kills(uint32_t value) {
  _internal_set_gold_from_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.gold_from_kills)
}

// optional uint32 gold_from_creeps = 23;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_gold_from_creeps() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_gold_from_creeps() const {
  return _internal_has_gold_from_creeps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_gold_from_creeps() {
  _impl_.gold_from_creeps_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_gold_from_creeps() const {
  return _impl_.gold_from_creeps_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::gold_from_creeps() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.gold_from_creeps)
  return _internal_gold_from_creeps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_gold_from_creeps(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.gold_from_creeps_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_gold_from_creeps(uint32_t value) {
  _internal_set_gold_from_creeps(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.gold_from_creeps)
}

// optional uint32 gold_shared = 24;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_gold_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_gold_shared() const {
  return _internal_has_gold_shared();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_gold_shared() {
  _impl_.gold_shared_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_gold_shared() const {
  return _impl_.gold_shared_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::gold_shared() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.gold_shared)
  return _internal_gold_shared();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_gold_shared(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.gold_shared_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_gold_shared(uint32_t value) {
  _internal_set_gold_shared(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.gold_shared)
}

// optional uint32 xp_from_kills = 25;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_xp_from_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_xp_from_kills() const {
  return _internal_has_xp_from_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_xp_from_kills() {
  _impl_.xp_from_kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_xp_from_kills() const {
  return _impl_.xp_from_kills_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::xp_from_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.xp_from_kills)
  return _internal_xp_from_kills();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_xp_from_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.xp_from_kills_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_xp_from_kills(uint32_t value) {
  _internal_set_xp_from_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.xp_from_kills)
}

// optional uint32 xp_from_creeps = 26;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_xp_from_creeps() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_xp_from_creeps() const {
  return _internal_has_xp_from_creeps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_xp_from_creeps() {
  _impl_.xp_from_creeps_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_xp_from_creeps() const {
  return _impl_.xp_from_creeps_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::xp_from_creeps() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.xp_from_creeps)
  return _internal_xp_from_creeps();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_xp_from_creeps(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.xp_from_creeps_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_xp_from_creeps(uint32_t value) {
  _internal_set_xp_from_creeps(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.xp_from_creeps)
}

// optional uint32 total_xp = 27;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_xp() const {
  return _internal_has_total_xp();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_xp() {
  _impl_.total_xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_total_xp() const {
  return _impl_.total_xp_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::total_xp() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_xp)
  return _internal_total_xp();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.total_xp_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_xp(uint32_t value) {
  _internal_set_total_xp(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_xp)
}

// optional uint32 ability_casts = 28;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_ability_casts() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_ability_casts() const {
  return _internal_has_ability_casts();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_ability_casts() {
  _impl_.ability_casts_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_ability_casts() const {
  return _impl_.ability_casts_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::ability_casts() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.ability_casts)
  return _internal_ability_casts();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_ability_casts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.ability_casts_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_ability_casts(uint32_t value) {
  _internal_set_ability_casts(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.ability_casts)
}

// optional uint32 item_casts = 29;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_item_casts() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_item_casts() const {
  return _internal_has_item_casts();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_item_casts() {
  _impl_.item_casts_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_item_casts() const {
  return _impl_.item_casts_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::item_casts() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.item_casts)
  return _internal_item_casts();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_item_casts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.item_casts_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_item_casts(uint32_t value) {
  _internal_set_item_casts(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.item_casts)
}

// optional float total_time_stunned = 30;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_total_time_stunned() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_total_time_stunned() const {
  return _internal_has_total_time_stunned();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_total_time_stunned() {
  _impl_.total_time_stunned_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::_internal_total_time_stunned() const {
  return _impl_.total_time_stunned_;
}
inline float CMsgDetailedGameStats_PlayerStatEntry::total_time_stunned() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.total_time_stunned)
  return _internal_total_time_stunned();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_total_time_stunned(float value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.total_time_stunned_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_total_time_stunned(float value) {
  _internal_set_total_time_stunned(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.total_time_stunned)
}

// optional uint32 item_count = 31;
inline bool CMsgDetailedGameStats_PlayerStatEntry::_internal_has_item_count() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerStatEntry::has_item_count() const {
  return _internal_has_item_count();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::clear_item_count() {
  _impl_.item_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::_internal_item_count() const {
  return _impl_.item_count_;
}
inline uint32_t CMsgDetailedGameStats_PlayerStatEntry::item_count() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerStatEntry.item_count)
  return _internal_item_count();
}
inline void CMsgDetailedGameStats_PlayerStatEntry::_internal_set_item_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.item_count_ = value;
}
inline void CMsgDetailedGameStats_PlayerStatEntry::set_item_count(uint32_t value) {
  _internal_set_item_count(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerStatEntry.item_count)
}

// -------------------------------------------------------------------

// CMsgDetailedGameStats_GameStats

// optional uint32 tower_death_time_t1 = 1;
inline bool CMsgDetailedGameStats_GameStats::_internal_has_tower_death_time_t1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_GameStats::has_tower_death_time_t1() const {
  return _internal_has_tower_death_time_t1();
}
inline void CMsgDetailedGameStats_GameStats::clear_tower_death_time_t1() {
  _impl_.tower_death_time_t1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDetailedGameStats_GameStats::_internal_tower_death_time_t1() const {
  return _impl_.tower_death_time_t1_;
}
inline uint32_t CMsgDetailedGameStats_GameStats::tower_death_time_t1() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.GameStats.tower_death_time_t1)
  return _internal_tower_death_time_t1();
}
inline void CMsgDetailedGameStats_GameStats::_internal_set_tower_death_time_t1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tower_death_time_t1_ = value;
}
inline void CMsgDetailedGameStats_GameStats::set_tower_death_time_t1(uint32_t value) {
  _internal_set_tower_death_time_t1(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.GameStats.tower_death_time_t1)
}

// optional uint32 tower_death_time_t2 = 2;
inline bool CMsgDetailedGameStats_GameStats::_internal_has_tower_death_time_t2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_GameStats::has_tower_death_time_t2() const {
  return _internal_has_tower_death_time_t2();
}
inline void CMsgDetailedGameStats_GameStats::clear_tower_death_time_t2() {
  _impl_.tower_death_time_t2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDetailedGameStats_GameStats::_internal_tower_death_time_t2() const {
  return _impl_.tower_death_time_t2_;
}
inline uint32_t CMsgDetailedGameStats_GameStats::tower_death_time_t2() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.GameStats.tower_death_time_t2)
  return _internal_tower_death_time_t2();
}
inline void CMsgDetailedGameStats_GameStats::_internal_set_tower_death_time_t2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tower_death_time_t2_ = value;
}
inline void CMsgDetailedGameStats_GameStats::set_tower_death_time_t2(uint32_t value) {
  _internal_set_tower_death_time_t2(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.GameStats.tower_death_time_t2)
}

// optional uint32 tower_death_time_t3 = 3;
inline bool CMsgDetailedGameStats_GameStats::_internal_has_tower_death_time_t3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_GameStats::has_tower_death_time_t3() const {
  return _internal_has_tower_death_time_t3();
}
inline void CMsgDetailedGameStats_GameStats::clear_tower_death_time_t3() {
  _impl_.tower_death_time_t3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDetailedGameStats_GameStats::_internal_tower_death_time_t3() const {
  return _impl_.tower_death_time_t3_;
}
inline uint32_t CMsgDetailedGameStats_GameStats::tower_death_time_t3() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.GameStats.tower_death_time_t3)
  return _internal_tower_death_time_t3();
}
inline void CMsgDetailedGameStats_GameStats::_internal_set_tower_death_time_t3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.tower_death_time_t3_ = value;
}
inline void CMsgDetailedGameStats_GameStats::set_tower_death_time_t3(uint32_t value) {
  _internal_set_tower_death_time_t3(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.GameStats.tower_death_time_t3)
}

// -------------------------------------------------------------------

// CMsgDetailedGameStats_MinuteEntry

// optional uint32 minute = 1;
inline bool CMsgDetailedGameStats_MinuteEntry::_internal_has_minute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_MinuteEntry::has_minute() const {
  return _internal_has_minute();
}
inline void CMsgDetailedGameStats_MinuteEntry::clear_minute() {
  _impl_.minute_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDetailedGameStats_MinuteEntry::_internal_minute() const {
  return _impl_.minute_;
}
inline uint32_t CMsgDetailedGameStats_MinuteEntry::minute() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.MinuteEntry.minute)
  return _internal_minute();
}
inline void CMsgDetailedGameStats_MinuteEntry::_internal_set_minute(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.minute_ = value;
}
inline void CMsgDetailedGameStats_MinuteEntry::set_minute(uint32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.MinuteEntry.minute)
}

// repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
inline int CMsgDetailedGameStats_MinuteEntry::_internal_stats_size() const {
  return _impl_.stats_.size();
}
inline int CMsgDetailedGameStats_MinuteEntry::stats_size() const {
  return _internal_stats_size();
}
inline void CMsgDetailedGameStats_MinuteEntry::clear_stats() {
  _impl_.stats_.Clear();
}
inline ::CMsgDetailedGameStats_PlayerStatEntry* CMsgDetailedGameStats_MinuteEntry::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDetailedGameStats.MinuteEntry.stats)
  return _impl_.stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerStatEntry >*
CMsgDetailedGameStats_MinuteEntry::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDetailedGameStats.MinuteEntry.stats)
  return &_impl_.stats_;
}
inline const ::CMsgDetailedGameStats_PlayerStatEntry& CMsgDetailedGameStats_MinuteEntry::_internal_stats(int index) const {
  return _impl_.stats_.Get(index);
}
inline const ::CMsgDetailedGameStats_PlayerStatEntry& CMsgDetailedGameStats_MinuteEntry::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.MinuteEntry.stats)
  return _internal_stats(index);
}
inline ::CMsgDetailedGameStats_PlayerStatEntry* CMsgDetailedGameStats_MinuteEntry::_internal_add_stats() {
  return _impl_.stats_.Add();
}
inline ::CMsgDetailedGameStats_PlayerStatEntry* CMsgDetailedGameStats_MinuteEntry::add_stats() {
  ::CMsgDetailedGameStats_PlayerStatEntry* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:CMsgDetailedGameStats.MinuteEntry.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerStatEntry >&
CMsgDetailedGameStats_MinuteEntry::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDetailedGameStats.MinuteEntry.stats)
  return _impl_.stats_;
}

// -------------------------------------------------------------------

// CMsgDetailedGameStats_PlayerInfo

// optional uint32 account_id = 1;
inline bool CMsgDetailedGameStats_PlayerInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDetailedGameStats_PlayerInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerInfo.account_id)
  return _internal_account_id();
}
inline void CMsgDetailedGameStats_PlayerInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgDetailedGameStats_PlayerInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerInfo.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDetailedGameStats_PlayerInfo::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerInfo::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgDetailedGameStats_PlayerInfo::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerInfo.hero_id)
  return _internal_hero_id();
}
inline void CMsgDetailedGameStats_PlayerInfo::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_ = value;
}
inline void CMsgDetailedGameStats_PlayerInfo::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerInfo.hero_id)
}

// optional uint32 player_slot = 3;
inline bool CMsgDetailedGameStats_PlayerInfo::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDetailedGameStats_PlayerInfo::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgDetailedGameStats_PlayerInfo::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgDetailedGameStats_PlayerInfo::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.PlayerInfo.player_slot)
  return _internal_player_slot();
}
inline void CMsgDetailedGameStats_PlayerInfo::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_slot_ = value;
}
inline void CMsgDetailedGameStats_PlayerInfo::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDetailedGameStats.PlayerInfo.player_slot)
}

// -------------------------------------------------------------------

// CMsgDetailedGameStats

// repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
inline int CMsgDetailedGameStats::_internal_minutes_size() const {
  return _impl_.minutes_.size();
}
inline int CMsgDetailedGameStats::minutes_size() const {
  return _internal_minutes_size();
}
inline void CMsgDetailedGameStats::clear_minutes() {
  _impl_.minutes_.Clear();
}
inline ::CMsgDetailedGameStats_MinuteEntry* CMsgDetailedGameStats::mutable_minutes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDetailedGameStats.minutes)
  return _impl_.minutes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_MinuteEntry >*
CMsgDetailedGameStats::mutable_minutes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDetailedGameStats.minutes)
  return &_impl_.minutes_;
}
inline const ::CMsgDetailedGameStats_MinuteEntry& CMsgDetailedGameStats::_internal_minutes(int index) const {
  return _impl_.minutes_.Get(index);
}
inline const ::CMsgDetailedGameStats_MinuteEntry& CMsgDetailedGameStats::minutes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.minutes)
  return _internal_minutes(index);
}
inline ::CMsgDetailedGameStats_MinuteEntry* CMsgDetailedGameStats::_internal_add_minutes() {
  return _impl_.minutes_.Add();
}
inline ::CMsgDetailedGameStats_MinuteEntry* CMsgDetailedGameStats::add_minutes() {
  ::CMsgDetailedGameStats_MinuteEntry* _add = _internal_add_minutes();
  // @@protoc_insertion_point(field_add:CMsgDetailedGameStats.minutes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_MinuteEntry >&
CMsgDetailedGameStats::minutes() const {
  // @@protoc_insertion_point(field_list:CMsgDetailedGameStats.minutes)
  return _impl_.minutes_;
}

// repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
inline int CMsgDetailedGameStats::_internal_player_info_size() const {
  return _impl_.player_info_.size();
}
inline int CMsgDetailedGameStats::player_info_size() const {
  return _internal_player_info_size();
}
inline void CMsgDetailedGameStats::clear_player_info() {
  _impl_.player_info_.Clear();
}
inline ::CMsgDetailedGameStats_PlayerInfo* CMsgDetailedGameStats::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDetailedGameStats.player_info)
  return _impl_.player_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerInfo >*
CMsgDetailedGameStats::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDetailedGameStats.player_info)
  return &_impl_.player_info_;
}
inline const ::CMsgDetailedGameStats_PlayerInfo& CMsgDetailedGameStats::_internal_player_info(int index) const {
  return _impl_.player_info_.Get(index);
}
inline const ::CMsgDetailedGameStats_PlayerInfo& CMsgDetailedGameStats::player_info(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.player_info)
  return _internal_player_info(index);
}
inline ::CMsgDetailedGameStats_PlayerInfo* CMsgDetailedGameStats::_internal_add_player_info() {
  return _impl_.player_info_.Add();
}
inline ::CMsgDetailedGameStats_PlayerInfo* CMsgDetailedGameStats::add_player_info() {
  ::CMsgDetailedGameStats_PlayerInfo* _add = _internal_add_player_info();
  // @@protoc_insertion_point(field_add:CMsgDetailedGameStats.player_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDetailedGameStats_PlayerInfo >&
CMsgDetailedGameStats::player_info() const {
  // @@protoc_insertion_point(field_list:CMsgDetailedGameStats.player_info)
  return _impl_.player_info_;
}

// optional .CMsgDetailedGameStats.GameStats game_stats = 3;
inline bool CMsgDetailedGameStats::_internal_has_game_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_stats_ != nullptr);
  return value;
}
inline bool CMsgDetailedGameStats::has_game_stats() const {
  return _internal_has_game_stats();
}
inline void CMsgDetailedGameStats::clear_game_stats() {
  if (_impl_.game_stats_ != nullptr) _impl_.game_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDetailedGameStats_GameStats& CMsgDetailedGameStats::_internal_game_stats() const {
  const ::CMsgDetailedGameStats_GameStats* p = _impl_.game_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDetailedGameStats_GameStats&>(
      ::_CMsgDetailedGameStats_GameStats_default_instance_);
}
inline const ::CMsgDetailedGameStats_GameStats& CMsgDetailedGameStats::game_stats() const {
  // @@protoc_insertion_point(field_get:CMsgDetailedGameStats.game_stats)
  return _internal_game_stats();
}
inline void CMsgDetailedGameStats::unsafe_arena_set_allocated_game_stats(
    ::CMsgDetailedGameStats_GameStats* game_stats) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_stats_);
  }
  _impl_.game_stats_ = game_stats;
  if (game_stats) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDetailedGameStats.game_stats)
}
inline ::CMsgDetailedGameStats_GameStats* CMsgDetailedGameStats::release_game_stats() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDetailedGameStats_GameStats* temp = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDetailedGameStats_GameStats* CMsgDetailedGameStats::unsafe_arena_release_game_stats() {
  // @@protoc_insertion_point(field_release:CMsgDetailedGameStats.game_stats)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDetailedGameStats_GameStats* temp = _impl_.game_stats_;
  _impl_.game_stats_ = nullptr;
  return temp;
}
inline ::CMsgDetailedGameStats_GameStats* CMsgDetailedGameStats::_internal_mutable_game_stats() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.game_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDetailedGameStats_GameStats>(GetArenaForAllocation());
    _impl_.game_stats_ = p;
  }
  return _impl_.game_stats_;
}
inline ::CMsgDetailedGameStats_GameStats* CMsgDetailedGameStats::mutable_game_stats() {
  ::CMsgDetailedGameStats_GameStats* _msg = _internal_mutable_game_stats();
  // @@protoc_insertion_point(field_mutable:CMsgDetailedGameStats.game_stats)
  return _msg;
}
inline void CMsgDetailedGameStats::set_allocated_game_stats(::CMsgDetailedGameStats_GameStats* game_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_stats_;
  }
  if (game_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_stats);
    if (message_arena != submessage_arena) {
      game_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_stats, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.game_stats_ = game_stats;
  // @@protoc_insertion_point(field_set_allocated:CMsgDetailedGameStats.game_stats)
}

// -------------------------------------------------------------------

// CMsgNeutralItemStats_NeutralItem

// optional int32 item_id = 1 [default = -1];
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_item_id() {
  _impl_.item_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgNeutralItemStats_NeutralItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t CMsgNeutralItemStats_NeutralItem::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.item_id)
  return _internal_item_id();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_item_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.item_id_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.item_id)
}

// optional uint32 time_dropped = 2;
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_time_dropped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_time_dropped() const {
  return _internal_has_time_dropped();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_time_dropped() {
  _impl_.time_dropped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::_internal_time_dropped() const {
  return _impl_.time_dropped_;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::time_dropped() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.time_dropped)
  return _internal_time_dropped();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_time_dropped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_dropped_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_time_dropped(uint32_t value) {
  _internal_set_time_dropped(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.time_dropped)
}

// optional uint32 team = 3;
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_team() const {
  return _internal_has_team();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::team() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.team)
  return _internal_team();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.team)
}

// optional uint32 time_last_equipped = 4;
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_time_last_equipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_time_last_equipped() const {
  return _internal_has_time_last_equipped();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_time_last_equipped() {
  _impl_.time_last_equipped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::_internal_time_last_equipped() const {
  return _impl_.time_last_equipped_;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::time_last_equipped() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.time_last_equipped)
  return _internal_time_last_equipped();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_time_last_equipped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_last_equipped_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_time_last_equipped(uint32_t value) {
  _internal_set_time_last_equipped(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.time_last_equipped)
}

// optional uint32 time_last_unequipped = 5;
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_time_last_unequipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_time_last_unequipped() const {
  return _internal_has_time_last_unequipped();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_time_last_unequipped() {
  _impl_.time_last_unequipped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::_internal_time_last_unequipped() const {
  return _impl_.time_last_unequipped_;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::time_last_unequipped() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.time_last_unequipped)
  return _internal_time_last_unequipped();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_time_last_unequipped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_last_unequipped_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_time_last_unequipped(uint32_t value) {
  _internal_set_time_last_unequipped(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.time_last_unequipped)
}

// optional uint32 duration_equipped = 6;
inline bool CMsgNeutralItemStats_NeutralItem::_internal_has_duration_equipped() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgNeutralItemStats_NeutralItem::has_duration_equipped() const {
  return _internal_has_duration_equipped();
}
inline void CMsgNeutralItemStats_NeutralItem::clear_duration_equipped() {
  _impl_.duration_equipped_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::_internal_duration_equipped() const {
  return _impl_.duration_equipped_;
}
inline uint32_t CMsgNeutralItemStats_NeutralItem::duration_equipped() const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.NeutralItem.duration_equipped)
  return _internal_duration_equipped();
}
inline void CMsgNeutralItemStats_NeutralItem::_internal_set_duration_equipped(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.duration_equipped_ = value;
}
inline void CMsgNeutralItemStats_NeutralItem::set_duration_equipped(uint32_t value) {
  _internal_set_duration_equipped(value);
  // @@protoc_insertion_point(field_set:CMsgNeutralItemStats.NeutralItem.duration_equipped)
}

// -------------------------------------------------------------------

// CMsgNeutralItemStats

// repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
inline int CMsgNeutralItemStats::_internal_neutral_items_size() const {
  return _impl_.neutral_items_.size();
}
inline int CMsgNeutralItemStats::neutral_items_size() const {
  return _internal_neutral_items_size();
}
inline void CMsgNeutralItemStats::clear_neutral_items() {
  _impl_.neutral_items_.Clear();
}
inline ::CMsgNeutralItemStats_NeutralItem* CMsgNeutralItemStats::mutable_neutral_items(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgNeutralItemStats.neutral_items)
  return _impl_.neutral_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNeutralItemStats_NeutralItem >*
CMsgNeutralItemStats::mutable_neutral_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgNeutralItemStats.neutral_items)
  return &_impl_.neutral_items_;
}
inline const ::CMsgNeutralItemStats_NeutralItem& CMsgNeutralItemStats::_internal_neutral_items(int index) const {
  return _impl_.neutral_items_.Get(index);
}
inline const ::CMsgNeutralItemStats_NeutralItem& CMsgNeutralItemStats::neutral_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgNeutralItemStats.neutral_items)
  return _internal_neutral_items(index);
}
inline ::CMsgNeutralItemStats_NeutralItem* CMsgNeutralItemStats::_internal_add_neutral_items() {
  return _impl_.neutral_items_.Add();
}
inline ::CMsgNeutralItemStats_NeutralItem* CMsgNeutralItemStats::add_neutral_items() {
  ::CMsgNeutralItemStats_NeutralItem* _add = _internal_add_neutral_items();
  // @@protoc_insertion_point(field_add:CMsgNeutralItemStats.neutral_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgNeutralItemStats_NeutralItem >&
CMsgNeutralItemStats::neutral_items() const {
  // @@protoc_insertion_point(field_list:CMsgNeutralItemStats.neutral_items)
  return _impl_.neutral_items_;
}

// -------------------------------------------------------------------

// CMsgGCToServerLobbyHeroBanRates_HeroBanEntry

// optional uint32 hero_id = 1;
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.hero_id)
  return _internal_hero_id();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.hero_id)
}

// optional uint32 ban_count = 2;
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_has_ban_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::has_ban_count() const {
  return _internal_has_ban_count();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::clear_ban_count() {
  _impl_.ban_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_ban_count() const {
  return _impl_.ban_count_;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::ban_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.ban_count)
  return _internal_ban_count();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_set_ban_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ban_count_ = value;
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::set_ban_count(uint32_t value) {
  _internal_set_ban_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.ban_count)
}

// optional uint32 pick_count = 3;
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_has_pick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::has_pick_count() const {
  return _internal_has_pick_count();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::clear_pick_count() {
  _impl_.pick_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_pick_count() const {
  return _impl_.pick_count_;
}
inline uint32_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::pick_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.pick_count)
  return _internal_pick_count();
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_internal_set_pick_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pick_count_ = value;
}
inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::set_pick_count(uint32_t value) {
  _internal_set_pick_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry.pick_count)
}

// -------------------------------------------------------------------

// CMsgGCToServerLobbyHeroBanRates

// repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
inline int CMsgGCToServerLobbyHeroBanRates::_internal_ban_data_size() const {
  return _impl_.ban_data_.size();
}
inline int CMsgGCToServerLobbyHeroBanRates::ban_data_size() const {
  return _internal_ban_data_size();
}
inline void CMsgGCToServerLobbyHeroBanRates::clear_ban_data() {
  _impl_.ban_data_.Clear();
}
inline ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* CMsgGCToServerLobbyHeroBanRates::mutable_ban_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToServerLobbyHeroBanRates.ban_data)
  return _impl_.ban_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >*
CMsgGCToServerLobbyHeroBanRates::mutable_ban_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToServerLobbyHeroBanRates.ban_data)
  return &_impl_.ban_data_;
}
inline const ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& CMsgGCToServerLobbyHeroBanRates::_internal_ban_data(int index) const {
  return _impl_.ban_data_.Get(index);
}
inline const ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& CMsgGCToServerLobbyHeroBanRates::ban_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerLobbyHeroBanRates.ban_data)
  return _internal_ban_data(index);
}
inline ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* CMsgGCToServerLobbyHeroBanRates::_internal_add_ban_data() {
  return _impl_.ban_data_.Add();
}
inline ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* CMsgGCToServerLobbyHeroBanRates::add_ban_data() {
  ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* _add = _internal_add_ban_data();
  // @@protoc_insertion_point(field_add:CMsgGCToServerLobbyHeroBanRates.ban_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >&
CMsgGCToServerLobbyHeroBanRates::ban_data() const {
  // @@protoc_insertion_point(field_list:CMsgGCToServerLobbyHeroBanRates.ban_data)
  return _impl_.ban_data_;
}

// -------------------------------------------------------------------

// CMsgSignOutGuildContractProgress_CompletedGuildEventContracts

// optional uint32 guild_id = 1;
inline bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.guild_id)
  return _internal_guild_id();
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guild_id_ = value;
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.guild_id)
}

// optional uint32 event_id = 2;
inline bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.event_id)
}

// repeated uint64 contracts = 3;
inline int CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_contracts_size() const {
  return _impl_.contracts_.size();
}
inline int CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::contracts_size() const {
  return _internal_contracts_size();
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::clear_contracts() {
  _impl_.contracts_.Clear();
}
inline uint64_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_contracts(int index) const {
  return _impl_.contracts_.Get(index);
}
inline uint64_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::contracts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.contracts)
  return _internal_contracts(index);
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::set_contracts(int index, uint64_t value) {
  _impl_.contracts_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.contracts)
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_add_contracts(uint64_t value) {
  _impl_.contracts_.Add(value);
}
inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::add_contracts(uint64_t value) {
  _internal_add_contracts(value);
  // @@protoc_insertion_point(field_add:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.contracts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_contracts() const {
  return _impl_.contracts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::contracts() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.contracts)
  return _internal_contracts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_internal_mutable_contracts() {
  return &_impl_.contracts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts.contracts)
  return _internal_mutable_contracts();
}

// -------------------------------------------------------------------

// CMsgSignOutGuildContractProgress_PlayerContract

// optional uint32 account_id = 1;
inline bool CMsgSignOutGuildContractProgress_PlayerContract::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutGuildContractProgress_PlayerContract::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutGuildContractProgress_PlayerContract::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutGuildContractProgress_PlayerContract::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSignOutGuildContractProgress_PlayerContract::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.PlayerContract.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutGuildContractProgress_PlayerContract::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutGuildContractProgress_PlayerContract::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildContractProgress.PlayerContract.account_id)
}

// repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
inline int CMsgSignOutGuildContractProgress_PlayerContract::_internal_completed_contracts_size() const {
  return _impl_.completed_contracts_.size();
}
inline int CMsgSignOutGuildContractProgress_PlayerContract::completed_contracts_size() const {
  return _internal_completed_contracts_size();
}
inline void CMsgSignOutGuildContractProgress_PlayerContract::clear_completed_contracts() {
  _impl_.completed_contracts_.Clear();
}
inline ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* CMsgSignOutGuildContractProgress_PlayerContract::mutable_completed_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts)
  return _impl_.completed_contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >*
CMsgSignOutGuildContractProgress_PlayerContract::mutable_completed_contracts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts)
  return &_impl_.completed_contracts_;
}
inline const ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& CMsgSignOutGuildContractProgress_PlayerContract::_internal_completed_contracts(int index) const {
  return _impl_.completed_contracts_.Get(index);
}
inline const ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& CMsgSignOutGuildContractProgress_PlayerContract::completed_contracts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts)
  return _internal_completed_contracts(index);
}
inline ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* CMsgSignOutGuildContractProgress_PlayerContract::_internal_add_completed_contracts() {
  return _impl_.completed_contracts_.Add();
}
inline ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* CMsgSignOutGuildContractProgress_PlayerContract::add_completed_contracts() {
  ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* _add = _internal_add_completed_contracts();
  // @@protoc_insertion_point(field_add:CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >&
CMsgSignOutGuildContractProgress_PlayerContract::completed_contracts() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGuildContractProgress.PlayerContract.completed_contracts)
  return _impl_.completed_contracts_;
}

// -------------------------------------------------------------------

// CMsgSignOutGuildContractProgress

// repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
inline int CMsgSignOutGuildContractProgress::_internal_player_contracts_size() const {
  return _impl_.player_contracts_.size();
}
inline int CMsgSignOutGuildContractProgress::player_contracts_size() const {
  return _internal_player_contracts_size();
}
inline void CMsgSignOutGuildContractProgress::clear_player_contracts() {
  _impl_.player_contracts_.Clear();
}
inline ::CMsgSignOutGuildContractProgress_PlayerContract* CMsgSignOutGuildContractProgress::mutable_player_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGuildContractProgress.player_contracts)
  return _impl_.player_contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_PlayerContract >*
CMsgSignOutGuildContractProgress::mutable_player_contracts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGuildContractProgress.player_contracts)
  return &_impl_.player_contracts_;
}
inline const ::CMsgSignOutGuildContractProgress_PlayerContract& CMsgSignOutGuildContractProgress::_internal_player_contracts(int index) const {
  return _impl_.player_contracts_.Get(index);
}
inline const ::CMsgSignOutGuildContractProgress_PlayerContract& CMsgSignOutGuildContractProgress::player_contracts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildContractProgress.player_contracts)
  return _internal_player_contracts(index);
}
inline ::CMsgSignOutGuildContractProgress_PlayerContract* CMsgSignOutGuildContractProgress::_internal_add_player_contracts() {
  return _impl_.player_contracts_.Add();
}
inline ::CMsgSignOutGuildContractProgress_PlayerContract* CMsgSignOutGuildContractProgress::add_player_contracts() {
  ::CMsgSignOutGuildContractProgress_PlayerContract* _add = _internal_add_player_contracts();
  // @@protoc_insertion_point(field_add:CMsgSignOutGuildContractProgress.player_contracts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildContractProgress_PlayerContract >&
CMsgSignOutGuildContractProgress::player_contracts() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGuildContractProgress.player_contracts)
  return _impl_.player_contracts_;
}

// -------------------------------------------------------------------

// CMsgSignOutGuildChallengeProgress_ChallengeProgress

// optional uint32 guild_id = 1;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.guild_id)
  return _internal_guild_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guild_id_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.guild_id)
}

// optional uint32 event_id = 2;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.event_id)
  return _internal_event_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.event_id)
}

// optional uint32 challenge_instance_id = 3;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_challenge_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_challenge_instance_id() {
  _impl_.challenge_instance_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_challenge_instance_id() const {
  return _impl_.challenge_instance_id_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_challenge_instance_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_instance_id_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_challenge_instance_id(uint32_t value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_instance_id)
}

// optional uint32 challenge_instance_timestamp = 4;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_challenge_instance_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_challenge_instance_timestamp() const {
  return _internal_has_challenge_instance_timestamp();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_challenge_instance_timestamp() {
  _impl_.challenge_instance_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_challenge_instance_timestamp() const {
  return _impl_.challenge_instance_timestamp_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::challenge_instance_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_instance_timestamp)
  return _internal_challenge_instance_timestamp();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_challenge_instance_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.challenge_instance_timestamp_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_challenge_instance_timestamp(uint32_t value) {
  _internal_set_challenge_instance_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_instance_timestamp)
}

// optional uint32 challenge_period_serial = 5;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_challenge_period_serial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_challenge_period_serial() const {
  return _internal_has_challenge_period_serial();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_challenge_period_serial() {
  _impl_.challenge_period_serial_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_challenge_period_serial() const {
  return _impl_.challenge_period_serial_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::challenge_period_serial() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_period_serial)
  return _internal_challenge_period_serial();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_challenge_period_serial(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.challenge_period_serial_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_challenge_period_serial(uint32_t value) {
  _internal_set_challenge_period_serial(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_period_serial)
}

// optional uint32 progress = 6;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_progress() const {
  return _internal_has_progress();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_progress() {
  _impl_.progress_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::progress() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.progress)
  return _internal_progress();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_progress(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.progress_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.progress)
}

// optional uint32 challenge_parameter = 7;
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_has_challenge_parameter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::clear_challenge_parameter() {
  _impl_.challenge_parameter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_challenge_parameter() const {
  return _impl_.challenge_parameter_;
}
inline uint32_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::_internal_set_challenge_parameter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.challenge_parameter_ = value;
}
inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::set_challenge_parameter(uint32_t value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutGuildChallengeProgress.ChallengeProgress.challenge_parameter)
}

// -------------------------------------------------------------------

// CMsgSignOutGuildChallengeProgress

// repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
inline int CMsgSignOutGuildChallengeProgress::_internal_guild_challenges_progresses_size() const {
  return _impl_.guild_challenges_progresses_.size();
}
inline int CMsgSignOutGuildChallengeProgress::guild_challenges_progresses_size() const {
  return _internal_guild_challenges_progresses_size();
}
inline void CMsgSignOutGuildChallengeProgress::clear_guild_challenges_progresses() {
  _impl_.guild_challenges_progresses_.Clear();
}
inline ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* CMsgSignOutGuildChallengeProgress::mutable_guild_challenges_progresses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutGuildChallengeProgress.guild_challenges_progresses)
  return _impl_.guild_challenges_progresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >*
CMsgSignOutGuildChallengeProgress::mutable_guild_challenges_progresses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutGuildChallengeProgress.guild_challenges_progresses)
  return &_impl_.guild_challenges_progresses_;
}
inline const ::CMsgSignOutGuildChallengeProgress_ChallengeProgress& CMsgSignOutGuildChallengeProgress::_internal_guild_challenges_progresses(int index) const {
  return _impl_.guild_challenges_progresses_.Get(index);
}
inline const ::CMsgSignOutGuildChallengeProgress_ChallengeProgress& CMsgSignOutGuildChallengeProgress::guild_challenges_progresses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutGuildChallengeProgress.guild_challenges_progresses)
  return _internal_guild_challenges_progresses(index);
}
inline ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* CMsgSignOutGuildChallengeProgress::_internal_add_guild_challenges_progresses() {
  return _impl_.guild_challenges_progresses_.Add();
}
inline ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* CMsgSignOutGuildChallengeProgress::add_guild_challenges_progresses() {
  ::CMsgSignOutGuildChallengeProgress_ChallengeProgress* _add = _internal_add_guild_challenges_progresses();
  // @@protoc_insertion_point(field_add:CMsgSignOutGuildChallengeProgress.guild_challenges_progresses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >&
CMsgSignOutGuildChallengeProgress::guild_challenges_progresses() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutGuildChallengeProgress.guild_challenges_progresses)
  return _impl_.guild_challenges_progresses_;
}

// -------------------------------------------------------------------

// CMsgSignOutMVPStats_Player_KillEaterEvent

// required uint32 event_type = 1;
inline bool CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player_KillEaterEvent::has_event_type() const {
  return _internal_has_event_type();
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::clear_event_type() {
  _impl_.event_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_event_type() const {
  return _impl_.event_type_;
}
inline uint32_t CMsgSignOutMVPStats_Player_KillEaterEvent::event_type() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.KillEaterEvent.event_type)
  return _internal_event_type();
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_set_event_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_type_ = value;
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::set_event_type(uint32_t value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.KillEaterEvent.event_type)
}

// required uint32 amount = 2;
inline bool CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player_KillEaterEvent::has_amount() const {
  return _internal_has_amount();
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::clear_amount() {
  _impl_.amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_amount() const {
  return _impl_.amount_;
}
inline uint32_t CMsgSignOutMVPStats_Player_KillEaterEvent::amount() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.KillEaterEvent.amount)
  return _internal_amount();
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::_internal_set_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.amount_ = value;
}
inline void CMsgSignOutMVPStats_Player_KillEaterEvent::set_amount(uint32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.KillEaterEvent.amount)
}

// -------------------------------------------------------------------

// CMsgSignOutMVPStats_Player

// optional uint32 team_id = 1;
inline bool CMsgSignOutMVPStats_Player::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgSignOutMVPStats_Player::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgSignOutMVPStats_Player::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.team_id)
  return _internal_team_id();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.team_id)
}

// optional uint32 team_networth_rank = 2;
inline bool CMsgSignOutMVPStats_Player::_internal_has_team_networth_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_team_networth_rank() const {
  return _internal_has_team_networth_rank();
}
inline void CMsgSignOutMVPStats_Player::clear_team_networth_rank() {
  _impl_.team_networth_rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_team_networth_rank() const {
  return _impl_.team_networth_rank_;
}
inline uint32_t CMsgSignOutMVPStats_Player::team_networth_rank() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.team_networth_rank)
  return _internal_team_networth_rank();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_team_networth_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_networth_rank_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_team_networth_rank(uint32_t value) {
  _internal_set_team_networth_rank(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.team_networth_rank)
}

// optional uint32 account_id = 3;
inline bool CMsgSignOutMVPStats_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgSignOutMVPStats_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgSignOutMVPStats_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.account_id)
  return _internal_account_id();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.account_id_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.account_id)
}

// optional uint32 player_slot = 32;
inline bool CMsgSignOutMVPStats_Player::_internal_has_player_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_player_slot() const {
  return _internal_has_player_slot();
}
inline void CMsgSignOutMVPStats_Player::clear_player_slot() {
  _impl_.player_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_player_slot() const {
  return _impl_.player_slot_;
}
inline uint32_t CMsgSignOutMVPStats_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.player_slot)
  return _internal_player_slot();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_player_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.player_slot_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_player_slot(uint32_t value) {
  _internal_set_player_slot(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.player_slot)
}

// optional uint32 rank = 33;
inline bool CMsgSignOutMVPStats_Player::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_rank() const {
  return _internal_has_rank();
}
inline void CMsgSignOutMVPStats_Player::clear_rank() {
  _impl_.rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CMsgSignOutMVPStats_Player::rank() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.rank)
  return _internal_rank();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.rank_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.rank)
}

// optional uint32 hero_id = 4;
inline bool CMsgSignOutMVPStats_Player::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSignOutMVPStats_Player::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSignOutMVPStats_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.hero_id)
  return _internal_hero_id();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.hero_id)
}

// optional uint32 role = 5;
inline bool CMsgSignOutMVPStats_Player::_internal_has_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_role() const {
  return _internal_has_role();
}
inline void CMsgSignOutMVPStats_Player::clear_role() {
  _impl_.role_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_role() const {
  return _impl_.role_;
}
inline uint32_t CMsgSignOutMVPStats_Player::role() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.role)
  return _internal_role();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_role(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.role_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_role(uint32_t value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.role)
}

// optional int32 kills = 6;
inline bool CMsgSignOutMVPStats_Player::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgSignOutMVPStats_Player::clear_kills() {
  _impl_.kills_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_kills() const {
  return _impl_.kills_;
}
inline int32_t CMsgSignOutMVPStats_Player::kills() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.kills)
  return _internal_kills();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_kills(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.kills_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_kills(int32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.kills)
}

// optional int32 deaths = 7;
inline bool CMsgSignOutMVPStats_Player::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgSignOutMVPStats_Player::clear_deaths() {
  _impl_.deaths_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_deaths() const {
  return _impl_.deaths_;
}
inline int32_t CMsgSignOutMVPStats_Player::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.deaths)
  return _internal_deaths();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_deaths(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.deaths_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_deaths(int32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.deaths)
}

// optional int32 assists = 8;
inline bool CMsgSignOutMVPStats_Player::_internal_has_assists() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgSignOutMVPStats_Player::clear_assists() {
  _impl_.assists_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_assists() const {
  return _impl_.assists_;
}
inline int32_t CMsgSignOutMVPStats_Player::assists() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.assists)
  return _internal_assists();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_assists(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.assists_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_assists(int32_t value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.assists)
}

// optional int32 xp = 9;
inline bool CMsgSignOutMVPStats_Player::_internal_has_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_xp() const {
  return _internal_has_xp();
}
inline void CMsgSignOutMVPStats_Player::clear_xp() {
  _impl_.xp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_xp() const {
  return _impl_.xp_;
}
inline int32_t CMsgSignOutMVPStats_Player::xp() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.xp)
  return _internal_xp();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_xp(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.xp_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_xp(int32_t value) {
  _internal_set_xp(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.xp)
}

// optional int32 net_worth = 10;
inline bool CMsgSignOutMVPStats_Player::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgSignOutMVPStats_Player::clear_net_worth() {
  _impl_.net_worth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline int32_t CMsgSignOutMVPStats_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.net_worth)
  return _internal_net_worth();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_net_worth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.net_worth_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_net_worth(int32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.net_worth)
}

// optional int32 support_gold_spent = 12;
inline bool CMsgSignOutMVPStats_Player::_internal_has_support_gold_spent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_support_gold_spent() const {
  return _internal_has_support_gold_spent();
}
inline void CMsgSignOutMVPStats_Player::clear_support_gold_spent() {
  _impl_.support_gold_spent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_support_gold_spent() const {
  return _impl_.support_gold_spent_;
}
inline int32_t CMsgSignOutMVPStats_Player::support_gold_spent() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.support_gold_spent)
  return _internal_support_gold_spent();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_support_gold_spent(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.support_gold_spent_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_support_gold_spent(int32_t value) {
  _internal_set_support_gold_spent(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.support_gold_spent)
}

// optional int32 wards_placed = 13;
inline bool CMsgSignOutMVPStats_Player::_internal_has_wards_placed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_wards_placed() const {
  return _internal_has_wards_placed();
}
inline void CMsgSignOutMVPStats_Player::clear_wards_placed() {
  _impl_.wards_placed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_wards_placed() const {
  return _impl_.wards_placed_;
}
inline int32_t CMsgSignOutMVPStats_Player::wards_placed() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.wards_placed)
  return _internal_wards_placed();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_wards_placed(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.wards_placed_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_wards_placed(int32_t value) {
  _internal_set_wards_placed(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.wards_placed)
}

// optional int32 wards_spotted_for_dewarding = 14;
inline bool CMsgSignOutMVPStats_Player::_internal_has_wards_spotted_for_dewarding() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_wards_spotted_for_dewarding() const {
  return _internal_has_wards_spotted_for_dewarding();
}
inline void CMsgSignOutMVPStats_Player::clear_wards_spotted_for_dewarding() {
  _impl_.wards_spotted_for_dewarding_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_wards_spotted_for_dewarding() const {
  return _impl_.wards_spotted_for_dewarding_;
}
inline int32_t CMsgSignOutMVPStats_Player::wards_spotted_for_dewarding() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.wards_spotted_for_dewarding)
  return _internal_wards_spotted_for_dewarding();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_wards_spotted_for_dewarding(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.wards_spotted_for_dewarding_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_wards_spotted_for_dewarding(int32_t value) {
  _internal_set_wards_spotted_for_dewarding(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.wards_spotted_for_dewarding)
}

// optional int32 camps_stacked = 15;
inline bool CMsgSignOutMVPStats_Player::_internal_has_camps_stacked() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_camps_stacked() const {
  return _internal_has_camps_stacked();
}
inline void CMsgSignOutMVPStats_Player::clear_camps_stacked() {
  _impl_.camps_stacked_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_camps_stacked() const {
  return _impl_.camps_stacked_;
}
inline int32_t CMsgSignOutMVPStats_Player::camps_stacked() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.camps_stacked)
  return _internal_camps_stacked();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_camps_stacked(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.camps_stacked_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_camps_stacked(int32_t value) {
  _internal_set_camps_stacked(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.camps_stacked)
}

// optional int32 last_hits = 16;
inline bool CMsgSignOutMVPStats_Player::_internal_has_last_hits() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgSignOutMVPStats_Player::clear_last_hits() {
  _impl_.last_hits_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_last_hits() const {
  return _impl_.last_hits_;
}
inline int32_t CMsgSignOutMVPStats_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.last_hits)
  return _internal_last_hits();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_last_hits(int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.last_hits_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_last_hits(int32_t value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.last_hits)
}

// optional int32 denies = 17;
inline bool CMsgSignOutMVPStats_Player::_internal_has_denies() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgSignOutMVPStats_Player::clear_denies() {
  _impl_.denies_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_denies() const {
  return _impl_.denies_;
}
inline int32_t CMsgSignOutMVPStats_Player::denies() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.denies)
  return _internal_denies();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_denies(int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.denies_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_denies(int32_t value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.denies)
}

// optional int32 building_damage = 19;
inline bool CMsgSignOutMVPStats_Player::_internal_has_building_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_building_damage() const {
  return _internal_has_building_damage();
}
inline void CMsgSignOutMVPStats_Player::clear_building_damage() {
  _impl_.building_damage_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_building_damage() const {
  return _impl_.building_damage_;
}
inline int32_t CMsgSignOutMVPStats_Player::building_damage() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.building_damage)
  return _internal_building_damage();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_building_damage(int32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.building_damage_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_building_damage(int32_t value) {
  _internal_set_building_damage(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.building_damage)
}

// optional int32 other_damage = 20;
inline bool CMsgSignOutMVPStats_Player::_internal_has_other_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_other_damage() const {
  return _internal_has_other_damage();
}
inline void CMsgSignOutMVPStats_Player::clear_other_damage() {
  _impl_.other_damage_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_other_damage() const {
  return _impl_.other_damage_;
}
inline int32_t CMsgSignOutMVPStats_Player::other_damage() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.other_damage)
  return _internal_other_damage();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_other_damage(int32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.other_damage_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_other_damage(int32_t value) {
  _internal_set_other_damage(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.other_damage)
}

// optional int32 triple_kills = 26;
inline bool CMsgSignOutMVPStats_Player::_internal_has_triple_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_triple_kills() const {
  return _internal_has_triple_kills();
}
inline void CMsgSignOutMVPStats_Player::clear_triple_kills() {
  _impl_.triple_kills_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_triple_kills() const {
  return _impl_.triple_kills_;
}
inline int32_t CMsgSignOutMVPStats_Player::triple_kills() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.triple_kills)
  return _internal_triple_kills();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_triple_kills(int32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.triple_kills_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_triple_kills(int32_t value) {
  _internal_set_triple_kills(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.triple_kills)
}

// optional int32 rampages = 28;
inline bool CMsgSignOutMVPStats_Player::_internal_has_rampages() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_rampages() const {
  return _internal_has_rampages();
}
inline void CMsgSignOutMVPStats_Player::clear_rampages() {
  _impl_.rampages_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_rampages() const {
  return _impl_.rampages_;
}
inline int32_t CMsgSignOutMVPStats_Player::rampages() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.rampages)
  return _internal_rampages();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_rampages(int32_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.rampages_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_rampages(int32_t value) {
  _internal_set_rampages(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.rampages)
}

// optional int32 first_blood = 31;
inline bool CMsgSignOutMVPStats_Player::_internal_has_first_blood() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_first_blood() const {
  return _internal_has_first_blood();
}
inline void CMsgSignOutMVPStats_Player::clear_first_blood() {
  _impl_.first_blood_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline int32_t CMsgSignOutMVPStats_Player::_internal_first_blood() const {
  return _impl_.first_blood_;
}
inline int32_t CMsgSignOutMVPStats_Player::first_blood() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.first_blood)
  return _internal_first_blood();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_first_blood(int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.first_blood_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_first_blood(int32_t value) {
  _internal_set_first_blood(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.first_blood)
}

// repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
inline int CMsgSignOutMVPStats_Player::_internal_kill_eater_events_size() const {
  return _impl_.kill_eater_events_.size();
}
inline int CMsgSignOutMVPStats_Player::kill_eater_events_size() const {
  return _internal_kill_eater_events_size();
}
inline void CMsgSignOutMVPStats_Player::clear_kill_eater_events() {
  _impl_.kill_eater_events_.Clear();
}
inline ::CMsgSignOutMVPStats_Player_KillEaterEvent* CMsgSignOutMVPStats_Player::mutable_kill_eater_events(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutMVPStats.Player.kill_eater_events)
  return _impl_.kill_eater_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player_KillEaterEvent >*
CMsgSignOutMVPStats_Player::mutable_kill_eater_events() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutMVPStats.Player.kill_eater_events)
  return &_impl_.kill_eater_events_;
}
inline const ::CMsgSignOutMVPStats_Player_KillEaterEvent& CMsgSignOutMVPStats_Player::_internal_kill_eater_events(int index) const {
  return _impl_.kill_eater_events_.Get(index);
}
inline const ::CMsgSignOutMVPStats_Player_KillEaterEvent& CMsgSignOutMVPStats_Player::kill_eater_events(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.kill_eater_events)
  return _internal_kill_eater_events(index);
}
inline ::CMsgSignOutMVPStats_Player_KillEaterEvent* CMsgSignOutMVPStats_Player::_internal_add_kill_eater_events() {
  return _impl_.kill_eater_events_.Add();
}
inline ::CMsgSignOutMVPStats_Player_KillEaterEvent* CMsgSignOutMVPStats_Player::add_kill_eater_events() {
  ::CMsgSignOutMVPStats_Player_KillEaterEvent* _add = _internal_add_kill_eater_events();
  // @@protoc_insertion_point(field_add:CMsgSignOutMVPStats.Player.kill_eater_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player_KillEaterEvent >&
CMsgSignOutMVPStats_Player::kill_eater_events() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutMVPStats.Player.kill_eater_events)
  return _impl_.kill_eater_events_;
}

// optional uint32 highest_killstreak = 35;
inline bool CMsgSignOutMVPStats_Player::_internal_has_highest_killstreak() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats_Player::has_highest_killstreak() const {
  return _internal_has_highest_killstreak();
}
inline void CMsgSignOutMVPStats_Player::clear_highest_killstreak() {
  _impl_.highest_killstreak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CMsgSignOutMVPStats_Player::_internal_highest_killstreak() const {
  return _impl_.highest_killstreak_;
}
inline uint32_t CMsgSignOutMVPStats_Player::highest_killstreak() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.Player.highest_killstreak)
  return _internal_highest_killstreak();
}
inline void CMsgSignOutMVPStats_Player::_internal_set_highest_killstreak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.highest_killstreak_ = value;
}
inline void CMsgSignOutMVPStats_Player::set_highest_killstreak(uint32_t value) {
  _internal_set_highest_killstreak(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.Player.highest_killstreak)
}

// -------------------------------------------------------------------

// CMsgSignOutMVPStats

// optional uint64 match_id = 1;
inline bool CMsgSignOutMVPStats::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSignOutMVPStats::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgSignOutMVPStats::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgSignOutMVPStats::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.match_id)
  return _internal_match_id();
}
inline void CMsgSignOutMVPStats::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgSignOutMVPStats::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.match_id)
}

// optional uint32 game_mode = 2;
inline bool CMsgSignOutMVPStats::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgSignOutMVPStats::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSignOutMVPStats::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgSignOutMVPStats::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.game_mode)
  return _internal_game_mode();
}
inline void CMsgSignOutMVPStats::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_mode_ = value;
}
inline void CMsgSignOutMVPStats::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.game_mode)
}

// optional uint32 winning_team = 3;
inline bool CMsgSignOutMVPStats::_internal_has_winning_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats::has_winning_team() const {
  return _internal_has_winning_team();
}
inline void CMsgSignOutMVPStats::clear_winning_team() {
  _impl_.winning_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSignOutMVPStats::_internal_winning_team() const {
  return _impl_.winning_team_;
}
inline uint32_t CMsgSignOutMVPStats::winning_team() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.winning_team)
  return _internal_winning_team();
}
inline void CMsgSignOutMVPStats::_internal_set_winning_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.winning_team_ = value;
}
inline void CMsgSignOutMVPStats::set_winning_team(uint32_t value) {
  _internal_set_winning_team(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.winning_team)
}

// optional float game_time = 4;
inline bool CMsgSignOutMVPStats::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSignOutMVPStats::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgSignOutMVPStats::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgSignOutMVPStats::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CMsgSignOutMVPStats::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.game_time)
  return _internal_game_time();
}
inline void CMsgSignOutMVPStats::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_time_ = value;
}
inline void CMsgSignOutMVPStats::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgSignOutMVPStats.game_time)
}

// repeated .CMsgSignOutMVPStats.Player players = 5;
inline int CMsgSignOutMVPStats::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgSignOutMVPStats::players_size() const {
  return _internal_players_size();
}
inline void CMsgSignOutMVPStats::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgSignOutMVPStats_Player* CMsgSignOutMVPStats::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSignOutMVPStats.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player >*
CMsgSignOutMVPStats::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSignOutMVPStats.players)
  return &_impl_.players_;
}
inline const ::CMsgSignOutMVPStats_Player& CMsgSignOutMVPStats::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgSignOutMVPStats_Player& CMsgSignOutMVPStats::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMVPStats.players)
  return _internal_players(index);
}
inline ::CMsgSignOutMVPStats_Player* CMsgSignOutMVPStats::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgSignOutMVPStats_Player* CMsgSignOutMVPStats::add_players() {
  ::CMsgSignOutMVPStats_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgSignOutMVPStats.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSignOutMVPStats_Player >&
CMsgSignOutMVPStats::players() const {
  // @@protoc_insertion_point(field_list:CMsgSignOutMVPStats.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgGCToServerRecordTrainingData

// optional bool enable = 1;
inline bool CMsgGCToServerRecordTrainingData::_internal_has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerRecordTrainingData::has_enable() const {
  return _internal_has_enable();
}
inline void CMsgGCToServerRecordTrainingData::clear_enable() {
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgGCToServerRecordTrainingData::_internal_enable() const {
  return _impl_.enable_;
}
inline bool CMsgGCToServerRecordTrainingData::enable() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerRecordTrainingData.enable)
  return _internal_enable();
}
inline void CMsgGCToServerRecordTrainingData::_internal_set_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_ = value;
}
inline void CMsgGCToServerRecordTrainingData::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerRecordTrainingData.enable)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetGuildContracts

// repeated uint32 account_ids = 1;
inline int CMsgServerToGCGetGuildContracts::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgServerToGCGetGuildContracts::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgServerToGCGetGuildContracts::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgServerToGCGetGuildContracts::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgServerToGCGetGuildContracts::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContracts.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgServerToGCGetGuildContracts::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContracts.account_ids)
}
inline void CMsgServerToGCGetGuildContracts::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgServerToGCGetGuildContracts::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCGetGuildContracts.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCGetGuildContracts::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCGetGuildContracts::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCGetGuildContracts.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCGetGuildContracts::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCGetGuildContracts::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCGetGuildContracts.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgServerToGCGetGuildContractsResponse_ContractDetails

// optional uint64 contract_id = 1;
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_has_contract_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::has_contract_id() const {
  return _internal_has_contract_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::clear_contract_id() {
  _impl_.contract_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_contract_id() const {
  return _impl_.contract_id_;
}
inline uint64_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::contract_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_id)
  return _internal_contract_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_set_contract_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contract_id_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::set_contract_id(uint64_t value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_id)
}

// optional uint32 challenge_instance_id = 2;
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_has_challenge_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::clear_challenge_instance_id() {
  _impl_.challenge_instance_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_challenge_instance_id() const {
  return _impl_.challenge_instance_id_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.ContractDetails.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_set_challenge_instance_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.challenge_instance_id_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::set_challenge_instance_id(uint32_t value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.ContractDetails.challenge_instance_id)
}

// optional uint32 challenge_parameter = 3;
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_has_challenge_parameter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::clear_challenge_parameter() {
  _impl_.challenge_parameter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_challenge_parameter() const {
  return _impl_.challenge_parameter_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.ContractDetails.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_set_challenge_parameter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_parameter_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::set_challenge_parameter(uint32_t value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.ContractDetails.challenge_parameter)
}

// optional uint32 contract_stars = 4;
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_has_contract_stars() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::has_contract_stars() const {
  return _internal_has_contract_stars();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::clear_contract_stars() {
  _impl_.contract_stars_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_contract_stars() const {
  return _impl_.contract_stars_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::contract_stars() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_stars)
  return _internal_contract_stars();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_set_contract_stars(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.contract_stars_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::set_contract_stars(uint32_t value) {
  _internal_set_contract_stars(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_stars)
}

// optional uint32 contract_slot = 5;
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_has_contract_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::has_contract_slot() const {
  return _internal_has_contract_slot();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::clear_contract_slot() {
  _impl_.contract_slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_contract_slot() const {
  return _impl_.contract_slot_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::contract_slot() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_slot)
  return _internal_contract_slot();
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::_internal_set_contract_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.contract_slot_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::set_contract_slot(uint32_t value) {
  _internal_set_contract_slot(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.ContractDetails.contract_slot)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetGuildContractsResponse_Player

// optional uint32 account_id = 1;
inline bool CMsgServerToGCGetGuildContractsResponse_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.Player.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.Player.account_id)
}

// optional uint32 guild_id = 2;
inline bool CMsgServerToGCGetGuildContractsResponse_Player::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_Player::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_Player::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CMsgServerToGCGetGuildContractsResponse_Player::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.Player.guild_id)
  return _internal_guild_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guild_id_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.Player.guild_id)
}

// optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
inline bool CMsgServerToGCGetGuildContractsResponse_Player::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgServerToGCGetGuildContractsResponse_Player::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::EEvent CMsgServerToGCGetGuildContractsResponse_Player::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgServerToGCGetGuildContractsResponse_Player::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.Player.event_id)
  return _internal_event_id();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.event_id_ = value;
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetGuildContractsResponse.Player.event_id)
}

// repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
inline int CMsgServerToGCGetGuildContractsResponse_Player::_internal_contracts_size() const {
  return _impl_.contracts_.size();
}
inline int CMsgServerToGCGetGuildContractsResponse_Player::contracts_size() const {
  return _internal_contracts_size();
}
inline void CMsgServerToGCGetGuildContractsResponse_Player::clear_contracts() {
  _impl_.contracts_.Clear();
}
inline ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* CMsgServerToGCGetGuildContractsResponse_Player::mutable_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCGetGuildContractsResponse.Player.contracts)
  return _impl_.contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >*
CMsgServerToGCGetGuildContractsResponse_Player::mutable_contracts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCGetGuildContractsResponse.Player.contracts)
  return &_impl_.contracts_;
}
inline const ::CMsgServerToGCGetGuildContractsResponse_ContractDetails& CMsgServerToGCGetGuildContractsResponse_Player::_internal_contracts(int index) const {
  return _impl_.contracts_.Get(index);
}
inline const ::CMsgServerToGCGetGuildContractsResponse_ContractDetails& CMsgServerToGCGetGuildContractsResponse_Player::contracts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.Player.contracts)
  return _internal_contracts(index);
}
inline ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* CMsgServerToGCGetGuildContractsResponse_Player::_internal_add_contracts() {
  return _impl_.contracts_.Add();
}
inline ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* CMsgServerToGCGetGuildContractsResponse_Player::add_contracts() {
  ::CMsgServerToGCGetGuildContractsResponse_ContractDetails* _add = _internal_add_contracts();
  // @@protoc_insertion_point(field_add:CMsgServerToGCGetGuildContractsResponse.Player.contracts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >&
CMsgServerToGCGetGuildContractsResponse_Player::contracts() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCGetGuildContractsResponse.Player.contracts)
  return _impl_.contracts_;
}

// -------------------------------------------------------------------

// CMsgServerToGCGetGuildContractsResponse

// repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
inline int CMsgServerToGCGetGuildContractsResponse::_internal_player_contracts_size() const {
  return _impl_.player_contracts_.size();
}
inline int CMsgServerToGCGetGuildContractsResponse::player_contracts_size() const {
  return _internal_player_contracts_size();
}
inline void CMsgServerToGCGetGuildContractsResponse::clear_player_contracts() {
  _impl_.player_contracts_.Clear();
}
inline ::CMsgServerToGCGetGuildContractsResponse_Player* CMsgServerToGCGetGuildContractsResponse::mutable_player_contracts(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCGetGuildContractsResponse.player_contracts)
  return _impl_.player_contracts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_Player >*
CMsgServerToGCGetGuildContractsResponse::mutable_player_contracts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCGetGuildContractsResponse.player_contracts)
  return &_impl_.player_contracts_;
}
inline const ::CMsgServerToGCGetGuildContractsResponse_Player& CMsgServerToGCGetGuildContractsResponse::_internal_player_contracts(int index) const {
  return _impl_.player_contracts_.Get(index);
}
inline const ::CMsgServerToGCGetGuildContractsResponse_Player& CMsgServerToGCGetGuildContractsResponse::player_contracts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetGuildContractsResponse.player_contracts)
  return _internal_player_contracts(index);
}
inline ::CMsgServerToGCGetGuildContractsResponse_Player* CMsgServerToGCGetGuildContractsResponse::_internal_add_player_contracts() {
  return _impl_.player_contracts_.Add();
}
inline ::CMsgServerToGCGetGuildContractsResponse_Player* CMsgServerToGCGetGuildContractsResponse::add_player_contracts() {
  ::CMsgServerToGCGetGuildContractsResponse_Player* _add = _internal_add_player_contracts();
  // @@protoc_insertion_point(field_add:CMsgServerToGCGetGuildContractsResponse.player_contracts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetGuildContractsResponse_Player >&
CMsgServerToGCGetGuildContractsResponse::player_contracts() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCGetGuildContractsResponse.player_contracts)
  return _impl_.player_contracts_;
}

// -------------------------------------------------------------------

// CMsgMatchDiretideCandy_CandyDetails

// optional uint32 amount = 1;
inline bool CMsgMatchDiretideCandy_CandyDetails::_internal_has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy_CandyDetails::has_amount() const {
  return _internal_has_amount();
}
inline void CMsgMatchDiretideCandy_CandyDetails::clear_amount() {
  _impl_.amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchDiretideCandy_CandyDetails::_internal_amount() const {
  return _impl_.amount_;
}
inline uint32_t CMsgMatchDiretideCandy_CandyDetails::amount() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.CandyDetails.amount)
  return _internal_amount();
}
inline void CMsgMatchDiretideCandy_CandyDetails::_internal_set_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.amount_ = value;
}
inline void CMsgMatchDiretideCandy_CandyDetails::set_amount(uint32_t value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.CandyDetails.amount)
}

// optional uint32 audit = 2;
inline bool CMsgMatchDiretideCandy_CandyDetails::_internal_has_audit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy_CandyDetails::has_audit() const {
  return _internal_has_audit();
}
inline void CMsgMatchDiretideCandy_CandyDetails::clear_audit() {
  _impl_.audit_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchDiretideCandy_CandyDetails::_internal_audit() const {
  return _impl_.audit_;
}
inline uint32_t CMsgMatchDiretideCandy_CandyDetails::audit() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.CandyDetails.audit)
  return _internal_audit();
}
inline void CMsgMatchDiretideCandy_CandyDetails::_internal_set_audit(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.audit_ = value;
}
inline void CMsgMatchDiretideCandy_CandyDetails::set_audit(uint32_t value) {
  _internal_set_audit(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.CandyDetails.audit)
}

// -------------------------------------------------------------------

// CMsgMatchDiretideCandy_PlayerCandy

// optional uint32 account_id = 1;
inline bool CMsgMatchDiretideCandy_PlayerCandy::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy_PlayerCandy::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgMatchDiretideCandy_PlayerCandy::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgMatchDiretideCandy_PlayerCandy::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.PlayerCandy.account_id)
  return _internal_account_id();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgMatchDiretideCandy_PlayerCandy::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.PlayerCandy.account_id)
}

// optional uint32 candy_amount = 3;
inline bool CMsgMatchDiretideCandy_PlayerCandy::_internal_has_candy_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy_PlayerCandy::has_candy_amount() const {
  return _internal_has_candy_amount();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::clear_candy_amount() {
  _impl_.candy_amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgMatchDiretideCandy_PlayerCandy::_internal_candy_amount() const {
  return _impl_.candy_amount_;
}
inline uint32_t CMsgMatchDiretideCandy_PlayerCandy::candy_amount() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.PlayerCandy.candy_amount)
  return _internal_candy_amount();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::_internal_set_candy_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.candy_amount_ = value;
}
inline void CMsgMatchDiretideCandy_PlayerCandy::set_candy_amount(uint32_t value) {
  _internal_set_candy_amount(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.PlayerCandy.candy_amount)
}

// optional bool consumes_periodic_resource = 4;
inline bool CMsgMatchDiretideCandy_PlayerCandy::_internal_has_consumes_periodic_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy_PlayerCandy::has_consumes_periodic_resource() const {
  return _internal_has_consumes_periodic_resource();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::clear_consumes_periodic_resource() {
  _impl_.consumes_periodic_resource_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgMatchDiretideCandy_PlayerCandy::_internal_consumes_periodic_resource() const {
  return _impl_.consumes_periodic_resource_;
}
inline bool CMsgMatchDiretideCandy_PlayerCandy::consumes_periodic_resource() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.PlayerCandy.consumes_periodic_resource)
  return _internal_consumes_periodic_resource();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::_internal_set_consumes_periodic_resource(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.consumes_periodic_resource_ = value;
}
inline void CMsgMatchDiretideCandy_PlayerCandy::set_consumes_periodic_resource(bool value) {
  _internal_set_consumes_periodic_resource(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.PlayerCandy.consumes_periodic_resource)
}

// repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
inline int CMsgMatchDiretideCandy_PlayerCandy::_internal_candy_breakdown_size() const {
  return _impl_.candy_breakdown_.size();
}
inline int CMsgMatchDiretideCandy_PlayerCandy::candy_breakdown_size() const {
  return _internal_candy_breakdown_size();
}
inline void CMsgMatchDiretideCandy_PlayerCandy::clear_candy_breakdown() {
  _impl_.candy_breakdown_.Clear();
}
inline ::CMsgMatchDiretideCandy_CandyDetails* CMsgMatchDiretideCandy_PlayerCandy::mutable_candy_breakdown(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown)
  return _impl_.candy_breakdown_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_CandyDetails >*
CMsgMatchDiretideCandy_PlayerCandy::mutable_candy_breakdown() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown)
  return &_impl_.candy_breakdown_;
}
inline const ::CMsgMatchDiretideCandy_CandyDetails& CMsgMatchDiretideCandy_PlayerCandy::_internal_candy_breakdown(int index) const {
  return _impl_.candy_breakdown_.Get(index);
}
inline const ::CMsgMatchDiretideCandy_CandyDetails& CMsgMatchDiretideCandy_PlayerCandy::candy_breakdown(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown)
  return _internal_candy_breakdown(index);
}
inline ::CMsgMatchDiretideCandy_CandyDetails* CMsgMatchDiretideCandy_PlayerCandy::_internal_add_candy_breakdown() {
  return _impl_.candy_breakdown_.Add();
}
inline ::CMsgMatchDiretideCandy_CandyDetails* CMsgMatchDiretideCandy_PlayerCandy::add_candy_breakdown() {
  ::CMsgMatchDiretideCandy_CandyDetails* _add = _internal_add_candy_breakdown();
  // @@protoc_insertion_point(field_add:CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_CandyDetails >&
CMsgMatchDiretideCandy_PlayerCandy::candy_breakdown() const {
  // @@protoc_insertion_point(field_list:CMsgMatchDiretideCandy.PlayerCandy.candy_breakdown)
  return _impl_.candy_breakdown_;
}

// -------------------------------------------------------------------

// CMsgMatchDiretideCandy

// repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
inline int CMsgMatchDiretideCandy::_internal_player_candy_data_size() const {
  return _impl_.player_candy_data_.size();
}
inline int CMsgMatchDiretideCandy::player_candy_data_size() const {
  return _internal_player_candy_data_size();
}
inline void CMsgMatchDiretideCandy::clear_player_candy_data() {
  _impl_.player_candy_data_.Clear();
}
inline ::CMsgMatchDiretideCandy_PlayerCandy* CMsgMatchDiretideCandy::mutable_player_candy_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgMatchDiretideCandy.player_candy_data)
  return _impl_.player_candy_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_PlayerCandy >*
CMsgMatchDiretideCandy::mutable_player_candy_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgMatchDiretideCandy.player_candy_data)
  return &_impl_.player_candy_data_;
}
inline const ::CMsgMatchDiretideCandy_PlayerCandy& CMsgMatchDiretideCandy::_internal_player_candy_data(int index) const {
  return _impl_.player_candy_data_.Get(index);
}
inline const ::CMsgMatchDiretideCandy_PlayerCandy& CMsgMatchDiretideCandy::player_candy_data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.player_candy_data)
  return _internal_player_candy_data(index);
}
inline ::CMsgMatchDiretideCandy_PlayerCandy* CMsgMatchDiretideCandy::_internal_add_player_candy_data() {
  return _impl_.player_candy_data_.Add();
}
inline ::CMsgMatchDiretideCandy_PlayerCandy* CMsgMatchDiretideCandy::add_player_candy_data() {
  ::CMsgMatchDiretideCandy_PlayerCandy* _add = _internal_add_player_candy_data();
  // @@protoc_insertion_point(field_add:CMsgMatchDiretideCandy.player_candy_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgMatchDiretideCandy_PlayerCandy >&
CMsgMatchDiretideCandy::player_candy_data() const {
  // @@protoc_insertion_point(field_list:CMsgMatchDiretideCandy.player_candy_data)
  return _impl_.player_candy_data_;
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgMatchDiretideCandy::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgMatchDiretideCandy::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgMatchDiretideCandy::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CMsgMatchDiretideCandy::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgMatchDiretideCandy::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgMatchDiretideCandy.event_id)
  return _internal_event_id();
}
inline void CMsgMatchDiretideCandy::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgMatchDiretideCandy::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgMatchDiretideCandy.event_id)
}

// -------------------------------------------------------------------

// CMsgGCToServerCheerData_CheerTypeCount

// optional uint32 cheer_type = 1;
inline bool CMsgGCToServerCheerData_CheerTypeCount::_internal_has_cheer_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToServerCheerData_CheerTypeCount::has_cheer_type() const {
  return _internal_has_cheer_type();
}
inline void CMsgGCToServerCheerData_CheerTypeCount::clear_cheer_type() {
  _impl_.cheer_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgGCToServerCheerData_CheerTypeCount::_internal_cheer_type() const {
  return _impl_.cheer_type_;
}
inline uint32_t CMsgGCToServerCheerData_CheerTypeCount::cheer_type() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerCheerData.CheerTypeCount.cheer_type)
  return _internal_cheer_type();
}
inline void CMsgGCToServerCheerData_CheerTypeCount::_internal_set_cheer_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cheer_type_ = value;
}
inline void CMsgGCToServerCheerData_CheerTypeCount::set_cheer_type(uint32_t value) {
  _internal_set_cheer_type(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerCheerData.CheerTypeCount.cheer_type)
}

// optional uint32 cheer_count = 2;
inline bool CMsgGCToServerCheerData_CheerTypeCount::_internal_has_cheer_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToServerCheerData_CheerTypeCount::has_cheer_count() const {
  return _internal_has_cheer_count();
}
inline void CMsgGCToServerCheerData_CheerTypeCount::clear_cheer_count() {
  _impl_.cheer_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToServerCheerData_CheerTypeCount::_internal_cheer_count() const {
  return _impl_.cheer_count_;
}
inline uint32_t CMsgGCToServerCheerData_CheerTypeCount::cheer_count() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerCheerData.CheerTypeCount.cheer_count)
  return _internal_cheer_count();
}
inline void CMsgGCToServerCheerData_CheerTypeCount::_internal_set_cheer_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cheer_count_ = value;
}
inline void CMsgGCToServerCheerData_CheerTypeCount::set_cheer_count(uint32_t value) {
  _internal_set_cheer_count(value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerCheerData.CheerTypeCount.cheer_count)
}

// -------------------------------------------------------------------

// CMsgGCToServerCheerData

// repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
inline int CMsgGCToServerCheerData::_internal_cheer_types_size() const {
  return _impl_.cheer_types_.size();
}
inline int CMsgGCToServerCheerData::cheer_types_size() const {
  return _internal_cheer_types_size();
}
inline void CMsgGCToServerCheerData::clear_cheer_types() {
  _impl_.cheer_types_.Clear();
}
inline ::CMsgGCToServerCheerData_CheerTypeCount* CMsgGCToServerCheerData::mutable_cheer_types(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToServerCheerData.cheer_types)
  return _impl_.cheer_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerCheerData_CheerTypeCount >*
CMsgGCToServerCheerData::mutable_cheer_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToServerCheerData.cheer_types)
  return &_impl_.cheer_types_;
}
inline const ::CMsgGCToServerCheerData_CheerTypeCount& CMsgGCToServerCheerData::_internal_cheer_types(int index) const {
  return _impl_.cheer_types_.Get(index);
}
inline const ::CMsgGCToServerCheerData_CheerTypeCount& CMsgGCToServerCheerData::cheer_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerCheerData.cheer_types)
  return _internal_cheer_types(index);
}
inline ::CMsgGCToServerCheerData_CheerTypeCount* CMsgGCToServerCheerData::_internal_add_cheer_types() {
  return _impl_.cheer_types_.Add();
}
inline ::CMsgGCToServerCheerData_CheerTypeCount* CMsgGCToServerCheerData::add_cheer_types() {
  ::CMsgGCToServerCheerData_CheerTypeCount* _add = _internal_add_cheer_types();
  // @@protoc_insertion_point(field_add:CMsgGCToServerCheerData.cheer_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgGCToServerCheerData_CheerTypeCount >&
CMsgGCToServerCheerData::cheer_types() const {
  // @@protoc_insertion_point(field_list:CMsgGCToServerCheerData.cheer_types)
  return _impl_.cheer_types_;
}

// -------------------------------------------------------------------

// CMsgCheerConfig

// optional bool cheers_enabled = 1;
inline bool CMsgCheerConfig::_internal_has_cheers_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheers_enabled() const {
  return _internal_has_cheers_enabled();
}
inline void CMsgCheerConfig::clear_cheers_enabled() {
  _impl_.cheers_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgCheerConfig::_internal_cheers_enabled() const {
  return _impl_.cheers_enabled_;
}
inline bool CMsgCheerConfig::cheers_enabled() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheers_enabled)
  return _internal_cheers_enabled();
}
inline void CMsgCheerConfig::_internal_set_cheers_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cheers_enabled_ = value;
}
inline void CMsgCheerConfig::set_cheers_enabled(bool value) {
  _internal_set_cheers_enabled(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheers_enabled)
}

// optional bool is_valid_league_id = 2;
inline bool CMsgCheerConfig::_internal_has_is_valid_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_is_valid_league_id() const {
  return _internal_has_is_valid_league_id();
}
inline void CMsgCheerConfig::clear_is_valid_league_id() {
  _impl_.is_valid_league_id_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgCheerConfig::_internal_is_valid_league_id() const {
  return _impl_.is_valid_league_id_;
}
inline bool CMsgCheerConfig::is_valid_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.is_valid_league_id)
  return _internal_is_valid_league_id();
}
inline void CMsgCheerConfig::_internal_set_is_valid_league_id(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_valid_league_id_ = value;
}
inline void CMsgCheerConfig::set_is_valid_league_id(bool value) {
  _internal_set_is_valid_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.is_valid_league_id)
}

// optional float window_duration = 3;
inline bool CMsgCheerConfig::_internal_has_window_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_window_duration() const {
  return _internal_has_window_duration();
}
inline void CMsgCheerConfig::clear_window_duration() {
  _impl_.window_duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgCheerConfig::_internal_window_duration() const {
  return _impl_.window_duration_;
}
inline float CMsgCheerConfig::window_duration() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.window_duration)
  return _internal_window_duration();
}
inline void CMsgCheerConfig::_internal_set_window_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.window_duration_ = value;
}
inline void CMsgCheerConfig::set_window_duration(float value) {
  _internal_set_window_duration(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.window_duration)
}

// optional uint32 window_bucket_count = 4;
inline bool CMsgCheerConfig::_internal_has_window_bucket_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_window_bucket_count() const {
  return _internal_has_window_bucket_count();
}
inline void CMsgCheerConfig::clear_window_bucket_count() {
  _impl_.window_bucket_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgCheerConfig::_internal_window_bucket_count() const {
  return _impl_.window_bucket_count_;
}
inline uint32_t CMsgCheerConfig::window_bucket_count() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.window_bucket_count)
  return _internal_window_bucket_count();
}
inline void CMsgCheerConfig::_internal_set_window_bucket_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.window_bucket_count_ = value;
}
inline void CMsgCheerConfig::set_window_bucket_count(uint32_t value) {
  _internal_set_window_bucket_count(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.window_bucket_count)
}

// optional float crowd_level_push_time = 6;
inline bool CMsgCheerConfig::_internal_has_crowd_level_push_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_crowd_level_push_time() const {
  return _internal_has_crowd_level_push_time();
}
inline void CMsgCheerConfig::clear_crowd_level_push_time() {
  _impl_.crowd_level_push_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CMsgCheerConfig::_internal_crowd_level_push_time() const {
  return _impl_.crowd_level_push_time_;
}
inline float CMsgCheerConfig::crowd_level_push_time() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.crowd_level_push_time)
  return _internal_crowd_level_push_time();
}
inline void CMsgCheerConfig::_internal_set_crowd_level_push_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.crowd_level_push_time_ = value;
}
inline void CMsgCheerConfig::set_crowd_level_push_time(float value) {
  _internal_set_crowd_level_push_time(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.crowd_level_push_time)
}

// optional uint32 crowd_level_low = 10;
inline bool CMsgCheerConfig::_internal_has_crowd_level_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_crowd_level_low() const {
  return _internal_has_crowd_level_low();
}
inline void CMsgCheerConfig::clear_crowd_level_low() {
  _impl_.crowd_level_low_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgCheerConfig::_internal_crowd_level_low() const {
  return _impl_.crowd_level_low_;
}
inline uint32_t CMsgCheerConfig::crowd_level_low() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.crowd_level_low)
  return _internal_crowd_level_low();
}
inline void CMsgCheerConfig::_internal_set_crowd_level_low(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.crowd_level_low_ = value;
}
inline void CMsgCheerConfig::set_crowd_level_low(uint32_t value) {
  _internal_set_crowd_level_low(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.crowd_level_low)
}

// optional uint32 crowd_level_medium = 11;
inline bool CMsgCheerConfig::_internal_has_crowd_level_medium() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_crowd_level_medium() const {
  return _internal_has_crowd_level_medium();
}
inline void CMsgCheerConfig::clear_crowd_level_medium() {
  _impl_.crowd_level_medium_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgCheerConfig::_internal_crowd_level_medium() const {
  return _impl_.crowd_level_medium_;
}
inline uint32_t CMsgCheerConfig::crowd_level_medium() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.crowd_level_medium)
  return _internal_crowd_level_medium();
}
inline void CMsgCheerConfig::_internal_set_crowd_level_medium(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.crowd_level_medium_ = value;
}
inline void CMsgCheerConfig::set_crowd_level_medium(uint32_t value) {
  _internal_set_crowd_level_medium(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.crowd_level_medium)
}

// optional uint32 crowd_level_high = 12;
inline bool CMsgCheerConfig::_internal_has_crowd_level_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_crowd_level_high() const {
  return _internal_has_crowd_level_high();
}
inline void CMsgCheerConfig::clear_crowd_level_high() {
  _impl_.crowd_level_high_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgCheerConfig::_internal_crowd_level_high() const {
  return _impl_.crowd_level_high_;
}
inline uint32_t CMsgCheerConfig::crowd_level_high() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.crowd_level_high)
  return _internal_crowd_level_high();
}
inline void CMsgCheerConfig::_internal_set_crowd_level_high(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.crowd_level_high_ = value;
}
inline void CMsgCheerConfig::set_crowd_level_high(uint32_t value) {
  _internal_set_crowd_level_high(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.crowd_level_high)
}

// optional float cheer_scale_start = 13;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_start() const {
  return _internal_has_cheer_scale_start();
}
inline void CMsgCheerConfig::clear_cheer_scale_start() {
  _impl_.cheer_scale_start_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CMsgCheerConfig::_internal_cheer_scale_start() const {
  return _impl_.cheer_scale_start_;
}
inline float CMsgCheerConfig::cheer_scale_start() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_start)
  return _internal_cheer_scale_start();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_start(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.cheer_scale_start_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_start(float value) {
  _internal_set_cheer_scale_start(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_start)
}

// optional float cheer_scale_speed = 14;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_speed() const {
  return _internal_has_cheer_scale_speed();
}
inline void CMsgCheerConfig::clear_cheer_scale_speed() {
  _impl_.cheer_scale_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CMsgCheerConfig::_internal_cheer_scale_speed() const {
  return _impl_.cheer_scale_speed_;
}
inline float CMsgCheerConfig::cheer_scale_speed() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_speed)
  return _internal_cheer_scale_speed();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_speed(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.cheer_scale_speed_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_speed(float value) {
  _internal_set_cheer_scale_speed(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_speed)
}

// optional uint32 cheer_scale_push_mark = 15;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_push_mark() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_push_mark() const {
  return _internal_has_cheer_scale_push_mark();
}
inline void CMsgCheerConfig::clear_cheer_scale_push_mark() {
  _impl_.cheer_scale_push_mark_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgCheerConfig::_internal_cheer_scale_push_mark() const {
  return _impl_.cheer_scale_push_mark_;
}
inline uint32_t CMsgCheerConfig::cheer_scale_push_mark() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_push_mark)
  return _internal_cheer_scale_push_mark();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_push_mark(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.cheer_scale_push_mark_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_push_mark(uint32_t value) {
  _internal_set_cheer_scale_push_mark(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_push_mark)
}

// optional uint32 cheer_scale_pull_mark = 16;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_pull_mark() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_pull_mark() const {
  return _internal_has_cheer_scale_pull_mark();
}
inline void CMsgCheerConfig::clear_cheer_scale_pull_mark() {
  _impl_.cheer_scale_pull_mark_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgCheerConfig::_internal_cheer_scale_pull_mark() const {
  return _impl_.cheer_scale_pull_mark_;
}
inline uint32_t CMsgCheerConfig::cheer_scale_pull_mark() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_pull_mark)
  return _internal_cheer_scale_pull_mark();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_pull_mark(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.cheer_scale_pull_mark_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_pull_mark(uint32_t value) {
  _internal_set_cheer_scale_pull_mark(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_pull_mark)
}

// optional float cheer_scale_pct_of_max_cps_clamp = 17;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_pct_of_max_cps_clamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_pct_of_max_cps_clamp() const {
  return _internal_has_cheer_scale_pct_of_max_cps_clamp();
}
inline void CMsgCheerConfig::clear_cheer_scale_pct_of_max_cps_clamp() {
  _impl_.cheer_scale_pct_of_max_cps_clamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CMsgCheerConfig::_internal_cheer_scale_pct_of_max_cps_clamp() const {
  return _impl_.cheer_scale_pct_of_max_cps_clamp_;
}
inline float CMsgCheerConfig::cheer_scale_pct_of_max_cps_clamp() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_pct_of_max_cps_clamp)
  return _internal_cheer_scale_pct_of_max_cps_clamp();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_pct_of_max_cps_clamp(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.cheer_scale_pct_of_max_cps_clamp_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_pct_of_max_cps_clamp(float value) {
  _internal_set_cheer_scale_pct_of_max_cps_clamp(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_pct_of_max_cps_clamp)
}

// optional float cheer_scale_dampener_value = 21;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_dampener_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_dampener_value() const {
  return _internal_has_cheer_scale_dampener_value();
}
inline void CMsgCheerConfig::clear_cheer_scale_dampener_value() {
  _impl_.cheer_scale_dampener_value_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CMsgCheerConfig::_internal_cheer_scale_dampener_value() const {
  return _impl_.cheer_scale_dampener_value_;
}
inline float CMsgCheerConfig::cheer_scale_dampener_value() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_dampener_value)
  return _internal_cheer_scale_dampener_value();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_dampener_value(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.cheer_scale_dampener_value_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_dampener_value(float value) {
  _internal_set_cheer_scale_dampener_value(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_dampener_value)
}

// optional uint32 cheer_scale_dampener_lerp_time = 22;
inline bool CMsgCheerConfig::_internal_has_cheer_scale_dampener_lerp_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_scale_dampener_lerp_time() const {
  return _internal_has_cheer_scale_dampener_lerp_time();
}
inline void CMsgCheerConfig::clear_cheer_scale_dampener_lerp_time() {
  _impl_.cheer_scale_dampener_lerp_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgCheerConfig::_internal_cheer_scale_dampener_lerp_time() const {
  return _impl_.cheer_scale_dampener_lerp_time_;
}
inline uint32_t CMsgCheerConfig::cheer_scale_dampener_lerp_time() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_scale_dampener_lerp_time)
  return _internal_cheer_scale_dampener_lerp_time();
}
inline void CMsgCheerConfig::_internal_set_cheer_scale_dampener_lerp_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.cheer_scale_dampener_lerp_time_ = value;
}
inline void CMsgCheerConfig::set_cheer_scale_dampener_lerp_time(uint32_t value) {
  _internal_set_cheer_scale_dampener_lerp_time(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_scale_dampener_lerp_time)
}

// optional float cheer_factor_bronze = 18;
inline bool CMsgCheerConfig::_internal_has_cheer_factor_bronze() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_factor_bronze() const {
  return _internal_has_cheer_factor_bronze();
}
inline void CMsgCheerConfig::clear_cheer_factor_bronze() {
  _impl_.cheer_factor_bronze_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float CMsgCheerConfig::_internal_cheer_factor_bronze() const {
  return _impl_.cheer_factor_bronze_;
}
inline float CMsgCheerConfig::cheer_factor_bronze() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_factor_bronze)
  return _internal_cheer_factor_bronze();
}
inline void CMsgCheerConfig::_internal_set_cheer_factor_bronze(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.cheer_factor_bronze_ = value;
}
inline void CMsgCheerConfig::set_cheer_factor_bronze(float value) {
  _internal_set_cheer_factor_bronze(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_factor_bronze)
}

// optional float cheer_factor_silver = 19;
inline bool CMsgCheerConfig::_internal_has_cheer_factor_silver() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_factor_silver() const {
  return _internal_has_cheer_factor_silver();
}
inline void CMsgCheerConfig::clear_cheer_factor_silver() {
  _impl_.cheer_factor_silver_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CMsgCheerConfig::_internal_cheer_factor_silver() const {
  return _impl_.cheer_factor_silver_;
}
inline float CMsgCheerConfig::cheer_factor_silver() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_factor_silver)
  return _internal_cheer_factor_silver();
}
inline void CMsgCheerConfig::_internal_set_cheer_factor_silver(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.cheer_factor_silver_ = value;
}
inline void CMsgCheerConfig::set_cheer_factor_silver(float value) {
  _internal_set_cheer_factor_silver(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_factor_silver)
}

// optional float cheer_factor_gold = 20;
inline bool CMsgCheerConfig::_internal_has_cheer_factor_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgCheerConfig::has_cheer_factor_gold() const {
  return _internal_has_cheer_factor_gold();
}
inline void CMsgCheerConfig::clear_cheer_factor_gold() {
  _impl_.cheer_factor_gold_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float CMsgCheerConfig::_internal_cheer_factor_gold() const {
  return _impl_.cheer_factor_gold_;
}
inline float CMsgCheerConfig::cheer_factor_gold() const {
  // @@protoc_insertion_point(field_get:CMsgCheerConfig.cheer_factor_gold)
  return _internal_cheer_factor_gold();
}
inline void CMsgCheerConfig::_internal_set_cheer_factor_gold(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.cheer_factor_gold_ = value;
}
inline void CMsgCheerConfig::set_cheer_factor_gold(float value) {
  _internal_set_cheer_factor_gold(value);
  // @@protoc_insertion_point(field_set:CMsgCheerConfig.cheer_factor_gold)
}

// -------------------------------------------------------------------

// CMsgGCToServerCheerConfig

// optional .CMsgCheerConfig cheer_config = 1;
inline bool CMsgGCToServerCheerConfig::_internal_has_cheer_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cheer_config_ != nullptr);
  return value;
}
inline bool CMsgGCToServerCheerConfig::has_cheer_config() const {
  return _internal_has_cheer_config();
}
inline void CMsgGCToServerCheerConfig::clear_cheer_config() {
  if (_impl_.cheer_config_ != nullptr) _impl_.cheer_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgCheerConfig& CMsgGCToServerCheerConfig::_internal_cheer_config() const {
  const ::CMsgCheerConfig* p = _impl_.cheer_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgCheerConfig&>(
      ::_CMsgCheerConfig_default_instance_);
}
inline const ::CMsgCheerConfig& CMsgGCToServerCheerConfig::cheer_config() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerCheerConfig.cheer_config)
  return _internal_cheer_config();
}
inline void CMsgGCToServerCheerConfig::unsafe_arena_set_allocated_cheer_config(
    ::CMsgCheerConfig* cheer_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cheer_config_);
  }
  _impl_.cheer_config_ = cheer_config;
  if (cheer_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCToServerCheerConfig.cheer_config)
}
inline ::CMsgCheerConfig* CMsgGCToServerCheerConfig::release_cheer_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgCheerConfig* CMsgGCToServerCheerConfig::unsafe_arena_release_cheer_config() {
  // @@protoc_insertion_point(field_release:CMsgGCToServerCheerConfig.cheer_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
  return temp;
}
inline ::CMsgCheerConfig* CMsgGCToServerCheerConfig::_internal_mutable_cheer_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cheer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgCheerConfig>(GetArenaForAllocation());
    _impl_.cheer_config_ = p;
  }
  return _impl_.cheer_config_;
}
inline ::CMsgCheerConfig* CMsgGCToServerCheerConfig::mutable_cheer_config() {
  ::CMsgCheerConfig* _msg = _internal_mutable_cheer_config();
  // @@protoc_insertion_point(field_mutable:CMsgGCToServerCheerConfig.cheer_config)
  return _msg;
}
inline void CMsgGCToServerCheerConfig::set_allocated_cheer_config(::CMsgCheerConfig* cheer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cheer_config_;
  }
  if (cheer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cheer_config);
    if (message_arena != submessage_arena) {
      cheer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cheer_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cheer_config_ = cheer_config;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToServerCheerConfig.cheer_config)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetCheerConfig

// optional uint32 league_id = 1;
inline bool CMsgServerToGCGetCheerConfig::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgServerToGCGetCheerConfig::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgServerToGCGetCheerConfig::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgServerToGCGetCheerConfig::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgServerToGCGetCheerConfig::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetCheerConfig.league_id)
  return _internal_league_id();
}
inline void CMsgServerToGCGetCheerConfig::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgServerToGCGetCheerConfig::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetCheerConfig.league_id)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetCheerConfigResponse

// optional .CMsgCheerConfig cheer_config = 2;
inline bool CMsgServerToGCGetCheerConfigResponse::_internal_has_cheer_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cheer_config_ != nullptr);
  return value;
}
inline bool CMsgServerToGCGetCheerConfigResponse::has_cheer_config() const {
  return _internal_has_cheer_config();
}
inline void CMsgServerToGCGetCheerConfigResponse::clear_cheer_config() {
  if (_impl_.cheer_config_ != nullptr) _impl_.cheer_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgCheerConfig& CMsgServerToGCGetCheerConfigResponse::_internal_cheer_config() const {
  const ::CMsgCheerConfig* p = _impl_.cheer_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgCheerConfig&>(
      ::_CMsgCheerConfig_default_instance_);
}
inline const ::CMsgCheerConfig& CMsgServerToGCGetCheerConfigResponse::cheer_config() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetCheerConfigResponse.cheer_config)
  return _internal_cheer_config();
}
inline void CMsgServerToGCGetCheerConfigResponse::unsafe_arena_set_allocated_cheer_config(
    ::CMsgCheerConfig* cheer_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cheer_config_);
  }
  _impl_.cheer_config_ = cheer_config;
  if (cheer_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCGetCheerConfigResponse.cheer_config)
}
inline ::CMsgCheerConfig* CMsgServerToGCGetCheerConfigResponse::release_cheer_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgCheerConfig* CMsgServerToGCGetCheerConfigResponse::unsafe_arena_release_cheer_config() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCGetCheerConfigResponse.cheer_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
  return temp;
}
inline ::CMsgCheerConfig* CMsgServerToGCGetCheerConfigResponse::_internal_mutable_cheer_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cheer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgCheerConfig>(GetArenaForAllocation());
    _impl_.cheer_config_ = p;
  }
  return _impl_.cheer_config_;
}
inline ::CMsgCheerConfig* CMsgServerToGCGetCheerConfigResponse::mutable_cheer_config() {
  ::CMsgCheerConfig* _msg = _internal_mutable_cheer_config();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCGetCheerConfigResponse.cheer_config)
  return _msg;
}
inline void CMsgServerToGCGetCheerConfigResponse::set_allocated_cheer_config(::CMsgCheerConfig* cheer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cheer_config_;
  }
  if (cheer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cheer_config);
    if (message_arena != submessage_arena) {
      cheer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cheer_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cheer_config_ = cheer_config;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCGetCheerConfigResponse.cheer_config)
}

// -------------------------------------------------------------------

// CMsgGCToServerCheerScalesOverride

// repeated float scales = 1;
inline int CMsgGCToServerCheerScalesOverride::_internal_scales_size() const {
  return _impl_.scales_.size();
}
inline int CMsgGCToServerCheerScalesOverride::scales_size() const {
  return _internal_scales_size();
}
inline void CMsgGCToServerCheerScalesOverride::clear_scales() {
  _impl_.scales_.Clear();
}
inline float CMsgGCToServerCheerScalesOverride::_internal_scales(int index) const {
  return _impl_.scales_.Get(index);
}
inline float CMsgGCToServerCheerScalesOverride::scales(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerCheerScalesOverride.scales)
  return _internal_scales(index);
}
inline void CMsgGCToServerCheerScalesOverride::set_scales(int index, float value) {
  _impl_.scales_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgGCToServerCheerScalesOverride.scales)
}
inline void CMsgGCToServerCheerScalesOverride::_internal_add_scales(float value) {
  _impl_.scales_.Add(value);
}
inline void CMsgGCToServerCheerScalesOverride::add_scales(float value) {
  _internal_add_scales(value);
  // @@protoc_insertion_point(field_add:CMsgGCToServerCheerScalesOverride.scales)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGCToServerCheerScalesOverride::_internal_scales() const {
  return _impl_.scales_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
CMsgGCToServerCheerScalesOverride::scales() const {
  // @@protoc_insertion_point(field_list:CMsgGCToServerCheerScalesOverride.scales)
  return _internal_scales();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGCToServerCheerScalesOverride::_internal_mutable_scales() {
  return &_impl_.scales_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
CMsgGCToServerCheerScalesOverride::mutable_scales() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToServerCheerScalesOverride.scales)
  return _internal_mutable_scales();
}

// -------------------------------------------------------------------

// CMsgGCToServerGetCheerState

// -------------------------------------------------------------------

// CMsgCheerTypeState

// repeated uint32 cheer_counts = 1;
inline int CMsgCheerTypeState::_internal_cheer_counts_size() const {
  return _impl_.cheer_counts_.size();
}
inline int CMsgCheerTypeState::cheer_counts_size() const {
  return _internal_cheer_counts_size();
}
inline void CMsgCheerTypeState::clear_cheer_counts() {
  _impl_.cheer_counts_.Clear();
}
inline uint32_t CMsgCheerTypeState::_internal_cheer_counts(int index) const {
  return _impl_.cheer_counts_.Get(index);
}
inline uint32_t CMsgCheerTypeState::cheer_counts(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCheerTypeState.cheer_counts)
  return _internal_cheer_counts(index);
}
inline void CMsgCheerTypeState::set_cheer_counts(int index, uint32_t value) {
  _impl_.cheer_counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgCheerTypeState.cheer_counts)
}
inline void CMsgCheerTypeState::_internal_add_cheer_counts(uint32_t value) {
  _impl_.cheer_counts_.Add(value);
}
inline void CMsgCheerTypeState::add_cheer_counts(uint32_t value) {
  _internal_add_cheer_counts(value);
  // @@protoc_insertion_point(field_add:CMsgCheerTypeState.cheer_counts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgCheerTypeState::_internal_cheer_counts() const {
  return _impl_.cheer_counts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgCheerTypeState::cheer_counts() const {
  // @@protoc_insertion_point(field_list:CMsgCheerTypeState.cheer_counts)
  return _internal_cheer_counts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgCheerTypeState::_internal_mutable_cheer_counts() {
  return &_impl_.cheer_counts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgCheerTypeState::mutable_cheer_counts() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCheerTypeState.cheer_counts)
  return _internal_mutable_cheer_counts();
}

// optional float max_per_second = 2;
inline bool CMsgCheerTypeState::_internal_has_max_per_second() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCheerTypeState::has_max_per_second() const {
  return _internal_has_max_per_second();
}
inline void CMsgCheerTypeState::clear_max_per_second() {
  _impl_.max_per_second_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgCheerTypeState::_internal_max_per_second() const {
  return _impl_.max_per_second_;
}
inline float CMsgCheerTypeState::max_per_second() const {
  // @@protoc_insertion_point(field_get:CMsgCheerTypeState.max_per_second)
  return _internal_max_per_second();
}
inline void CMsgCheerTypeState::_internal_set_max_per_second(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_per_second_ = value;
}
inline void CMsgCheerTypeState::set_max_per_second(float value) {
  _internal_set_max_per_second(value);
  // @@protoc_insertion_point(field_set:CMsgCheerTypeState.max_per_second)
}

// optional float cheer_scale = 3;
inline bool CMsgCheerTypeState::_internal_has_cheer_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCheerTypeState::has_cheer_scale() const {
  return _internal_has_cheer_scale();
}
inline void CMsgCheerTypeState::clear_cheer_scale() {
  _impl_.cheer_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgCheerTypeState::_internal_cheer_scale() const {
  return _impl_.cheer_scale_;
}
inline float CMsgCheerTypeState::cheer_scale() const {
  // @@protoc_insertion_point(field_get:CMsgCheerTypeState.cheer_scale)
  return _internal_cheer_scale();
}
inline void CMsgCheerTypeState::_internal_set_cheer_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cheer_scale_ = value;
}
inline void CMsgCheerTypeState::set_cheer_scale(float value) {
  _internal_set_cheer_scale(value);
  // @@protoc_insertion_point(field_set:CMsgCheerTypeState.cheer_scale)
}

// optional float override_scale = 4;
inline bool CMsgCheerTypeState::_internal_has_override_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgCheerTypeState::has_override_scale() const {
  return _internal_has_override_scale();
}
inline void CMsgCheerTypeState::clear_override_scale() {
  _impl_.override_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgCheerTypeState::_internal_override_scale() const {
  return _impl_.override_scale_;
}
inline float CMsgCheerTypeState::override_scale() const {
  // @@protoc_insertion_point(field_get:CMsgCheerTypeState.override_scale)
  return _internal_override_scale();
}
inline void CMsgCheerTypeState::_internal_set_override_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.override_scale_ = value;
}
inline void CMsgCheerTypeState::set_override_scale(float value) {
  _internal_set_override_scale(value);
  // @@protoc_insertion_point(field_set:CMsgCheerTypeState.override_scale)
}

// -------------------------------------------------------------------

// CMsgCheerState

// repeated .CMsgCheerTypeState cheer_types = 1;
inline int CMsgCheerState::_internal_cheer_types_size() const {
  return _impl_.cheer_types_.size();
}
inline int CMsgCheerState::cheer_types_size() const {
  return _internal_cheer_types_size();
}
inline void CMsgCheerState::clear_cheer_types() {
  _impl_.cheer_types_.Clear();
}
inline ::CMsgCheerTypeState* CMsgCheerState::mutable_cheer_types(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgCheerState.cheer_types)
  return _impl_.cheer_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCheerTypeState >*
CMsgCheerState::mutable_cheer_types() {
  // @@protoc_insertion_point(field_mutable_list:CMsgCheerState.cheer_types)
  return &_impl_.cheer_types_;
}
inline const ::CMsgCheerTypeState& CMsgCheerState::_internal_cheer_types(int index) const {
  return _impl_.cheer_types_.Get(index);
}
inline const ::CMsgCheerTypeState& CMsgCheerState::cheer_types(int index) const {
  // @@protoc_insertion_point(field_get:CMsgCheerState.cheer_types)
  return _internal_cheer_types(index);
}
inline ::CMsgCheerTypeState* CMsgCheerState::_internal_add_cheer_types() {
  return _impl_.cheer_types_.Add();
}
inline ::CMsgCheerTypeState* CMsgCheerState::add_cheer_types() {
  ::CMsgCheerTypeState* _add = _internal_add_cheer_types();
  // @@protoc_insertion_point(field_add:CMsgCheerState.cheer_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgCheerTypeState >&
CMsgCheerState::cheer_types() const {
  // @@protoc_insertion_point(field_list:CMsgCheerState.cheer_types)
  return _impl_.cheer_types_;
}

// optional uint32 radiant_crowd_level = 2;
inline bool CMsgCheerState::_internal_has_radiant_crowd_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCheerState::has_radiant_crowd_level() const {
  return _internal_has_radiant_crowd_level();
}
inline void CMsgCheerState::clear_radiant_crowd_level() {
  _impl_.radiant_crowd_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgCheerState::_internal_radiant_crowd_level() const {
  return _impl_.radiant_crowd_level_;
}
inline uint32_t CMsgCheerState::radiant_crowd_level() const {
  // @@protoc_insertion_point(field_get:CMsgCheerState.radiant_crowd_level)
  return _internal_radiant_crowd_level();
}
inline void CMsgCheerState::_internal_set_radiant_crowd_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.radiant_crowd_level_ = value;
}
inline void CMsgCheerState::set_radiant_crowd_level(uint32_t value) {
  _internal_set_radiant_crowd_level(value);
  // @@protoc_insertion_point(field_set:CMsgCheerState.radiant_crowd_level)
}

// optional uint32 dire_crowd_level = 3;
inline bool CMsgCheerState::_internal_has_dire_crowd_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCheerState::has_dire_crowd_level() const {
  return _internal_has_dire_crowd_level();
}
inline void CMsgCheerState::clear_dire_crowd_level() {
  _impl_.dire_crowd_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgCheerState::_internal_dire_crowd_level() const {
  return _impl_.dire_crowd_level_;
}
inline uint32_t CMsgCheerState::dire_crowd_level() const {
  // @@protoc_insertion_point(field_get:CMsgCheerState.dire_crowd_level)
  return _internal_dire_crowd_level();
}
inline void CMsgCheerState::_internal_set_dire_crowd_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dire_crowd_level_ = value;
}
inline void CMsgCheerState::set_dire_crowd_level(uint32_t value) {
  _internal_set_dire_crowd_level(value);
  // @@protoc_insertion_point(field_set:CMsgCheerState.dire_crowd_level)
}

// -------------------------------------------------------------------

// CMsgServerToGCReportCheerState

// optional .CMsgCheerConfig cheer_config = 1;
inline bool CMsgServerToGCReportCheerState::_internal_has_cheer_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cheer_config_ != nullptr);
  return value;
}
inline bool CMsgServerToGCReportCheerState::has_cheer_config() const {
  return _internal_has_cheer_config();
}
inline void CMsgServerToGCReportCheerState::clear_cheer_config() {
  if (_impl_.cheer_config_ != nullptr) _impl_.cheer_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgCheerConfig& CMsgServerToGCReportCheerState::_internal_cheer_config() const {
  const ::CMsgCheerConfig* p = _impl_.cheer_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgCheerConfig&>(
      ::_CMsgCheerConfig_default_instance_);
}
inline const ::CMsgCheerConfig& CMsgServerToGCReportCheerState::cheer_config() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCReportCheerState.cheer_config)
  return _internal_cheer_config();
}
inline void CMsgServerToGCReportCheerState::unsafe_arena_set_allocated_cheer_config(
    ::CMsgCheerConfig* cheer_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cheer_config_);
  }
  _impl_.cheer_config_ = cheer_config;
  if (cheer_config) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCReportCheerState.cheer_config)
}
inline ::CMsgCheerConfig* CMsgServerToGCReportCheerState::release_cheer_config() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgCheerConfig* CMsgServerToGCReportCheerState::unsafe_arena_release_cheer_config() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCReportCheerState.cheer_config)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgCheerConfig* temp = _impl_.cheer_config_;
  _impl_.cheer_config_ = nullptr;
  return temp;
}
inline ::CMsgCheerConfig* CMsgServerToGCReportCheerState::_internal_mutable_cheer_config() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cheer_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgCheerConfig>(GetArenaForAllocation());
    _impl_.cheer_config_ = p;
  }
  return _impl_.cheer_config_;
}
inline ::CMsgCheerConfig* CMsgServerToGCReportCheerState::mutable_cheer_config() {
  ::CMsgCheerConfig* _msg = _internal_mutable_cheer_config();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCReportCheerState.cheer_config)
  return _msg;
}
inline void CMsgServerToGCReportCheerState::set_allocated_cheer_config(::CMsgCheerConfig* cheer_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cheer_config_;
  }
  if (cheer_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cheer_config);
    if (message_arena != submessage_arena) {
      cheer_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cheer_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cheer_config_ = cheer_config;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCReportCheerState.cheer_config)
}

// optional .CMsgCheerState cheer_state = 2;
inline bool CMsgServerToGCReportCheerState::_internal_has_cheer_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cheer_state_ != nullptr);
  return value;
}
inline bool CMsgServerToGCReportCheerState::has_cheer_state() const {
  return _internal_has_cheer_state();
}
inline void CMsgServerToGCReportCheerState::clear_cheer_state() {
  if (_impl_.cheer_state_ != nullptr) _impl_.cheer_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgCheerState& CMsgServerToGCReportCheerState::_internal_cheer_state() const {
  const ::CMsgCheerState* p = _impl_.cheer_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgCheerState&>(
      ::_CMsgCheerState_default_instance_);
}
inline const ::CMsgCheerState& CMsgServerToGCReportCheerState::cheer_state() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCReportCheerState.cheer_state)
  return _internal_cheer_state();
}
inline void CMsgServerToGCReportCheerState::unsafe_arena_set_allocated_cheer_state(
    ::CMsgCheerState* cheer_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cheer_state_);
  }
  _impl_.cheer_state_ = cheer_state;
  if (cheer_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCReportCheerState.cheer_state)
}
inline ::CMsgCheerState* CMsgServerToGCReportCheerState::release_cheer_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgCheerState* temp = _impl_.cheer_state_;
  _impl_.cheer_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgCheerState* CMsgServerToGCReportCheerState::unsafe_arena_release_cheer_state() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCReportCheerState.cheer_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgCheerState* temp = _impl_.cheer_state_;
  _impl_.cheer_state_ = nullptr;
  return temp;
}
inline ::CMsgCheerState* CMsgServerToGCReportCheerState::_internal_mutable_cheer_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cheer_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgCheerState>(GetArenaForAllocation());
    _impl_.cheer_state_ = p;
  }
  return _impl_.cheer_state_;
}
inline ::CMsgCheerState* CMsgServerToGCReportCheerState::mutable_cheer_state() {
  ::CMsgCheerState* _msg = _internal_mutable_cheer_state();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCReportCheerState.cheer_state)
  return _msg;
}
inline void CMsgServerToGCReportCheerState::set_allocated_cheer_state(::CMsgCheerState* cheer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cheer_state_;
  }
  if (cheer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cheer_state);
    if (message_arena != submessage_arena) {
      cheer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cheer_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cheer_state_ = cheer_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCReportCheerState.cheer_state)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetStickerHeroes

// repeated uint32 account_ids = 1;
inline int CMsgServerToGCGetStickerHeroes::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgServerToGCGetStickerHeroes::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgServerToGCGetStickerHeroes::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgServerToGCGetStickerHeroes::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgServerToGCGetStickerHeroes::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetStickerHeroes.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgServerToGCGetStickerHeroes::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetStickerHeroes.account_ids)
}
inline void CMsgServerToGCGetStickerHeroes::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgServerToGCGetStickerHeroes::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgServerToGCGetStickerHeroes.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCGetStickerHeroes::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgServerToGCGetStickerHeroes::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCGetStickerHeroes.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCGetStickerHeroes::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgServerToGCGetStickerHeroes::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCGetStickerHeroes.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgServerToGCGetStickerHeroesResponse_Player

// optional uint32 account_id = 1;
inline bool CMsgServerToGCGetStickerHeroesResponse_Player::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgServerToGCGetStickerHeroesResponse_Player::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgServerToGCGetStickerHeroesResponse_Player::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgServerToGCGetStickerHeroesResponse_Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgServerToGCGetStickerHeroesResponse_Player::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetStickerHeroesResponse.Player.account_id)
  return _internal_account_id();
}
inline void CMsgServerToGCGetStickerHeroesResponse_Player::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgServerToGCGetStickerHeroesResponse_Player::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgServerToGCGetStickerHeroesResponse.Player.account_id)
}

// optional .CMsgStickerHeroes stickers = 2;
inline bool CMsgServerToGCGetStickerHeroesResponse_Player::_internal_has_stickers() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stickers_ != nullptr);
  return value;
}
inline bool CMsgServerToGCGetStickerHeroesResponse_Player::has_stickers() const {
  return _internal_has_stickers();
}
inline const ::CMsgStickerHeroes& CMsgServerToGCGetStickerHeroesResponse_Player::_internal_stickers() const {
  const ::CMsgStickerHeroes* p = _impl_.stickers_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgStickerHeroes&>(
      ::_CMsgStickerHeroes_default_instance_);
}
inline const ::CMsgStickerHeroes& CMsgServerToGCGetStickerHeroesResponse_Player::stickers() const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetStickerHeroesResponse.Player.stickers)
  return _internal_stickers();
}
inline void CMsgServerToGCGetStickerHeroesResponse_Player::unsafe_arena_set_allocated_stickers(
    ::CMsgStickerHeroes* stickers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stickers_);
  }
  _impl_.stickers_ = stickers;
  if (stickers) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgServerToGCGetStickerHeroesResponse.Player.stickers)
}
inline ::CMsgStickerHeroes* CMsgServerToGCGetStickerHeroesResponse_Player::release_stickers() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgStickerHeroes* temp = _impl_.stickers_;
  _impl_.stickers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgStickerHeroes* CMsgServerToGCGetStickerHeroesResponse_Player::unsafe_arena_release_stickers() {
  // @@protoc_insertion_point(field_release:CMsgServerToGCGetStickerHeroesResponse.Player.stickers)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgStickerHeroes* temp = _impl_.stickers_;
  _impl_.stickers_ = nullptr;
  return temp;
}
inline ::CMsgStickerHeroes* CMsgServerToGCGetStickerHeroesResponse_Player::_internal_mutable_stickers() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stickers_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgStickerHeroes>(GetArenaForAllocation());
    _impl_.stickers_ = p;
  }
  return _impl_.stickers_;
}
inline ::CMsgStickerHeroes* CMsgServerToGCGetStickerHeroesResponse_Player::mutable_stickers() {
  ::CMsgStickerHeroes* _msg = _internal_mutable_stickers();
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCGetStickerHeroesResponse.Player.stickers)
  return _msg;
}
inline void CMsgServerToGCGetStickerHeroesResponse_Player::set_allocated_stickers(::CMsgStickerHeroes* stickers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stickers_);
  }
  if (stickers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stickers));
    if (message_arena != submessage_arena) {
      stickers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stickers, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.stickers_ = stickers;
  // @@protoc_insertion_point(field_set_allocated:CMsgServerToGCGetStickerHeroesResponse.Player.stickers)
}

// -------------------------------------------------------------------

// CMsgServerToGCGetStickerHeroesResponse

// repeated .CMsgServerToGCGetStickerHeroesResponse.Player players = 1;
inline int CMsgServerToGCGetStickerHeroesResponse::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgServerToGCGetStickerHeroesResponse::players_size() const {
  return _internal_players_size();
}
inline void CMsgServerToGCGetStickerHeroesResponse::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgServerToGCGetStickerHeroesResponse_Player* CMsgServerToGCGetStickerHeroesResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgServerToGCGetStickerHeroesResponse.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetStickerHeroesResponse_Player >*
CMsgServerToGCGetStickerHeroesResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgServerToGCGetStickerHeroesResponse.players)
  return &_impl_.players_;
}
inline const ::CMsgServerToGCGetStickerHeroesResponse_Player& CMsgServerToGCGetStickerHeroesResponse::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgServerToGCGetStickerHeroesResponse_Player& CMsgServerToGCGetStickerHeroesResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgServerToGCGetStickerHeroesResponse.players)
  return _internal_players(index);
}
inline ::CMsgServerToGCGetStickerHeroesResponse_Player* CMsgServerToGCGetStickerHeroesResponse::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgServerToGCGetStickerHeroesResponse_Player* CMsgServerToGCGetStickerHeroesResponse::add_players() {
  ::CMsgServerToGCGetStickerHeroesResponse_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgServerToGCGetStickerHeroesResponse.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgServerToGCGetStickerHeroesResponse_Player >&
CMsgServerToGCGetStickerHeroesResponse::players() const {
  // @@protoc_insertion_point(field_list:CMsgServerToGCGetStickerHeroesResponse.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// CMsgGCToServerSetSteamLearnDisable

// -------------------------------------------------------------------

// CMsgGCToServerSetSteamLearnKeysChanged

// optional .CMsgSteamLearnHMACKeys keys = 1;
inline bool CMsgGCToServerSetSteamLearnKeysChanged::_internal_has_keys() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.keys_ != nullptr);
  return value;
}
inline bool CMsgGCToServerSetSteamLearnKeysChanged::has_keys() const {
  return _internal_has_keys();
}
inline const ::CMsgSteamLearnHMACKeys& CMsgGCToServerSetSteamLearnKeysChanged::_internal_keys() const {
  const ::CMsgSteamLearnHMACKeys* p = _impl_.keys_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnHMACKeys&>(
      ::_CMsgSteamLearnHMACKeys_default_instance_);
}
inline const ::CMsgSteamLearnHMACKeys& CMsgGCToServerSetSteamLearnKeysChanged::keys() const {
  // @@protoc_insertion_point(field_get:CMsgGCToServerSetSteamLearnKeysChanged.keys)
  return _internal_keys();
}
inline void CMsgGCToServerSetSteamLearnKeysChanged::unsafe_arena_set_allocated_keys(
    ::CMsgSteamLearnHMACKeys* keys) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  _impl_.keys_ = keys;
  if (keys) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCToServerSetSteamLearnKeysChanged.keys)
}
inline ::CMsgSteamLearnHMACKeys* CMsgGCToServerSetSteamLearnKeysChanged::release_keys() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnHMACKeys* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnHMACKeys* CMsgGCToServerSetSteamLearnKeysChanged::unsafe_arena_release_keys() {
  // @@protoc_insertion_point(field_release:CMsgGCToServerSetSteamLearnKeysChanged.keys)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnHMACKeys* temp = _impl_.keys_;
  _impl_.keys_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnHMACKeys* CMsgGCToServerSetSteamLearnKeysChanged::_internal_mutable_keys() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.keys_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnHMACKeys>(GetArenaForAllocation());
    _impl_.keys_ = p;
  }
  return _impl_.keys_;
}
inline ::CMsgSteamLearnHMACKeys* CMsgGCToServerSetSteamLearnKeysChanged::mutable_keys() {
  ::CMsgSteamLearnHMACKeys* _msg = _internal_mutable_keys();
  // @@protoc_insertion_point(field_mutable:CMsgGCToServerSetSteamLearnKeysChanged.keys)
  return _msg;
}
inline void CMsgGCToServerSetSteamLearnKeysChanged::set_allocated_keys(::CMsgSteamLearnHMACKeys* keys) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keys_);
  }
  if (keys) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keys));
    if (message_arena != submessage_arena) {
      keys = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keys, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.keys_ = keys;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToServerSetSteamLearnKeysChanged.keys)
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchInfo

// optional uint32 average_mmr = 1;
inline bool CMsgSteamLearnMatchInfo::_internal_has_average_mmr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchInfo::has_average_mmr() const {
  return _internal_has_average_mmr();
}
inline void CMsgSteamLearnMatchInfo::clear_average_mmr() {
  _impl_.average_mmr_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearnMatchInfo::_internal_average_mmr() const {
  return _impl_.average_mmr_;
}
inline uint32_t CMsgSteamLearnMatchInfo::average_mmr() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchInfo.average_mmr)
  return _internal_average_mmr();
}
inline void CMsgSteamLearnMatchInfo::_internal_set_average_mmr(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.average_mmr_ = value;
}
inline void CMsgSteamLearnMatchInfo::set_average_mmr(uint32_t value) {
  _internal_set_average_mmr(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchInfo.average_mmr)
}

// optional bool radiant_won = 2;
inline bool CMsgSteamLearnMatchInfo::_internal_has_radiant_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchInfo::has_radiant_won() const {
  return _internal_has_radiant_won();
}
inline void CMsgSteamLearnMatchInfo::clear_radiant_won() {
  _impl_.radiant_won_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSteamLearnMatchInfo::_internal_radiant_won() const {
  return _impl_.radiant_won_;
}
inline bool CMsgSteamLearnMatchInfo::radiant_won() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchInfo.radiant_won)
  return _internal_radiant_won();
}
inline void CMsgSteamLearnMatchInfo::_internal_set_radiant_won(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.radiant_won_ = value;
}
inline void CMsgSteamLearnMatchInfo::set_radiant_won(bool value) {
  _internal_set_radiant_won(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchInfo.radiant_won)
}

// optional uint32 duration = 3;
inline bool CMsgSteamLearnMatchInfo::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchInfo::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgSteamLearnMatchInfo::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnMatchInfo::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgSteamLearnMatchInfo::duration() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchInfo.duration)
  return _internal_duration();
}
inline void CMsgSteamLearnMatchInfo::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgSteamLearnMatchInfo::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchInfo.duration)
}

// optional uint32 game_mode = 4;
inline bool CMsgSteamLearnMatchInfo::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchInfo::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgSteamLearnMatchInfo::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearnMatchInfo::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CMsgSteamLearnMatchInfo::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchInfo.game_mode)
  return _internal_game_mode();
}
inline void CMsgSteamLearnMatchInfo::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_mode_ = value;
}
inline void CMsgSteamLearnMatchInfo::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchInfo.game_mode)
}

// optional uint32 lobby_type = 5;
inline bool CMsgSteamLearnMatchInfo::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchInfo::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CMsgSteamLearnMatchInfo::clear_lobby_type() {
  _impl_.lobby_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearnMatchInfo::_internal_lobby_type() const {
  return _impl_.lobby_type_;
}
inline uint32_t CMsgSteamLearnMatchInfo::lobby_type() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchInfo.lobby_type)
  return _internal_lobby_type();
}
inline void CMsgSteamLearnMatchInfo::_internal_set_lobby_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.lobby_type_ = value;
}
inline void CMsgSteamLearnMatchInfo::set_lobby_type(uint32_t value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchInfo.lobby_type)
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchHeroes

// repeated uint32 radiant_hero_ids = 1 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchHeroes::_internal_radiant_hero_ids_size() const {
  return _impl_.radiant_hero_ids_.size();
}
inline int CMsgSteamLearnMatchHeroes::radiant_hero_ids_size() const {
  return _internal_radiant_hero_ids_size();
}
inline void CMsgSteamLearnMatchHeroes::clear_radiant_hero_ids() {
  _impl_.radiant_hero_ids_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHeroes::_internal_radiant_hero_ids(int index) const {
  return _impl_.radiant_hero_ids_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHeroes::radiant_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHeroes.radiant_hero_ids)
  return _internal_radiant_hero_ids(index);
}
inline void CMsgSteamLearnMatchHeroes::set_radiant_hero_ids(int index, uint32_t value) {
  _impl_.radiant_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHeroes.radiant_hero_ids)
}
inline void CMsgSteamLearnMatchHeroes::_internal_add_radiant_hero_ids(uint32_t value) {
  _impl_.radiant_hero_ids_.Add(value);
}
inline void CMsgSteamLearnMatchHeroes::add_radiant_hero_ids(uint32_t value) {
  _internal_add_radiant_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHeroes.radiant_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::_internal_radiant_hero_ids() const {
  return _impl_.radiant_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::radiant_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHeroes.radiant_hero_ids)
  return _internal_radiant_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::_internal_mutable_radiant_hero_ids() {
  return &_impl_.radiant_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::mutable_radiant_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHeroes.radiant_hero_ids)
  return _internal_mutable_radiant_hero_ids();
}

// repeated uint32 dire_hero_ids = 2 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchHeroes::_internal_dire_hero_ids_size() const {
  return _impl_.dire_hero_ids_.size();
}
inline int CMsgSteamLearnMatchHeroes::dire_hero_ids_size() const {
  return _internal_dire_hero_ids_size();
}
inline void CMsgSteamLearnMatchHeroes::clear_dire_hero_ids() {
  _impl_.dire_hero_ids_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHeroes::_internal_dire_hero_ids(int index) const {
  return _impl_.dire_hero_ids_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHeroes::dire_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHeroes.dire_hero_ids)
  return _internal_dire_hero_ids(index);
}
inline void CMsgSteamLearnMatchHeroes::set_dire_hero_ids(int index, uint32_t value) {
  _impl_.dire_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHeroes.dire_hero_ids)
}
inline void CMsgSteamLearnMatchHeroes::_internal_add_dire_hero_ids(uint32_t value) {
  _impl_.dire_hero_ids_.Add(value);
}
inline void CMsgSteamLearnMatchHeroes::add_dire_hero_ids(uint32_t value) {
  _internal_add_dire_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHeroes.dire_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::_internal_dire_hero_ids() const {
  return _impl_.dire_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::dire_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHeroes.dire_hero_ids)
  return _internal_dire_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::_internal_mutable_dire_hero_ids() {
  return &_impl_.dire_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::mutable_dire_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHeroes.dire_hero_ids)
  return _internal_mutable_dire_hero_ids();
}

// repeated uint32 radiant_lanes = 3 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchHeroes::_internal_radiant_lanes_size() const {
  return _impl_.radiant_lanes_.size();
}
inline int CMsgSteamLearnMatchHeroes::radiant_lanes_size() const {
  return _internal_radiant_lanes_size();
}
inline void CMsgSteamLearnMatchHeroes::clear_radiant_lanes() {
  _impl_.radiant_lanes_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHeroes::_internal_radiant_lanes(int index) const {
  return _impl_.radiant_lanes_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHeroes::radiant_lanes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHeroes.radiant_lanes)
  return _internal_radiant_lanes(index);
}
inline void CMsgSteamLearnMatchHeroes::set_radiant_lanes(int index, uint32_t value) {
  _impl_.radiant_lanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHeroes.radiant_lanes)
}
inline void CMsgSteamLearnMatchHeroes::_internal_add_radiant_lanes(uint32_t value) {
  _impl_.radiant_lanes_.Add(value);
}
inline void CMsgSteamLearnMatchHeroes::add_radiant_lanes(uint32_t value) {
  _internal_add_radiant_lanes(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHeroes.radiant_lanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::_internal_radiant_lanes() const {
  return _impl_.radiant_lanes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::radiant_lanes() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHeroes.radiant_lanes)
  return _internal_radiant_lanes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::_internal_mutable_radiant_lanes() {
  return &_impl_.radiant_lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::mutable_radiant_lanes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHeroes.radiant_lanes)
  return _internal_mutable_radiant_lanes();
}

// repeated uint32 dire_lanes = 4 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchHeroes::_internal_dire_lanes_size() const {
  return _impl_.dire_lanes_.size();
}
inline int CMsgSteamLearnMatchHeroes::dire_lanes_size() const {
  return _internal_dire_lanes_size();
}
inline void CMsgSteamLearnMatchHeroes::clear_dire_lanes() {
  _impl_.dire_lanes_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHeroes::_internal_dire_lanes(int index) const {
  return _impl_.dire_lanes_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHeroes::dire_lanes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHeroes.dire_lanes)
  return _internal_dire_lanes(index);
}
inline void CMsgSteamLearnMatchHeroes::set_dire_lanes(int index, uint32_t value) {
  _impl_.dire_lanes_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHeroes.dire_lanes)
}
inline void CMsgSteamLearnMatchHeroes::_internal_add_dire_lanes(uint32_t value) {
  _impl_.dire_lanes_.Add(value);
}
inline void CMsgSteamLearnMatchHeroes::add_dire_lanes(uint32_t value) {
  _internal_add_dire_lanes(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHeroes.dire_lanes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::_internal_dire_lanes() const {
  return _impl_.dire_lanes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHeroes::dire_lanes() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHeroes.dire_lanes)
  return _internal_dire_lanes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::_internal_mutable_dire_lanes() {
  return &_impl_.dire_lanes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHeroes::mutable_dire_lanes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHeroes.dire_lanes)
  return _internal_mutable_dire_lanes();
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchHero

// optional uint32 hero_id = 1;
inline bool CMsgSteamLearnMatchHero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSteamLearnMatchHero::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearnMatchHero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSteamLearnMatchHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHero.hero_id)
  return _internal_hero_id();
}
inline void CMsgSteamLearnMatchHero::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgSteamLearnMatchHero::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHero.hero_id)
}

// optional uint32 lane = 2;
inline bool CMsgSteamLearnMatchHero::_internal_has_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchHero::has_lane() const {
  return _internal_has_lane();
}
inline void CMsgSteamLearnMatchHero::clear_lane() {
  _impl_.lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnMatchHero::_internal_lane() const {
  return _impl_.lane_;
}
inline uint32_t CMsgSteamLearnMatchHero::lane() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHero.lane)
  return _internal_lane();
}
inline void CMsgSteamLearnMatchHero::_internal_set_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lane_ = value;
}
inline void CMsgSteamLearnMatchHero::set_lane(uint32_t value) {
  _internal_set_lane(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHero.lane)
}

// repeated uint32 allied_hero_ids = 3 [(.steamlearn_count) = 4];
inline int CMsgSteamLearnMatchHero::_internal_allied_hero_ids_size() const {
  return _impl_.allied_hero_ids_.size();
}
inline int CMsgSteamLearnMatchHero::allied_hero_ids_size() const {
  return _internal_allied_hero_ids_size();
}
inline void CMsgSteamLearnMatchHero::clear_allied_hero_ids() {
  _impl_.allied_hero_ids_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHero::_internal_allied_hero_ids(int index) const {
  return _impl_.allied_hero_ids_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHero::allied_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHero.allied_hero_ids)
  return _internal_allied_hero_ids(index);
}
inline void CMsgSteamLearnMatchHero::set_allied_hero_ids(int index, uint32_t value) {
  _impl_.allied_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHero.allied_hero_ids)
}
inline void CMsgSteamLearnMatchHero::_internal_add_allied_hero_ids(uint32_t value) {
  _impl_.allied_hero_ids_.Add(value);
}
inline void CMsgSteamLearnMatchHero::add_allied_hero_ids(uint32_t value) {
  _internal_add_allied_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHero.allied_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHero::_internal_allied_hero_ids() const {
  return _impl_.allied_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHero::allied_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHero.allied_hero_ids)
  return _internal_allied_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHero::_internal_mutable_allied_hero_ids() {
  return &_impl_.allied_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHero::mutable_allied_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHero.allied_hero_ids)
  return _internal_mutable_allied_hero_ids();
}

// repeated uint32 enemy_hero_ids = 4 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchHero::_internal_enemy_hero_ids_size() const {
  return _impl_.enemy_hero_ids_.size();
}
inline int CMsgSteamLearnMatchHero::enemy_hero_ids_size() const {
  return _internal_enemy_hero_ids_size();
}
inline void CMsgSteamLearnMatchHero::clear_enemy_hero_ids() {
  _impl_.enemy_hero_ids_.Clear();
}
inline uint32_t CMsgSteamLearnMatchHero::_internal_enemy_hero_ids(int index) const {
  return _impl_.enemy_hero_ids_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchHero::enemy_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchHero.enemy_hero_ids)
  return _internal_enemy_hero_ids(index);
}
inline void CMsgSteamLearnMatchHero::set_enemy_hero_ids(int index, uint32_t value) {
  _impl_.enemy_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchHero.enemy_hero_ids)
}
inline void CMsgSteamLearnMatchHero::_internal_add_enemy_hero_ids(uint32_t value) {
  _impl_.enemy_hero_ids_.Add(value);
}
inline void CMsgSteamLearnMatchHero::add_enemy_hero_ids(uint32_t value) {
  _internal_add_enemy_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchHero.enemy_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHero::_internal_enemy_hero_ids() const {
  return _impl_.enemy_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchHero::enemy_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchHero.enemy_hero_ids)
  return _internal_enemy_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHero::_internal_mutable_enemy_hero_ids() {
  return &_impl_.enemy_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchHero::mutable_enemy_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchHero.enemy_hero_ids)
  return _internal_mutable_enemy_hero_ids();
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchState_PlayerState

// optional uint32 hero_id = 1;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.hero_id)
  return _internal_hero_id();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.hero_id)
}

// optional uint32 net_worth = 2;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.net_worth)
  return _internal_net_worth();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.net_worth_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.net_worth)
}

// optional uint32 level = 3;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_level() const {
  return _internal_has_level();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::level() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.level)
  return _internal_level();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.level_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.level)
}

// optional uint32 deaths = 4;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_deaths() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_deaths() {
  _impl_.deaths_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_deaths() const {
  return _impl_.deaths_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.deaths)
  return _internal_deaths();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_deaths(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.deaths_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_deaths(uint32_t value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.deaths)
}

// optional uint32 respawn_time = 5;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_respawn_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_respawn_time() const {
  return _internal_has_respawn_time();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_respawn_time() {
  _impl_.respawn_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_respawn_time() const {
  return _impl_.respawn_time_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::respawn_time() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.respawn_time)
  return _internal_respawn_time();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_respawn_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.respawn_time_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_respawn_time(uint32_t value) {
  _internal_set_respawn_time(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.respawn_time)
}

// optional bool has_buyback = 6;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_has_buyback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_has_buyback() const {
  return _internal_has_has_buyback();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_has_buyback() {
  _impl_.has_buyback_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_buyback() const {
  return _impl_.has_buyback_;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_buyback() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.has_buyback)
  return _internal_has_buyback();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_has_buyback(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.has_buyback_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_has_buyback(bool value) {
  _internal_set_has_buyback(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.has_buyback)
}

// optional bool has_aegis = 7;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_has_aegis() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_has_aegis() const {
  return _internal_has_has_aegis();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_has_aegis() {
  _impl_.has_aegis_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_aegis() const {
  return _impl_.has_aegis_;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_aegis() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.has_aegis)
  return _internal_has_aegis();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_has_aegis(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.has_aegis_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_has_aegis(bool value) {
  _internal_set_has_aegis(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.has_aegis)
}

// optional bool has_rapier = 8;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_has_rapier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_has_rapier() const {
  return _internal_has_has_rapier();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_has_rapier() {
  _impl_.has_rapier_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_rapier() const {
  return _impl_.has_rapier_;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_rapier() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.has_rapier)
  return _internal_has_rapier();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_has_rapier(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.has_rapier_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_has_rapier(bool value) {
  _internal_set_has_rapier(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.has_rapier)
}

// optional uint32 distance = 9;
inline bool CMsgSteamLearnMatchState_PlayerState::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_PlayerState::has_distance() const {
  return _internal_has_distance();
}
inline void CMsgSteamLearnMatchState_PlayerState::clear_distance() {
  _impl_.distance_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t CMsgSteamLearnMatchState_PlayerState::distance() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.PlayerState.distance)
  return _internal_distance();
}
inline void CMsgSteamLearnMatchState_PlayerState::_internal_set_distance(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.distance_ = value;
}
inline void CMsgSteamLearnMatchState_PlayerState::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.PlayerState.distance)
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchState_TeamState

// optional uint32 team = 1;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_team() const {
  return _internal_has_team();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_team() {
  _impl_.team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_team() const {
  return _impl_.team_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::team() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.team)
  return _internal_team();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_team(uint32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.team)
}

// repeated .CMsgSteamLearnMatchState.PlayerState player_states = 2 [(.steamlearn_count) = 5];
inline int CMsgSteamLearnMatchState_TeamState::_internal_player_states_size() const {
  return _impl_.player_states_.size();
}
inline int CMsgSteamLearnMatchState_TeamState::player_states_size() const {
  return _internal_player_states_size();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_player_states() {
  _impl_.player_states_.Clear();
}
inline ::CMsgSteamLearnMatchState_PlayerState* CMsgSteamLearnMatchState_TeamState::mutable_player_states(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnMatchState.TeamState.player_states)
  return _impl_.player_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnMatchState_PlayerState >*
CMsgSteamLearnMatchState_TeamState::mutable_player_states() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchState.TeamState.player_states)
  return &_impl_.player_states_;
}
inline const ::CMsgSteamLearnMatchState_PlayerState& CMsgSteamLearnMatchState_TeamState::_internal_player_states(int index) const {
  return _impl_.player_states_.Get(index);
}
inline const ::CMsgSteamLearnMatchState_PlayerState& CMsgSteamLearnMatchState_TeamState::player_states(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.player_states)
  return _internal_player_states(index);
}
inline ::CMsgSteamLearnMatchState_PlayerState* CMsgSteamLearnMatchState_TeamState::_internal_add_player_states() {
  return _impl_.player_states_.Add();
}
inline ::CMsgSteamLearnMatchState_PlayerState* CMsgSteamLearnMatchState_TeamState::add_player_states() {
  ::CMsgSteamLearnMatchState_PlayerState* _add = _internal_add_player_states();
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchState.TeamState.player_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSteamLearnMatchState_PlayerState >&
CMsgSteamLearnMatchState_TeamState::player_states() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchState.TeamState.player_states)
  return _impl_.player_states_;
}

// repeated uint32 tower_health_pct = 3 [(.steamlearn_count) = 11];
inline int CMsgSteamLearnMatchState_TeamState::_internal_tower_health_pct_size() const {
  return _impl_.tower_health_pct_.size();
}
inline int CMsgSteamLearnMatchState_TeamState::tower_health_pct_size() const {
  return _internal_tower_health_pct_size();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_tower_health_pct() {
  _impl_.tower_health_pct_.Clear();
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_tower_health_pct(int index) const {
  return _impl_.tower_health_pct_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::tower_health_pct(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.tower_health_pct)
  return _internal_tower_health_pct(index);
}
inline void CMsgSteamLearnMatchState_TeamState::set_tower_health_pct(int index, uint32_t value) {
  _impl_.tower_health_pct_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.tower_health_pct)
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_add_tower_health_pct(uint32_t value) {
  _impl_.tower_health_pct_.Add(value);
}
inline void CMsgSteamLearnMatchState_TeamState::add_tower_health_pct(uint32_t value) {
  _internal_add_tower_health_pct(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchState.TeamState.tower_health_pct)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchState_TeamState::_internal_tower_health_pct() const {
  return _impl_.tower_health_pct_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchState_TeamState::tower_health_pct() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchState.TeamState.tower_health_pct)
  return _internal_tower_health_pct();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchState_TeamState::_internal_mutable_tower_health_pct() {
  return &_impl_.tower_health_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchState_TeamState::mutable_tower_health_pct() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchState.TeamState.tower_health_pct)
  return _internal_mutable_tower_health_pct();
}

// repeated uint32 barracks_health_pct = 4 [(.steamlearn_count) = 6];
inline int CMsgSteamLearnMatchState_TeamState::_internal_barracks_health_pct_size() const {
  return _impl_.barracks_health_pct_.size();
}
inline int CMsgSteamLearnMatchState_TeamState::barracks_health_pct_size() const {
  return _internal_barracks_health_pct_size();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_barracks_health_pct() {
  _impl_.barracks_health_pct_.Clear();
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_barracks_health_pct(int index) const {
  return _impl_.barracks_health_pct_.Get(index);
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::barracks_health_pct(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.barracks_health_pct)
  return _internal_barracks_health_pct(index);
}
inline void CMsgSteamLearnMatchState_TeamState::set_barracks_health_pct(int index, uint32_t value) {
  _impl_.barracks_health_pct_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.barracks_health_pct)
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_add_barracks_health_pct(uint32_t value) {
  _impl_.barracks_health_pct_.Add(value);
}
inline void CMsgSteamLearnMatchState_TeamState::add_barracks_health_pct(uint32_t value) {
  _internal_add_barracks_health_pct(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnMatchState.TeamState.barracks_health_pct)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchState_TeamState::_internal_barracks_health_pct() const {
  return _impl_.barracks_health_pct_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgSteamLearnMatchState_TeamState::barracks_health_pct() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnMatchState.TeamState.barracks_health_pct)
  return _internal_barracks_health_pct();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchState_TeamState::_internal_mutable_barracks_health_pct() {
  return &_impl_.barracks_health_pct_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgSteamLearnMatchState_TeamState::mutable_barracks_health_pct() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnMatchState.TeamState.barracks_health_pct)
  return _internal_mutable_barracks_health_pct();
}

// optional uint32 ancient_health_pct = 5;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_ancient_health_pct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_ancient_health_pct() const {
  return _internal_has_ancient_health_pct();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_ancient_health_pct() {
  _impl_.ancient_health_pct_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_ancient_health_pct() const {
  return _impl_.ancient_health_pct_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::ancient_health_pct() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.ancient_health_pct)
  return _internal_ancient_health_pct();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_ancient_health_pct(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ancient_health_pct_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_ancient_health_pct(uint32_t value) {
  _internal_set_ancient_health_pct(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.ancient_health_pct)
}

// optional uint32 glyph_cooldown = 6;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_glyph_cooldown() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_glyph_cooldown() const {
  return _internal_has_glyph_cooldown();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_glyph_cooldown() {
  _impl_.glyph_cooldown_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_glyph_cooldown() const {
  return _impl_.glyph_cooldown_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::glyph_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.glyph_cooldown)
  return _internal_glyph_cooldown();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_glyph_cooldown(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.glyph_cooldown_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_glyph_cooldown(uint32_t value) {
  _internal_set_glyph_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.glyph_cooldown)
}

// optional uint32 kills = 7;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_kills() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_kills() {
  _impl_.kills_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_kills() const {
  return _impl_.kills_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::kills() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.kills)
  return _internal_kills();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_kills(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.kills_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_kills(uint32_t value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.kills)
}

// optional uint32 creep_distance_safe = 8;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_creep_distance_safe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_creep_distance_safe() const {
  return _internal_has_creep_distance_safe();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_creep_distance_safe() {
  _impl_.creep_distance_safe_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_creep_distance_safe() const {
  return _impl_.creep_distance_safe_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::creep_distance_safe() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.creep_distance_safe)
  return _internal_creep_distance_safe();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_creep_distance_safe(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.creep_distance_safe_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_creep_distance_safe(uint32_t value) {
  _internal_set_creep_distance_safe(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.creep_distance_safe)
}

// optional uint32 creep_distance_mid = 9;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_creep_distance_mid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_creep_distance_mid() const {
  return _internal_has_creep_distance_mid();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_creep_distance_mid() {
  _impl_.creep_distance_mid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_creep_distance_mid() const {
  return _impl_.creep_distance_mid_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::creep_distance_mid() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.creep_distance_mid)
  return _internal_creep_distance_mid();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_creep_distance_mid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.creep_distance_mid_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_creep_distance_mid(uint32_t value) {
  _internal_set_creep_distance_mid(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.creep_distance_mid)
}

// optional uint32 creep_distance_off = 10;
inline bool CMsgSteamLearnMatchState_TeamState::_internal_has_creep_distance_off() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState_TeamState::has_creep_distance_off() const {
  return _internal_has_creep_distance_off();
}
inline void CMsgSteamLearnMatchState_TeamState::clear_creep_distance_off() {
  _impl_.creep_distance_off_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::_internal_creep_distance_off() const {
  return _impl_.creep_distance_off_;
}
inline uint32_t CMsgSteamLearnMatchState_TeamState::creep_distance_off() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.TeamState.creep_distance_off)
  return _internal_creep_distance_off();
}
inline void CMsgSteamLearnMatchState_TeamState::_internal_set_creep_distance_off(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.creep_distance_off_ = value;
}
inline void CMsgSteamLearnMatchState_TeamState::set_creep_distance_off(uint32_t value) {
  _internal_set_creep_distance_off(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.TeamState.creep_distance_off)
}

// -------------------------------------------------------------------

// CMsgSteamLearnMatchState

// optional float game_time = 1;
inline bool CMsgSteamLearnMatchState::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnMatchState::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgSteamLearnMatchState::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgSteamLearnMatchState::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CMsgSteamLearnMatchState::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.game_time)
  return _internal_game_time();
}
inline void CMsgSteamLearnMatchState::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.game_time_ = value;
}
inline void CMsgSteamLearnMatchState::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnMatchState.game_time)
}

// optional .CMsgSteamLearnMatchState.TeamState radiant_state = 2;
inline bool CMsgSteamLearnMatchState::_internal_has_radiant_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radiant_state_ != nullptr);
  return value;
}
inline bool CMsgSteamLearnMatchState::has_radiant_state() const {
  return _internal_has_radiant_state();
}
inline void CMsgSteamLearnMatchState::clear_radiant_state() {
  if (_impl_.radiant_state_ != nullptr) _impl_.radiant_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamLearnMatchState_TeamState& CMsgSteamLearnMatchState::_internal_radiant_state() const {
  const ::CMsgSteamLearnMatchState_TeamState* p = _impl_.radiant_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnMatchState_TeamState&>(
      ::_CMsgSteamLearnMatchState_TeamState_default_instance_);
}
inline const ::CMsgSteamLearnMatchState_TeamState& CMsgSteamLearnMatchState::radiant_state() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.radiant_state)
  return _internal_radiant_state();
}
inline void CMsgSteamLearnMatchState::unsafe_arena_set_allocated_radiant_state(
    ::CMsgSteamLearnMatchState_TeamState* radiant_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radiant_state_);
  }
  _impl_.radiant_state_ = radiant_state;
  if (radiant_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearnMatchState.radiant_state)
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::release_radiant_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnMatchState_TeamState* temp = _impl_.radiant_state_;
  _impl_.radiant_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::unsafe_arena_release_radiant_state() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnMatchState.radiant_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamLearnMatchState_TeamState* temp = _impl_.radiant_state_;
  _impl_.radiant_state_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::_internal_mutable_radiant_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.radiant_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnMatchState_TeamState>(GetArenaForAllocation());
    _impl_.radiant_state_ = p;
  }
  return _impl_.radiant_state_;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::mutable_radiant_state() {
  ::CMsgSteamLearnMatchState_TeamState* _msg = _internal_mutable_radiant_state();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnMatchState.radiant_state)
  return _msg;
}
inline void CMsgSteamLearnMatchState::set_allocated_radiant_state(::CMsgSteamLearnMatchState_TeamState* radiant_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.radiant_state_;
  }
  if (radiant_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(radiant_state);
    if (message_arena != submessage_arena) {
      radiant_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiant_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.radiant_state_ = radiant_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnMatchState.radiant_state)
}

// optional .CMsgSteamLearnMatchState.TeamState dire_state = 3;
inline bool CMsgSteamLearnMatchState::_internal_has_dire_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dire_state_ != nullptr);
  return value;
}
inline bool CMsgSteamLearnMatchState::has_dire_state() const {
  return _internal_has_dire_state();
}
inline void CMsgSteamLearnMatchState::clear_dire_state() {
  if (_impl_.dire_state_ != nullptr) _impl_.dire_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamLearnMatchState_TeamState& CMsgSteamLearnMatchState::_internal_dire_state() const {
  const ::CMsgSteamLearnMatchState_TeamState* p = _impl_.dire_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamLearnMatchState_TeamState&>(
      ::_CMsgSteamLearnMatchState_TeamState_default_instance_);
}
inline const ::CMsgSteamLearnMatchState_TeamState& CMsgSteamLearnMatchState::dire_state() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnMatchState.dire_state)
  return _internal_dire_state();
}
inline void CMsgSteamLearnMatchState::unsafe_arena_set_allocated_dire_state(
    ::CMsgSteamLearnMatchState_TeamState* dire_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dire_state_);
  }
  _impl_.dire_state_ = dire_state;
  if (dire_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamLearnMatchState.dire_state)
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::release_dire_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearnMatchState_TeamState* temp = _impl_.dire_state_;
  _impl_.dire_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::unsafe_arena_release_dire_state() {
  // @@protoc_insertion_point(field_release:CMsgSteamLearnMatchState.dire_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamLearnMatchState_TeamState* temp = _impl_.dire_state_;
  _impl_.dire_state_ = nullptr;
  return temp;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::_internal_mutable_dire_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dire_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamLearnMatchState_TeamState>(GetArenaForAllocation());
    _impl_.dire_state_ = p;
  }
  return _impl_.dire_state_;
}
inline ::CMsgSteamLearnMatchState_TeamState* CMsgSteamLearnMatchState::mutable_dire_state() {
  ::CMsgSteamLearnMatchState_TeamState* _msg = _internal_mutable_dire_state();
  // @@protoc_insertion_point(field_mutable:CMsgSteamLearnMatchState.dire_state)
  return _msg;
}
inline void CMsgSteamLearnMatchState::set_allocated_dire_state(::CMsgSteamLearnMatchState_TeamState* dire_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dire_state_;
  }
  if (dire_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dire_state);
    if (message_arena != submessage_arena) {
      dire_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dire_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.dire_state_ = dire_state;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamLearnMatchState.dire_state)
}

// -------------------------------------------------------------------

// CMsgSteamLearnItemPurchase

// optional int32 item_id = 1 [default = -1];
inline bool CMsgSteamLearnItemPurchase::_internal_has_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_item_id() const {
  return _internal_has_item_id();
}
inline void CMsgSteamLearnItemPurchase::clear_item_id() {
  _impl_.item_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CMsgSteamLearnItemPurchase::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t CMsgSteamLearnItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.item_id)
  return _internal_item_id();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_item_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.item_id_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.item_id)
}

// repeated int32 inventory_items = 2 [(.steamlearn_count) = 20];
inline int CMsgSteamLearnItemPurchase::_internal_inventory_items_size() const {
  return _impl_.inventory_items_.size();
}
inline int CMsgSteamLearnItemPurchase::inventory_items_size() const {
  return _internal_inventory_items_size();
}
inline void CMsgSteamLearnItemPurchase::clear_inventory_items() {
  _impl_.inventory_items_.Clear();
}
inline int32_t CMsgSteamLearnItemPurchase::_internal_inventory_items(int index) const {
  return _impl_.inventory_items_.Get(index);
}
inline int32_t CMsgSteamLearnItemPurchase::inventory_items(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.inventory_items)
  return _internal_inventory_items(index);
}
inline void CMsgSteamLearnItemPurchase::set_inventory_items(int index, int32_t value) {
  _impl_.inventory_items_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.inventory_items)
}
inline void CMsgSteamLearnItemPurchase::_internal_add_inventory_items(int32_t value) {
  _impl_.inventory_items_.Add(value);
}
inline void CMsgSteamLearnItemPurchase::add_inventory_items(int32_t value) {
  _internal_add_inventory_items(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnItemPurchase.inventory_items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnItemPurchase::_internal_inventory_items() const {
  return _impl_.inventory_items_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnItemPurchase::inventory_items() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnItemPurchase.inventory_items)
  return _internal_inventory_items();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnItemPurchase::_internal_mutable_inventory_items() {
  return &_impl_.inventory_items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnItemPurchase::mutable_inventory_items() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnItemPurchase.inventory_items)
  return _internal_mutable_inventory_items();
}

// optional uint32 gold = 4;
inline bool CMsgSteamLearnItemPurchase::_internal_has_gold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_gold() const {
  return _internal_has_gold();
}
inline void CMsgSteamLearnItemPurchase::clear_gold() {
  _impl_.gold_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgSteamLearnItemPurchase::_internal_gold() const {
  return _impl_.gold_;
}
inline uint32_t CMsgSteamLearnItemPurchase::gold() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.gold)
  return _internal_gold();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_gold(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gold_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_gold(uint32_t value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.gold)
}

// optional uint32 net_worth = 5;
inline bool CMsgSteamLearnItemPurchase::_internal_has_net_worth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_net_worth() const {
  return _internal_has_net_worth();
}
inline void CMsgSteamLearnItemPurchase::clear_net_worth() {
  _impl_.net_worth_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgSteamLearnItemPurchase::_internal_net_worth() const {
  return _impl_.net_worth_;
}
inline uint32_t CMsgSteamLearnItemPurchase::net_worth() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.net_worth)
  return _internal_net_worth();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_net_worth(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.net_worth_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_net_worth(uint32_t value) {
  _internal_set_net_worth(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.net_worth)
}

// optional uint32 is_radiant_team = 6;
inline bool CMsgSteamLearnItemPurchase::_internal_has_is_radiant_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_is_radiant_team() const {
  return _internal_has_is_radiant_team();
}
inline void CMsgSteamLearnItemPurchase::clear_is_radiant_team() {
  _impl_.is_radiant_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgSteamLearnItemPurchase::_internal_is_radiant_team() const {
  return _impl_.is_radiant_team_;
}
inline uint32_t CMsgSteamLearnItemPurchase::is_radiant_team() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.is_radiant_team)
  return _internal_is_radiant_team();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_is_radiant_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_radiant_team_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_is_radiant_team(uint32_t value) {
  _internal_set_is_radiant_team(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.is_radiant_team)
}

// optional float game_time = 7;
inline bool CMsgSteamLearnItemPurchase::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgSteamLearnItemPurchase::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgSteamLearnItemPurchase::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CMsgSteamLearnItemPurchase::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.game_time)
  return _internal_game_time();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.game_time_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.game_time)
}

// optional bool is_using_dota_plus = 8;
inline bool CMsgSteamLearnItemPurchase::_internal_has_is_using_dota_plus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSteamLearnItemPurchase::has_is_using_dota_plus() const {
  return _internal_has_is_using_dota_plus();
}
inline void CMsgSteamLearnItemPurchase::clear_is_using_dota_plus() {
  _impl_.is_using_dota_plus_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgSteamLearnItemPurchase::_internal_is_using_dota_plus() const {
  return _impl_.is_using_dota_plus_;
}
inline bool CMsgSteamLearnItemPurchase::is_using_dota_plus() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnItemPurchase.is_using_dota_plus)
  return _internal_is_using_dota_plus();
}
inline void CMsgSteamLearnItemPurchase::_internal_set_is_using_dota_plus(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.is_using_dota_plus_ = value;
}
inline void CMsgSteamLearnItemPurchase::set_is_using_dota_plus(bool value) {
  _internal_set_is_using_dota_plus(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnItemPurchase.is_using_dota_plus)
}

// -------------------------------------------------------------------

// CMsgSteamLearnAbilitySkill

// optional int32 ability_id = 1 [default = -1];
inline bool CMsgSteamLearnAbilitySkill::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSteamLearnAbilitySkill::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CMsgSteamLearnAbilitySkill::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgSteamLearnAbilitySkill::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CMsgSteamLearnAbilitySkill::ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnAbilitySkill.ability_id)
  return _internal_ability_id();
}
inline void CMsgSteamLearnAbilitySkill::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ability_id_ = value;
}
inline void CMsgSteamLearnAbilitySkill::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnAbilitySkill.ability_id)
}

// repeated int32 skilled_abilities = 2 [(.steamlearn_count) = 30];
inline int CMsgSteamLearnAbilitySkill::_internal_skilled_abilities_size() const {
  return _impl_.skilled_abilities_.size();
}
inline int CMsgSteamLearnAbilitySkill::skilled_abilities_size() const {
  return _internal_skilled_abilities_size();
}
inline void CMsgSteamLearnAbilitySkill::clear_skilled_abilities() {
  _impl_.skilled_abilities_.Clear();
}
inline int32_t CMsgSteamLearnAbilitySkill::_internal_skilled_abilities(int index) const {
  return _impl_.skilled_abilities_.Get(index);
}
inline int32_t CMsgSteamLearnAbilitySkill::skilled_abilities(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnAbilitySkill.skilled_abilities)
  return _internal_skilled_abilities(index);
}
inline void CMsgSteamLearnAbilitySkill::set_skilled_abilities(int index, int32_t value) {
  _impl_.skilled_abilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnAbilitySkill.skilled_abilities)
}
inline void CMsgSteamLearnAbilitySkill::_internal_add_skilled_abilities(int32_t value) {
  _impl_.skilled_abilities_.Add(value);
}
inline void CMsgSteamLearnAbilitySkill::add_skilled_abilities(int32_t value) {
  _internal_add_skilled_abilities(value);
  // @@protoc_insertion_point(field_add:CMsgSteamLearnAbilitySkill.skilled_abilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnAbilitySkill::_internal_skilled_abilities() const {
  return _impl_.skilled_abilities_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CMsgSteamLearnAbilitySkill::skilled_abilities() const {
  // @@protoc_insertion_point(field_list:CMsgSteamLearnAbilitySkill.skilled_abilities)
  return _internal_skilled_abilities();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnAbilitySkill::_internal_mutable_skilled_abilities() {
  return &_impl_.skilled_abilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CMsgSteamLearnAbilitySkill::mutable_skilled_abilities() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamLearnAbilitySkill.skilled_abilities)
  return _internal_mutable_skilled_abilities();
}

// optional float game_time = 3;
inline bool CMsgSteamLearnAbilitySkill::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSteamLearnAbilitySkill::has_game_time() const {
  return _internal_has_game_time();
}
inline void CMsgSteamLearnAbilitySkill::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgSteamLearnAbilitySkill::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CMsgSteamLearnAbilitySkill::game_time() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnAbilitySkill.game_time)
  return _internal_game_time();
}
inline void CMsgSteamLearnAbilitySkill::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_time_ = value;
}
inline void CMsgSteamLearnAbilitySkill::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnAbilitySkill.game_time)
}

// optional bool is_using_dota_plus = 4;
inline bool CMsgSteamLearnAbilitySkill::_internal_has_is_using_dota_plus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSteamLearnAbilitySkill::has_is_using_dota_plus() const {
  return _internal_has_is_using_dota_plus();
}
inline void CMsgSteamLearnAbilitySkill::clear_is_using_dota_plus() {
  _impl_.is_using_dota_plus_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgSteamLearnAbilitySkill::_internal_is_using_dota_plus() const {
  return _impl_.is_using_dota_plus_;
}
inline bool CMsgSteamLearnAbilitySkill::is_using_dota_plus() const {
  // @@protoc_insertion_point(field_get:CMsgSteamLearnAbilitySkill.is_using_dota_plus)
  return _internal_is_using_dota_plus();
}
inline void CMsgSteamLearnAbilitySkill::_internal_set_is_using_dota_plus(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_using_dota_plus_ = value;
}
inline void CMsgSteamLearnAbilitySkill::set_is_using_dota_plus(bool value) {
  _internal_set_is_using_dota_plus(value);
  // @@protoc_insertion_point(field_set:CMsgSteamLearnAbilitySkill.is_using_dota_plus)
}

// -------------------------------------------------------------------

// CMsgSignOutMuertaMinigame

// optional bytes event_game_data = 1;
inline bool CMsgSignOutMuertaMinigame::_internal_has_event_game_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSignOutMuertaMinigame::has_event_game_data() const {
  return _internal_has_event_game_data();
}
inline void CMsgSignOutMuertaMinigame::clear_event_game_data() {
  _impl_.event_game_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSignOutMuertaMinigame::event_game_data() const {
  // @@protoc_insertion_point(field_get:CMsgSignOutMuertaMinigame.event_game_data)
  return _internal_event_game_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgSignOutMuertaMinigame::set_event_game_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.event_game_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgSignOutMuertaMinigame.event_game_data)
}
inline std::string* CMsgSignOutMuertaMinigame::mutable_event_game_data() {
  std::string* _s = _internal_mutable_event_game_data();
  // @@protoc_insertion_point(field_mutable:CMsgSignOutMuertaMinigame.event_game_data)
  return _s;
}
inline const std::string& CMsgSignOutMuertaMinigame::_internal_event_game_data() const {
  return _impl_.event_game_data_.Get();
}
inline void CMsgSignOutMuertaMinigame::_internal_set_event_game_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_game_data_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgSignOutMuertaMinigame::_internal_mutable_event_game_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.event_game_data_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgSignOutMuertaMinigame::release_event_game_data() {
  // @@protoc_insertion_point(field_release:CMsgSignOutMuertaMinigame.event_game_data)
  if (!_internal_has_event_game_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.event_game_data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_data_.IsDefault()) {
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgSignOutMuertaMinigame::set_allocated_event_game_data(std::string* event_game_data) {
  if (event_game_data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.event_game_data_.SetAllocated(event_game_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_data_.IsDefault()) {
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgSignOutMuertaMinigame.event_game_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgConnectedPlayers_SendReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgConnectedPlayers_SendReason>() {
  return ::CMsgConnectedPlayers_SendReason_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerInfo_ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerInfo_ServerType>() {
  return ::CMsgGameServerInfo_ServerType_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerInfo_CustomGames> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerInfo_CustomGames>() {
  return ::CMsgGameServerInfo_CustomGames_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType>() {
  return ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>() {
  return ::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor();
}
template <> struct is_proto_enum< ::CMsgGameServerSaveGameResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGameServerSaveGameResult_Result>() {
  return ::CMsgGameServerSaveGameResult_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgGCToServerPredictionResult_Prediction_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCToServerPredictionResult_Prediction_EResult>() {
  return ::CMsgGCToServerPredictionResult_Prediction_EResult_descriptor();
}
template <> struct is_proto_enum< ::EPoorNetworkConditionsType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPoorNetworkConditionsType>() {
  return ::EPoorNetworkConditionsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fserver_2eproto
