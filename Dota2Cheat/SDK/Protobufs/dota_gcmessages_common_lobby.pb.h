// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_lobby.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5flobby_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5flobby_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5flobby_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto;
class CLobbyBroadcastChannelInfo;
struct CLobbyBroadcastChannelInfoDefaultTypeInternal;
extern CLobbyBroadcastChannelInfoDefaultTypeInternal _CLobbyBroadcastChannelInfo_default_instance_;
class CLobbyGuildChallenge;
struct CLobbyGuildChallengeDefaultTypeInternal;
extern CLobbyGuildChallengeDefaultTypeInternal _CLobbyGuildChallenge_default_instance_;
class CLobbyGuildDetails;
struct CLobbyGuildDetailsDefaultTypeInternal;
extern CLobbyGuildDetailsDefaultTypeInternal _CLobbyGuildDetails_default_instance_;
class CLobbyTeamDetails;
struct CLobbyTeamDetailsDefaultTypeInternal;
extern CLobbyTeamDetailsDefaultTypeInternal _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetails;
struct CLobbyTimedRewardDetailsDefaultTypeInternal;
extern CLobbyTimedRewardDetailsDefaultTypeInternal _CLobbyTimedRewardDetails_default_instance_;
class CMsgAdditionalLobbyStartupAccountData;
struct CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal;
extern CMsgAdditionalLobbyStartupAccountDataDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_default_instance_;
class CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange;
struct CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal;
extern CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRangeDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_default_instance_;
class CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange;
struct CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal;
extern CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRangeDefaultTypeInternal _CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_default_instance_;
class CMsgLobbyCoachFriendRequest;
struct CMsgLobbyCoachFriendRequestDefaultTypeInternal;
extern CMsgLobbyCoachFriendRequestDefaultTypeInternal _CMsgLobbyCoachFriendRequest_default_instance_;
class CMsgLobbyEventGameData;
struct CMsgLobbyEventGameDataDefaultTypeInternal;
extern CMsgLobbyEventGameDataDefaultTypeInternal _CMsgLobbyEventGameData_default_instance_;
class CMsgLobbyEventPoints;
struct CMsgLobbyEventPointsDefaultTypeInternal;
extern CMsgLobbyEventPointsDefaultTypeInternal _CMsgLobbyEventPoints_default_instance_;
class CMsgLobbyEventPoints_AccountPoints;
struct CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal;
extern CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal _CMsgLobbyEventPoints_AccountPoints_default_instance_;
class CMsgLobbyEventPoints_NetworkedEventAction;
struct CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal;
extern CMsgLobbyEventPoints_NetworkedEventActionDefaultTypeInternal _CMsgLobbyEventPoints_NetworkedEventAction_default_instance_;
class CMsgLobbyEventPoints_PeriodicResourceData;
struct CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal;
extern CMsgLobbyEventPoints_PeriodicResourceDataDefaultTypeInternal _CMsgLobbyEventPoints_PeriodicResourceData_default_instance_;
class CMsgLobbyInitializationComplete;
struct CMsgLobbyInitializationCompleteDefaultTypeInternal;
extern CMsgLobbyInitializationCompleteDefaultTypeInternal _CMsgLobbyInitializationComplete_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionData;
struct CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal;
extern CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge;
struct CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal;
extern CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
class CMsgLobbyPlaytestDetails;
struct CMsgLobbyPlaytestDetailsDefaultTypeInternal;
extern CMsgLobbyPlaytestDetailsDefaultTypeInternal _CMsgLobbyPlaytestDetails_default_instance_;
class CMsgLocalServerFakeLobbyData;
struct CMsgLocalServerFakeLobbyDataDefaultTypeInternal;
extern CMsgLocalServerFakeLobbyDataDefaultTypeInternal _CMsgLocalServerFakeLobbyData_default_instance_;
class CMsgLocalServerGuildData;
struct CMsgLocalServerGuildDataDefaultTypeInternal;
extern CMsgLocalServerGuildDataDefaultTypeInternal _CMsgLocalServerGuildData_default_instance_;
class CSODOTALobby;
struct CSODOTALobbyDefaultTypeInternal;
extern CSODOTALobbyDefaultTypeInternal _CSODOTALobby_default_instance_;
class CSODOTALobbyInvite;
struct CSODOTALobbyInviteDefaultTypeInternal;
extern CSODOTALobbyInviteDefaultTypeInternal _CSODOTALobbyInvite_default_instance_;
class CSODOTALobbyInvite_LobbyMember;
struct CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal;
extern CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal _CSODOTALobbyInvite_LobbyMember_default_instance_;
class CSODOTALobbyMember;
struct CSODOTALobbyMemberDefaultTypeInternal;
extern CSODOTALobbyMemberDefaultTypeInternal _CSODOTALobbyMember_default_instance_;
class CSODOTALobby_CExtraMsg;
struct CSODOTALobby_CExtraMsgDefaultTypeInternal;
extern CSODOTALobby_CExtraMsgDefaultTypeInternal _CSODOTALobby_CExtraMsg_default_instance_;
class CSODOTAServerLobby;
struct CSODOTAServerLobbyDefaultTypeInternal;
extern CSODOTAServerLobbyDefaultTypeInternal _CSODOTAServerLobby_default_instance_;
class CSODOTAServerLobbyMember;
struct CSODOTAServerLobbyMemberDefaultTypeInternal;
extern CSODOTAServerLobbyMemberDefaultTypeInternal _CSODOTAServerLobbyMember_default_instance_;
class CSODOTAServerStaticLobby;
struct CSODOTAServerStaticLobbyDefaultTypeInternal;
extern CSODOTAServerStaticLobbyDefaultTypeInternal _CSODOTAServerStaticLobby_default_instance_;
class CSODOTAServerStaticLobbyMember;
struct CSODOTAServerStaticLobbyMemberDefaultTypeInternal;
extern CSODOTAServerStaticLobbyMemberDefaultTypeInternal _CSODOTAServerStaticLobbyMember_default_instance_;
class CSODOTAStaticLobby;
struct CSODOTAStaticLobbyDefaultTypeInternal;
extern CSODOTAStaticLobbyDefaultTypeInternal _CSODOTAStaticLobby_default_instance_;
class CSODOTAStaticLobbyMember;
struct CSODOTAStaticLobbyMemberDefaultTypeInternal;
extern CSODOTAStaticLobbyMemberDefaultTypeInternal _CSODOTAStaticLobbyMember_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CLobbyBroadcastChannelInfo* Arena::CreateMaybeMessage<::CLobbyBroadcastChannelInfo>(Arena*);
template<> ::CLobbyGuildChallenge* Arena::CreateMaybeMessage<::CLobbyGuildChallenge>(Arena*);
template<> ::CLobbyGuildDetails* Arena::CreateMaybeMessage<::CLobbyGuildDetails>(Arena*);
template<> ::CLobbyTeamDetails* Arena::CreateMaybeMessage<::CLobbyTeamDetails>(Arena*);
template<> ::CLobbyTimedRewardDetails* Arena::CreateMaybeMessage<::CLobbyTimedRewardDetails>(Arena*);
template<> ::CMsgAdditionalLobbyStartupAccountData* Arena::CreateMaybeMessage<::CMsgAdditionalLobbyStartupAccountData>(Arena*);
template<> ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* Arena::CreateMaybeMessage<::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange>(Arena*);
template<> ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* Arena::CreateMaybeMessage<::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange>(Arena*);
template<> ::CMsgLobbyCoachFriendRequest* Arena::CreateMaybeMessage<::CMsgLobbyCoachFriendRequest>(Arena*);
template<> ::CMsgLobbyEventGameData* Arena::CreateMaybeMessage<::CMsgLobbyEventGameData>(Arena*);
template<> ::CMsgLobbyEventPoints* Arena::CreateMaybeMessage<::CMsgLobbyEventPoints>(Arena*);
template<> ::CMsgLobbyEventPoints_AccountPoints* Arena::CreateMaybeMessage<::CMsgLobbyEventPoints_AccountPoints>(Arena*);
template<> ::CMsgLobbyEventPoints_NetworkedEventAction* Arena::CreateMaybeMessage<::CMsgLobbyEventPoints_NetworkedEventAction>(Arena*);
template<> ::CMsgLobbyEventPoints_PeriodicResourceData* Arena::CreateMaybeMessage<::CMsgLobbyEventPoints_PeriodicResourceData>(Arena*);
template<> ::CMsgLobbyInitializationComplete* Arena::CreateMaybeMessage<::CMsgLobbyInitializationComplete>(Arena*);
template<> ::CMsgLobbyPlayerPlusSubscriptionData* Arena::CreateMaybeMessage<::CMsgLobbyPlayerPlusSubscriptionData>(Arena*);
template<> ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* Arena::CreateMaybeMessage<::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(Arena*);
template<> ::CMsgLobbyPlaytestDetails* Arena::CreateMaybeMessage<::CMsgLobbyPlaytestDetails>(Arena*);
template<> ::CMsgLocalServerFakeLobbyData* Arena::CreateMaybeMessage<::CMsgLocalServerFakeLobbyData>(Arena*);
template<> ::CMsgLocalServerGuildData* Arena::CreateMaybeMessage<::CMsgLocalServerGuildData>(Arena*);
template<> ::CSODOTALobby* Arena::CreateMaybeMessage<::CSODOTALobby>(Arena*);
template<> ::CSODOTALobbyInvite* Arena::CreateMaybeMessage<::CSODOTALobbyInvite>(Arena*);
template<> ::CSODOTALobbyInvite_LobbyMember* Arena::CreateMaybeMessage<::CSODOTALobbyInvite_LobbyMember>(Arena*);
template<> ::CSODOTALobbyMember* Arena::CreateMaybeMessage<::CSODOTALobbyMember>(Arena*);
template<> ::CSODOTALobby_CExtraMsg* Arena::CreateMaybeMessage<::CSODOTALobby_CExtraMsg>(Arena*);
template<> ::CSODOTAServerLobby* Arena::CreateMaybeMessage<::CSODOTAServerLobby>(Arena*);
template<> ::CSODOTAServerLobbyMember* Arena::CreateMaybeMessage<::CSODOTAServerLobbyMember>(Arena*);
template<> ::CSODOTAServerStaticLobby* Arena::CreateMaybeMessage<::CSODOTAServerStaticLobby>(Arena*);
template<> ::CSODOTAServerStaticLobbyMember* Arena::CreateMaybeMessage<::CSODOTAServerStaticLobbyMember>(Arena*);
template<> ::CSODOTAStaticLobby* Arena::CreateMaybeMessage<::CSODOTAStaticLobby>(Arena*);
template<> ::CSODOTAStaticLobbyMember* Arena::CreateMaybeMessage<::CSODOTAStaticLobbyMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CSODOTALobby_State : int {
  CSODOTALobby_State_UI = 0,
  CSODOTALobby_State_READYUP = 4,
  CSODOTALobby_State_SERVERSETUP = 1,
  CSODOTALobby_State_RUN = 2,
  CSODOTALobby_State_POSTGAME = 3,
  CSODOTALobby_State_NOTREADY = 5,
  CSODOTALobby_State_SERVERASSIGN = 6
};
bool CSODOTALobby_State_IsValid(int value);
constexpr CSODOTALobby_State CSODOTALobby_State_State_MIN = CSODOTALobby_State_UI;
constexpr CSODOTALobby_State CSODOTALobby_State_State_MAX = CSODOTALobby_State_SERVERASSIGN;
constexpr int CSODOTALobby_State_State_ARRAYSIZE = CSODOTALobby_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_State_descriptor();
template<typename T>
inline const std::string& CSODOTALobby_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTALobby_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTALobby_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTALobby_State_descriptor(), enum_t_value);
}
inline bool CSODOTALobby_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTALobby_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTALobby_State>(
    CSODOTALobby_State_descriptor(), name, value);
}
enum CSODOTALobby_LobbyType : int {
  CSODOTALobby_LobbyType_INVALID = -1,
  CSODOTALobby_LobbyType_CASUAL_MATCH = 0,
  CSODOTALobby_LobbyType_PRACTICE = 1,
  CSODOTALobby_LobbyType_COOP_BOT_MATCH = 4,
  CSODOTALobby_LobbyType_COMPETITIVE_MATCH = 7,
  CSODOTALobby_LobbyType_WEEKEND_TOURNEY = 9,
  CSODOTALobby_LobbyType_LOCAL_BOT_MATCH = 10,
  CSODOTALobby_LobbyType_SPECTATOR = 11,
  CSODOTALobby_LobbyType_EVENT_MATCH = 12,
  CSODOTALobby_LobbyType_NEW_PLAYER_POOL = 14,
  CSODOTALobby_LobbyType_FEATURED_GAMEMODE = 15
};
bool CSODOTALobby_LobbyType_IsValid(int value);
constexpr CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MIN = CSODOTALobby_LobbyType_INVALID;
constexpr CSODOTALobby_LobbyType CSODOTALobby_LobbyType_LobbyType_MAX = CSODOTALobby_LobbyType_FEATURED_GAMEMODE;
constexpr int CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE = CSODOTALobby_LobbyType_LobbyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CSODOTALobby_LobbyType_descriptor();
template<typename T>
inline const std::string& CSODOTALobby_LobbyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CSODOTALobby_LobbyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CSODOTALobby_LobbyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CSODOTALobby_LobbyType_descriptor(), enum_t_value);
}
inline bool CSODOTALobby_LobbyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CSODOTALobby_LobbyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CSODOTALobby_LobbyType>(
    CSODOTALobby_LobbyType_descriptor(), name, value);
}
enum ELobbyMemberCoachRequestState : int {
  k_eLobbyMemberCoachRequestState_None = 0,
  k_eLobbyMemberCoachRequestState_Accepted = 1,
  k_eLobbyMemberCoachRequestState_Rejected = 2
};
bool ELobbyMemberCoachRequestState_IsValid(int value);
constexpr ELobbyMemberCoachRequestState ELobbyMemberCoachRequestState_MIN = k_eLobbyMemberCoachRequestState_None;
constexpr ELobbyMemberCoachRequestState ELobbyMemberCoachRequestState_MAX = k_eLobbyMemberCoachRequestState_Rejected;
constexpr int ELobbyMemberCoachRequestState_ARRAYSIZE = ELobbyMemberCoachRequestState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ELobbyMemberCoachRequestState_descriptor();
template<typename T>
inline const std::string& ELobbyMemberCoachRequestState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ELobbyMemberCoachRequestState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ELobbyMemberCoachRequestState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ELobbyMemberCoachRequestState_descriptor(), enum_t_value);
}
inline bool ELobbyMemberCoachRequestState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ELobbyMemberCoachRequestState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ELobbyMemberCoachRequestState>(
    ELobbyMemberCoachRequestState_descriptor(), name, value);
}
enum LobbyDotaTVDelay : int {
  LobbyDotaTV_10 = 0,
  LobbyDotaTV_120 = 1,
  LobbyDotaTV_300 = 2,
  LobbyDotaTV_900 = 3
};
bool LobbyDotaTVDelay_IsValid(int value);
constexpr LobbyDotaTVDelay LobbyDotaTVDelay_MIN = LobbyDotaTV_10;
constexpr LobbyDotaTVDelay LobbyDotaTVDelay_MAX = LobbyDotaTV_900;
constexpr int LobbyDotaTVDelay_ARRAYSIZE = LobbyDotaTVDelay_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaTVDelay_descriptor();
template<typename T>
inline const std::string& LobbyDotaTVDelay_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LobbyDotaTVDelay>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LobbyDotaTVDelay_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LobbyDotaTVDelay_descriptor(), enum_t_value);
}
inline bool LobbyDotaTVDelay_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LobbyDotaTVDelay* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LobbyDotaTVDelay>(
    LobbyDotaTVDelay_descriptor(), name, value);
}
enum LobbyDotaPauseSetting : int {
  LobbyDotaPauseSetting_Unlimited = 0,
  LobbyDotaPauseSetting_Limited = 1,
  LobbyDotaPauseSetting_Disabled = 2
};
bool LobbyDotaPauseSetting_IsValid(int value);
constexpr LobbyDotaPauseSetting LobbyDotaPauseSetting_MIN = LobbyDotaPauseSetting_Unlimited;
constexpr LobbyDotaPauseSetting LobbyDotaPauseSetting_MAX = LobbyDotaPauseSetting_Disabled;
constexpr int LobbyDotaPauseSetting_ARRAYSIZE = LobbyDotaPauseSetting_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LobbyDotaPauseSetting_descriptor();
template<typename T>
inline const std::string& LobbyDotaPauseSetting_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LobbyDotaPauseSetting>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LobbyDotaPauseSetting_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LobbyDotaPauseSetting_descriptor(), enum_t_value);
}
inline bool LobbyDotaPauseSetting_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LobbyDotaPauseSetting* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LobbyDotaPauseSetting>(
    LobbyDotaPauseSetting_descriptor(), name, value);
}
// ===================================================================

class CMsgLobbyCoachFriendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyCoachFriendRequest) */ {
 public:
  inline CMsgLobbyCoachFriendRequest() : CMsgLobbyCoachFriendRequest(nullptr) {}
  ~CMsgLobbyCoachFriendRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyCoachFriendRequest(const CMsgLobbyCoachFriendRequest& from);
  CMsgLobbyCoachFriendRequest(CMsgLobbyCoachFriendRequest&& from) noexcept
    : CMsgLobbyCoachFriendRequest() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyCoachFriendRequest& operator=(const CMsgLobbyCoachFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyCoachFriendRequest& operator=(CMsgLobbyCoachFriendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyCoachFriendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyCoachFriendRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyCoachFriendRequest*>(
               &_CMsgLobbyCoachFriendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgLobbyCoachFriendRequest& a, CMsgLobbyCoachFriendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyCoachFriendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyCoachFriendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyCoachFriendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyCoachFriendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyCoachFriendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyCoachFriendRequest& from) {
    CMsgLobbyCoachFriendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyCoachFriendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyCoachFriendRequest";
  }
  protected:
  explicit CMsgLobbyCoachFriendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoachAccountIdFieldNumber = 1,
    kPlayerAccountIdFieldNumber = 2,
    kRequestStateFieldNumber = 3,
  };
  // optional uint32 coach_account_id = 1;
  bool has_coach_account_id() const;
  private:
  bool _internal_has_coach_account_id() const;
  public:
  void clear_coach_account_id();
  uint32_t coach_account_id() const;
  void set_coach_account_id(uint32_t value);
  private:
  uint32_t _internal_coach_account_id() const;
  void _internal_set_coach_account_id(uint32_t value);
  public:

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  uint32_t player_account_id() const;
  void set_player_account_id(uint32_t value);
  private:
  uint32_t _internal_player_account_id() const;
  void _internal_set_player_account_id(uint32_t value);
  public:

  // optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
  bool has_request_state() const;
  private:
  bool _internal_has_request_state() const;
  public:
  void clear_request_state();
  ::ELobbyMemberCoachRequestState request_state() const;
  void set_request_state(::ELobbyMemberCoachRequestState value);
  private:
  ::ELobbyMemberCoachRequestState _internal_request_state() const;
  void _internal_set_request_state(::ELobbyMemberCoachRequestState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyCoachFriendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t coach_account_id_;
    uint32_t player_account_id_;
    int request_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge) */ {
 public:
  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() : CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(nullptr) {}
  ~CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from);
  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge&& from) noexcept
    : CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& operator=(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& operator=(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge*>(
               &_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& a, CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
    CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyPlayerPlusSubscriptionData.HeroBadge";
  }
  protected:
  explicit CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroIdFieldNumber = 1,
    kHeroBadgeXpFieldNumber = 2,
  };
  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional uint32 hero_badge_xp = 2;
  bool has_hero_badge_xp() const;
  private:
  bool _internal_has_hero_badge_xp() const;
  public:
  void clear_hero_badge_xp();
  uint32_t hero_badge_xp() const;
  void set_hero_badge_xp(uint32_t value);
  private:
  uint32_t _internal_hero_badge_xp() const;
  void _internal_set_hero_badge_xp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t hero_id_;
    uint32_t hero_badge_xp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlayerPlusSubscriptionData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyPlayerPlusSubscriptionData) */ {
 public:
  inline CMsgLobbyPlayerPlusSubscriptionData() : CMsgLobbyPlayerPlusSubscriptionData(nullptr) {}
  ~CMsgLobbyPlayerPlusSubscriptionData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyPlayerPlusSubscriptionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyPlayerPlusSubscriptionData(const CMsgLobbyPlayerPlusSubscriptionData& from);
  CMsgLobbyPlayerPlusSubscriptionData(CMsgLobbyPlayerPlusSubscriptionData&& from) noexcept
    : CMsgLobbyPlayerPlusSubscriptionData() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlayerPlusSubscriptionData& operator=(const CMsgLobbyPlayerPlusSubscriptionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyPlayerPlusSubscriptionData& operator=(CMsgLobbyPlayerPlusSubscriptionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyPlayerPlusSubscriptionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyPlayerPlusSubscriptionData* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlayerPlusSubscriptionData*>(
               &_CMsgLobbyPlayerPlusSubscriptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgLobbyPlayerPlusSubscriptionData& a, CMsgLobbyPlayerPlusSubscriptionData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyPlayerPlusSubscriptionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyPlayerPlusSubscriptionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyPlayerPlusSubscriptionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyPlayerPlusSubscriptionData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyPlayerPlusSubscriptionData& from) {
    CMsgLobbyPlayerPlusSubscriptionData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlayerPlusSubscriptionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyPlayerPlusSubscriptionData";
  }
  protected:
  explicit CMsgLobbyPlayerPlusSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyPlayerPlusSubscriptionData_HeroBadge HeroBadge;

  // accessors -------------------------------------------------------

  enum : int {
    kHeroBadgesFieldNumber = 1,
  };
  // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  int hero_badges_size() const;
  private:
  int _internal_hero_badges_size() const;
  public:
  void clear_hero_badges();
  ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* mutable_hero_badges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >*
      mutable_hero_badges();
  private:
  const ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& _internal_hero_badges(int index) const;
  ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* _internal_add_hero_badges();
  public:
  const ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& hero_badges(int index) const;
  ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* add_hero_badges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >&
      hero_badges() const;

  // @@protoc_insertion_point(class_scope:CMsgLobbyPlayerPlusSubscriptionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge > hero_badges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_PeriodicResourceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventPoints.PeriodicResourceData) */ {
 public:
  inline CMsgLobbyEventPoints_PeriodicResourceData() : CMsgLobbyEventPoints_PeriodicResourceData(nullptr) {}
  ~CMsgLobbyEventPoints_PeriodicResourceData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_PeriodicResourceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventPoints_PeriodicResourceData(const CMsgLobbyEventPoints_PeriodicResourceData& from);
  CMsgLobbyEventPoints_PeriodicResourceData(CMsgLobbyEventPoints_PeriodicResourceData&& from) noexcept
    : CMsgLobbyEventPoints_PeriodicResourceData() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_PeriodicResourceData& operator=(const CMsgLobbyEventPoints_PeriodicResourceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventPoints_PeriodicResourceData& operator=(CMsgLobbyEventPoints_PeriodicResourceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventPoints_PeriodicResourceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventPoints_PeriodicResourceData* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_PeriodicResourceData*>(
               &_CMsgLobbyEventPoints_PeriodicResourceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgLobbyEventPoints_PeriodicResourceData& a, CMsgLobbyEventPoints_PeriodicResourceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventPoints_PeriodicResourceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventPoints_PeriodicResourceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints_PeriodicResourceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_PeriodicResourceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventPoints_PeriodicResourceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventPoints_PeriodicResourceData& from) {
    CMsgLobbyEventPoints_PeriodicResourceData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_PeriodicResourceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventPoints.PeriodicResourceData";
  }
  protected:
  explicit CMsgLobbyEventPoints_PeriodicResourceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodicResourceIdFieldNumber = 1,
    kRemainingFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // optional uint32 periodic_resource_id = 1;
  bool has_periodic_resource_id() const;
  private:
  bool _internal_has_periodic_resource_id() const;
  public:
  void clear_periodic_resource_id();
  uint32_t periodic_resource_id() const;
  void set_periodic_resource_id(uint32_t value);
  private:
  uint32_t _internal_periodic_resource_id() const;
  void _internal_set_periodic_resource_id(uint32_t value);
  public:

  // optional uint32 remaining = 2;
  bool has_remaining() const;
  private:
  bool _internal_has_remaining() const;
  public:
  void clear_remaining();
  uint32_t remaining() const;
  void set_remaining(uint32_t value);
  private:
  uint32_t _internal_remaining() const;
  void _internal_set_remaining(uint32_t value);
  public:

  // optional uint32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  uint32_t max() const;
  void set_max(uint32_t value);
  private:
  uint32_t _internal_max() const;
  void _internal_set_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints.PeriodicResourceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t periodic_resource_id_;
    uint32_t remaining_;
    uint32_t max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_NetworkedEventAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventPoints.NetworkedEventAction) */ {
 public:
  inline CMsgLobbyEventPoints_NetworkedEventAction() : CMsgLobbyEventPoints_NetworkedEventAction(nullptr) {}
  ~CMsgLobbyEventPoints_NetworkedEventAction() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_NetworkedEventAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventPoints_NetworkedEventAction(const CMsgLobbyEventPoints_NetworkedEventAction& from);
  CMsgLobbyEventPoints_NetworkedEventAction(CMsgLobbyEventPoints_NetworkedEventAction&& from) noexcept
    : CMsgLobbyEventPoints_NetworkedEventAction() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_NetworkedEventAction& operator=(const CMsgLobbyEventPoints_NetworkedEventAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventPoints_NetworkedEventAction& operator=(CMsgLobbyEventPoints_NetworkedEventAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventPoints_NetworkedEventAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventPoints_NetworkedEventAction* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_NetworkedEventAction*>(
               &_CMsgLobbyEventPoints_NetworkedEventAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgLobbyEventPoints_NetworkedEventAction& a, CMsgLobbyEventPoints_NetworkedEventAction& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventPoints_NetworkedEventAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventPoints_NetworkedEventAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints_NetworkedEventAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_NetworkedEventAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventPoints_NetworkedEventAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventPoints_NetworkedEventAction& from) {
    CMsgLobbyEventPoints_NetworkedEventAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_NetworkedEventAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventPoints.NetworkedEventAction";
  }
  protected:
  explicit CMsgLobbyEventPoints_NetworkedEventAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
    kTimesGrantedFieldNumber = 2,
  };
  // optional uint32 action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  uint32_t action_id() const;
  void set_action_id(uint32_t value);
  private:
  uint32_t _internal_action_id() const;
  void _internal_set_action_id(uint32_t value);
  public:

  // optional uint32 times_granted = 2;
  bool has_times_granted() const;
  private:
  bool _internal_has_times_granted() const;
  public:
  void clear_times_granted();
  uint32_t times_granted() const;
  void set_times_granted(uint32_t value);
  private:
  uint32_t _internal_times_granted() const;
  void _internal_set_times_granted(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints.NetworkedEventAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t action_id_;
    uint32_t times_granted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints_AccountPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventPoints.AccountPoints) */ {
 public:
  inline CMsgLobbyEventPoints_AccountPoints() : CMsgLobbyEventPoints_AccountPoints(nullptr) {}
  ~CMsgLobbyEventPoints_AccountPoints() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventPoints_AccountPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from);
  CMsgLobbyEventPoints_AccountPoints(CMsgLobbyEventPoints_AccountPoints&& from) noexcept
    : CMsgLobbyEventPoints_AccountPoints() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints_AccountPoints& operator=(const CMsgLobbyEventPoints_AccountPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventPoints_AccountPoints& operator=(CMsgLobbyEventPoints_AccountPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventPoints_AccountPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventPoints_AccountPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints_AccountPoints*>(
               &_CMsgLobbyEventPoints_AccountPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgLobbyEventPoints_AccountPoints& a, CMsgLobbyEventPoints_AccountPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventPoints_AccountPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventPoints_AccountPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints_AccountPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints_AccountPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventPoints_AccountPoints& from) {
    CMsgLobbyEventPoints_AccountPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints_AccountPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventPoints.AccountPoints";
  }
  protected:
  explicit CMsgLobbyEventPoints_AccountPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGameCustomActionsFieldNumber = 25,
    kNetworkedEventActionsFieldNumber = 30,
    kPeriodicResourcesFieldNumber = 31,
    kAccountIdFieldNumber = 1,
    kNormalPointsFieldNumber = 2,
    kPremiumPointsFieldNumber = 3,
    kOwnedFieldNumber = 4,
    kActiveEffectsMaskFieldNumber = 12,
    kWagerStreakFieldNumber = 23,
    kTipAmountIndexFieldNumber = 26,
    kActiveEventSeasonIdFieldNumber = 27,
    kTeleportFxLevelFieldNumber = 28,
  };
  // repeated .CMsgLobbyEventPoints.NetworkedEventAction event_game_custom_actions = 25;
  int event_game_custom_actions_size() const;
  private:
  int _internal_event_game_custom_actions_size() const;
  public:
  void clear_event_game_custom_actions();
  ::CMsgLobbyEventPoints_NetworkedEventAction* mutable_event_game_custom_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >*
      mutable_event_game_custom_actions();
  private:
  const ::CMsgLobbyEventPoints_NetworkedEventAction& _internal_event_game_custom_actions(int index) const;
  ::CMsgLobbyEventPoints_NetworkedEventAction* _internal_add_event_game_custom_actions();
  public:
  const ::CMsgLobbyEventPoints_NetworkedEventAction& event_game_custom_actions(int index) const;
  ::CMsgLobbyEventPoints_NetworkedEventAction* add_event_game_custom_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >&
      event_game_custom_actions() const;

  // repeated .CMsgLobbyEventPoints.NetworkedEventAction networked_event_actions = 30;
  int networked_event_actions_size() const;
  private:
  int _internal_networked_event_actions_size() const;
  public:
  void clear_networked_event_actions();
  ::CMsgLobbyEventPoints_NetworkedEventAction* mutable_networked_event_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >*
      mutable_networked_event_actions();
  private:
  const ::CMsgLobbyEventPoints_NetworkedEventAction& _internal_networked_event_actions(int index) const;
  ::CMsgLobbyEventPoints_NetworkedEventAction* _internal_add_networked_event_actions();
  public:
  const ::CMsgLobbyEventPoints_NetworkedEventAction& networked_event_actions(int index) const;
  ::CMsgLobbyEventPoints_NetworkedEventAction* add_networked_event_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >&
      networked_event_actions() const;

  // repeated .CMsgLobbyEventPoints.PeriodicResourceData periodic_resources = 31;
  int periodic_resources_size() const;
  private:
  int _internal_periodic_resources_size() const;
  public:
  void clear_periodic_resources();
  ::CMsgLobbyEventPoints_PeriodicResourceData* mutable_periodic_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_PeriodicResourceData >*
      mutable_periodic_resources();
  private:
  const ::CMsgLobbyEventPoints_PeriodicResourceData& _internal_periodic_resources(int index) const;
  ::CMsgLobbyEventPoints_PeriodicResourceData* _internal_add_periodic_resources();
  public:
  const ::CMsgLobbyEventPoints_PeriodicResourceData& periodic_resources(int index) const;
  ::CMsgLobbyEventPoints_PeriodicResourceData* add_periodic_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_PeriodicResourceData >&
      periodic_resources() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 normal_points = 2;
  bool has_normal_points() const;
  private:
  bool _internal_has_normal_points() const;
  public:
  void clear_normal_points();
  uint32_t normal_points() const;
  void set_normal_points(uint32_t value);
  private:
  uint32_t _internal_normal_points() const;
  void _internal_set_normal_points(uint32_t value);
  public:

  // optional uint32 premium_points = 3;
  bool has_premium_points() const;
  private:
  bool _internal_has_premium_points() const;
  public:
  void clear_premium_points();
  uint32_t premium_points() const;
  void set_premium_points(uint32_t value);
  private:
  uint32_t _internal_premium_points() const;
  void _internal_set_premium_points(uint32_t value);
  public:

  // optional bool owned = 4;
  bool has_owned() const;
  private:
  bool _internal_has_owned() const;
  public:
  void clear_owned();
  bool owned() const;
  void set_owned(bool value);
  private:
  bool _internal_owned() const;
  void _internal_set_owned(bool value);
  public:

  // optional uint64 active_effects_mask = 12;
  bool has_active_effects_mask() const;
  private:
  bool _internal_has_active_effects_mask() const;
  public:
  void clear_active_effects_mask();
  uint64_t active_effects_mask() const;
  void set_active_effects_mask(uint64_t value);
  private:
  uint64_t _internal_active_effects_mask() const;
  void _internal_set_active_effects_mask(uint64_t value);
  public:

  // optional uint32 wager_streak = 23;
  bool has_wager_streak() const;
  private:
  bool _internal_has_wager_streak() const;
  public:
  void clear_wager_streak();
  uint32_t wager_streak() const;
  void set_wager_streak(uint32_t value);
  private:
  uint32_t _internal_wager_streak() const;
  void _internal_set_wager_streak(uint32_t value);
  public:

  // optional uint32 tip_amount_index = 26;
  bool has_tip_amount_index() const;
  private:
  bool _internal_has_tip_amount_index() const;
  public:
  void clear_tip_amount_index();
  uint32_t tip_amount_index() const;
  void set_tip_amount_index(uint32_t value);
  private:
  uint32_t _internal_tip_amount_index() const;
  void _internal_set_tip_amount_index(uint32_t value);
  public:

  // optional uint32 active_event_season_id = 27;
  bool has_active_event_season_id() const;
  private:
  bool _internal_has_active_event_season_id() const;
  public:
  void clear_active_event_season_id();
  uint32_t active_event_season_id() const;
  void set_active_event_season_id(uint32_t value);
  private:
  uint32_t _internal_active_event_season_id() const;
  void _internal_set_active_event_season_id(uint32_t value);
  public:

  // optional uint32 teleport_fx_level = 28;
  bool has_teleport_fx_level() const;
  private:
  bool _internal_has_teleport_fx_level() const;
  public:
  void clear_teleport_fx_level();
  uint32_t teleport_fx_level() const;
  void set_teleport_fx_level(uint32_t value);
  private:
  uint32_t _internal_teleport_fx_level() const;
  void _internal_set_teleport_fx_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints.AccountPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction > event_game_custom_actions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction > networked_event_actions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_PeriodicResourceData > periodic_resources_;
    uint32_t account_id_;
    uint32_t normal_points_;
    uint32_t premium_points_;
    bool owned_;
    uint64_t active_effects_mask_;
    uint32_t wager_streak_;
    uint32_t tip_amount_index_;
    uint32_t active_event_season_id_;
    uint32_t teleport_fx_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventPoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventPoints) */ {
 public:
  inline CMsgLobbyEventPoints() : CMsgLobbyEventPoints(nullptr) {}
  ~CMsgLobbyEventPoints() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventPoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from);
  CMsgLobbyEventPoints(CMsgLobbyEventPoints&& from) noexcept
    : CMsgLobbyEventPoints() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventPoints& operator=(const CMsgLobbyEventPoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventPoints& operator=(CMsgLobbyEventPoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventPoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventPoints* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventPoints*>(
               &_CMsgLobbyEventPoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgLobbyEventPoints& a, CMsgLobbyEventPoints& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventPoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventPoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventPoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventPoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventPoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventPoints& from) {
    CMsgLobbyEventPoints::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventPoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventPoints";
  }
  protected:
  explicit CMsgLobbyEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgLobbyEventPoints_PeriodicResourceData PeriodicResourceData;
  typedef CMsgLobbyEventPoints_NetworkedEventAction NetworkedEventAction;
  typedef CMsgLobbyEventPoints_AccountPoints AccountPoints;

  // accessors -------------------------------------------------------

  enum : int {
    kAccountPointsFieldNumber = 2,
    kEventIdFieldNumber = 1,
  };
  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  int account_points_size() const;
  private:
  int _internal_account_points_size() const;
  public:
  void clear_account_points();
  ::CMsgLobbyEventPoints_AccountPoints* mutable_account_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
      mutable_account_points();
  private:
  const ::CMsgLobbyEventPoints_AccountPoints& _internal_account_points(int index) const;
  ::CMsgLobbyEventPoints_AccountPoints* _internal_add_account_points();
  public:
  const ::CMsgLobbyEventPoints_AccountPoints& account_points(int index) const;
  ::CMsgLobbyEventPoints_AccountPoints* add_account_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
      account_points() const;

  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventPoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints > account_points_;
    uint32_t event_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyEventGameData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyEventGameData) */ {
 public:
  inline CMsgLobbyEventGameData() : CMsgLobbyEventGameData(nullptr) {}
  ~CMsgLobbyEventGameData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyEventGameData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyEventGameData(const CMsgLobbyEventGameData& from);
  CMsgLobbyEventGameData(CMsgLobbyEventGameData&& from) noexcept
    : CMsgLobbyEventGameData() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyEventGameData& operator=(const CMsgLobbyEventGameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyEventGameData& operator=(CMsgLobbyEventGameData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyEventGameData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyEventGameData* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyEventGameData*>(
               &_CMsgLobbyEventGameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgLobbyEventGameData& a, CMsgLobbyEventGameData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyEventGameData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyEventGameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyEventGameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyEventGameData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyEventGameData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyEventGameData& from) {
    CMsgLobbyEventGameData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyEventGameData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyEventGameData";
  }
  protected:
  explicit CMsgLobbyEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameSeedFieldNumber = 1,
    kEventWindowStartTimeFieldNumber = 2,
  };
  // optional uint32 game_seed = 1;
  bool has_game_seed() const;
  private:
  bool _internal_has_game_seed() const;
  public:
  void clear_game_seed();
  uint32_t game_seed() const;
  void set_game_seed(uint32_t value);
  private:
  uint32_t _internal_game_seed() const;
  void _internal_set_game_seed(uint32_t value);
  public:

  // optional uint32 event_window_start_time = 2;
  bool has_event_window_start_time() const;
  private:
  bool _internal_has_event_window_start_time() const;
  public:
  void clear_event_window_start_time();
  uint32_t event_window_start_time() const;
  void set_event_window_start_time(uint32_t value);
  private:
  uint32_t _internal_event_window_start_time() const;
  void _internal_set_event_window_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyEventGameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t game_seed_;
    uint32_t event_window_start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite_LobbyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyInvite.LobbyMember) */ {
 public:
  inline CSODOTALobbyInvite_LobbyMember() : CSODOTALobbyInvite_LobbyMember(nullptr) {}
  ~CSODOTALobbyInvite_LobbyMember() override;
  explicit PROTOBUF_CONSTEXPR CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from);
  CSODOTALobbyInvite_LobbyMember(CSODOTALobbyInvite_LobbyMember&& from) noexcept
    : CSODOTALobbyInvite_LobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite_LobbyMember& operator=(const CSODOTALobbyInvite_LobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyInvite_LobbyMember& operator=(CSODOTALobbyInvite_LobbyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTALobbyInvite_LobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyInvite_LobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite_LobbyMember*>(
               &_CSODOTALobbyInvite_LobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CSODOTALobbyInvite_LobbyMember& a, CSODOTALobbyInvite_LobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyInvite_LobbyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyInvite_LobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite_LobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite_LobbyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTALobbyInvite_LobbyMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTALobbyInvite_LobbyMember& from) {
    CSODOTALobbyInvite_LobbyMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite_LobbyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyInvite.LobbyMember";
  }
  protected:
  explicit CSODOTALobbyInvite_LobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSteamIdFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite.LobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint64_t steam_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyInvite) */ {
 public:
  inline CSODOTALobbyInvite() : CSODOTALobbyInvite(nullptr) {}
  ~CSODOTALobbyInvite() override;
  explicit PROTOBUF_CONSTEXPR CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyInvite(const CSODOTALobbyInvite& from);
  CSODOTALobbyInvite(CSODOTALobbyInvite&& from) noexcept
    : CSODOTALobbyInvite() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyInvite& operator=(const CSODOTALobbyInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyInvite& operator=(CSODOTALobbyInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTALobbyInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyInvite* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyInvite*>(
               &_CSODOTALobbyInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CSODOTALobbyInvite& a, CSODOTALobbyInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyInvite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTALobbyInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTALobbyInvite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTALobbyInvite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTALobbyInvite& from) {
    CSODOTALobbyInvite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyInvite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyInvite";
  }
  protected:
  explicit CSODOTALobbyInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTALobbyInvite_LobbyMember LobbyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kSenderNameFieldNumber = 3,
    kGroupIdFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kCustomGameIdFieldNumber = 5,
    kInviteGidFieldNumber = 6,
    kCustomGameCrcFieldNumber = 7,
    kCustomGameTimestampFieldNumber = 8,
  };
  // repeated .CSODOTALobbyInvite.LobbyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CSODOTALobbyInvite_LobbyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
      mutable_members();
  private:
  const ::CSODOTALobbyInvite_LobbyMember& _internal_members(int index) const;
  ::CSODOTALobbyInvite_LobbyMember* _internal_add_members();
  public:
  const ::CSODOTALobbyInvite_LobbyMember& members(int index) const;
  ::CSODOTALobbyInvite_LobbyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
      members() const;

  // optional string sender_name = 3;
  bool has_sender_name() const;
  private:
  bool _internal_has_sender_name() const;
  public:
  void clear_sender_name();
  const std::string& sender_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender_name();
  PROTOBUF_NODISCARD std::string* release_sender_name();
  void set_allocated_sender_name(std::string* sender_name);
  private:
  const std::string& _internal_sender_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender_name(const std::string& value);
  std::string* _internal_mutable_sender_name();
  public:

  // optional uint64 group_id = 1 [(.key_field) = true];
  bool has_group_id() const;
  private:
  bool _internal_has_group_id() const;
  public:
  void clear_group_id();
  uint64_t group_id() const;
  void set_group_id(uint64_t value);
  private:
  uint64_t _internal_group_id() const;
  void _internal_set_group_id(uint64_t value);
  public:

  // optional fixed64 sender_id = 2;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  uint64_t sender_id() const;
  void set_sender_id(uint64_t value);
  private:
  uint64_t _internal_sender_id() const;
  void _internal_set_sender_id(uint64_t value);
  public:

  // optional uint64 custom_game_id = 5;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  uint64_t custom_game_id() const;
  void set_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_custom_game_id() const;
  void _internal_set_custom_game_id(uint64_t value);
  public:

  // optional fixed64 invite_gid = 6;
  bool has_invite_gid() const;
  private:
  bool _internal_has_invite_gid() const;
  public:
  void clear_invite_gid();
  uint64_t invite_gid() const;
  void set_invite_gid(uint64_t value);
  private:
  uint64_t _internal_invite_gid() const;
  void _internal_set_invite_gid(uint64_t value);
  public:

  // optional fixed64 custom_game_crc = 7;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  uint64_t custom_game_crc() const;
  void set_custom_game_crc(uint64_t value);
  private:
  uint64_t _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(uint64_t value);
  public:

  // optional fixed32 custom_game_timestamp = 8;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  uint32_t custom_game_timestamp() const;
  void set_custom_game_timestamp(uint32_t value);
  private:
  uint32_t _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_name_;
    uint64_t group_id_;
    uint64_t sender_id_;
    uint64_t custom_game_id_;
    uint64_t invite_gid_;
    uint64_t custom_game_crc_;
    uint32_t custom_game_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobbyMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobbyMember) */ {
 public:
  inline CSODOTALobbyMember() : CSODOTALobbyMember(nullptr) {}
  ~CSODOTALobbyMember() override;
  explicit PROTOBUF_CONSTEXPR CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobbyMember(const CSODOTALobbyMember& from);
  CSODOTALobbyMember(CSODOTALobbyMember&& from) noexcept
    : CSODOTALobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTALobbyMember& operator=(const CSODOTALobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobbyMember& operator=(CSODOTALobbyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTALobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobbyMember*>(
               &_CSODOTALobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CSODOTALobbyMember& a, CSODOTALobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobbyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTALobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTALobbyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTALobbyMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTALobbyMember& from) {
    CSODOTALobbyMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobbyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobbyMember";
  }
  protected:
  explicit CSODOTALobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledHeroIdFieldNumber = 20,
    kEnabledHeroIdFieldNumber = 22,
    kCustomGameProductIdsFieldNumber = 31,
    kDisabledRandomHeroBitsFieldNumber = 41,
    kPendingAwardsFieldNumber = 44,
    kPendingAwardsOnVictoryFieldNumber = 45,
    kCoachedAccountIdsFieldNumber = 53,
    kNameFieldNumber = 6,
    kPwrdCyberCafeNameFieldNumber = 25,
    kIdFieldNumber = 1,
    kHeroIdFieldNumber = 2,
    kTeamFieldNumber = 3,
    kSlotFieldNumber = 7,
    kMetaLevelFieldNumber = 13,
    kPartyIdFieldNumber = 12,
    kMetaXpFieldNumber = 14,
    kMetaXpAwardedFieldNumber = 15,
    kLeaverStatusFieldNumber = 16,
    kPwrdCyberCafeIdFieldNumber = 24,
    kLeaverActionsFieldNumber = 28,
    kRankChangeFieldNumber = 29,
    kFavoriteTeamPackedFieldNumber = 35,
    kSearchMatchTypeFieldNumber = 33,
    kCameramanFieldNumber = 30,
    kIsPlusSubscriberFieldNumber = 36,
    kCanEarnRewardsFieldNumber = 39,
    kWasMvpLastGameFieldNumber = 43,
    kLaneSelectionFlagsFieldNumber = 38,
    kCoachRatingFieldNumber = 42,
    kRankMmrBoostTypeFieldNumber = 46,
    kQueuePointAdjustmentFieldNumber = 47,
    kRankTierFieldNumber = 48,
    kTitleFieldNumber = 50,
    kGuildIdFieldNumber = 51,
    kReportsAvailableFieldNumber = 52,
    kIsSteamChinaFieldNumber = 54,
    kLiveSpectatorAccountIdFieldNumber = 55,
    kCommsReportsAvailableFieldNumber = 56,
    kLiveSpectatorTeamFieldNumber = 40,
    kChannelFieldNumber = 17,
    kCoachTeamFieldNumber = 23,
  };
  // repeated uint32 disabled_hero_id = 20;
  int disabled_hero_id_size() const;
  private:
  int _internal_disabled_hero_id_size() const;
  public:
  void clear_disabled_hero_id();
  private:
  uint32_t _internal_disabled_hero_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_disabled_hero_id() const;
  void _internal_add_disabled_hero_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_disabled_hero_id();
  public:
  uint32_t disabled_hero_id(int index) const;
  void set_disabled_hero_id(int index, uint32_t value);
  void add_disabled_hero_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      disabled_hero_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_disabled_hero_id();

  // repeated uint32 enabled_hero_id = 22;
  int enabled_hero_id_size() const;
  private:
  int _internal_enabled_hero_id_size() const;
  public:
  void clear_enabled_hero_id();
  private:
  uint32_t _internal_enabled_hero_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_enabled_hero_id() const;
  void _internal_add_enabled_hero_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_enabled_hero_id();
  public:
  uint32_t enabled_hero_id(int index) const;
  void set_enabled_hero_id(int index, uint32_t value);
  void add_enabled_hero_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      enabled_hero_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_enabled_hero_id();

  // repeated uint32 custom_game_product_ids = 31;
  int custom_game_product_ids_size() const;
  private:
  int _internal_custom_game_product_ids_size() const;
  public:
  void clear_custom_game_product_ids();
  private:
  uint32_t _internal_custom_game_product_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_custom_game_product_ids() const;
  void _internal_add_custom_game_product_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_custom_game_product_ids();
  public:
  uint32_t custom_game_product_ids(int index) const;
  void set_custom_game_product_ids(int index, uint32_t value);
  void add_custom_game_product_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      custom_game_product_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_custom_game_product_ids();

  // repeated fixed32 disabled_random_hero_bits = 41;
  int disabled_random_hero_bits_size() const;
  private:
  int _internal_disabled_random_hero_bits_size() const;
  public:
  void clear_disabled_random_hero_bits();
  private:
  uint32_t _internal_disabled_random_hero_bits(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_disabled_random_hero_bits() const;
  void _internal_add_disabled_random_hero_bits(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_disabled_random_hero_bits();
  public:
  uint32_t disabled_random_hero_bits(int index) const;
  void set_disabled_random_hero_bits(int index, uint32_t value);
  void add_disabled_random_hero_bits(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      disabled_random_hero_bits() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_disabled_random_hero_bits();

  // repeated .CMsgPendingEventAward pending_awards = 44;
  int pending_awards_size() const;
  private:
  int _internal_pending_awards_size() const;
  public:
  void clear_pending_awards();
  ::CMsgPendingEventAward* mutable_pending_awards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
      mutable_pending_awards();
  private:
  const ::CMsgPendingEventAward& _internal_pending_awards(int index) const;
  ::CMsgPendingEventAward* _internal_add_pending_awards();
  public:
  const ::CMsgPendingEventAward& pending_awards(int index) const;
  ::CMsgPendingEventAward* add_pending_awards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
      pending_awards() const;

  // repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
  int pending_awards_on_victory_size() const;
  private:
  int _internal_pending_awards_on_victory_size() const;
  public:
  void clear_pending_awards_on_victory();
  ::CMsgPendingEventAward* mutable_pending_awards_on_victory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
      mutable_pending_awards_on_victory();
  private:
  const ::CMsgPendingEventAward& _internal_pending_awards_on_victory(int index) const;
  ::CMsgPendingEventAward* _internal_add_pending_awards_on_victory();
  public:
  const ::CMsgPendingEventAward& pending_awards_on_victory(int index) const;
  ::CMsgPendingEventAward* add_pending_awards_on_victory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
      pending_awards_on_victory() const;

  // repeated uint32 coached_account_ids = 53;
  int coached_account_ids_size() const;
  private:
  int _internal_coached_account_ids_size() const;
  public:
  void clear_coached_account_ids();
  private:
  uint32_t _internal_coached_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_coached_account_ids() const;
  void _internal_add_coached_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_coached_account_ids();
  public:
  uint32_t coached_account_ids(int index) const;
  void set_coached_account_ids(int index, uint32_t value);
  void add_coached_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      coached_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_coached_account_ids();

  // optional string name = 6;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string pwrd_cyber_cafe_name = 25;
  bool has_pwrd_cyber_cafe_name() const;
  private:
  bool _internal_has_pwrd_cyber_cafe_name() const;
  public:
  void clear_pwrd_cyber_cafe_name();
  const std::string& pwrd_cyber_cafe_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pwrd_cyber_cafe_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pwrd_cyber_cafe_name();
  PROTOBUF_NODISCARD std::string* release_pwrd_cyber_cafe_name();
  void set_allocated_pwrd_cyber_cafe_name(std::string* pwrd_cyber_cafe_name);
  private:
  const std::string& _internal_pwrd_cyber_cafe_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pwrd_cyber_cafe_name(const std::string& value);
  std::string* _internal_mutable_pwrd_cyber_cafe_name();
  public:

  // optional fixed64 id = 1 [(.key_field) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team() const;
  void _internal_set_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 slot = 7;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 meta_level = 13;
  bool has_meta_level() const;
  private:
  bool _internal_has_meta_level() const;
  public:
  void clear_meta_level();
  uint32_t meta_level() const;
  void set_meta_level(uint32_t value);
  private:
  uint32_t _internal_meta_level() const;
  void _internal_set_meta_level(uint32_t value);
  public:

  // optional uint64 party_id = 12;
  bool has_party_id() const;
  private:
  bool _internal_has_party_id() const;
  public:
  void clear_party_id();
  uint64_t party_id() const;
  void set_party_id(uint64_t value);
  private:
  uint64_t _internal_party_id() const;
  void _internal_set_party_id(uint64_t value);
  public:

  // optional uint32 meta_xp = 14;
  bool has_meta_xp() const;
  private:
  bool _internal_has_meta_xp() const;
  public:
  void clear_meta_xp();
  uint32_t meta_xp() const;
  void set_meta_xp(uint32_t value);
  private:
  uint32_t _internal_meta_xp() const;
  void _internal_set_meta_xp(uint32_t value);
  public:

  // optional uint32 meta_xp_awarded = 15;
  bool has_meta_xp_awarded() const;
  private:
  bool _internal_has_meta_xp_awarded() const;
  public:
  void clear_meta_xp_awarded();
  uint32_t meta_xp_awarded() const;
  void set_meta_xp_awarded(uint32_t value);
  private:
  uint32_t _internal_meta_xp_awarded() const;
  void _internal_set_meta_xp_awarded(uint32_t value);
  public:

  // optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  bool has_leaver_status() const;
  private:
  bool _internal_has_leaver_status() const;
  public:
  void clear_leaver_status();
  ::DOTALeaverStatus_t leaver_status() const;
  void set_leaver_status(::DOTALeaverStatus_t value);
  private:
  ::DOTALeaverStatus_t _internal_leaver_status() const;
  void _internal_set_leaver_status(::DOTALeaverStatus_t value);
  public:

  // optional uint32 pwrd_cyber_cafe_id = 24;
  bool has_pwrd_cyber_cafe_id() const;
  private:
  bool _internal_has_pwrd_cyber_cafe_id() const;
  public:
  void clear_pwrd_cyber_cafe_id();
  uint32_t pwrd_cyber_cafe_id() const;
  void set_pwrd_cyber_cafe_id(uint32_t value);
  private:
  uint32_t _internal_pwrd_cyber_cafe_id() const;
  void _internal_set_pwrd_cyber_cafe_id(uint32_t value);
  public:

  // optional uint32 leaver_actions = 28;
  bool has_leaver_actions() const;
  private:
  bool _internal_has_leaver_actions() const;
  public:
  void clear_leaver_actions();
  uint32_t leaver_actions() const;
  void set_leaver_actions(uint32_t value);
  private:
  uint32_t _internal_leaver_actions() const;
  void _internal_set_leaver_actions(uint32_t value);
  public:

  // optional sint32 rank_change = 29;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  int32_t rank_change() const;
  void set_rank_change(int32_t value);
  private:
  int32_t _internal_rank_change() const;
  void _internal_set_rank_change(int32_t value);
  public:

  // optional uint64 favorite_team_packed = 35;
  bool has_favorite_team_packed() const;
  private:
  bool _internal_has_favorite_team_packed() const;
  public:
  void clear_favorite_team_packed();
  uint64_t favorite_team_packed() const;
  void set_favorite_team_packed(uint64_t value);
  private:
  uint64_t _internal_favorite_team_packed() const;
  void _internal_set_favorite_team_packed(uint64_t value);
  public:

  // optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  bool has_search_match_type() const;
  private:
  bool _internal_has_search_match_type() const;
  public:
  void clear_search_match_type();
  ::MatchType search_match_type() const;
  void set_search_match_type(::MatchType value);
  private:
  ::MatchType _internal_search_match_type() const;
  void _internal_set_search_match_type(::MatchType value);
  public:

  // optional bool cameraman = 30;
  bool has_cameraman() const;
  private:
  bool _internal_has_cameraman() const;
  public:
  void clear_cameraman();
  bool cameraman() const;
  void set_cameraman(bool value);
  private:
  bool _internal_cameraman() const;
  void _internal_set_cameraman(bool value);
  public:

  // optional bool is_plus_subscriber = 36;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional bool can_earn_rewards = 39;
  bool has_can_earn_rewards() const;
  private:
  bool _internal_has_can_earn_rewards() const;
  public:
  void clear_can_earn_rewards();
  bool can_earn_rewards() const;
  void set_can_earn_rewards(bool value);
  private:
  bool _internal_can_earn_rewards() const;
  void _internal_set_can_earn_rewards(bool value);
  public:

  // optional bool was_mvp_last_game = 43;
  bool has_was_mvp_last_game() const;
  private:
  bool _internal_has_was_mvp_last_game() const;
  public:
  void clear_was_mvp_last_game();
  bool was_mvp_last_game() const;
  void set_was_mvp_last_game(bool value);
  private:
  bool _internal_was_mvp_last_game() const;
  void _internal_set_was_mvp_last_game(bool value);
  public:

  // optional uint32 lane_selection_flags = 38;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  uint32_t lane_selection_flags() const;
  void set_lane_selection_flags(uint32_t value);
  private:
  uint32_t _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(uint32_t value);
  public:

  // optional uint32 coach_rating = 42;
  bool has_coach_rating() const;
  private:
  bool _internal_has_coach_rating() const;
  public:
  void clear_coach_rating();
  uint32_t coach_rating() const;
  void set_coach_rating(uint32_t value);
  private:
  uint32_t _internal_coach_rating() const;
  void _internal_set_coach_rating(uint32_t value);
  public:

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  bool has_rank_mmr_boost_type() const;
  private:
  bool _internal_has_rank_mmr_boost_type() const;
  public:
  void clear_rank_mmr_boost_type();
  ::EDOTAMMRBoostType rank_mmr_boost_type() const;
  void set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  private:
  ::EDOTAMMRBoostType _internal_rank_mmr_boost_type() const;
  void _internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value);
  public:

  // optional sint32 queue_point_adjustment = 47;
  bool has_queue_point_adjustment() const;
  private:
  bool _internal_has_queue_point_adjustment() const;
  public:
  void clear_queue_point_adjustment();
  int32_t queue_point_adjustment() const;
  void set_queue_point_adjustment(int32_t value);
  private:
  int32_t _internal_queue_point_adjustment() const;
  void _internal_set_queue_point_adjustment(int32_t value);
  public:

  // optional int32 rank_tier = 48;
  bool has_rank_tier() const;
  private:
  bool _internal_has_rank_tier() const;
  public:
  void clear_rank_tier();
  int32_t rank_tier() const;
  void set_rank_tier(int32_t value);
  private:
  int32_t _internal_rank_tier() const;
  void _internal_set_rank_tier(int32_t value);
  public:

  // optional uint32 title = 50;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  uint32_t title() const;
  void set_title(uint32_t value);
  private:
  uint32_t _internal_title() const;
  void _internal_set_title(uint32_t value);
  public:

  // optional uint32 guild_id = 51;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional uint32 reports_available = 52;
  bool has_reports_available() const;
  private:
  bool _internal_has_reports_available() const;
  public:
  void clear_reports_available();
  uint32_t reports_available() const;
  void set_reports_available(uint32_t value);
  private:
  uint32_t _internal_reports_available() const;
  void _internal_set_reports_available(uint32_t value);
  public:

  // optional bool is_steam_china = 54;
  bool has_is_steam_china() const;
  private:
  bool _internal_has_is_steam_china() const;
  public:
  void clear_is_steam_china();
  bool is_steam_china() const;
  void set_is_steam_china(bool value);
  private:
  bool _internal_is_steam_china() const;
  void _internal_set_is_steam_china(bool value);
  public:

  // optional uint32 live_spectator_account_id = 55;
  bool has_live_spectator_account_id() const;
  private:
  bool _internal_has_live_spectator_account_id() const;
  public:
  void clear_live_spectator_account_id();
  uint32_t live_spectator_account_id() const;
  void set_live_spectator_account_id(uint32_t value);
  private:
  uint32_t _internal_live_spectator_account_id() const;
  void _internal_set_live_spectator_account_id(uint32_t value);
  public:

  // optional uint32 comms_reports_available = 56;
  bool has_comms_reports_available() const;
  private:
  bool _internal_has_comms_reports_available() const;
  public:
  void clear_comms_reports_available();
  uint32_t comms_reports_available() const;
  void set_comms_reports_available(uint32_t value);
  private:
  uint32_t _internal_comms_reports_available() const;
  void _internal_set_comms_reports_available(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_live_spectator_team() const;
  private:
  bool _internal_has_live_spectator_team() const;
  public:
  void clear_live_spectator_team();
  ::DOTA_GC_TEAM live_spectator_team() const;
  void set_live_spectator_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_live_spectator_team() const;
  void _internal_set_live_spectator_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 channel = 17 [default = 6];
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  uint32_t channel() const;
  void set_channel(uint32_t value);
  private:
  uint32_t _internal_channel() const;
  void _internal_set_channel(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  bool has_coach_team() const;
  private:
  bool _internal_has_coach_team() const;
  public:
  void clear_coach_team();
  ::DOTA_GC_TEAM coach_team() const;
  void set_coach_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_coach_team() const;
  void _internal_set_coach_team(::DOTA_GC_TEAM value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > disabled_hero_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > enabled_hero_id_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > custom_game_product_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > disabled_random_hero_bits_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward > pending_awards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward > pending_awards_on_victory_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > coached_account_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pwrd_cyber_cafe_name_;
    uint64_t id_;
    uint32_t hero_id_;
    int team_;
    uint32_t slot_;
    uint32_t meta_level_;
    uint64_t party_id_;
    uint32_t meta_xp_;
    uint32_t meta_xp_awarded_;
    int leaver_status_;
    uint32_t pwrd_cyber_cafe_id_;
    uint32_t leaver_actions_;
    int32_t rank_change_;
    uint64_t favorite_team_packed_;
    int search_match_type_;
    bool cameraman_;
    bool is_plus_subscriber_;
    bool can_earn_rewards_;
    bool was_mvp_last_game_;
    uint32_t lane_selection_flags_;
    uint32_t coach_rating_;
    int rank_mmr_boost_type_;
    int32_t queue_point_adjustment_;
    int32_t rank_tier_;
    uint32_t title_;
    uint32_t guild_id_;
    uint32_t reports_available_;
    bool is_steam_china_;
    uint32_t live_spectator_account_id_;
    uint32_t comms_reports_available_;
    int live_spectator_team_;
    uint32_t channel_;
    int coach_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAServerLobbyMember final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSODOTAServerLobbyMember) */ {
 public:
  inline CSODOTAServerLobbyMember() : CSODOTAServerLobbyMember(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSODOTAServerLobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAServerLobbyMember(const CSODOTAServerLobbyMember& from);
  CSODOTAServerLobbyMember(CSODOTAServerLobbyMember&& from) noexcept
    : CSODOTAServerLobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAServerLobbyMember& operator=(const CSODOTAServerLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAServerLobbyMember& operator=(CSODOTAServerLobbyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAServerLobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAServerLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAServerLobbyMember*>(
               &_CSODOTAServerLobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CSODOTAServerLobbyMember& a, CSODOTAServerLobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAServerLobbyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAServerLobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAServerLobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAServerLobbyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSODOTAServerLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSODOTAServerLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAServerLobbyMember";
  }
  protected:
  explicit CSODOTAServerLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSODOTAServerLobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAStaticLobbyMember final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSODOTAStaticLobbyMember) */ {
 public:
  inline CSODOTAStaticLobbyMember() : CSODOTAStaticLobbyMember(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSODOTAStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAStaticLobbyMember(const CSODOTAStaticLobbyMember& from);
  CSODOTAStaticLobbyMember(CSODOTAStaticLobbyMember&& from) noexcept
    : CSODOTAStaticLobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAStaticLobbyMember& operator=(const CSODOTAStaticLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAStaticLobbyMember& operator=(CSODOTAStaticLobbyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAStaticLobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAStaticLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAStaticLobbyMember*>(
               &_CSODOTAStaticLobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CSODOTAStaticLobbyMember& a, CSODOTAStaticLobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAStaticLobbyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAStaticLobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAStaticLobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAStaticLobbyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSODOTAStaticLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSODOTAStaticLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAStaticLobbyMember";
  }
  protected:
  explicit CSODOTAStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSODOTAStaticLobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAServerStaticLobbyMember final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CSODOTAServerStaticLobbyMember) */ {
 public:
  inline CSODOTAServerStaticLobbyMember() : CSODOTAServerStaticLobbyMember(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CSODOTAServerStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAServerStaticLobbyMember(const CSODOTAServerStaticLobbyMember& from);
  CSODOTAServerStaticLobbyMember(CSODOTAServerStaticLobbyMember&& from) noexcept
    : CSODOTAServerStaticLobbyMember() {
    *this = ::std::move(from);
  }

  inline CSODOTAServerStaticLobbyMember& operator=(const CSODOTAServerStaticLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAServerStaticLobbyMember& operator=(CSODOTAServerStaticLobbyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAServerStaticLobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAServerStaticLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CSODOTAServerStaticLobbyMember*>(
               &_CSODOTAServerStaticLobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CSODOTAServerStaticLobbyMember& a, CSODOTAServerStaticLobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAServerStaticLobbyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAServerStaticLobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAServerStaticLobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAServerStaticLobbyMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CSODOTAServerStaticLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CSODOTAServerStaticLobbyMember& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAServerStaticLobbyMember";
  }
  protected:
  explicit CSODOTAServerStaticLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CSODOTAServerStaticLobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTeamDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyTeamDetails) */ {
 public:
  inline CLobbyTeamDetails() : CLobbyTeamDetails(nullptr) {}
  ~CLobbyTeamDetails() override;
  explicit PROTOBUF_CONSTEXPR CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyTeamDetails(const CLobbyTeamDetails& from);
  CLobbyTeamDetails(CLobbyTeamDetails&& from) noexcept
    : CLobbyTeamDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTeamDetails& operator=(const CLobbyTeamDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyTeamDetails& operator=(CLobbyTeamDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyTeamDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyTeamDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTeamDetails*>(
               &_CLobbyTeamDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CLobbyTeamDetails& a, CLobbyTeamDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyTeamDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyTeamDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyTeamDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyTeamDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyTeamDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLobbyTeamDetails& from) {
    CLobbyTeamDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTeamDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyTeamDetails";
  }
  protected:
  explicit CLobbyTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 1,
    kTeamTagFieldNumber = 3,
    kTeamLogoUrlFieldNumber = 20,
    kTeamAbbreviationFieldNumber = 21,
    kTeamLogoFieldNumber = 5,
    kTeamBaseLogoFieldNumber = 6,
    kTeamBannerLogoFieldNumber = 7,
    kTeamIdFieldNumber = 4,
    kTeamCompleteFieldNumber = 8,
    kIsHomeTeamFieldNumber = 17,
    kIsChallengeMatchFieldNumber = 18,
    kRankFieldNumber = 15,
    kRankChangeFieldNumber = 16,
    kChallengeMatchTokenAccountFieldNumber = 19,
  };
  // optional string team_name = 1;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 3;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_NODISCARD std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_logo_url = 20;
  bool has_team_logo_url() const;
  private:
  bool _internal_has_team_logo_url() const;
  public:
  void clear_team_logo_url();
  const std::string& team_logo_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_logo_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_logo_url();
  PROTOBUF_NODISCARD std::string* release_team_logo_url();
  void set_allocated_team_logo_url(std::string* team_logo_url);
  private:
  const std::string& _internal_team_logo_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_logo_url(const std::string& value);
  std::string* _internal_mutable_team_logo_url();
  public:

  // optional string team_abbreviation = 21;
  bool has_team_abbreviation() const;
  private:
  bool _internal_has_team_abbreviation() const;
  public:
  void clear_team_abbreviation();
  const std::string& team_abbreviation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_abbreviation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_abbreviation();
  PROTOBUF_NODISCARD std::string* release_team_abbreviation();
  void set_allocated_team_abbreviation(std::string* team_abbreviation);
  private:
  const std::string& _internal_team_abbreviation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_abbreviation(const std::string& value);
  std::string* _internal_mutable_team_abbreviation();
  public:

  // optional uint64 team_logo = 5;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  uint64_t team_logo() const;
  void set_team_logo(uint64_t value);
  private:
  uint64_t _internal_team_logo() const;
  void _internal_set_team_logo(uint64_t value);
  public:

  // optional uint64 team_base_logo = 6;
  bool has_team_base_logo() const;
  private:
  bool _internal_has_team_base_logo() const;
  public:
  void clear_team_base_logo();
  uint64_t team_base_logo() const;
  void set_team_base_logo(uint64_t value);
  private:
  uint64_t _internal_team_base_logo() const;
  void _internal_set_team_base_logo(uint64_t value);
  public:

  // optional uint64 team_banner_logo = 7;
  bool has_team_banner_logo() const;
  private:
  bool _internal_has_team_banner_logo() const;
  public:
  void clear_team_banner_logo();
  uint64_t team_banner_logo() const;
  void set_team_banner_logo(uint64_t value);
  private:
  uint64_t _internal_team_banner_logo() const;
  void _internal_set_team_banner_logo(uint64_t value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional bool team_complete = 8;
  bool has_team_complete() const;
  private:
  bool _internal_has_team_complete() const;
  public:
  void clear_team_complete();
  bool team_complete() const;
  void set_team_complete(bool value);
  private:
  bool _internal_team_complete() const;
  void _internal_set_team_complete(bool value);
  public:

  // optional bool is_home_team = 17;
  bool has_is_home_team() const;
  private:
  bool _internal_has_is_home_team() const;
  public:
  void clear_is_home_team();
  bool is_home_team() const;
  void set_is_home_team(bool value);
  private:
  bool _internal_is_home_team() const;
  void _internal_set_is_home_team(bool value);
  public:

  // optional bool is_challenge_match = 18;
  bool has_is_challenge_match() const;
  private:
  bool _internal_has_is_challenge_match() const;
  public:
  void clear_is_challenge_match();
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);
  private:
  bool _internal_is_challenge_match() const;
  void _internal_set_is_challenge_match(bool value);
  public:

  // optional uint32 rank = 15;
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  uint32_t rank() const;
  void set_rank(uint32_t value);
  private:
  uint32_t _internal_rank() const;
  void _internal_set_rank(uint32_t value);
  public:

  // optional sint32 rank_change = 16;
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  int32_t rank_change() const;
  void set_rank_change(int32_t value);
  private:
  int32_t _internal_rank_change() const;
  void _internal_set_rank_change(int32_t value);
  public:

  // optional uint64 challenge_match_token_account = 19;
  bool has_challenge_match_token_account() const;
  private:
  bool _internal_has_challenge_match_token_account() const;
  public:
  void clear_challenge_match_token_account();
  uint64_t challenge_match_token_account() const;
  void set_challenge_match_token_account(uint64_t value);
  private:
  uint64_t _internal_challenge_match_token_account() const;
  void _internal_set_challenge_match_token_account(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyTeamDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_logo_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_abbreviation_;
    uint64_t team_logo_;
    uint64_t team_base_logo_;
    uint64_t team_banner_logo_;
    uint32_t team_id_;
    bool team_complete_;
    bool is_home_team_;
    bool is_challenge_match_;
    uint32_t rank_;
    int32_t rank_change_;
    uint64_t challenge_match_token_account_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CLobbyGuildDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyGuildDetails) */ {
 public:
  inline CLobbyGuildDetails() : CLobbyGuildDetails(nullptr) {}
  ~CLobbyGuildDetails() override;
  explicit PROTOBUF_CONSTEXPR CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyGuildDetails(const CLobbyGuildDetails& from);
  CLobbyGuildDetails(CLobbyGuildDetails&& from) noexcept
    : CLobbyGuildDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyGuildDetails& operator=(const CLobbyGuildDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyGuildDetails& operator=(CLobbyGuildDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyGuildDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyGuildDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyGuildDetails*>(
               &_CLobbyGuildDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CLobbyGuildDetails& a, CLobbyGuildDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyGuildDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyGuildDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyGuildDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyGuildDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyGuildDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLobbyGuildDetails& from) {
    CLobbyGuildDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyGuildDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyGuildDetails";
  }
  protected:
  explicit CLobbyGuildDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildTagFieldNumber = 10,
    kGuildIdFieldNumber = 1,
    kGuildPrimaryColorFieldNumber = 2,
    kGuildSecondaryColorFieldNumber = 3,
    kGuildPatternFieldNumber = 4,
    kGuildLogoFieldNumber = 5,
    kGuildPointsFieldNumber = 6,
    kGuildEventFieldNumber = 7,
    kGuildFlagsFieldNumber = 8,
    kTeamForGuildFieldNumber = 9,
    kGuildWeeklyPercentileFieldNumber = 11,
  };
  // optional string guild_tag = 10;
  bool has_guild_tag() const;
  private:
  bool _internal_has_guild_tag() const;
  public:
  void clear_guild_tag();
  const std::string& guild_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_tag();
  PROTOBUF_NODISCARD std::string* release_guild_tag();
  void set_allocated_guild_tag(std::string* guild_tag);
  private:
  const std::string& _internal_guild_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_tag(const std::string& value);
  std::string* _internal_mutable_guild_tag();
  public:

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional uint32 guild_primary_color = 2;
  bool has_guild_primary_color() const;
  private:
  bool _internal_has_guild_primary_color() const;
  public:
  void clear_guild_primary_color();
  uint32_t guild_primary_color() const;
  void set_guild_primary_color(uint32_t value);
  private:
  uint32_t _internal_guild_primary_color() const;
  void _internal_set_guild_primary_color(uint32_t value);
  public:

  // optional uint32 guild_secondary_color = 3;
  bool has_guild_secondary_color() const;
  private:
  bool _internal_has_guild_secondary_color() const;
  public:
  void clear_guild_secondary_color();
  uint32_t guild_secondary_color() const;
  void set_guild_secondary_color(uint32_t value);
  private:
  uint32_t _internal_guild_secondary_color() const;
  void _internal_set_guild_secondary_color(uint32_t value);
  public:

  // optional uint32 guild_pattern = 4;
  bool has_guild_pattern() const;
  private:
  bool _internal_has_guild_pattern() const;
  public:
  void clear_guild_pattern();
  uint32_t guild_pattern() const;
  void set_guild_pattern(uint32_t value);
  private:
  uint32_t _internal_guild_pattern() const;
  void _internal_set_guild_pattern(uint32_t value);
  public:

  // optional uint64 guild_logo = 5;
  bool has_guild_logo() const;
  private:
  bool _internal_has_guild_logo() const;
  public:
  void clear_guild_logo();
  uint64_t guild_logo() const;
  void set_guild_logo(uint64_t value);
  private:
  uint64_t _internal_guild_logo() const;
  void _internal_set_guild_logo(uint64_t value);
  public:

  // optional uint32 guild_points = 6;
  bool has_guild_points() const;
  private:
  bool _internal_has_guild_points() const;
  public:
  void clear_guild_points();
  uint32_t guild_points() const;
  void set_guild_points(uint32_t value);
  private:
  uint32_t _internal_guild_points() const;
  void _internal_set_guild_points(uint32_t value);
  public:

  // optional uint32 guild_event = 7;
  bool has_guild_event() const;
  private:
  bool _internal_has_guild_event() const;
  public:
  void clear_guild_event();
  uint32_t guild_event() const;
  void set_guild_event(uint32_t value);
  private:
  uint32_t _internal_guild_event() const;
  void _internal_set_guild_event(uint32_t value);
  public:

  // optional uint32 guild_flags = 8;
  bool has_guild_flags() const;
  private:
  bool _internal_has_guild_flags() const;
  public:
  void clear_guild_flags();
  uint32_t guild_flags() const;
  void set_guild_flags(uint32_t value);
  private:
  uint32_t _internal_guild_flags() const;
  void _internal_set_guild_flags(uint32_t value);
  public:

  // optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team_for_guild() const;
  private:
  bool _internal_has_team_for_guild() const;
  public:
  void clear_team_for_guild();
  ::DOTA_GC_TEAM team_for_guild() const;
  void set_team_for_guild(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team_for_guild() const;
  void _internal_set_team_for_guild(::DOTA_GC_TEAM value);
  public:

  // optional uint32 guild_weekly_percentile = 11;
  bool has_guild_weekly_percentile() const;
  private:
  bool _internal_has_guild_weekly_percentile() const;
  public:
  void clear_guild_weekly_percentile();
  uint32_t guild_weekly_percentile() const;
  void set_guild_weekly_percentile(uint32_t value);
  private:
  uint32_t _internal_guild_weekly_percentile() const;
  void _internal_set_guild_weekly_percentile(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyGuildDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_tag_;
    uint32_t guild_id_;
    uint32_t guild_primary_color_;
    uint32_t guild_secondary_color_;
    uint32_t guild_pattern_;
    uint64_t guild_logo_;
    uint32_t guild_points_;
    uint32_t guild_event_;
    uint32_t guild_flags_;
    int team_for_guild_;
    uint32_t guild_weekly_percentile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CLobbyTimedRewardDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyTimedRewardDetails) */ {
 public:
  inline CLobbyTimedRewardDetails() : CLobbyTimedRewardDetails(nullptr) {}
  ~CLobbyTimedRewardDetails() override;
  explicit PROTOBUF_CONSTEXPR CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from);
  CLobbyTimedRewardDetails(CLobbyTimedRewardDetails&& from) noexcept
    : CLobbyTimedRewardDetails() {
    *this = ::std::move(from);
  }

  inline CLobbyTimedRewardDetails& operator=(const CLobbyTimedRewardDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyTimedRewardDetails& operator=(CLobbyTimedRewardDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyTimedRewardDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyTimedRewardDetails* internal_default_instance() {
    return reinterpret_cast<const CLobbyTimedRewardDetails*>(
               &_CLobbyTimedRewardDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CLobbyTimedRewardDetails& a, CLobbyTimedRewardDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyTimedRewardDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyTimedRewardDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyTimedRewardDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyTimedRewardDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLobbyTimedRewardDetails& from) {
    CLobbyTimedRewardDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyTimedRewardDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyTimedRewardDetails";
  }
  protected:
  explicit CLobbyTimedRewardDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefIndexFieldNumber = 2,
    kIsSupplyCrateFieldNumber = 3,
    kIsTimedDropFieldNumber = 4,
    kAccountIdFieldNumber = 5,
    kOriginFieldNumber = 6,
  };
  // optional uint32 item_def_index = 2;
  bool has_item_def_index() const;
  private:
  bool _internal_has_item_def_index() const;
  public:
  void clear_item_def_index();
  uint32_t item_def_index() const;
  void set_item_def_index(uint32_t value);
  private:
  uint32_t _internal_item_def_index() const;
  void _internal_set_item_def_index(uint32_t value);
  public:

  // optional bool is_supply_crate = 3;
  bool has_is_supply_crate() const;
  private:
  bool _internal_has_is_supply_crate() const;
  public:
  void clear_is_supply_crate();
  bool is_supply_crate() const;
  void set_is_supply_crate(bool value);
  private:
  bool _internal_is_supply_crate() const;
  void _internal_set_is_supply_crate(bool value);
  public:

  // optional bool is_timed_drop = 4;
  bool has_is_timed_drop() const;
  private:
  bool _internal_has_is_timed_drop() const;
  public:
  void clear_is_timed_drop();
  bool is_timed_drop() const;
  void set_is_timed_drop(bool value);
  private:
  bool _internal_is_timed_drop() const;
  void _internal_set_is_timed_drop(bool value);
  public:

  // optional uint32 account_id = 5;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 origin = 6;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  uint32_t origin() const;
  void set_origin(uint32_t value);
  private:
  uint32_t _internal_origin() const;
  void _internal_set_origin(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyTimedRewardDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t item_def_index_;
    bool is_supply_crate_;
    bool is_timed_drop_;
    uint32_t account_id_;
    uint32_t origin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CLobbyBroadcastChannelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyBroadcastChannelInfo) */ {
 public:
  inline CLobbyBroadcastChannelInfo() : CLobbyBroadcastChannelInfo(nullptr) {}
  ~CLobbyBroadcastChannelInfo() override;
  explicit PROTOBUF_CONSTEXPR CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from);
  CLobbyBroadcastChannelInfo(CLobbyBroadcastChannelInfo&& from) noexcept
    : CLobbyBroadcastChannelInfo() {
    *this = ::std::move(from);
  }

  inline CLobbyBroadcastChannelInfo& operator=(const CLobbyBroadcastChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyBroadcastChannelInfo& operator=(CLobbyBroadcastChannelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyBroadcastChannelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyBroadcastChannelInfo* internal_default_instance() {
    return reinterpret_cast<const CLobbyBroadcastChannelInfo*>(
               &_CLobbyBroadcastChannelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CLobbyBroadcastChannelInfo& a, CLobbyBroadcastChannelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyBroadcastChannelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyBroadcastChannelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyBroadcastChannelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyBroadcastChannelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyBroadcastChannelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLobbyBroadcastChannelInfo& from) {
    CLobbyBroadcastChannelInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyBroadcastChannelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyBroadcastChannelInfo";
  }
  protected:
  explicit CLobbyBroadcastChannelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLanguageCodeFieldNumber = 4,
    kChannelIdFieldNumber = 1,
  };
  // optional string country_code = 2;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string description = 3;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // optional string language_code = 4;
  bool has_language_code() const;
  private:
  bool _internal_has_language_code() const;
  public:
  void clear_language_code();
  const std::string& language_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language_code();
  PROTOBUF_NODISCARD std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // optional uint32 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint32_t channel_id() const;
  void set_channel_id(uint32_t value);
  private:
  uint32_t _internal_channel_id() const;
  void _internal_set_channel_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyBroadcastChannelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
    uint32_t channel_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CLobbyGuildChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CLobbyGuildChallenge) */ {
 public:
  inline CLobbyGuildChallenge() : CLobbyGuildChallenge(nullptr) {}
  ~CLobbyGuildChallenge() override;
  explicit PROTOBUF_CONSTEXPR CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CLobbyGuildChallenge(const CLobbyGuildChallenge& from);
  CLobbyGuildChallenge(CLobbyGuildChallenge&& from) noexcept
    : CLobbyGuildChallenge() {
    *this = ::std::move(from);
  }

  inline CLobbyGuildChallenge& operator=(const CLobbyGuildChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CLobbyGuildChallenge& operator=(CLobbyGuildChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CLobbyGuildChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CLobbyGuildChallenge* internal_default_instance() {
    return reinterpret_cast<const CLobbyGuildChallenge*>(
               &_CLobbyGuildChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CLobbyGuildChallenge& a, CLobbyGuildChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CLobbyGuildChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CLobbyGuildChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CLobbyGuildChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CLobbyGuildChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CLobbyGuildChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CLobbyGuildChallenge& from) {
    CLobbyGuildChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CLobbyGuildChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CLobbyGuildChallenge";
  }
  protected:
  explicit CLobbyGuildChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEligibleAccountIdsFieldNumber = 8,
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kChallengeInstanceIdFieldNumber = 3,
    kChallengeParameterFieldNumber = 4,
    kChallengeTimestampFieldNumber = 5,
    kChallengePeriodSerialFieldNumber = 6,
    kChallengeProgressAtStartFieldNumber = 7,
  };
  // repeated uint32 eligible_account_ids = 8;
  int eligible_account_ids_size() const;
  private:
  int _internal_eligible_account_ids_size() const;
  public:
  void clear_eligible_account_ids();
  private:
  uint32_t _internal_eligible_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_eligible_account_ids() const;
  void _internal_add_eligible_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_eligible_account_ids();
  public:
  uint32_t eligible_account_ids(int index) const;
  void set_eligible_account_ids(int index, uint32_t value);
  void add_eligible_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      eligible_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_eligible_account_ids();

  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 challenge_instance_id = 3;
  bool has_challenge_instance_id() const;
  private:
  bool _internal_has_challenge_instance_id() const;
  public:
  void clear_challenge_instance_id();
  uint32_t challenge_instance_id() const;
  void set_challenge_instance_id(uint32_t value);
  private:
  uint32_t _internal_challenge_instance_id() const;
  void _internal_set_challenge_instance_id(uint32_t value);
  public:

  // optional uint32 challenge_parameter = 4;
  bool has_challenge_parameter() const;
  private:
  bool _internal_has_challenge_parameter() const;
  public:
  void clear_challenge_parameter();
  uint32_t challenge_parameter() const;
  void set_challenge_parameter(uint32_t value);
  private:
  uint32_t _internal_challenge_parameter() const;
  void _internal_set_challenge_parameter(uint32_t value);
  public:

  // optional uint32 challenge_timestamp = 5;
  bool has_challenge_timestamp() const;
  private:
  bool _internal_has_challenge_timestamp() const;
  public:
  void clear_challenge_timestamp();
  uint32_t challenge_timestamp() const;
  void set_challenge_timestamp(uint32_t value);
  private:
  uint32_t _internal_challenge_timestamp() const;
  void _internal_set_challenge_timestamp(uint32_t value);
  public:

  // optional uint32 challenge_period_serial = 6;
  bool has_challenge_period_serial() const;
  private:
  bool _internal_has_challenge_period_serial() const;
  public:
  void clear_challenge_period_serial();
  uint32_t challenge_period_serial() const;
  void set_challenge_period_serial(uint32_t value);
  private:
  uint32_t _internal_challenge_period_serial() const;
  void _internal_set_challenge_period_serial(uint32_t value);
  public:

  // optional uint32 challenge_progress_at_start = 7;
  bool has_challenge_progress_at_start() const;
  private:
  bool _internal_has_challenge_progress_at_start() const;
  public:
  void clear_challenge_progress_at_start();
  uint32_t challenge_progress_at_start() const;
  void set_challenge_progress_at_start(uint32_t value);
  private:
  uint32_t _internal_challenge_progress_at_start() const;
  void _internal_set_challenge_progress_at_start(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CLobbyGuildChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > eligible_account_ids_;
    uint32_t guild_id_;
    int event_id_;
    uint32_t challenge_instance_id_;
    uint32_t challenge_parameter_;
    uint32_t challenge_timestamp_;
    uint32_t challenge_period_serial_;
    uint32_t challenge_progress_at_start_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby_CExtraMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobby.CExtraMsg) */ {
 public:
  inline CSODOTALobby_CExtraMsg() : CSODOTALobby_CExtraMsg(nullptr) {}
  ~CSODOTALobby_CExtraMsg() override;
  explicit PROTOBUF_CONSTEXPR CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from);
  CSODOTALobby_CExtraMsg(CSODOTALobby_CExtraMsg&& from) noexcept
    : CSODOTALobby_CExtraMsg() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby_CExtraMsg& operator=(const CSODOTALobby_CExtraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobby_CExtraMsg& operator=(CSODOTALobby_CExtraMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTALobby_CExtraMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobby_CExtraMsg* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby_CExtraMsg*>(
               &_CSODOTALobby_CExtraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CSODOTALobby_CExtraMsg& a, CSODOTALobby_CExtraMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobby_CExtraMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobby_CExtraMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTALobby_CExtraMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTALobby_CExtraMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTALobby_CExtraMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTALobby_CExtraMsg& from) {
    CSODOTALobby_CExtraMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby_CExtraMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobby.CExtraMsg";
  }
  protected:
  explicit CSODOTALobby_CExtraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional bytes contents = 2;
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobby.CExtraMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTALobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTALobby) */ {
 public:
  inline CSODOTALobby() : CSODOTALobby(nullptr) {}
  ~CSODOTALobby() override;
  explicit PROTOBUF_CONSTEXPR CSODOTALobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTALobby(const CSODOTALobby& from);
  CSODOTALobby(CSODOTALobby&& from) noexcept
    : CSODOTALobby() {
    *this = ::std::move(from);
  }

  inline CSODOTALobby& operator=(const CSODOTALobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTALobby& operator=(CSODOTALobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTALobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTALobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTALobby*>(
               &_CSODOTALobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSODOTALobby& a, CSODOTALobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTALobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTALobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTALobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTALobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTALobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTALobby& from) {
    CSODOTALobby::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTALobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTALobby";
  }
  protected:
  explicit CSODOTALobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CSODOTALobby_CExtraMsg CExtraMsg;

  typedef CSODOTALobby_State State;
  static constexpr State UI =
    CSODOTALobby_State_UI;
  static constexpr State READYUP =
    CSODOTALobby_State_READYUP;
  static constexpr State SERVERSETUP =
    CSODOTALobby_State_SERVERSETUP;
  static constexpr State RUN =
    CSODOTALobby_State_RUN;
  static constexpr State POSTGAME =
    CSODOTALobby_State_POSTGAME;
  static constexpr State NOTREADY =
    CSODOTALobby_State_NOTREADY;
  static constexpr State SERVERASSIGN =
    CSODOTALobby_State_SERVERASSIGN;
  static inline bool State_IsValid(int value) {
    return CSODOTALobby_State_IsValid(value);
  }
  static constexpr State State_MIN =
    CSODOTALobby_State_State_MIN;
  static constexpr State State_MAX =
    CSODOTALobby_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    CSODOTALobby_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return CSODOTALobby_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return CSODOTALobby_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return CSODOTALobby_State_Parse(name, value);
  }

  typedef CSODOTALobby_LobbyType LobbyType;
  static constexpr LobbyType INVALID =
    CSODOTALobby_LobbyType_INVALID;
  static constexpr LobbyType CASUAL_MATCH =
    CSODOTALobby_LobbyType_CASUAL_MATCH;
  static constexpr LobbyType PRACTICE =
    CSODOTALobby_LobbyType_PRACTICE;
  static constexpr LobbyType COOP_BOT_MATCH =
    CSODOTALobby_LobbyType_COOP_BOT_MATCH;
  static constexpr LobbyType COMPETITIVE_MATCH =
    CSODOTALobby_LobbyType_COMPETITIVE_MATCH;
  static constexpr LobbyType WEEKEND_TOURNEY =
    CSODOTALobby_LobbyType_WEEKEND_TOURNEY;
  static constexpr LobbyType LOCAL_BOT_MATCH =
    CSODOTALobby_LobbyType_LOCAL_BOT_MATCH;
  static constexpr LobbyType SPECTATOR =
    CSODOTALobby_LobbyType_SPECTATOR;
  static constexpr LobbyType EVENT_MATCH =
    CSODOTALobby_LobbyType_EVENT_MATCH;
  static constexpr LobbyType NEW_PLAYER_POOL =
    CSODOTALobby_LobbyType_NEW_PLAYER_POOL;
  static constexpr LobbyType FEATURED_GAMEMODE =
    CSODOTALobby_LobbyType_FEATURED_GAMEMODE;
  static inline bool LobbyType_IsValid(int value) {
    return CSODOTALobby_LobbyType_IsValid(value);
  }
  static constexpr LobbyType LobbyType_MIN =
    CSODOTALobby_LobbyType_LobbyType_MIN;
  static constexpr LobbyType LobbyType_MAX =
    CSODOTALobby_LobbyType_LobbyType_MAX;
  static constexpr int LobbyType_ARRAYSIZE =
    CSODOTALobby_LobbyType_LobbyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LobbyType_descriptor() {
    return CSODOTALobby_LobbyType_descriptor();
  }
  template<typename T>
  static inline const std::string& LobbyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LobbyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LobbyType_Name.");
    return CSODOTALobby_LobbyType_Name(enum_t_value);
  }
  static inline bool LobbyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LobbyType* value) {
    return CSODOTALobby_LobbyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPendingInvitesFieldNumber = 10,
    kTeamDetailsFieldNumber = 17,
    kTimedRewardDetailsFieldNumber = 38,
    kBroadcastChannelInfoFieldNumber = 58,
    kExtraMessagesFieldNumber = 62,
    kPreviousSeriesMatchesFieldNumber = 81,
    kEventProgressionEnabledFieldNumber = 96,
    kEmergencyDisabledHeroIdsFieldNumber = 105,
    kGuildChallengesFieldNumber = 117,
    kGuildDetailsFieldNumber = 118,
    kLobbyEventPointsFieldNumber = 119,
    kAllMembersFieldNumber = 120,
    kMemberIndicesFieldNumber = 121,
    kLeftMemberIndicesFieldNumber = 122,
    kFreeMemberIndicesFieldNumber = 123,
    kRequestedHeroIdsFieldNumber = 124,
    kCoachFriendRequestsFieldNumber = 125,
    kExtraStartupMessagesFieldNumber = 130,
    kConnectFieldNumber = 5,
    kGameNameFieldNumber = 16,
    kPassKeyFieldNumber = 39,
    kCustomGameModeFieldNumber = 54,
    kCustomMapNameFieldNumber = 55,
    kLanHostPingLocationFieldNumber = 109,
    kEventGameDefinitionFieldNumber = 129,
    kSaveGameFieldNumber = 63,
    kLobbyIdFieldNumber = 1,
    kGameModeFieldNumber = 3,
    kStateFieldNumber = 4,
    kServerIdFieldNumber = 6,
    kLeaderIdFieldNumber = 11,
    kTutorialLessonFieldNumber = 18,
    kTournamentIdFieldNumber = 19,
    kTournamentGameIdFieldNumber = 20,
    kServerRegionFieldNumber = 21,
    kGameStateFieldNumber = 22,
    kNumSpectatorsFieldNumber = 23,
    kAllowCheatsFieldNumber = 13,
    kFillWithBotsFieldNumber = 14,
    kIntroModeFieldNumber = 15,
    kAllchatFieldNumber = 51,
    kMatchgroupFieldNumber = 25,
    kMatchIdFieldNumber = 30,
    kCmPickFieldNumber = 28,
    kLeagueidFieldNumber = 42,
    kPenaltyLevelRadiantFieldNumber = 43,
    kPenaltyLevelDireFieldNumber = 44,
    kLoadGameIdFieldNumber = 45,
    kSeriesTypeFieldNumber = 46,
    kRadiantSeriesWinsFieldNumber = 47,
    kDireSeriesWinsFieldNumber = 48,
    kLootGeneratedFieldNumber = 49,
    kLootAwardedFieldNumber = 50,
    kDotaTvDelayFieldNumber = 53,
    kCustomDifficultyFieldNumber = 56,
    kFirstLeaverAccountidFieldNumber = 59,
    kSeriesIdFieldNumber = 60,
    kLanFieldNumber = 57,
    kLowPriorityFieldNumber = 61,
    kFirstBloodHappenedFieldNumber = 65,
    kMassDisconnectFieldNumber = 67,
    kMatchOutcomeFieldNumber = 70,
    kCustomGameIdFieldNumber = 68,
    kCustomMinPlayersFieldNumber = 71,
    kCustomMaxPlayersFieldNumber = 72,
    kCustomGameCrcFieldNumber = 76,
    kVisibilityFieldNumber = 75,
    kCustomGameTimestampFieldNumber = 80,
    kPreviousMatchOverrideFieldNumber = 82,
    kGameStartTimeFieldNumber = 87,
    kPauseSettingFieldNumber = 88,
    kWeekendTourneyDivisionIdFieldNumber = 90,
    kWeekendTourneySkillLevelFieldNumber = 91,
    kBotRadiantFieldNumber = 94,
    kWeekendTourneyBracketRoundFieldNumber = 92,
    kSelectionPriorityRulesFieldNumber = 97,
    kBotDireFieldNumber = 95,
    kSeriesPreviousSelectionPriorityTeamIdFieldNumber = 98,
    kSeriesCurrentSelectionPriorityTeamIdFieldNumber = 99,
    kSeriesCurrentPriorityTeamChoiceFieldNumber = 100,
    kCustomGameAutoCreatedLobbyFieldNumber = 77,
    kSeriesCurrentSelectionPriorityUsedCoinTossFieldNumber = 102,
    kCustomGamePenaltiesFieldNumber = 107,
    kRecordDetailedStatsFieldNumber = 114,
    kSeriesCurrentNonPriorityTeamChoiceFieldNumber = 101,
    kCurrentPrimaryEventFieldNumber = 103,
    kCustomGamePrivateKeyFieldNumber = 106,
    kLeagueNodeIdFieldNumber = 110,
    kMatchDurationFieldNumber = 111,
    kLeaguePhaseFieldNumber = 113,
    kExperimentalGameplayEnabledFieldNumber = 116,
    kIsInSteamChinaFieldNumber = 126,
    kWithScenarioSaveFieldNumber = 127,
    kLobbyCreationTimeFieldNumber = 128,
    kLobbyTypeFieldNumber = 12,
    kAllowSpectatingFieldNumber = 31,
    kBotDifficultyRadiantFieldNumber = 36,
    kBotDifficultyDireFieldNumber = 93,
  };
  // repeated fixed64 pending_invites = 10;
  int pending_invites_size() const;
  private:
  int _internal_pending_invites_size() const;
  public:
  void clear_pending_invites();
  private:
  uint64_t _internal_pending_invites(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_pending_invites() const;
  void _internal_add_pending_invites(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_pending_invites();
  public:
  uint64_t pending_invites(int index) const;
  void set_pending_invites(int index, uint64_t value);
  void add_pending_invites(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      pending_invites() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_pending_invites();

  // repeated .CLobbyTeamDetails team_details = 17;
  int team_details_size() const;
  private:
  int _internal_team_details_size() const;
  public:
  void clear_team_details();
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  private:
  const ::CLobbyTeamDetails& _internal_team_details(int index) const;
  ::CLobbyTeamDetails* _internal_add_team_details();
  public:
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* add_team_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
  int timed_reward_details_size() const;
  private:
  int _internal_timed_reward_details_size() const;
  public:
  void clear_timed_reward_details();
  ::CLobbyTimedRewardDetails* mutable_timed_reward_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
      mutable_timed_reward_details();
  private:
  const ::CLobbyTimedRewardDetails& _internal_timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* _internal_add_timed_reward_details();
  public:
  const ::CLobbyTimedRewardDetails& timed_reward_details(int index) const;
  ::CLobbyTimedRewardDetails* add_timed_reward_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
      timed_reward_details() const;

  // repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  int broadcast_channel_info_size() const;
  private:
  int _internal_broadcast_channel_info_size() const;
  public:
  void clear_broadcast_channel_info();
  ::CLobbyBroadcastChannelInfo* mutable_broadcast_channel_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
      mutable_broadcast_channel_info();
  private:
  const ::CLobbyBroadcastChannelInfo& _internal_broadcast_channel_info(int index) const;
  ::CLobbyBroadcastChannelInfo* _internal_add_broadcast_channel_info();
  public:
  const ::CLobbyBroadcastChannelInfo& broadcast_channel_info(int index) const;
  ::CLobbyBroadcastChannelInfo* add_broadcast_channel_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
      broadcast_channel_info() const;

  // repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
  int extra_messages_size() const;
  private:
  int _internal_extra_messages_size() const;
  public:
  void clear_extra_messages();
  ::CSODOTALobby_CExtraMsg* mutable_extra_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_messages();
  private:
  const ::CSODOTALobby_CExtraMsg& _internal_extra_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* _internal_add_extra_messages();
  public:
  const ::CSODOTALobby_CExtraMsg& extra_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* add_extra_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_messages() const;

  // repeated uint64 previous_series_matches = 81;
  int previous_series_matches_size() const;
  private:
  int _internal_previous_series_matches_size() const;
  public:
  void clear_previous_series_matches();
  private:
  uint64_t _internal_previous_series_matches(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_previous_series_matches() const;
  void _internal_add_previous_series_matches(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_previous_series_matches();
  public:
  uint64_t previous_series_matches(int index) const;
  void set_previous_series_matches(int index, uint64_t value);
  void add_previous_series_matches(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      previous_series_matches() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_previous_series_matches();

  // repeated .EEvent event_progression_enabled = 96;
  int event_progression_enabled_size() const;
  private:
  int _internal_event_progression_enabled_size() const;
  public:
  void clear_event_progression_enabled();
  private:
  ::EEvent _internal_event_progression_enabled(int index) const;
  void _internal_add_event_progression_enabled(::EEvent value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_event_progression_enabled();
  public:
  ::EEvent event_progression_enabled(int index) const;
  void set_event_progression_enabled(int index, ::EEvent value);
  void add_event_progression_enabled(::EEvent value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& event_progression_enabled() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_event_progression_enabled();

  // repeated uint32 emergency_disabled_hero_ids = 105;
  int emergency_disabled_hero_ids_size() const;
  private:
  int _internal_emergency_disabled_hero_ids_size() const;
  public:
  void clear_emergency_disabled_hero_ids();
  private:
  uint32_t _internal_emergency_disabled_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_emergency_disabled_hero_ids() const;
  void _internal_add_emergency_disabled_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_emergency_disabled_hero_ids();
  public:
  uint32_t emergency_disabled_hero_ids(int index) const;
  void set_emergency_disabled_hero_ids(int index, uint32_t value);
  void add_emergency_disabled_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      emergency_disabled_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_emergency_disabled_hero_ids();

  // repeated .CLobbyGuildChallenge guild_challenges = 117;
  int guild_challenges_size() const;
  private:
  int _internal_guild_challenges_size() const;
  public:
  void clear_guild_challenges();
  ::CLobbyGuildChallenge* mutable_guild_challenges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >*
      mutable_guild_challenges();
  private:
  const ::CLobbyGuildChallenge& _internal_guild_challenges(int index) const;
  ::CLobbyGuildChallenge* _internal_add_guild_challenges();
  public:
  const ::CLobbyGuildChallenge& guild_challenges(int index) const;
  ::CLobbyGuildChallenge* add_guild_challenges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >&
      guild_challenges() const;

  // repeated .CLobbyGuildDetails guild_details = 118;
  int guild_details_size() const;
  private:
  int _internal_guild_details_size() const;
  public:
  void clear_guild_details();
  ::CLobbyGuildDetails* mutable_guild_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >*
      mutable_guild_details();
  private:
  const ::CLobbyGuildDetails& _internal_guild_details(int index) const;
  ::CLobbyGuildDetails* _internal_add_guild_details();
  public:
  const ::CLobbyGuildDetails& guild_details(int index) const;
  ::CLobbyGuildDetails* add_guild_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >&
      guild_details() const;

  // repeated .CMsgLobbyEventPoints lobby_event_points = 119;
  int lobby_event_points_size() const;
  private:
  int _internal_lobby_event_points_size() const;
  public:
  void clear_lobby_event_points();
  ::CMsgLobbyEventPoints* mutable_lobby_event_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
      mutable_lobby_event_points();
  private:
  const ::CMsgLobbyEventPoints& _internal_lobby_event_points(int index) const;
  ::CMsgLobbyEventPoints* _internal_add_lobby_event_points();
  public:
  const ::CMsgLobbyEventPoints& lobby_event_points(int index) const;
  ::CMsgLobbyEventPoints* add_lobby_event_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
      lobby_event_points() const;

  // repeated .CSODOTALobbyMember all_members = 120;
  int all_members_size() const;
  private:
  int _internal_all_members_size() const;
  public:
  void clear_all_members();
  ::CSODOTALobbyMember* mutable_all_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
      mutable_all_members();
  private:
  const ::CSODOTALobbyMember& _internal_all_members(int index) const;
  ::CSODOTALobbyMember* _internal_add_all_members();
  public:
  const ::CSODOTALobbyMember& all_members(int index) const;
  ::CSODOTALobbyMember* add_all_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
      all_members() const;

  // repeated uint32 member_indices = 121;
  int member_indices_size() const;
  private:
  int _internal_member_indices_size() const;
  public:
  void clear_member_indices();
  private:
  uint32_t _internal_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_member_indices() const;
  void _internal_add_member_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_member_indices();
  public:
  uint32_t member_indices(int index) const;
  void set_member_indices(int index, uint32_t value);
  void add_member_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_member_indices();

  // repeated uint32 left_member_indices = 122;
  int left_member_indices_size() const;
  private:
  int _internal_left_member_indices_size() const;
  public:
  void clear_left_member_indices();
  private:
  uint32_t _internal_left_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_left_member_indices() const;
  void _internal_add_left_member_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_left_member_indices();
  public:
  uint32_t left_member_indices(int index) const;
  void set_left_member_indices(int index, uint32_t value);
  void add_left_member_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      left_member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_left_member_indices();

  // repeated uint32 free_member_indices = 123;
  int free_member_indices_size() const;
  private:
  int _internal_free_member_indices_size() const;
  public:
  void clear_free_member_indices();
  private:
  uint32_t _internal_free_member_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_free_member_indices() const;
  void _internal_add_free_member_indices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_free_member_indices();
  public:
  uint32_t free_member_indices(int index) const;
  void set_free_member_indices(int index, uint32_t value);
  void add_free_member_indices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      free_member_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_free_member_indices();

  // repeated uint32 requested_hero_ids = 124;
  int requested_hero_ids_size() const;
  private:
  int _internal_requested_hero_ids_size() const;
  public:
  void clear_requested_hero_ids();
  private:
  uint32_t _internal_requested_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_requested_hero_ids() const;
  void _internal_add_requested_hero_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_requested_hero_ids();
  public:
  uint32_t requested_hero_ids(int index) const;
  void set_requested_hero_ids(int index, uint32_t value);
  void add_requested_hero_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      requested_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_requested_hero_ids();

  // repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
  int coach_friend_requests_size() const;
  private:
  int _internal_coach_friend_requests_size() const;
  public:
  void clear_coach_friend_requests();
  ::CMsgLobbyCoachFriendRequest* mutable_coach_friend_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >*
      mutable_coach_friend_requests();
  private:
  const ::CMsgLobbyCoachFriendRequest& _internal_coach_friend_requests(int index) const;
  ::CMsgLobbyCoachFriendRequest* _internal_add_coach_friend_requests();
  public:
  const ::CMsgLobbyCoachFriendRequest& coach_friend_requests(int index) const;
  ::CMsgLobbyCoachFriendRequest* add_coach_friend_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >&
      coach_friend_requests() const;

  // repeated .CSODOTALobby.CExtraMsg extra_startup_messages = 130;
  int extra_startup_messages_size() const;
  private:
  int _internal_extra_startup_messages_size() const;
  public:
  void clear_extra_startup_messages();
  ::CSODOTALobby_CExtraMsg* mutable_extra_startup_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
      mutable_extra_startup_messages();
  private:
  const ::CSODOTALobby_CExtraMsg& _internal_extra_startup_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* _internal_add_extra_startup_messages();
  public:
  const ::CSODOTALobby_CExtraMsg& extra_startup_messages(int index) const;
  ::CSODOTALobby_CExtraMsg* add_extra_startup_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
      extra_startup_messages() const;

  // optional string connect = 5;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const std::string& connect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_connect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_connect();
  PROTOBUF_NODISCARD std::string* release_connect();
  void set_allocated_connect(std::string* connect);
  private:
  const std::string& _internal_connect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connect(const std::string& value);
  std::string* _internal_mutable_connect();
  public:

  // optional string game_name = 16;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_name();
  PROTOBUF_NODISCARD std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional string pass_key = 39;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pass_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pass_key();
  PROTOBUF_NODISCARD std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional string custom_game_mode = 54;
  bool has_custom_game_mode() const;
  private:
  bool _internal_has_custom_game_mode() const;
  public:
  void clear_custom_game_mode();
  const std::string& custom_game_mode() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_game_mode(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_game_mode();
  PROTOBUF_NODISCARD std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(std::string* custom_game_mode);
  private:
  const std::string& _internal_custom_game_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_game_mode(const std::string& value);
  std::string* _internal_mutable_custom_game_mode();
  public:

  // optional string custom_map_name = 55;
  bool has_custom_map_name() const;
  private:
  bool _internal_has_custom_map_name() const;
  public:
  void clear_custom_map_name();
  const std::string& custom_map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_custom_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_custom_map_name();
  PROTOBUF_NODISCARD std::string* release_custom_map_name();
  void set_allocated_custom_map_name(std::string* custom_map_name);
  private:
  const std::string& _internal_custom_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_map_name(const std::string& value);
  std::string* _internal_mutable_custom_map_name();
  public:

  // optional string lan_host_ping_location = 109;
  bool has_lan_host_ping_location() const;
  private:
  bool _internal_has_lan_host_ping_location() const;
  public:
  void clear_lan_host_ping_location();
  const std::string& lan_host_ping_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lan_host_ping_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lan_host_ping_location();
  PROTOBUF_NODISCARD std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(std::string* lan_host_ping_location);
  private:
  const std::string& _internal_lan_host_ping_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lan_host_ping_location(const std::string& value);
  std::string* _internal_mutable_lan_host_ping_location();
  public:

  // optional string event_game_definition = 129;
  bool has_event_game_definition() const;
  private:
  bool _internal_has_event_game_definition() const;
  public:
  void clear_event_game_definition();
  const std::string& event_game_definition() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_game_definition(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_game_definition();
  PROTOBUF_NODISCARD std::string* release_event_game_definition();
  void set_allocated_event_game_definition(std::string* event_game_definition);
  private:
  const std::string& _internal_event_game_definition() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_game_definition(const std::string& value);
  std::string* _internal_mutable_event_game_definition();
  public:

  // optional .CDOTASaveGame save_game = 63;
  bool has_save_game() const;
  private:
  bool _internal_has_save_game() const;
  public:
  void clear_save_game();
  const ::CDOTASaveGame& save_game() const;
  PROTOBUF_NODISCARD ::CDOTASaveGame* release_save_game();
  ::CDOTASaveGame* mutable_save_game();
  void set_allocated_save_game(::CDOTASaveGame* save_game);
  private:
  const ::CDOTASaveGame& _internal_save_game() const;
  ::CDOTASaveGame* _internal_mutable_save_game();
  public:
  void unsafe_arena_set_allocated_save_game(
      ::CDOTASaveGame* save_game);
  ::CDOTASaveGame* unsafe_arena_release_save_game();

  // optional uint64 lobby_id = 1 [(.key_field) = true];
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 game_mode = 3;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  uint32_t game_mode() const;
  void set_game_mode(uint32_t value);
  private:
  uint32_t _internal_game_mode() const;
  void _internal_set_game_mode(uint32_t value);
  public:

  // optional .CSODOTALobby.State state = 4 [default = UI];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::CSODOTALobby_State state() const;
  void set_state(::CSODOTALobby_State value);
  private:
  ::CSODOTALobby_State _internal_state() const;
  void _internal_set_state(::CSODOTALobby_State value);
  public:

  // optional fixed64 server_id = 6 [default = 0];
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  uint64_t server_id() const;
  void set_server_id(uint64_t value);
  private:
  uint64_t _internal_server_id() const;
  void _internal_set_server_id(uint64_t value);
  public:

  // optional fixed64 leader_id = 11;
  bool has_leader_id() const;
  private:
  bool _internal_has_leader_id() const;
  public:
  void clear_leader_id();
  uint64_t leader_id() const;
  void set_leader_id(uint64_t value);
  private:
  uint64_t _internal_leader_id() const;
  void _internal_set_leader_id(uint64_t value);
  public:

  // optional uint32 tutorial_lesson = 18;
  bool has_tutorial_lesson() const;
  private:
  bool _internal_has_tutorial_lesson() const;
  public:
  void clear_tutorial_lesson();
  uint32_t tutorial_lesson() const;
  void set_tutorial_lesson(uint32_t value);
  private:
  uint32_t _internal_tutorial_lesson() const;
  void _internal_set_tutorial_lesson(uint32_t value);
  public:

  // optional uint32 tournament_id = 19;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 tournament_game_id = 20;
  bool has_tournament_game_id() const;
  private:
  bool _internal_has_tournament_game_id() const;
  public:
  void clear_tournament_game_id();
  uint32_t tournament_game_id() const;
  void set_tournament_game_id(uint32_t value);
  private:
  uint32_t _internal_tournament_game_id() const;
  void _internal_set_tournament_game_id(uint32_t value);
  public:

  // optional uint32 server_region = 21 [default = 0];
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  uint32_t server_region() const;
  void set_server_region(uint32_t value);
  private:
  uint32_t _internal_server_region() const;
  void _internal_set_server_region(uint32_t value);
  public:

  // optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  ::DOTA_GameState game_state() const;
  void set_game_state(::DOTA_GameState value);
  private:
  ::DOTA_GameState _internal_game_state() const;
  void _internal_set_game_state(::DOTA_GameState value);
  public:

  // optional uint32 num_spectators = 23;
  bool has_num_spectators() const;
  private:
  bool _internal_has_num_spectators() const;
  public:
  void clear_num_spectators();
  uint32_t num_spectators() const;
  void set_num_spectators(uint32_t value);
  private:
  uint32_t _internal_num_spectators() const;
  void _internal_set_num_spectators(uint32_t value);
  public:

  // optional bool allow_cheats = 13;
  bool has_allow_cheats() const;
  private:
  bool _internal_has_allow_cheats() const;
  public:
  void clear_allow_cheats();
  bool allow_cheats() const;
  void set_allow_cheats(bool value);
  private:
  bool _internal_allow_cheats() const;
  void _internal_set_allow_cheats(bool value);
  public:

  // optional bool fill_with_bots = 14;
  bool has_fill_with_bots() const;
  private:
  bool _internal_has_fill_with_bots() const;
  public:
  void clear_fill_with_bots();
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);
  private:
  bool _internal_fill_with_bots() const;
  void _internal_set_fill_with_bots(bool value);
  public:

  // optional bool intro_mode = 15;
  bool has_intro_mode() const;
  private:
  bool _internal_has_intro_mode() const;
  public:
  void clear_intro_mode();
  bool intro_mode() const;
  void set_intro_mode(bool value);
  private:
  bool _internal_intro_mode() const;
  void _internal_set_intro_mode(bool value);
  public:

  // optional bool allchat = 51 [default = false];
  bool has_allchat() const;
  private:
  bool _internal_has_allchat() const;
  public:
  void clear_allchat();
  bool allchat() const;
  void set_allchat(bool value);
  private:
  bool _internal_allchat() const;
  void _internal_set_allchat(bool value);
  public:

  // optional uint32 matchgroup = 25;
  bool has_matchgroup() const;
  private:
  bool _internal_has_matchgroup() const;
  public:
  void clear_matchgroup();
  uint32_t matchgroup() const;
  void set_matchgroup(uint32_t value);
  private:
  uint32_t _internal_matchgroup() const;
  void _internal_set_matchgroup(uint32_t value);
  public:

  // optional uint64 match_id = 30;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  private:
  bool _internal_has_cm_pick() const;
  public:
  void clear_cm_pick();
  ::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::DOTA_CM_PICK value);
  private:
  ::DOTA_CM_PICK _internal_cm_pick() const;
  void _internal_set_cm_pick(::DOTA_CM_PICK value);
  public:

  // optional uint32 leagueid = 42;
  bool has_leagueid() const;
  private:
  bool _internal_has_leagueid() const;
  public:
  void clear_leagueid();
  uint32_t leagueid() const;
  void set_leagueid(uint32_t value);
  private:
  uint32_t _internal_leagueid() const;
  void _internal_set_leagueid(uint32_t value);
  public:

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  bool has_penalty_level_radiant() const;
  private:
  bool _internal_has_penalty_level_radiant() const;
  public:
  void clear_penalty_level_radiant();
  uint32_t penalty_level_radiant() const;
  void set_penalty_level_radiant(uint32_t value);
  private:
  uint32_t _internal_penalty_level_radiant() const;
  void _internal_set_penalty_level_radiant(uint32_t value);
  public:

  // optional uint32 penalty_level_dire = 44 [default = 0];
  bool has_penalty_level_dire() const;
  private:
  bool _internal_has_penalty_level_dire() const;
  public:
  void clear_penalty_level_dire();
  uint32_t penalty_level_dire() const;
  void set_penalty_level_dire(uint32_t value);
  private:
  uint32_t _internal_penalty_level_dire() const;
  void _internal_set_penalty_level_dire(uint32_t value);
  public:

  // optional uint32 load_game_id = 45;
  bool has_load_game_id() const;
  private:
  bool _internal_has_load_game_id() const;
  public:
  void clear_load_game_id();
  uint32_t load_game_id() const;
  void set_load_game_id(uint32_t value);
  private:
  uint32_t _internal_load_game_id() const;
  void _internal_set_load_game_id(uint32_t value);
  public:

  // optional uint32 series_type = 46;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  uint32_t series_type() const;
  void set_series_type(uint32_t value);
  private:
  uint32_t _internal_series_type() const;
  void _internal_set_series_type(uint32_t value);
  public:

  // optional uint32 radiant_series_wins = 47;
  bool has_radiant_series_wins() const;
  private:
  bool _internal_has_radiant_series_wins() const;
  public:
  void clear_radiant_series_wins();
  uint32_t radiant_series_wins() const;
  void set_radiant_series_wins(uint32_t value);
  private:
  uint32_t _internal_radiant_series_wins() const;
  void _internal_set_radiant_series_wins(uint32_t value);
  public:

  // optional uint32 dire_series_wins = 48;
  bool has_dire_series_wins() const;
  private:
  bool _internal_has_dire_series_wins() const;
  public:
  void clear_dire_series_wins();
  uint32_t dire_series_wins() const;
  void set_dire_series_wins(uint32_t value);
  private:
  uint32_t _internal_dire_series_wins() const;
  void _internal_set_dire_series_wins(uint32_t value);
  public:

  // optional uint32 loot_generated = 49;
  bool has_loot_generated() const;
  private:
  bool _internal_has_loot_generated() const;
  public:
  void clear_loot_generated();
  uint32_t loot_generated() const;
  void set_loot_generated(uint32_t value);
  private:
  uint32_t _internal_loot_generated() const;
  void _internal_set_loot_generated(uint32_t value);
  public:

  // optional uint32 loot_awarded = 50;
  bool has_loot_awarded() const;
  private:
  bool _internal_has_loot_awarded() const;
  public:
  void clear_loot_awarded();
  uint32_t loot_awarded() const;
  void set_loot_awarded(uint32_t value);
  private:
  uint32_t _internal_loot_awarded() const;
  void _internal_set_loot_awarded(uint32_t value);
  public:

  // optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  bool has_dota_tv_delay() const;
  private:
  bool _internal_has_dota_tv_delay() const;
  public:
  void clear_dota_tv_delay();
  ::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::LobbyDotaTVDelay value);
  private:
  ::LobbyDotaTVDelay _internal_dota_tv_delay() const;
  void _internal_set_dota_tv_delay(::LobbyDotaTVDelay value);
  public:

  // optional uint32 custom_difficulty = 56;
  bool has_custom_difficulty() const;
  private:
  bool _internal_has_custom_difficulty() const;
  public:
  void clear_custom_difficulty();
  uint32_t custom_difficulty() const;
  void set_custom_difficulty(uint32_t value);
  private:
  uint32_t _internal_custom_difficulty() const;
  void _internal_set_custom_difficulty(uint32_t value);
  public:

  // optional uint32 first_leaver_accountid = 59;
  bool has_first_leaver_accountid() const;
  private:
  bool _internal_has_first_leaver_accountid() const;
  public:
  void clear_first_leaver_accountid();
  uint32_t first_leaver_accountid() const;
  void set_first_leaver_accountid(uint32_t value);
  private:
  uint32_t _internal_first_leaver_accountid() const;
  void _internal_set_first_leaver_accountid(uint32_t value);
  public:

  // optional uint32 series_id = 60;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  uint32_t series_id() const;
  void set_series_id(uint32_t value);
  private:
  uint32_t _internal_series_id() const;
  void _internal_set_series_id(uint32_t value);
  public:

  // optional bool lan = 57;
  bool has_lan() const;
  private:
  bool _internal_has_lan() const;
  public:
  void clear_lan();
  bool lan() const;
  void set_lan(bool value);
  private:
  bool _internal_lan() const;
  void _internal_set_lan(bool value);
  public:

  // optional bool low_priority = 61;
  bool has_low_priority() const;
  private:
  bool _internal_has_low_priority() const;
  public:
  void clear_low_priority();
  bool low_priority() const;
  void set_low_priority(bool value);
  private:
  bool _internal_low_priority() const;
  void _internal_set_low_priority(bool value);
  public:

  // optional bool first_blood_happened = 65;
  bool has_first_blood_happened() const;
  private:
  bool _internal_has_first_blood_happened() const;
  public:
  void clear_first_blood_happened();
  bool first_blood_happened() const;
  void set_first_blood_happened(bool value);
  private:
  bool _internal_first_blood_happened() const;
  void _internal_set_first_blood_happened(bool value);
  public:

  // optional bool mass_disconnect = 67;
  bool has_mass_disconnect() const;
  private:
  bool _internal_has_mass_disconnect() const;
  public:
  void clear_mass_disconnect();
  bool mass_disconnect() const;
  void set_mass_disconnect(bool value);
  private:
  bool _internal_mass_disconnect() const;
  void _internal_set_mass_disconnect(bool value);
  public:

  // optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  private:
  bool _internal_has_match_outcome() const;
  public:
  void clear_match_outcome();
  ::EMatchOutcome match_outcome() const;
  void set_match_outcome(::EMatchOutcome value);
  private:
  ::EMatchOutcome _internal_match_outcome() const;
  void _internal_set_match_outcome(::EMatchOutcome value);
  public:

  // optional uint64 custom_game_id = 68;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  uint64_t custom_game_id() const;
  void set_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_custom_game_id() const;
  void _internal_set_custom_game_id(uint64_t value);
  public:

  // optional uint32 custom_min_players = 71;
  bool has_custom_min_players() const;
  private:
  bool _internal_has_custom_min_players() const;
  public:
  void clear_custom_min_players();
  uint32_t custom_min_players() const;
  void set_custom_min_players(uint32_t value);
  private:
  uint32_t _internal_custom_min_players() const;
  void _internal_set_custom_min_players(uint32_t value);
  public:

  // optional uint32 custom_max_players = 72;
  bool has_custom_max_players() const;
  private:
  bool _internal_has_custom_max_players() const;
  public:
  void clear_custom_max_players();
  uint32_t custom_max_players() const;
  void set_custom_max_players(uint32_t value);
  private:
  uint32_t _internal_custom_max_players() const;
  void _internal_set_custom_max_players(uint32_t value);
  public:

  // optional fixed64 custom_game_crc = 76;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  uint64_t custom_game_crc() const;
  void set_custom_game_crc(uint64_t value);
  private:
  uint64_t _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(uint64_t value);
  public:

  // optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::DOTALobbyVisibility visibility() const;
  void set_visibility(::DOTALobbyVisibility value);
  private:
  ::DOTALobbyVisibility _internal_visibility() const;
  void _internal_set_visibility(::DOTALobbyVisibility value);
  public:

  // optional fixed32 custom_game_timestamp = 80;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  uint32_t custom_game_timestamp() const;
  void set_custom_game_timestamp(uint32_t value);
  private:
  uint32_t _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(uint32_t value);
  public:

  // optional uint64 previous_match_override = 82;
  bool has_previous_match_override() const;
  private:
  bool _internal_has_previous_match_override() const;
  public:
  void clear_previous_match_override();
  uint64_t previous_match_override() const;
  void set_previous_match_override(uint64_t value);
  private:
  uint64_t _internal_previous_match_override() const;
  void _internal_set_previous_match_override(uint64_t value);
  public:

  // optional uint32 game_start_time = 87;
  bool has_game_start_time() const;
  private:
  bool _internal_has_game_start_time() const;
  public:
  void clear_game_start_time();
  uint32_t game_start_time() const;
  void set_game_start_time(uint32_t value);
  private:
  uint32_t _internal_game_start_time() const;
  void _internal_set_game_start_time(uint32_t value);
  public:

  // optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  bool has_pause_setting() const;
  private:
  bool _internal_has_pause_setting() const;
  public:
  void clear_pause_setting();
  ::LobbyDotaPauseSetting pause_setting() const;
  void set_pause_setting(::LobbyDotaPauseSetting value);
  private:
  ::LobbyDotaPauseSetting _internal_pause_setting() const;
  void _internal_set_pause_setting(::LobbyDotaPauseSetting value);
  public:

  // optional uint32 weekend_tourney_division_id = 90;
  bool has_weekend_tourney_division_id() const;
  private:
  bool _internal_has_weekend_tourney_division_id() const;
  public:
  void clear_weekend_tourney_division_id();
  uint32_t weekend_tourney_division_id() const;
  void set_weekend_tourney_division_id(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_division_id() const;
  void _internal_set_weekend_tourney_division_id(uint32_t value);
  public:

  // optional uint32 weekend_tourney_skill_level = 91;
  bool has_weekend_tourney_skill_level() const;
  private:
  bool _internal_has_weekend_tourney_skill_level() const;
  public:
  void clear_weekend_tourney_skill_level();
  uint32_t weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_skill_level() const;
  void _internal_set_weekend_tourney_skill_level(uint32_t value);
  public:

  // optional uint64 bot_radiant = 94;
  bool has_bot_radiant() const;
  private:
  bool _internal_has_bot_radiant() const;
  public:
  void clear_bot_radiant();
  uint64_t bot_radiant() const;
  void set_bot_radiant(uint64_t value);
  private:
  uint64_t _internal_bot_radiant() const;
  void _internal_set_bot_radiant(uint64_t value);
  public:

  // optional uint32 weekend_tourney_bracket_round = 92;
  bool has_weekend_tourney_bracket_round() const;
  private:
  bool _internal_has_weekend_tourney_bracket_round() const;
  public:
  void clear_weekend_tourney_bracket_round();
  uint32_t weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(uint32_t value);
  private:
  uint32_t _internal_weekend_tourney_bracket_round() const;
  void _internal_set_weekend_tourney_bracket_round(uint32_t value);
  public:

  // optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  bool has_selection_priority_rules() const;
  private:
  bool _internal_has_selection_priority_rules() const;
  public:
  void clear_selection_priority_rules();
  ::DOTASelectionPriorityRules selection_priority_rules() const;
  void set_selection_priority_rules(::DOTASelectionPriorityRules value);
  private:
  ::DOTASelectionPriorityRules _internal_selection_priority_rules() const;
  void _internal_set_selection_priority_rules(::DOTASelectionPriorityRules value);
  public:

  // optional uint64 bot_dire = 95;
  bool has_bot_dire() const;
  private:
  bool _internal_has_bot_dire() const;
  public:
  void clear_bot_dire();
  uint64_t bot_dire() const;
  void set_bot_dire(uint64_t value);
  private:
  uint64_t _internal_bot_dire() const;
  void _internal_set_bot_dire(uint64_t value);
  public:

  // optional uint32 series_previous_selection_priority_team_id = 98;
  bool has_series_previous_selection_priority_team_id() const;
  private:
  bool _internal_has_series_previous_selection_priority_team_id() const;
  public:
  void clear_series_previous_selection_priority_team_id();
  uint32_t series_previous_selection_priority_team_id() const;
  void set_series_previous_selection_priority_team_id(uint32_t value);
  private:
  uint32_t _internal_series_previous_selection_priority_team_id() const;
  void _internal_set_series_previous_selection_priority_team_id(uint32_t value);
  public:

  // optional uint32 series_current_selection_priority_team_id = 99;
  bool has_series_current_selection_priority_team_id() const;
  private:
  bool _internal_has_series_current_selection_priority_team_id() const;
  public:
  void clear_series_current_selection_priority_team_id();
  uint32_t series_current_selection_priority_team_id() const;
  void set_series_current_selection_priority_team_id(uint32_t value);
  private:
  uint32_t _internal_series_current_selection_priority_team_id() const;
  void _internal_set_series_current_selection_priority_team_id(uint32_t value);
  public:

  // optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_priority_team_choice() const;
  private:
  bool _internal_has_series_current_priority_team_choice() const;
  public:
  void clear_series_current_priority_team_choice();
  ::DOTASelectionPriorityChoice series_current_priority_team_choice() const;
  void set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value);
  private:
  ::DOTASelectionPriorityChoice _internal_series_current_priority_team_choice() const;
  void _internal_set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value);
  public:

  // optional bool custom_game_auto_created_lobby = 77;
  bool has_custom_game_auto_created_lobby() const;
  private:
  bool _internal_has_custom_game_auto_created_lobby() const;
  public:
  void clear_custom_game_auto_created_lobby();
  bool custom_game_auto_created_lobby() const;
  void set_custom_game_auto_created_lobby(bool value);
  private:
  bool _internal_custom_game_auto_created_lobby() const;
  void _internal_set_custom_game_auto_created_lobby(bool value);
  public:

  // optional bool series_current_selection_priority_used_coin_toss = 102;
  bool has_series_current_selection_priority_used_coin_toss() const;
  private:
  bool _internal_has_series_current_selection_priority_used_coin_toss() const;
  public:
  void clear_series_current_selection_priority_used_coin_toss();
  bool series_current_selection_priority_used_coin_toss() const;
  void set_series_current_selection_priority_used_coin_toss(bool value);
  private:
  bool _internal_series_current_selection_priority_used_coin_toss() const;
  void _internal_set_series_current_selection_priority_used_coin_toss(bool value);
  public:

  // optional bool custom_game_penalties = 107;
  bool has_custom_game_penalties() const;
  private:
  bool _internal_has_custom_game_penalties() const;
  public:
  void clear_custom_game_penalties();
  bool custom_game_penalties() const;
  void set_custom_game_penalties(bool value);
  private:
  bool _internal_custom_game_penalties() const;
  void _internal_set_custom_game_penalties(bool value);
  public:

  // optional bool record_detailed_stats = 114;
  bool has_record_detailed_stats() const;
  private:
  bool _internal_has_record_detailed_stats() const;
  public:
  void clear_record_detailed_stats();
  bool record_detailed_stats() const;
  void set_record_detailed_stats(bool value);
  private:
  bool _internal_record_detailed_stats() const;
  void _internal_set_record_detailed_stats(bool value);
  public:

  // optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  bool has_series_current_non_priority_team_choice() const;
  private:
  bool _internal_has_series_current_non_priority_team_choice() const;
  public:
  void clear_series_current_non_priority_team_choice();
  ::DOTASelectionPriorityChoice series_current_non_priority_team_choice() const;
  void set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value);
  private:
  ::DOTASelectionPriorityChoice _internal_series_current_non_priority_team_choice() const;
  void _internal_set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value);
  public:

  // optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
  bool has_current_primary_event() const;
  private:
  bool _internal_has_current_primary_event() const;
  public:
  void clear_current_primary_event();
  ::EEvent current_primary_event() const;
  void set_current_primary_event(::EEvent value);
  private:
  ::EEvent _internal_current_primary_event() const;
  void _internal_set_current_primary_event(::EEvent value);
  public:

  // optional fixed64 custom_game_private_key = 106;
  bool has_custom_game_private_key() const;
  private:
  bool _internal_has_custom_game_private_key() const;
  public:
  void clear_custom_game_private_key();
  uint64_t custom_game_private_key() const;
  void set_custom_game_private_key(uint64_t value);
  private:
  uint64_t _internal_custom_game_private_key() const;
  void _internal_set_custom_game_private_key(uint64_t value);
  public:

  // optional uint32 league_node_id = 110;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  uint32_t league_node_id() const;
  void set_league_node_id(uint32_t value);
  private:
  uint32_t _internal_league_node_id() const;
  void _internal_set_league_node_id(uint32_t value);
  public:

  // optional uint32 match_duration = 111;
  bool has_match_duration() const;
  private:
  bool _internal_has_match_duration() const;
  public:
  void clear_match_duration();
  uint32_t match_duration() const;
  void set_match_duration(uint32_t value);
  private:
  uint32_t _internal_match_duration() const;
  void _internal_set_match_duration(uint32_t value);
  public:

  // optional uint32 league_phase = 113;
  bool has_league_phase() const;
  private:
  bool _internal_has_league_phase() const;
  public:
  void clear_league_phase();
  uint32_t league_phase() const;
  void set_league_phase(uint32_t value);
  private:
  uint32_t _internal_league_phase() const;
  void _internal_set_league_phase(uint32_t value);
  public:

  // optional bool experimental_gameplay_enabled = 116;
  bool has_experimental_gameplay_enabled() const;
  private:
  bool _internal_has_experimental_gameplay_enabled() const;
  public:
  void clear_experimental_gameplay_enabled();
  bool experimental_gameplay_enabled() const;
  void set_experimental_gameplay_enabled(bool value);
  private:
  bool _internal_experimental_gameplay_enabled() const;
  void _internal_set_experimental_gameplay_enabled(bool value);
  public:

  // optional bool is_in_steam_china = 126;
  bool has_is_in_steam_china() const;
  private:
  bool _internal_has_is_in_steam_china() const;
  public:
  void clear_is_in_steam_china();
  bool is_in_steam_china() const;
  void set_is_in_steam_china(bool value);
  private:
  bool _internal_is_in_steam_china() const;
  void _internal_set_is_in_steam_china(bool value);
  public:

  // optional bool with_scenario_save = 127;
  bool has_with_scenario_save() const;
  private:
  bool _internal_has_with_scenario_save() const;
  public:
  void clear_with_scenario_save();
  bool with_scenario_save() const;
  void set_with_scenario_save(bool value);
  private:
  bool _internal_with_scenario_save() const;
  void _internal_set_with_scenario_save(bool value);
  public:

  // optional uint32 lobby_creation_time = 128;
  bool has_lobby_creation_time() const;
  private:
  bool _internal_has_lobby_creation_time() const;
  public:
  void clear_lobby_creation_time();
  uint32_t lobby_creation_time() const;
  void set_lobby_creation_time(uint32_t value);
  private:
  uint32_t _internal_lobby_creation_time() const;
  void _internal_set_lobby_creation_time(uint32_t value);
  public:

  // optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  bool has_lobby_type() const;
  private:
  bool _internal_has_lobby_type() const;
  public:
  void clear_lobby_type();
  ::CSODOTALobby_LobbyType lobby_type() const;
  void set_lobby_type(::CSODOTALobby_LobbyType value);
  private:
  ::CSODOTALobby_LobbyType _internal_lobby_type() const;
  void _internal_set_lobby_type(::CSODOTALobby_LobbyType value);
  public:

  // optional bool allow_spectating = 31 [default = true];
  bool has_allow_spectating() const;
  private:
  bool _internal_has_allow_spectating() const;
  public:
  void clear_allow_spectating();
  bool allow_spectating() const;
  void set_allow_spectating(bool value);
  private:
  bool _internal_allow_spectating() const;
  void _internal_set_allow_spectating(bool value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_radiant() const;
  private:
  bool _internal_has_bot_difficulty_radiant() const;
  public:
  void clear_bot_difficulty_radiant();
  ::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_radiant() const;
  void _internal_set_bot_difficulty_radiant(::DOTABotDifficulty value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty_dire() const;
  private:
  bool _internal_has_bot_difficulty_dire() const;
  public:
  void clear_bot_difficulty_dire();
  ::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_dire() const;
  void _internal_set_bot_difficulty_dire(::DOTABotDifficulty value);
  public:

  // @@protoc_insertion_point(class_scope:CSODOTALobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > pending_invites_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails > timed_reward_details_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo > broadcast_channel_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_messages_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > previous_series_matches_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> event_progression_enabled_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > emergency_disabled_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge > guild_challenges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails > guild_details_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints > lobby_event_points_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember > all_members_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > member_indices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > left_member_indices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > free_member_indices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > requested_hero_ids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest > coach_friend_requests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg > extra_startup_messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connect_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_game_mode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_map_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_host_ping_location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_game_definition_;
    ::CDOTASaveGame* save_game_;
    uint64_t lobby_id_;
    uint32_t game_mode_;
    int state_;
    uint64_t server_id_;
    uint64_t leader_id_;
    uint32_t tutorial_lesson_;
    uint32_t tournament_id_;
    uint32_t tournament_game_id_;
    uint32_t server_region_;
    int game_state_;
    uint32_t num_spectators_;
    bool allow_cheats_;
    bool fill_with_bots_;
    bool intro_mode_;
    bool allchat_;
    uint32_t matchgroup_;
    uint64_t match_id_;
    int cm_pick_;
    uint32_t leagueid_;
    uint32_t penalty_level_radiant_;
    uint32_t penalty_level_dire_;
    uint32_t load_game_id_;
    uint32_t series_type_;
    uint32_t radiant_series_wins_;
    uint32_t dire_series_wins_;
    uint32_t loot_generated_;
    uint32_t loot_awarded_;
    int dota_tv_delay_;
    uint32_t custom_difficulty_;
    uint32_t first_leaver_accountid_;
    uint32_t series_id_;
    bool lan_;
    bool low_priority_;
    bool first_blood_happened_;
    bool mass_disconnect_;
    int match_outcome_;
    uint64_t custom_game_id_;
    uint32_t custom_min_players_;
    uint32_t custom_max_players_;
    uint64_t custom_game_crc_;
    int visibility_;
    uint32_t custom_game_timestamp_;
    uint64_t previous_match_override_;
    uint32_t game_start_time_;
    int pause_setting_;
    uint32_t weekend_tourney_division_id_;
    uint32_t weekend_tourney_skill_level_;
    uint64_t bot_radiant_;
    uint32_t weekend_tourney_bracket_round_;
    int selection_priority_rules_;
    uint64_t bot_dire_;
    uint32_t series_previous_selection_priority_team_id_;
    uint32_t series_current_selection_priority_team_id_;
    int series_current_priority_team_choice_;
    bool custom_game_auto_created_lobby_;
    bool series_current_selection_priority_used_coin_toss_;
    bool custom_game_penalties_;
    bool record_detailed_stats_;
    int series_current_non_priority_team_choice_;
    int current_primary_event_;
    uint64_t custom_game_private_key_;
    uint32_t league_node_id_;
    uint32_t match_duration_;
    uint32_t league_phase_;
    bool experimental_gameplay_enabled_;
    bool is_in_steam_china_;
    bool with_scenario_save_;
    uint32_t lobby_creation_time_;
    int lobby_type_;
    bool allow_spectating_;
    int bot_difficulty_radiant_;
    int bot_difficulty_dire_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAServerLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAServerLobby) */ {
 public:
  inline CSODOTAServerLobby() : CSODOTAServerLobby(nullptr) {}
  ~CSODOTAServerLobby() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAServerLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAServerLobby(const CSODOTAServerLobby& from);
  CSODOTAServerLobby(CSODOTAServerLobby&& from) noexcept
    : CSODOTAServerLobby() {
    *this = ::std::move(from);
  }

  inline CSODOTAServerLobby& operator=(const CSODOTAServerLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAServerLobby& operator=(CSODOTAServerLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAServerLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAServerLobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTAServerLobby*>(
               &_CSODOTAServerLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CSODOTAServerLobby& a, CSODOTAServerLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAServerLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAServerLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAServerLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAServerLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAServerLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAServerLobby& from) {
    CSODOTAServerLobby::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAServerLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAServerLobby";
  }
  protected:
  explicit CSODOTAServerLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllMembersFieldNumber = 1,
  };
  // repeated .CSODOTAServerLobbyMember all_members = 1;
  int all_members_size() const;
  private:
  int _internal_all_members_size() const;
  public:
  void clear_all_members();
  ::CSODOTAServerLobbyMember* mutable_all_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerLobbyMember >*
      mutable_all_members();
  private:
  const ::CSODOTAServerLobbyMember& _internal_all_members(int index) const;
  ::CSODOTAServerLobbyMember* _internal_add_all_members();
  public:
  const ::CSODOTAServerLobbyMember& all_members(int index) const;
  ::CSODOTAServerLobbyMember* add_all_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerLobbyMember >&
      all_members() const;

  // @@protoc_insertion_point(class_scope:CSODOTAServerLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerLobbyMember > all_members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAStaticLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAStaticLobby) */ {
 public:
  inline CSODOTAStaticLobby() : CSODOTAStaticLobby(nullptr) {}
  ~CSODOTAStaticLobby() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAStaticLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAStaticLobby(const CSODOTAStaticLobby& from);
  CSODOTAStaticLobby(CSODOTAStaticLobby&& from) noexcept
    : CSODOTAStaticLobby() {
    *this = ::std::move(from);
  }

  inline CSODOTAStaticLobby& operator=(const CSODOTAStaticLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAStaticLobby& operator=(CSODOTAStaticLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAStaticLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAStaticLobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTAStaticLobby*>(
               &_CSODOTAStaticLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CSODOTAStaticLobby& a, CSODOTAStaticLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAStaticLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAStaticLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAStaticLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAStaticLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAStaticLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAStaticLobby& from) {
    CSODOTAStaticLobby::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAStaticLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAStaticLobby";
  }
  protected:
  explicit CSODOTAStaticLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllMembersFieldNumber = 1,
  };
  // repeated .CSODOTAStaticLobbyMember all_members = 1;
  int all_members_size() const;
  private:
  int _internal_all_members_size() const;
  public:
  void clear_all_members();
  ::CSODOTAStaticLobbyMember* mutable_all_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAStaticLobbyMember >*
      mutable_all_members();
  private:
  const ::CSODOTAStaticLobbyMember& _internal_all_members(int index) const;
  ::CSODOTAStaticLobbyMember* _internal_add_all_members();
  public:
  const ::CSODOTAStaticLobbyMember& all_members(int index) const;
  ::CSODOTAStaticLobbyMember* add_all_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAStaticLobbyMember >&
      all_members() const;

  // @@protoc_insertion_point(class_scope:CSODOTAStaticLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAStaticLobbyMember > all_members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CSODOTAServerStaticLobby final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSODOTAServerStaticLobby) */ {
 public:
  inline CSODOTAServerStaticLobby() : CSODOTAServerStaticLobby(nullptr) {}
  ~CSODOTAServerStaticLobby() override;
  explicit PROTOBUF_CONSTEXPR CSODOTAServerStaticLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSODOTAServerStaticLobby(const CSODOTAServerStaticLobby& from);
  CSODOTAServerStaticLobby(CSODOTAServerStaticLobby&& from) noexcept
    : CSODOTAServerStaticLobby() {
    *this = ::std::move(from);
  }

  inline CSODOTAServerStaticLobby& operator=(const CSODOTAServerStaticLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSODOTAServerStaticLobby& operator=(CSODOTAServerStaticLobby&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSODOTAServerStaticLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSODOTAServerStaticLobby* internal_default_instance() {
    return reinterpret_cast<const CSODOTAServerStaticLobby*>(
               &_CSODOTAServerStaticLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CSODOTAServerStaticLobby& a, CSODOTAServerStaticLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CSODOTAServerStaticLobby* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSODOTAServerStaticLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSODOTAServerStaticLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CSODOTAServerStaticLobby>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CSODOTAServerStaticLobby& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CSODOTAServerStaticLobby& from) {
    CSODOTAServerStaticLobby::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSODOTAServerStaticLobby* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSODOTAServerStaticLobby";
  }
  protected:
  explicit CSODOTAServerStaticLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllMembersFieldNumber = 1,
  };
  // repeated .CSODOTAServerStaticLobbyMember all_members = 1;
  int all_members_size() const;
  private:
  int _internal_all_members_size() const;
  public:
  void clear_all_members();
  ::CSODOTAServerStaticLobbyMember* mutable_all_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerStaticLobbyMember >*
      mutable_all_members();
  private:
  const ::CSODOTAServerStaticLobbyMember& _internal_all_members(int index) const;
  ::CSODOTAServerStaticLobbyMember* _internal_add_all_members();
  public:
  const ::CSODOTAServerStaticLobbyMember& all_members(int index) const;
  ::CSODOTAServerStaticLobbyMember* add_all_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerStaticLobbyMember >&
      all_members() const;

  // @@protoc_insertion_point(class_scope:CSODOTAServerStaticLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerStaticLobbyMember > all_members_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange) */ {
 public:
  inline CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange() : CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(nullptr) {}
  ~CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange() override;
  explicit PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from);
  CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange&& from) noexcept
    : CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange() {
    *this = ::std::move(from);
  }

  inline CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& operator=(const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& operator=(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* internal_default_instance() {
    return reinterpret_cast<const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange*>(
               &_CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& a, CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& from) {
    CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange";
  }
  protected:
  explicit CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdStartFieldNumber = 1,
    kMessageIdEndFieldNumber = 2,
  };
  // optional uint32 message_id_start = 1 [default = 4294967295];
  bool has_message_id_start() const;
  private:
  bool _internal_has_message_id_start() const;
  public:
  void clear_message_id_start();
  uint32_t message_id_start() const;
  void set_message_id_start(uint32_t value);
  private:
  uint32_t _internal_message_id_start() const;
  void _internal_set_message_id_start(uint32_t value);
  public:

  // optional uint32 message_id_end = 2 [default = 4294967295];
  bool has_message_id_end() const;
  private:
  bool _internal_has_message_id_end() const;
  public:
  void clear_message_id_end();
  uint32_t message_id_end() const;
  void set_message_id_end(uint32_t value);
  private:
  uint32_t _internal_message_id_end() const;
  void _internal_set_message_id_end(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t message_id_start_;
    uint32_t message_id_end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange) */ {
 public:
  inline CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange() : CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(nullptr) {}
  ~CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange() override;
  explicit PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from);
  CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange&& from) noexcept
    : CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange() {
    *this = ::std::move(from);
  }

  inline CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& operator=(const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& operator=(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* internal_default_instance() {
    return reinterpret_cast<const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange*>(
               &_CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& a, CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& from) {
    CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange";
  }
  protected:
  explicit CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdStartFieldNumber = 1,
    kMessageIdEndFieldNumber = 2,
  };
  // optional uint32 message_id_start = 1 [default = 4294967295];
  bool has_message_id_start() const;
  private:
  bool _internal_has_message_id_start() const;
  public:
  void clear_message_id_start();
  uint32_t message_id_start() const;
  void set_message_id_start(uint32_t value);
  private:
  uint32_t _internal_message_id_start() const;
  void _internal_set_message_id_start(uint32_t value);
  public:

  // optional uint32 message_id_end = 2 [default = 4294967295];
  bool has_message_id_end() const;
  private:
  bool _internal_has_message_id_end() const;
  public:
  void clear_message_id_end();
  uint32_t message_id_end() const;
  void set_message_id_end(uint32_t value);
  private:
  uint32_t _internal_message_id_end() const;
  void _internal_set_message_id_end(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t message_id_start_;
    uint32_t message_id_end_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgAdditionalLobbyStartupAccountData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAdditionalLobbyStartupAccountData) */ {
 public:
  inline CMsgAdditionalLobbyStartupAccountData() : CMsgAdditionalLobbyStartupAccountData(nullptr) {}
  ~CMsgAdditionalLobbyStartupAccountData() override;
  explicit PROTOBUF_CONSTEXPR CMsgAdditionalLobbyStartupAccountData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAdditionalLobbyStartupAccountData(const CMsgAdditionalLobbyStartupAccountData& from);
  CMsgAdditionalLobbyStartupAccountData(CMsgAdditionalLobbyStartupAccountData&& from) noexcept
    : CMsgAdditionalLobbyStartupAccountData() {
    *this = ::std::move(from);
  }

  inline CMsgAdditionalLobbyStartupAccountData& operator=(const CMsgAdditionalLobbyStartupAccountData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAdditionalLobbyStartupAccountData& operator=(CMsgAdditionalLobbyStartupAccountData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgAdditionalLobbyStartupAccountData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAdditionalLobbyStartupAccountData* internal_default_instance() {
    return reinterpret_cast<const CMsgAdditionalLobbyStartupAccountData*>(
               &_CMsgAdditionalLobbyStartupAccountData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgAdditionalLobbyStartupAccountData& a, CMsgAdditionalLobbyStartupAccountData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAdditionalLobbyStartupAccountData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAdditionalLobbyStartupAccountData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgAdditionalLobbyStartupAccountData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgAdditionalLobbyStartupAccountData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgAdditionalLobbyStartupAccountData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgAdditionalLobbyStartupAccountData& from) {
    CMsgAdditionalLobbyStartupAccountData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAdditionalLobbyStartupAccountData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAdditionalLobbyStartupAccountData";
  }
  protected:
  explicit CMsgAdditionalLobbyStartupAccountData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange ChatWheelMessageRange;
  typedef CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange PingWheelMessageRange;

  // accessors -------------------------------------------------------

  enum : int {
    kUnlockedChatWheelMessageRangesFieldNumber = 3,
    kUnlockedPingWheelMessageRangesFieldNumber = 4,
    kPlusDataFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 3;
  int unlocked_chat_wheel_message_ranges_size() const;
  private:
  int _internal_unlocked_chat_wheel_message_ranges_size() const;
  public:
  void clear_unlocked_chat_wheel_message_ranges();
  ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* mutable_unlocked_chat_wheel_message_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >*
      mutable_unlocked_chat_wheel_message_ranges();
  private:
  const ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& _internal_unlocked_chat_wheel_message_ranges(int index) const;
  ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* _internal_add_unlocked_chat_wheel_message_ranges();
  public:
  const ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& unlocked_chat_wheel_message_ranges(int index) const;
  ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* add_unlocked_chat_wheel_message_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >&
      unlocked_chat_wheel_message_ranges() const;

  // repeated .CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 4;
  int unlocked_ping_wheel_message_ranges_size() const;
  private:
  int _internal_unlocked_ping_wheel_message_ranges_size() const;
  public:
  void clear_unlocked_ping_wheel_message_ranges();
  ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* mutable_unlocked_ping_wheel_message_ranges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >*
      mutable_unlocked_ping_wheel_message_ranges();
  private:
  const ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& _internal_unlocked_ping_wheel_message_ranges(int index) const;
  ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* _internal_add_unlocked_ping_wheel_message_ranges();
  public:
  const ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& unlocked_ping_wheel_message_ranges(int index) const;
  ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* add_unlocked_ping_wheel_message_ranges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >&
      unlocked_ping_wheel_message_ranges() const;

  // optional .CMsgLobbyPlayerPlusSubscriptionData plus_data = 2;
  bool has_plus_data() const;
  private:
  bool _internal_has_plus_data() const;
  public:
  void clear_plus_data();
  const ::CMsgLobbyPlayerPlusSubscriptionData& plus_data() const;
  PROTOBUF_NODISCARD ::CMsgLobbyPlayerPlusSubscriptionData* release_plus_data();
  ::CMsgLobbyPlayerPlusSubscriptionData* mutable_plus_data();
  void set_allocated_plus_data(::CMsgLobbyPlayerPlusSubscriptionData* plus_data);
  private:
  const ::CMsgLobbyPlayerPlusSubscriptionData& _internal_plus_data() const;
  ::CMsgLobbyPlayerPlusSubscriptionData* _internal_mutable_plus_data();
  public:
  void unsafe_arena_set_allocated_plus_data(
      ::CMsgLobbyPlayerPlusSubscriptionData* plus_data);
  ::CMsgLobbyPlayerPlusSubscriptionData* unsafe_arena_release_plus_data();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgAdditionalLobbyStartupAccountData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange > unlocked_chat_wheel_message_ranges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange > unlocked_ping_wheel_message_ranges_;
    ::CMsgLobbyPlayerPlusSubscriptionData* plus_data_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyInitializationComplete final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgLobbyInitializationComplete) */ {
 public:
  inline CMsgLobbyInitializationComplete() : CMsgLobbyInitializationComplete(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgLobbyInitializationComplete(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyInitializationComplete(const CMsgLobbyInitializationComplete& from);
  CMsgLobbyInitializationComplete(CMsgLobbyInitializationComplete&& from) noexcept
    : CMsgLobbyInitializationComplete() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyInitializationComplete& operator=(const CMsgLobbyInitializationComplete& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyInitializationComplete& operator=(CMsgLobbyInitializationComplete&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyInitializationComplete& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyInitializationComplete* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyInitializationComplete*>(
               &_CMsgLobbyInitializationComplete_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgLobbyInitializationComplete& a, CMsgLobbyInitializationComplete& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyInitializationComplete* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyInitializationComplete* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyInitializationComplete* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyInitializationComplete>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgLobbyInitializationComplete& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgLobbyInitializationComplete& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyInitializationComplete";
  }
  protected:
  explicit CMsgLobbyInitializationComplete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgLobbyInitializationComplete)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyPlaytestDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyPlaytestDetails) */ {
 public:
  inline CMsgLobbyPlaytestDetails() : CMsgLobbyPlaytestDetails(nullptr) {}
  ~CMsgLobbyPlaytestDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from);
  CMsgLobbyPlaytestDetails(CMsgLobbyPlaytestDetails&& from) noexcept
    : CMsgLobbyPlaytestDetails() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyPlaytestDetails& operator=(const CMsgLobbyPlaytestDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyPlaytestDetails& operator=(CMsgLobbyPlaytestDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLobbyPlaytestDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyPlaytestDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyPlaytestDetails*>(
               &_CMsgLobbyPlaytestDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgLobbyPlaytestDetails& a, CMsgLobbyPlaytestDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyPlaytestDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyPlaytestDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLobbyPlaytestDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLobbyPlaytestDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLobbyPlaytestDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLobbyPlaytestDetails& from) {
    CMsgLobbyPlaytestDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyPlaytestDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyPlaytestDetails";
  }
  protected:
  explicit CMsgLobbyPlaytestDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 1,
  };
  // optional string json = 1;
  bool has_json() const;
  private:
  bool _internal_has_json() const;
  public:
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyPlaytestDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLocalServerGuildData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLocalServerGuildData) */ {
 public:
  inline CMsgLocalServerGuildData() : CMsgLocalServerGuildData(nullptr) {}
  ~CMsgLocalServerGuildData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLocalServerGuildData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLocalServerGuildData(const CMsgLocalServerGuildData& from);
  CMsgLocalServerGuildData(CMsgLocalServerGuildData&& from) noexcept
    : CMsgLocalServerGuildData() {
    *this = ::std::move(from);
  }

  inline CMsgLocalServerGuildData& operator=(const CMsgLocalServerGuildData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLocalServerGuildData& operator=(CMsgLocalServerGuildData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLocalServerGuildData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLocalServerGuildData* internal_default_instance() {
    return reinterpret_cast<const CMsgLocalServerGuildData*>(
               &_CMsgLocalServerGuildData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgLocalServerGuildData& a, CMsgLocalServerGuildData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLocalServerGuildData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLocalServerGuildData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLocalServerGuildData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLocalServerGuildData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLocalServerGuildData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLocalServerGuildData& from) {
    CMsgLocalServerGuildData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLocalServerGuildData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLocalServerGuildData";
  }
  protected:
  explicit CMsgLocalServerGuildData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kEventIdFieldNumber = 2,
    kGuildLogoFieldNumber = 4,
    kGuildPointsFieldNumber = 3,
    kGuildPrimaryColorFieldNumber = 5,
    kGuildSecondaryColorFieldNumber = 6,
    kGuildPatternFieldNumber = 7,
    kGuildFlagsFieldNumber = 8,
    kGuildWeeklyPercentileFieldNumber = 9,
  };
  // optional uint32 guild_id = 1;
  bool has_guild_id() const;
  private:
  bool _internal_has_guild_id() const;
  public:
  void clear_guild_id();
  uint32_t guild_id() const;
  void set_guild_id(uint32_t value);
  private:
  uint32_t _internal_guild_id() const;
  void _internal_set_guild_id(uint32_t value);
  public:

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint64 guild_logo = 4;
  bool has_guild_logo() const;
  private:
  bool _internal_has_guild_logo() const;
  public:
  void clear_guild_logo();
  uint64_t guild_logo() const;
  void set_guild_logo(uint64_t value);
  private:
  uint64_t _internal_guild_logo() const;
  void _internal_set_guild_logo(uint64_t value);
  public:

  // optional uint32 guild_points = 3;
  bool has_guild_points() const;
  private:
  bool _internal_has_guild_points() const;
  public:
  void clear_guild_points();
  uint32_t guild_points() const;
  void set_guild_points(uint32_t value);
  private:
  uint32_t _internal_guild_points() const;
  void _internal_set_guild_points(uint32_t value);
  public:

  // optional uint32 guild_primary_color = 5;
  bool has_guild_primary_color() const;
  private:
  bool _internal_has_guild_primary_color() const;
  public:
  void clear_guild_primary_color();
  uint32_t guild_primary_color() const;
  void set_guild_primary_color(uint32_t value);
  private:
  uint32_t _internal_guild_primary_color() const;
  void _internal_set_guild_primary_color(uint32_t value);
  public:

  // optional uint32 guild_secondary_color = 6;
  bool has_guild_secondary_color() const;
  private:
  bool _internal_has_guild_secondary_color() const;
  public:
  void clear_guild_secondary_color();
  uint32_t guild_secondary_color() const;
  void set_guild_secondary_color(uint32_t value);
  private:
  uint32_t _internal_guild_secondary_color() const;
  void _internal_set_guild_secondary_color(uint32_t value);
  public:

  // optional uint32 guild_pattern = 7;
  bool has_guild_pattern() const;
  private:
  bool _internal_has_guild_pattern() const;
  public:
  void clear_guild_pattern();
  uint32_t guild_pattern() const;
  void set_guild_pattern(uint32_t value);
  private:
  uint32_t _internal_guild_pattern() const;
  void _internal_set_guild_pattern(uint32_t value);
  public:

  // optional uint32 guild_flags = 8;
  bool has_guild_flags() const;
  private:
  bool _internal_has_guild_flags() const;
  public:
  void clear_guild_flags();
  uint32_t guild_flags() const;
  void set_guild_flags(uint32_t value);
  private:
  uint32_t _internal_guild_flags() const;
  void _internal_set_guild_flags(uint32_t value);
  public:

  // optional uint32 guild_weekly_percentile = 9;
  bool has_guild_weekly_percentile() const;
  private:
  bool _internal_has_guild_weekly_percentile() const;
  public:
  void clear_guild_weekly_percentile();
  uint32_t guild_weekly_percentile() const;
  void set_guild_weekly_percentile(uint32_t value);
  private:
  uint32_t _internal_guild_weekly_percentile() const;
  void _internal_set_guild_weekly_percentile(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLocalServerGuildData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t guild_id_;
    int event_id_;
    uint64_t guild_logo_;
    uint32_t guild_points_;
    uint32_t guild_primary_color_;
    uint32_t guild_secondary_color_;
    uint32_t guild_pattern_;
    uint32_t guild_flags_;
    uint32_t guild_weekly_percentile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// -------------------------------------------------------------------

class CMsgLocalServerFakeLobbyData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLocalServerFakeLobbyData) */ {
 public:
  inline CMsgLocalServerFakeLobbyData() : CMsgLocalServerFakeLobbyData(nullptr) {}
  ~CMsgLocalServerFakeLobbyData() override;
  explicit PROTOBUF_CONSTEXPR CMsgLocalServerFakeLobbyData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLocalServerFakeLobbyData(const CMsgLocalServerFakeLobbyData& from);
  CMsgLocalServerFakeLobbyData(CMsgLocalServerFakeLobbyData&& from) noexcept
    : CMsgLocalServerFakeLobbyData() {
    *this = ::std::move(from);
  }

  inline CMsgLocalServerFakeLobbyData& operator=(const CMsgLocalServerFakeLobbyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLocalServerFakeLobbyData& operator=(CMsgLocalServerFakeLobbyData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgLocalServerFakeLobbyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLocalServerFakeLobbyData* internal_default_instance() {
    return reinterpret_cast<const CMsgLocalServerFakeLobbyData*>(
               &_CMsgLocalServerFakeLobbyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgLocalServerFakeLobbyData& a, CMsgLocalServerFakeLobbyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLocalServerFakeLobbyData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLocalServerFakeLobbyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgLocalServerFakeLobbyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgLocalServerFakeLobbyData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgLocalServerFakeLobbyData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgLocalServerFakeLobbyData& from) {
    CMsgLocalServerFakeLobbyData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLocalServerFakeLobbyData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLocalServerFakeLobbyData";
  }
  protected:
  explicit CMsgLocalServerFakeLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventPointsFieldNumber = 2,
    kGuildInfoFieldNumber = 7,
    kAdditionalDataFieldNumber = 9,
    kAccountIdFieldNumber = 1,
    kIsPlusSubscriberFieldNumber = 3,
    kPrimaryEventIdFieldNumber = 4,
    kFavoriteTeamFieldNumber = 5,
    kFavoriteTeamQualityFieldNumber = 6,
    kTeleportFxLevelFieldNumber = 8,
  };
  // repeated .CMsgLobbyEventPoints event_points = 2;
  int event_points_size() const;
  private:
  int _internal_event_points_size() const;
  public:
  void clear_event_points();
  ::CMsgLobbyEventPoints* mutable_event_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
      mutable_event_points();
  private:
  const ::CMsgLobbyEventPoints& _internal_event_points(int index) const;
  ::CMsgLobbyEventPoints* _internal_add_event_points();
  public:
  const ::CMsgLobbyEventPoints& event_points(int index) const;
  ::CMsgLobbyEventPoints* add_event_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
      event_points() const;

  // optional .CMsgLocalServerGuildData guild_info = 7;
  bool has_guild_info() const;
  private:
  bool _internal_has_guild_info() const;
  public:
  void clear_guild_info();
  const ::CMsgLocalServerGuildData& guild_info() const;
  PROTOBUF_NODISCARD ::CMsgLocalServerGuildData* release_guild_info();
  ::CMsgLocalServerGuildData* mutable_guild_info();
  void set_allocated_guild_info(::CMsgLocalServerGuildData* guild_info);
  private:
  const ::CMsgLocalServerGuildData& _internal_guild_info() const;
  ::CMsgLocalServerGuildData* _internal_mutable_guild_info();
  public:
  void unsafe_arena_set_allocated_guild_info(
      ::CMsgLocalServerGuildData* guild_info);
  ::CMsgLocalServerGuildData* unsafe_arena_release_guild_info();

  // optional .CMsgAdditionalLobbyStartupAccountData additional_data = 9;
  bool has_additional_data() const;
  private:
  bool _internal_has_additional_data() const;
  public:
  void clear_additional_data();
  const ::CMsgAdditionalLobbyStartupAccountData& additional_data() const;
  PROTOBUF_NODISCARD ::CMsgAdditionalLobbyStartupAccountData* release_additional_data();
  ::CMsgAdditionalLobbyStartupAccountData* mutable_additional_data();
  void set_allocated_additional_data(::CMsgAdditionalLobbyStartupAccountData* additional_data);
  private:
  const ::CMsgAdditionalLobbyStartupAccountData& _internal_additional_data() const;
  ::CMsgAdditionalLobbyStartupAccountData* _internal_mutable_additional_data();
  public:
  void unsafe_arena_set_allocated_additional_data(
      ::CMsgAdditionalLobbyStartupAccountData* additional_data);
  ::CMsgAdditionalLobbyStartupAccountData* unsafe_arena_release_additional_data();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional bool is_plus_subscriber = 3;
  bool has_is_plus_subscriber() const;
  private:
  bool _internal_has_is_plus_subscriber() const;
  public:
  void clear_is_plus_subscriber();
  bool is_plus_subscriber() const;
  void set_is_plus_subscriber(bool value);
  private:
  bool _internal_is_plus_subscriber() const;
  void _internal_set_is_plus_subscriber(bool value);
  public:

  // optional uint32 primary_event_id = 4;
  bool has_primary_event_id() const;
  private:
  bool _internal_has_primary_event_id() const;
  public:
  void clear_primary_event_id();
  uint32_t primary_event_id() const;
  void set_primary_event_id(uint32_t value);
  private:
  uint32_t _internal_primary_event_id() const;
  void _internal_set_primary_event_id(uint32_t value);
  public:

  // optional uint32 favorite_team = 5;
  bool has_favorite_team() const;
  private:
  bool _internal_has_favorite_team() const;
  public:
  void clear_favorite_team();
  uint32_t favorite_team() const;
  void set_favorite_team(uint32_t value);
  private:
  uint32_t _internal_favorite_team() const;
  void _internal_set_favorite_team(uint32_t value);
  public:

  // optional uint32 favorite_team_quality = 6;
  bool has_favorite_team_quality() const;
  private:
  bool _internal_has_favorite_team_quality() const;
  public:
  void clear_favorite_team_quality();
  uint32_t favorite_team_quality() const;
  void set_favorite_team_quality(uint32_t value);
  private:
  uint32_t _internal_favorite_team_quality() const;
  void _internal_set_favorite_team_quality(uint32_t value);
  public:

  // optional uint32 teleport_fx_level = 8;
  bool has_teleport_fx_level() const;
  private:
  bool _internal_has_teleport_fx_level() const;
  public:
  void clear_teleport_fx_level();
  uint32_t teleport_fx_level() const;
  void set_teleport_fx_level(uint32_t value);
  private:
  uint32_t _internal_teleport_fx_level() const;
  void _internal_set_teleport_fx_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLocalServerFakeLobbyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints > event_points_;
    ::CMsgLocalServerGuildData* guild_info_;
    ::CMsgAdditionalLobbyStartupAccountData* additional_data_;
    uint32_t account_id_;
    bool is_plus_subscriber_;
    uint32_t primary_event_id_;
    uint32_t favorite_team_;
    uint32_t favorite_team_quality_;
    uint32_t teleport_fx_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fcommon_5flobby_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgLobbyCoachFriendRequest

// optional uint32 coach_account_id = 1;
inline bool CMsgLobbyCoachFriendRequest::_internal_has_coach_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_coach_account_id() const {
  return _internal_has_coach_account_id();
}
inline void CMsgLobbyCoachFriendRequest::clear_coach_account_id() {
  _impl_.coach_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyCoachFriendRequest::_internal_coach_account_id() const {
  return _impl_.coach_account_id_;
}
inline uint32_t CMsgLobbyCoachFriendRequest::coach_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.coach_account_id)
  return _internal_coach_account_id();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_coach_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.coach_account_id_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_coach_account_id(uint32_t value) {
  _internal_set_coach_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.coach_account_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgLobbyCoachFriendRequest::_internal_has_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgLobbyCoachFriendRequest::clear_player_account_id() {
  _impl_.player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyCoachFriendRequest::_internal_player_account_id() const {
  return _impl_.player_account_id_;
}
inline uint32_t CMsgLobbyCoachFriendRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_account_id_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_player_account_id(uint32_t value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.player_account_id)
}

// optional .ELobbyMemberCoachRequestState request_state = 3 [default = k_eLobbyMemberCoachRequestState_None];
inline bool CMsgLobbyCoachFriendRequest::_internal_has_request_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLobbyCoachFriendRequest::has_request_state() const {
  return _internal_has_request_state();
}
inline void CMsgLobbyCoachFriendRequest::clear_request_state() {
  _impl_.request_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ELobbyMemberCoachRequestState CMsgLobbyCoachFriendRequest::_internal_request_state() const {
  return static_cast< ::ELobbyMemberCoachRequestState >(_impl_.request_state_);
}
inline ::ELobbyMemberCoachRequestState CMsgLobbyCoachFriendRequest::request_state() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyCoachFriendRequest.request_state)
  return _internal_request_state();
}
inline void CMsgLobbyCoachFriendRequest::_internal_set_request_state(::ELobbyMemberCoachRequestState value) {
  assert(::ELobbyMemberCoachRequestState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.request_state_ = value;
}
inline void CMsgLobbyCoachFriendRequest::set_request_state(::ELobbyMemberCoachRequestState value) {
  _internal_set_request_state(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyCoachFriendRequest.request_state)
}

// -------------------------------------------------------------------

// CMsgLobbyPlayerPlusSubscriptionData_HeroBadge

// optional uint32 hero_id = 1;
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_id)
  return _internal_hero_id();
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_id)
}

// optional uint32 hero_badge_xp = 2;
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_has_hero_badge_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::has_hero_badge_xp() const {
  return _internal_has_hero_badge_xp();
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::clear_hero_badge_xp() {
  _impl_.hero_badge_xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_hero_badge_xp() const {
  return _impl_.hero_badge_xp_;
}
inline uint32_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::hero_badge_xp() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_badge_xp)
  return _internal_hero_badge_xp();
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_internal_set_hero_badge_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_badge_xp_ = value;
}
inline void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::set_hero_badge_xp(uint32_t value) {
  _internal_set_hero_badge_xp(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge.hero_badge_xp)
}

// -------------------------------------------------------------------

// CMsgLobbyPlayerPlusSubscriptionData

// repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
inline int CMsgLobbyPlayerPlusSubscriptionData::_internal_hero_badges_size() const {
  return _impl_.hero_badges_.size();
}
inline int CMsgLobbyPlayerPlusSubscriptionData::hero_badges_size() const {
  return _internal_hero_badges_size();
}
inline void CMsgLobbyPlayerPlusSubscriptionData::clear_hero_badges() {
  _impl_.hero_badges_.Clear();
}
inline ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* CMsgLobbyPlayerPlusSubscriptionData::mutable_hero_badges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return _impl_.hero_badges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >*
CMsgLobbyPlayerPlusSubscriptionData::mutable_hero_badges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return &_impl_.hero_badges_;
}
inline const ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& CMsgLobbyPlayerPlusSubscriptionData::_internal_hero_badges(int index) const {
  return _impl_.hero_badges_.Get(index);
}
inline const ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& CMsgLobbyPlayerPlusSubscriptionData::hero_badges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return _internal_hero_badges(index);
}
inline ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* CMsgLobbyPlayerPlusSubscriptionData::_internal_add_hero_badges() {
  return _impl_.hero_badges_.Add();
}
inline ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* CMsgLobbyPlayerPlusSubscriptionData::add_hero_badges() {
  ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* _add = _internal_add_hero_badges();
  // @@protoc_insertion_point(field_add:CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >&
CMsgLobbyPlayerPlusSubscriptionData::hero_badges() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyPlayerPlusSubscriptionData.hero_badges)
  return _impl_.hero_badges_;
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_PeriodicResourceData

// optional uint32 periodic_resource_id = 1;
inline bool CMsgLobbyEventPoints_PeriodicResourceData::_internal_has_periodic_resource_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_PeriodicResourceData::has_periodic_resource_id() const {
  return _internal_has_periodic_resource_id();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::clear_periodic_resource_id() {
  _impl_.periodic_resource_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::_internal_periodic_resource_id() const {
  return _impl_.periodic_resource_id_;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::periodic_resource_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.PeriodicResourceData.periodic_resource_id)
  return _internal_periodic_resource_id();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::_internal_set_periodic_resource_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.periodic_resource_id_ = value;
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::set_periodic_resource_id(uint32_t value) {
  _internal_set_periodic_resource_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.PeriodicResourceData.periodic_resource_id)
}

// optional uint32 remaining = 2;
inline bool CMsgLobbyEventPoints_PeriodicResourceData::_internal_has_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_PeriodicResourceData::has_remaining() const {
  return _internal_has_remaining();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::clear_remaining() {
  _impl_.remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::_internal_remaining() const {
  return _impl_.remaining_;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::remaining() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.PeriodicResourceData.remaining)
  return _internal_remaining();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::_internal_set_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remaining_ = value;
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::set_remaining(uint32_t value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.PeriodicResourceData.remaining)
}

// optional uint32 max = 3;
inline bool CMsgLobbyEventPoints_PeriodicResourceData::_internal_has_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_PeriodicResourceData::has_max() const {
  return _internal_has_max();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::clear_max() {
  _impl_.max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::_internal_max() const {
  return _impl_.max_;
}
inline uint32_t CMsgLobbyEventPoints_PeriodicResourceData::max() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.PeriodicResourceData.max)
  return _internal_max();
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::_internal_set_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.max_ = value;
}
inline void CMsgLobbyEventPoints_PeriodicResourceData::set_max(uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.PeriodicResourceData.max)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_NetworkedEventAction

// optional uint32 action_id = 1;
inline bool CMsgLobbyEventPoints_NetworkedEventAction::_internal_has_action_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_NetworkedEventAction::has_action_id() const {
  return _internal_has_action_id();
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::clear_action_id() {
  _impl_.action_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyEventPoints_NetworkedEventAction::_internal_action_id() const {
  return _impl_.action_id_;
}
inline uint32_t CMsgLobbyEventPoints_NetworkedEventAction::action_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.NetworkedEventAction.action_id)
  return _internal_action_id();
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::_internal_set_action_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.action_id_ = value;
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::set_action_id(uint32_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.NetworkedEventAction.action_id)
}

// optional uint32 times_granted = 2;
inline bool CMsgLobbyEventPoints_NetworkedEventAction::_internal_has_times_granted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_NetworkedEventAction::has_times_granted() const {
  return _internal_has_times_granted();
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::clear_times_granted() {
  _impl_.times_granted_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyEventPoints_NetworkedEventAction::_internal_times_granted() const {
  return _impl_.times_granted_;
}
inline uint32_t CMsgLobbyEventPoints_NetworkedEventAction::times_granted() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.NetworkedEventAction.times_granted)
  return _internal_times_granted();
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::_internal_set_times_granted(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.times_granted_ = value;
}
inline void CMsgLobbyEventPoints_NetworkedEventAction::set_times_granted(uint32_t value) {
  _internal_set_times_granted(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.NetworkedEventAction.times_granted)
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.account_id)
  return _internal_account_id();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_normal_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return _internal_has_normal_points();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  _impl_.normal_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_normal_points() const {
  return _impl_.normal_points_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.normal_points)
  return _internal_normal_points();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_normal_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.normal_points_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_normal_points(uint32_t value) {
  _internal_set_normal_points(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_premium_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return _internal_has_premium_points();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  _impl_.premium_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_premium_points() const {
  return _impl_.premium_points_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.premium_points)
  return _internal_premium_points();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_premium_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.premium_points_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_premium_points(uint32_t value) {
  _internal_set_premium_points(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_owned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return _internal_has_owned();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  _impl_.owned_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_owned() const {
  return _impl_.owned_;
}
inline bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.owned)
  return _internal_owned();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_owned(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.owned_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  _internal_set_owned(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint64 active_effects_mask = 12;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_active_effects_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_active_effects_mask() const {
  return _internal_has_active_effects_mask();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_active_effects_mask() {
  _impl_.active_effects_mask_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgLobbyEventPoints_AccountPoints::_internal_active_effects_mask() const {
  return _impl_.active_effects_mask_;
}
inline uint64_t CMsgLobbyEventPoints_AccountPoints::active_effects_mask() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
  return _internal_active_effects_mask();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_active_effects_mask(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.active_effects_mask_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_active_effects_mask(uint64_t value) {
  _internal_set_active_effects_mask(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
}

// optional uint32 wager_streak = 23;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_wager_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_wager_streak() const {
  return _internal_has_wager_streak();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_wager_streak() {
  _impl_.wager_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_wager_streak() const {
  return _impl_.wager_streak_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::wager_streak() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.wager_streak)
  return _internal_wager_streak();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_wager_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wager_streak_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_wager_streak(uint32_t value) {
  _internal_set_wager_streak(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.wager_streak)
}

// repeated .CMsgLobbyEventPoints.NetworkedEventAction event_game_custom_actions = 25;
inline int CMsgLobbyEventPoints_AccountPoints::_internal_event_game_custom_actions_size() const {
  return _impl_.event_game_custom_actions_.size();
}
inline int CMsgLobbyEventPoints_AccountPoints::event_game_custom_actions_size() const {
  return _internal_event_game_custom_actions_size();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_event_game_custom_actions() {
  _impl_.event_game_custom_actions_.Clear();
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::mutable_event_game_custom_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions)
  return _impl_.event_game_custom_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >*
CMsgLobbyEventPoints_AccountPoints::mutable_event_game_custom_actions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions)
  return &_impl_.event_game_custom_actions_;
}
inline const ::CMsgLobbyEventPoints_NetworkedEventAction& CMsgLobbyEventPoints_AccountPoints::_internal_event_game_custom_actions(int index) const {
  return _impl_.event_game_custom_actions_.Get(index);
}
inline const ::CMsgLobbyEventPoints_NetworkedEventAction& CMsgLobbyEventPoints_AccountPoints::event_game_custom_actions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions)
  return _internal_event_game_custom_actions(index);
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::_internal_add_event_game_custom_actions() {
  return _impl_.event_game_custom_actions_.Add();
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::add_event_game_custom_actions() {
  ::CMsgLobbyEventPoints_NetworkedEventAction* _add = _internal_add_event_game_custom_actions();
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >&
CMsgLobbyEventPoints_AccountPoints::event_game_custom_actions() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.AccountPoints.event_game_custom_actions)
  return _impl_.event_game_custom_actions_;
}

// optional uint32 tip_amount_index = 26;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_tip_amount_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_tip_amount_index() const {
  return _internal_has_tip_amount_index();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_tip_amount_index() {
  _impl_.tip_amount_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_tip_amount_index() const {
  return _impl_.tip_amount_index_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::tip_amount_index() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.tip_amount_index)
  return _internal_tip_amount_index();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_tip_amount_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.tip_amount_index_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_tip_amount_index(uint32_t value) {
  _internal_set_tip_amount_index(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.tip_amount_index)
}

// optional uint32 active_event_season_id = 27;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_active_event_season_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_active_event_season_id() const {
  return _internal_has_active_event_season_id();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_active_event_season_id() {
  _impl_.active_event_season_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_active_event_season_id() const {
  return _impl_.active_event_season_id_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::active_event_season_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.active_event_season_id)
  return _internal_active_event_season_id();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_active_event_season_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.active_event_season_id_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_active_event_season_id(uint32_t value) {
  _internal_set_active_event_season_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.active_event_season_id)
}

// optional uint32 teleport_fx_level = 28;
inline bool CMsgLobbyEventPoints_AccountPoints::_internal_has_teleport_fx_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints_AccountPoints::has_teleport_fx_level() const {
  return _internal_has_teleport_fx_level();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_teleport_fx_level() {
  _impl_.teleport_fx_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::_internal_teleport_fx_level() const {
  return _impl_.teleport_fx_level_;
}
inline uint32_t CMsgLobbyEventPoints_AccountPoints::teleport_fx_level() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.teleport_fx_level)
  return _internal_teleport_fx_level();
}
inline void CMsgLobbyEventPoints_AccountPoints::_internal_set_teleport_fx_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.teleport_fx_level_ = value;
}
inline void CMsgLobbyEventPoints_AccountPoints::set_teleport_fx_level(uint32_t value) {
  _internal_set_teleport_fx_level(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.AccountPoints.teleport_fx_level)
}

// repeated .CMsgLobbyEventPoints.NetworkedEventAction networked_event_actions = 30;
inline int CMsgLobbyEventPoints_AccountPoints::_internal_networked_event_actions_size() const {
  return _impl_.networked_event_actions_.size();
}
inline int CMsgLobbyEventPoints_AccountPoints::networked_event_actions_size() const {
  return _internal_networked_event_actions_size();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_networked_event_actions() {
  _impl_.networked_event_actions_.Clear();
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::mutable_networked_event_actions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.AccountPoints.networked_event_actions)
  return _impl_.networked_event_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >*
CMsgLobbyEventPoints_AccountPoints::mutable_networked_event_actions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.AccountPoints.networked_event_actions)
  return &_impl_.networked_event_actions_;
}
inline const ::CMsgLobbyEventPoints_NetworkedEventAction& CMsgLobbyEventPoints_AccountPoints::_internal_networked_event_actions(int index) const {
  return _impl_.networked_event_actions_.Get(index);
}
inline const ::CMsgLobbyEventPoints_NetworkedEventAction& CMsgLobbyEventPoints_AccountPoints::networked_event_actions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.networked_event_actions)
  return _internal_networked_event_actions(index);
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::_internal_add_networked_event_actions() {
  return _impl_.networked_event_actions_.Add();
}
inline ::CMsgLobbyEventPoints_NetworkedEventAction* CMsgLobbyEventPoints_AccountPoints::add_networked_event_actions() {
  ::CMsgLobbyEventPoints_NetworkedEventAction* _add = _internal_add_networked_event_actions();
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.AccountPoints.networked_event_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_NetworkedEventAction >&
CMsgLobbyEventPoints_AccountPoints::networked_event_actions() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.AccountPoints.networked_event_actions)
  return _impl_.networked_event_actions_;
}

// repeated .CMsgLobbyEventPoints.PeriodicResourceData periodic_resources = 31;
inline int CMsgLobbyEventPoints_AccountPoints::_internal_periodic_resources_size() const {
  return _impl_.periodic_resources_.size();
}
inline int CMsgLobbyEventPoints_AccountPoints::periodic_resources_size() const {
  return _internal_periodic_resources_size();
}
inline void CMsgLobbyEventPoints_AccountPoints::clear_periodic_resources() {
  _impl_.periodic_resources_.Clear();
}
inline ::CMsgLobbyEventPoints_PeriodicResourceData* CMsgLobbyEventPoints_AccountPoints::mutable_periodic_resources(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.AccountPoints.periodic_resources)
  return _impl_.periodic_resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_PeriodicResourceData >*
CMsgLobbyEventPoints_AccountPoints::mutable_periodic_resources() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.AccountPoints.periodic_resources)
  return &_impl_.periodic_resources_;
}
inline const ::CMsgLobbyEventPoints_PeriodicResourceData& CMsgLobbyEventPoints_AccountPoints::_internal_periodic_resources(int index) const {
  return _impl_.periodic_resources_.Get(index);
}
inline const ::CMsgLobbyEventPoints_PeriodicResourceData& CMsgLobbyEventPoints_AccountPoints::periodic_resources(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.AccountPoints.periodic_resources)
  return _internal_periodic_resources(index);
}
inline ::CMsgLobbyEventPoints_PeriodicResourceData* CMsgLobbyEventPoints_AccountPoints::_internal_add_periodic_resources() {
  return _impl_.periodic_resources_.Add();
}
inline ::CMsgLobbyEventPoints_PeriodicResourceData* CMsgLobbyEventPoints_AccountPoints::add_periodic_resources() {
  ::CMsgLobbyEventPoints_PeriodicResourceData* _add = _internal_add_periodic_resources();
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.AccountPoints.periodic_resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_PeriodicResourceData >&
CMsgLobbyEventPoints_AccountPoints::periodic_resources() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.AccountPoints.periodic_resources)
  return _impl_.periodic_resources_;
}

// -------------------------------------------------------------------

// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
inline bool CMsgLobbyEventPoints::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventPoints::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgLobbyEventPoints::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyEventPoints::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.event_id)
  return _internal_event_id();
}
inline void CMsgLobbyEventPoints::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CMsgLobbyEventPoints::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventPoints.event_id)
}

// repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
inline int CMsgLobbyEventPoints::_internal_account_points_size() const {
  return _impl_.account_points_.size();
}
inline int CMsgLobbyEventPoints::account_points_size() const {
  return _internal_account_points_size();
}
inline void CMsgLobbyEventPoints::clear_account_points() {
  _impl_.account_points_.Clear();
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyEventPoints.account_points)
  return _impl_.account_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyEventPoints.account_points)
  return &_impl_.account_points_;
}
inline const ::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::_internal_account_points(int index) const {
  return _impl_.account_points_.Get(index);
}
inline const ::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventPoints.account_points)
  return _internal_account_points(index);
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::_internal_add_account_points() {
  return _impl_.account_points_.Add();
}
inline ::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  ::CMsgLobbyEventPoints_AccountPoints* _add = _internal_add_account_points();
  // @@protoc_insertion_point(field_add:CMsgLobbyEventPoints.account_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyEventPoints.account_points)
  return _impl_.account_points_;
}

// -------------------------------------------------------------------

// CMsgLobbyEventGameData

// optional uint32 game_seed = 1;
inline bool CMsgLobbyEventGameData::_internal_has_game_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyEventGameData::has_game_seed() const {
  return _internal_has_game_seed();
}
inline void CMsgLobbyEventGameData::clear_game_seed() {
  _impl_.game_seed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLobbyEventGameData::_internal_game_seed() const {
  return _impl_.game_seed_;
}
inline uint32_t CMsgLobbyEventGameData::game_seed() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventGameData.game_seed)
  return _internal_game_seed();
}
inline void CMsgLobbyEventGameData::_internal_set_game_seed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_seed_ = value;
}
inline void CMsgLobbyEventGameData::set_game_seed(uint32_t value) {
  _internal_set_game_seed(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventGameData.game_seed)
}

// optional uint32 event_window_start_time = 2;
inline bool CMsgLobbyEventGameData::_internal_has_event_window_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyEventGameData::has_event_window_start_time() const {
  return _internal_has_event_window_start_time();
}
inline void CMsgLobbyEventGameData::clear_event_window_start_time() {
  _impl_.event_window_start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgLobbyEventGameData::_internal_event_window_start_time() const {
  return _impl_.event_window_start_time_;
}
inline uint32_t CMsgLobbyEventGameData::event_window_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyEventGameData.event_window_start_time)
  return _internal_event_window_start_time();
}
inline void CMsgLobbyEventGameData::_internal_set_event_window_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_window_start_time_ = value;
}
inline void CMsgLobbyEventGameData::set_event_window_start_time(uint32_t value) {
  _internal_set_event_window_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyEventGameData.event_window_start_time)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
inline bool CSODOTALobbyInvite_LobbyMember::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTALobbyInvite_LobbyMember::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobbyInvite_LobbyMember::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.name)
}
inline std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.LobbyMember.name)
  return _s;
}
inline const std::string& CSODOTALobbyInvite_LobbyMember::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSODOTALobbyInvite_LobbyMember::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobbyInvite_LobbyMember::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyInvite.LobbyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobbyInvite_LobbyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
inline bool CSODOTALobbyInvite_LobbyMember::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSODOTALobbyInvite_LobbyMember::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.LobbyMember.steam_id)
  return _internal_steam_id();
}
inline void CSODOTALobbyInvite_LobbyMember::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CSODOTALobbyInvite_LobbyMember::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.LobbyMember.steam_id)
}

// -------------------------------------------------------------------

// CSODOTALobbyInvite

// optional uint64 group_id = 1 [(.key_field) = true];
inline bool CSODOTALobbyInvite::_internal_has_group_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_group_id() const {
  return _internal_has_group_id();
}
inline void CSODOTALobbyInvite::clear_group_id() {
  _impl_.group_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CSODOTALobbyInvite::_internal_group_id() const {
  return _impl_.group_id_;
}
inline uint64_t CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.group_id)
  return _internal_group_id();
}
inline void CSODOTALobbyInvite::_internal_set_group_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.group_id_ = value;
}
inline void CSODOTALobbyInvite::set_group_id(uint64_t value) {
  _internal_set_group_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
inline bool CSODOTALobbyInvite::_internal_has_sender_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_sender_id() const {
  return _internal_has_sender_id();
}
inline void CSODOTALobbyInvite::clear_sender_id() {
  _impl_.sender_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSODOTALobbyInvite::_internal_sender_id() const {
  return _impl_.sender_id_;
}
inline uint64_t CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_id)
  return _internal_sender_id();
}
inline void CSODOTALobbyInvite::_internal_set_sender_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sender_id_ = value;
}
inline void CSODOTALobbyInvite::set_sender_id(uint64_t value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
inline bool CSODOTALobbyInvite::_internal_has_sender_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_sender_name() const {
  return _internal_has_sender_name();
}
inline void CSODOTALobbyInvite::clear_sender_name() {
  _impl_.sender_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.sender_name)
  return _internal_sender_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobbyInvite::set_sender_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.sender_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.sender_name)
}
inline std::string* CSODOTALobbyInvite::mutable_sender_name() {
  std::string* _s = _internal_mutable_sender_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.sender_name)
  return _s;
}
inline const std::string& CSODOTALobbyInvite::_internal_sender_name() const {
  return _impl_.sender_name_.Get();
}
inline void CSODOTALobbyInvite::_internal_set_sender_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sender_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobbyInvite::_internal_mutable_sender_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sender_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobbyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyInvite.sender_name)
  if (!_internal_has_sender_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.sender_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobbyInvite::set_allocated_sender_name(std::string* sender_name) {
  if (sender_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sender_name_.SetAllocated(sender_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sender_name_.IsDefault()) {
    _impl_.sender_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyInvite.sender_name)
}

// repeated .CSODOTALobbyInvite.LobbyMember members = 4;
inline int CSODOTALobbyInvite::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CSODOTALobbyInvite::members_size() const {
  return _internal_members_size();
}
inline void CSODOTALobbyInvite::clear_members() {
  _impl_.members_.Clear();
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyInvite.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyInvite.members)
  return &_impl_.members_;
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.members)
  return _internal_members(index);
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  ::CSODOTALobbyInvite_LobbyMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CSODOTALobbyInvite.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyInvite.members)
  return _impl_.members_;
}

// optional uint64 custom_game_id = 5;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CSODOTALobbyInvite::clear_custom_game_id() {
  _impl_.custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CSODOTALobbyInvite::_internal_custom_game_id() const {
  return _impl_.custom_game_id_;
}
inline uint64_t CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_id)
  return _internal_custom_game_id();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.custom_game_id_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_id(uint64_t value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
inline bool CSODOTALobbyInvite::_internal_has_invite_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_invite_gid() const {
  return _internal_has_invite_gid();
}
inline void CSODOTALobbyInvite::clear_invite_gid() {
  _impl_.invite_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CSODOTALobbyInvite::_internal_invite_gid() const {
  return _impl_.invite_gid_;
}
inline uint64_t CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.invite_gid)
  return _internal_invite_gid();
}
inline void CSODOTALobbyInvite::_internal_set_invite_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.invite_gid_ = value;
}
inline void CSODOTALobbyInvite::set_invite_gid(uint64_t value) {
  _internal_set_invite_gid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_crc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CSODOTALobbyInvite::clear_custom_game_crc() {
  _impl_.custom_game_crc_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CSODOTALobbyInvite::_internal_custom_game_crc() const {
  return _impl_.custom_game_crc_;
}
inline uint64_t CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_crc(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.custom_game_crc_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_crc(uint64_t value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
inline bool CSODOTALobbyInvite::_internal_has_custom_game_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  _impl_.custom_game_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSODOTALobbyInvite::_internal_custom_game_timestamp() const {
  return _impl_.custom_game_timestamp_;
}
inline uint32_t CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyInvite.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CSODOTALobbyInvite::_internal_set_custom_game_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.custom_game_timestamp_ = value;
}
inline void CSODOTALobbyInvite::set_custom_game_timestamp(uint32_t value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyInvite.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CSODOTALobbyMember

// optional fixed64 id = 1 [(.key_field) = true];
inline bool CSODOTALobbyMember::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_id() const {
  return _internal_has_id();
}
inline void CSODOTALobbyMember::clear_id() {
  _impl_.id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CSODOTALobbyMember::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t CSODOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.id)
  return _internal_id();
}
inline void CSODOTALobbyMember::_internal_set_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void CSODOTALobbyMember::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
inline bool CSODOTALobbyMember::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CSODOTALobbyMember::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CSODOTALobbyMember::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CSODOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.hero_id)
  return _internal_hero_id();
}
inline void CSODOTALobbyMember::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CSODOTALobbyMember::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.hero_id)
}

// optional .DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CSODOTALobbyMember::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_team() const {
  return _internal_has_team();
}
inline void CSODOTALobbyMember::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_team() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.team)
  return _internal_team();
}
inline void CSODOTALobbyMember::_internal_set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_ = value;
}
inline void CSODOTALobbyMember::set_team(::DOTA_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.team)
}

// optional string name = 6;
inline bool CSODOTALobbyMember::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_name() const {
  return _internal_has_name();
}
inline void CSODOTALobbyMember::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobbyMember::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.name)
}
inline std::string* CSODOTALobbyMember::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.name)
  return _s;
}
inline const std::string& CSODOTALobbyMember::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CSODOTALobbyMember::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobbyMember::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMember.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobbyMember::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMember.name)
}

// optional uint32 slot = 7;
inline bool CSODOTALobbyMember::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_slot() const {
  return _internal_has_slot();
}
inline void CSODOTALobbyMember::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CSODOTALobbyMember::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CSODOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.slot)
  return _internal_slot();
}
inline void CSODOTALobbyMember::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.slot_ = value;
}
inline void CSODOTALobbyMember::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
inline bool CSODOTALobbyMember::_internal_has_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_party_id() const {
  return _internal_has_party_id();
}
inline void CSODOTALobbyMember::clear_party_id() {
  _impl_.party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CSODOTALobbyMember::_internal_party_id() const {
  return _impl_.party_id_;
}
inline uint64_t CSODOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.party_id)
  return _internal_party_id();
}
inline void CSODOTALobbyMember::_internal_set_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.party_id_ = value;
}
inline void CSODOTALobbyMember::set_party_id(uint64_t value) {
  _internal_set_party_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
inline bool CSODOTALobbyMember::_internal_has_meta_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_level() const {
  return _internal_has_meta_level();
}
inline void CSODOTALobbyMember::clear_meta_level() {
  _impl_.meta_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CSODOTALobbyMember::_internal_meta_level() const {
  return _impl_.meta_level_;
}
inline uint32_t CSODOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_level)
  return _internal_meta_level();
}
inline void CSODOTALobbyMember::_internal_set_meta_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.meta_level_ = value;
}
inline void CSODOTALobbyMember::set_meta_level(uint32_t value) {
  _internal_set_meta_level(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
inline bool CSODOTALobbyMember::_internal_has_meta_xp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_xp() const {
  return _internal_has_meta_xp();
}
inline void CSODOTALobbyMember::clear_meta_xp() {
  _impl_.meta_xp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CSODOTALobbyMember::_internal_meta_xp() const {
  return _impl_.meta_xp_;
}
inline uint32_t CSODOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_xp)
  return _internal_meta_xp();
}
inline void CSODOTALobbyMember::_internal_set_meta_xp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.meta_xp_ = value;
}
inline void CSODOTALobbyMember::set_meta_xp(uint32_t value) {
  _internal_set_meta_xp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
inline bool CSODOTALobbyMember::_internal_has_meta_xp_awarded() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_meta_xp_awarded() const {
  return _internal_has_meta_xp_awarded();
}
inline void CSODOTALobbyMember::clear_meta_xp_awarded() {
  _impl_.meta_xp_awarded_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSODOTALobbyMember::_internal_meta_xp_awarded() const {
  return _impl_.meta_xp_awarded_;
}
inline uint32_t CSODOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.meta_xp_awarded)
  return _internal_meta_xp_awarded();
}
inline void CSODOTALobbyMember::_internal_set_meta_xp_awarded(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.meta_xp_awarded_ = value;
}
inline void CSODOTALobbyMember::set_meta_xp_awarded(uint32_t value) {
  _internal_set_meta_xp_awarded(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.meta_xp_awarded)
}

// optional .DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
inline bool CSODOTALobbyMember::_internal_has_leaver_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_leaver_status() const {
  return _internal_has_leaver_status();
}
inline void CSODOTALobbyMember::clear_leaver_status() {
  _impl_.leaver_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::DOTALeaverStatus_t CSODOTALobbyMember::_internal_leaver_status() const {
  return static_cast< ::DOTALeaverStatus_t >(_impl_.leaver_status_);
}
inline ::DOTALeaverStatus_t CSODOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.leaver_status)
  return _internal_leaver_status();
}
inline void CSODOTALobbyMember::_internal_set_leaver_status(::DOTALeaverStatus_t value) {
  assert(::DOTALeaverStatus_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.leaver_status_ = value;
}
inline void CSODOTALobbyMember::set_leaver_status(::DOTALeaverStatus_t value) {
  _internal_set_leaver_status(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
inline bool CSODOTALobbyMember::_internal_has_leaver_actions() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_leaver_actions() const {
  return _internal_has_leaver_actions();
}
inline void CSODOTALobbyMember::clear_leaver_actions() {
  _impl_.leaver_actions_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CSODOTALobbyMember::_internal_leaver_actions() const {
  return _impl_.leaver_actions_;
}
inline uint32_t CSODOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.leaver_actions)
  return _internal_leaver_actions();
}
inline void CSODOTALobbyMember::_internal_set_leaver_actions(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.leaver_actions_ = value;
}
inline void CSODOTALobbyMember::set_leaver_actions(uint32_t value) {
  _internal_set_leaver_actions(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17 [default = 6];
inline bool CSODOTALobbyMember::_internal_has_channel() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_channel() const {
  return _internal_has_channel();
}
inline void CSODOTALobbyMember::clear_channel() {
  _impl_.channel_ = 6u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CSODOTALobbyMember::_internal_channel() const {
  return _impl_.channel_;
}
inline uint32_t CSODOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.channel)
  return _internal_channel();
}
inline void CSODOTALobbyMember::_internal_set_channel(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.channel_ = value;
}
inline void CSODOTALobbyMember::set_channel(uint32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.channel)
}

// repeated uint32 disabled_hero_id = 20;
inline int CSODOTALobbyMember::_internal_disabled_hero_id_size() const {
  return _impl_.disabled_hero_id_.size();
}
inline int CSODOTALobbyMember::disabled_hero_id_size() const {
  return _internal_disabled_hero_id_size();
}
inline void CSODOTALobbyMember::clear_disabled_hero_id() {
  _impl_.disabled_hero_id_.Clear();
}
inline uint32_t CSODOTALobbyMember::_internal_disabled_hero_id(int index) const {
  return _impl_.disabled_hero_id_.Get(index);
}
inline uint32_t CSODOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.disabled_hero_id)
  return _internal_disabled_hero_id(index);
}
inline void CSODOTALobbyMember::set_disabled_hero_id(int index, uint32_t value) {
  _impl_.disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.disabled_hero_id)
}
inline void CSODOTALobbyMember::_internal_add_disabled_hero_id(uint32_t value) {
  _impl_.disabled_hero_id_.Add(value);
}
inline void CSODOTALobbyMember::add_disabled_hero_id(uint32_t value) {
  _internal_add_disabled_hero_id(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.disabled_hero_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::_internal_disabled_hero_id() const {
  return _impl_.disabled_hero_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.disabled_hero_id)
  return _internal_disabled_hero_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::_internal_mutable_disabled_hero_id() {
  return &_impl_.disabled_hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.disabled_hero_id)
  return _internal_mutable_disabled_hero_id();
}

// repeated uint32 enabled_hero_id = 22;
inline int CSODOTALobbyMember::_internal_enabled_hero_id_size() const {
  return _impl_.enabled_hero_id_.size();
}
inline int CSODOTALobbyMember::enabled_hero_id_size() const {
  return _internal_enabled_hero_id_size();
}
inline void CSODOTALobbyMember::clear_enabled_hero_id() {
  _impl_.enabled_hero_id_.Clear();
}
inline uint32_t CSODOTALobbyMember::_internal_enabled_hero_id(int index) const {
  return _impl_.enabled_hero_id_.Get(index);
}
inline uint32_t CSODOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.enabled_hero_id)
  return _internal_enabled_hero_id(index);
}
inline void CSODOTALobbyMember::set_enabled_hero_id(int index, uint32_t value) {
  _impl_.enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.enabled_hero_id)
}
inline void CSODOTALobbyMember::_internal_add_enabled_hero_id(uint32_t value) {
  _impl_.enabled_hero_id_.Add(value);
}
inline void CSODOTALobbyMember::add_enabled_hero_id(uint32_t value) {
  _internal_add_enabled_hero_id(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.enabled_hero_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::_internal_enabled_hero_id() const {
  return _impl_.enabled_hero_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.enabled_hero_id)
  return _internal_enabled_hero_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::_internal_mutable_enabled_hero_id() {
  return &_impl_.enabled_hero_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.enabled_hero_id)
  return _internal_mutable_enabled_hero_id();
}

// optional .DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CSODOTALobbyMember::_internal_has_coach_team() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_coach_team() const {
  return _internal_has_coach_team();
}
inline void CSODOTALobbyMember::clear_coach_team() {
  _impl_.coach_team_ = 5;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_coach_team() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.coach_team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coach_team)
  return _internal_coach_team();
}
inline void CSODOTALobbyMember::_internal_set_coach_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.coach_team_ = value;
}
inline void CSODOTALobbyMember::set_coach_team(::DOTA_GC_TEAM value) {
  _internal_set_coach_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coach_team)
}

// repeated uint32 coached_account_ids = 53;
inline int CSODOTALobbyMember::_internal_coached_account_ids_size() const {
  return _impl_.coached_account_ids_.size();
}
inline int CSODOTALobbyMember::coached_account_ids_size() const {
  return _internal_coached_account_ids_size();
}
inline void CSODOTALobbyMember::clear_coached_account_ids() {
  _impl_.coached_account_ids_.Clear();
}
inline uint32_t CSODOTALobbyMember::_internal_coached_account_ids(int index) const {
  return _impl_.coached_account_ids_.Get(index);
}
inline uint32_t CSODOTALobbyMember::coached_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coached_account_ids)
  return _internal_coached_account_ids(index);
}
inline void CSODOTALobbyMember::set_coached_account_ids(int index, uint32_t value) {
  _impl_.coached_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coached_account_ids)
}
inline void CSODOTALobbyMember::_internal_add_coached_account_ids(uint32_t value) {
  _impl_.coached_account_ids_.Add(value);
}
inline void CSODOTALobbyMember::add_coached_account_ids(uint32_t value) {
  _internal_add_coached_account_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.coached_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::_internal_coached_account_ids() const {
  return _impl_.coached_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::coached_account_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.coached_account_ids)
  return _internal_coached_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::_internal_mutable_coached_account_ids() {
  return &_impl_.coached_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::mutable_coached_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.coached_account_ids)
  return _internal_mutable_coached_account_ids();
}

// optional uint32 coach_rating = 42;
inline bool CSODOTALobbyMember::_internal_has_coach_rating() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_coach_rating() const {
  return _internal_has_coach_rating();
}
inline void CSODOTALobbyMember::clear_coach_rating() {
  _impl_.coach_rating_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline uint32_t CSODOTALobbyMember::_internal_coach_rating() const {
  return _impl_.coach_rating_;
}
inline uint32_t CSODOTALobbyMember::coach_rating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.coach_rating)
  return _internal_coach_rating();
}
inline void CSODOTALobbyMember::_internal_set_coach_rating(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.coach_rating_ = value;
}
inline void CSODOTALobbyMember::set_coach_rating(uint32_t value) {
  _internal_set_coach_rating(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.coach_rating)
}

// optional uint32 pwrd_cyber_cafe_id = 24;
inline bool CSODOTALobbyMember::_internal_has_pwrd_cyber_cafe_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_pwrd_cyber_cafe_id() const {
  return _internal_has_pwrd_cyber_cafe_id();
}
inline void CSODOTALobbyMember::clear_pwrd_cyber_cafe_id() {
  _impl_.pwrd_cyber_cafe_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CSODOTALobbyMember::_internal_pwrd_cyber_cafe_id() const {
  return _impl_.pwrd_cyber_cafe_id_;
}
inline uint32_t CSODOTALobbyMember::pwrd_cyber_cafe_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pwrd_cyber_cafe_id)
  return _internal_pwrd_cyber_cafe_id();
}
inline void CSODOTALobbyMember::_internal_set_pwrd_cyber_cafe_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.pwrd_cyber_cafe_id_ = value;
}
inline void CSODOTALobbyMember::set_pwrd_cyber_cafe_id(uint32_t value) {
  _internal_set_pwrd_cyber_cafe_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.pwrd_cyber_cafe_id)
}

// optional string pwrd_cyber_cafe_name = 25;
inline bool CSODOTALobbyMember::_internal_has_pwrd_cyber_cafe_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_pwrd_cyber_cafe_name() const {
  return _internal_has_pwrd_cyber_cafe_name();
}
inline void CSODOTALobbyMember::clear_pwrd_cyber_cafe_name() {
  _impl_.pwrd_cyber_cafe_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSODOTALobbyMember::pwrd_cyber_cafe_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  return _internal_pwrd_cyber_cafe_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobbyMember::set_pwrd_cyber_cafe_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.pwrd_cyber_cafe_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}
inline std::string* CSODOTALobbyMember::mutable_pwrd_cyber_cafe_name() {
  std::string* _s = _internal_mutable_pwrd_cyber_cafe_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  return _s;
}
inline const std::string& CSODOTALobbyMember::_internal_pwrd_cyber_cafe_name() const {
  return _impl_.pwrd_cyber_cafe_name_.Get();
}
inline void CSODOTALobbyMember::_internal_set_pwrd_cyber_cafe_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.pwrd_cyber_cafe_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobbyMember::_internal_mutable_pwrd_cyber_cafe_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.pwrd_cyber_cafe_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobbyMember::release_pwrd_cyber_cafe_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobbyMember.pwrd_cyber_cafe_name)
  if (!_internal_has_pwrd_cyber_cafe_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.pwrd_cyber_cafe_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwrd_cyber_cafe_name_.IsDefault()) {
    _impl_.pwrd_cyber_cafe_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobbyMember::set_allocated_pwrd_cyber_cafe_name(std::string* pwrd_cyber_cafe_name) {
  if (pwrd_cyber_cafe_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pwrd_cyber_cafe_name_.SetAllocated(pwrd_cyber_cafe_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pwrd_cyber_cafe_name_.IsDefault()) {
    _impl_.pwrd_cyber_cafe_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobbyMember.pwrd_cyber_cafe_name)
}

// repeated fixed32 disabled_random_hero_bits = 41;
inline int CSODOTALobbyMember::_internal_disabled_random_hero_bits_size() const {
  return _impl_.disabled_random_hero_bits_.size();
}
inline int CSODOTALobbyMember::disabled_random_hero_bits_size() const {
  return _internal_disabled_random_hero_bits_size();
}
inline void CSODOTALobbyMember::clear_disabled_random_hero_bits() {
  _impl_.disabled_random_hero_bits_.Clear();
}
inline uint32_t CSODOTALobbyMember::_internal_disabled_random_hero_bits(int index) const {
  return _impl_.disabled_random_hero_bits_.Get(index);
}
inline uint32_t CSODOTALobbyMember::disabled_random_hero_bits(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_disabled_random_hero_bits(index);
}
inline void CSODOTALobbyMember::set_disabled_random_hero_bits(int index, uint32_t value) {
  _impl_.disabled_random_hero_bits_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.disabled_random_hero_bits)
}
inline void CSODOTALobbyMember::_internal_add_disabled_random_hero_bits(uint32_t value) {
  _impl_.disabled_random_hero_bits_.Add(value);
}
inline void CSODOTALobbyMember::add_disabled_random_hero_bits(uint32_t value) {
  _internal_add_disabled_random_hero_bits(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.disabled_random_hero_bits)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::_internal_disabled_random_hero_bits() const {
  return _impl_.disabled_random_hero_bits_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::disabled_random_hero_bits() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_disabled_random_hero_bits();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::_internal_mutable_disabled_random_hero_bits() {
  return &_impl_.disabled_random_hero_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::mutable_disabled_random_hero_bits() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.disabled_random_hero_bits)
  return _internal_mutable_disabled_random_hero_bits();
}

// optional sint32 rank_change = 29;
inline bool CSODOTALobbyMember::_internal_has_rank_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CSODOTALobbyMember::clear_rank_change() {
  _impl_.rank_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t CSODOTALobbyMember::_internal_rank_change() const {
  return _impl_.rank_change_;
}
inline int32_t CSODOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_change)
  return _internal_rank_change();
}
inline void CSODOTALobbyMember::_internal_set_rank_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.rank_change_ = value;
}
inline void CSODOTALobbyMember::set_rank_change(int32_t value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
inline bool CSODOTALobbyMember::_internal_has_cameraman() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_cameraman() const {
  return _internal_has_cameraman();
}
inline void CSODOTALobbyMember::clear_cameraman() {
  _impl_.cameraman_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool CSODOTALobbyMember::_internal_cameraman() const {
  return _impl_.cameraman_;
}
inline bool CSODOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.cameraman)
  return _internal_cameraman();
}
inline void CSODOTALobbyMember::_internal_set_cameraman(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.cameraman_ = value;
}
inline void CSODOTALobbyMember::set_cameraman(bool value) {
  _internal_set_cameraman(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
inline int CSODOTALobbyMember::_internal_custom_game_product_ids_size() const {
  return _impl_.custom_game_product_ids_.size();
}
inline int CSODOTALobbyMember::custom_game_product_ids_size() const {
  return _internal_custom_game_product_ids_size();
}
inline void CSODOTALobbyMember::clear_custom_game_product_ids() {
  _impl_.custom_game_product_ids_.Clear();
}
inline uint32_t CSODOTALobbyMember::_internal_custom_game_product_ids(int index) const {
  return _impl_.custom_game_product_ids_.Get(index);
}
inline uint32_t CSODOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_custom_game_product_ids(index);
}
inline void CSODOTALobbyMember::set_custom_game_product_ids(int index, uint32_t value) {
  _impl_.custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.custom_game_product_ids)
}
inline void CSODOTALobbyMember::_internal_add_custom_game_product_ids(uint32_t value) {
  _impl_.custom_game_product_ids_.Add(value);
}
inline void CSODOTALobbyMember::add_custom_game_product_ids(uint32_t value) {
  _internal_add_custom_game_product_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.custom_game_product_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::_internal_custom_game_product_ids() const {
  return _impl_.custom_game_product_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_custom_game_product_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::_internal_mutable_custom_game_product_ids() {
  return &_impl_.custom_game_product_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.custom_game_product_ids)
  return _internal_mutable_custom_game_product_ids();
}

// optional .MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
inline bool CSODOTALobbyMember::_internal_has_search_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_search_match_type() const {
  return _internal_has_search_match_type();
}
inline void CSODOTALobbyMember::clear_search_match_type() {
  _impl_.search_match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::MatchType CSODOTALobbyMember::_internal_search_match_type() const {
  return static_cast< ::MatchType >(_impl_.search_match_type_);
}
inline ::MatchType CSODOTALobbyMember::search_match_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.search_match_type)
  return _internal_search_match_type();
}
inline void CSODOTALobbyMember::_internal_set_search_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.search_match_type_ = value;
}
inline void CSODOTALobbyMember::set_search_match_type(::MatchType value) {
  _internal_set_search_match_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.search_match_type)
}

// optional uint64 favorite_team_packed = 35;
inline bool CSODOTALobbyMember::_internal_has_favorite_team_packed() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_favorite_team_packed() const {
  return _internal_has_favorite_team_packed();
}
inline void CSODOTALobbyMember::clear_favorite_team_packed() {
  _impl_.favorite_team_packed_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint64_t CSODOTALobbyMember::_internal_favorite_team_packed() const {
  return _impl_.favorite_team_packed_;
}
inline uint64_t CSODOTALobbyMember::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.favorite_team_packed)
  return _internal_favorite_team_packed();
}
inline void CSODOTALobbyMember::_internal_set_favorite_team_packed(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.favorite_team_packed_ = value;
}
inline void CSODOTALobbyMember::set_favorite_team_packed(uint64_t value) {
  _internal_set_favorite_team_packed(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.favorite_team_packed)
}

// optional bool is_plus_subscriber = 36;
inline bool CSODOTALobbyMember::_internal_has_is_plus_subscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CSODOTALobbyMember::clear_is_plus_subscriber() {
  _impl_.is_plus_subscriber_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool CSODOTALobbyMember::_internal_is_plus_subscriber() const {
  return _impl_.is_plus_subscriber_;
}
inline bool CSODOTALobbyMember::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CSODOTALobbyMember::_internal_set_is_plus_subscriber(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.is_plus_subscriber_ = value;
}
inline void CSODOTALobbyMember::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.is_plus_subscriber)
}

// optional uint32 lane_selection_flags = 38;
inline bool CSODOTALobbyMember::_internal_has_lane_selection_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CSODOTALobbyMember::clear_lane_selection_flags() {
  _impl_.lane_selection_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CSODOTALobbyMember::_internal_lane_selection_flags() const {
  return _impl_.lane_selection_flags_;
}
inline uint32_t CSODOTALobbyMember::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CSODOTALobbyMember::_internal_set_lane_selection_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.lane_selection_flags_ = value;
}
inline void CSODOTALobbyMember::set_lane_selection_flags(uint32_t value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.lane_selection_flags)
}

// optional bool can_earn_rewards = 39;
inline bool CSODOTALobbyMember::_internal_has_can_earn_rewards() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_can_earn_rewards() const {
  return _internal_has_can_earn_rewards();
}
inline void CSODOTALobbyMember::clear_can_earn_rewards() {
  _impl_.can_earn_rewards_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool CSODOTALobbyMember::_internal_can_earn_rewards() const {
  return _impl_.can_earn_rewards_;
}
inline bool CSODOTALobbyMember::can_earn_rewards() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.can_earn_rewards)
  return _internal_can_earn_rewards();
}
inline void CSODOTALobbyMember::_internal_set_can_earn_rewards(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.can_earn_rewards_ = value;
}
inline void CSODOTALobbyMember::set_can_earn_rewards(bool value) {
  _internal_set_can_earn_rewards(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.can_earn_rewards)
}

// optional .DOTA_GC_TEAM live_spectator_team = 40 [default = DOTA_GC_TEAM_NOTEAM];
inline bool CSODOTALobbyMember::_internal_has_live_spectator_team() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_live_spectator_team() const {
  return _internal_has_live_spectator_team();
}
inline void CSODOTALobbyMember::clear_live_spectator_team() {
  _impl_.live_spectator_team_ = 5;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::_internal_live_spectator_team() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.live_spectator_team_);
}
inline ::DOTA_GC_TEAM CSODOTALobbyMember::live_spectator_team() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.live_spectator_team)
  return _internal_live_spectator_team();
}
inline void CSODOTALobbyMember::_internal_set_live_spectator_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.live_spectator_team_ = value;
}
inline void CSODOTALobbyMember::set_live_spectator_team(::DOTA_GC_TEAM value) {
  _internal_set_live_spectator_team(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.live_spectator_team)
}

// optional bool was_mvp_last_game = 43;
inline bool CSODOTALobbyMember::_internal_has_was_mvp_last_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_was_mvp_last_game() const {
  return _internal_has_was_mvp_last_game();
}
inline void CSODOTALobbyMember::clear_was_mvp_last_game() {
  _impl_.was_mvp_last_game_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool CSODOTALobbyMember::_internal_was_mvp_last_game() const {
  return _impl_.was_mvp_last_game_;
}
inline bool CSODOTALobbyMember::was_mvp_last_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.was_mvp_last_game)
  return _internal_was_mvp_last_game();
}
inline void CSODOTALobbyMember::_internal_set_was_mvp_last_game(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.was_mvp_last_game_ = value;
}
inline void CSODOTALobbyMember::set_was_mvp_last_game(bool value) {
  _internal_set_was_mvp_last_game(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.was_mvp_last_game)
}

// repeated .CMsgPendingEventAward pending_awards = 44;
inline int CSODOTALobbyMember::_internal_pending_awards_size() const {
  return _impl_.pending_awards_.size();
}
inline int CSODOTALobbyMember::pending_awards_size() const {
  return _internal_pending_awards_size();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::mutable_pending_awards(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pending_awards)
  return _impl_.pending_awards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
CSODOTALobbyMember::mutable_pending_awards() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.pending_awards)
  return &_impl_.pending_awards_;
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::_internal_pending_awards(int index) const {
  return _impl_.pending_awards_.Get(index);
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::pending_awards(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pending_awards)
  return _internal_pending_awards(index);
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::_internal_add_pending_awards() {
  return _impl_.pending_awards_.Add();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::add_pending_awards() {
  ::CMsgPendingEventAward* _add = _internal_add_pending_awards();
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.pending_awards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
CSODOTALobbyMember::pending_awards() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.pending_awards)
  return _impl_.pending_awards_;
}

// repeated .CMsgPendingEventAward pending_awards_on_victory = 45;
inline int CSODOTALobbyMember::_internal_pending_awards_on_victory_size() const {
  return _impl_.pending_awards_on_victory_.size();
}
inline int CSODOTALobbyMember::pending_awards_on_victory_size() const {
  return _internal_pending_awards_on_victory_size();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::mutable_pending_awards_on_victory(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobbyMember.pending_awards_on_victory)
  return _impl_.pending_awards_on_victory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >*
CSODOTALobbyMember::mutable_pending_awards_on_victory() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobbyMember.pending_awards_on_victory)
  return &_impl_.pending_awards_on_victory_;
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::_internal_pending_awards_on_victory(int index) const {
  return _impl_.pending_awards_on_victory_.Get(index);
}
inline const ::CMsgPendingEventAward& CSODOTALobbyMember::pending_awards_on_victory(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.pending_awards_on_victory)
  return _internal_pending_awards_on_victory(index);
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::_internal_add_pending_awards_on_victory() {
  return _impl_.pending_awards_on_victory_.Add();
}
inline ::CMsgPendingEventAward* CSODOTALobbyMember::add_pending_awards_on_victory() {
  ::CMsgPendingEventAward* _add = _internal_add_pending_awards_on_victory();
  // @@protoc_insertion_point(field_add:CSODOTALobbyMember.pending_awards_on_victory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPendingEventAward >&
CSODOTALobbyMember::pending_awards_on_victory() const {
  // @@protoc_insertion_point(field_list:CSODOTALobbyMember.pending_awards_on_victory)
  return _impl_.pending_awards_on_victory_;
}

// optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
inline bool CSODOTALobbyMember::_internal_has_rank_mmr_boost_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_mmr_boost_type() const {
  return _internal_has_rank_mmr_boost_type();
}
inline void CSODOTALobbyMember::clear_rank_mmr_boost_type() {
  _impl_.rank_mmr_boost_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::EDOTAMMRBoostType CSODOTALobbyMember::_internal_rank_mmr_boost_type() const {
  return static_cast< ::EDOTAMMRBoostType >(_impl_.rank_mmr_boost_type_);
}
inline ::EDOTAMMRBoostType CSODOTALobbyMember::rank_mmr_boost_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_mmr_boost_type)
  return _internal_rank_mmr_boost_type();
}
inline void CSODOTALobbyMember::_internal_set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  assert(::EDOTAMMRBoostType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.rank_mmr_boost_type_ = value;
}
inline void CSODOTALobbyMember::set_rank_mmr_boost_type(::EDOTAMMRBoostType value) {
  _internal_set_rank_mmr_boost_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_mmr_boost_type)
}

// optional sint32 queue_point_adjustment = 47;
inline bool CSODOTALobbyMember::_internal_has_queue_point_adjustment() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_queue_point_adjustment() const {
  return _internal_has_queue_point_adjustment();
}
inline void CSODOTALobbyMember::clear_queue_point_adjustment() {
  _impl_.queue_point_adjustment_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline int32_t CSODOTALobbyMember::_internal_queue_point_adjustment() const {
  return _impl_.queue_point_adjustment_;
}
inline int32_t CSODOTALobbyMember::queue_point_adjustment() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.queue_point_adjustment)
  return _internal_queue_point_adjustment();
}
inline void CSODOTALobbyMember::_internal_set_queue_point_adjustment(int32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.queue_point_adjustment_ = value;
}
inline void CSODOTALobbyMember::set_queue_point_adjustment(int32_t value) {
  _internal_set_queue_point_adjustment(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.queue_point_adjustment)
}

// optional int32 rank_tier = 48;
inline bool CSODOTALobbyMember::_internal_has_rank_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_rank_tier() const {
  return _internal_has_rank_tier();
}
inline void CSODOTALobbyMember::clear_rank_tier() {
  _impl_.rank_tier_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline int32_t CSODOTALobbyMember::_internal_rank_tier() const {
  return _impl_.rank_tier_;
}
inline int32_t CSODOTALobbyMember::rank_tier() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.rank_tier)
  return _internal_rank_tier();
}
inline void CSODOTALobbyMember::_internal_set_rank_tier(int32_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.rank_tier_ = value;
}
inline void CSODOTALobbyMember::set_rank_tier(int32_t value) {
  _internal_set_rank_tier(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.rank_tier)
}

// optional uint32 title = 50;
inline bool CSODOTALobbyMember::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_title() const {
  return _internal_has_title();
}
inline void CSODOTALobbyMember::clear_title() {
  _impl_.title_ = 0u;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint32_t CSODOTALobbyMember::_internal_title() const {
  return _impl_.title_;
}
inline uint32_t CSODOTALobbyMember::title() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.title)
  return _internal_title();
}
inline void CSODOTALobbyMember::_internal_set_title(uint32_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.title_ = value;
}
inline void CSODOTALobbyMember::set_title(uint32_t value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.title)
}

// optional uint32 guild_id = 51;
inline bool CSODOTALobbyMember::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CSODOTALobbyMember::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CSODOTALobbyMember::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CSODOTALobbyMember::guild_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.guild_id)
  return _internal_guild_id();
}
inline void CSODOTALobbyMember::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.guild_id_ = value;
}
inline void CSODOTALobbyMember::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.guild_id)
}

// optional uint32 reports_available = 52;
inline bool CSODOTALobbyMember::_internal_has_reports_available() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_reports_available() const {
  return _internal_has_reports_available();
}
inline void CSODOTALobbyMember::clear_reports_available() {
  _impl_.reports_available_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CSODOTALobbyMember::_internal_reports_available() const {
  return _impl_.reports_available_;
}
inline uint32_t CSODOTALobbyMember::reports_available() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.reports_available)
  return _internal_reports_available();
}
inline void CSODOTALobbyMember::_internal_set_reports_available(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.reports_available_ = value;
}
inline void CSODOTALobbyMember::set_reports_available(uint32_t value) {
  _internal_set_reports_available(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.reports_available)
}

// optional bool is_steam_china = 54;
inline bool CSODOTALobbyMember::_internal_has_is_steam_china() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_is_steam_china() const {
  return _internal_has_is_steam_china();
}
inline void CSODOTALobbyMember::clear_is_steam_china() {
  _impl_.is_steam_china_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool CSODOTALobbyMember::_internal_is_steam_china() const {
  return _impl_.is_steam_china_;
}
inline bool CSODOTALobbyMember::is_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.is_steam_china)
  return _internal_is_steam_china();
}
inline void CSODOTALobbyMember::_internal_set_is_steam_china(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.is_steam_china_ = value;
}
inline void CSODOTALobbyMember::set_is_steam_china(bool value) {
  _internal_set_is_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.is_steam_china)
}

// optional uint32 live_spectator_account_id = 55;
inline bool CSODOTALobbyMember::_internal_has_live_spectator_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_live_spectator_account_id() const {
  return _internal_has_live_spectator_account_id();
}
inline void CSODOTALobbyMember::clear_live_spectator_account_id() {
  _impl_.live_spectator_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CSODOTALobbyMember::_internal_live_spectator_account_id() const {
  return _impl_.live_spectator_account_id_;
}
inline uint32_t CSODOTALobbyMember::live_spectator_account_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.live_spectator_account_id)
  return _internal_live_spectator_account_id();
}
inline void CSODOTALobbyMember::_internal_set_live_spectator_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.live_spectator_account_id_ = value;
}
inline void CSODOTALobbyMember::set_live_spectator_account_id(uint32_t value) {
  _internal_set_live_spectator_account_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.live_spectator_account_id)
}

// optional uint32 comms_reports_available = 56;
inline bool CSODOTALobbyMember::_internal_has_comms_reports_available() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobbyMember::has_comms_reports_available() const {
  return _internal_has_comms_reports_available();
}
inline void CSODOTALobbyMember::clear_comms_reports_available() {
  _impl_.comms_reports_available_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CSODOTALobbyMember::_internal_comms_reports_available() const {
  return _impl_.comms_reports_available_;
}
inline uint32_t CSODOTALobbyMember::comms_reports_available() const {
  // @@protoc_insertion_point(field_get:CSODOTALobbyMember.comms_reports_available)
  return _internal_comms_reports_available();
}
inline void CSODOTALobbyMember::_internal_set_comms_reports_available(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.comms_reports_available_ = value;
}
inline void CSODOTALobbyMember::set_comms_reports_available(uint32_t value) {
  _internal_set_comms_reports_available(value);
  // @@protoc_insertion_point(field_set:CSODOTALobbyMember.comms_reports_available)
}

// -------------------------------------------------------------------

// CSODOTAServerLobbyMember

// -------------------------------------------------------------------

// CSODOTAStaticLobbyMember

// -------------------------------------------------------------------

// CSODOTAServerStaticLobbyMember

// -------------------------------------------------------------------

// CLobbyTeamDetails

// optional string team_name = 1;
inline bool CLobbyTeamDetails::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_name() const {
  return _internal_has_team_name();
}
inline void CLobbyTeamDetails::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyTeamDetails::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_name)
}
inline std::string* CLobbyTeamDetails::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_name)
  return _s;
}
inline const std::string& CLobbyTeamDetails::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyTeamDetails::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
inline bool CLobbyTeamDetails::_internal_has_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CLobbyTeamDetails::clear_team_tag() {
  _impl_.team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyTeamDetails::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_tag)
}
inline std::string* CLobbyTeamDetails::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_tag)
  return _s;
}
inline const std::string& CLobbyTeamDetails::_internal_team_tag() const {
  return _impl_.team_tag_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_tag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyTeamDetails::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_tag_.SetAllocated(team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
inline bool CLobbyTeamDetails::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_id() const {
  return _internal_has_team_id();
}
inline void CLobbyTeamDetails::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CLobbyTeamDetails::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_id)
  return _internal_team_id();
}
inline void CLobbyTeamDetails::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.team_id_ = value;
}
inline void CLobbyTeamDetails::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
inline bool CLobbyTeamDetails::_internal_has_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CLobbyTeamDetails::clear_team_logo() {
  _impl_.team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CLobbyTeamDetails::_internal_team_logo() const {
  return _impl_.team_logo_;
}
inline uint64_t CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo)
  return _internal_team_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_logo(uint64_t value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
inline bool CLobbyTeamDetails::_internal_has_team_base_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_base_logo() const {
  return _internal_has_team_base_logo();
}
inline void CLobbyTeamDetails::clear_team_base_logo() {
  _impl_.team_base_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CLobbyTeamDetails::_internal_team_base_logo() const {
  return _impl_.team_base_logo_;
}
inline uint64_t CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_base_logo)
  return _internal_team_base_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_base_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_base_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_base_logo(uint64_t value) {
  _internal_set_team_base_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
inline bool CLobbyTeamDetails::_internal_has_team_banner_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_banner_logo() const {
  return _internal_has_team_banner_logo();
}
inline void CLobbyTeamDetails::clear_team_banner_logo() {
  _impl_.team_banner_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint64_t CLobbyTeamDetails::_internal_team_banner_logo() const {
  return _impl_.team_banner_logo_;
}
inline uint64_t CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_banner_logo)
  return _internal_team_banner_logo();
}
inline void CLobbyTeamDetails::_internal_set_team_banner_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_banner_logo_ = value;
}
inline void CLobbyTeamDetails::set_team_banner_logo(uint64_t value) {
  _internal_set_team_banner_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
inline bool CLobbyTeamDetails::_internal_has_team_complete() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_complete() const {
  return _internal_has_team_complete();
}
inline void CLobbyTeamDetails::clear_team_complete() {
  _impl_.team_complete_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CLobbyTeamDetails::_internal_team_complete() const {
  return _impl_.team_complete_;
}
inline bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_complete)
  return _internal_team_complete();
}
inline void CLobbyTeamDetails::_internal_set_team_complete(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.team_complete_ = value;
}
inline void CLobbyTeamDetails::set_team_complete(bool value) {
  _internal_set_team_complete(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_complete)
}

// optional uint32 rank = 15;
inline bool CLobbyTeamDetails::_internal_has_rank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_rank() const {
  return _internal_has_rank();
}
inline void CLobbyTeamDetails::clear_rank() {
  _impl_.rank_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CLobbyTeamDetails::_internal_rank() const {
  return _impl_.rank_;
}
inline uint32_t CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank)
  return _internal_rank();
}
inline void CLobbyTeamDetails::_internal_set_rank(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.rank_ = value;
}
inline void CLobbyTeamDetails::set_rank(uint32_t value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
inline bool CLobbyTeamDetails::_internal_has_rank_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void CLobbyTeamDetails::clear_rank_change() {
  _impl_.rank_change_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CLobbyTeamDetails::_internal_rank_change() const {
  return _impl_.rank_change_;
}
inline int32_t CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.rank_change)
  return _internal_rank_change();
}
inline void CLobbyTeamDetails::_internal_set_rank_change(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.rank_change_ = value;
}
inline void CLobbyTeamDetails::set_rank_change(int32_t value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
inline bool CLobbyTeamDetails::_internal_has_is_home_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_is_home_team() const {
  return _internal_has_is_home_team();
}
inline void CLobbyTeamDetails::clear_is_home_team() {
  _impl_.is_home_team_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool CLobbyTeamDetails::_internal_is_home_team() const {
  return _impl_.is_home_team_;
}
inline bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_home_team)
  return _internal_is_home_team();
}
inline void CLobbyTeamDetails::_internal_set_is_home_team(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.is_home_team_ = value;
}
inline void CLobbyTeamDetails::set_is_home_team(bool value) {
  _internal_set_is_home_team(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_home_team)
}

// optional bool is_challenge_match = 18;
inline bool CLobbyTeamDetails::_internal_has_is_challenge_match() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_is_challenge_match() const {
  return _internal_has_is_challenge_match();
}
inline void CLobbyTeamDetails::clear_is_challenge_match() {
  _impl_.is_challenge_match_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool CLobbyTeamDetails::_internal_is_challenge_match() const {
  return _impl_.is_challenge_match_;
}
inline bool CLobbyTeamDetails::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.is_challenge_match)
  return _internal_is_challenge_match();
}
inline void CLobbyTeamDetails::_internal_set_is_challenge_match(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.is_challenge_match_ = value;
}
inline void CLobbyTeamDetails::set_is_challenge_match(bool value) {
  _internal_set_is_challenge_match(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.is_challenge_match)
}

// optional uint64 challenge_match_token_account = 19;
inline bool CLobbyTeamDetails::_internal_has_challenge_match_token_account() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_challenge_match_token_account() const {
  return _internal_has_challenge_match_token_account();
}
inline void CLobbyTeamDetails::clear_challenge_match_token_account() {
  _impl_.challenge_match_token_account_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint64_t CLobbyTeamDetails::_internal_challenge_match_token_account() const {
  return _impl_.challenge_match_token_account_;
}
inline uint64_t CLobbyTeamDetails::challenge_match_token_account() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.challenge_match_token_account)
  return _internal_challenge_match_token_account();
}
inline void CLobbyTeamDetails::_internal_set_challenge_match_token_account(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.challenge_match_token_account_ = value;
}
inline void CLobbyTeamDetails::set_challenge_match_token_account(uint64_t value) {
  _internal_set_challenge_match_token_account(value);
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.challenge_match_token_account)
}

// optional string team_logo_url = 20;
inline bool CLobbyTeamDetails::_internal_has_team_logo_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_logo_url() const {
  return _internal_has_team_logo_url();
}
inline void CLobbyTeamDetails::clear_team_logo_url() {
  _impl_.team_logo_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CLobbyTeamDetails::team_logo_url() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_logo_url)
  return _internal_team_logo_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyTeamDetails::set_team_logo_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.team_logo_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_logo_url)
}
inline std::string* CLobbyTeamDetails::mutable_team_logo_url() {
  std::string* _s = _internal_mutable_team_logo_url();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_logo_url)
  return _s;
}
inline const std::string& CLobbyTeamDetails::_internal_team_logo_url() const {
  return _impl_.team_logo_url_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_logo_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_logo_url_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_logo_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.team_logo_url_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::release_team_logo_url() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_logo_url)
  if (!_internal_has_team_logo_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.team_logo_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyTeamDetails::set_allocated_team_logo_url(std::string* team_logo_url) {
  if (team_logo_url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.team_logo_url_.SetAllocated(team_logo_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_logo_url_.IsDefault()) {
    _impl_.team_logo_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_logo_url)
}

// optional string team_abbreviation = 21;
inline bool CLobbyTeamDetails::_internal_has_team_abbreviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyTeamDetails::has_team_abbreviation() const {
  return _internal_has_team_abbreviation();
}
inline void CLobbyTeamDetails::clear_team_abbreviation() {
  _impl_.team_abbreviation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CLobbyTeamDetails::team_abbreviation() const {
  // @@protoc_insertion_point(field_get:CLobbyTeamDetails.team_abbreviation)
  return _internal_team_abbreviation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyTeamDetails::set_team_abbreviation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.team_abbreviation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyTeamDetails.team_abbreviation)
}
inline std::string* CLobbyTeamDetails::mutable_team_abbreviation() {
  std::string* _s = _internal_mutable_team_abbreviation();
  // @@protoc_insertion_point(field_mutable:CLobbyTeamDetails.team_abbreviation)
  return _s;
}
inline const std::string& CLobbyTeamDetails::_internal_team_abbreviation() const {
  return _impl_.team_abbreviation_.Get();
}
inline void CLobbyTeamDetails::_internal_set_team_abbreviation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_abbreviation_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::_internal_mutable_team_abbreviation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.team_abbreviation_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyTeamDetails::release_team_abbreviation() {
  // @@protoc_insertion_point(field_release:CLobbyTeamDetails.team_abbreviation)
  if (!_internal_has_team_abbreviation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.team_abbreviation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_abbreviation_.IsDefault()) {
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyTeamDetails::set_allocated_team_abbreviation(std::string* team_abbreviation) {
  if (team_abbreviation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.team_abbreviation_.SetAllocated(team_abbreviation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_abbreviation_.IsDefault()) {
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyTeamDetails.team_abbreviation)
}

// -------------------------------------------------------------------

// CLobbyGuildDetails

// optional uint32 guild_id = 1;
inline bool CLobbyGuildDetails::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CLobbyGuildDetails::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CLobbyGuildDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_id)
  return _internal_guild_id();
}
inline void CLobbyGuildDetails::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.guild_id_ = value;
}
inline void CLobbyGuildDetails::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_id)
}

// optional uint32 guild_primary_color = 2;
inline bool CLobbyGuildDetails::_internal_has_guild_primary_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_primary_color() const {
  return _internal_has_guild_primary_color();
}
inline void CLobbyGuildDetails::clear_guild_primary_color() {
  _impl_.guild_primary_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_primary_color() const {
  return _impl_.guild_primary_color_;
}
inline uint32_t CLobbyGuildDetails::guild_primary_color() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_primary_color)
  return _internal_guild_primary_color();
}
inline void CLobbyGuildDetails::_internal_set_guild_primary_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.guild_primary_color_ = value;
}
inline void CLobbyGuildDetails::set_guild_primary_color(uint32_t value) {
  _internal_set_guild_primary_color(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_primary_color)
}

// optional uint32 guild_secondary_color = 3;
inline bool CLobbyGuildDetails::_internal_has_guild_secondary_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_secondary_color() const {
  return _internal_has_guild_secondary_color();
}
inline void CLobbyGuildDetails::clear_guild_secondary_color() {
  _impl_.guild_secondary_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_secondary_color() const {
  return _impl_.guild_secondary_color_;
}
inline uint32_t CLobbyGuildDetails::guild_secondary_color() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_secondary_color)
  return _internal_guild_secondary_color();
}
inline void CLobbyGuildDetails::_internal_set_guild_secondary_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.guild_secondary_color_ = value;
}
inline void CLobbyGuildDetails::set_guild_secondary_color(uint32_t value) {
  _internal_set_guild_secondary_color(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_secondary_color)
}

// optional uint32 guild_pattern = 4;
inline bool CLobbyGuildDetails::_internal_has_guild_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_pattern() const {
  return _internal_has_guild_pattern();
}
inline void CLobbyGuildDetails::clear_guild_pattern() {
  _impl_.guild_pattern_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_pattern() const {
  return _impl_.guild_pattern_;
}
inline uint32_t CLobbyGuildDetails::guild_pattern() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_pattern)
  return _internal_guild_pattern();
}
inline void CLobbyGuildDetails::_internal_set_guild_pattern(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.guild_pattern_ = value;
}
inline void CLobbyGuildDetails::set_guild_pattern(uint32_t value) {
  _internal_set_guild_pattern(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_pattern)
}

// optional uint64 guild_logo = 5;
inline bool CLobbyGuildDetails::_internal_has_guild_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_logo() const {
  return _internal_has_guild_logo();
}
inline void CLobbyGuildDetails::clear_guild_logo() {
  _impl_.guild_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CLobbyGuildDetails::_internal_guild_logo() const {
  return _impl_.guild_logo_;
}
inline uint64_t CLobbyGuildDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_logo)
  return _internal_guild_logo();
}
inline void CLobbyGuildDetails::_internal_set_guild_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.guild_logo_ = value;
}
inline void CLobbyGuildDetails::set_guild_logo(uint64_t value) {
  _internal_set_guild_logo(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_logo)
}

// optional uint32 guild_points = 6;
inline bool CLobbyGuildDetails::_internal_has_guild_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_points() const {
  return _internal_has_guild_points();
}
inline void CLobbyGuildDetails::clear_guild_points() {
  _impl_.guild_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_points() const {
  return _impl_.guild_points_;
}
inline uint32_t CLobbyGuildDetails::guild_points() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_points)
  return _internal_guild_points();
}
inline void CLobbyGuildDetails::_internal_set_guild_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.guild_points_ = value;
}
inline void CLobbyGuildDetails::set_guild_points(uint32_t value) {
  _internal_set_guild_points(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_points)
}

// optional uint32 guild_event = 7;
inline bool CLobbyGuildDetails::_internal_has_guild_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_event() const {
  return _internal_has_guild_event();
}
inline void CLobbyGuildDetails::clear_guild_event() {
  _impl_.guild_event_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_event() const {
  return _impl_.guild_event_;
}
inline uint32_t CLobbyGuildDetails::guild_event() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_event)
  return _internal_guild_event();
}
inline void CLobbyGuildDetails::_internal_set_guild_event(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.guild_event_ = value;
}
inline void CLobbyGuildDetails::set_guild_event(uint32_t value) {
  _internal_set_guild_event(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_event)
}

// optional uint32 guild_flags = 8;
inline bool CLobbyGuildDetails::_internal_has_guild_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_flags() const {
  return _internal_has_guild_flags();
}
inline void CLobbyGuildDetails::clear_guild_flags() {
  _impl_.guild_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_flags() const {
  return _impl_.guild_flags_;
}
inline uint32_t CLobbyGuildDetails::guild_flags() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_flags)
  return _internal_guild_flags();
}
inline void CLobbyGuildDetails::_internal_set_guild_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.guild_flags_ = value;
}
inline void CLobbyGuildDetails::set_guild_flags(uint32_t value) {
  _internal_set_guild_flags(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_flags)
}

// optional .DOTA_GC_TEAM team_for_guild = 9 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CLobbyGuildDetails::_internal_has_team_for_guild() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_team_for_guild() const {
  return _internal_has_team_for_guild();
}
inline void CLobbyGuildDetails::clear_team_for_guild() {
  _impl_.team_for_guild_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::DOTA_GC_TEAM CLobbyGuildDetails::_internal_team_for_guild() const {
  return static_cast< ::DOTA_GC_TEAM >(_impl_.team_for_guild_);
}
inline ::DOTA_GC_TEAM CLobbyGuildDetails::team_for_guild() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.team_for_guild)
  return _internal_team_for_guild();
}
inline void CLobbyGuildDetails::_internal_set_team_for_guild(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.team_for_guild_ = value;
}
inline void CLobbyGuildDetails::set_team_for_guild(::DOTA_GC_TEAM value) {
  _internal_set_team_for_guild(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.team_for_guild)
}

// optional string guild_tag = 10;
inline bool CLobbyGuildDetails::_internal_has_guild_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_tag() const {
  return _internal_has_guild_tag();
}
inline void CLobbyGuildDetails::clear_guild_tag() {
  _impl_.guild_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyGuildDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_tag)
  return _internal_guild_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyGuildDetails::set_guild_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.guild_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_tag)
}
inline std::string* CLobbyGuildDetails::mutable_guild_tag() {
  std::string* _s = _internal_mutable_guild_tag();
  // @@protoc_insertion_point(field_mutable:CLobbyGuildDetails.guild_tag)
  return _s;
}
inline const std::string& CLobbyGuildDetails::_internal_guild_tag() const {
  return _impl_.guild_tag_.Get();
}
inline void CLobbyGuildDetails::_internal_set_guild_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guild_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyGuildDetails::_internal_mutable_guild_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.guild_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyGuildDetails::release_guild_tag() {
  // @@protoc_insertion_point(field_release:CLobbyGuildDetails.guild_tag)
  if (!_internal_has_guild_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.guild_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_tag_.IsDefault()) {
    _impl_.guild_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyGuildDetails::set_allocated_guild_tag(std::string* guild_tag) {
  if (guild_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.guild_tag_.SetAllocated(guild_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.guild_tag_.IsDefault()) {
    _impl_.guild_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyGuildDetails.guild_tag)
}

// optional uint32 guild_weekly_percentile = 11;
inline bool CLobbyGuildDetails::_internal_has_guild_weekly_percentile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CLobbyGuildDetails::has_guild_weekly_percentile() const {
  return _internal_has_guild_weekly_percentile();
}
inline void CLobbyGuildDetails::clear_guild_weekly_percentile() {
  _impl_.guild_weekly_percentile_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CLobbyGuildDetails::_internal_guild_weekly_percentile() const {
  return _impl_.guild_weekly_percentile_;
}
inline uint32_t CLobbyGuildDetails::guild_weekly_percentile() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildDetails.guild_weekly_percentile)
  return _internal_guild_weekly_percentile();
}
inline void CLobbyGuildDetails::_internal_set_guild_weekly_percentile(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.guild_weekly_percentile_ = value;
}
inline void CLobbyGuildDetails::set_guild_weekly_percentile(uint32_t value) {
  _internal_set_guild_weekly_percentile(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildDetails.guild_weekly_percentile)
}

// -------------------------------------------------------------------

// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
inline bool CLobbyTimedRewardDetails::_internal_has_item_def_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return _internal_has_item_def_index();
}
inline void CLobbyTimedRewardDetails::clear_item_def_index() {
  _impl_.item_def_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_item_def_index() const {
  return _impl_.item_def_index_;
}
inline uint32_t CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.item_def_index)
  return _internal_item_def_index();
}
inline void CLobbyTimedRewardDetails::_internal_set_item_def_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.item_def_index_ = value;
}
inline void CLobbyTimedRewardDetails::set_item_def_index(uint32_t value) {
  _internal_set_item_def_index(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
inline bool CLobbyTimedRewardDetails::_internal_has_is_supply_crate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return _internal_has_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  _impl_.is_supply_crate_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_supply_crate() const {
  return _impl_.is_supply_crate_;
}
inline bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_supply_crate)
  return _internal_is_supply_crate();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_supply_crate(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_supply_crate_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  _internal_set_is_supply_crate(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
inline bool CLobbyTimedRewardDetails::_internal_has_is_timed_drop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return _internal_has_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  _impl_.is_timed_drop_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CLobbyTimedRewardDetails::_internal_is_timed_drop() const {
  return _impl_.is_timed_drop_;
}
inline bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.is_timed_drop)
  return _internal_is_timed_drop();
}
inline void CLobbyTimedRewardDetails::_internal_set_is_timed_drop(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.is_timed_drop_ = value;
}
inline void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  _internal_set_is_timed_drop(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
inline bool CLobbyTimedRewardDetails::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_account_id() const {
  return _internal_has_account_id();
}
inline void CLobbyTimedRewardDetails::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.account_id)
  return _internal_account_id();
}
inline void CLobbyTimedRewardDetails::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.account_id_ = value;
}
inline void CLobbyTimedRewardDetails::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
inline bool CLobbyTimedRewardDetails::_internal_has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyTimedRewardDetails::has_origin() const {
  return _internal_has_origin();
}
inline void CLobbyTimedRewardDetails::clear_origin() {
  _impl_.origin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CLobbyTimedRewardDetails::_internal_origin() const {
  return _impl_.origin_;
}
inline uint32_t CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:CLobbyTimedRewardDetails.origin)
  return _internal_origin();
}
inline void CLobbyTimedRewardDetails::_internal_set_origin(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.origin_ = value;
}
inline void CLobbyTimedRewardDetails::set_origin(uint32_t value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:CLobbyTimedRewardDetails.origin)
}

// -------------------------------------------------------------------

// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
inline bool CLobbyBroadcastChannelInfo::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CLobbyBroadcastChannelInfo::clear_channel_id() {
  _impl_.channel_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CLobbyBroadcastChannelInfo::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint32_t CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.channel_id)
  return _internal_channel_id();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_channel_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.channel_id_ = value;
}
inline void CLobbyBroadcastChannelInfo::set_channel_id(uint32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
inline bool CLobbyBroadcastChannelInfo::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return _internal_has_country_code();
}
inline void CLobbyBroadcastChannelInfo::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyBroadcastChannelInfo::set_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.country_code)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.country_code)
  return _s;
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_country_code() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyBroadcastChannelInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
inline bool CLobbyBroadcastChannelInfo::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_description() const {
  return _internal_has_description();
}
inline void CLobbyBroadcastChannelInfo::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyBroadcastChannelInfo::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.description)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.description)
  return _s;
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_description() const {
  return _impl_.description_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::release_description() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyBroadcastChannelInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
inline bool CLobbyBroadcastChannelInfo::_internal_has_language_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return _internal_has_language_code();
}
inline void CLobbyBroadcastChannelInfo::clear_language_code() {
  _impl_.language_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:CLobbyBroadcastChannelInfo.language_code)
  return _internal_language_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CLobbyBroadcastChannelInfo::set_language_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.language_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CLobbyBroadcastChannelInfo.language_code)
}
inline std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  std::string* _s = _internal_mutable_language_code();
  // @@protoc_insertion_point(field_mutable:CLobbyBroadcastChannelInfo.language_code)
  return _s;
}
inline const std::string& CLobbyBroadcastChannelInfo::_internal_language_code() const {
  return _impl_.language_code_.Get();
}
inline void CLobbyBroadcastChannelInfo::_internal_set_language_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.language_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::_internal_mutable_language_code() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.language_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:CLobbyBroadcastChannelInfo.language_code)
  if (!_internal_has_language_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.language_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CLobbyBroadcastChannelInfo::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.language_code_.SetAllocated(language_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.language_code_.IsDefault()) {
    _impl_.language_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CLobbyBroadcastChannelInfo.language_code)
}

// -------------------------------------------------------------------

// CLobbyGuildChallenge

// optional uint32 guild_id = 1;
inline bool CLobbyGuildChallenge::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CLobbyGuildChallenge::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CLobbyGuildChallenge::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CLobbyGuildChallenge::guild_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.guild_id)
  return _internal_guild_id();
}
inline void CLobbyGuildChallenge::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guild_id_ = value;
}
inline void CLobbyGuildChallenge::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.guild_id)
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CLobbyGuildChallenge::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_event_id() const {
  return _internal_has_event_id();
}
inline void CLobbyGuildChallenge::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CLobbyGuildChallenge::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CLobbyGuildChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.event_id)
  return _internal_event_id();
}
inline void CLobbyGuildChallenge::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CLobbyGuildChallenge::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.event_id)
}

// optional uint32 challenge_instance_id = 3;
inline bool CLobbyGuildChallenge::_internal_has_challenge_instance_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_instance_id() const {
  return _internal_has_challenge_instance_id();
}
inline void CLobbyGuildChallenge::clear_challenge_instance_id() {
  _impl_.challenge_instance_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CLobbyGuildChallenge::_internal_challenge_instance_id() const {
  return _impl_.challenge_instance_id_;
}
inline uint32_t CLobbyGuildChallenge::challenge_instance_id() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_instance_id)
  return _internal_challenge_instance_id();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_instance_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.challenge_instance_id_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_instance_id(uint32_t value) {
  _internal_set_challenge_instance_id(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_instance_id)
}

// optional uint32 challenge_parameter = 4;
inline bool CLobbyGuildChallenge::_internal_has_challenge_parameter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_parameter() const {
  return _internal_has_challenge_parameter();
}
inline void CLobbyGuildChallenge::clear_challenge_parameter() {
  _impl_.challenge_parameter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CLobbyGuildChallenge::_internal_challenge_parameter() const {
  return _impl_.challenge_parameter_;
}
inline uint32_t CLobbyGuildChallenge::challenge_parameter() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_parameter)
  return _internal_challenge_parameter();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_parameter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.challenge_parameter_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_parameter(uint32_t value) {
  _internal_set_challenge_parameter(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_parameter)
}

// optional uint32 challenge_timestamp = 5;
inline bool CLobbyGuildChallenge::_internal_has_challenge_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_timestamp() const {
  return _internal_has_challenge_timestamp();
}
inline void CLobbyGuildChallenge::clear_challenge_timestamp() {
  _impl_.challenge_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CLobbyGuildChallenge::_internal_challenge_timestamp() const {
  return _impl_.challenge_timestamp_;
}
inline uint32_t CLobbyGuildChallenge::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_timestamp)
  return _internal_challenge_timestamp();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.challenge_timestamp_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_timestamp(uint32_t value) {
  _internal_set_challenge_timestamp(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_timestamp)
}

// optional uint32 challenge_period_serial = 6;
inline bool CLobbyGuildChallenge::_internal_has_challenge_period_serial() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_period_serial() const {
  return _internal_has_challenge_period_serial();
}
inline void CLobbyGuildChallenge::clear_challenge_period_serial() {
  _impl_.challenge_period_serial_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CLobbyGuildChallenge::_internal_challenge_period_serial() const {
  return _impl_.challenge_period_serial_;
}
inline uint32_t CLobbyGuildChallenge::challenge_period_serial() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_period_serial)
  return _internal_challenge_period_serial();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_period_serial(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.challenge_period_serial_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_period_serial(uint32_t value) {
  _internal_set_challenge_period_serial(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_period_serial)
}

// optional uint32 challenge_progress_at_start = 7;
inline bool CLobbyGuildChallenge::_internal_has_challenge_progress_at_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CLobbyGuildChallenge::has_challenge_progress_at_start() const {
  return _internal_has_challenge_progress_at_start();
}
inline void CLobbyGuildChallenge::clear_challenge_progress_at_start() {
  _impl_.challenge_progress_at_start_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CLobbyGuildChallenge::_internal_challenge_progress_at_start() const {
  return _impl_.challenge_progress_at_start_;
}
inline uint32_t CLobbyGuildChallenge::challenge_progress_at_start() const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.challenge_progress_at_start)
  return _internal_challenge_progress_at_start();
}
inline void CLobbyGuildChallenge::_internal_set_challenge_progress_at_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.challenge_progress_at_start_ = value;
}
inline void CLobbyGuildChallenge::set_challenge_progress_at_start(uint32_t value) {
  _internal_set_challenge_progress_at_start(value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.challenge_progress_at_start)
}

// repeated uint32 eligible_account_ids = 8;
inline int CLobbyGuildChallenge::_internal_eligible_account_ids_size() const {
  return _impl_.eligible_account_ids_.size();
}
inline int CLobbyGuildChallenge::eligible_account_ids_size() const {
  return _internal_eligible_account_ids_size();
}
inline void CLobbyGuildChallenge::clear_eligible_account_ids() {
  _impl_.eligible_account_ids_.Clear();
}
inline uint32_t CLobbyGuildChallenge::_internal_eligible_account_ids(int index) const {
  return _impl_.eligible_account_ids_.Get(index);
}
inline uint32_t CLobbyGuildChallenge::eligible_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_eligible_account_ids(index);
}
inline void CLobbyGuildChallenge::set_eligible_account_ids(int index, uint32_t value) {
  _impl_.eligible_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CLobbyGuildChallenge.eligible_account_ids)
}
inline void CLobbyGuildChallenge::_internal_add_eligible_account_ids(uint32_t value) {
  _impl_.eligible_account_ids_.Add(value);
}
inline void CLobbyGuildChallenge::add_eligible_account_ids(uint32_t value) {
  _internal_add_eligible_account_ids(value);
  // @@protoc_insertion_point(field_add:CLobbyGuildChallenge.eligible_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CLobbyGuildChallenge::_internal_eligible_account_ids() const {
  return _impl_.eligible_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CLobbyGuildChallenge::eligible_account_ids() const {
  // @@protoc_insertion_point(field_list:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_eligible_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CLobbyGuildChallenge::_internal_mutable_eligible_account_ids() {
  return &_impl_.eligible_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CLobbyGuildChallenge::mutable_eligible_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CLobbyGuildChallenge.eligible_account_ids)
  return _internal_mutable_eligible_account_ids();
}

// -------------------------------------------------------------------

// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
inline bool CSODOTALobby_CExtraMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby_CExtraMsg::has_id() const {
  return _internal_has_id();
}
inline void CSODOTALobby_CExtraMsg::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CSODOTALobby_CExtraMsg::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.id)
  return _internal_id();
}
inline void CSODOTALobby_CExtraMsg::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void CSODOTALobby_CExtraMsg::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
inline bool CSODOTALobby_CExtraMsg::_internal_has_contents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby_CExtraMsg::has_contents() const {
  return _internal_has_contents();
}
inline void CSODOTALobby_CExtraMsg::clear_contents() {
  _impl_.contents_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.CExtraMsg.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby_CExtraMsg::set_contents(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.contents_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.CExtraMsg.contents)
}
inline std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.CExtraMsg.contents)
  return _s;
}
inline const std::string& CSODOTALobby_CExtraMsg::_internal_contents() const {
  return _impl_.contents_.Get();
}
inline void CSODOTALobby_CExtraMsg::_internal_set_contents(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby_CExtraMsg::_internal_mutable_contents() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.contents_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby_CExtraMsg::release_contents() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.CExtraMsg.contents)
  if (!_internal_has_contents()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.contents_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby_CExtraMsg::set_allocated_contents(std::string* contents) {
  if (contents != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contents_.SetAllocated(contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.contents_.IsDefault()) {
    _impl_.contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.CExtraMsg.contents)
}

// -------------------------------------------------------------------

// CSODOTALobby

// optional uint64 lobby_id = 1 [(.key_field) = true];
inline bool CSODOTALobby::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CSODOTALobby::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint64_t CSODOTALobby::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_id)
  return _internal_lobby_id();
}
inline void CSODOTALobby::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.lobby_id_ = value;
}
inline void CSODOTALobby::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_id)
}

// repeated .CSODOTALobbyMember all_members = 120;
inline int CSODOTALobby::_internal_all_members_size() const {
  return _impl_.all_members_.size();
}
inline int CSODOTALobby::all_members_size() const {
  return _internal_all_members_size();
}
inline void CSODOTALobby::clear_all_members() {
  _impl_.all_members_.Clear();
}
inline ::CSODOTALobbyMember* CSODOTALobby::mutable_all_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.all_members)
  return _impl_.all_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >*
CSODOTALobby::mutable_all_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.all_members)
  return &_impl_.all_members_;
}
inline const ::CSODOTALobbyMember& CSODOTALobby::_internal_all_members(int index) const {
  return _impl_.all_members_.Get(index);
}
inline const ::CSODOTALobbyMember& CSODOTALobby::all_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.all_members)
  return _internal_all_members(index);
}
inline ::CSODOTALobbyMember* CSODOTALobby::_internal_add_all_members() {
  return _impl_.all_members_.Add();
}
inline ::CSODOTALobbyMember* CSODOTALobby::add_all_members() {
  ::CSODOTALobbyMember* _add = _internal_add_all_members();
  // @@protoc_insertion_point(field_add:CSODOTALobby.all_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobbyMember >&
CSODOTALobby::all_members() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.all_members)
  return _impl_.all_members_;
}

// repeated uint32 member_indices = 121;
inline int CSODOTALobby::_internal_member_indices_size() const {
  return _impl_.member_indices_.size();
}
inline int CSODOTALobby::member_indices_size() const {
  return _internal_member_indices_size();
}
inline void CSODOTALobby::clear_member_indices() {
  _impl_.member_indices_.Clear();
}
inline uint32_t CSODOTALobby::_internal_member_indices(int index) const {
  return _impl_.member_indices_.Get(index);
}
inline uint32_t CSODOTALobby::member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.member_indices)
  return _internal_member_indices(index);
}
inline void CSODOTALobby::set_member_indices(int index, uint32_t value) {
  _impl_.member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.member_indices)
}
inline void CSODOTALobby::_internal_add_member_indices(uint32_t value) {
  _impl_.member_indices_.Add(value);
}
inline void CSODOTALobby::add_member_indices(uint32_t value) {
  _internal_add_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::_internal_member_indices() const {
  return _impl_.member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.member_indices)
  return _internal_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::_internal_mutable_member_indices() {
  return &_impl_.member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::mutable_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.member_indices)
  return _internal_mutable_member_indices();
}

// repeated uint32 left_member_indices = 122;
inline int CSODOTALobby::_internal_left_member_indices_size() const {
  return _impl_.left_member_indices_.size();
}
inline int CSODOTALobby::left_member_indices_size() const {
  return _internal_left_member_indices_size();
}
inline void CSODOTALobby::clear_left_member_indices() {
  _impl_.left_member_indices_.Clear();
}
inline uint32_t CSODOTALobby::_internal_left_member_indices(int index) const {
  return _impl_.left_member_indices_.Get(index);
}
inline uint32_t CSODOTALobby::left_member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.left_member_indices)
  return _internal_left_member_indices(index);
}
inline void CSODOTALobby::set_left_member_indices(int index, uint32_t value) {
  _impl_.left_member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.left_member_indices)
}
inline void CSODOTALobby::_internal_add_left_member_indices(uint32_t value) {
  _impl_.left_member_indices_.Add(value);
}
inline void CSODOTALobby::add_left_member_indices(uint32_t value) {
  _internal_add_left_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.left_member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::_internal_left_member_indices() const {
  return _impl_.left_member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::left_member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.left_member_indices)
  return _internal_left_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::_internal_mutable_left_member_indices() {
  return &_impl_.left_member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::mutable_left_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.left_member_indices)
  return _internal_mutable_left_member_indices();
}

// repeated uint32 free_member_indices = 123;
inline int CSODOTALobby::_internal_free_member_indices_size() const {
  return _impl_.free_member_indices_.size();
}
inline int CSODOTALobby::free_member_indices_size() const {
  return _internal_free_member_indices_size();
}
inline void CSODOTALobby::clear_free_member_indices() {
  _impl_.free_member_indices_.Clear();
}
inline uint32_t CSODOTALobby::_internal_free_member_indices(int index) const {
  return _impl_.free_member_indices_.Get(index);
}
inline uint32_t CSODOTALobby::free_member_indices(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.free_member_indices)
  return _internal_free_member_indices(index);
}
inline void CSODOTALobby::set_free_member_indices(int index, uint32_t value) {
  _impl_.free_member_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.free_member_indices)
}
inline void CSODOTALobby::_internal_add_free_member_indices(uint32_t value) {
  _impl_.free_member_indices_.Add(value);
}
inline void CSODOTALobby::add_free_member_indices(uint32_t value) {
  _internal_add_free_member_indices(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.free_member_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::_internal_free_member_indices() const {
  return _impl_.free_member_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::free_member_indices() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.free_member_indices)
  return _internal_free_member_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::_internal_mutable_free_member_indices() {
  return &_impl_.free_member_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::mutable_free_member_indices() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.free_member_indices)
  return _internal_mutable_free_member_indices();
}

// optional fixed64 leader_id = 11;
inline bool CSODOTALobby::_internal_has_leader_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_leader_id() const {
  return _internal_has_leader_id();
}
inline void CSODOTALobby::clear_leader_id() {
  _impl_.leader_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint64_t CSODOTALobby::_internal_leader_id() const {
  return _impl_.leader_id_;
}
inline uint64_t CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leader_id)
  return _internal_leader_id();
}
inline void CSODOTALobby::_internal_set_leader_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.leader_id_ = value;
}
inline void CSODOTALobby::set_leader_id(uint64_t value) {
  _internal_set_leader_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
inline bool CSODOTALobby::_internal_has_server_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_server_id() const {
  return _internal_has_server_id();
}
inline void CSODOTALobby::clear_server_id() {
  _impl_.server_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint64_t CSODOTALobby::_internal_server_id() const {
  return _impl_.server_id_;
}
inline uint64_t CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_id)
  return _internal_server_id();
}
inline void CSODOTALobby::_internal_set_server_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.server_id_ = value;
}
inline void CSODOTALobby::set_server_id(uint64_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
inline bool CSODOTALobby::_internal_has_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CSODOTALobby::clear_game_mode() {
  _impl_.game_mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CSODOTALobby::_internal_game_mode() const {
  return _impl_.game_mode_;
}
inline uint32_t CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_mode)
  return _internal_game_mode();
}
inline void CSODOTALobby::_internal_set_game_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.game_mode_ = value;
}
inline void CSODOTALobby::set_game_mode(uint32_t value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
inline int CSODOTALobby::_internal_pending_invites_size() const {
  return _impl_.pending_invites_.size();
}
inline int CSODOTALobby::pending_invites_size() const {
  return _internal_pending_invites_size();
}
inline void CSODOTALobby::clear_pending_invites() {
  _impl_.pending_invites_.Clear();
}
inline uint64_t CSODOTALobby::_internal_pending_invites(int index) const {
  return _impl_.pending_invites_.Get(index);
}
inline uint64_t CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pending_invites)
  return _internal_pending_invites(index);
}
inline void CSODOTALobby::set_pending_invites(int index, uint64_t value) {
  _impl_.pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pending_invites)
}
inline void CSODOTALobby::_internal_add_pending_invites(uint64_t value) {
  _impl_.pending_invites_.Add(value);
}
inline void CSODOTALobby::add_pending_invites(uint64_t value) {
  _internal_add_pending_invites(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.pending_invites)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTALobby::_internal_pending_invites() const {
  return _impl_.pending_invites_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.pending_invites)
  return _internal_pending_invites();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTALobby::_internal_mutable_pending_invites() {
  return &_impl_.pending_invites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.pending_invites)
  return _internal_mutable_pending_invites();
}

// optional .CSODOTALobby.State state = 4 [default = UI];
inline bool CSODOTALobby::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_state() const {
  return _internal_has_state();
}
inline void CSODOTALobby::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::CSODOTALobby_State CSODOTALobby::_internal_state() const {
  return static_cast< ::CSODOTALobby_State >(_impl_.state_);
}
inline ::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.state)
  return _internal_state();
}
inline void CSODOTALobby::_internal_set_state(::CSODOTALobby_State value) {
  assert(::CSODOTALobby_State_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.state_ = value;
}
inline void CSODOTALobby::set_state(::CSODOTALobby_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.state)
}

// optional string connect = 5;
inline bool CSODOTALobby::_internal_has_connect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_connect() const {
  return _internal_has_connect();
}
inline void CSODOTALobby::clear_connect() {
  _impl_.connect_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.connect)
  return _internal_connect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_connect(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.connect_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.connect)
}
inline std::string* CSODOTALobby::mutable_connect() {
  std::string* _s = _internal_mutable_connect();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.connect)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_connect() const {
  return _impl_.connect_.Get();
}
inline void CSODOTALobby::_internal_set_connect(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.connect_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_connect() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.connect_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_connect() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.connect)
  if (!_internal_has_connect()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.connect_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connect_.IsDefault()) {
    _impl_.connect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_connect(std::string* connect) {
  if (connect != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connect_.SetAllocated(connect, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.connect_.IsDefault()) {
    _impl_.connect_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.connect)
}

// optional .CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
inline bool CSODOTALobby::_internal_has_lobby_type() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_type() const {
  return _internal_has_lobby_type();
}
inline void CSODOTALobby::clear_lobby_type() {
  _impl_.lobby_type_ = -1;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::_internal_lobby_type() const {
  return static_cast< ::CSODOTALobby_LobbyType >(_impl_.lobby_type_);
}
inline ::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_type)
  return _internal_lobby_type();
}
inline void CSODOTALobby::_internal_set_lobby_type(::CSODOTALobby_LobbyType value) {
  assert(::CSODOTALobby_LobbyType_IsValid(value));
  _impl_._has_bits_[2] |= 0x00001000u;
  _impl_.lobby_type_ = value;
}
inline void CSODOTALobby::set_lobby_type(::CSODOTALobby_LobbyType value) {
  _internal_set_lobby_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
inline bool CSODOTALobby::_internal_has_allow_cheats() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allow_cheats() const {
  return _internal_has_allow_cheats();
}
inline void CSODOTALobby::clear_allow_cheats() {
  _impl_.allow_cheats_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool CSODOTALobby::_internal_allow_cheats() const {
  return _impl_.allow_cheats_;
}
inline bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_cheats)
  return _internal_allow_cheats();
}
inline void CSODOTALobby::_internal_set_allow_cheats(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.allow_cheats_ = value;
}
inline void CSODOTALobby::set_allow_cheats(bool value) {
  _internal_set_allow_cheats(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
inline bool CSODOTALobby::_internal_has_fill_with_bots() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_fill_with_bots() const {
  return _internal_has_fill_with_bots();
}
inline void CSODOTALobby::clear_fill_with_bots() {
  _impl_.fill_with_bots_ = false;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool CSODOTALobby::_internal_fill_with_bots() const {
  return _impl_.fill_with_bots_;
}
inline bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.fill_with_bots)
  return _internal_fill_with_bots();
}
inline void CSODOTALobby::_internal_set_fill_with_bots(bool value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.fill_with_bots_ = value;
}
inline void CSODOTALobby::set_fill_with_bots(bool value) {
  _internal_set_fill_with_bots(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
inline bool CSODOTALobby::_internal_has_intro_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_intro_mode() const {
  return _internal_has_intro_mode();
}
inline void CSODOTALobby::clear_intro_mode() {
  _impl_.intro_mode_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool CSODOTALobby::_internal_intro_mode() const {
  return _impl_.intro_mode_;
}
inline bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.intro_mode)
  return _internal_intro_mode();
}
inline void CSODOTALobby::_internal_set_intro_mode(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.intro_mode_ = value;
}
inline void CSODOTALobby::set_intro_mode(bool value) {
  _internal_set_intro_mode(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
inline bool CSODOTALobby::_internal_has_game_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_name() const {
  return _internal_has_game_name();
}
inline void CSODOTALobby::clear_game_name() {
  _impl_.game_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_name)
  return _internal_game_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_game_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.game_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_name)
}
inline std::string* CSODOTALobby::mutable_game_name() {
  std::string* _s = _internal_mutable_game_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.game_name)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_game_name() const {
  return _impl_.game_name_.Get();
}
inline void CSODOTALobby::_internal_set_game_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.game_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_game_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.game_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_game_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.game_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.game_name_.IsDefault()) {
    _impl_.game_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.game_name_.SetAllocated(game_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.game_name_.IsDefault()) {
    _impl_.game_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.game_name)
}

// repeated .CLobbyTeamDetails team_details = 17;
inline int CSODOTALobby::_internal_team_details_size() const {
  return _impl_.team_details_.size();
}
inline int CSODOTALobby::team_details_size() const {
  return _internal_team_details_size();
}
inline void CSODOTALobby::clear_team_details() {
  _impl_.team_details_.Clear();
}
inline ::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.team_details)
  return _impl_.team_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.team_details)
  return &_impl_.team_details_;
}
inline const ::CLobbyTeamDetails& CSODOTALobby::_internal_team_details(int index) const {
  return _impl_.team_details_.Get(index);
}
inline const ::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.team_details)
  return _internal_team_details(index);
}
inline ::CLobbyTeamDetails* CSODOTALobby::_internal_add_team_details() {
  return _impl_.team_details_.Add();
}
inline ::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  ::CLobbyTeamDetails* _add = _internal_add_team_details();
  // @@protoc_insertion_point(field_add:CSODOTALobby.team_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.team_details)
  return _impl_.team_details_;
}

// optional uint32 tutorial_lesson = 18;
inline bool CSODOTALobby::_internal_has_tutorial_lesson() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tutorial_lesson() const {
  return _internal_has_tutorial_lesson();
}
inline void CSODOTALobby::clear_tutorial_lesson() {
  _impl_.tutorial_lesson_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CSODOTALobby::_internal_tutorial_lesson() const {
  return _impl_.tutorial_lesson_;
}
inline uint32_t CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tutorial_lesson)
  return _internal_tutorial_lesson();
}
inline void CSODOTALobby::_internal_set_tutorial_lesson(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.tutorial_lesson_ = value;
}
inline void CSODOTALobby::set_tutorial_lesson(uint32_t value) {
  _internal_set_tutorial_lesson(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
inline bool CSODOTALobby::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CSODOTALobby::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CSODOTALobby::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_id)
  return _internal_tournament_id();
}
inline void CSODOTALobby::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.tournament_id_ = value;
}
inline void CSODOTALobby::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
inline bool CSODOTALobby::_internal_has_tournament_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_tournament_game_id() const {
  return _internal_has_tournament_game_id();
}
inline void CSODOTALobby::clear_tournament_game_id() {
  _impl_.tournament_game_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CSODOTALobby::_internal_tournament_game_id() const {
  return _impl_.tournament_game_id_;
}
inline uint32_t CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.tournament_game_id)
  return _internal_tournament_game_id();
}
inline void CSODOTALobby::_internal_set_tournament_game_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.tournament_game_id_ = value;
}
inline void CSODOTALobby::set_tournament_game_id(uint32_t value) {
  _internal_set_tournament_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
inline bool CSODOTALobby::_internal_has_server_region() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_server_region() const {
  return _internal_has_server_region();
}
inline void CSODOTALobby::clear_server_region() {
  _impl_.server_region_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CSODOTALobby::_internal_server_region() const {
  return _impl_.server_region_;
}
inline uint32_t CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.server_region)
  return _internal_server_region();
}
inline void CSODOTALobby::_internal_set_server_region(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.server_region_ = value;
}
inline void CSODOTALobby::set_server_region(uint32_t value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.server_region)
}

// optional .DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
inline bool CSODOTALobby::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_state() const {
  return _internal_has_game_state();
}
inline void CSODOTALobby::clear_game_state() {
  _impl_.game_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::DOTA_GameState CSODOTALobby::_internal_game_state() const {
  return static_cast< ::DOTA_GameState >(_impl_.game_state_);
}
inline ::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_state)
  return _internal_game_state();
}
inline void CSODOTALobby::_internal_set_game_state(::DOTA_GameState value) {
  assert(::DOTA_GameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.game_state_ = value;
}
inline void CSODOTALobby::set_game_state(::DOTA_GameState value) {
  _internal_set_game_state(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
inline bool CSODOTALobby::_internal_has_num_spectators() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_num_spectators() const {
  return _internal_has_num_spectators();
}
inline void CSODOTALobby::clear_num_spectators() {
  _impl_.num_spectators_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint32_t CSODOTALobby::_internal_num_spectators() const {
  return _impl_.num_spectators_;
}
inline uint32_t CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.num_spectators)
  return _internal_num_spectators();
}
inline void CSODOTALobby::_internal_set_num_spectators(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.num_spectators_ = value;
}
inline void CSODOTALobby::set_num_spectators(uint32_t value) {
  _internal_set_num_spectators(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
inline bool CSODOTALobby::_internal_has_matchgroup() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_matchgroup() const {
  return _internal_has_matchgroup();
}
inline void CSODOTALobby::clear_matchgroup() {
  _impl_.matchgroup_ = 0u;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline uint32_t CSODOTALobby::_internal_matchgroup() const {
  return _impl_.matchgroup_;
}
inline uint32_t CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.matchgroup)
  return _internal_matchgroup();
}
inline void CSODOTALobby::_internal_set_matchgroup(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.matchgroup_ = value;
}
inline void CSODOTALobby::set_matchgroup(uint32_t value) {
  _internal_set_matchgroup(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.matchgroup)
}

// optional .DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
inline bool CSODOTALobby::_internal_has_cm_pick() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_cm_pick() const {
  return _internal_has_cm_pick();
}
inline void CSODOTALobby::clear_cm_pick() {
  _impl_.cm_pick_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::DOTA_CM_PICK CSODOTALobby::_internal_cm_pick() const {
  return static_cast< ::DOTA_CM_PICK >(_impl_.cm_pick_);
}
inline ::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.cm_pick)
  return _internal_cm_pick();
}
inline void CSODOTALobby::_internal_set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.cm_pick_ = value;
}
inline void CSODOTALobby::set_cm_pick(::DOTA_CM_PICK value) {
  _internal_set_cm_pick(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
inline bool CSODOTALobby::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_id() const {
  return _internal_has_match_id();
}
inline void CSODOTALobby::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline uint64_t CSODOTALobby::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_id)
  return _internal_match_id();
}
inline void CSODOTALobby::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.match_id_ = value;
}
inline void CSODOTALobby::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
inline bool CSODOTALobby::_internal_has_allow_spectating() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allow_spectating() const {
  return _internal_has_allow_spectating();
}
inline void CSODOTALobby::clear_allow_spectating() {
  _impl_.allow_spectating_ = true;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline bool CSODOTALobby::_internal_allow_spectating() const {
  return _impl_.allow_spectating_;
}
inline bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allow_spectating)
  return _internal_allow_spectating();
}
inline void CSODOTALobby::_internal_set_allow_spectating(bool value) {
  _impl_._has_bits_[2] |= 0x00002000u;
  _impl_.allow_spectating_ = value;
}
inline void CSODOTALobby::set_allow_spectating(bool value) {
  _internal_set_allow_spectating(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allow_spectating)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::_internal_has_bot_difficulty_radiant() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_difficulty_radiant() const {
  return _internal_has_bot_difficulty_radiant();
}
inline void CSODOTALobby::clear_bot_difficulty_radiant() {
  _impl_.bot_difficulty_radiant_ = 3;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline ::DOTABotDifficulty CSODOTALobby::_internal_bot_difficulty_radiant() const {
  return static_cast< ::DOTABotDifficulty >(_impl_.bot_difficulty_radiant_);
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_radiant)
  return _internal_bot_difficulty_radiant();
}
inline void CSODOTALobby::_internal_set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _impl_._has_bits_[2] |= 0x00004000u;
  _impl_.bot_difficulty_radiant_ = value;
}
inline void CSODOTALobby::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_radiant)
}

// repeated .CLobbyTimedRewardDetails timed_reward_details = 38;
inline int CSODOTALobby::_internal_timed_reward_details_size() const {
  return _impl_.timed_reward_details_.size();
}
inline int CSODOTALobby::timed_reward_details_size() const {
  return _internal_timed_reward_details_size();
}
inline void CSODOTALobby::clear_timed_reward_details() {
  _impl_.timed_reward_details_.Clear();
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.timed_reward_details)
  return _impl_.timed_reward_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.timed_reward_details)
  return &_impl_.timed_reward_details_;
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::_internal_timed_reward_details(int index) const {
  return _impl_.timed_reward_details_.Get(index);
}
inline const ::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.timed_reward_details)
  return _internal_timed_reward_details(index);
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::_internal_add_timed_reward_details() {
  return _impl_.timed_reward_details_.Add();
}
inline ::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  ::CLobbyTimedRewardDetails* _add = _internal_add_timed_reward_details();
  // @@protoc_insertion_point(field_add:CSODOTALobby.timed_reward_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.timed_reward_details)
  return _impl_.timed_reward_details_;
}

// optional string pass_key = 39;
inline bool CSODOTALobby::_internal_has_pass_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CSODOTALobby::clear_pass_key() {
  _impl_.pass_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pass_key)
  return _internal_pass_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_pass_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.pass_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.pass_key)
}
inline std::string* CSODOTALobby::mutable_pass_key() {
  std::string* _s = _internal_mutable_pass_key();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.pass_key)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_pass_key() const {
  return _impl_.pass_key_.Get();
}
inline void CSODOTALobby::_internal_set_pass_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.pass_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_pass_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.pass_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_pass_key() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.pass_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pass_key_.IsDefault()) {
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pass_key_.SetAllocated(pass_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pass_key_.IsDefault()) {
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.pass_key)
}

// optional uint32 leagueid = 42;
inline bool CSODOTALobby::_internal_has_leagueid() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_leagueid() const {
  return _internal_has_leagueid();
}
inline void CSODOTALobby::clear_leagueid() {
  _impl_.leagueid_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CSODOTALobby::_internal_leagueid() const {
  return _impl_.leagueid_;
}
inline uint32_t CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.leagueid)
  return _internal_leagueid();
}
inline void CSODOTALobby::_internal_set_leagueid(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.leagueid_ = value;
}
inline void CSODOTALobby::set_leagueid(uint32_t value) {
  _internal_set_leagueid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
inline bool CSODOTALobby::_internal_has_penalty_level_radiant() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_penalty_level_radiant() const {
  return _internal_has_penalty_level_radiant();
}
inline void CSODOTALobby::clear_penalty_level_radiant() {
  _impl_.penalty_level_radiant_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CSODOTALobby::_internal_penalty_level_radiant() const {
  return _impl_.penalty_level_radiant_;
}
inline uint32_t CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_radiant)
  return _internal_penalty_level_radiant();
}
inline void CSODOTALobby::_internal_set_penalty_level_radiant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.penalty_level_radiant_ = value;
}
inline void CSODOTALobby::set_penalty_level_radiant(uint32_t value) {
  _internal_set_penalty_level_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
inline bool CSODOTALobby::_internal_has_penalty_level_dire() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_penalty_level_dire() const {
  return _internal_has_penalty_level_dire();
}
inline void CSODOTALobby::clear_penalty_level_dire() {
  _impl_.penalty_level_dire_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CSODOTALobby::_internal_penalty_level_dire() const {
  return _impl_.penalty_level_dire_;
}
inline uint32_t CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.penalty_level_dire)
  return _internal_penalty_level_dire();
}
inline void CSODOTALobby::_internal_set_penalty_level_dire(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.penalty_level_dire_ = value;
}
inline void CSODOTALobby::set_penalty_level_dire(uint32_t value) {
  _internal_set_penalty_level_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
inline bool CSODOTALobby::_internal_has_load_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_load_game_id() const {
  return _internal_has_load_game_id();
}
inline void CSODOTALobby::clear_load_game_id() {
  _impl_.load_game_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CSODOTALobby::_internal_load_game_id() const {
  return _impl_.load_game_id_;
}
inline uint32_t CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.load_game_id)
  return _internal_load_game_id();
}
inline void CSODOTALobby::_internal_set_load_game_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.load_game_id_ = value;
}
inline void CSODOTALobby::set_load_game_id(uint32_t value) {
  _internal_set_load_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
inline bool CSODOTALobby::_internal_has_series_type() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_type() const {
  return _internal_has_series_type();
}
inline void CSODOTALobby::clear_series_type() {
  _impl_.series_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CSODOTALobby::_internal_series_type() const {
  return _impl_.series_type_;
}
inline uint32_t CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_type)
  return _internal_series_type();
}
inline void CSODOTALobby::_internal_set_series_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.series_type_ = value;
}
inline void CSODOTALobby::set_series_type(uint32_t value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
inline bool CSODOTALobby::_internal_has_radiant_series_wins() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_radiant_series_wins() const {
  return _internal_has_radiant_series_wins();
}
inline void CSODOTALobby::clear_radiant_series_wins() {
  _impl_.radiant_series_wins_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CSODOTALobby::_internal_radiant_series_wins() const {
  return _impl_.radiant_series_wins_;
}
inline uint32_t CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.radiant_series_wins)
  return _internal_radiant_series_wins();
}
inline void CSODOTALobby::_internal_set_radiant_series_wins(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.radiant_series_wins_ = value;
}
inline void CSODOTALobby::set_radiant_series_wins(uint32_t value) {
  _internal_set_radiant_series_wins(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
inline bool CSODOTALobby::_internal_has_dire_series_wins() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_dire_series_wins() const {
  return _internal_has_dire_series_wins();
}
inline void CSODOTALobby::clear_dire_series_wins() {
  _impl_.dire_series_wins_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CSODOTALobby::_internal_dire_series_wins() const {
  return _impl_.dire_series_wins_;
}
inline uint32_t CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dire_series_wins)
  return _internal_dire_series_wins();
}
inline void CSODOTALobby::_internal_set_dire_series_wins(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.dire_series_wins_ = value;
}
inline void CSODOTALobby::set_dire_series_wins(uint32_t value) {
  _internal_set_dire_series_wins(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
inline bool CSODOTALobby::_internal_has_loot_generated() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_loot_generated() const {
  return _internal_has_loot_generated();
}
inline void CSODOTALobby::clear_loot_generated() {
  _impl_.loot_generated_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline uint32_t CSODOTALobby::_internal_loot_generated() const {
  return _impl_.loot_generated_;
}
inline uint32_t CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_generated)
  return _internal_loot_generated();
}
inline void CSODOTALobby::_internal_set_loot_generated(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.loot_generated_ = value;
}
inline void CSODOTALobby::set_loot_generated(uint32_t value) {
  _internal_set_loot_generated(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
inline bool CSODOTALobby::_internal_has_loot_awarded() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_loot_awarded() const {
  return _internal_has_loot_awarded();
}
inline void CSODOTALobby::clear_loot_awarded() {
  _impl_.loot_awarded_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CSODOTALobby::_internal_loot_awarded() const {
  return _impl_.loot_awarded_;
}
inline uint32_t CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.loot_awarded)
  return _internal_loot_awarded();
}
inline void CSODOTALobby::_internal_set_loot_awarded(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.loot_awarded_ = value;
}
inline void CSODOTALobby::set_loot_awarded(uint32_t value) {
  _internal_set_loot_awarded(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
inline bool CSODOTALobby::_internal_has_allchat() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_allchat() const {
  return _internal_has_allchat();
}
inline void CSODOTALobby::clear_allchat() {
  _impl_.allchat_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool CSODOTALobby::_internal_allchat() const {
  return _impl_.allchat_;
}
inline bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.allchat)
  return _internal_allchat();
}
inline void CSODOTALobby::_internal_set_allchat(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.allchat_ = value;
}
inline void CSODOTALobby::set_allchat(bool value) {
  _internal_set_allchat(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
inline bool CSODOTALobby::_internal_has_dota_tv_delay() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_dota_tv_delay() const {
  return _internal_has_dota_tv_delay();
}
inline void CSODOTALobby::clear_dota_tv_delay() {
  _impl_.dota_tv_delay_ = 0;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline ::LobbyDotaTVDelay CSODOTALobby::_internal_dota_tv_delay() const {
  return static_cast< ::LobbyDotaTVDelay >(_impl_.dota_tv_delay_);
}
inline ::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.dota_tv_delay)
  return _internal_dota_tv_delay();
}
inline void CSODOTALobby::_internal_set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.dota_tv_delay_ = value;
}
inline void CSODOTALobby::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  _internal_set_dota_tv_delay(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
inline bool CSODOTALobby::_internal_has_custom_game_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_mode() const {
  return _internal_has_custom_game_mode();
}
inline void CSODOTALobby::clear_custom_game_mode() {
  _impl_.custom_game_mode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_mode)
  return _internal_custom_game_mode();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_custom_game_mode(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.custom_game_mode_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_mode)
}
inline std::string* CSODOTALobby::mutable_custom_game_mode() {
  std::string* _s = _internal_mutable_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_game_mode)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_custom_game_mode() const {
  return _impl_.custom_game_mode_.Get();
}
inline void CSODOTALobby::_internal_set_custom_game_mode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.custom_game_mode_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_custom_game_mode() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.custom_game_mode_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.custom_game_mode)
  if (!_internal_has_custom_game_mode()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.custom_game_mode_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_game_mode_.IsDefault()) {
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_custom_game_mode(std::string* custom_game_mode) {
  if (custom_game_mode != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.custom_game_mode_.SetAllocated(custom_game_mode, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_game_mode_.IsDefault()) {
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
inline bool CSODOTALobby::_internal_has_custom_map_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_map_name() const {
  return _internal_has_custom_map_name();
}
inline void CSODOTALobby::clear_custom_map_name() {
  _impl_.custom_map_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_map_name)
  return _internal_custom_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_custom_map_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.custom_map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_map_name)
}
inline std::string* CSODOTALobby::mutable_custom_map_name() {
  std::string* _s = _internal_mutable_custom_map_name();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.custom_map_name)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_custom_map_name() const {
  return _impl_.custom_map_name_.Get();
}
inline void CSODOTALobby::_internal_set_custom_map_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.custom_map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_custom_map_name() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.custom_map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.custom_map_name)
  if (!_internal_has_custom_map_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.custom_map_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_map_name_.IsDefault()) {
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_custom_map_name(std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.custom_map_name_.SetAllocated(custom_map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.custom_map_name_.IsDefault()) {
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
inline bool CSODOTALobby::_internal_has_custom_difficulty() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_difficulty() const {
  return _internal_has_custom_difficulty();
}
inline void CSODOTALobby::clear_custom_difficulty() {
  _impl_.custom_difficulty_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline uint32_t CSODOTALobby::_internal_custom_difficulty() const {
  return _impl_.custom_difficulty_;
}
inline uint32_t CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_difficulty)
  return _internal_custom_difficulty();
}
inline void CSODOTALobby::_internal_set_custom_difficulty(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.custom_difficulty_ = value;
}
inline void CSODOTALobby::set_custom_difficulty(uint32_t value) {
  _internal_set_custom_difficulty(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
inline bool CSODOTALobby::_internal_has_lan() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lan() const {
  return _internal_has_lan();
}
inline void CSODOTALobby::clear_lan() {
  _impl_.lan_ = false;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline bool CSODOTALobby::_internal_lan() const {
  return _impl_.lan_;
}
inline bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan)
  return _internal_lan();
}
inline void CSODOTALobby::_internal_set_lan(bool value) {
  _impl_._has_bits_[1] |= 0x00000080u;
  _impl_.lan_ = value;
}
inline void CSODOTALobby::set_lan(bool value) {
  _internal_set_lan(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan)
}

// repeated .CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
inline int CSODOTALobby::_internal_broadcast_channel_info_size() const {
  return _impl_.broadcast_channel_info_.size();
}
inline int CSODOTALobby::broadcast_channel_info_size() const {
  return _internal_broadcast_channel_info_size();
}
inline void CSODOTALobby::clear_broadcast_channel_info() {
  _impl_.broadcast_channel_info_.Clear();
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.broadcast_channel_info)
  return _impl_.broadcast_channel_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.broadcast_channel_info)
  return &_impl_.broadcast_channel_info_;
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::_internal_broadcast_channel_info(int index) const {
  return _impl_.broadcast_channel_info_.Get(index);
}
inline const ::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.broadcast_channel_info)
  return _internal_broadcast_channel_info(index);
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::_internal_add_broadcast_channel_info() {
  return _impl_.broadcast_channel_info_.Add();
}
inline ::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  ::CLobbyBroadcastChannelInfo* _add = _internal_add_broadcast_channel_info();
  // @@protoc_insertion_point(field_add:CSODOTALobby.broadcast_channel_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.broadcast_channel_info)
  return _impl_.broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
inline bool CSODOTALobby::_internal_has_first_leaver_accountid() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_first_leaver_accountid() const {
  return _internal_has_first_leaver_accountid();
}
inline void CSODOTALobby::clear_first_leaver_accountid() {
  _impl_.first_leaver_accountid_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline uint32_t CSODOTALobby::_internal_first_leaver_accountid() const {
  return _impl_.first_leaver_accountid_;
}
inline uint32_t CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_leaver_accountid)
  return _internal_first_leaver_accountid();
}
inline void CSODOTALobby::_internal_set_first_leaver_accountid(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.first_leaver_accountid_ = value;
}
inline void CSODOTALobby::set_first_leaver_accountid(uint32_t value) {
  _internal_set_first_leaver_accountid(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
inline bool CSODOTALobby::_internal_has_series_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_id() const {
  return _internal_has_series_id();
}
inline void CSODOTALobby::clear_series_id() {
  _impl_.series_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline uint32_t CSODOTALobby::_internal_series_id() const {
  return _impl_.series_id_;
}
inline uint32_t CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_id)
  return _internal_series_id();
}
inline void CSODOTALobby::_internal_set_series_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.series_id_ = value;
}
inline void CSODOTALobby::set_series_id(uint32_t value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
inline bool CSODOTALobby::_internal_has_low_priority() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_low_priority() const {
  return _internal_has_low_priority();
}
inline void CSODOTALobby::clear_low_priority() {
  _impl_.low_priority_ = false;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline bool CSODOTALobby::_internal_low_priority() const {
  return _impl_.low_priority_;
}
inline bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.low_priority)
  return _internal_low_priority();
}
inline void CSODOTALobby::_internal_set_low_priority(bool value) {
  _impl_._has_bits_[1] |= 0x00000100u;
  _impl_.low_priority_ = value;
}
inline void CSODOTALobby::set_low_priority(bool value) {
  _internal_set_low_priority(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.low_priority)
}

// repeated .CSODOTALobby.CExtraMsg extra_messages = 62;
inline int CSODOTALobby::_internal_extra_messages_size() const {
  return _impl_.extra_messages_.size();
}
inline int CSODOTALobby::extra_messages_size() const {
  return _internal_extra_messages_size();
}
inline void CSODOTALobby::clear_extra_messages() {
  _impl_.extra_messages_.Clear();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_messages)
  return _impl_.extra_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_messages)
  return &_impl_.extra_messages_;
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::_internal_extra_messages(int index) const {
  return _impl_.extra_messages_.Get(index);
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_messages)
  return _internal_extra_messages(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::_internal_add_extra_messages() {
  return _impl_.extra_messages_.Add();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  ::CSODOTALobby_CExtraMsg* _add = _internal_add_extra_messages();
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_messages)
  return _impl_.extra_messages_;
}

// optional .CDOTASaveGame save_game = 63;
inline bool CSODOTALobby::_internal_has_save_game() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.save_game_ != nullptr);
  return value;
}
inline bool CSODOTALobby::has_save_game() const {
  return _internal_has_save_game();
}
inline const ::CDOTASaveGame& CSODOTALobby::_internal_save_game() const {
  const ::CDOTASaveGame* p = _impl_.save_game_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTASaveGame&>(
      ::_CDOTASaveGame_default_instance_);
}
inline const ::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.save_game)
  return _internal_save_game();
}
inline void CSODOTALobby::unsafe_arena_set_allocated_save_game(
    ::CDOTASaveGame* save_game) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_game_);
  }
  _impl_.save_game_ = save_game;
  if (save_game) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSODOTALobby.save_game)
}
inline ::CDOTASaveGame* CSODOTALobby::release_save_game() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CDOTASaveGame* temp = _impl_.save_game_;
  _impl_.save_game_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTASaveGame* CSODOTALobby::unsafe_arena_release_save_game() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.save_game)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CDOTASaveGame* temp = _impl_.save_game_;
  _impl_.save_game_ = nullptr;
  return temp;
}
inline ::CDOTASaveGame* CSODOTALobby::_internal_mutable_save_game() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.save_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTASaveGame>(GetArenaForAllocation());
    _impl_.save_game_ = p;
  }
  return _impl_.save_game_;
}
inline ::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  ::CDOTASaveGame* _msg = _internal_mutable_save_game();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.save_game)
  return _msg;
}
inline void CSODOTALobby::set_allocated_save_game(::CDOTASaveGame* save_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.save_game_);
  }
  if (save_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_game));
    if (message_arena != submessage_arena) {
      save_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_game, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.save_game_ = save_game;
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
inline bool CSODOTALobby::_internal_has_first_blood_happened() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_first_blood_happened() const {
  return _internal_has_first_blood_happened();
}
inline void CSODOTALobby::clear_first_blood_happened() {
  _impl_.first_blood_happened_ = false;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline bool CSODOTALobby::_internal_first_blood_happened() const {
  return _impl_.first_blood_happened_;
}
inline bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.first_blood_happened)
  return _internal_first_blood_happened();
}
inline void CSODOTALobby::_internal_set_first_blood_happened(bool value) {
  _impl_._has_bits_[1] |= 0x00000200u;
  _impl_.first_blood_happened_ = value;
}
inline void CSODOTALobby::set_first_blood_happened(bool value) {
  _internal_set_first_blood_happened(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.first_blood_happened)
}

// optional .EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
inline bool CSODOTALobby::_internal_has_match_outcome() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_outcome() const {
  return _internal_has_match_outcome();
}
inline void CSODOTALobby::clear_match_outcome() {
  _impl_.match_outcome_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::EMatchOutcome CSODOTALobby::_internal_match_outcome() const {
  return static_cast< ::EMatchOutcome >(_impl_.match_outcome_);
}
inline ::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_outcome)
  return _internal_match_outcome();
}
inline void CSODOTALobby::_internal_set_match_outcome(::EMatchOutcome value) {
  assert(::EMatchOutcome_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000800u;
  _impl_.match_outcome_ = value;
}
inline void CSODOTALobby::set_match_outcome(::EMatchOutcome value) {
  _internal_set_match_outcome(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
inline bool CSODOTALobby::_internal_has_mass_disconnect() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_mass_disconnect() const {
  return _internal_has_mass_disconnect();
}
inline void CSODOTALobby::clear_mass_disconnect() {
  _impl_.mass_disconnect_ = false;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline bool CSODOTALobby::_internal_mass_disconnect() const {
  return _impl_.mass_disconnect_;
}
inline bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.mass_disconnect)
  return _internal_mass_disconnect();
}
inline void CSODOTALobby::_internal_set_mass_disconnect(bool value) {
  _impl_._has_bits_[1] |= 0x00000400u;
  _impl_.mass_disconnect_ = value;
}
inline void CSODOTALobby::set_mass_disconnect(bool value) {
  _internal_set_mass_disconnect(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
inline bool CSODOTALobby::_internal_has_custom_game_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CSODOTALobby::clear_custom_game_id() {
  _impl_.custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline uint64_t CSODOTALobby::_internal_custom_game_id() const {
  return _impl_.custom_game_id_;
}
inline uint64_t CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_id)
  return _internal_custom_game_id();
}
inline void CSODOTALobby::_internal_set_custom_game_id(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.custom_game_id_ = value;
}
inline void CSODOTALobby::set_custom_game_id(uint64_t value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_id)
}

// optional uint32 custom_min_players = 71;
inline bool CSODOTALobby::_internal_has_custom_min_players() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_min_players() const {
  return _internal_has_custom_min_players();
}
inline void CSODOTALobby::clear_custom_min_players() {
  _impl_.custom_min_players_ = 0u;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline uint32_t CSODOTALobby::_internal_custom_min_players() const {
  return _impl_.custom_min_players_;
}
inline uint32_t CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_min_players)
  return _internal_custom_min_players();
}
inline void CSODOTALobby::_internal_set_custom_min_players(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00002000u;
  _impl_.custom_min_players_ = value;
}
inline void CSODOTALobby::set_custom_min_players(uint32_t value) {
  _internal_set_custom_min_players(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
inline bool CSODOTALobby::_internal_has_custom_max_players() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_max_players() const {
  return _internal_has_custom_max_players();
}
inline void CSODOTALobby::clear_custom_max_players() {
  _impl_.custom_max_players_ = 0u;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline uint32_t CSODOTALobby::_internal_custom_max_players() const {
  return _impl_.custom_max_players_;
}
inline uint32_t CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_max_players)
  return _internal_custom_max_players();
}
inline void CSODOTALobby::_internal_set_custom_max_players(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00004000u;
  _impl_.custom_max_players_ = value;
}
inline void CSODOTALobby::set_custom_max_players(uint32_t value) {
  _internal_set_custom_max_players(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_max_players)
}

// optional .DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
inline bool CSODOTALobby::_internal_has_visibility() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_visibility() const {
  return _internal_has_visibility();
}
inline void CSODOTALobby::clear_visibility() {
  _impl_.visibility_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::DOTALobbyVisibility CSODOTALobby::_internal_visibility() const {
  return static_cast< ::DOTALobbyVisibility >(_impl_.visibility_);
}
inline ::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.visibility)
  return _internal_visibility();
}
inline void CSODOTALobby::_internal_set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  _impl_._has_bits_[1] |= 0x00010000u;
  _impl_.visibility_ = value;
}
inline void CSODOTALobby::set_visibility(::DOTALobbyVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
inline bool CSODOTALobby::_internal_has_custom_game_crc() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CSODOTALobby::clear_custom_game_crc() {
  _impl_.custom_game_crc_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline uint64_t CSODOTALobby::_internal_custom_game_crc() const {
  return _impl_.custom_game_crc_;
}
inline uint64_t CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CSODOTALobby::_internal_set_custom_game_crc(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00008000u;
  _impl_.custom_game_crc_ = value;
}
inline void CSODOTALobby::set_custom_game_crc(uint64_t value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
inline bool CSODOTALobby::_internal_has_custom_game_auto_created_lobby() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return _internal_has_custom_game_auto_created_lobby();
}
inline void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  _impl_.custom_game_auto_created_lobby_ = false;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline bool CSODOTALobby::_internal_custom_game_auto_created_lobby() const {
  return _impl_.custom_game_auto_created_lobby_;
}
inline bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_auto_created_lobby)
  return _internal_custom_game_auto_created_lobby();
}
inline void CSODOTALobby::_internal_set_custom_game_auto_created_lobby(bool value) {
  _impl_._has_bits_[1] |= 0x40000000u;
  _impl_.custom_game_auto_created_lobby_ = value;
}
inline void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  _internal_set_custom_game_auto_created_lobby(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_auto_created_lobby)
}

// optional fixed32 custom_game_timestamp = 80;
inline bool CSODOTALobby::_internal_has_custom_game_timestamp() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CSODOTALobby::clear_custom_game_timestamp() {
  _impl_.custom_game_timestamp_ = 0u;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline uint32_t CSODOTALobby::_internal_custom_game_timestamp() const {
  return _impl_.custom_game_timestamp_;
}
inline uint32_t CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CSODOTALobby::_internal_set_custom_game_timestamp(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00020000u;
  _impl_.custom_game_timestamp_ = value;
}
inline void CSODOTALobby::set_custom_game_timestamp(uint32_t value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_timestamp)
}

// repeated uint64 previous_series_matches = 81;
inline int CSODOTALobby::_internal_previous_series_matches_size() const {
  return _impl_.previous_series_matches_.size();
}
inline int CSODOTALobby::previous_series_matches_size() const {
  return _internal_previous_series_matches_size();
}
inline void CSODOTALobby::clear_previous_series_matches() {
  _impl_.previous_series_matches_.Clear();
}
inline uint64_t CSODOTALobby::_internal_previous_series_matches(int index) const {
  return _impl_.previous_series_matches_.Get(index);
}
inline uint64_t CSODOTALobby::previous_series_matches(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_series_matches)
  return _internal_previous_series_matches(index);
}
inline void CSODOTALobby::set_previous_series_matches(int index, uint64_t value) {
  _impl_.previous_series_matches_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_series_matches)
}
inline void CSODOTALobby::_internal_add_previous_series_matches(uint64_t value) {
  _impl_.previous_series_matches_.Add(value);
}
inline void CSODOTALobby::add_previous_series_matches(uint64_t value) {
  _internal_add_previous_series_matches(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.previous_series_matches)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTALobby::_internal_previous_series_matches() const {
  return _impl_.previous_series_matches_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CSODOTALobby::previous_series_matches() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.previous_series_matches)
  return _internal_previous_series_matches();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTALobby::_internal_mutable_previous_series_matches() {
  return &_impl_.previous_series_matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CSODOTALobby::mutable_previous_series_matches() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.previous_series_matches)
  return _internal_mutable_previous_series_matches();
}

// optional uint64 previous_match_override = 82;
inline bool CSODOTALobby::_internal_has_previous_match_override() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_previous_match_override() const {
  return _internal_has_previous_match_override();
}
inline void CSODOTALobby::clear_previous_match_override() {
  _impl_.previous_match_override_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline uint64_t CSODOTALobby::_internal_previous_match_override() const {
  return _impl_.previous_match_override_;
}
inline uint64_t CSODOTALobby::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.previous_match_override)
  return _internal_previous_match_override();
}
inline void CSODOTALobby::_internal_set_previous_match_override(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00040000u;
  _impl_.previous_match_override_ = value;
}
inline void CSODOTALobby::set_previous_match_override(uint64_t value) {
  _internal_set_previous_match_override(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.previous_match_override)
}

// optional uint32 game_start_time = 87;
inline bool CSODOTALobby::_internal_has_game_start_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_game_start_time() const {
  return _internal_has_game_start_time();
}
inline void CSODOTALobby::clear_game_start_time() {
  _impl_.game_start_time_ = 0u;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline uint32_t CSODOTALobby::_internal_game_start_time() const {
  return _impl_.game_start_time_;
}
inline uint32_t CSODOTALobby::game_start_time() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.game_start_time)
  return _internal_game_start_time();
}
inline void CSODOTALobby::_internal_set_game_start_time(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00080000u;
  _impl_.game_start_time_ = value;
}
inline void CSODOTALobby::set_game_start_time(uint32_t value) {
  _internal_set_game_start_time(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.game_start_time)
}

// optional .LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CSODOTALobby::_internal_has_pause_setting() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_pause_setting() const {
  return _internal_has_pause_setting();
}
inline void CSODOTALobby::clear_pause_setting() {
  _impl_.pause_setting_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::LobbyDotaPauseSetting CSODOTALobby::_internal_pause_setting() const {
  return static_cast< ::LobbyDotaPauseSetting >(_impl_.pause_setting_);
}
inline ::LobbyDotaPauseSetting CSODOTALobby::pause_setting() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.pause_setting)
  return _internal_pause_setting();
}
inline void CSODOTALobby::_internal_set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  _impl_._has_bits_[1] |= 0x00100000u;
  _impl_.pause_setting_ = value;
}
inline void CSODOTALobby::set_pause_setting(::LobbyDotaPauseSetting value) {
  _internal_set_pause_setting(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.pause_setting)
}

// optional uint32 weekend_tourney_division_id = 90;
inline bool CSODOTALobby::_internal_has_weekend_tourney_division_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_division_id() const {
  return _internal_has_weekend_tourney_division_id();
}
inline void CSODOTALobby::clear_weekend_tourney_division_id() {
  _impl_.weekend_tourney_division_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline uint32_t CSODOTALobby::_internal_weekend_tourney_division_id() const {
  return _impl_.weekend_tourney_division_id_;
}
inline uint32_t CSODOTALobby::weekend_tourney_division_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_division_id)
  return _internal_weekend_tourney_division_id();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_division_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00200000u;
  _impl_.weekend_tourney_division_id_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_division_id(uint32_t value) {
  _internal_set_weekend_tourney_division_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_division_id)
}

// optional uint32 weekend_tourney_skill_level = 91;
inline bool CSODOTALobby::_internal_has_weekend_tourney_skill_level() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_skill_level() const {
  return _internal_has_weekend_tourney_skill_level();
}
inline void CSODOTALobby::clear_weekend_tourney_skill_level() {
  _impl_.weekend_tourney_skill_level_ = 0u;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline uint32_t CSODOTALobby::_internal_weekend_tourney_skill_level() const {
  return _impl_.weekend_tourney_skill_level_;
}
inline uint32_t CSODOTALobby::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_skill_level)
  return _internal_weekend_tourney_skill_level();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_skill_level(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00400000u;
  _impl_.weekend_tourney_skill_level_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_skill_level(uint32_t value) {
  _internal_set_weekend_tourney_skill_level(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 92;
inline bool CSODOTALobby::_internal_has_weekend_tourney_bracket_round() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_weekend_tourney_bracket_round() const {
  return _internal_has_weekend_tourney_bracket_round();
}
inline void CSODOTALobby::clear_weekend_tourney_bracket_round() {
  _impl_.weekend_tourney_bracket_round_ = 0u;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline uint32_t CSODOTALobby::_internal_weekend_tourney_bracket_round() const {
  return _impl_.weekend_tourney_bracket_round_;
}
inline uint32_t CSODOTALobby::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.weekend_tourney_bracket_round)
  return _internal_weekend_tourney_bracket_round();
}
inline void CSODOTALobby::_internal_set_weekend_tourney_bracket_round(uint32_t value) {
  _impl_._has_bits_[1] |= 0x01000000u;
  _impl_.weekend_tourney_bracket_round_ = value;
}
inline void CSODOTALobby::set_weekend_tourney_bracket_round(uint32_t value) {
  _internal_set_weekend_tourney_bracket_round(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.weekend_tourney_bracket_round)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
inline bool CSODOTALobby::_internal_has_bot_difficulty_dire() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_difficulty_dire() const {
  return _internal_has_bot_difficulty_dire();
}
inline void CSODOTALobby::clear_bot_difficulty_dire() {
  _impl_.bot_difficulty_dire_ = 3;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline ::DOTABotDifficulty CSODOTALobby::_internal_bot_difficulty_dire() const {
  return static_cast< ::DOTABotDifficulty >(_impl_.bot_difficulty_dire_);
}
inline ::DOTABotDifficulty CSODOTALobby::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_difficulty_dire)
  return _internal_bot_difficulty_dire();
}
inline void CSODOTALobby::_internal_set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _impl_._has_bits_[2] |= 0x00008000u;
  _impl_.bot_difficulty_dire_ = value;
}
inline void CSODOTALobby::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 94;
inline bool CSODOTALobby::_internal_has_bot_radiant() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_radiant() const {
  return _internal_has_bot_radiant();
}
inline void CSODOTALobby::clear_bot_radiant() {
  _impl_.bot_radiant_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline uint64_t CSODOTALobby::_internal_bot_radiant() const {
  return _impl_.bot_radiant_;
}
inline uint64_t CSODOTALobby::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_radiant)
  return _internal_bot_radiant();
}
inline void CSODOTALobby::_internal_set_bot_radiant(uint64_t value) {
  _impl_._has_bits_[1] |= 0x00800000u;
  _impl_.bot_radiant_ = value;
}
inline void CSODOTALobby::set_bot_radiant(uint64_t value) {
  _internal_set_bot_radiant(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_radiant)
}

// optional uint64 bot_dire = 95;
inline bool CSODOTALobby::_internal_has_bot_dire() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_bot_dire() const {
  return _internal_has_bot_dire();
}
inline void CSODOTALobby::clear_bot_dire() {
  _impl_.bot_dire_ = uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline uint64_t CSODOTALobby::_internal_bot_dire() const {
  return _impl_.bot_dire_;
}
inline uint64_t CSODOTALobby::bot_dire() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.bot_dire)
  return _internal_bot_dire();
}
inline void CSODOTALobby::_internal_set_bot_dire(uint64_t value) {
  _impl_._has_bits_[1] |= 0x04000000u;
  _impl_.bot_dire_ = value;
}
inline void CSODOTALobby::set_bot_dire(uint64_t value) {
  _internal_set_bot_dire(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.bot_dire)
}

// repeated .EEvent event_progression_enabled = 96;
inline int CSODOTALobby::_internal_event_progression_enabled_size() const {
  return _impl_.event_progression_enabled_.size();
}
inline int CSODOTALobby::event_progression_enabled_size() const {
  return _internal_event_progression_enabled_size();
}
inline void CSODOTALobby::clear_event_progression_enabled() {
  _impl_.event_progression_enabled_.Clear();
}
inline ::EEvent CSODOTALobby::_internal_event_progression_enabled(int index) const {
  return static_cast< ::EEvent >(_impl_.event_progression_enabled_.Get(index));
}
inline ::EEvent CSODOTALobby::event_progression_enabled(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.event_progression_enabled)
  return _internal_event_progression_enabled(index);
}
inline void CSODOTALobby::set_event_progression_enabled(int index, ::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_.event_progression_enabled_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.event_progression_enabled)
}
inline void CSODOTALobby::_internal_add_event_progression_enabled(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_.event_progression_enabled_.Add(value);
}
inline void CSODOTALobby::add_event_progression_enabled(::EEvent value) {
  _internal_add_event_progression_enabled(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.event_progression_enabled)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CSODOTALobby::event_progression_enabled() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.event_progression_enabled)
  return _impl_.event_progression_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSODOTALobby::_internal_mutable_event_progression_enabled() {
  return &_impl_.event_progression_enabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CSODOTALobby::mutable_event_progression_enabled() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.event_progression_enabled)
  return _internal_mutable_event_progression_enabled();
}

// optional .DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
inline bool CSODOTALobby::_internal_has_selection_priority_rules() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_selection_priority_rules() const {
  return _internal_has_selection_priority_rules();
}
inline void CSODOTALobby::clear_selection_priority_rules() {
  _impl_.selection_priority_rules_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::DOTASelectionPriorityRules CSODOTALobby::_internal_selection_priority_rules() const {
  return static_cast< ::DOTASelectionPriorityRules >(_impl_.selection_priority_rules_);
}
inline ::DOTASelectionPriorityRules CSODOTALobby::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.selection_priority_rules)
  return _internal_selection_priority_rules();
}
inline void CSODOTALobby::_internal_set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  assert(::DOTASelectionPriorityRules_IsValid(value));
  _impl_._has_bits_[1] |= 0x02000000u;
  _impl_.selection_priority_rules_ = value;
}
inline void CSODOTALobby::set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  _internal_set_selection_priority_rules(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.selection_priority_rules)
}

// optional uint32 series_previous_selection_priority_team_id = 98;
inline bool CSODOTALobby::_internal_has_series_previous_selection_priority_team_id() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_previous_selection_priority_team_id() const {
  return _internal_has_series_previous_selection_priority_team_id();
}
inline void CSODOTALobby::clear_series_previous_selection_priority_team_id() {
  _impl_.series_previous_selection_priority_team_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline uint32_t CSODOTALobby::_internal_series_previous_selection_priority_team_id() const {
  return _impl_.series_previous_selection_priority_team_id_;
}
inline uint32_t CSODOTALobby::series_previous_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_previous_selection_priority_team_id)
  return _internal_series_previous_selection_priority_team_id();
}
inline void CSODOTALobby::_internal_set_series_previous_selection_priority_team_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x08000000u;
  _impl_.series_previous_selection_priority_team_id_ = value;
}
inline void CSODOTALobby::set_series_previous_selection_priority_team_id(uint32_t value) {
  _internal_set_series_previous_selection_priority_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_previous_selection_priority_team_id)
}

// optional uint32 series_current_selection_priority_team_id = 99;
inline bool CSODOTALobby::_internal_has_series_current_selection_priority_team_id() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_selection_priority_team_id() const {
  return _internal_has_series_current_selection_priority_team_id();
}
inline void CSODOTALobby::clear_series_current_selection_priority_team_id() {
  _impl_.series_current_selection_priority_team_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline uint32_t CSODOTALobby::_internal_series_current_selection_priority_team_id() const {
  return _impl_.series_current_selection_priority_team_id_;
}
inline uint32_t CSODOTALobby::series_current_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_selection_priority_team_id)
  return _internal_series_current_selection_priority_team_id();
}
inline void CSODOTALobby::_internal_set_series_current_selection_priority_team_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x10000000u;
  _impl_.series_current_selection_priority_team_id_ = value;
}
inline void CSODOTALobby::set_series_current_selection_priority_team_id(uint32_t value) {
  _internal_set_series_current_selection_priority_team_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_selection_priority_team_id)
}

// optional .DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::_internal_has_series_current_priority_team_choice() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_priority_team_choice() const {
  return _internal_has_series_current_priority_team_choice();
}
inline void CSODOTALobby::clear_series_current_priority_team_choice() {
  _impl_.series_current_priority_team_choice_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::_internal_series_current_priority_team_choice() const {
  return static_cast< ::DOTASelectionPriorityChoice >(_impl_.series_current_priority_team_choice_);
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::series_current_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_priority_team_choice)
  return _internal_series_current_priority_team_choice();
}
inline void CSODOTALobby::_internal_set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value) {
  assert(::DOTASelectionPriorityChoice_IsValid(value));
  _impl_._has_bits_[1] |= 0x20000000u;
  _impl_.series_current_priority_team_choice_ = value;
}
inline void CSODOTALobby::set_series_current_priority_team_choice(::DOTASelectionPriorityChoice value) {
  _internal_set_series_current_priority_team_choice(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_priority_team_choice)
}

// optional .DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
inline bool CSODOTALobby::_internal_has_series_current_non_priority_team_choice() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_non_priority_team_choice() const {
  return _internal_has_series_current_non_priority_team_choice();
}
inline void CSODOTALobby::clear_series_current_non_priority_team_choice() {
  _impl_.series_current_non_priority_team_choice_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::_internal_series_current_non_priority_team_choice() const {
  return static_cast< ::DOTASelectionPriorityChoice >(_impl_.series_current_non_priority_team_choice_);
}
inline ::DOTASelectionPriorityChoice CSODOTALobby::series_current_non_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_non_priority_team_choice)
  return _internal_series_current_non_priority_team_choice();
}
inline void CSODOTALobby::_internal_set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value) {
  assert(::DOTASelectionPriorityChoice_IsValid(value));
  _impl_._has_bits_[2] |= 0x00000004u;
  _impl_.series_current_non_priority_team_choice_ = value;
}
inline void CSODOTALobby::set_series_current_non_priority_team_choice(::DOTASelectionPriorityChoice value) {
  _internal_set_series_current_non_priority_team_choice(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_non_priority_team_choice)
}

// optional bool series_current_selection_priority_used_coin_toss = 102;
inline bool CSODOTALobby::_internal_has_series_current_selection_priority_used_coin_toss() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline bool CSODOTALobby::has_series_current_selection_priority_used_coin_toss() const {
  return _internal_has_series_current_selection_priority_used_coin_toss();
}
inline void CSODOTALobby::clear_series_current_selection_priority_used_coin_toss() {
  _impl_.series_current_selection_priority_used_coin_toss_ = false;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline bool CSODOTALobby::_internal_series_current_selection_priority_used_coin_toss() const {
  return _impl_.series_current_selection_priority_used_coin_toss_;
}
inline bool CSODOTALobby::series_current_selection_priority_used_coin_toss() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.series_current_selection_priority_used_coin_toss)
  return _internal_series_current_selection_priority_used_coin_toss();
}
inline void CSODOTALobby::_internal_set_series_current_selection_priority_used_coin_toss(bool value) {
  _impl_._has_bits_[1] |= 0x80000000u;
  _impl_.series_current_selection_priority_used_coin_toss_ = value;
}
inline void CSODOTALobby::set_series_current_selection_priority_used_coin_toss(bool value) {
  _internal_set_series_current_selection_priority_used_coin_toss(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.series_current_selection_priority_used_coin_toss)
}

// optional .EEvent current_primary_event = 103 [default = EVENT_ID_NONE];
inline bool CSODOTALobby::_internal_has_current_primary_event() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline bool CSODOTALobby::has_current_primary_event() const {
  return _internal_has_current_primary_event();
}
inline void CSODOTALobby::clear_current_primary_event() {
  _impl_.current_primary_event_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::EEvent CSODOTALobby::_internal_current_primary_event() const {
  return static_cast< ::EEvent >(_impl_.current_primary_event_);
}
inline ::EEvent CSODOTALobby::current_primary_event() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.current_primary_event)
  return _internal_current_primary_event();
}
inline void CSODOTALobby::_internal_set_current_primary_event(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[2] |= 0x00000008u;
  _impl_.current_primary_event_ = value;
}
inline void CSODOTALobby::set_current_primary_event(::EEvent value) {
  _internal_set_current_primary_event(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.current_primary_event)
}

// repeated uint32 emergency_disabled_hero_ids = 105;
inline int CSODOTALobby::_internal_emergency_disabled_hero_ids_size() const {
  return _impl_.emergency_disabled_hero_ids_.size();
}
inline int CSODOTALobby::emergency_disabled_hero_ids_size() const {
  return _internal_emergency_disabled_hero_ids_size();
}
inline void CSODOTALobby::clear_emergency_disabled_hero_ids() {
  _impl_.emergency_disabled_hero_ids_.Clear();
}
inline uint32_t CSODOTALobby::_internal_emergency_disabled_hero_ids(int index) const {
  return _impl_.emergency_disabled_hero_ids_.Get(index);
}
inline uint32_t CSODOTALobby::emergency_disabled_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_emergency_disabled_hero_ids(index);
}
inline void CSODOTALobby::set_emergency_disabled_hero_ids(int index, uint32_t value) {
  _impl_.emergency_disabled_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.emergency_disabled_hero_ids)
}
inline void CSODOTALobby::_internal_add_emergency_disabled_hero_ids(uint32_t value) {
  _impl_.emergency_disabled_hero_ids_.Add(value);
}
inline void CSODOTALobby::add_emergency_disabled_hero_ids(uint32_t value) {
  _internal_add_emergency_disabled_hero_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.emergency_disabled_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::_internal_emergency_disabled_hero_ids() const {
  return _impl_.emergency_disabled_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::emergency_disabled_hero_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_emergency_disabled_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::_internal_mutable_emergency_disabled_hero_ids() {
  return &_impl_.emergency_disabled_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::mutable_emergency_disabled_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.emergency_disabled_hero_ids)
  return _internal_mutable_emergency_disabled_hero_ids();
}

// optional fixed64 custom_game_private_key = 106;
inline bool CSODOTALobby::_internal_has_custom_game_private_key() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_private_key() const {
  return _internal_has_custom_game_private_key();
}
inline void CSODOTALobby::clear_custom_game_private_key() {
  _impl_.custom_game_private_key_ = uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline uint64_t CSODOTALobby::_internal_custom_game_private_key() const {
  return _impl_.custom_game_private_key_;
}
inline uint64_t CSODOTALobby::custom_game_private_key() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_private_key)
  return _internal_custom_game_private_key();
}
inline void CSODOTALobby::_internal_set_custom_game_private_key(uint64_t value) {
  _impl_._has_bits_[2] |= 0x00000010u;
  _impl_.custom_game_private_key_ = value;
}
inline void CSODOTALobby::set_custom_game_private_key(uint64_t value) {
  _internal_set_custom_game_private_key(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_private_key)
}

// optional bool custom_game_penalties = 107;
inline bool CSODOTALobby::_internal_has_custom_game_penalties() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline bool CSODOTALobby::has_custom_game_penalties() const {
  return _internal_has_custom_game_penalties();
}
inline void CSODOTALobby::clear_custom_game_penalties() {
  _impl_.custom_game_penalties_ = false;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline bool CSODOTALobby::_internal_custom_game_penalties() const {
  return _impl_.custom_game_penalties_;
}
inline bool CSODOTALobby::custom_game_penalties() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.custom_game_penalties)
  return _internal_custom_game_penalties();
}
inline void CSODOTALobby::_internal_set_custom_game_penalties(bool value) {
  _impl_._has_bits_[2] |= 0x00000001u;
  _impl_.custom_game_penalties_ = value;
}
inline void CSODOTALobby::set_custom_game_penalties(bool value) {
  _internal_set_custom_game_penalties(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.custom_game_penalties)
}

// optional string lan_host_ping_location = 109;
inline bool CSODOTALobby::_internal_has_lan_host_ping_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lan_host_ping_location() const {
  return _internal_has_lan_host_ping_location();
}
inline void CSODOTALobby::clear_lan_host_ping_location() {
  _impl_.lan_host_ping_location_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CSODOTALobby::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lan_host_ping_location)
  return _internal_lan_host_ping_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_lan_host_ping_location(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.lan_host_ping_location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.lan_host_ping_location)
}
inline std::string* CSODOTALobby::mutable_lan_host_ping_location() {
  std::string* _s = _internal_mutable_lan_host_ping_location();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.lan_host_ping_location)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_lan_host_ping_location() const {
  return _impl_.lan_host_ping_location_.Get();
}
inline void CSODOTALobby::_internal_set_lan_host_ping_location(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.lan_host_ping_location_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_lan_host_ping_location() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.lan_host_ping_location_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.lan_host_ping_location)
  if (!_internal_has_lan_host_ping_location()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.lan_host_ping_location_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lan_host_ping_location_.IsDefault()) {
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_lan_host_ping_location(std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.lan_host_ping_location_.SetAllocated(lan_host_ping_location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lan_host_ping_location_.IsDefault()) {
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.lan_host_ping_location)
}

// optional uint32 league_node_id = 110;
inline bool CSODOTALobby::_internal_has_league_node_id() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline bool CSODOTALobby::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CSODOTALobby::clear_league_node_id() {
  _impl_.league_node_id_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline uint32_t CSODOTALobby::_internal_league_node_id() const {
  return _impl_.league_node_id_;
}
inline uint32_t CSODOTALobby::league_node_id() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_node_id)
  return _internal_league_node_id();
}
inline void CSODOTALobby::_internal_set_league_node_id(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000020u;
  _impl_.league_node_id_ = value;
}
inline void CSODOTALobby::set_league_node_id(uint32_t value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_node_id)
}

// optional uint32 match_duration = 111;
inline bool CSODOTALobby::_internal_has_match_duration() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobby::has_match_duration() const {
  return _internal_has_match_duration();
}
inline void CSODOTALobby::clear_match_duration() {
  _impl_.match_duration_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline uint32_t CSODOTALobby::_internal_match_duration() const {
  return _impl_.match_duration_;
}
inline uint32_t CSODOTALobby::match_duration() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.match_duration)
  return _internal_match_duration();
}
inline void CSODOTALobby::_internal_set_match_duration(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000040u;
  _impl_.match_duration_ = value;
}
inline void CSODOTALobby::set_match_duration(uint32_t value) {
  _internal_set_match_duration(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.match_duration)
}

// optional uint32 league_phase = 113;
inline bool CSODOTALobby::_internal_has_league_phase() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline bool CSODOTALobby::has_league_phase() const {
  return _internal_has_league_phase();
}
inline void CSODOTALobby::clear_league_phase() {
  _impl_.league_phase_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline uint32_t CSODOTALobby::_internal_league_phase() const {
  return _impl_.league_phase_;
}
inline uint32_t CSODOTALobby::league_phase() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.league_phase)
  return _internal_league_phase();
}
inline void CSODOTALobby::_internal_set_league_phase(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000080u;
  _impl_.league_phase_ = value;
}
inline void CSODOTALobby::set_league_phase(uint32_t value) {
  _internal_set_league_phase(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.league_phase)
}

// optional bool record_detailed_stats = 114;
inline bool CSODOTALobby::_internal_has_record_detailed_stats() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline bool CSODOTALobby::has_record_detailed_stats() const {
  return _internal_has_record_detailed_stats();
}
inline void CSODOTALobby::clear_record_detailed_stats() {
  _impl_.record_detailed_stats_ = false;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline bool CSODOTALobby::_internal_record_detailed_stats() const {
  return _impl_.record_detailed_stats_;
}
inline bool CSODOTALobby::record_detailed_stats() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.record_detailed_stats)
  return _internal_record_detailed_stats();
}
inline void CSODOTALobby::_internal_set_record_detailed_stats(bool value) {
  _impl_._has_bits_[2] |= 0x00000002u;
  _impl_.record_detailed_stats_ = value;
}
inline void CSODOTALobby::set_record_detailed_stats(bool value) {
  _internal_set_record_detailed_stats(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.record_detailed_stats)
}

// optional bool experimental_gameplay_enabled = 116;
inline bool CSODOTALobby::_internal_has_experimental_gameplay_enabled() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline bool CSODOTALobby::has_experimental_gameplay_enabled() const {
  return _internal_has_experimental_gameplay_enabled();
}
inline void CSODOTALobby::clear_experimental_gameplay_enabled() {
  _impl_.experimental_gameplay_enabled_ = false;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline bool CSODOTALobby::_internal_experimental_gameplay_enabled() const {
  return _impl_.experimental_gameplay_enabled_;
}
inline bool CSODOTALobby::experimental_gameplay_enabled() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.experimental_gameplay_enabled)
  return _internal_experimental_gameplay_enabled();
}
inline void CSODOTALobby::_internal_set_experimental_gameplay_enabled(bool value) {
  _impl_._has_bits_[2] |= 0x00000100u;
  _impl_.experimental_gameplay_enabled_ = value;
}
inline void CSODOTALobby::set_experimental_gameplay_enabled(bool value) {
  _internal_set_experimental_gameplay_enabled(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.experimental_gameplay_enabled)
}

// repeated .CLobbyGuildChallenge guild_challenges = 117;
inline int CSODOTALobby::_internal_guild_challenges_size() const {
  return _impl_.guild_challenges_.size();
}
inline int CSODOTALobby::guild_challenges_size() const {
  return _internal_guild_challenges_size();
}
inline void CSODOTALobby::clear_guild_challenges() {
  _impl_.guild_challenges_.Clear();
}
inline ::CLobbyGuildChallenge* CSODOTALobby::mutable_guild_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.guild_challenges)
  return _impl_.guild_challenges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >*
CSODOTALobby::mutable_guild_challenges() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.guild_challenges)
  return &_impl_.guild_challenges_;
}
inline const ::CLobbyGuildChallenge& CSODOTALobby::_internal_guild_challenges(int index) const {
  return _impl_.guild_challenges_.Get(index);
}
inline const ::CLobbyGuildChallenge& CSODOTALobby::guild_challenges(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.guild_challenges)
  return _internal_guild_challenges(index);
}
inline ::CLobbyGuildChallenge* CSODOTALobby::_internal_add_guild_challenges() {
  return _impl_.guild_challenges_.Add();
}
inline ::CLobbyGuildChallenge* CSODOTALobby::add_guild_challenges() {
  ::CLobbyGuildChallenge* _add = _internal_add_guild_challenges();
  // @@protoc_insertion_point(field_add:CSODOTALobby.guild_challenges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildChallenge >&
CSODOTALobby::guild_challenges() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.guild_challenges)
  return _impl_.guild_challenges_;
}

// repeated .CLobbyGuildDetails guild_details = 118;
inline int CSODOTALobby::_internal_guild_details_size() const {
  return _impl_.guild_details_.size();
}
inline int CSODOTALobby::guild_details_size() const {
  return _internal_guild_details_size();
}
inline void CSODOTALobby::clear_guild_details() {
  _impl_.guild_details_.Clear();
}
inline ::CLobbyGuildDetails* CSODOTALobby::mutable_guild_details(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.guild_details)
  return _impl_.guild_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >*
CSODOTALobby::mutable_guild_details() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.guild_details)
  return &_impl_.guild_details_;
}
inline const ::CLobbyGuildDetails& CSODOTALobby::_internal_guild_details(int index) const {
  return _impl_.guild_details_.Get(index);
}
inline const ::CLobbyGuildDetails& CSODOTALobby::guild_details(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.guild_details)
  return _internal_guild_details(index);
}
inline ::CLobbyGuildDetails* CSODOTALobby::_internal_add_guild_details() {
  return _impl_.guild_details_.Add();
}
inline ::CLobbyGuildDetails* CSODOTALobby::add_guild_details() {
  ::CLobbyGuildDetails* _add = _internal_add_guild_details();
  // @@protoc_insertion_point(field_add:CSODOTALobby.guild_details)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyGuildDetails >&
CSODOTALobby::guild_details() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.guild_details)
  return _impl_.guild_details_;
}

// repeated .CMsgLobbyEventPoints lobby_event_points = 119;
inline int CSODOTALobby::_internal_lobby_event_points_size() const {
  return _impl_.lobby_event_points_.size();
}
inline int CSODOTALobby::lobby_event_points_size() const {
  return _internal_lobby_event_points_size();
}
inline void CSODOTALobby::clear_lobby_event_points() {
  _impl_.lobby_event_points_.Clear();
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::mutable_lobby_event_points(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.lobby_event_points)
  return _impl_.lobby_event_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
CSODOTALobby::mutable_lobby_event_points() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.lobby_event_points)
  return &_impl_.lobby_event_points_;
}
inline const ::CMsgLobbyEventPoints& CSODOTALobby::_internal_lobby_event_points(int index) const {
  return _impl_.lobby_event_points_.Get(index);
}
inline const ::CMsgLobbyEventPoints& CSODOTALobby::lobby_event_points(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_event_points)
  return _internal_lobby_event_points(index);
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::_internal_add_lobby_event_points() {
  return _impl_.lobby_event_points_.Add();
}
inline ::CMsgLobbyEventPoints* CSODOTALobby::add_lobby_event_points() {
  ::CMsgLobbyEventPoints* _add = _internal_add_lobby_event_points();
  // @@protoc_insertion_point(field_add:CSODOTALobby.lobby_event_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
CSODOTALobby::lobby_event_points() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.lobby_event_points)
  return _impl_.lobby_event_points_;
}

// repeated uint32 requested_hero_ids = 124;
inline int CSODOTALobby::_internal_requested_hero_ids_size() const {
  return _impl_.requested_hero_ids_.size();
}
inline int CSODOTALobby::requested_hero_ids_size() const {
  return _internal_requested_hero_ids_size();
}
inline void CSODOTALobby::clear_requested_hero_ids() {
  _impl_.requested_hero_ids_.Clear();
}
inline uint32_t CSODOTALobby::_internal_requested_hero_ids(int index) const {
  return _impl_.requested_hero_ids_.Get(index);
}
inline uint32_t CSODOTALobby::requested_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.requested_hero_ids)
  return _internal_requested_hero_ids(index);
}
inline void CSODOTALobby::set_requested_hero_ids(int index, uint32_t value) {
  _impl_.requested_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.requested_hero_ids)
}
inline void CSODOTALobby::_internal_add_requested_hero_ids(uint32_t value) {
  _impl_.requested_hero_ids_.Add(value);
}
inline void CSODOTALobby::add_requested_hero_ids(uint32_t value) {
  _internal_add_requested_hero_ids(value);
  // @@protoc_insertion_point(field_add:CSODOTALobby.requested_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::_internal_requested_hero_ids() const {
  return _impl_.requested_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CSODOTALobby::requested_hero_ids() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.requested_hero_ids)
  return _internal_requested_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::_internal_mutable_requested_hero_ids() {
  return &_impl_.requested_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CSODOTALobby::mutable_requested_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.requested_hero_ids)
  return _internal_mutable_requested_hero_ids();
}

// repeated .CMsgLobbyCoachFriendRequest coach_friend_requests = 125;
inline int CSODOTALobby::_internal_coach_friend_requests_size() const {
  return _impl_.coach_friend_requests_.size();
}
inline int CSODOTALobby::coach_friend_requests_size() const {
  return _internal_coach_friend_requests_size();
}
inline void CSODOTALobby::clear_coach_friend_requests() {
  _impl_.coach_friend_requests_.Clear();
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::mutable_coach_friend_requests(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.coach_friend_requests)
  return _impl_.coach_friend_requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >*
CSODOTALobby::mutable_coach_friend_requests() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.coach_friend_requests)
  return &_impl_.coach_friend_requests_;
}
inline const ::CMsgLobbyCoachFriendRequest& CSODOTALobby::_internal_coach_friend_requests(int index) const {
  return _impl_.coach_friend_requests_.Get(index);
}
inline const ::CMsgLobbyCoachFriendRequest& CSODOTALobby::coach_friend_requests(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.coach_friend_requests)
  return _internal_coach_friend_requests(index);
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::_internal_add_coach_friend_requests() {
  return _impl_.coach_friend_requests_.Add();
}
inline ::CMsgLobbyCoachFriendRequest* CSODOTALobby::add_coach_friend_requests() {
  ::CMsgLobbyCoachFriendRequest* _add = _internal_add_coach_friend_requests();
  // @@protoc_insertion_point(field_add:CSODOTALobby.coach_friend_requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyCoachFriendRequest >&
CSODOTALobby::coach_friend_requests() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.coach_friend_requests)
  return _impl_.coach_friend_requests_;
}

// optional bool is_in_steam_china = 126;
inline bool CSODOTALobby::_internal_has_is_in_steam_china() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline bool CSODOTALobby::has_is_in_steam_china() const {
  return _internal_has_is_in_steam_china();
}
inline void CSODOTALobby::clear_is_in_steam_china() {
  _impl_.is_in_steam_china_ = false;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline bool CSODOTALobby::_internal_is_in_steam_china() const {
  return _impl_.is_in_steam_china_;
}
inline bool CSODOTALobby::is_in_steam_china() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.is_in_steam_china)
  return _internal_is_in_steam_china();
}
inline void CSODOTALobby::_internal_set_is_in_steam_china(bool value) {
  _impl_._has_bits_[2] |= 0x00000200u;
  _impl_.is_in_steam_china_ = value;
}
inline void CSODOTALobby::set_is_in_steam_china(bool value) {
  _internal_set_is_in_steam_china(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.is_in_steam_china)
}

// optional bool with_scenario_save = 127;
inline bool CSODOTALobby::_internal_has_with_scenario_save() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline bool CSODOTALobby::has_with_scenario_save() const {
  return _internal_has_with_scenario_save();
}
inline void CSODOTALobby::clear_with_scenario_save() {
  _impl_.with_scenario_save_ = false;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline bool CSODOTALobby::_internal_with_scenario_save() const {
  return _impl_.with_scenario_save_;
}
inline bool CSODOTALobby::with_scenario_save() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.with_scenario_save)
  return _internal_with_scenario_save();
}
inline void CSODOTALobby::_internal_set_with_scenario_save(bool value) {
  _impl_._has_bits_[2] |= 0x00000400u;
  _impl_.with_scenario_save_ = value;
}
inline void CSODOTALobby::set_with_scenario_save(bool value) {
  _internal_set_with_scenario_save(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.with_scenario_save)
}

// optional uint32 lobby_creation_time = 128;
inline bool CSODOTALobby::_internal_has_lobby_creation_time() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline bool CSODOTALobby::has_lobby_creation_time() const {
  return _internal_has_lobby_creation_time();
}
inline void CSODOTALobby::clear_lobby_creation_time() {
  _impl_.lobby_creation_time_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline uint32_t CSODOTALobby::_internal_lobby_creation_time() const {
  return _impl_.lobby_creation_time_;
}
inline uint32_t CSODOTALobby::lobby_creation_time() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.lobby_creation_time)
  return _internal_lobby_creation_time();
}
inline void CSODOTALobby::_internal_set_lobby_creation_time(uint32_t value) {
  _impl_._has_bits_[2] |= 0x00000800u;
  _impl_.lobby_creation_time_ = value;
}
inline void CSODOTALobby::set_lobby_creation_time(uint32_t value) {
  _internal_set_lobby_creation_time(value);
  // @@protoc_insertion_point(field_set:CSODOTALobby.lobby_creation_time)
}

// optional string event_game_definition = 129;
inline bool CSODOTALobby::_internal_has_event_game_definition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSODOTALobby::has_event_game_definition() const {
  return _internal_has_event_game_definition();
}
inline void CSODOTALobby::clear_event_game_definition() {
  _impl_.event_game_definition_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CSODOTALobby::event_game_definition() const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.event_game_definition)
  return _internal_event_game_definition();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CSODOTALobby::set_event_game_definition(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.event_game_definition_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CSODOTALobby.event_game_definition)
}
inline std::string* CSODOTALobby::mutable_event_game_definition() {
  std::string* _s = _internal_mutable_event_game_definition();
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.event_game_definition)
  return _s;
}
inline const std::string& CSODOTALobby::_internal_event_game_definition() const {
  return _impl_.event_game_definition_.Get();
}
inline void CSODOTALobby::_internal_set_event_game_definition(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.event_game_definition_.Set(value, GetArenaForAllocation());
}
inline std::string* CSODOTALobby::_internal_mutable_event_game_definition() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.event_game_definition_.Mutable(GetArenaForAllocation());
}
inline std::string* CSODOTALobby::release_event_game_definition() {
  // @@protoc_insertion_point(field_release:CSODOTALobby.event_game_definition)
  if (!_internal_has_event_game_definition()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.event_game_definition_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_definition_.IsDefault()) {
    _impl_.event_game_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CSODOTALobby::set_allocated_event_game_definition(std::string* event_game_definition) {
  if (event_game_definition != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.event_game_definition_.SetAllocated(event_game_definition, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.event_game_definition_.IsDefault()) {
    _impl_.event_game_definition_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CSODOTALobby.event_game_definition)
}

// repeated .CSODOTALobby.CExtraMsg extra_startup_messages = 130;
inline int CSODOTALobby::_internal_extra_startup_messages_size() const {
  return _impl_.extra_startup_messages_.size();
}
inline int CSODOTALobby::extra_startup_messages_size() const {
  return _internal_extra_startup_messages_size();
}
inline void CSODOTALobby::clear_extra_startup_messages() {
  _impl_.extra_startup_messages_.Clear();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_startup_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTALobby.extra_startup_messages)
  return _impl_.extra_startup_messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_startup_messages() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTALobby.extra_startup_messages)
  return &_impl_.extra_startup_messages_;
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::_internal_extra_startup_messages(int index) const {
  return _impl_.extra_startup_messages_.Get(index);
}
inline const ::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_startup_messages(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTALobby.extra_startup_messages)
  return _internal_extra_startup_messages(index);
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::_internal_add_extra_startup_messages() {
  return _impl_.extra_startup_messages_.Add();
}
inline ::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_startup_messages() {
  ::CSODOTALobby_CExtraMsg* _add = _internal_add_extra_startup_messages();
  // @@protoc_insertion_point(field_add:CSODOTALobby.extra_startup_messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_startup_messages() const {
  // @@protoc_insertion_point(field_list:CSODOTALobby.extra_startup_messages)
  return _impl_.extra_startup_messages_;
}

// -------------------------------------------------------------------

// CSODOTAServerLobby

// repeated .CSODOTAServerLobbyMember all_members = 1;
inline int CSODOTAServerLobby::_internal_all_members_size() const {
  return _impl_.all_members_.size();
}
inline int CSODOTAServerLobby::all_members_size() const {
  return _internal_all_members_size();
}
inline void CSODOTAServerLobby::clear_all_members() {
  _impl_.all_members_.Clear();
}
inline ::CSODOTAServerLobbyMember* CSODOTAServerLobby::mutable_all_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAServerLobby.all_members)
  return _impl_.all_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerLobbyMember >*
CSODOTAServerLobby::mutable_all_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAServerLobby.all_members)
  return &_impl_.all_members_;
}
inline const ::CSODOTAServerLobbyMember& CSODOTAServerLobby::_internal_all_members(int index) const {
  return _impl_.all_members_.Get(index);
}
inline const ::CSODOTAServerLobbyMember& CSODOTAServerLobby::all_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAServerLobby.all_members)
  return _internal_all_members(index);
}
inline ::CSODOTAServerLobbyMember* CSODOTAServerLobby::_internal_add_all_members() {
  return _impl_.all_members_.Add();
}
inline ::CSODOTAServerLobbyMember* CSODOTAServerLobby::add_all_members() {
  ::CSODOTAServerLobbyMember* _add = _internal_add_all_members();
  // @@protoc_insertion_point(field_add:CSODOTAServerLobby.all_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerLobbyMember >&
CSODOTAServerLobby::all_members() const {
  // @@protoc_insertion_point(field_list:CSODOTAServerLobby.all_members)
  return _impl_.all_members_;
}

// -------------------------------------------------------------------

// CSODOTAStaticLobby

// repeated .CSODOTAStaticLobbyMember all_members = 1;
inline int CSODOTAStaticLobby::_internal_all_members_size() const {
  return _impl_.all_members_.size();
}
inline int CSODOTAStaticLobby::all_members_size() const {
  return _internal_all_members_size();
}
inline void CSODOTAStaticLobby::clear_all_members() {
  _impl_.all_members_.Clear();
}
inline ::CSODOTAStaticLobbyMember* CSODOTAStaticLobby::mutable_all_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAStaticLobby.all_members)
  return _impl_.all_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAStaticLobbyMember >*
CSODOTAStaticLobby::mutable_all_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAStaticLobby.all_members)
  return &_impl_.all_members_;
}
inline const ::CSODOTAStaticLobbyMember& CSODOTAStaticLobby::_internal_all_members(int index) const {
  return _impl_.all_members_.Get(index);
}
inline const ::CSODOTAStaticLobbyMember& CSODOTAStaticLobby::all_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAStaticLobby.all_members)
  return _internal_all_members(index);
}
inline ::CSODOTAStaticLobbyMember* CSODOTAStaticLobby::_internal_add_all_members() {
  return _impl_.all_members_.Add();
}
inline ::CSODOTAStaticLobbyMember* CSODOTAStaticLobby::add_all_members() {
  ::CSODOTAStaticLobbyMember* _add = _internal_add_all_members();
  // @@protoc_insertion_point(field_add:CSODOTAStaticLobby.all_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAStaticLobbyMember >&
CSODOTAStaticLobby::all_members() const {
  // @@protoc_insertion_point(field_list:CSODOTAStaticLobby.all_members)
  return _impl_.all_members_;
}

// -------------------------------------------------------------------

// CSODOTAServerStaticLobby

// repeated .CSODOTAServerStaticLobbyMember all_members = 1;
inline int CSODOTAServerStaticLobby::_internal_all_members_size() const {
  return _impl_.all_members_.size();
}
inline int CSODOTAServerStaticLobby::all_members_size() const {
  return _internal_all_members_size();
}
inline void CSODOTAServerStaticLobby::clear_all_members() {
  _impl_.all_members_.Clear();
}
inline ::CSODOTAServerStaticLobbyMember* CSODOTAServerStaticLobby::mutable_all_members(int index) {
  // @@protoc_insertion_point(field_mutable:CSODOTAServerStaticLobby.all_members)
  return _impl_.all_members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerStaticLobbyMember >*
CSODOTAServerStaticLobby::mutable_all_members() {
  // @@protoc_insertion_point(field_mutable_list:CSODOTAServerStaticLobby.all_members)
  return &_impl_.all_members_;
}
inline const ::CSODOTAServerStaticLobbyMember& CSODOTAServerStaticLobby::_internal_all_members(int index) const {
  return _impl_.all_members_.Get(index);
}
inline const ::CSODOTAServerStaticLobbyMember& CSODOTAServerStaticLobby::all_members(int index) const {
  // @@protoc_insertion_point(field_get:CSODOTAServerStaticLobby.all_members)
  return _internal_all_members(index);
}
inline ::CSODOTAServerStaticLobbyMember* CSODOTAServerStaticLobby::_internal_add_all_members() {
  return _impl_.all_members_.Add();
}
inline ::CSODOTAServerStaticLobbyMember* CSODOTAServerStaticLobby::add_all_members() {
  ::CSODOTAServerStaticLobbyMember* _add = _internal_add_all_members();
  // @@protoc_insertion_point(field_add:CSODOTAServerStaticLobby.all_members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSODOTAServerStaticLobbyMember >&
CSODOTAServerStaticLobby::all_members() const {
  // @@protoc_insertion_point(field_list:CSODOTAServerStaticLobby.all_members)
  return _impl_.all_members_;
}

// -------------------------------------------------------------------

// CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange

// optional uint32 message_id_start = 1 [default = 4294967295];
inline bool CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_has_message_id_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::has_message_id_start() const {
  return _internal_has_message_id_start();
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::clear_message_id_start() {
  _impl_.message_id_start_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_message_id_start() const {
  return _impl_.message_id_start_;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::message_id_start() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange.message_id_start)
  return _internal_message_id_start();
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_set_message_id_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_id_start_ = value;
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::set_message_id_start(uint32_t value) {
  _internal_set_message_id_start(value);
  // @@protoc_insertion_point(field_set:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange.message_id_start)
}

// optional uint32 message_id_end = 2 [default = 4294967295];
inline bool CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_has_message_id_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::has_message_id_end() const {
  return _internal_has_message_id_end();
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::clear_message_id_end() {
  _impl_.message_id_end_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_message_id_end() const {
  return _impl_.message_id_end_;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::message_id_end() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange.message_id_end)
  return _internal_message_id_end();
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::_internal_set_message_id_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_id_end_ = value;
}
inline void CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange::set_message_id_end(uint32_t value) {
  _internal_set_message_id_end(value);
  // @@protoc_insertion_point(field_set:CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange.message_id_end)
}

// -------------------------------------------------------------------

// CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange

// optional uint32 message_id_start = 1 [default = 4294967295];
inline bool CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_has_message_id_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::has_message_id_start() const {
  return _internal_has_message_id_start();
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::clear_message_id_start() {
  _impl_.message_id_start_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_message_id_start() const {
  return _impl_.message_id_start_;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::message_id_start() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange.message_id_start)
  return _internal_message_id_start();
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_set_message_id_start(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_id_start_ = value;
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::set_message_id_start(uint32_t value) {
  _internal_set_message_id_start(value);
  // @@protoc_insertion_point(field_set:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange.message_id_start)
}

// optional uint32 message_id_end = 2 [default = 4294967295];
inline bool CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_has_message_id_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::has_message_id_end() const {
  return _internal_has_message_id_end();
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::clear_message_id_end() {
  _impl_.message_id_end_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_message_id_end() const {
  return _impl_.message_id_end_;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::message_id_end() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange.message_id_end)
  return _internal_message_id_end();
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::_internal_set_message_id_end(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_id_end_ = value;
}
inline void CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange::set_message_id_end(uint32_t value) {
  _internal_set_message_id_end(value);
  // @@protoc_insertion_point(field_set:CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange.message_id_end)
}

// -------------------------------------------------------------------

// CMsgAdditionalLobbyStartupAccountData

// optional uint32 account_id = 1;
inline bool CMsgAdditionalLobbyStartupAccountData::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgAdditionalLobbyStartupAccountData::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgAdditionalLobbyStartupAccountData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.account_id)
  return _internal_account_id();
}
inline void CMsgAdditionalLobbyStartupAccountData::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgAdditionalLobbyStartupAccountData::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgAdditionalLobbyStartupAccountData.account_id)
}

// optional .CMsgLobbyPlayerPlusSubscriptionData plus_data = 2;
inline bool CMsgAdditionalLobbyStartupAccountData::_internal_has_plus_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plus_data_ != nullptr);
  return value;
}
inline bool CMsgAdditionalLobbyStartupAccountData::has_plus_data() const {
  return _internal_has_plus_data();
}
inline void CMsgAdditionalLobbyStartupAccountData::clear_plus_data() {
  if (_impl_.plus_data_ != nullptr) _impl_.plus_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgLobbyPlayerPlusSubscriptionData& CMsgAdditionalLobbyStartupAccountData::_internal_plus_data() const {
  const ::CMsgLobbyPlayerPlusSubscriptionData* p = _impl_.plus_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgLobbyPlayerPlusSubscriptionData&>(
      ::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_);
}
inline const ::CMsgLobbyPlayerPlusSubscriptionData& CMsgAdditionalLobbyStartupAccountData::plus_data() const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.plus_data)
  return _internal_plus_data();
}
inline void CMsgAdditionalLobbyStartupAccountData::unsafe_arena_set_allocated_plus_data(
    ::CMsgLobbyPlayerPlusSubscriptionData* plus_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plus_data_);
  }
  _impl_.plus_data_ = plus_data;
  if (plus_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgAdditionalLobbyStartupAccountData.plus_data)
}
inline ::CMsgLobbyPlayerPlusSubscriptionData* CMsgAdditionalLobbyStartupAccountData::release_plus_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLobbyPlayerPlusSubscriptionData* temp = _impl_.plus_data_;
  _impl_.plus_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgLobbyPlayerPlusSubscriptionData* CMsgAdditionalLobbyStartupAccountData::unsafe_arena_release_plus_data() {
  // @@protoc_insertion_point(field_release:CMsgAdditionalLobbyStartupAccountData.plus_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLobbyPlayerPlusSubscriptionData* temp = _impl_.plus_data_;
  _impl_.plus_data_ = nullptr;
  return temp;
}
inline ::CMsgLobbyPlayerPlusSubscriptionData* CMsgAdditionalLobbyStartupAccountData::_internal_mutable_plus_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plus_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgLobbyPlayerPlusSubscriptionData>(GetArenaForAllocation());
    _impl_.plus_data_ = p;
  }
  return _impl_.plus_data_;
}
inline ::CMsgLobbyPlayerPlusSubscriptionData* CMsgAdditionalLobbyStartupAccountData::mutable_plus_data() {
  ::CMsgLobbyPlayerPlusSubscriptionData* _msg = _internal_mutable_plus_data();
  // @@protoc_insertion_point(field_mutable:CMsgAdditionalLobbyStartupAccountData.plus_data)
  return _msg;
}
inline void CMsgAdditionalLobbyStartupAccountData::set_allocated_plus_data(::CMsgLobbyPlayerPlusSubscriptionData* plus_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.plus_data_;
  }
  if (plus_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(plus_data);
    if (message_arena != submessage_arena) {
      plus_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plus_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plus_data_ = plus_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgAdditionalLobbyStartupAccountData.plus_data)
}

// repeated .CMsgAdditionalLobbyStartupAccountData.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 3;
inline int CMsgAdditionalLobbyStartupAccountData::_internal_unlocked_chat_wheel_message_ranges_size() const {
  return _impl_.unlocked_chat_wheel_message_ranges_.size();
}
inline int CMsgAdditionalLobbyStartupAccountData::unlocked_chat_wheel_message_ranges_size() const {
  return _internal_unlocked_chat_wheel_message_ranges_size();
}
inline void CMsgAdditionalLobbyStartupAccountData::clear_unlocked_chat_wheel_message_ranges() {
  _impl_.unlocked_chat_wheel_message_ranges_.Clear();
}
inline ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::mutable_unlocked_chat_wheel_message_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges)
  return _impl_.unlocked_chat_wheel_message_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >*
CMsgAdditionalLobbyStartupAccountData::mutable_unlocked_chat_wheel_message_ranges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges)
  return &_impl_.unlocked_chat_wheel_message_ranges_;
}
inline const ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& CMsgAdditionalLobbyStartupAccountData::_internal_unlocked_chat_wheel_message_ranges(int index) const {
  return _impl_.unlocked_chat_wheel_message_ranges_.Get(index);
}
inline const ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange& CMsgAdditionalLobbyStartupAccountData::unlocked_chat_wheel_message_ranges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges)
  return _internal_unlocked_chat_wheel_message_ranges(index);
}
inline ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::_internal_add_unlocked_chat_wheel_message_ranges() {
  return _impl_.unlocked_chat_wheel_message_ranges_.Add();
}
inline ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::add_unlocked_chat_wheel_message_ranges() {
  ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange* _add = _internal_add_unlocked_chat_wheel_message_ranges();
  // @@protoc_insertion_point(field_add:CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_ChatWheelMessageRange >&
CMsgAdditionalLobbyStartupAccountData::unlocked_chat_wheel_message_ranges() const {
  // @@protoc_insertion_point(field_list:CMsgAdditionalLobbyStartupAccountData.unlocked_chat_wheel_message_ranges)
  return _impl_.unlocked_chat_wheel_message_ranges_;
}

// repeated .CMsgAdditionalLobbyStartupAccountData.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 4;
inline int CMsgAdditionalLobbyStartupAccountData::_internal_unlocked_ping_wheel_message_ranges_size() const {
  return _impl_.unlocked_ping_wheel_message_ranges_.size();
}
inline int CMsgAdditionalLobbyStartupAccountData::unlocked_ping_wheel_message_ranges_size() const {
  return _internal_unlocked_ping_wheel_message_ranges_size();
}
inline void CMsgAdditionalLobbyStartupAccountData::clear_unlocked_ping_wheel_message_ranges() {
  _impl_.unlocked_ping_wheel_message_ranges_.Clear();
}
inline ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::mutable_unlocked_ping_wheel_message_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges)
  return _impl_.unlocked_ping_wheel_message_ranges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >*
CMsgAdditionalLobbyStartupAccountData::mutable_unlocked_ping_wheel_message_ranges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges)
  return &_impl_.unlocked_ping_wheel_message_ranges_;
}
inline const ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& CMsgAdditionalLobbyStartupAccountData::_internal_unlocked_ping_wheel_message_ranges(int index) const {
  return _impl_.unlocked_ping_wheel_message_ranges_.Get(index);
}
inline const ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange& CMsgAdditionalLobbyStartupAccountData::unlocked_ping_wheel_message_ranges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges)
  return _internal_unlocked_ping_wheel_message_ranges(index);
}
inline ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::_internal_add_unlocked_ping_wheel_message_ranges() {
  return _impl_.unlocked_ping_wheel_message_ranges_.Add();
}
inline ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* CMsgAdditionalLobbyStartupAccountData::add_unlocked_ping_wheel_message_ranges() {
  ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange* _add = _internal_add_unlocked_ping_wheel_message_ranges();
  // @@protoc_insertion_point(field_add:CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgAdditionalLobbyStartupAccountData_PingWheelMessageRange >&
CMsgAdditionalLobbyStartupAccountData::unlocked_ping_wheel_message_ranges() const {
  // @@protoc_insertion_point(field_list:CMsgAdditionalLobbyStartupAccountData.unlocked_ping_wheel_message_ranges)
  return _impl_.unlocked_ping_wheel_message_ranges_;
}

// -------------------------------------------------------------------

// CMsgLobbyInitializationComplete

// -------------------------------------------------------------------

// CMsgLobbyPlaytestDetails

// optional string json = 1;
inline bool CMsgLobbyPlaytestDetails::_internal_has_json() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyPlaytestDetails::has_json() const {
  return _internal_has_json();
}
inline void CMsgLobbyPlaytestDetails::clear_json() {
  _impl_.json_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLobbyPlaytestDetails::json() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyPlaytestDetails.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgLobbyPlaytestDetails::set_json(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.json_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgLobbyPlaytestDetails.json)
}
inline std::string* CMsgLobbyPlaytestDetails::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:CMsgLobbyPlaytestDetails.json)
  return _s;
}
inline const std::string& CMsgLobbyPlaytestDetails::_internal_json() const {
  return _impl_.json_.Get();
}
inline void CMsgLobbyPlaytestDetails::_internal_set_json(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.json_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgLobbyPlaytestDetails::_internal_mutable_json() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.json_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgLobbyPlaytestDetails::release_json() {
  // @@protoc_insertion_point(field_release:CMsgLobbyPlaytestDetails.json)
  if (!_internal_has_json()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.json_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_.IsDefault()) {
    _impl_.json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgLobbyPlaytestDetails::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.json_.SetAllocated(json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.json_.IsDefault()) {
    _impl_.json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyPlaytestDetails.json)
}

// -------------------------------------------------------------------

// CMsgLocalServerGuildData

// optional uint32 guild_id = 1;
inline bool CMsgLocalServerGuildData::_internal_has_guild_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_id() const {
  return _internal_has_guild_id();
}
inline void CMsgLocalServerGuildData::clear_guild_id() {
  _impl_.guild_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_id() const {
  return _impl_.guild_id_;
}
inline uint32_t CMsgLocalServerGuildData::guild_id() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_id)
  return _internal_guild_id();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guild_id_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_id(uint32_t value) {
  _internal_set_guild_id(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_id)
}

// optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
inline bool CMsgLocalServerGuildData::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgLocalServerGuildData::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::EEvent CMsgLocalServerGuildData::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CMsgLocalServerGuildData::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.event_id)
  return _internal_event_id();
}
inline void CMsgLocalServerGuildData::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_id_ = value;
}
inline void CMsgLocalServerGuildData::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.event_id)
}

// optional uint32 guild_points = 3;
inline bool CMsgLocalServerGuildData::_internal_has_guild_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_points() const {
  return _internal_has_guild_points();
}
inline void CMsgLocalServerGuildData::clear_guild_points() {
  _impl_.guild_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_points() const {
  return _impl_.guild_points_;
}
inline uint32_t CMsgLocalServerGuildData::guild_points() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_points)
  return _internal_guild_points();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.guild_points_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_points(uint32_t value) {
  _internal_set_guild_points(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_points)
}

// optional uint64 guild_logo = 4;
inline bool CMsgLocalServerGuildData::_internal_has_guild_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_logo() const {
  return _internal_has_guild_logo();
}
inline void CMsgLocalServerGuildData::clear_guild_logo() {
  _impl_.guild_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgLocalServerGuildData::_internal_guild_logo() const {
  return _impl_.guild_logo_;
}
inline uint64_t CMsgLocalServerGuildData::guild_logo() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_logo)
  return _internal_guild_logo();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.guild_logo_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_logo(uint64_t value) {
  _internal_set_guild_logo(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_logo)
}

// optional uint32 guild_primary_color = 5;
inline bool CMsgLocalServerGuildData::_internal_has_guild_primary_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_primary_color() const {
  return _internal_has_guild_primary_color();
}
inline void CMsgLocalServerGuildData::clear_guild_primary_color() {
  _impl_.guild_primary_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_primary_color() const {
  return _impl_.guild_primary_color_;
}
inline uint32_t CMsgLocalServerGuildData::guild_primary_color() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_primary_color)
  return _internal_guild_primary_color();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_primary_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.guild_primary_color_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_primary_color(uint32_t value) {
  _internal_set_guild_primary_color(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_primary_color)
}

// optional uint32 guild_secondary_color = 6;
inline bool CMsgLocalServerGuildData::_internal_has_guild_secondary_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_secondary_color() const {
  return _internal_has_guild_secondary_color();
}
inline void CMsgLocalServerGuildData::clear_guild_secondary_color() {
  _impl_.guild_secondary_color_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_secondary_color() const {
  return _impl_.guild_secondary_color_;
}
inline uint32_t CMsgLocalServerGuildData::guild_secondary_color() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_secondary_color)
  return _internal_guild_secondary_color();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_secondary_color(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.guild_secondary_color_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_secondary_color(uint32_t value) {
  _internal_set_guild_secondary_color(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_secondary_color)
}

// optional uint32 guild_pattern = 7;
inline bool CMsgLocalServerGuildData::_internal_has_guild_pattern() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_pattern() const {
  return _internal_has_guild_pattern();
}
inline void CMsgLocalServerGuildData::clear_guild_pattern() {
  _impl_.guild_pattern_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_pattern() const {
  return _impl_.guild_pattern_;
}
inline uint32_t CMsgLocalServerGuildData::guild_pattern() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_pattern)
  return _internal_guild_pattern();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_pattern(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.guild_pattern_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_pattern(uint32_t value) {
  _internal_set_guild_pattern(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_pattern)
}

// optional uint32 guild_flags = 8;
inline bool CMsgLocalServerGuildData::_internal_has_guild_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_flags() const {
  return _internal_has_guild_flags();
}
inline void CMsgLocalServerGuildData::clear_guild_flags() {
  _impl_.guild_flags_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_flags() const {
  return _impl_.guild_flags_;
}
inline uint32_t CMsgLocalServerGuildData::guild_flags() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_flags)
  return _internal_guild_flags();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_flags(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.guild_flags_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_flags(uint32_t value) {
  _internal_set_guild_flags(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_flags)
}

// optional uint32 guild_weekly_percentile = 9;
inline bool CMsgLocalServerGuildData::_internal_has_guild_weekly_percentile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgLocalServerGuildData::has_guild_weekly_percentile() const {
  return _internal_has_guild_weekly_percentile();
}
inline void CMsgLocalServerGuildData::clear_guild_weekly_percentile() {
  _impl_.guild_weekly_percentile_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgLocalServerGuildData::_internal_guild_weekly_percentile() const {
  return _impl_.guild_weekly_percentile_;
}
inline uint32_t CMsgLocalServerGuildData::guild_weekly_percentile() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerGuildData.guild_weekly_percentile)
  return _internal_guild_weekly_percentile();
}
inline void CMsgLocalServerGuildData::_internal_set_guild_weekly_percentile(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.guild_weekly_percentile_ = value;
}
inline void CMsgLocalServerGuildData::set_guild_weekly_percentile(uint32_t value) {
  _internal_set_guild_weekly_percentile(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerGuildData.guild_weekly_percentile)
}

// -------------------------------------------------------------------

// CMsgLocalServerFakeLobbyData

// optional uint32 account_id = 1;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgLocalServerFakeLobbyData::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgLocalServerFakeLobbyData::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgLocalServerFakeLobbyData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.account_id)
  return _internal_account_id();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.account_id_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.account_id)
}

// repeated .CMsgLobbyEventPoints event_points = 2;
inline int CMsgLocalServerFakeLobbyData::_internal_event_points_size() const {
  return _impl_.event_points_.size();
}
inline int CMsgLocalServerFakeLobbyData::event_points_size() const {
  return _internal_event_points_size();
}
inline void CMsgLocalServerFakeLobbyData::clear_event_points() {
  _impl_.event_points_.Clear();
}
inline ::CMsgLobbyEventPoints* CMsgLocalServerFakeLobbyData::mutable_event_points(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLocalServerFakeLobbyData.event_points)
  return _impl_.event_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >*
CMsgLocalServerFakeLobbyData::mutable_event_points() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLocalServerFakeLobbyData.event_points)
  return &_impl_.event_points_;
}
inline const ::CMsgLobbyEventPoints& CMsgLocalServerFakeLobbyData::_internal_event_points(int index) const {
  return _impl_.event_points_.Get(index);
}
inline const ::CMsgLobbyEventPoints& CMsgLocalServerFakeLobbyData::event_points(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.event_points)
  return _internal_event_points(index);
}
inline ::CMsgLobbyEventPoints* CMsgLocalServerFakeLobbyData::_internal_add_event_points() {
  return _impl_.event_points_.Add();
}
inline ::CMsgLobbyEventPoints* CMsgLocalServerFakeLobbyData::add_event_points() {
  ::CMsgLobbyEventPoints* _add = _internal_add_event_points();
  // @@protoc_insertion_point(field_add:CMsgLocalServerFakeLobbyData.event_points)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgLobbyEventPoints >&
CMsgLocalServerFakeLobbyData::event_points() const {
  // @@protoc_insertion_point(field_list:CMsgLocalServerFakeLobbyData.event_points)
  return _impl_.event_points_;
}

// optional bool is_plus_subscriber = 3;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_is_plus_subscriber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_is_plus_subscriber() const {
  return _internal_has_is_plus_subscriber();
}
inline void CMsgLocalServerFakeLobbyData::clear_is_plus_subscriber() {
  _impl_.is_plus_subscriber_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgLocalServerFakeLobbyData::_internal_is_plus_subscriber() const {
  return _impl_.is_plus_subscriber_;
}
inline bool CMsgLocalServerFakeLobbyData::is_plus_subscriber() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.is_plus_subscriber)
  return _internal_is_plus_subscriber();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_is_plus_subscriber(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.is_plus_subscriber_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_is_plus_subscriber(bool value) {
  _internal_set_is_plus_subscriber(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.is_plus_subscriber)
}

// optional uint32 primary_event_id = 4;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_primary_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_primary_event_id() const {
  return _internal_has_primary_event_id();
}
inline void CMsgLocalServerFakeLobbyData::clear_primary_event_id() {
  _impl_.primary_event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgLocalServerFakeLobbyData::_internal_primary_event_id() const {
  return _impl_.primary_event_id_;
}
inline uint32_t CMsgLocalServerFakeLobbyData::primary_event_id() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.primary_event_id)
  return _internal_primary_event_id();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_primary_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.primary_event_id_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_primary_event_id(uint32_t value) {
  _internal_set_primary_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.primary_event_id)
}

// optional uint32 favorite_team = 5;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_favorite_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_favorite_team() const {
  return _internal_has_favorite_team();
}
inline void CMsgLocalServerFakeLobbyData::clear_favorite_team() {
  _impl_.favorite_team_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgLocalServerFakeLobbyData::_internal_favorite_team() const {
  return _impl_.favorite_team_;
}
inline uint32_t CMsgLocalServerFakeLobbyData::favorite_team() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.favorite_team)
  return _internal_favorite_team();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_favorite_team(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.favorite_team_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_favorite_team(uint32_t value) {
  _internal_set_favorite_team(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.favorite_team)
}

// optional uint32 favorite_team_quality = 6;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_favorite_team_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_favorite_team_quality() const {
  return _internal_has_favorite_team_quality();
}
inline void CMsgLocalServerFakeLobbyData::clear_favorite_team_quality() {
  _impl_.favorite_team_quality_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgLocalServerFakeLobbyData::_internal_favorite_team_quality() const {
  return _impl_.favorite_team_quality_;
}
inline uint32_t CMsgLocalServerFakeLobbyData::favorite_team_quality() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.favorite_team_quality)
  return _internal_favorite_team_quality();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_favorite_team_quality(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.favorite_team_quality_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_favorite_team_quality(uint32_t value) {
  _internal_set_favorite_team_quality(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.favorite_team_quality)
}

// optional .CMsgLocalServerGuildData guild_info = 7;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_guild_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.guild_info_ != nullptr);
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_guild_info() const {
  return _internal_has_guild_info();
}
inline void CMsgLocalServerFakeLobbyData::clear_guild_info() {
  if (_impl_.guild_info_ != nullptr) _impl_.guild_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgLocalServerGuildData& CMsgLocalServerFakeLobbyData::_internal_guild_info() const {
  const ::CMsgLocalServerGuildData* p = _impl_.guild_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgLocalServerGuildData&>(
      ::_CMsgLocalServerGuildData_default_instance_);
}
inline const ::CMsgLocalServerGuildData& CMsgLocalServerFakeLobbyData::guild_info() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.guild_info)
  return _internal_guild_info();
}
inline void CMsgLocalServerFakeLobbyData::unsafe_arena_set_allocated_guild_info(
    ::CMsgLocalServerGuildData* guild_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.guild_info_);
  }
  _impl_.guild_info_ = guild_info;
  if (guild_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgLocalServerFakeLobbyData.guild_info)
}
inline ::CMsgLocalServerGuildData* CMsgLocalServerFakeLobbyData::release_guild_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLocalServerGuildData* temp = _impl_.guild_info_;
  _impl_.guild_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgLocalServerGuildData* CMsgLocalServerFakeLobbyData::unsafe_arena_release_guild_info() {
  // @@protoc_insertion_point(field_release:CMsgLocalServerFakeLobbyData.guild_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgLocalServerGuildData* temp = _impl_.guild_info_;
  _impl_.guild_info_ = nullptr;
  return temp;
}
inline ::CMsgLocalServerGuildData* CMsgLocalServerFakeLobbyData::_internal_mutable_guild_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.guild_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgLocalServerGuildData>(GetArenaForAllocation());
    _impl_.guild_info_ = p;
  }
  return _impl_.guild_info_;
}
inline ::CMsgLocalServerGuildData* CMsgLocalServerFakeLobbyData::mutable_guild_info() {
  ::CMsgLocalServerGuildData* _msg = _internal_mutable_guild_info();
  // @@protoc_insertion_point(field_mutable:CMsgLocalServerFakeLobbyData.guild_info)
  return _msg;
}
inline void CMsgLocalServerFakeLobbyData::set_allocated_guild_info(::CMsgLocalServerGuildData* guild_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.guild_info_;
  }
  if (guild_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(guild_info);
    if (message_arena != submessage_arena) {
      guild_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guild_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.guild_info_ = guild_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgLocalServerFakeLobbyData.guild_info)
}

// optional uint32 teleport_fx_level = 8;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_teleport_fx_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_teleport_fx_level() const {
  return _internal_has_teleport_fx_level();
}
inline void CMsgLocalServerFakeLobbyData::clear_teleport_fx_level() {
  _impl_.teleport_fx_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgLocalServerFakeLobbyData::_internal_teleport_fx_level() const {
  return _impl_.teleport_fx_level_;
}
inline uint32_t CMsgLocalServerFakeLobbyData::teleport_fx_level() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.teleport_fx_level)
  return _internal_teleport_fx_level();
}
inline void CMsgLocalServerFakeLobbyData::_internal_set_teleport_fx_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.teleport_fx_level_ = value;
}
inline void CMsgLocalServerFakeLobbyData::set_teleport_fx_level(uint32_t value) {
  _internal_set_teleport_fx_level(value);
  // @@protoc_insertion_point(field_set:CMsgLocalServerFakeLobbyData.teleport_fx_level)
}

// optional .CMsgAdditionalLobbyStartupAccountData additional_data = 9;
inline bool CMsgLocalServerFakeLobbyData::_internal_has_additional_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.additional_data_ != nullptr);
  return value;
}
inline bool CMsgLocalServerFakeLobbyData::has_additional_data() const {
  return _internal_has_additional_data();
}
inline void CMsgLocalServerFakeLobbyData::clear_additional_data() {
  if (_impl_.additional_data_ != nullptr) _impl_.additional_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgAdditionalLobbyStartupAccountData& CMsgLocalServerFakeLobbyData::_internal_additional_data() const {
  const ::CMsgAdditionalLobbyStartupAccountData* p = _impl_.additional_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgAdditionalLobbyStartupAccountData&>(
      ::_CMsgAdditionalLobbyStartupAccountData_default_instance_);
}
inline const ::CMsgAdditionalLobbyStartupAccountData& CMsgLocalServerFakeLobbyData::additional_data() const {
  // @@protoc_insertion_point(field_get:CMsgLocalServerFakeLobbyData.additional_data)
  return _internal_additional_data();
}
inline void CMsgLocalServerFakeLobbyData::unsafe_arena_set_allocated_additional_data(
    ::CMsgAdditionalLobbyStartupAccountData* additional_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.additional_data_);
  }
  _impl_.additional_data_ = additional_data;
  if (additional_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgLocalServerFakeLobbyData.additional_data)
}
inline ::CMsgAdditionalLobbyStartupAccountData* CMsgLocalServerFakeLobbyData::release_additional_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgAdditionalLobbyStartupAccountData* temp = _impl_.additional_data_;
  _impl_.additional_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgAdditionalLobbyStartupAccountData* CMsgLocalServerFakeLobbyData::unsafe_arena_release_additional_data() {
  // @@protoc_insertion_point(field_release:CMsgLocalServerFakeLobbyData.additional_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgAdditionalLobbyStartupAccountData* temp = _impl_.additional_data_;
  _impl_.additional_data_ = nullptr;
  return temp;
}
inline ::CMsgAdditionalLobbyStartupAccountData* CMsgLocalServerFakeLobbyData::_internal_mutable_additional_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.additional_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgAdditionalLobbyStartupAccountData>(GetArenaForAllocation());
    _impl_.additional_data_ = p;
  }
  return _impl_.additional_data_;
}
inline ::CMsgAdditionalLobbyStartupAccountData* CMsgLocalServerFakeLobbyData::mutable_additional_data() {
  ::CMsgAdditionalLobbyStartupAccountData* _msg = _internal_mutable_additional_data();
  // @@protoc_insertion_point(field_mutable:CMsgLocalServerFakeLobbyData.additional_data)
  return _msg;
}
inline void CMsgLocalServerFakeLobbyData::set_allocated_additional_data(::CMsgAdditionalLobbyStartupAccountData* additional_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.additional_data_;
  }
  if (additional_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(additional_data);
    if (message_arena != submessage_arena) {
      additional_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.additional_data_ = additional_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgLocalServerFakeLobbyData.additional_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CSODOTALobby_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_State>() {
  return ::CSODOTALobby_State_descriptor();
}
template <> struct is_proto_enum< ::CSODOTALobby_LobbyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CSODOTALobby_LobbyType>() {
  return ::CSODOTALobby_LobbyType_descriptor();
}
template <> struct is_proto_enum< ::ELobbyMemberCoachRequestState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ELobbyMemberCoachRequestState>() {
  return ::ELobbyMemberCoachRequestState_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaTVDelay> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaTVDelay>() {
  return ::LobbyDotaTVDelay_descriptor();
}
template <> struct is_proto_enum< ::LobbyDotaPauseSetting> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LobbyDotaPauseSetting>() {
  return ::LobbyDotaPauseSetting_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fcommon_5flobby_2eproto
