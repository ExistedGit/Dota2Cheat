// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#include "steammessages_clientserver_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgClientHeartBeat::CMsgClientHeartBeat(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientHeartBeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientHeartBeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientHeartBeatDefaultTypeInternal() {}
  union {
    CMsgClientHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientHeartBeatDefaultTypeInternal _CMsgClientHeartBeat_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_request_timestamp_)*/uint64_t{0u}} {}
struct CMsgClientServerTimestampRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientServerTimestampRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientServerTimestampRequestDefaultTypeInternal() {}
  union {
    CMsgClientServerTimestampRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientServerTimestampRequestDefaultTypeInternal _CMsgClientServerTimestampRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_request_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.server_timestamp_ms_)*/uint64_t{0u}} {}
struct CMsgClientServerTimestampResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientServerTimestampResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientServerTimestampResponseDefaultTypeInternal() {}
  union {
    CMsgClientServerTimestampResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientServerTimestampResponseDefaultTypeInternal _CMsgClientServerTimestampResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientSecret::CMsgClientSecret(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hmac_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.appid_)*/0u
  , /*decltype(_impl_.nonce_)*/uint64_t{0u}
  , /*decltype(_impl_.deviceid_)*/0u} {}
struct CMsgClientSecretDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientSecretDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientSecretDefaultTypeInternal() {}
  union {
    CMsgClientSecret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientSecretDefaultTypeInternal _CMsgClientSecret_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientLogon::CMsgClientLogon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.wine_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.machine_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam2_auth_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.email_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.password_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_server_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.login_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.anon_user_target_account_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sha_sentryfile_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auth_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.otp_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sony_psn_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sony_psn_service_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sony_psn_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.machine_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.machine_name_userchosen_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_override_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.two_factor_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.web_logon_nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.obfuscated_private_ip_)*/nullptr
  , /*decltype(_impl_.public_ip_)*/nullptr
  , /*decltype(_impl_.embedded_client_secret_)*/nullptr
  , /*decltype(_impl_.protocol_version_)*/0u
  , /*decltype(_impl_.deprecated_obfustucated_private_ip_)*/0u
  , /*decltype(_impl_.cell_id_)*/0u
  , /*decltype(_impl_.last_session_id_)*/0u
  , /*decltype(_impl_.client_package_version_)*/0u
  , /*decltype(_impl_.client_os_type_)*/0u
  , /*decltype(_impl_.deprecated_10_)*/0u
  , /*decltype(_impl_.deprecated_public_ip_)*/0u
  , /*decltype(_impl_.client_supplied_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.qos_level_)*/0u
  , /*decltype(_impl_.launcher_type_)*/0u
  , /*decltype(_impl_.ui_mode_)*/0u
  , /*decltype(_impl_.chat_mode_)*/0u
  , /*decltype(_impl_.rtime32_account_creation_)*/0u
  , /*decltype(_impl_.should_remember_password_)*/false
  , /*decltype(_impl_.was_converted_deprecated_msg_)*/false
  , /*decltype(_impl_.steam2_ticket_request_)*/false
  , /*decltype(_impl_.create_new_psn_linked_account_if_needed_)*/false
  , /*decltype(_impl_.resolved_user_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.eresult_sentryfile_)*/0
  , /*decltype(_impl_.otp_type_)*/0
  , /*decltype(_impl_.otp_value_)*/0u
  , /*decltype(_impl_.game_server_app_id_)*/0
  , /*decltype(_impl_.client_instance_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steamguard_dont_remember_computer_)*/false
  , /*decltype(_impl_.is_steam_box_)*/false
  , /*decltype(_impl_.supports_rate_limit_response_)*/false
  , /*decltype(_impl_.priority_reason_)*/0} {}
struct CMsgClientLogonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientLogonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientLogonDefaultTypeInternal() {}
  union {
    CMsgClientLogon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientLogonDefaultTypeInternal _CMsgClientLogon_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientLogonResponse::CMsgClientLogonResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.email_domain_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam2_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.webapi_authenticate_user_nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vanity_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parental_settings_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parental_setting_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public_ip_)*/nullptr
  , /*decltype(_impl_.out_of_game_heartbeat_seconds_)*/0
  , /*decltype(_impl_.in_game_heartbeat_seconds_)*/0
  , /*decltype(_impl_.deprecated_public_ip_)*/0u
  , /*decltype(_impl_.rtime32_server_time_)*/0u
  , /*decltype(_impl_.account_flags_)*/0u
  , /*decltype(_impl_.cell_id_)*/0u
  , /*decltype(_impl_.eresult_extended_)*/0
  , /*decltype(_impl_.cell_id_ping_threshold_)*/0u
  , /*decltype(_impl_.client_supplied_steamid_)*/uint64_t{0u}
  , /*decltype(_impl_.use_pics_)*/false
  , /*decltype(_impl_.force_client_update_check_)*/false
  , /*decltype(_impl_.count_loginfailures_to_migrate_)*/0
  , /*decltype(_impl_.count_disconnects_to_migrate_)*/0
  , /*decltype(_impl_.ogs_data_report_time_window_)*/0
  , /*decltype(_impl_.client_instance_id_)*/uint64_t{0u}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgClientLogonResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientLogonResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientLogonResponseDefaultTypeInternal() {}
  union {
    CMsgClientLogonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientLogonResponseDefaultTypeInternal _CMsgClientLogonResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.token_type_)*/-1} {}
struct CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal() {}
  union {
    CMsgClientRequestWebAPIAuthenticateUserNonce _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.webapi_authenticate_user_nonce_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eresult_)*/2
  , /*decltype(_impl_.token_type_)*/-1} {}
struct CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestWebAPIAuthenticateUserNonceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientLogOff::CMsgClientLogOff(
    ::_pbi::ConstantInitialized) {}
struct CMsgClientLogOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientLogOffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientLogOffDefaultTypeInternal() {}
  union {
    CMsgClientLogOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientLogOffDefaultTypeInternal _CMsgClientLogOff_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientLoggedOff::CMsgClientLoggedOff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.eresult_)*/2} {}
struct CMsgClientLoggedOffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientLoggedOffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientLoggedOffDefaultTypeInternal() {}
  union {
    CMsgClientLoggedOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientLoggedOffDefaultTypeInternal _CMsgClientLoggedOff_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientNewLoginKey::CMsgClientNewLoginKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.login_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.unique_id_)*/0u} {}
struct CMsgClientNewLoginKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientNewLoginKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientNewLoginKeyDefaultTypeInternal() {}
  union {
    CMsgClientNewLoginKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientNewLoginKeyDefaultTypeInternal _CMsgClientNewLoginKey_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_id_)*/0u} {}
struct CMsgClientNewLoginKeyAcceptedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientNewLoginKeyAcceptedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientNewLoginKeyAcceptedDefaultTypeInternal() {}
  union {
    CMsgClientNewLoginKeyAccepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientNewLoginKeyAcceptedDefaultTypeInternal _CMsgClientNewLoginKeyAccepted_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientAccountInfo::CMsgClientAccountInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.persona_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ip_country_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.facebook_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steamguard_machine_name_user_chosen_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.count_authed_computers_)*/0
  , /*decltype(_impl_.account_flags_)*/0u
  , /*decltype(_impl_.facebook_id_)*/uint64_t{0u}
  , /*decltype(_impl_.steamguard_notify_newmachines_)*/false
  , /*decltype(_impl_.is_phone_verified_)*/false
  , /*decltype(_impl_.is_phone_identifying_)*/false
  , /*decltype(_impl_.is_phone_needing_reverify_)*/false
  , /*decltype(_impl_.two_factor_state_)*/0u} {}
struct CMsgClientAccountInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientAccountInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientAccountInfoDefaultTypeInternal() {}
  union {
    CMsgClientAccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientAccountInfoDefaultTypeInternal _CMsgClientAccountInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientChallengeRequest::CMsgClientChallengeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steamid_)*/uint64_t{0u}} {}
struct CMsgClientChallengeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientChallengeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientChallengeRequestDefaultTypeInternal() {}
  union {
    CMsgClientChallengeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientChallengeRequestDefaultTypeInternal _CMsgClientChallengeRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientChallengeResponse::CMsgClientChallengeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenge_)*/uint64_t{0u}} {}
struct CMsgClientChallengeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientChallengeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgClientChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientChallengeResponseDefaultTypeInternal _CMsgClientChallengeResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;

const uint32_t TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, _impl_.client_request_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _impl_.client_request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _impl_.server_timestamp_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_.appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_.deviceid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_.nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _impl_.hmac_),
  1,
  2,
  4,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.deprecated_obfustucated_private_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.last_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.client_package_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.client_language_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.client_os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.should_remember_password_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.wine_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.deprecated_10_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.obfuscated_private_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.qos_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.client_supplied_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.machine_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.launcher_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.ui_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.chat_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.steam2_auth_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.email_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.rtime32_account_creation_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.password_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.game_server_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.login_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.was_converted_deprecated_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.anon_user_target_account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.resolved_user_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.eresult_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.sha_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.auth_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.otp_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.otp_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.otp_identifier_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.steam2_ticket_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.sony_psn_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.sony_psn_service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.create_new_psn_linked_account_if_needed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.sony_psn_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.game_server_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.steamguard_dont_remember_computer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.machine_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.country_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.is_steam_box_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.two_factor_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.supports_rate_limit_response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.web_logon_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.priority_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _impl_.embedded_client_secret_),
  24,
  25,
  26,
  27,
  28,
  0,
  29,
  38,
  1,
  30,
  21,
  31,
  33,
  32,
  22,
  2,
  34,
  35,
  36,
  3,
  4,
  37,
  5,
  6,
  7,
  8,
  39,
  9,
  42,
  43,
  10,
  11,
  44,
  45,
  12,
  40,
  13,
  14,
  41,
  15,
  46,
  48,
  16,
  17,
  18,
  49,
  47,
  19,
  50,
  20,
  51,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.out_of_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.in_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.rtime32_server_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.email_domain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.steam2_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.eresult_extended_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.cell_id_ping_threshold_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.use_pics_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.vanity_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.client_supplied_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.ip_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.parental_settings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.parental_setting_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.count_loginfailures_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.count_disconnects_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.ogs_data_report_time_window_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _impl_.force_client_update_check_),
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  0,
  1,
  14,
  2,
  15,
  17,
  3,
  7,
  16,
  4,
  5,
  6,
  19,
  20,
  21,
  22,
  18,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, _impl_.token_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _impl_.eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _impl_.webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _impl_.token_type_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, _impl_.eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _impl_.unique_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _impl_.login_key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, _impl_.unique_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.ip_country_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.count_authed_computers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.facebook_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.facebook_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.steamguard_notify_newmachines_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.steamguard_machine_name_user_chosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.two_factor_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _impl_.is_phone_needing_reverify_),
  0,
  1,
  4,
  5,
  6,
  2,
  7,
  3,
  8,
  11,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, _impl_.steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, _impl_.challenge_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::CMsgClientHeartBeat)},
  { 6, 13, -1, sizeof(::CMsgClientServerTimestampRequest)},
  { 14, 22, -1, sizeof(::CMsgClientServerTimestampResponse)},
  { 24, 35, -1, sizeof(::CMsgClientSecret)},
  { 40, 98, -1, sizeof(::CMsgClientLogon)},
  { 150, 180, -1, sizeof(::CMsgClientLogonResponse)},
  { 204, 211, -1, sizeof(::CMsgClientRequestWebAPIAuthenticateUserNonce)},
  { 212, 221, -1, sizeof(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse)},
  { 224, -1, -1, sizeof(::CMsgClientLogOff)},
  { 230, 237, -1, sizeof(::CMsgClientLoggedOff)},
  { 238, 246, -1, sizeof(::CMsgClientNewLoginKey)},
  { 248, 255, -1, sizeof(::CMsgClientNewLoginKeyAccepted)},
  { 256, 274, -1, sizeof(::CMsgClientAccountInfo)},
  { 286, 293, -1, sizeof(::CMsgClientChallengeRequest)},
  { 294, 301, -1, sizeof(::CMsgClientChallengeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgClientHeartBeat_default_instance_._instance,
  &::_CMsgClientServerTimestampRequest_default_instance_._instance,
  &::_CMsgClientServerTimestampResponse_default_instance_._instance,
  &::_CMsgClientSecret_default_instance_._instance,
  &::_CMsgClientLogon_default_instance_._instance,
  &::_CMsgClientLogonResponse_default_instance_._instance,
  &::_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_._instance,
  &::_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_._instance,
  &::_CMsgClientLogOff_default_instance_._instance,
  &::_CMsgClientLoggedOff_default_instance_._instance,
  &::_CMsgClientNewLoginKey_default_instance_._instance,
  &::_CMsgClientNewLoginKeyAccepted_default_instance_._instance,
  &::_CMsgClientAccountInfo_default_instance_._instance,
  &::_CMsgClientChallengeRequest_default_instance_._instance,
  &::_CMsgClientChallengeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&steammessages_clientserver_login.proto"
  "\032\030steammessages_base.proto\"\025\n\023CMsgClient"
  "HeartBeat\"D\n CMsgClientServerTimestampRe"
  "quest\022 \n\030client_request_timestamp\030\001 \001(\004\""
  "b\n!CMsgClientServerTimestampResponse\022 \n\030"
  "client_request_timestamp\030\001 \001(\004\022\033\n\023server"
  "_timestamp_ms\030\002 \001(\004\"a\n\020CMsgClientSecret\022"
  "\017\n\007version\030\001 \001(\r\022\r\n\005appid\030\002 \001(\r\022\020\n\010devic"
  "eid\030\003 \001(\r\022\r\n\005nonce\030\004 \001(\006\022\014\n\004hmac\030\005 \001(\014\"\332"
  "\013\n\017CMsgClientLogon\022\030\n\020protocol_version\030\001"
  " \001(\r\022*\n\"deprecated_obfustucated_private_"
  "ip\030\002 \001(\r\022\017\n\007cell_id\030\003 \001(\r\022\027\n\017last_sessio"
  "n_id\030\004 \001(\r\022\036\n\026client_package_version\030\005 \001"
  "(\r\022\027\n\017client_language\030\006 \001(\t\022\026\n\016client_os"
  "_type\030\007 \001(\r\022\'\n\030should_remember_password\030"
  "\010 \001(\010:\005false\022\024\n\014wine_version\030\t \001(\t\022\025\n\rde"
  "precated_10\030\n \001(\r\022-\n\025obfuscated_private_"
  "ip\030\013 \001(\0132\016.CMsgIPAddress\022\034\n\024deprecated_p"
  "ublic_ip\030\024 \001(\r\022\021\n\tqos_level\030\025 \001(\r\022 \n\030cli"
  "ent_supplied_steam_id\030\026 \001(\006\022!\n\tpublic_ip"
  "\030\027 \001(\0132\016.CMsgIPAddress\022\022\n\nmachine_id\030\036 \001"
  "(\014\022\030\n\rlauncher_type\030\037 \001(\r:\0010\022\022\n\007ui_mode\030"
  "  \001(\r:\0010\022\024\n\tchat_mode\030! \001(\r:\0010\022\032\n\022steam2"
  "_auth_ticket\030) \001(\014\022\025\n\remail_address\030* \001("
  "\t\022 \n\030rtime32_account_creation\030+ \001(\007\022\024\n\014a"
  "ccount_name\0302 \001(\t\022\020\n\010password\0303 \001(\t\022\031\n\021g"
  "ame_server_token\0304 \001(\t\022\021\n\tlogin_key\030< \001("
  "\t\022+\n\034was_converted_deprecated_msg\030F \001(\010:"
  "\005false\022%\n\035anon_user_target_account_name\030"
  "P \001(\t\022\036\n\026resolved_user_steam_id\030Q \001(\006\022\032\n"
  "\022eresult_sentryfile\030R \001(\005\022\026\n\016sha_sentryf"
  "ile\030S \001(\014\022\021\n\tauth_code\030T \001(\t\022\020\n\010otp_type"
  "\030U \001(\005\022\021\n\totp_value\030V \001(\r\022\026\n\016otp_identif"
  "ier\030W \001(\t\022\035\n\025steam2_ticket_request\030X \001(\010"
  "\022\027\n\017sony_psn_ticket\030Z \001(\014\022\033\n\023sony_psn_se"
  "rvice_id\030[ \001(\t\0226\n\'create_new_psn_linked_"
  "account_if_needed\030\\ \001(\010:\005false\022\025\n\rsony_p"
  "sn_name\030] \001(\t\022\032\n\022game_server_app_id\030^ \001("
  "\005\022)\n!steamguard_dont_remember_computer\030_"
  " \001(\010\022\024\n\014machine_name\030` \001(\t\022\037\n\027machine_na"
  "me_userchosen\030a \001(\t\022\030\n\020country_override\030"
  "b \001(\t\022\024\n\014is_steam_box\030c \001(\010\022\032\n\022client_in"
  "stance_id\030d \001(\004\022\027\n\017two_factor_code\030e \001(\t"
  "\022$\n\034supports_rate_limit_response\030f \001(\010\022\027"
  "\n\017web_logon_nonce\030g \001(\t\022\027\n\017priority_reas"
  "on\030h \001(\005\0221\n\026embedded_client_secret\030i \001(\013"
  "2\021.CMsgClientSecret\"\335\005\n\027CMsgClientLogonR"
  "esponse\022\022\n\007eresult\030\001 \001(\005:\0012\022%\n\035out_of_ga"
  "me_heartbeat_seconds\030\002 \001(\005\022!\n\031in_game_he"
  "artbeat_seconds\030\003 \001(\005\022\034\n\024deprecated_publ"
  "ic_ip\030\004 \001(\r\022\033\n\023rtime32_server_time\030\005 \001(\007"
  "\022\025\n\raccount_flags\030\006 \001(\r\022\017\n\007cell_id\030\007 \001(\r"
  "\022\024\n\014email_domain\030\010 \001(\t\022\025\n\rsteam2_ticket\030"
  "\t \001(\014\022\030\n\020eresult_extended\030\n \001(\005\022&\n\036webap"
  "i_authenticate_user_nonce\030\013 \001(\t\022\036\n\026cell_"
  "id_ping_threshold\030\014 \001(\r\022\020\n\010use_pics\030\r \001("
  "\010\022\022\n\nvanity_url\030\016 \001(\t\022!\n\tpublic_ip\030\017 \001(\013"
  "2\016.CMsgIPAddress\022\037\n\027client_supplied_stea"
  "mid\030\024 \001(\006\022\027\n\017ip_country_code\030\025 \001(\t\022\031\n\021pa"
  "rental_settings\030\026 \001(\014\022\"\n\032parental_settin"
  "g_signature\030\027 \001(\014\022&\n\036count_loginfailures"
  "_to_migrate\030\030 \001(\005\022$\n\034count_disconnects_t"
  "o_migrate\030\031 \001(\005\022#\n\033ogs_data_report_time_"
  "window\030\032 \001(\005\022\032\n\022client_instance_id\030\033 \001(\004"
  "\022!\n\031force_client_update_check\030\034 \001(\010\"F\n,C"
  "MsgClientRequestWebAPIAuthenticateUserNo"
  "nce\022\026\n\ntoken_type\030\001 \001(\005:\002-1\"\212\001\n4CMsgClie"
  "ntRequestWebAPIAuthenticateUserNonceResp"
  "onse\022\022\n\007eresult\030\001 \001(\005:\0012\022&\n\036webapi_authe"
  "nticate_user_nonce\030\013 \001(\t\022\026\n\ntoken_type\030\003"
  " \001(\005:\002-1\"\022\n\020CMsgClientLogOff\")\n\023CMsgClie"
  "ntLoggedOff\022\022\n\007eresult\030\001 \001(\005:\0012\"=\n\025CMsgC"
  "lientNewLoginKey\022\021\n\tunique_id\030\001 \001(\r\022\021\n\tl"
  "ogin_key\030\002 \001(\t\"2\n\035CMsgClientNewLoginKeyA"
  "ccepted\022\021\n\tunique_id\030\001 \001(\r\"\356\002\n\025CMsgClien"
  "tAccountInfo\022\024\n\014persona_name\030\001 \001(\t\022\022\n\nip"
  "_country\030\002 \001(\t\022\036\n\026count_authed_computers"
  "\030\005 \001(\005\022\025\n\raccount_flags\030\007 \001(\r\022\023\n\013faceboo"
  "k_id\030\010 \001(\004\022\025\n\rfacebook_name\030\t \001(\t\022%\n\035ste"
  "amguard_notify_newmachines\030\016 \001(\010\022+\n#stea"
  "mguard_machine_name_user_chosen\030\017 \001(\t\022\031\n"
  "\021is_phone_verified\030\020 \001(\010\022\030\n\020two_factor_s"
  "tate\030\021 \001(\r\022\034\n\024is_phone_identifying\030\022 \001(\010"
  "\022!\n\031is_phone_needing_reverify\030\023 \001(\010\"-\n\032C"
  "MsgClientChallengeRequest\022\017\n\007steamid\030\001 \001"
  "(\006\"0\n\033CMsgClientChallengeResponse\022\021\n\tcha"
  "llenge\030\001 \001(\006B\005H\001\200\001\000"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_steammessages_5fclientserver_5flogin_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_steammessages_5fclientserver_5flogin_2eproto = {
    false, false, 3459, descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto,
    "steammessages_clientserver_login.proto",
    &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once, descriptor_table_steammessages_5fclientserver_5flogin_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets,
    file_level_metadata_steammessages_5fclientserver_5flogin_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto,
    file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter() {
  return &descriptor_table_steammessages_5fclientserver_5flogin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5flogin_2eproto(&descriptor_table_steammessages_5fclientserver_5flogin_2eproto);

// ===================================================================

class CMsgClientHeartBeat::_Internal {
 public:
};

CMsgClientHeartBeat::CMsgClientHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientHeartBeat)
}
CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientHeartBeat* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientHeartBeat)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientHeartBeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientHeartBeat::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientHeartBeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[0]);
}

// ===================================================================

class CMsgClientServerTimestampRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServerTimestampRequest>()._impl_._has_bits_);
  static void set_has_client_request_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServerTimestampRequest)
}
CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientServerTimestampRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_request_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_request_timestamp_ = from._impl_.client_request_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientServerTimestampRequest)
}

inline void CMsgClientServerTimestampRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_request_timestamp_){uint64_t{0u}}
  };
}

CMsgClientServerTimestampRequest::~CMsgClientServerTimestampRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientServerTimestampRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientServerTimestampRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientServerTimestampRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientServerTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServerTimestampRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_request_timestamp_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServerTimestampRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_request_timestamp(&has_bits);
          _impl_.client_request_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServerTimestampRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServerTimestampRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_request_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServerTimestampRequest)
  return target;
}

size_t CMsgClientServerTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServerTimestampRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 client_request_timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_request_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServerTimestampRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientServerTimestampRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServerTimestampRequest::GetClassData() const { return &_class_data_; }


void CMsgClientServerTimestampRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientServerTimestampRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientServerTimestampRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_request_timestamp()) {
    _this->_internal_set_client_request_timestamp(from._internal_client_request_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServerTimestampRequest::CopyFrom(const CMsgClientServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampRequest::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampRequest::InternalSwap(CMsgClientServerTimestampRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.client_request_timestamp_, other->_impl_.client_request_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServerTimestampRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[1]);
}

// ===================================================================

class CMsgClientServerTimestampResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServerTimestampResponse>()._impl_._has_bits_);
  static void set_has_client_request_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServerTimestampResponse)
}
CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientServerTimestampResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_request_timestamp_){}
    , decltype(_impl_.server_timestamp_ms_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.client_request_timestamp_, &from._impl_.client_request_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_timestamp_ms_) -
    reinterpret_cast<char*>(&_impl_.client_request_timestamp_)) + sizeof(_impl_.server_timestamp_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServerTimestampResponse)
}

inline void CMsgClientServerTimestampResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_request_timestamp_){uint64_t{0u}}
    , decltype(_impl_.server_timestamp_ms_){uint64_t{0u}}
  };
}

CMsgClientServerTimestampResponse::~CMsgClientServerTimestampResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientServerTimestampResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientServerTimestampResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientServerTimestampResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientServerTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServerTimestampResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.client_request_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_timestamp_ms_) -
        reinterpret_cast<char*>(&_impl_.client_request_timestamp_)) + sizeof(_impl_.server_timestamp_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServerTimestampResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_request_timestamp(&has_bits);
          _impl_.client_request_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_server_timestamp_ms(&has_bits);
          _impl_.server_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientServerTimestampResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServerTimestampResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_request_timestamp(), target);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServerTimestampResponse)
  return target;
}

size_t CMsgClientServerTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServerTimestampResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_request_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_request_timestamp());
    }

    // optional uint64 server_timestamp_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_server_timestamp_ms());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientServerTimestampResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientServerTimestampResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientServerTimestampResponse::GetClassData() const { return &_class_data_; }


void CMsgClientServerTimestampResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientServerTimestampResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientServerTimestampResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.client_request_timestamp_ = from._impl_.client_request_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_timestamp_ms_ = from._impl_.server_timestamp_ms_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientServerTimestampResponse::CopyFrom(const CMsgClientServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampResponse::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampResponse::InternalSwap(CMsgClientServerTimestampResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServerTimestampResponse, _impl_.server_timestamp_ms_)
      + sizeof(CMsgClientServerTimestampResponse::_impl_.server_timestamp_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServerTimestampResponse, _impl_.client_request_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.client_request_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.client_request_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServerTimestampResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[2]);
}

// ===================================================================

class CMsgClientSecret::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSecret>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSecret::CMsgClientSecret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientSecret)
}
CMsgClientSecret::CMsgClientSecret(const CMsgClientSecret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientSecret* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hmac_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.appid_){}
    , decltype(_impl_.nonce_){}
    , decltype(_impl_.deviceid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hmac()) {
    _this->_impl_.hmac_.Set(from._internal_hmac(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.deviceid_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.deviceid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSecret)
}

inline void CMsgClientSecret::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hmac_){}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.appid_){0u}
    , decltype(_impl_.nonce_){uint64_t{0u}}
    , decltype(_impl_.deviceid_){0u}
  };
  _impl_.hmac_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmac_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientSecret::~CMsgClientSecret() {
  // @@protoc_insertion_point(destructor:CMsgClientSecret)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientSecret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hmac_.Destroy();
}

void CMsgClientSecret::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientSecret::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSecret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.hmac_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deviceid_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.deviceid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSecret::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          _impl_.appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deviceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_deviceid(&has_bits);
          _impl_.deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_nonce(&has_bits);
          _impl_.nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes hmac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_hmac();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientSecret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSecret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 deviceid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deviceid(), target);
  }

  // optional fixed64 nonce = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_nonce(), target);
  }

  // optional bytes hmac = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hmac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSecret)
  return target;
}

size_t CMsgClientSecret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSecret)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes hmac = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hmac());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

    // optional fixed64 nonce = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 deviceid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deviceid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientSecret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientSecret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientSecret::GetClassData() const { return &_class_data_; }


void CMsgClientSecret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientSecret*>(&to_msg);
  auto& from = static_cast<const CMsgClientSecret&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSecret)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hmac(from._internal_hmac());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.nonce_ = from._impl_.nonce_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.deviceid_ = from._impl_.deviceid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientSecret::CopyFrom(const CMsgClientSecret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSecret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSecret::IsInitialized() const {
  return true;
}

void CMsgClientSecret::InternalSwap(CMsgClientSecret* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmac_, lhs_arena,
      &other->_impl_.hmac_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSecret, _impl_.deviceid_)
      + sizeof(CMsgClientSecret::_impl_.deviceid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSecret, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSecret::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[3]);
}

// ===================================================================

class CMsgClientLogon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLogon>()._impl_._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_deprecated_obfustucated_private_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_last_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_client_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_should_remember_password(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_wine_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_10(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgIPAddress& obfuscated_private_ip(const CMsgClientLogon* msg);
  static void set_has_obfuscated_private_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_qos_level(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_client_supplied_steam_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientLogon* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launcher_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ui_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_chat_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_steam2_auth_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_account_creation(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_server_token(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_login_key(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_was_converted_deprecated_msg(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_anon_user_target_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_resolved_user_steam_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_eresult_sentryfile(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_sha_sentryfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_auth_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_otp_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_otp_value(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_otp_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steam2_ticket_request(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_sony_psn_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sony_psn_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_create_new_psn_linked_account_if_needed(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_sony_psn_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_game_server_app_id(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_steamguard_dont_remember_computer(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_machine_name_userchosen(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_country_override(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_steam_box(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_two_factor_code(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_supports_rate_limit_response(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_web_logon_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_priority_reason(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::CMsgClientSecret& embedded_client_secret(const CMsgClientLogon* msg);
  static void set_has_embedded_client_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::CMsgIPAddress&
CMsgClientLogon::_Internal::obfuscated_private_ip(const CMsgClientLogon* msg) {
  return *msg->_impl_.obfuscated_private_ip_;
}
const ::CMsgIPAddress&
CMsgClientLogon::_Internal::public_ip(const CMsgClientLogon* msg) {
  return *msg->_impl_.public_ip_;
}
const ::CMsgClientSecret&
CMsgClientLogon::_Internal::embedded_client_secret(const CMsgClientLogon* msg) {
  return *msg->_impl_.embedded_client_secret_;
}
void CMsgClientLogon::clear_obfuscated_private_ip() {
  if (_impl_.obfuscated_private_ip_ != nullptr) _impl_.obfuscated_private_ip_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void CMsgClientLogon::clear_public_ip() {
  if (_impl_.public_ip_ != nullptr) _impl_.public_ip_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
CMsgClientLogon::CMsgClientLogon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogon)
}
CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientLogon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_language_){}
    , decltype(_impl_.wine_version_){}
    , decltype(_impl_.machine_id_){}
    , decltype(_impl_.steam2_auth_ticket_){}
    , decltype(_impl_.email_address_){}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.game_server_token_){}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.anon_user_target_account_name_){}
    , decltype(_impl_.sha_sentryfile_){}
    , decltype(_impl_.auth_code_){}
    , decltype(_impl_.otp_identifier_){}
    , decltype(_impl_.sony_psn_ticket_){}
    , decltype(_impl_.sony_psn_service_id_){}
    , decltype(_impl_.sony_psn_name_){}
    , decltype(_impl_.machine_name_){}
    , decltype(_impl_.machine_name_userchosen_){}
    , decltype(_impl_.country_override_){}
    , decltype(_impl_.two_factor_code_){}
    , decltype(_impl_.web_logon_nonce_){}
    , decltype(_impl_.obfuscated_private_ip_){nullptr}
    , decltype(_impl_.public_ip_){nullptr}
    , decltype(_impl_.embedded_client_secret_){nullptr}
    , decltype(_impl_.protocol_version_){}
    , decltype(_impl_.deprecated_obfustucated_private_ip_){}
    , decltype(_impl_.cell_id_){}
    , decltype(_impl_.last_session_id_){}
    , decltype(_impl_.client_package_version_){}
    , decltype(_impl_.client_os_type_){}
    , decltype(_impl_.deprecated_10_){}
    , decltype(_impl_.deprecated_public_ip_){}
    , decltype(_impl_.client_supplied_steam_id_){}
    , decltype(_impl_.qos_level_){}
    , decltype(_impl_.launcher_type_){}
    , decltype(_impl_.ui_mode_){}
    , decltype(_impl_.chat_mode_){}
    , decltype(_impl_.rtime32_account_creation_){}
    , decltype(_impl_.should_remember_password_){}
    , decltype(_impl_.was_converted_deprecated_msg_){}
    , decltype(_impl_.steam2_ticket_request_){}
    , decltype(_impl_.create_new_psn_linked_account_if_needed_){}
    , decltype(_impl_.resolved_user_steam_id_){}
    , decltype(_impl_.eresult_sentryfile_){}
    , decltype(_impl_.otp_type_){}
    , decltype(_impl_.otp_value_){}
    , decltype(_impl_.game_server_app_id_){}
    , decltype(_impl_.client_instance_id_){}
    , decltype(_impl_.steamguard_dont_remember_computer_){}
    , decltype(_impl_.is_steam_box_){}
    , decltype(_impl_.supports_rate_limit_response_){}
    , decltype(_impl_.priority_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_language()) {
    _this->_impl_.client_language_.Set(from._internal_client_language(), 
      _this->GetArenaForAllocation());
  }
  _impl_.wine_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wine_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_wine_version()) {
    _this->_impl_.wine_version_.Set(from._internal_wine_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.machine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_id()) {
    _this->_impl_.machine_id_.Set(from._internal_machine_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.steam2_auth_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steam2_auth_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steam2_auth_ticket()) {
    _this->_impl_.steam2_auth_ticket_.Set(from._internal_steam2_auth_ticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.email_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_address()) {
    _this->_impl_.email_address_.Set(from._internal_email_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_password()) {
    _this->_impl_.password_.Set(from._internal_password(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_server_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_server_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_server_token()) {
    _this->_impl_.game_server_token_.Set(from._internal_game_server_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.login_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_key()) {
    _this->_impl_.login_key_.Set(from._internal_login_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.anon_user_target_account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.anon_user_target_account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_anon_user_target_account_name()) {
    _this->_impl_.anon_user_target_account_name_.Set(from._internal_anon_user_target_account_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sha_sentryfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_sentryfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sha_sentryfile()) {
    _this->_impl_.sha_sentryfile_.Set(from._internal_sha_sentryfile(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auth_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_auth_code()) {
    _this->_impl_.auth_code_.Set(from._internal_auth_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.otp_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.otp_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_otp_identifier()) {
    _this->_impl_.otp_identifier_.Set(from._internal_otp_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sony_psn_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sony_psn_ticket()) {
    _this->_impl_.sony_psn_ticket_.Set(from._internal_sony_psn_ticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sony_psn_service_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_service_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sony_psn_service_id()) {
    _this->_impl_.sony_psn_service_id_.Set(from._internal_sony_psn_service_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sony_psn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sony_psn_name()) {
    _this->_impl_.sony_psn_name_.Set(from._internal_sony_psn_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.machine_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name()) {
    _this->_impl_.machine_name_.Set(from._internal_machine_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.machine_name_userchosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_name_userchosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_machine_name_userchosen()) {
    _this->_impl_.machine_name_userchosen_.Set(from._internal_machine_name_userchosen(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_override()) {
    _this->_impl_.country_override_.Set(from._internal_country_override(), 
      _this->GetArenaForAllocation());
  }
  _impl_.two_factor_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.two_factor_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_two_factor_code()) {
    _this->_impl_.two_factor_code_.Set(from._internal_two_factor_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.web_logon_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.web_logon_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_web_logon_nonce()) {
    _this->_impl_.web_logon_nonce_.Set(from._internal_web_logon_nonce(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_obfuscated_private_ip()) {
    _this->_impl_.obfuscated_private_ip_ = new ::CMsgIPAddress(*from._impl_.obfuscated_private_ip_);
  }
  if (from._internal_has_public_ip()) {
    _this->_impl_.public_ip_ = new ::CMsgIPAddress(*from._impl_.public_ip_);
  }
  if (from._internal_has_embedded_client_secret()) {
    _this->_impl_.embedded_client_secret_ = new ::CMsgClientSecret(*from._impl_.embedded_client_secret_);
  }
  ::memcpy(&_impl_.protocol_version_, &from._impl_.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.priority_reason_) -
    reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.priority_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogon)
}

inline void CMsgClientLogon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_language_){}
    , decltype(_impl_.wine_version_){}
    , decltype(_impl_.machine_id_){}
    , decltype(_impl_.steam2_auth_ticket_){}
    , decltype(_impl_.email_address_){}
    , decltype(_impl_.account_name_){}
    , decltype(_impl_.password_){}
    , decltype(_impl_.game_server_token_){}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.anon_user_target_account_name_){}
    , decltype(_impl_.sha_sentryfile_){}
    , decltype(_impl_.auth_code_){}
    , decltype(_impl_.otp_identifier_){}
    , decltype(_impl_.sony_psn_ticket_){}
    , decltype(_impl_.sony_psn_service_id_){}
    , decltype(_impl_.sony_psn_name_){}
    , decltype(_impl_.machine_name_){}
    , decltype(_impl_.machine_name_userchosen_){}
    , decltype(_impl_.country_override_){}
    , decltype(_impl_.two_factor_code_){}
    , decltype(_impl_.web_logon_nonce_){}
    , decltype(_impl_.obfuscated_private_ip_){nullptr}
    , decltype(_impl_.public_ip_){nullptr}
    , decltype(_impl_.embedded_client_secret_){nullptr}
    , decltype(_impl_.protocol_version_){0u}
    , decltype(_impl_.deprecated_obfustucated_private_ip_){0u}
    , decltype(_impl_.cell_id_){0u}
    , decltype(_impl_.last_session_id_){0u}
    , decltype(_impl_.client_package_version_){0u}
    , decltype(_impl_.client_os_type_){0u}
    , decltype(_impl_.deprecated_10_){0u}
    , decltype(_impl_.deprecated_public_ip_){0u}
    , decltype(_impl_.client_supplied_steam_id_){uint64_t{0u}}
    , decltype(_impl_.qos_level_){0u}
    , decltype(_impl_.launcher_type_){0u}
    , decltype(_impl_.ui_mode_){0u}
    , decltype(_impl_.chat_mode_){0u}
    , decltype(_impl_.rtime32_account_creation_){0u}
    , decltype(_impl_.should_remember_password_){false}
    , decltype(_impl_.was_converted_deprecated_msg_){false}
    , decltype(_impl_.steam2_ticket_request_){false}
    , decltype(_impl_.create_new_psn_linked_account_if_needed_){false}
    , decltype(_impl_.resolved_user_steam_id_){uint64_t{0u}}
    , decltype(_impl_.eresult_sentryfile_){0}
    , decltype(_impl_.otp_type_){0}
    , decltype(_impl_.otp_value_){0u}
    , decltype(_impl_.game_server_app_id_){0}
    , decltype(_impl_.client_instance_id_){uint64_t{0u}}
    , decltype(_impl_.steamguard_dont_remember_computer_){false}
    , decltype(_impl_.is_steam_box_){false}
    , decltype(_impl_.supports_rate_limit_response_){false}
    , decltype(_impl_.priority_reason_){0}
  };
  _impl_.client_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.client_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.wine_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.wine_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.steam2_auth_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steam2_auth_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_server_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_server_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.login_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.anon_user_target_account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.anon_user_target_account_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sha_sentryfile_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sha_sentryfile_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auth_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auth_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.otp_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.otp_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sony_psn_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sony_psn_service_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_service_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sony_psn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sony_psn_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_name_userchosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_name_userchosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_override_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_override_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.two_factor_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.two_factor_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.web_logon_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.web_logon_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientLogon::~CMsgClientLogon() {
  // @@protoc_insertion_point(destructor:CMsgClientLogon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientLogon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_language_.Destroy();
  _impl_.wine_version_.Destroy();
  _impl_.machine_id_.Destroy();
  _impl_.steam2_auth_ticket_.Destroy();
  _impl_.email_address_.Destroy();
  _impl_.account_name_.Destroy();
  _impl_.password_.Destroy();
  _impl_.game_server_token_.Destroy();
  _impl_.login_key_.Destroy();
  _impl_.anon_user_target_account_name_.Destroy();
  _impl_.sha_sentryfile_.Destroy();
  _impl_.auth_code_.Destroy();
  _impl_.otp_identifier_.Destroy();
  _impl_.sony_psn_ticket_.Destroy();
  _impl_.sony_psn_service_id_.Destroy();
  _impl_.sony_psn_name_.Destroy();
  _impl_.machine_name_.Destroy();
  _impl_.machine_name_userchosen_.Destroy();
  _impl_.country_override_.Destroy();
  _impl_.two_factor_code_.Destroy();
  _impl_.web_logon_nonce_.Destroy();
  if (this != internal_default_instance()) delete _impl_.obfuscated_private_ip_;
  if (this != internal_default_instance()) delete _impl_.public_ip_;
  if (this != internal_default_instance()) delete _impl_.embedded_client_secret_;
}

void CMsgClientLogon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientLogon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLogon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.client_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.wine_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.machine_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.steam2_auth_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.email_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      _impl_.game_server_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _impl_.login_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      _impl_.anon_user_target_account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      _impl_.sha_sentryfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      _impl_.auth_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      _impl_.otp_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      _impl_.sony_psn_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      _impl_.sony_psn_service_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      _impl_.sony_psn_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _impl_.machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      _impl_.machine_name_userchosen_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      _impl_.country_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      _impl_.two_factor_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      _impl_.web_logon_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.obfuscated_private_ip_ != nullptr);
      _impl_.obfuscated_private_ip_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.public_ip_ != nullptr);
      _impl_.public_ip_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.embedded_client_secret_ != nullptr);
      _impl_.embedded_client_secret_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.deprecated_public_ip_) -
        reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.deprecated_public_ip_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.client_supplied_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.was_converted_deprecated_msg_) -
        reinterpret_cast<char*>(&_impl_.client_supplied_steam_id_)) + sizeof(_impl_.was_converted_deprecated_msg_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.steam2_ticket_request_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_instance_id_) -
        reinterpret_cast<char*>(&_impl_.steam2_ticket_request_)) + sizeof(_impl_.client_instance_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.steamguard_dont_remember_computer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.priority_reason_) -
        reinterpret_cast<char*>(&_impl_.steamguard_dont_remember_computer_)) + sizeof(_impl_.priority_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLogon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_protocol_version(&_impl_._has_bits_);
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_obfustucated_private_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_deprecated_obfustucated_private_ip(&_impl_._has_bits_);
          _impl_.deprecated_obfustucated_private_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cell_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cell_id(&_impl_._has_bits_);
          _impl_.cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_session_id(&_impl_._has_bits_);
          _impl_.last_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_package_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_package_version(&_impl_._has_bits_);
          _impl_.client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string client_language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_client_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.client_language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_os_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_client_os_type(&_impl_._has_bits_);
          _impl_.client_os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_remember_password = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_should_remember_password(&_impl_._has_bits_);
          _impl_.should_remember_password_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string wine_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_wine_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.wine_version");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_deprecated_10(&_impl_._has_bits_);
          _impl_.deprecated_10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgIPAddress obfuscated_private_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_obfuscated_private_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_deprecated_public_ip(&_impl_._has_bits_);
          _impl_.deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 qos_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_qos_level(&_impl_._has_bits_);
          _impl_.qos_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_supplied_steam_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _Internal::set_has_client_supplied_steam_id(&_impl_._has_bits_);
          _impl_.client_supplied_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes machine_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_machine_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 launcher_type = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_launcher_type(&_impl_._has_bits_);
          _impl_.launcher_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ui_mode = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_ui_mode(&_impl_._has_bits_);
          _impl_.ui_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_mode = 33 [default = 0];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_chat_mode(&_impl_._has_bits_);
          _impl_.chat_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes steam2_auth_ticket = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_steam2_auth_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string email_address = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_email_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.email_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_account_creation = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_rtime32_account_creation(&_impl_._has_bits_);
          _impl_.rtime32_account_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.account_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string password = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.password");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string game_server_token = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_game_server_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.game_server_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string login_key = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_login_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.login_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_was_converted_deprecated_msg(&_impl_._has_bits_);
          _impl_.was_converted_deprecated_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string anon_user_target_account_name = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_anon_user_target_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.anon_user_target_account_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 resolved_user_steam_id = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _Internal::set_has_resolved_user_steam_id(&_impl_._has_bits_);
          _impl_.resolved_user_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult_sentryfile = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_eresult_sentryfile(&_impl_._has_bits_);
          _impl_.eresult_sentryfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sha_sentryfile = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_sha_sentryfile();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string auth_code = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_auth_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.auth_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 otp_type = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_otp_type(&_impl_._has_bits_);
          _impl_.otp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 otp_value = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_otp_value(&_impl_._has_bits_);
          _impl_.otp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string otp_identifier = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_otp_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.otp_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool steam2_ticket_request = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_steam2_ticket_request(&_impl_._has_bits_);
          _impl_.steam2_ticket_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes sony_psn_ticket = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_sony_psn_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sony_psn_service_id = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_sony_psn_service_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.sony_psn_service_id");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_create_new_psn_linked_account_if_needed(&_impl_._has_bits_);
          _impl_.create_new_psn_linked_account_if_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string sony_psn_name = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_sony_psn_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.sony_psn_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_server_app_id = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_game_server_app_id(&_impl_._has_bits_);
          _impl_.game_server_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool steamguard_dont_remember_computer = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_steamguard_dont_remember_computer(&_impl_._has_bits_);
          _impl_.steamguard_dont_remember_computer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.machine_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string machine_name_userchosen = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_machine_name_userchosen();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.machine_name_userchosen");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string country_override = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_override();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.country_override");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steam_box = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_steam_box(&_impl_._has_bits_);
          _impl_.is_steam_box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_instance_id(&_impl_._has_bits_);
          _impl_.client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string two_factor_code = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_two_factor_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.two_factor_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool supports_rate_limit_response = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_supports_rate_limit_response(&_impl_._has_bits_);
          _impl_.supports_rate_limit_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string web_logon_nonce = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_web_logon_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogon.web_logon_nonce");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 priority_reason = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_priority_reason(&_impl_._has_bits_);
          _impl_.priority_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientSecret embedded_client_secret = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_embedded_client_secret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLogon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLogon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // optional uint32 deprecated_obfustucated_private_ip = 2;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_obfustucated_private_ip(), target);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cell_id(), target);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_session_id(), target);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_package_version(), target);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_language().data(), static_cast<int>(this->_internal_client_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.client_language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_client_language(), target);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_os_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_should_remember_password(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wine_version().data(), static_cast<int>(this->_internal_wine_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.wine_version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_wine_version(), target);
  }

  // optional uint32 deprecated_10 = 10;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_deprecated_10(), target);
  }

  // optional .CMsgIPAddress obfuscated_private_ip = 11;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::obfuscated_private_ip(this),
        _Internal::obfuscated_private_ip(this).GetCachedSize(), target, stream);
  }

  // optional uint32 deprecated_public_ip = 20;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_deprecated_public_ip(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_qos_level(), target);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(22, this->_internal_client_supplied_steam_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgIPAddress public_ip = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::public_ip(this),
        _Internal::public_ip(this).GetCachedSize(), target, stream);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_machine_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_launcher_type(), target);
  }

  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_ui_mode(), target);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_chat_mode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        41, this->_internal_steam2_auth_ticket(), target);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_address().data(), static_cast<int>(this->_internal_email_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.email_address");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_email_address(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(43, this->_internal_rtime32_account_creation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.account_name");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_account_name(), target);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.password");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_password(), target);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_server_token().data(), static_cast<int>(this->_internal_game_server_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.game_server_token");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_game_server_token(), target);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_login_key().data(), static_cast<int>(this->_internal_login_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.login_key");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_login_key(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(70, this->_internal_was_converted_deprecated_msg(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anon_user_target_account_name().data(), static_cast<int>(this->_internal_anon_user_target_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.anon_user_target_account_name");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_anon_user_target_account_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(81, this->_internal_resolved_user_steam_id(), target);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(82, this->_internal_eresult_sentryfile(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        83, this->_internal_sha_sentryfile(), target);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auth_code().data(), static_cast<int>(this->_internal_auth_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.auth_code");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_auth_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(85, this->_internal_otp_type(), target);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(86, this->_internal_otp_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_otp_identifier().data(), static_cast<int>(this->_internal_otp_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.otp_identifier");
    target = stream->WriteStringMaybeAliased(
        87, this->_internal_otp_identifier(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(88, this->_internal_steam2_ticket_request(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        90, this->_internal_sony_psn_ticket(), target);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sony_psn_service_id().data(), static_cast<int>(this->_internal_sony_psn_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.sony_psn_service_id");
    target = stream->WriteStringMaybeAliased(
        91, this->_internal_sony_psn_service_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(92, this->_internal_create_new_psn_linked_account_if_needed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sony_psn_name().data(), static_cast<int>(this->_internal_sony_psn_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.sony_psn_name");
    target = stream->WriteStringMaybeAliased(
        93, this->_internal_sony_psn_name(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(94, this->_internal_game_server_app_id(), target);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(95, this->_internal_steamguard_dont_remember_computer(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.machine_name");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_machine_name(), target);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name_userchosen().data(), static_cast<int>(this->_internal_machine_name_userchosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.machine_name_userchosen");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_machine_name_userchosen(), target);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_override().data(), static_cast<int>(this->_internal_country_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.country_override");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_country_override(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(99, this->_internal_is_steam_box(), target);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(100, this->_internal_client_instance_id(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_two_factor_code().data(), static_cast<int>(this->_internal_two_factor_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.two_factor_code");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_two_factor_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(102, this->_internal_supports_rate_limit_response(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_web_logon_nonce().data(), static_cast<int>(this->_internal_web_logon_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.web_logon_nonce");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_web_logon_nonce(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 priority_reason = 104;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(104, this->_internal_priority_reason(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgClientSecret embedded_client_secret = 105;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::embedded_client_secret(this),
        _Internal::embedded_client_secret(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLogon)
  return target;
}

size_t CMsgClientLogon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLogon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_language = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_language());
    }

    // optional string wine_version = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wine_version());
    }

    // optional bytes machine_id = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_machine_id());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_address());
    }

    // optional string account_name = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string password = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string game_server_token = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_server_token());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string login_key = 60;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_key());
    }

    // optional string anon_user_target_account_name = 80;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anon_user_target_account_name());
    }

    // optional bytes sha_sentryfile = 83;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auth_code());
    }

    // optional string otp_identifier = 87;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_otp_identifier());
    }

    // optional bytes sony_psn_ticket = 90;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sony_psn_service_id());
    }

    // optional string sony_psn_name = 93;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sony_psn_name());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string machine_name = 96;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string machine_name_userchosen = 97;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name_userchosen());
    }

    // optional string country_override = 98;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_override());
    }

    // optional string two_factor_code = 101;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_two_factor_code());
    }

    // optional string web_logon_nonce = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_web_logon_nonce());
    }

    // optional .CMsgIPAddress obfuscated_private_ip = 11;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.obfuscated_private_ip_);
    }

    // optional .CMsgIPAddress public_ip = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.public_ip_);
    }

    // optional .CMsgClientSecret embedded_client_secret = 105;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.embedded_client_secret_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x01000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_protocol_version());
    }

    // optional uint32 deprecated_obfustucated_private_ip = 2;
    if (cached_has_bits & 0x02000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (cached_has_bits & 0x04000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional uint32 last_session_id = 4;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_package_version());
    }

    // optional uint32 client_os_type = 7;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_os_type());
    }

    // optional uint32 deprecated_10 = 10;
    if (cached_has_bits & 0x40000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_10());
    }

    // optional uint32 deprecated_public_ip = 20;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 client_supplied_steam_id = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional uint32 qos_level = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_qos_level());
    }

    // optional uint32 launcher_type = 31 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_launcher_type());
    }

    // optional uint32 ui_mode = 32 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ui_mode());
    }

    // optional uint32 chat_mode = 33 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_chat_mode());
    }

    // optional fixed32 rtime32_account_creation = 43;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional bool should_remember_password = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool steam2_ticket_request = 88;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional int32 eresult_sentryfile = 82;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_eresult_sentryfile());
    }

    // optional int32 otp_type = 85;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_otp_type());
    }

    // optional uint32 otp_value = 86;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_otp_value());
    }

    // optional int32 game_server_app_id = 94;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_game_server_app_id());
    }

    // optional uint64 client_instance_id = 100;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_client_instance_id());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool steamguard_dont_remember_computer = 95;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_box = 99;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool supports_rate_limit_response = 102;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 priority_reason = 104;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_priority_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLogon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientLogon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLogon::GetClassData() const { return &_class_data_; }


void CMsgClientLogon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientLogon*>(&to_msg);
  auto& from = static_cast<const CMsgClientLogon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_client_language(from._internal_client_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_wine_version(from._internal_wine_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_machine_id(from._internal_machine_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_steam2_auth_ticket(from._internal_steam2_auth_ticket());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_email_address(from._internal_email_address());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_set_game_server_token(from._internal_game_server_token());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_set_login_key(from._internal_login_key());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_set_anon_user_target_account_name(from._internal_anon_user_target_account_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_set_sha_sentryfile(from._internal_sha_sentryfile());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_set_auth_code(from._internal_auth_code());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_set_otp_identifier(from._internal_otp_identifier());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_set_sony_psn_ticket(from._internal_sony_psn_ticket());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_set_sony_psn_service_id(from._internal_sony_psn_service_id());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_set_sony_psn_name(from._internal_sony_psn_name());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_set_machine_name_userchosen(from._internal_machine_name_userchosen());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_set_country_override(from._internal_country_override());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_set_two_factor_code(from._internal_two_factor_code());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_set_web_logon_nonce(from._internal_web_logon_nonce());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_obfuscated_private_ip()->::CMsgIPAddress::MergeFrom(
          from._internal_obfuscated_private_ip());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(
          from._internal_public_ip());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_embedded_client_secret()->::CMsgClientSecret::MergeFrom(
          from._internal_embedded_client_secret());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.deprecated_obfustucated_private_ip_ = from._impl_.deprecated_obfustucated_private_ip_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.cell_id_ = from._impl_.cell_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.last_session_id_ = from._impl_.last_session_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.client_package_version_ = from._impl_.client_package_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.client_os_type_ = from._impl_.client_os_type_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.deprecated_10_ = from._impl_.deprecated_10_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.deprecated_public_ip_ = from._impl_.deprecated_public_ip_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.client_supplied_steam_id_ = from._impl_.client_supplied_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.qos_level_ = from._impl_.qos_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.launcher_type_ = from._impl_.launcher_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ui_mode_ = from._impl_.ui_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.chat_mode_ = from._impl_.chat_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.rtime32_account_creation_ = from._impl_.rtime32_account_creation_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.should_remember_password_ = from._impl_.should_remember_password_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.was_converted_deprecated_msg_ = from._impl_.was_converted_deprecated_msg_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.steam2_ticket_request_ = from._impl_.steam2_ticket_request_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.create_new_psn_linked_account_if_needed_ = from._impl_.create_new_psn_linked_account_if_needed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.resolved_user_steam_id_ = from._impl_.resolved_user_steam_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.eresult_sentryfile_ = from._impl_.eresult_sentryfile_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.otp_type_ = from._impl_.otp_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.otp_value_ = from._impl_.otp_value_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.game_server_app_id_ = from._impl_.game_server_app_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.client_instance_id_ = from._impl_.client_instance_id_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.steamguard_dont_remember_computer_ = from._impl_.steamguard_dont_remember_computer_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.is_steam_box_ = from._impl_.is_steam_box_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.supports_rate_limit_response_ = from._impl_.supports_rate_limit_response_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.priority_reason_ = from._impl_.priority_reason_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {
  return true;
}

void CMsgClientLogon::InternalSwap(CMsgClientLogon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.client_language_, lhs_arena,
      &other->_impl_.client_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.wine_version_, lhs_arena,
      &other->_impl_.wine_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.machine_id_, lhs_arena,
      &other->_impl_.machine_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.steam2_auth_ticket_, lhs_arena,
      &other->_impl_.steam2_auth_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_address_, lhs_arena,
      &other->_impl_.email_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.account_name_, lhs_arena,
      &other->_impl_.account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.password_, lhs_arena,
      &other->_impl_.password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_server_token_, lhs_arena,
      &other->_impl_.game_server_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_key_, lhs_arena,
      &other->_impl_.login_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.anon_user_target_account_name_, lhs_arena,
      &other->_impl_.anon_user_target_account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sha_sentryfile_, lhs_arena,
      &other->_impl_.sha_sentryfile_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auth_code_, lhs_arena,
      &other->_impl_.auth_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.otp_identifier_, lhs_arena,
      &other->_impl_.otp_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sony_psn_ticket_, lhs_arena,
      &other->_impl_.sony_psn_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sony_psn_service_id_, lhs_arena,
      &other->_impl_.sony_psn_service_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sony_psn_name_, lhs_arena,
      &other->_impl_.sony_psn_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.machine_name_, lhs_arena,
      &other->_impl_.machine_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.machine_name_userchosen_, lhs_arena,
      &other->_impl_.machine_name_userchosen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_override_, lhs_arena,
      &other->_impl_.country_override_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.two_factor_code_, lhs_arena,
      &other->_impl_.two_factor_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.web_logon_nonce_, lhs_arena,
      &other->_impl_.web_logon_nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLogon, _impl_.priority_reason_)
      + sizeof(CMsgClientLogon::_impl_.priority_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLogon, _impl_.obfuscated_private_ip_)>(
          reinterpret_cast<char*>(&_impl_.obfuscated_private_ip_),
          reinterpret_cast<char*>(&other->_impl_.obfuscated_private_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[4]);
}

// ===================================================================

class CMsgClientLogonResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLogonResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_out_of_game_heartbeat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_in_game_heartbeat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rtime32_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_email_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam2_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult_extended(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_webapi_authenticate_user_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_id_ping_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_pics(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vanity_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientLogonResponse* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_client_supplied_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ip_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parental_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parental_setting_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count_loginfailures_to_migrate(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_count_disconnects_to_migrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ogs_data_report_time_window(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_force_client_update_check(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::CMsgIPAddress&
CMsgClientLogonResponse::_Internal::public_ip(const CMsgClientLogonResponse* msg) {
  return *msg->_impl_.public_ip_;
}
void CMsgClientLogonResponse::clear_public_ip() {
  if (_impl_.public_ip_ != nullptr) _impl_.public_ip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
CMsgClientLogonResponse::CMsgClientLogonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogonResponse)
}
CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientLogonResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_domain_){}
    , decltype(_impl_.steam2_ticket_){}
    , decltype(_impl_.webapi_authenticate_user_nonce_){}
    , decltype(_impl_.vanity_url_){}
    , decltype(_impl_.ip_country_code_){}
    , decltype(_impl_.parental_settings_){}
    , decltype(_impl_.parental_setting_signature_){}
    , decltype(_impl_.public_ip_){nullptr}
    , decltype(_impl_.out_of_game_heartbeat_seconds_){}
    , decltype(_impl_.in_game_heartbeat_seconds_){}
    , decltype(_impl_.deprecated_public_ip_){}
    , decltype(_impl_.rtime32_server_time_){}
    , decltype(_impl_.account_flags_){}
    , decltype(_impl_.cell_id_){}
    , decltype(_impl_.eresult_extended_){}
    , decltype(_impl_.cell_id_ping_threshold_){}
    , decltype(_impl_.client_supplied_steamid_){}
    , decltype(_impl_.use_pics_){}
    , decltype(_impl_.force_client_update_check_){}
    , decltype(_impl_.count_loginfailures_to_migrate_){}
    , decltype(_impl_.count_disconnects_to_migrate_){}
    , decltype(_impl_.ogs_data_report_time_window_){}
    , decltype(_impl_.client_instance_id_){}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.email_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_email_domain()) {
    _this->_impl_.email_domain_.Set(from._internal_email_domain(), 
      _this->GetArenaForAllocation());
  }
  _impl_.steam2_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steam2_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steam2_ticket()) {
    _this->_impl_.steam2_ticket_.Set(from._internal_steam2_ticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.webapi_authenticate_user_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_authenticate_user_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webapi_authenticate_user_nonce()) {
    _this->_impl_.webapi_authenticate_user_nonce_.Set(from._internal_webapi_authenticate_user_nonce(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vanity_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vanity_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_vanity_url()) {
    _this->_impl_.vanity_url_.Set(from._internal_vanity_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip_country_code()) {
    _this->_impl_.ip_country_code_.Set(from._internal_ip_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parental_settings_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parental_settings_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parental_settings()) {
    _this->_impl_.parental_settings_.Set(from._internal_parental_settings(), 
      _this->GetArenaForAllocation());
  }
  _impl_.parental_setting_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parental_setting_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_parental_setting_signature()) {
    _this->_impl_.parental_setting_signature_.Set(from._internal_parental_setting_signature(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_public_ip()) {
    _this->_impl_.public_ip_ = new ::CMsgIPAddress(*from._impl_.public_ip_);
  }
  ::memcpy(&_impl_.out_of_game_heartbeat_seconds_, &from._impl_.out_of_game_heartbeat_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eresult_) -
    reinterpret_cast<char*>(&_impl_.out_of_game_heartbeat_seconds_)) + sizeof(_impl_.eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogonResponse)
}

inline void CMsgClientLogonResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.email_domain_){}
    , decltype(_impl_.steam2_ticket_){}
    , decltype(_impl_.webapi_authenticate_user_nonce_){}
    , decltype(_impl_.vanity_url_){}
    , decltype(_impl_.ip_country_code_){}
    , decltype(_impl_.parental_settings_){}
    , decltype(_impl_.parental_setting_signature_){}
    , decltype(_impl_.public_ip_){nullptr}
    , decltype(_impl_.out_of_game_heartbeat_seconds_){0}
    , decltype(_impl_.in_game_heartbeat_seconds_){0}
    , decltype(_impl_.deprecated_public_ip_){0u}
    , decltype(_impl_.rtime32_server_time_){0u}
    , decltype(_impl_.account_flags_){0u}
    , decltype(_impl_.cell_id_){0u}
    , decltype(_impl_.eresult_extended_){0}
    , decltype(_impl_.cell_id_ping_threshold_){0u}
    , decltype(_impl_.client_supplied_steamid_){uint64_t{0u}}
    , decltype(_impl_.use_pics_){false}
    , decltype(_impl_.force_client_update_check_){false}
    , decltype(_impl_.count_loginfailures_to_migrate_){0}
    , decltype(_impl_.count_disconnects_to_migrate_){0}
    , decltype(_impl_.ogs_data_report_time_window_){0}
    , decltype(_impl_.client_instance_id_){uint64_t{0u}}
    , decltype(_impl_.eresult_){2}
  };
  _impl_.email_domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.email_domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.steam2_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steam2_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.webapi_authenticate_user_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_authenticate_user_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vanity_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vanity_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parental_settings_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parental_settings_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.parental_setting_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.parental_setting_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLogonResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientLogonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.email_domain_.Destroy();
  _impl_.steam2_ticket_.Destroy();
  _impl_.webapi_authenticate_user_nonce_.Destroy();
  _impl_.vanity_url_.Destroy();
  _impl_.ip_country_code_.Destroy();
  _impl_.parental_settings_.Destroy();
  _impl_.parental_setting_signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.public_ip_;
}

void CMsgClientLogonResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientLogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLogonResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.email_domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.steam2_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.webapi_authenticate_user_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.vanity_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ip_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.parental_settings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.parental_setting_signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.public_ip_ != nullptr);
      _impl_.public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.out_of_game_heartbeat_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cell_id_ping_threshold_) -
        reinterpret_cast<char*>(&_impl_.out_of_game_heartbeat_seconds_)) + sizeof(_impl_.cell_id_ping_threshold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.client_supplied_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.client_instance_id_) -
        reinterpret_cast<char*>(&_impl_.client_supplied_steamid_)) + sizeof(_impl_.client_instance_id_));
    _impl_.eresult_ = 2;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLogonResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_out_of_game_heartbeat_seconds(&has_bits);
          _impl_.out_of_game_heartbeat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 in_game_heartbeat_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_in_game_heartbeat_seconds(&has_bits);
          _impl_.in_game_heartbeat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          _impl_.deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 rtime32_server_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_rtime32_server_time(&has_bits);
          _impl_.rtime32_server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_account_flags(&has_bits);
          _impl_.account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cell_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_cell_id(&has_bits);
          _impl_.cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string email_domain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_email_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogonResponse.email_domain");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes steam2_ticket = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_steam2_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult_extended = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_eresult_extended(&has_bits);
          _impl_.eresult_extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string webapi_authenticate_user_nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_webapi_authenticate_user_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogonResponse.webapi_authenticate_user_nonce");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cell_id_ping_threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cell_id_ping_threshold(&has_bits);
          _impl_.cell_id_ping_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_pics = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_use_pics(&has_bits);
          _impl_.use_pics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string vanity_url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_vanity_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogonResponse.vanity_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 client_supplied_steamid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _Internal::set_has_client_supplied_steamid(&has_bits);
          _impl_.client_supplied_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string ip_country_code = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ip_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientLogonResponse.ip_country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes parental_settings = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_parental_settings();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes parental_setting_signature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_parental_setting_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count_loginfailures_to_migrate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_count_loginfailures_to_migrate(&has_bits);
          _impl_.count_loginfailures_to_migrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 count_disconnects_to_migrate = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_count_disconnects_to_migrate(&has_bits);
          _impl_.count_disconnects_to_migrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ogs_data_report_time_window = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_ogs_data_report_time_window(&has_bits);
          _impl_.ogs_data_report_time_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_client_instance_id(&has_bits);
          _impl_.client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool force_client_update_check = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_force_client_update_check(&has_bits);
          _impl_.force_client_update_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLogonResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLogonResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_of_game_heartbeat_seconds(), target);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_in_game_heartbeat_seconds(), target);
  }

  // optional uint32 deprecated_public_ip = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deprecated_public_ip(), target);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_server_time(), target);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_account_flags(), target);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cell_id(), target);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_domain().data(), static_cast<int>(this->_internal_email_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.email_domain");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_email_domain(), target);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_steam2_ticket(), target);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_eresult_extended(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_authenticate_user_nonce().data(), static_cast<int>(this->_internal_webapi_authenticate_user_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_webapi_authenticate_user_nonce(), target);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cell_id_ping_threshold(), target);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_use_pics(), target);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vanity_url().data(), static_cast<int>(this->_internal_vanity_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.vanity_url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_vanity_url(), target);
  }

  // optional .CMsgIPAddress public_ip = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::public_ip(this),
        _Internal::public_ip(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(20, this->_internal_client_supplied_steamid(), target);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_country_code().data(), static_cast<int>(this->_internal_ip_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.ip_country_code");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ip_country_code(), target);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_parental_settings(), target);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_parental_setting_signature(), target);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_count_loginfailures_to_migrate(), target);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_count_disconnects_to_migrate(), target);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_ogs_data_report_time_window(), target);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(27, this->_internal_client_instance_id(), target);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_force_client_update_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLogonResponse)
  return target;
}

size_t CMsgClientLogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLogonResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string email_domain = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_domain());
    }

    // optional bytes steam2_ticket = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steam2_ticket());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_authenticate_user_nonce());
    }

    // optional string vanity_url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vanity_url());
    }

    // optional string ip_country_code = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_country_code());
    }

    // optional bytes parental_settings = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_parental_settings());
    }

    // optional bytes parental_setting_signature = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_parental_setting_signature());
    }

    // optional .CMsgIPAddress public_ip = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.public_ip_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 out_of_game_heartbeat_seconds = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_out_of_game_heartbeat_seconds());
    }

    // optional int32 in_game_heartbeat_seconds = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_in_game_heartbeat_seconds());
    }

    // optional uint32 deprecated_public_ip = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deprecated_public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_flags());
    }

    // optional uint32 cell_id = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id());
    }

    // optional int32 eresult_extended = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult_extended());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_id_ping_threshold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 client_supplied_steamid = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional bool use_pics = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool force_client_update_check = 28;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 count_loginfailures_to_migrate = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_count_loginfailures_to_migrate());
    }

    // optional int32 count_disconnects_to_migrate = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_count_disconnects_to_migrate());
    }

    // optional int32 ogs_data_report_time_window = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_ogs_data_report_time_window());
    }

    // optional uint64 client_instance_id = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_client_instance_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLogonResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientLogonResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLogonResponse::GetClassData() const { return &_class_data_; }


void CMsgClientLogonResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientLogonResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientLogonResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_email_domain(from._internal_email_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_steam2_ticket(from._internal_steam2_ticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_webapi_authenticate_user_nonce(from._internal_webapi_authenticate_user_nonce());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_vanity_url(from._internal_vanity_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_ip_country_code(from._internal_ip_country_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_parental_settings(from._internal_parental_settings());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_parental_setting_signature(from._internal_parental_setting_signature());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(
          from._internal_public_ip());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.out_of_game_heartbeat_seconds_ = from._impl_.out_of_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.in_game_heartbeat_seconds_ = from._impl_.in_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.deprecated_public_ip_ = from._impl_.deprecated_public_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.rtime32_server_time_ = from._impl_.rtime32_server_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.account_flags_ = from._impl_.account_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.cell_id_ = from._impl_.cell_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.eresult_extended_ = from._impl_.eresult_extended_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cell_id_ping_threshold_ = from._impl_.cell_id_ping_threshold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.client_supplied_steamid_ = from._impl_.client_supplied_steamid_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.use_pics_ = from._impl_.use_pics_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.force_client_update_check_ = from._impl_.force_client_update_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.count_loginfailures_to_migrate_ = from._impl_.count_loginfailures_to_migrate_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.count_disconnects_to_migrate_ = from._impl_.count_disconnects_to_migrate_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ogs_data_report_time_window_ = from._impl_.ogs_data_report_time_window_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.client_instance_id_ = from._impl_.client_instance_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {
  return true;
}

void CMsgClientLogonResponse::InternalSwap(CMsgClientLogonResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.email_domain_, lhs_arena,
      &other->_impl_.email_domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.steam2_ticket_, lhs_arena,
      &other->_impl_.steam2_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webapi_authenticate_user_nonce_, lhs_arena,
      &other->_impl_.webapi_authenticate_user_nonce_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vanity_url_, lhs_arena,
      &other->_impl_.vanity_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_country_code_, lhs_arena,
      &other->_impl_.ip_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parental_settings_, lhs_arena,
      &other->_impl_.parental_settings_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.parental_setting_signature_, lhs_arena,
      &other->_impl_.parental_setting_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLogonResponse, _impl_.client_instance_id_)
      + sizeof(CMsgClientLogonResponse::_impl_.client_instance_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLogonResponse, _impl_.public_ip_)>(
          reinterpret_cast<char*>(&_impl_.public_ip_),
          reinterpret_cast<char*>(&other->_impl_.public_ip_));
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogonResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[5]);
}

// ===================================================================

class CMsgClientRequestWebAPIAuthenticateUserNonce::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestWebAPIAuthenticateUserNonce>()._impl_._has_bits_);
  static void set_has_token_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
}
CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientRequestWebAPIAuthenticateUserNonce* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.token_type_ = from._impl_.token_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
}

inline void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.token_type_){-1}
  };
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_type_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestWebAPIAuthenticateUserNonce::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 token_type = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_token_type(&has_bits);
          _impl_.token_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestWebAPIAuthenticateUserNonce::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_token_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestWebAPIAuthenticateUserNonce)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 token_type = 1 [default = -1];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestWebAPIAuthenticateUserNonce::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientRequestWebAPIAuthenticateUserNonce::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestWebAPIAuthenticateUserNonce::GetClassData() const { return &_class_data_; }


void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientRequestWebAPIAuthenticateUserNonce*>(&to_msg);
  auto& from = static_cast<const CMsgClientRequestWebAPIAuthenticateUserNonce&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_type()) {
    _this->_internal_set_token_type(from._internal_token_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.token_type_, other->_impl_.token_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestWebAPIAuthenticateUserNonce::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[6]);
}

// ===================================================================

class CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webapi_authenticate_user_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}
CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.webapi_authenticate_user_nonce_){}
    , decltype(_impl_.eresult_){}
    , decltype(_impl_.token_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.webapi_authenticate_user_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_authenticate_user_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webapi_authenticate_user_nonce()) {
    _this->_impl_.webapi_authenticate_user_nonce_.Set(from._internal_webapi_authenticate_user_nonce(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.eresult_, &from._impl_.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.token_type_) -
    reinterpret_cast<char*>(&_impl_.eresult_)) + sizeof(_impl_.token_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.webapi_authenticate_user_nonce_){}
    , decltype(_impl_.eresult_){2}
    , decltype(_impl_.token_type_){-1}
  };
  _impl_.webapi_authenticate_user_nonce_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.webapi_authenticate_user_nonce_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.webapi_authenticate_user_nonce_.Destroy();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.webapi_authenticate_user_nonce_.ClearNonDefaultToEmpty();
    }
    _impl_.eresult_ = 2;
    _impl_.token_type_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 token_type = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_token_type(&has_bits);
          _impl_.token_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string webapi_authenticate_user_nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_webapi_authenticate_user_nonce();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_token_type(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_authenticate_user_nonce().data(), static_cast<int>(this->_internal_webapi_authenticate_user_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_webapi_authenticate_user_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_authenticate_user_nonce());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

    // optional int32 token_type = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_token_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetClassData() const { return &_class_data_; }


void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientRequestWebAPIAuthenticateUserNonceResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientRequestWebAPIAuthenticateUserNonceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_webapi_authenticate_user_nonce(from._internal_webapi_authenticate_user_nonce());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.eresult_ = from._impl_.eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.token_type_ = from._impl_.token_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.webapi_authenticate_user_nonce_, lhs_arena,
      &other->_impl_.webapi_authenticate_user_nonce_, rhs_arena
  );
  swap(_impl_.eresult_, other->_impl_.eresult_);
  swap(_impl_.token_type_, other->_impl_.token_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[7]);
}

// ===================================================================

class CMsgClientLogOff::_Internal {
 public:
};

CMsgClientLogOff::CMsgClientLogOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogOff)
}
CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgClientLogOff* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogOff)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLogOff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLogOff::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogOff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[8]);
}

// ===================================================================

class CMsgClientLoggedOff::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLoggedOff>()._impl_._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLoggedOff::CMsgClientLoggedOff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLoggedOff)
}
CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientLoggedOff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.eresult_ = from._impl_.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLoggedOff)
}

inline void CMsgClientLoggedOff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.eresult_){2}
  };
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  // @@protoc_insertion_point(destructor:CMsgClientLoggedOff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientLoggedOff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientLoggedOff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientLoggedOff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLoggedOff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.eresult_ = 2;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLoggedOff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          _impl_.eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientLoggedOff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLoggedOff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLoggedOff)
  return target;
}

size_t CMsgClientLoggedOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLoggedOff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientLoggedOff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientLoggedOff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientLoggedOff::GetClassData() const { return &_class_data_; }


void CMsgClientLoggedOff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientLoggedOff*>(&to_msg);
  auto& from = static_cast<const CMsgClientLoggedOff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _this->_internal_set_eresult(from._internal_eresult());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {
  return true;
}

void CMsgClientLoggedOff::InternalSwap(CMsgClientLoggedOff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.eresult_, other->_impl_.eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLoggedOff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[9]);
}

// ===================================================================

class CMsgClientNewLoginKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNewLoginKey>()._impl_._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_login_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNewLoginKey::CMsgClientNewLoginKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNewLoginKey)
}
CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientNewLoginKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.unique_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.login_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_login_key()) {
    _this->_impl_.login_key_.Set(from._internal_login_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.unique_id_ = from._impl_.unique_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNewLoginKey)
}

inline void CMsgClientNewLoginKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.login_key_){}
    , decltype(_impl_.unique_id_){0u}
  };
  _impl_.login_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.login_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  // @@protoc_insertion_point(destructor:CMsgClientNewLoginKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientNewLoginKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.login_key_.Destroy();
}

void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientNewLoginKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNewLoginKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.login_key_.ClearNonDefaultToEmpty();
  }
  _impl_.unique_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNewLoginKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unique_id(&has_bits);
          _impl_.unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string login_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_login_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientNewLoginKey.login_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientNewLoginKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNewLoginKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_login_key().data(), static_cast<int>(this->_internal_login_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientNewLoginKey.login_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_login_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNewLoginKey)
  return target;
}

size_t CMsgClientNewLoginKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNewLoginKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string login_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_key());
    }

    // optional uint32 unique_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientNewLoginKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientNewLoginKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientNewLoginKey::GetClassData() const { return &_class_data_; }


void CMsgClientNewLoginKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientNewLoginKey*>(&to_msg);
  auto& from = static_cast<const CMsgClientNewLoginKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_login_key(from._internal_login_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.unique_id_ = from._impl_.unique_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKey::InternalSwap(CMsgClientNewLoginKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.login_key_, lhs_arena,
      &other->_impl_.login_key_, rhs_arena
  );
  swap(_impl_.unique_id_, other->_impl_.unique_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNewLoginKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[10]);
}

// ===================================================================

class CMsgClientNewLoginKeyAccepted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNewLoginKeyAccepted>()._impl_._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNewLoginKeyAccepted)
}
CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientNewLoginKeyAccepted* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.unique_id_ = from._impl_.unique_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNewLoginKeyAccepted)
}

inline void CMsgClientNewLoginKeyAccepted::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_){0u}
  };
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  // @@protoc_insertion_point(destructor:CMsgClientNewLoginKeyAccepted)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientNewLoginKeyAccepted::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientNewLoginKeyAccepted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNewLoginKeyAccepted)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNewLoginKeyAccepted::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_unique_id(&has_bits);
          _impl_.unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientNewLoginKeyAccepted::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNewLoginKeyAccepted)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNewLoginKeyAccepted)
  return target;
}

size_t CMsgClientNewLoginKeyAccepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNewLoginKeyAccepted)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 unique_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unique_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientNewLoginKeyAccepted::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientNewLoginKeyAccepted::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientNewLoginKeyAccepted::GetClassData() const { return &_class_data_; }


void CMsgClientNewLoginKeyAccepted::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientNewLoginKeyAccepted*>(&to_msg);
  auto& from = static_cast<const CMsgClientNewLoginKeyAccepted&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unique_id()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKeyAccepted::InternalSwap(CMsgClientNewLoginKeyAccepted* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.unique_id_, other->_impl_.unique_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNewLoginKeyAccepted::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[11]);
}

// ===================================================================

class CMsgClientAccountInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAccountInfo>()._impl_._has_bits_);
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_authed_computers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_facebook_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_facebook_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamguard_notify_newmachines(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steamguard_machine_name_user_chosen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_phone_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_two_factor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_phone_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_phone_needing_reverify(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgClientAccountInfo::CMsgClientAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAccountInfo)
}
CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientAccountInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.ip_country_){}
    , decltype(_impl_.facebook_name_){}
    , decltype(_impl_.steamguard_machine_name_user_chosen_){}
    , decltype(_impl_.count_authed_computers_){}
    , decltype(_impl_.account_flags_){}
    , decltype(_impl_.facebook_id_){}
    , decltype(_impl_.steamguard_notify_newmachines_){}
    , decltype(_impl_.is_phone_verified_){}
    , decltype(_impl_.is_phone_identifying_){}
    , decltype(_impl_.is_phone_needing_reverify_){}
    , decltype(_impl_.two_factor_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    _this->_impl_.persona_name_.Set(from._internal_persona_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ip_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip_country()) {
    _this->_impl_.ip_country_.Set(from._internal_ip_country(), 
      _this->GetArenaForAllocation());
  }
  _impl_.facebook_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.facebook_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_facebook_name()) {
    _this->_impl_.facebook_name_.Set(from._internal_facebook_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.steamguard_machine_name_user_chosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steamguard_machine_name_user_chosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_steamguard_machine_name_user_chosen()) {
    _this->_impl_.steamguard_machine_name_user_chosen_.Set(from._internal_steamguard_machine_name_user_chosen(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.count_authed_computers_, &from._impl_.count_authed_computers_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.two_factor_state_) -
    reinterpret_cast<char*>(&_impl_.count_authed_computers_)) + sizeof(_impl_.two_factor_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAccountInfo)
}

inline void CMsgClientAccountInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.persona_name_){}
    , decltype(_impl_.ip_country_){}
    , decltype(_impl_.facebook_name_){}
    , decltype(_impl_.steamguard_machine_name_user_chosen_){}
    , decltype(_impl_.count_authed_computers_){0}
    , decltype(_impl_.account_flags_){0u}
    , decltype(_impl_.facebook_id_){uint64_t{0u}}
    , decltype(_impl_.steamguard_notify_newmachines_){false}
    , decltype(_impl_.is_phone_verified_){false}
    , decltype(_impl_.is_phone_identifying_){false}
    , decltype(_impl_.is_phone_needing_reverify_){false}
    , decltype(_impl_.two_factor_state_){0u}
  };
  _impl_.persona_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ip_country_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_country_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.facebook_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.facebook_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.steamguard_machine_name_user_chosen_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.steamguard_machine_name_user_chosen_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientAccountInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientAccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.persona_name_.Destroy();
  _impl_.ip_country_.Destroy();
  _impl_.facebook_name_.Destroy();
  _impl_.steamguard_machine_name_user_chosen_.Destroy();
}

void CMsgClientAccountInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAccountInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ip_country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.facebook_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.steamguard_machine_name_user_chosen_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.count_authed_computers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steamguard_notify_newmachines_) -
        reinterpret_cast<char*>(&_impl_.count_authed_computers_)) + sizeof(_impl_.steamguard_notify_newmachines_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.is_phone_verified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.two_factor_state_) -
        reinterpret_cast<char*>(&_impl_.is_phone_verified_)) + sizeof(_impl_.two_factor_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAccountInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string persona_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientAccountInfo.persona_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ip_country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip_country();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientAccountInfo.ip_country");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 count_authed_computers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_count_authed_computers(&has_bits);
          _impl_.count_authed_computers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_account_flags(&has_bits);
          _impl_.account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 facebook_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_facebook_id(&has_bits);
          _impl_.facebook_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string facebook_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_facebook_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientAccountInfo.facebook_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool steamguard_notify_newmachines = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_steamguard_notify_newmachines(&has_bits);
          _impl_.steamguard_notify_newmachines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string steamguard_machine_name_user_chosen = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_steamguard_machine_name_user_chosen();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_verified = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_phone_verified(&has_bits);
          _impl_.is_phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 two_factor_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_two_factor_state(&has_bits);
          _impl_.two_factor_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_identifying = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_phone_identifying(&has_bits);
          _impl_.is_phone_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_needing_reverify = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_is_phone_needing_reverify(&has_bits);
          _impl_.is_phone_needing_reverify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientAccountInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAccountInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.persona_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_persona_name(), target);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_country().data(), static_cast<int>(this->_internal_ip_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.ip_country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_country(), target);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_count_authed_computers(), target);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_account_flags(), target);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_facebook_id(), target);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_facebook_name().data(), static_cast<int>(this->_internal_facebook_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.facebook_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_facebook_name(), target);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_steamguard_notify_newmachines(), target);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamguard_machine_name_user_chosen().data(), static_cast<int>(this->_internal_steamguard_machine_name_user_chosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_steamguard_machine_name_user_chosen(), target);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_is_phone_verified(), target);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_two_factor_state(), target);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_is_phone_identifying(), target);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_is_phone_needing_reverify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAccountInfo)
  return target;
}

size_t CMsgClientAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAccountInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string ip_country = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_country());
    }

    // optional string facebook_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_facebook_name());
    }

    // optional string steamguard_machine_name_user_chosen = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamguard_machine_name_user_chosen());
    }

    // optional int32 count_authed_computers = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count_authed_computers());
    }

    // optional uint32 account_flags = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_facebook_id());
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_phone_verified = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_identifying = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_needing_reverify = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_state = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_two_factor_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientAccountInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientAccountInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientAccountInfo::GetClassData() const { return &_class_data_; }


void CMsgClientAccountInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientAccountInfo*>(&to_msg);
  auto& from = static_cast<const CMsgClientAccountInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ip_country(from._internal_ip_country());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_facebook_name(from._internal_facebook_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_steamguard_machine_name_user_chosen(from._internal_steamguard_machine_name_user_chosen());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.count_authed_computers_ = from._impl_.count_authed_computers_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.account_flags_ = from._impl_.account_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.facebook_id_ = from._impl_.facebook_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.steamguard_notify_newmachines_ = from._impl_.steamguard_notify_newmachines_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.is_phone_verified_ = from._impl_.is_phone_verified_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_phone_identifying_ = from._impl_.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_phone_needing_reverify_ = from._impl_.is_phone_needing_reverify_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.two_factor_state_ = from._impl_.two_factor_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {
  return true;
}

void CMsgClientAccountInfo::InternalSwap(CMsgClientAccountInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.persona_name_, lhs_arena,
      &other->_impl_.persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_country_, lhs_arena,
      &other->_impl_.ip_country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.facebook_name_, lhs_arena,
      &other->_impl_.facebook_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.steamguard_machine_name_user_chosen_, lhs_arena,
      &other->_impl_.steamguard_machine_name_user_chosen_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAccountInfo, _impl_.two_factor_state_)
      + sizeof(CMsgClientAccountInfo::_impl_.two_factor_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAccountInfo, _impl_.count_authed_computers_)>(
          reinterpret_cast<char*>(&_impl_.count_authed_computers_),
          reinterpret_cast<char*>(&other->_impl_.count_authed_computers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAccountInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[12]);
}

// ===================================================================

class CMsgClientChallengeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChallengeRequest>()._impl_._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientChallengeRequest::CMsgClientChallengeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientChallengeRequest)
}
CMsgClientChallengeRequest::CMsgClientChallengeRequest(const CMsgClientChallengeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientChallengeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.steamid_ = from._impl_.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientChallengeRequest)
}

inline void CMsgClientChallengeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steamid_){uint64_t{0u}}
  };
}

CMsgClientChallengeRequest::~CMsgClientChallengeRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientChallengeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientChallengeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientChallengeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChallengeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChallengeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          _impl_.steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChallengeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChallengeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChallengeRequest)
  return target;
}

size_t CMsgClientChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChallengeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChallengeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientChallengeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChallengeRequest::GetClassData() const { return &_class_data_; }


void CMsgClientChallengeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientChallengeRequest*>(&to_msg);
  auto& from = static_cast<const CMsgClientChallengeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChallengeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _this->_internal_set_steamid(from._internal_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChallengeRequest::CopyFrom(const CMsgClientChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeRequest::IsInitialized() const {
  return true;
}

void CMsgClientChallengeRequest::InternalSwap(CMsgClientChallengeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.steamid_, other->_impl_.steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChallengeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[13]);
}

// ===================================================================

class CMsgClientChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChallengeResponse>()._impl_._has_bits_);
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientChallengeResponse::CMsgClientChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientChallengeResponse)
}
CMsgClientChallengeResponse::CMsgClientChallengeResponse(const CMsgClientChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientChallengeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.challenge_ = from._impl_.challenge_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientChallengeResponse)
}

inline void CMsgClientChallengeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_){uint64_t{0u}}
  };
}

CMsgClientChallengeResponse::~CMsgClientChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientChallengeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientChallengeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChallengeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.challenge_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChallengeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 challenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_challenge(&has_bits);
          _impl_.challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientChallengeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChallengeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_challenge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChallengeResponse)
  return target;
}

size_t CMsgClientChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChallengeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 challenge = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientChallengeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientChallengeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientChallengeResponse::GetClassData() const { return &_class_data_; }


void CMsgClientChallengeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientChallengeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientChallengeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChallengeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenge()) {
    _this->_internal_set_challenge(from._internal_challenge());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientChallengeResponse::CopyFrom(const CMsgClientChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgClientChallengeResponse::InternalSwap(CMsgClientChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.challenge_, other->_impl_.challenge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChallengeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_getter, &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once,
      file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientHeartBeat*
Arena::CreateMaybeMessage< ::CMsgClientHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServerTimestampRequest*
Arena::CreateMaybeMessage< ::CMsgClientServerTimestampRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServerTimestampRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServerTimestampResponse*
Arena::CreateMaybeMessage< ::CMsgClientServerTimestampResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServerTimestampResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSecret*
Arena::CreateMaybeMessage< ::CMsgClientSecret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSecret >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogon*
Arena::CreateMaybeMessage< ::CMsgClientLogon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogonResponse*
Arena::CreateMaybeMessage< ::CMsgClientLogonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestWebAPIAuthenticateUserNonce*
Arena::CreateMaybeMessage< ::CMsgClientRequestWebAPIAuthenticateUserNonce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestWebAPIAuthenticateUserNonce >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse*
Arena::CreateMaybeMessage< ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogOff*
Arena::CreateMaybeMessage< ::CMsgClientLogOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLoggedOff*
Arena::CreateMaybeMessage< ::CMsgClientLoggedOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLoggedOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNewLoginKey*
Arena::CreateMaybeMessage< ::CMsgClientNewLoginKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNewLoginKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNewLoginKeyAccepted*
Arena::CreateMaybeMessage< ::CMsgClientNewLoginKeyAccepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNewLoginKeyAccepted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAccountInfo*
Arena::CreateMaybeMessage< ::CMsgClientAccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChallengeRequest*
Arena::CreateMaybeMessage< ::CMsgClientChallengeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChallengeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChallengeResponse*
Arena::CreateMaybeMessage< ::CMsgClientChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChallengeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
