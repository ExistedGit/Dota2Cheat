// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
class CMsgClientToGCBatchGetPlayerCardRosterRequest;
struct CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal;
extern CMsgClientToGCBatchGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp;
struct CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal;
extern CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestampDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp_default_instance_;
class CMsgClientToGCBatchGetPlayerCardRosterResponse;
struct CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal;
extern CMsgClientToGCBatchGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterResponse_default_instance_;
class CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse;
struct CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal;
extern CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponseDefaultTypeInternal _CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_default_instance_;
class CMsgClientToGCFantasyCraftingDevModifyTablet;
struct CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingDevModifyTabletDefaultTypeInternal _CMsgClientToGCFantasyCraftingDevModifyTablet_default_instance_;
class CMsgClientToGCFantasyCraftingDevModifyTabletResponse;
struct CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingDevModifyTabletResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingDevModifyTabletResponse_default_instance_;
class CMsgClientToGCFantasyCraftingGetUserData;
struct CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingGetUserDataDefaultTypeInternal _CMsgClientToGCFantasyCraftingGetUserData_default_instance_;
class CMsgClientToGCFantasyCraftingGetUserDataResponse;
struct CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingGetUserDataResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingGetUserDataResponse_default_instance_;
class CMsgClientToGCFantasyCraftingPerformOperation;
struct CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingPerformOperationDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperation_default_instance_;
class CMsgClientToGCFantasyCraftingPerformOperationResponse;
struct CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingPerformOperationResponseDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperationResponse_default_instance_;
class CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice;
struct CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal;
extern CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoiceDefaultTypeInternal _CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice_default_instance_;
class CMsgClientToGCGetPlayerCardRosterRequest;
struct CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal;
extern CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCGetPlayerCardRosterResponse;
struct CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal;
extern CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
class CMsgClientToGCSetPlayerCardRosterRequest;
struct CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal;
extern CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCSetPlayerCardRosterResponse;
struct CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal;
extern CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
class CMsgDOTADPCProfileInfo;
struct CMsgDOTADPCProfileInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_default_instance_;
class CMsgDOTADPCProfileInfo_FantasyInfo;
struct CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
class CMsgDOTADPCProfileInfo_PredictionInfo;
struct CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
class CMsgDOTADPCSearchResults;
struct CMsgDOTADPCSearchResultsDefaultTypeInternal;
extern CMsgDOTADPCSearchResultsDefaultTypeInternal _CMsgDOTADPCSearchResults_default_instance_;
class CMsgDOTADPCSearchResults_League;
struct CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal _CMsgDOTADPCSearchResults_League_default_instance_;
class CMsgDOTADPCSearchResults_Player;
struct CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal _CMsgDOTADPCSearchResults_Player_default_instance_;
class CMsgDOTADPCSearchResults_Team;
struct CMsgDOTADPCSearchResults_TeamDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_TeamDefaultTypeInternal _CMsgDOTADPCSearchResults_Team_default_instance_;
class CMsgDOTADPCTeamFavoriteRankings;
struct CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal;
extern CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_default_instance_;
class CMsgDOTADPCTeamFavoriteRankings_Team;
struct CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal;
extern CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatus;
struct CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal;
extern CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo;
struct CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal;
extern CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
class CMsgDOTALeaderboards;
struct CMsgDOTALeaderboardsDefaultTypeInternal;
extern CMsgDOTALeaderboardsDefaultTypeInternal _CMsgDOTALeaderboards_default_instance_;
class CMsgDOTALeaderboards_RegionLeaderboard;
struct CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal;
extern CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal _CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
class CMsgDOTAPassportPlayerCardChallenge;
struct CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal;
extern CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
class CMsgDOTAPassportStampedPlayer;
struct CMsgDOTAPassportStampedPlayerDefaultTypeInternal;
extern CMsgDOTAPassportStampedPlayerDefaultTypeInternal _CMsgDOTAPassportStampedPlayer_default_instance_;
class CMsgDOTAPassportVote;
struct CMsgDOTAPassportVoteDefaultTypeInternal;
extern CMsgDOTAPassportVoteDefaultTypeInternal _CMsgDOTAPassportVote_default_instance_;
class CMsgDOTAPassportVoteGenericSelection;
struct CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal;
extern CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal _CMsgDOTAPassportVoteGenericSelection_default_instance_;
class CMsgDOTAPassportVoteTeamGuess;
struct CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal;
extern CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal _CMsgDOTAPassportVoteTeamGuess_default_instance_;
class CMsgDOTAPlayerInfo;
struct CMsgDOTAPlayerInfoDefaultTypeInternal;
extern CMsgDOTAPlayerInfoDefaultTypeInternal _CMsgDOTAPlayerInfo_default_instance_;
class CMsgDOTAPlayerInfoList;
struct CMsgDOTAPlayerInfoListDefaultTypeInternal;
extern CMsgDOTAPlayerInfoListDefaultTypeInternal _CMsgDOTAPlayerInfoList_default_instance_;
class CMsgDOTAPlayerInfo_AuditEntry;
struct CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal;
extern CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal _CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
class CMsgDOTAPlayerInfo_Results;
struct CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal;
extern CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal _CMsgDOTAPlayerInfo_Results_default_instance_;
class CMsgDOTATeamRoster;
struct CMsgDOTATeamRosterDefaultTypeInternal;
extern CMsgDOTATeamRosterDefaultTypeInternal _CMsgDOTATeamRoster_default_instance_;
class CMsgDotaFantasyCraftingUserData;
struct CMsgDotaFantasyCraftingUserDataDefaultTypeInternal;
extern CMsgDotaFantasyCraftingUserDataDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_default_instance_;
class CMsgDotaFantasyCraftingUserData_Gem;
struct CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal;
extern CMsgDotaFantasyCraftingUserData_GemDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_Gem_default_instance_;
class CMsgDotaFantasyCraftingUserData_Tablet;
struct CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal;
extern CMsgDotaFantasyCraftingUserData_TabletDefaultTypeInternal _CMsgDotaFantasyCraftingUserData_Tablet_default_instance_;
class CMsgGCToClientFantasyCraftingDataUpdated;
struct CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal;
extern CMsgGCToClientFantasyCraftingDataUpdatedDefaultTypeInternal _CMsgGCToClientFantasyCraftingDataUpdated_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCBatchGetPlayerCardRosterRequest* Arena::CreateMaybeMessage<::CMsgClientToGCBatchGetPlayerCardRosterRequest>(Arena*);
template<> ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* Arena::CreateMaybeMessage<::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp>(Arena*);
template<> ::CMsgClientToGCBatchGetPlayerCardRosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCBatchGetPlayerCardRosterResponse>(Arena*);
template<> ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingDevModifyTablet* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingDevModifyTablet>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingDevModifyTabletResponse>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingGetUserData* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingGetUserData>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingGetUserDataResponse* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingGetUserDataResponse>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingPerformOperation* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingPerformOperation>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingPerformOperationResponse* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingPerformOperationResponse>(Arena*);
template<> ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* Arena::CreateMaybeMessage<::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice>(Arena*);
template<> ::CMsgClientToGCGetPlayerCardRosterRequest* Arena::CreateMaybeMessage<::CMsgClientToGCGetPlayerCardRosterRequest>(Arena*);
template<> ::CMsgClientToGCGetPlayerCardRosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetPlayerCardRosterResponse>(Arena*);
template<> ::CMsgClientToGCSetPlayerCardRosterRequest* Arena::CreateMaybeMessage<::CMsgClientToGCSetPlayerCardRosterRequest>(Arena*);
template<> ::CMsgClientToGCSetPlayerCardRosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCSetPlayerCardRosterResponse>(Arena*);
template<> ::CMsgDOTADPCProfileInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo>(Arena*);
template<> ::CMsgDOTADPCProfileInfo_FantasyInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo_FantasyInfo>(Arena*);
template<> ::CMsgDOTADPCProfileInfo_PredictionInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo_PredictionInfo>(Arena*);
template<> ::CMsgDOTADPCSearchResults* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults>(Arena*);
template<> ::CMsgDOTADPCSearchResults_League* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_League>(Arena*);
template<> ::CMsgDOTADPCSearchResults_Player* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_Player>(Arena*);
template<> ::CMsgDOTADPCSearchResults_Team* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_Team>(Arena*);
template<> ::CMsgDOTADPCTeamFavoriteRankings* Arena::CreateMaybeMessage<::CMsgDOTADPCTeamFavoriteRankings>(Arena*);
template<> ::CMsgDOTADPCTeamFavoriteRankings_Team* Arena::CreateMaybeMessage<::CMsgDOTADPCTeamFavoriteRankings_Team>(Arena*);
template<> ::CMsgDOTAFantasyDPCLeagueStatus* Arena::CreateMaybeMessage<::CMsgDOTAFantasyDPCLeagueStatus>(Arena*);
template<> ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* Arena::CreateMaybeMessage<::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(Arena*);
template<> ::CMsgDOTALeaderboards* Arena::CreateMaybeMessage<::CMsgDOTALeaderboards>(Arena*);
template<> ::CMsgDOTALeaderboards_RegionLeaderboard* Arena::CreateMaybeMessage<::CMsgDOTALeaderboards_RegionLeaderboard>(Arena*);
template<> ::CMsgDOTAPassportPlayerCardChallenge* Arena::CreateMaybeMessage<::CMsgDOTAPassportPlayerCardChallenge>(Arena*);
template<> ::CMsgDOTAPassportStampedPlayer* Arena::CreateMaybeMessage<::CMsgDOTAPassportStampedPlayer>(Arena*);
template<> ::CMsgDOTAPassportVote* Arena::CreateMaybeMessage<::CMsgDOTAPassportVote>(Arena*);
template<> ::CMsgDOTAPassportVoteGenericSelection* Arena::CreateMaybeMessage<::CMsgDOTAPassportVoteGenericSelection>(Arena*);
template<> ::CMsgDOTAPassportVoteTeamGuess* Arena::CreateMaybeMessage<::CMsgDOTAPassportVoteTeamGuess>(Arena*);
template<> ::CMsgDOTAPlayerInfo* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo>(Arena*);
template<> ::CMsgDOTAPlayerInfoList* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfoList>(Arena*);
template<> ::CMsgDOTAPlayerInfo_AuditEntry* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo_AuditEntry>(Arena*);
template<> ::CMsgDOTAPlayerInfo_Results* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo_Results>(Arena*);
template<> ::CMsgDOTATeamRoster* Arena::CreateMaybeMessage<::CMsgDOTATeamRoster>(Arena*);
template<> ::CMsgDotaFantasyCraftingUserData* Arena::CreateMaybeMessage<::CMsgDotaFantasyCraftingUserData>(Arena*);
template<> ::CMsgDotaFantasyCraftingUserData_Gem* Arena::CreateMaybeMessage<::CMsgDotaFantasyCraftingUserData_Gem>(Arena*);
template<> ::CMsgDotaFantasyCraftingUserData_Tablet* Arena::CreateMaybeMessage<::CMsgDotaFantasyCraftingUserData_Tablet>(Arena*);
template<> ::CMsgGCToClientFantasyCraftingDataUpdated* Arena::CreateMaybeMessage<::CMsgGCToClientFantasyCraftingDataUpdated>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgClientToGCGetPlayerCardRosterResponse_Result : int {
  CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS = 0,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED = 1,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID = 2,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP = 3
};
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value);
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MIN = CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX = CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
constexpr int CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE = CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetPlayerCardRosterResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetPlayerCardRosterResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetPlayerCardRosterResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetPlayerCardRosterResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetPlayerCardRosterResponse_Result>(
    CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor(), name, value);
}
enum CMsgClientToGCBatchGetPlayerCardRosterResponse_Result : int {
  CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_SUCCESS = 0,
  CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED = 1,
  CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID = 2,
  CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP = 3
};
bool CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_IsValid(int value);
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_MIN = CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_SUCCESS;
constexpr CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_MAX = CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
constexpr int CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE = CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCBatchGetPlayerCardRosterResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCBatchGetPlayerCardRosterResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCBatchGetPlayerCardRosterResponse_Result>(
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor(), name, value);
}
enum CMsgClientToGCSetPlayerCardRosterResponse_Result : int {
  CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS = 0,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED = 1,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID = 2,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP = 3,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_PLAYER_CARD_NOT_OWNED = 4,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_SLOT = 5,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_FAILED_CARD_INFO = 6,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_ACCOUNT_DUPLICATE = 7,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_LOCKED_TIMESTAMP = 8,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_FOR_PERIOD = 9,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_EVENT = 10
};
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value);
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MIN = CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX = CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_EVENT;
constexpr int CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_ARRAYSIZE = CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCSetPlayerCardRosterResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCSetPlayerCardRosterResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCSetPlayerCardRosterResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCSetPlayerCardRosterResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCSetPlayerCardRosterResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCSetPlayerCardRosterResponse_Result>(
    CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus : int {
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET = 0,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_PARTIAL = 1,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_FULL = 2,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED = 3
};
bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(int value);
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MIN = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED;
constexpr int CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_ARRAYSIZE = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>(
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor(), name, value);
}
enum CMsgDOTADPCSearchResults_ESearchResultsDesired : int {
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players = 1,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Teams = 2,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Leagues = 4,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All = 7
};
bool CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(int value);
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MIN = CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX = CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All;
constexpr int CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_ARRAYSIZE = CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
template<typename T>
inline const std::string& CMsgDOTADPCSearchResults_ESearchResultsDesired_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTADPCSearchResults_ESearchResultsDesired>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTADPCSearchResults_ESearchResultsDesired_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor(), enum_t_value);
}
inline bool CMsgDOTADPCSearchResults_ESearchResultsDesired_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTADPCSearchResults_ESearchResultsDesired* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTADPCSearchResults_ESearchResultsDesired>(
    CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor(), name, value);
}
enum CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse : int {
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInvalidLeague = 5
};
bool CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_MIN = CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_MAX = CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInvalidLeague;
constexpr int CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse>(
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse : int {
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eInvalidLeague = 5,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eNoTokens = 6,
  CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eMoreInfo = 7
};
bool CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_MIN = CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_MAX = CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eMoreInfo;
constexpr int CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse>(
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor(), name, value);
}
enum CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse : int {
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInternalError = 0,
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eSuccess = 1,
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eTooBusy = 2,
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eDisabled = 3,
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eTimeout = 4,
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInvalidLeague = 5
};
bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_IsValid(int value);
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_MIN = CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInternalError;
constexpr CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_MAX = CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInvalidLeague;
constexpr int CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_ARRAYSIZE = CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse>(
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor(), name, value);
}
enum DOTA_2013PassportSelectionIndices : int {
  PP13_SEL_ALLSTAR_PLAYER_0 = 0,
  PP13_SEL_ALLSTAR_PLAYER_1 = 1,
  PP13_SEL_ALLSTAR_PLAYER_2 = 2,
  PP13_SEL_ALLSTAR_PLAYER_3 = 3,
  PP13_SEL_ALLSTAR_PLAYER_4 = 4,
  PP13_SEL_ALLSTAR_PLAYER_5 = 5,
  PP13_SEL_ALLSTAR_PLAYER_6 = 6,
  PP13_SEL_ALLSTAR_PLAYER_7 = 7,
  PP13_SEL_ALLSTAR_PLAYER_8 = 8,
  PP13_SEL_ALLSTAR_PLAYER_9 = 9,
  PP13_SEL_QUALPRED_WEST_0 = 10,
  PP13_SEL_QUALPRED_WEST_1 = 11,
  PP13_SEL_QUALPRED_WEST_2 = 12,
  PP13_SEL_QUALPRED_WEST_3 = 13,
  PP13_SEL_QUALPRED_WEST_4 = 14,
  PP13_SEL_QUALPRED_WEST_5 = 15,
  PP13_SEL_QUALPRED_WEST_6 = 16,
  PP13_SEL_QUALPRED_WEST_7 = 17,
  PP13_SEL_QUALPRED_WEST_8 = 18,
  PP13_SEL_QUALPRED_WEST_9 = 19,
  PP13_SEL_QUALPRED_WEST_10 = 20,
  PP13_SEL_QUALPRED_WEST_11 = 21,
  PP13_SEL_QUALPRED_WEST_12 = 22,
  PP13_SEL_QUALPRED_WEST_13 = 23,
  PP13_SEL_QUALPRED_WEST_14 = 24,
  PP13_SEL_QUALPRED_EAST_0 = 25,
  PP13_SEL_QUALPRED_EAST_1 = 26,
  PP13_SEL_QUALPRED_EAST_2 = 27,
  PP13_SEL_QUALPRED_EAST_3 = 28,
  PP13_SEL_QUALPRED_EAST_4 = 29,
  PP13_SEL_QUALPRED_EAST_5 = 30,
  PP13_SEL_QUALPRED_EAST_6 = 31,
  PP13_SEL_QUALPRED_EAST_7 = 32,
  PP13_SEL_QUALPRED_EAST_8 = 33,
  PP13_SEL_QUALPRED_EAST_9 = 34,
  PP13_SEL_QUALPRED_EAST_10 = 35,
  PP13_SEL_QUALPRED_EAST_11 = 36,
  PP13_SEL_QUALPRED_EAST_12 = 37,
  PP13_SEL_QUALPRED_EAST_13 = 38,
  PP13_SEL_QUALPRED_EAST_14 = 39,
  PP13_SEL_TEAMCUP_TEAM = 40,
  PP13_SEL_TEAMCUP_PLAYER = 41,
  PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
  PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
  PP13_SEL_EVENTPRED_0 = 44,
  PP13_SEL_EVENTPRED_1 = 45,
  PP13_SEL_EVENTPRED_2 = 46,
  PP13_SEL_EVENTPRED_3 = 47,
  PP13_SEL_EVENTPRED_4 = 48,
  PP13_SEL_EVENTPRED_5 = 49,
  PP13_SEL_EVENTPRED_6 = 50,
  PP13_SEL_EVENTPRED_7 = 51,
  PP13_SEL_EVENTPRED_8 = 52,
  PP13_SEL_EVENTPRED_9 = 53,
  PP13_SEL_EVENTPRED_10 = 54,
  PP13_SEL_EVENTPRED_11 = 55,
  PP13_SEL_EVENTPRED_12 = 56,
  PP13_SEL_EVENTPRED_13 = 57,
  PP13_SEL_EVENTPRED_14 = 58,
  PP13_SEL_EVENTPRED_15 = 59,
  PP13_SEL_EVENTPRED_16 = 60,
  PP13_SEL_EVENTPRED_17 = 61,
  PP13_SEL_EVENTPRED_18 = 62,
  PP13_SEL_EVENTPRED_19 = 63,
  PP13_SEL_EVENTPRED_20 = 64,
  PP13_SEL_EVENTPRED_21 = 65,
  PP13_SEL_EVENTPRED_22 = 66,
  PP13_SEL_EVENTPRED_23 = 67,
  PP13_SEL_EVENTPRED_24 = 68,
  PP13_SEL_EVENTPRED_25 = 69,
  PP13_SEL_EVENTPRED_26 = 70,
  PP13_SEL_EVENTPRED_27 = 71,
  PP13_SEL_EVENTPRED_28 = 72,
  PP13_SEL_EVENTPRED_29 = 73,
  PP13_SEL_EVENTPRED_30 = 74,
  PP13_SEL_EVENTPRED_31 = 75,
  PP13_SEL_EVENTPRED_32 = 76,
  PP13_SEL_EVENTPRED_33 = 77,
  PP13_SEL_EVENTPRED_34 = 78,
  PP13_SEL_EVENTPRED_35 = 79,
  PP13_SEL_EVENTPRED_36 = 80,
  PP13_SEL_EVENTPRED_37 = 81,
  PP13_SEL_EVENTPRED_38 = 82,
  PP13_SEL_EVENTPRED_39 = 83,
  PP13_SEL_EVENTPRED_40 = 84,
  PP13_SEL_EVENTPRED_41 = 85,
  PP13_SEL_EVENTPRED_42 = 86,
  PP13_SEL_EVENTPRED_43 = 87,
  PP13_SEL_SOLO_0 = 88,
  PP13_SEL_SOLO_1 = 89,
  PP13_SEL_SOLO_2 = 90,
  PP13_SEL_SOLO_3 = 91,
  PP13_SEL_SOLO_4 = 92,
  PP13_SEL_SOLO_5 = 93,
  PP13_SEL_SOLO_6 = 94,
  PP13_SEL_SOLO_7 = 95
};
bool DOTA_2013PassportSelectionIndices_IsValid(int value);
constexpr DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MIN = PP13_SEL_ALLSTAR_PLAYER_0;
constexpr DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MAX = PP13_SEL_SOLO_7;
constexpr int DOTA_2013PassportSelectionIndices_ARRAYSIZE = DOTA_2013PassportSelectionIndices_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor();
template<typename T>
inline const std::string& DOTA_2013PassportSelectionIndices_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DOTA_2013PassportSelectionIndices>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DOTA_2013PassportSelectionIndices_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DOTA_2013PassportSelectionIndices_descriptor(), enum_t_value);
}
inline bool DOTA_2013PassportSelectionIndices_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DOTA_2013PassportSelectionIndices* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DOTA_2013PassportSelectionIndices>(
    DOTA_2013PassportSelectionIndices_descriptor(), name, value);
}
// ===================================================================

class CMsgDOTAPlayerInfo_Results final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo.Results) */ {
 public:
  inline CMsgDOTAPlayerInfo_Results() : CMsgDOTAPlayerInfo_Results(nullptr) {}
  ~CMsgDOTAPlayerInfo_Results() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo_Results(const CMsgDOTAPlayerInfo_Results& from);
  CMsgDOTAPlayerInfo_Results(CMsgDOTAPlayerInfo_Results&& from) noexcept
    : CMsgDOTAPlayerInfo_Results() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo_Results& operator=(const CMsgDOTAPlayerInfo_Results& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo_Results& operator=(CMsgDOTAPlayerInfo_Results&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPlayerInfo_Results& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo_Results* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo_Results*>(
               &_CMsgDOTAPlayerInfo_Results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgDOTAPlayerInfo_Results& a, CMsgDOTAPlayerInfo_Results& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo_Results* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo_Results* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPlayerInfo_Results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_Results>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPlayerInfo_Results& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPlayerInfo_Results& from) {
    CMsgDOTAPlayerInfo_Results::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo_Results* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo.Results";
  }
  protected:
  explicit CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kPlacementFieldNumber = 2,
    kEarningsFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 placement = 2;
  bool has_placement() const;
  private:
  bool _internal_has_placement() const;
  public:
  void clear_placement();
  uint32_t placement() const;
  void set_placement(uint32_t value);
  private:
  uint32_t _internal_placement() const;
  void _internal_set_placement(uint32_t value);
  public:

  // optional uint32 earnings = 3;
  bool has_earnings() const;
  private:
  bool _internal_has_earnings() const;
  public:
  void clear_earnings();
  uint32_t earnings() const;
  void set_earnings(uint32_t value);
  private:
  uint32_t _internal_earnings() const;
  void _internal_set_earnings(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo.Results)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
    uint32_t placement_;
    uint32_t earnings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfo_AuditEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo.AuditEntry) */ {
 public:
  inline CMsgDOTAPlayerInfo_AuditEntry() : CMsgDOTAPlayerInfo_AuditEntry(nullptr) {}
  ~CMsgDOTAPlayerInfo_AuditEntry() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo_AuditEntry(const CMsgDOTAPlayerInfo_AuditEntry& from);
  CMsgDOTAPlayerInfo_AuditEntry(CMsgDOTAPlayerInfo_AuditEntry&& from) noexcept
    : CMsgDOTAPlayerInfo_AuditEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo_AuditEntry& operator=(const CMsgDOTAPlayerInfo_AuditEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo_AuditEntry& operator=(CMsgDOTAPlayerInfo_AuditEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPlayerInfo_AuditEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo_AuditEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo_AuditEntry*>(
               &_CMsgDOTAPlayerInfo_AuditEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgDOTAPlayerInfo_AuditEntry& a, CMsgDOTAPlayerInfo_AuditEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo_AuditEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo_AuditEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPlayerInfo_AuditEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_AuditEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPlayerInfo_AuditEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPlayerInfo_AuditEntry& from) {
    CMsgDOTAPlayerInfo_AuditEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo_AuditEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo.AuditEntry";
  }
  protected:
  explicit CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 4,
    kTeamTagFieldNumber = 5,
    kTeamUrlLogoFieldNumber = 6,
    kStartTimestampFieldNumber = 1,
    kEndTimestampFieldNumber = 2,
    kTeamIdFieldNumber = 3,
  };
  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 5;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_NODISCARD std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_url_logo = 6;
  bool has_team_url_logo() const;
  private:
  bool _internal_has_team_url_logo() const;
  public:
  void clear_team_url_logo();
  const std::string& team_url_logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_url_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_url_logo();
  PROTOBUF_NODISCARD std::string* release_team_url_logo();
  void set_allocated_team_url_logo(std::string* team_url_logo);
  private:
  const std::string& _internal_team_url_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_url_logo(const std::string& value);
  std::string* _internal_mutable_team_url_logo();
  public:

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 end_timestamp = 2;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  uint32_t end_timestamp() const;
  void set_end_timestamp(uint32_t value);
  private:
  uint32_t _internal_end_timestamp() const;
  void _internal_set_end_timestamp(uint32_t value);
  public:

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo.AuditEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_url_logo_;
    uint32_t start_timestamp_;
    uint32_t end_timestamp_;
    uint32_t team_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo) */ {
 public:
  inline CMsgDOTAPlayerInfo() : CMsgDOTAPlayerInfo(nullptr) {}
  ~CMsgDOTAPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo(const CMsgDOTAPlayerInfo& from);
  CMsgDOTAPlayerInfo(CMsgDOTAPlayerInfo&& from) noexcept
    : CMsgDOTAPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo& operator=(const CMsgDOTAPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo& operator=(CMsgDOTAPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo*>(
               &_CMsgDOTAPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgDOTAPlayerInfo& a, CMsgDOTAPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPlayerInfo& from) {
    CMsgDOTAPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo";
  }
  protected:
  explicit CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAPlayerInfo_Results Results;
  typedef CMsgDOTAPlayerInfo_AuditEntry AuditEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 14,
    kAuditEntriesFieldNumber = 16,
    kNameFieldNumber = 2,
    kCountryCodeFieldNumber = 3,
    kTeamNameFieldNumber = 6,
    kTeamTagFieldNumber = 7,
    kSponsorFieldNumber = 8,
    kRealNameFieldNumber = 11,
    kTeamUrlLogoFieldNumber = 15,
    kTeamAbbreviationFieldNumber = 17,
    kAccountIdFieldNumber = 1,
    kFantasyRoleFieldNumber = 4,
    kTeamIdFieldNumber = 5,
    kIsLockedFieldNumber = 9,
    kIsProFieldNumber = 10,
    kTotalEarningsFieldNumber = 13,
  };
  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CMsgDOTAPlayerInfo_Results* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >*
      mutable_results();
  private:
  const ::CMsgDOTAPlayerInfo_Results& _internal_results(int index) const;
  ::CMsgDOTAPlayerInfo_Results* _internal_add_results();
  public:
  const ::CMsgDOTAPlayerInfo_Results& results(int index) const;
  ::CMsgDOTAPlayerInfo_Results* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >&
      results() const;

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  int audit_entries_size() const;
  private:
  int _internal_audit_entries_size() const;
  public:
  void clear_audit_entries();
  ::CMsgDOTAPlayerInfo_AuditEntry* mutable_audit_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >*
      mutable_audit_entries();
  private:
  const ::CMsgDOTAPlayerInfo_AuditEntry& _internal_audit_entries(int index) const;
  ::CMsgDOTAPlayerInfo_AuditEntry* _internal_add_audit_entries();
  public:
  const ::CMsgDOTAPlayerInfo_AuditEntry& audit_entries(int index) const;
  ::CMsgDOTAPlayerInfo_AuditEntry* add_audit_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >&
      audit_entries() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string country_code = 3;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_country_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_country_code();
  PROTOBUF_NODISCARD std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string team_name = 6;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 7;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_tag();
  PROTOBUF_NODISCARD std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string sponsor = 8;
  bool has_sponsor() const;
  private:
  bool _internal_has_sponsor() const;
  public:
  void clear_sponsor();
  const std::string& sponsor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sponsor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sponsor();
  PROTOBUF_NODISCARD std::string* release_sponsor();
  void set_allocated_sponsor(std::string* sponsor);
  private:
  const std::string& _internal_sponsor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sponsor(const std::string& value);
  std::string* _internal_mutable_sponsor();
  public:

  // optional string real_name = 11;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional string team_url_logo = 15;
  bool has_team_url_logo() const;
  private:
  bool _internal_has_team_url_logo() const;
  public:
  void clear_team_url_logo();
  const std::string& team_url_logo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_url_logo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_url_logo();
  PROTOBUF_NODISCARD std::string* release_team_url_logo();
  void set_allocated_team_url_logo(std::string* team_url_logo);
  private:
  const std::string& _internal_team_url_logo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_url_logo(const std::string& value);
  std::string* _internal_mutable_team_url_logo();
  public:

  // optional string team_abbreviation = 17;
  bool has_team_abbreviation() const;
  private:
  bool _internal_has_team_abbreviation() const;
  public:
  void clear_team_abbreviation();
  const std::string& team_abbreviation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_abbreviation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_abbreviation();
  PROTOBUF_NODISCARD std::string* release_team_abbreviation();
  void set_allocated_team_abbreviation(std::string* team_abbreviation);
  private:
  const std::string& _internal_team_abbreviation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_abbreviation(const std::string& value);
  std::string* _internal_mutable_team_abbreviation();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  bool has_fantasy_role() const;
  private:
  bool _internal_has_fantasy_role() const;
  public:
  void clear_fantasy_role();
  ::Fantasy_Roles fantasy_role() const;
  void set_fantasy_role(::Fantasy_Roles value);
  private:
  ::Fantasy_Roles _internal_fantasy_role() const;
  void _internal_set_fantasy_role(::Fantasy_Roles value);
  public:

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional bool is_locked = 9;
  bool has_is_locked() const;
  private:
  bool _internal_has_is_locked() const;
  public:
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // optional bool is_pro = 10;
  bool has_is_pro() const;
  private:
  bool _internal_has_is_pro() const;
  public:
  void clear_is_pro();
  bool is_pro() const;
  void set_is_pro(bool value);
  private:
  bool _internal_is_pro() const;
  void _internal_set_is_pro(bool value);
  public:

  // optional uint32 total_earnings = 13;
  bool has_total_earnings() const;
  private:
  bool _internal_has_total_earnings() const;
  public:
  void clear_total_earnings();
  uint32_t total_earnings() const;
  void set_total_earnings(uint32_t value);
  private:
  uint32_t _internal_total_earnings() const;
  void _internal_set_total_earnings(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results > results_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry > audit_entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sponsor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_url_logo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_abbreviation_;
    uint32_t account_id_;
    int fantasy_role_;
    uint32_t team_id_;
    bool is_locked_;
    bool is_pro_;
    uint32_t total_earnings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfoList) */ {
 public:
  inline CMsgDOTAPlayerInfoList() : CMsgDOTAPlayerInfoList(nullptr) {}
  ~CMsgDOTAPlayerInfoList() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfoList(const CMsgDOTAPlayerInfoList& from);
  CMsgDOTAPlayerInfoList(CMsgDOTAPlayerInfoList&& from) noexcept
    : CMsgDOTAPlayerInfoList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfoList& operator=(const CMsgDOTAPlayerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfoList& operator=(CMsgDOTAPlayerInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPlayerInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfoList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfoList*>(
               &_CMsgDOTAPlayerInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgDOTAPlayerInfoList& a, CMsgDOTAPlayerInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPlayerInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfoList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPlayerInfoList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPlayerInfoList& from) {
    CMsgDOTAPlayerInfoList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfoList";
  }
  protected:
  explicit CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 1,
  };
  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  int player_infos_size() const;
  private:
  int _internal_player_infos_size() const;
  public:
  void clear_player_infos();
  ::CMsgDOTAPlayerInfo* mutable_player_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >*
      mutable_player_infos();
  private:
  const ::CMsgDOTAPlayerInfo& _internal_player_infos(int index) const;
  ::CMsgDOTAPlayerInfo* _internal_add_player_infos();
  public:
  const ::CMsgDOTAPlayerInfo& player_infos(int index) const;
  ::CMsgDOTAPlayerInfo* add_player_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >&
      player_infos() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo > player_infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATeamRoster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATeamRoster) */ {
 public:
  inline CMsgDOTATeamRoster() : CMsgDOTATeamRoster(nullptr) {}
  ~CMsgDOTATeamRoster() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATeamRoster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATeamRoster(const CMsgDOTATeamRoster& from);
  CMsgDOTATeamRoster(CMsgDOTATeamRoster&& from) noexcept
    : CMsgDOTATeamRoster() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATeamRoster& operator=(const CMsgDOTATeamRoster& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATeamRoster& operator=(CMsgDOTATeamRoster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATeamRoster& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATeamRoster* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATeamRoster*>(
               &_CMsgDOTATeamRoster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgDOTATeamRoster& a, CMsgDOTATeamRoster& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATeamRoster* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATeamRoster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATeamRoster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATeamRoster>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATeamRoster& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATeamRoster& from) {
    CMsgDOTATeamRoster::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATeamRoster* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATeamRoster";
  }
  protected:
  explicit CMsgDOTATeamRoster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberAccountIdsFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kTeamIdFieldNumber = 2,
    kCoachAccountIdFieldNumber = 4,
  };
  // repeated uint32 member_account_ids = 3;
  int member_account_ids_size() const;
  private:
  int _internal_member_account_ids_size() const;
  public:
  void clear_member_account_ids();
  private:
  uint32_t _internal_member_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_member_account_ids() const;
  void _internal_add_member_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_member_account_ids();
  public:
  uint32_t member_account_ids(int index) const;
  void set_member_account_ids(int index, uint32_t value);
  void add_member_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      member_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_member_account_ids();

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 team_id = 2;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 coach_account_id = 4;
  bool has_coach_account_id() const;
  private:
  bool _internal_has_coach_account_id() const;
  public:
  void clear_coach_account_id();
  uint32_t coach_account_id() const;
  void set_coach_account_id(uint32_t value);
  private:
  uint32_t _internal_coach_account_id() const;
  void _internal_set_coach_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATeamRoster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > member_account_ids_;
    uint32_t timestamp_;
    uint32_t team_id_;
    uint32_t coach_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo_PredictionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo.PredictionInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo_PredictionInfo() : CMsgDOTADPCProfileInfo_PredictionInfo(nullptr) {}
  ~CMsgDOTADPCProfileInfo_PredictionInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo_PredictionInfo(const CMsgDOTADPCProfileInfo_PredictionInfo& from);
  CMsgDOTADPCProfileInfo_PredictionInfo(CMsgDOTADPCProfileInfo_PredictionInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo_PredictionInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo_PredictionInfo& operator=(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo_PredictionInfo& operator=(CMsgDOTADPCProfileInfo_PredictionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCProfileInfo_PredictionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo_PredictionInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo_PredictionInfo*>(
               &_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgDOTADPCProfileInfo_PredictionInfo& a, CMsgDOTADPCProfileInfo_PredictionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCProfileInfo_PredictionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_PredictionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
    CMsgDOTADPCProfileInfo_PredictionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo.PredictionInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentFieldNumber = 1,
    kShardWinningsFieldNumber = 2,
  };
  // optional uint32 percent = 1;
  bool has_percent() const;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  uint32_t percent() const;
  void set_percent(uint32_t value);
  private:
  uint32_t _internal_percent() const;
  void _internal_set_percent(uint32_t value);
  public:

  // optional int32 shard_winnings = 2;
  bool has_shard_winnings() const;
  private:
  bool _internal_has_shard_winnings() const;
  public:
  void clear_shard_winnings();
  int32_t shard_winnings() const;
  void set_shard_winnings(int32_t value);
  private:
  int32_t _internal_shard_winnings() const;
  void _internal_set_shard_winnings(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo.PredictionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t percent_;
    int32_t shard_winnings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo_FantasyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo.FantasyInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo_FantasyInfo() : CMsgDOTADPCProfileInfo_FantasyInfo(nullptr) {}
  ~CMsgDOTADPCProfileInfo_FantasyInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo_FantasyInfo(const CMsgDOTADPCProfileInfo_FantasyInfo& from);
  CMsgDOTADPCProfileInfo_FantasyInfo(CMsgDOTADPCProfileInfo_FantasyInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo_FantasyInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo_FantasyInfo& operator=(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo_FantasyInfo& operator=(CMsgDOTADPCProfileInfo_FantasyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCProfileInfo_FantasyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo_FantasyInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo_FantasyInfo*>(
               &_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgDOTADPCProfileInfo_FantasyInfo& a, CMsgDOTADPCProfileInfo_FantasyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCProfileInfo_FantasyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_FantasyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
    CMsgDOTADPCProfileInfo_FantasyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo.FantasyInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTop90FinishesFieldNumber = 1,
    kTop75FinishesFieldNumber = 2,
    kTop50FinishesFieldNumber = 3,
    kShardWinningsFieldNumber = 4,
  };
  // optional uint32 top_90_finishes = 1;
  bool has_top_90_finishes() const;
  private:
  bool _internal_has_top_90_finishes() const;
  public:
  void clear_top_90_finishes();
  uint32_t top_90_finishes() const;
  void set_top_90_finishes(uint32_t value);
  private:
  uint32_t _internal_top_90_finishes() const;
  void _internal_set_top_90_finishes(uint32_t value);
  public:

  // optional uint32 top_75_finishes = 2;
  bool has_top_75_finishes() const;
  private:
  bool _internal_has_top_75_finishes() const;
  public:
  void clear_top_75_finishes();
  uint32_t top_75_finishes() const;
  void set_top_75_finishes(uint32_t value);
  private:
  uint32_t _internal_top_75_finishes() const;
  void _internal_set_top_75_finishes(uint32_t value);
  public:

  // optional uint32 top_50_finishes = 3;
  bool has_top_50_finishes() const;
  private:
  bool _internal_has_top_50_finishes() const;
  public:
  void clear_top_50_finishes();
  uint32_t top_50_finishes() const;
  void set_top_50_finishes(uint32_t value);
  private:
  uint32_t _internal_top_50_finishes() const;
  void _internal_set_top_50_finishes(uint32_t value);
  public:

  // optional uint32 shard_winnings = 4;
  bool has_shard_winnings() const;
  private:
  bool _internal_has_shard_winnings() const;
  public:
  void clear_shard_winnings();
  uint32_t shard_winnings() const;
  void set_shard_winnings(uint32_t value);
  private:
  uint32_t _internal_shard_winnings() const;
  void _internal_set_shard_winnings(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo.FantasyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t top_90_finishes_;
    uint32_t top_75_finishes_;
    uint32_t top_50_finishes_;
    uint32_t shard_winnings_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo() : CMsgDOTADPCProfileInfo(nullptr) {}
  ~CMsgDOTADPCProfileInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo(const CMsgDOTADPCProfileInfo& from);
  CMsgDOTADPCProfileInfo(CMsgDOTADPCProfileInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo& operator=(const CMsgDOTADPCProfileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo& operator=(CMsgDOTADPCProfileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCProfileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo*>(
               &_CMsgDOTADPCProfileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDOTADPCProfileInfo& a, CMsgDOTADPCProfileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCProfileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCProfileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCProfileInfo& from) {
    CMsgDOTADPCProfileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCProfileInfo_PredictionInfo PredictionInfo;
  typedef CMsgDOTADPCProfileInfo_FantasyInfo FantasyInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledNotificationsFieldNumber = 4,
    kPlayerInfoFieldNumber = 1,
    kPredictionInfoFieldNumber = 2,
    kFantasyInfoFieldNumber = 3,
  };
  // repeated uint32 disabled_notifications = 4;
  int disabled_notifications_size() const;
  private:
  int _internal_disabled_notifications_size() const;
  public:
  void clear_disabled_notifications();
  private:
  uint32_t _internal_disabled_notifications(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_disabled_notifications() const;
  void _internal_add_disabled_notifications(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_disabled_notifications();
  public:
  uint32_t disabled_notifications(int index) const;
  void set_disabled_notifications(int index, uint32_t value);
  void add_disabled_notifications(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      disabled_notifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_disabled_notifications();

  // optional .CMsgDOTAPlayerInfo player_info = 1;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::CMsgDOTAPlayerInfo& player_info() const;
  PROTOBUF_NODISCARD ::CMsgDOTAPlayerInfo* release_player_info();
  ::CMsgDOTAPlayerInfo* mutable_player_info();
  void set_allocated_player_info(::CMsgDOTAPlayerInfo* player_info);
  private:
  const ::CMsgDOTAPlayerInfo& _internal_player_info() const;
  ::CMsgDOTAPlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::CMsgDOTAPlayerInfo* player_info);
  ::CMsgDOTAPlayerInfo* unsafe_arena_release_player_info();

  // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  bool has_prediction_info() const;
  private:
  bool _internal_has_prediction_info() const;
  public:
  void clear_prediction_info();
  const ::CMsgDOTADPCProfileInfo_PredictionInfo& prediction_info() const;
  PROTOBUF_NODISCARD ::CMsgDOTADPCProfileInfo_PredictionInfo* release_prediction_info();
  ::CMsgDOTADPCProfileInfo_PredictionInfo* mutable_prediction_info();
  void set_allocated_prediction_info(::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info);
  private:
  const ::CMsgDOTADPCProfileInfo_PredictionInfo& _internal_prediction_info() const;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* _internal_mutable_prediction_info();
  public:
  void unsafe_arena_set_allocated_prediction_info(
      ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info);
  ::CMsgDOTADPCProfileInfo_PredictionInfo* unsafe_arena_release_prediction_info();

  // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  bool has_fantasy_info() const;
  private:
  bool _internal_has_fantasy_info() const;
  public:
  void clear_fantasy_info();
  const ::CMsgDOTADPCProfileInfo_FantasyInfo& fantasy_info() const;
  PROTOBUF_NODISCARD ::CMsgDOTADPCProfileInfo_FantasyInfo* release_fantasy_info();
  ::CMsgDOTADPCProfileInfo_FantasyInfo* mutable_fantasy_info();
  void set_allocated_fantasy_info(::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info);
  private:
  const ::CMsgDOTADPCProfileInfo_FantasyInfo& _internal_fantasy_info() const;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* _internal_mutable_fantasy_info();
  public:
  void unsafe_arena_set_allocated_fantasy_info(
      ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info);
  ::CMsgDOTADPCProfileInfo_FantasyInfo* unsafe_arena_release_fantasy_info();

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > disabled_notifications_;
    ::CMsgDOTAPlayerInfo* player_info_;
    ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info_;
    ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaderboards_RegionLeaderboard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaderboards.RegionLeaderboard) */ {
 public:
  inline CMsgDOTALeaderboards_RegionLeaderboard() : CMsgDOTALeaderboards_RegionLeaderboard(nullptr) {}
  ~CMsgDOTALeaderboards_RegionLeaderboard() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALeaderboards_RegionLeaderboard(const CMsgDOTALeaderboards_RegionLeaderboard& from);
  CMsgDOTALeaderboards_RegionLeaderboard(CMsgDOTALeaderboards_RegionLeaderboard&& from) noexcept
    : CMsgDOTALeaderboards_RegionLeaderboard() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaderboards_RegionLeaderboard& operator=(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALeaderboards_RegionLeaderboard& operator=(CMsgDOTALeaderboards_RegionLeaderboard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALeaderboards_RegionLeaderboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALeaderboards_RegionLeaderboard* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaderboards_RegionLeaderboard*>(
               &_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTALeaderboards_RegionLeaderboard& a, CMsgDOTALeaderboards_RegionLeaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALeaderboards_RegionLeaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards_RegionLeaderboard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALeaderboards_RegionLeaderboard& from) {
    CMsgDOTALeaderboards_RegionLeaderboard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaderboards_RegionLeaderboard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALeaderboards.RegionLeaderboard";
  }
  protected:
  explicit CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 2,
    kDivisionFieldNumber = 1,
  };
  // repeated uint32 account_ids = 2;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  uint32_t _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_ids() const;
  void _internal_add_account_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_ids();
  public:
  uint32_t account_ids(int index) const;
  void set_account_ids(int index, uint32_t value);
  void add_account_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_ids();

  // optional uint32 division = 1;
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  uint32_t division() const;
  void set_division(uint32_t value);
  private:
  uint32_t _internal_division() const;
  void _internal_set_division(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaderboards.RegionLeaderboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_ids_;
    uint32_t division_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaderboards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaderboards) */ {
 public:
  inline CMsgDOTALeaderboards() : CMsgDOTALeaderboards(nullptr) {}
  ~CMsgDOTALeaderboards() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALeaderboards(const CMsgDOTALeaderboards& from);
  CMsgDOTALeaderboards(CMsgDOTALeaderboards&& from) noexcept
    : CMsgDOTALeaderboards() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaderboards& operator=(const CMsgDOTALeaderboards& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALeaderboards& operator=(CMsgDOTALeaderboards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALeaderboards& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALeaderboards* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaderboards*>(
               &_CMsgDOTALeaderboards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTALeaderboards& a, CMsgDOTALeaderboards& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALeaderboards* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALeaderboards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALeaderboards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALeaderboards& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALeaderboards& from) {
    CMsgDOTALeaderboards::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaderboards* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALeaderboards";
  }
  protected:
  explicit CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTALeaderboards_RegionLeaderboard RegionLeaderboard;

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardsFieldNumber = 2,
  };
  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  int leaderboards_size() const;
  private:
  int _internal_leaderboards_size() const;
  public:
  void clear_leaderboards();
  ::CMsgDOTALeaderboards_RegionLeaderboard* mutable_leaderboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >*
      mutable_leaderboards();
  private:
  const ::CMsgDOTALeaderboards_RegionLeaderboard& _internal_leaderboards(int index) const;
  ::CMsgDOTALeaderboards_RegionLeaderboard* _internal_add_leaderboards();
  public:
  const ::CMsgDOTALeaderboards_RegionLeaderboard& leaderboards(int index) const;
  ::CMsgDOTALeaderboards_RegionLeaderboard* add_leaderboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >&
      leaderboards() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaderboards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard > leaderboards_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteTeamGuess final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteTeamGuess) */ {
 public:
  inline CMsgDOTAPassportVoteTeamGuess() : CMsgDOTAPassportVoteTeamGuess(nullptr) {}
  ~CMsgDOTAPassportVoteTeamGuess() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from);
  CMsgDOTAPassportVoteTeamGuess(CMsgDOTAPassportVoteTeamGuess&& from) noexcept
    : CMsgDOTAPassportVoteTeamGuess() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteTeamGuess& operator=(const CMsgDOTAPassportVoteTeamGuess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVoteTeamGuess& operator=(CMsgDOTAPassportVoteTeamGuess&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPassportVoteTeamGuess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVoteTeamGuess* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteTeamGuess*>(
               &_CMsgDOTAPassportVoteTeamGuess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgDOTAPassportVoteTeamGuess& a, CMsgDOTAPassportVoteTeamGuess& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVoteTeamGuess* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVoteTeamGuess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPassportVoteTeamGuess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteTeamGuess>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPassportVoteTeamGuess& from) {
    CMsgDOTAPassportVoteTeamGuess::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVoteTeamGuess* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVoteTeamGuess";
  }
  protected:
  explicit CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kWinnerIdFieldNumber = 2,
    kRunnerupIdFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 winner_id = 2;
  bool has_winner_id() const;
  private:
  bool _internal_has_winner_id() const;
  public:
  void clear_winner_id();
  uint32_t winner_id() const;
  void set_winner_id(uint32_t value);
  private:
  uint32_t _internal_winner_id() const;
  void _internal_set_winner_id(uint32_t value);
  public:

  // optional uint32 runnerup_id = 3;
  bool has_runnerup_id() const;
  private:
  bool _internal_has_runnerup_id() const;
  public:
  void clear_runnerup_id();
  uint32_t runnerup_id() const;
  void set_runnerup_id(uint32_t value);
  private:
  uint32_t _internal_runnerup_id() const;
  void _internal_set_runnerup_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteTeamGuess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
    uint32_t winner_id_;
    uint32_t runnerup_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteGenericSelection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteGenericSelection) */ {
 public:
  inline CMsgDOTAPassportVoteGenericSelection() : CMsgDOTAPassportVoteGenericSelection(nullptr) {}
  ~CMsgDOTAPassportVoteGenericSelection() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from);
  CMsgDOTAPassportVoteGenericSelection(CMsgDOTAPassportVoteGenericSelection&& from) noexcept
    : CMsgDOTAPassportVoteGenericSelection() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteGenericSelection& operator=(const CMsgDOTAPassportVoteGenericSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVoteGenericSelection& operator=(CMsgDOTAPassportVoteGenericSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPassportVoteGenericSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVoteGenericSelection* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteGenericSelection*>(
               &_CMsgDOTAPassportVoteGenericSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgDOTAPassportVoteGenericSelection& a, CMsgDOTAPassportVoteGenericSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVoteGenericSelection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVoteGenericSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPassportVoteGenericSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteGenericSelection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPassportVoteGenericSelection& from) {
    CMsgDOTAPassportVoteGenericSelection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVoteGenericSelection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVoteGenericSelection";
  }
  protected:
  explicit CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionIndexFieldNumber = 1,
    kSelectionFieldNumber = 2,
  };
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  bool has_selection_index() const;
  private:
  bool _internal_has_selection_index() const;
  public:
  void clear_selection_index();
  ::DOTA_2013PassportSelectionIndices selection_index() const;
  void set_selection_index(::DOTA_2013PassportSelectionIndices value);
  private:
  ::DOTA_2013PassportSelectionIndices _internal_selection_index() const;
  void _internal_set_selection_index(::DOTA_2013PassportSelectionIndices value);
  public:

  // optional uint32 selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  uint32_t selection() const;
  void set_selection(uint32_t value);
  private:
  uint32_t _internal_selection() const;
  void _internal_set_selection(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteGenericSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int selection_index_;
    uint32_t selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportStampedPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportStampedPlayer) */ {
 public:
  inline CMsgDOTAPassportStampedPlayer() : CMsgDOTAPassportStampedPlayer(nullptr) {}
  ~CMsgDOTAPassportStampedPlayer() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from);
  CMsgDOTAPassportStampedPlayer(CMsgDOTAPassportStampedPlayer&& from) noexcept
    : CMsgDOTAPassportStampedPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportStampedPlayer& operator=(const CMsgDOTAPassportStampedPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportStampedPlayer& operator=(CMsgDOTAPassportStampedPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPassportStampedPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportStampedPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportStampedPlayer*>(
               &_CMsgDOTAPassportStampedPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgDOTAPassportStampedPlayer& a, CMsgDOTAPassportStampedPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportStampedPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportStampedPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPassportStampedPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPassportStampedPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPassportStampedPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPassportStampedPlayer& from) {
    CMsgDOTAPassportStampedPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportStampedPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportStampedPlayer";
  }
  protected:
  explicit CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kStampLevelFieldNumber = 2,
  };
  // optional uint64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 stamp_level = 2;
  bool has_stamp_level() const;
  private:
  bool _internal_has_stamp_level() const;
  public:
  void clear_stamp_level();
  uint32_t stamp_level() const;
  void set_stamp_level(uint32_t value);
  private:
  uint32_t _internal_stamp_level() const;
  void _internal_set_stamp_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportStampedPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t steam_id_;
    uint32_t stamp_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportPlayerCardChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportPlayerCardChallenge) */ {
 public:
  inline CMsgDOTAPassportPlayerCardChallenge() : CMsgDOTAPassportPlayerCardChallenge(nullptr) {}
  ~CMsgDOTAPassportPlayerCardChallenge() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from);
  CMsgDOTAPassportPlayerCardChallenge(CMsgDOTAPassportPlayerCardChallenge&& from) noexcept
    : CMsgDOTAPassportPlayerCardChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportPlayerCardChallenge& operator=(const CMsgDOTAPassportPlayerCardChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportPlayerCardChallenge& operator=(CMsgDOTAPassportPlayerCardChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPassportPlayerCardChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportPlayerCardChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportPlayerCardChallenge*>(
               &_CMsgDOTAPassportPlayerCardChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgDOTAPassportPlayerCardChallenge& a, CMsgDOTAPassportPlayerCardChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportPlayerCardChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPassportPlayerCardChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPassportPlayerCardChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPassportPlayerCardChallenge& from) {
    CMsgDOTAPassportPlayerCardChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportPlayerCardChallenge";
  }
  protected:
  explicit CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeIdFieldNumber = 1,
  };
  // optional uint32 challenge_id = 1;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  uint32_t challenge_id() const;
  void set_challenge_id(uint32_t value);
  private:
  uint32_t _internal_challenge_id() const;
  void _internal_set_challenge_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportPlayerCardChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t challenge_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVote) */ {
 public:
  inline CMsgDOTAPassportVote() : CMsgDOTAPassportVote(nullptr) {}
  ~CMsgDOTAPassportVote() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from);
  CMsgDOTAPassportVote(CMsgDOTAPassportVote&& from) noexcept
    : CMsgDOTAPassportVote() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVote& operator=(const CMsgDOTAPassportVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVote& operator=(CMsgDOTAPassportVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAPassportVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVote* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVote*>(
               &_CMsgDOTAPassportVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgDOTAPassportVote& a, CMsgDOTAPassportVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAPassportVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAPassportVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAPassportVote& from) {
    CMsgDOTAPassportVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVote";
  }
  protected:
  explicit CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamVotesFieldNumber = 1,
    kGenericSelectionsFieldNumber = 2,
    kStampedPlayersFieldNumber = 3,
    kPlayerCardChallengesFieldNumber = 4,
  };
  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  int team_votes_size() const;
  private:
  int _internal_team_votes_size() const;
  public:
  void clear_team_votes();
  ::CMsgDOTAPassportVoteTeamGuess* mutable_team_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
      mutable_team_votes();
  private:
  const ::CMsgDOTAPassportVoteTeamGuess& _internal_team_votes(int index) const;
  ::CMsgDOTAPassportVoteTeamGuess* _internal_add_team_votes();
  public:
  const ::CMsgDOTAPassportVoteTeamGuess& team_votes(int index) const;
  ::CMsgDOTAPassportVoteTeamGuess* add_team_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
      team_votes() const;

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  int generic_selections_size() const;
  private:
  int _internal_generic_selections_size() const;
  public:
  void clear_generic_selections();
  ::CMsgDOTAPassportVoteGenericSelection* mutable_generic_selections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
      mutable_generic_selections();
  private:
  const ::CMsgDOTAPassportVoteGenericSelection& _internal_generic_selections(int index) const;
  ::CMsgDOTAPassportVoteGenericSelection* _internal_add_generic_selections();
  public:
  const ::CMsgDOTAPassportVoteGenericSelection& generic_selections(int index) const;
  ::CMsgDOTAPassportVoteGenericSelection* add_generic_selections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
      generic_selections() const;

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  int stamped_players_size() const;
  private:
  int _internal_stamped_players_size() const;
  public:
  void clear_stamped_players();
  ::CMsgDOTAPassportStampedPlayer* mutable_stamped_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
      mutable_stamped_players();
  private:
  const ::CMsgDOTAPassportStampedPlayer& _internal_stamped_players(int index) const;
  ::CMsgDOTAPassportStampedPlayer* _internal_add_stamped_players();
  public:
  const ::CMsgDOTAPassportStampedPlayer& stamped_players(int index) const;
  ::CMsgDOTAPassportStampedPlayer* add_stamped_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
      stamped_players() const;

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  int player_card_challenges_size() const;
  private:
  int _internal_player_card_challenges_size() const;
  public:
  void clear_player_card_challenges();
  ::CMsgDOTAPassportPlayerCardChallenge* mutable_player_card_challenges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >*
      mutable_player_card_challenges();
  private:
  const ::CMsgDOTAPassportPlayerCardChallenge& _internal_player_card_challenges(int index) const;
  ::CMsgDOTAPassportPlayerCardChallenge* _internal_add_player_card_challenges();
  public:
  const ::CMsgDOTAPassportPlayerCardChallenge& player_card_challenges(int index) const;
  ::CMsgDOTAPassportPlayerCardChallenge* add_player_card_challenges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >&
      player_card_challenges() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess > team_votes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection > generic_selections_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer > stamped_players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge > player_card_challenges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetPlayerCardRosterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetPlayerCardRosterRequest) */ {
 public:
  inline CMsgClientToGCGetPlayerCardRosterRequest() : CMsgClientToGCGetPlayerCardRosterRequest(nullptr) {}
  ~CMsgClientToGCGetPlayerCardRosterRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from);
  CMsgClientToGCGetPlayerCardRosterRequest(CMsgClientToGCGetPlayerCardRosterRequest&& from) noexcept
    : CMsgClientToGCGetPlayerCardRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetPlayerCardRosterRequest& operator=(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetPlayerCardRosterRequest& operator=(CMsgClientToGCGetPlayerCardRosterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetPlayerCardRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetPlayerCardRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetPlayerCardRosterRequest*>(
               &_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgClientToGCGetPlayerCardRosterRequest& a, CMsgClientToGCGetPlayerCardRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetPlayerCardRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetPlayerCardRosterRequest& from) {
    CMsgClientToGCGetPlayerCardRosterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetPlayerCardRosterRequest";
  }
  protected:
  explicit CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kFantasyPeriodFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 fantasy_period = 3 [default = 4294967295];
  bool has_fantasy_period() const;
  private:
  bool _internal_has_fantasy_period() const;
  public:
  void clear_fantasy_period();
  uint32_t fantasy_period() const;
  void set_fantasy_period(uint32_t value);
  private:
  uint32_t _internal_fantasy_period() const;
  void _internal_set_fantasy_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetPlayerCardRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
    uint32_t fantasy_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetPlayerCardRosterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetPlayerCardRosterResponse) */ {
 public:
  inline CMsgClientToGCGetPlayerCardRosterResponse() : CMsgClientToGCGetPlayerCardRosterResponse(nullptr) {}
  ~CMsgClientToGCGetPlayerCardRosterResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from);
  CMsgClientToGCGetPlayerCardRosterResponse(CMsgClientToGCGetPlayerCardRosterResponse&& from) noexcept
    : CMsgClientToGCGetPlayerCardRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetPlayerCardRosterResponse& operator=(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetPlayerCardRosterResponse& operator=(CMsgClientToGCGetPlayerCardRosterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCGetPlayerCardRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetPlayerCardRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetPlayerCardRosterResponse*>(
               &_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgClientToGCGetPlayerCardRosterResponse& a, CMsgClientToGCGetPlayerCardRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCGetPlayerCardRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCGetPlayerCardRosterResponse& from) {
    CMsgClientToGCGetPlayerCardRosterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetPlayerCardRosterResponse";
  }
  protected:
  explicit CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetPlayerCardRosterResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS;
  static constexpr Result ERROR_UNSPECIFIED =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED;
  static constexpr Result ERROR_INVALID_LEAGUE_ID =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID;
  static constexpr Result ERROR_INVALID_TIMESTAMP =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
  static inline bool Result_IsValid(int value) {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardItemIdFieldNumber = 2,
    kResultFieldNumber = 1,
    kScoreFieldNumber = 3,
    kFinalizedFieldNumber = 4,
    kPercentileFieldNumber = 5,
  };
  // repeated uint64 player_card_item_id = 2;
  int player_card_item_id_size() const;
  private:
  int _internal_player_card_item_id_size() const;
  public:
  void clear_player_card_item_id();
  private:
  uint64_t _internal_player_card_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_player_card_item_id() const;
  void _internal_add_player_card_item_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_player_card_item_id();
  public:
  uint64_t player_card_item_id(int index) const;
  void set_player_card_item_id(int index, uint64_t value);
  void add_player_card_item_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      player_card_item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_player_card_item_id();

  // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgClientToGCGetPlayerCardRosterResponse_Result result() const;
  void set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value);
  private:
  ::CMsgClientToGCGetPlayerCardRosterResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value);
  public:

  // optional float score = 3;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional bool finalized = 4;
  bool has_finalized() const;
  private:
  bool _internal_has_finalized() const;
  public:
  void clear_finalized();
  bool finalized() const;
  void set_finalized(bool value);
  private:
  bool _internal_finalized() const;
  void _internal_set_finalized(bool value);
  public:

  // optional float percentile = 5;
  bool has_percentile() const;
  private:
  bool _internal_has_percentile() const;
  public:
  void clear_percentile();
  float percentile() const;
  void set_percentile(float value);
  private:
  float _internal_percentile() const;
  void _internal_set_percentile(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetPlayerCardRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > player_card_item_id_;
    int result_;
    float score_;
    bool finalized_;
    float percentile_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp) */ {
 public:
  inline CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp() : CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(nullptr) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from);
  CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp&& from) noexcept
    : CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& operator=(const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& operator=(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp*>(
               &_CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& a, CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& from) {
    CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp";
  }
  protected:
  explicit CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kFantasyPeriodFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 fantasy_period = 3 [default = 4294967295];
  bool has_fantasy_period() const;
  private:
  bool _internal_has_fantasy_period() const;
  public:
  void clear_fantasy_period();
  uint32_t fantasy_period() const;
  void set_fantasy_period(uint32_t value);
  private:
  uint32_t _internal_fantasy_period() const;
  void _internal_set_fantasy_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
    uint32_t fantasy_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCBatchGetPlayerCardRosterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCBatchGetPlayerCardRosterRequest) */ {
 public:
  inline CMsgClientToGCBatchGetPlayerCardRosterRequest() : CMsgClientToGCBatchGetPlayerCardRosterRequest(nullptr) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCBatchGetPlayerCardRosterRequest(const CMsgClientToGCBatchGetPlayerCardRosterRequest& from);
  CMsgClientToGCBatchGetPlayerCardRosterRequest(CMsgClientToGCBatchGetPlayerCardRosterRequest&& from) noexcept
    : CMsgClientToGCBatchGetPlayerCardRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCBatchGetPlayerCardRosterRequest& operator=(const CMsgClientToGCBatchGetPlayerCardRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCBatchGetPlayerCardRosterRequest& operator=(CMsgClientToGCBatchGetPlayerCardRosterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCBatchGetPlayerCardRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCBatchGetPlayerCardRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCBatchGetPlayerCardRosterRequest*>(
               &_CMsgClientToGCBatchGetPlayerCardRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgClientToGCBatchGetPlayerCardRosterRequest& a, CMsgClientToGCBatchGetPlayerCardRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCBatchGetPlayerCardRosterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCBatchGetPlayerCardRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCBatchGetPlayerCardRosterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCBatchGetPlayerCardRosterRequest& from) {
    CMsgClientToGCBatchGetPlayerCardRosterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCBatchGetPlayerCardRosterRequest";
  }
  protected:
  explicit CMsgClientToGCBatchGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp LeagueTimestamp;

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueTimestampsFieldNumber = 1,
  };
  // repeated .CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp league_timestamps = 1;
  int league_timestamps_size() const;
  private:
  int _internal_league_timestamps_size() const;
  public:
  void clear_league_timestamps();
  ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* mutable_league_timestamps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >*
      mutable_league_timestamps();
  private:
  const ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& _internal_league_timestamps(int index) const;
  ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* _internal_add_league_timestamps();
  public:
  const ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& league_timestamps(int index) const;
  ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* add_league_timestamps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >&
      league_timestamps() const;

  // @@protoc_insertion_point(class_scope:CMsgClientToGCBatchGetPlayerCardRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp > league_timestamps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse) */ {
 public:
  inline CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse() : CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(nullptr) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from);
  CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse&& from) noexcept
    : CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& operator=(const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& operator=(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse*>(
               &_CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& a, CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& from) {
    CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse";
  }
  protected:
  explicit CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardItemIdFieldNumber = 4,
    kLeagueIdFieldNumber = 1,
    kDeprecatedTimestampFieldNumber = 2,
    kResultFieldNumber = 3,
    kScoreFieldNumber = 5,
    kFinalizedFieldNumber = 6,
    kPercentileFieldNumber = 7,
    kFantasyPeriodFieldNumber = 8,
  };
  // repeated uint64 player_card_item_id = 4;
  int player_card_item_id_size() const;
  private:
  int _internal_player_card_item_id_size() const;
  public:
  void clear_player_card_item_id();
  private:
  uint64_t _internal_player_card_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_player_card_item_id() const;
  void _internal_add_player_card_item_id(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_player_card_item_id();
  public:
  uint64_t player_card_item_id(int index) const;
  void set_player_card_item_id(int index, uint64_t value);
  void add_player_card_item_id(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      player_card_item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_player_card_item_id();

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 deprecated_timestamp = 2;
  bool has_deprecated_timestamp() const;
  private:
  bool _internal_has_deprecated_timestamp() const;
  public:
  void clear_deprecated_timestamp();
  uint32_t deprecated_timestamp() const;
  void set_deprecated_timestamp(uint32_t value);
  private:
  uint32_t _internal_deprecated_timestamp() const;
  void _internal_set_deprecated_timestamp(uint32_t value);
  public:

  // optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result result() const;
  void set_result(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result value);
  private:
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result value);
  public:

  // optional float score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional bool finalized = 6;
  bool has_finalized() const;
  private:
  bool _internal_has_finalized() const;
  public:
  void clear_finalized();
  bool finalized() const;
  void set_finalized(bool value);
  private:
  bool _internal_finalized() const;
  void _internal_set_finalized(bool value);
  public:

  // optional float percentile = 7;
  bool has_percentile() const;
  private:
  bool _internal_has_percentile() const;
  public:
  void clear_percentile();
  float percentile() const;
  void set_percentile(float value);
  private:
  float _internal_percentile() const;
  void _internal_set_percentile(float value);
  public:

  // optional uint32 fantasy_period = 8 [default = 4294967295];
  bool has_fantasy_period() const;
  private:
  bool _internal_has_fantasy_period() const;
  public:
  void clear_fantasy_period();
  uint32_t fantasy_period() const;
  void set_fantasy_period(uint32_t value);
  private:
  uint32_t _internal_fantasy_period() const;
  void _internal_set_fantasy_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > player_card_item_id_;
    uint32_t league_id_;
    uint32_t deprecated_timestamp_;
    int result_;
    float score_;
    bool finalized_;
    float percentile_;
    uint32_t fantasy_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCBatchGetPlayerCardRosterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCBatchGetPlayerCardRosterResponse) */ {
 public:
  inline CMsgClientToGCBatchGetPlayerCardRosterResponse() : CMsgClientToGCBatchGetPlayerCardRosterResponse(nullptr) {}
  ~CMsgClientToGCBatchGetPlayerCardRosterResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCBatchGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCBatchGetPlayerCardRosterResponse(const CMsgClientToGCBatchGetPlayerCardRosterResponse& from);
  CMsgClientToGCBatchGetPlayerCardRosterResponse(CMsgClientToGCBatchGetPlayerCardRosterResponse&& from) noexcept
    : CMsgClientToGCBatchGetPlayerCardRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCBatchGetPlayerCardRosterResponse& operator=(const CMsgClientToGCBatchGetPlayerCardRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCBatchGetPlayerCardRosterResponse& operator=(CMsgClientToGCBatchGetPlayerCardRosterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCBatchGetPlayerCardRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCBatchGetPlayerCardRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCBatchGetPlayerCardRosterResponse*>(
               &_CMsgClientToGCBatchGetPlayerCardRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgClientToGCBatchGetPlayerCardRosterResponse& a, CMsgClientToGCBatchGetPlayerCardRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCBatchGetPlayerCardRosterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCBatchGetPlayerCardRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCBatchGetPlayerCardRosterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCBatchGetPlayerCardRosterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCBatchGetPlayerCardRosterResponse& from) {
    CMsgClientToGCBatchGetPlayerCardRosterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCBatchGetPlayerCardRosterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCBatchGetPlayerCardRosterResponse";
  }
  protected:
  explicit CMsgClientToGCBatchGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse RosterResponse;

  typedef CMsgClientToGCBatchGetPlayerCardRosterResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_SUCCESS;
  static constexpr Result ERROR_UNSPECIFIED =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED;
  static constexpr Result ERROR_INVALID_LEAGUE_ID =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID;
  static constexpr Result ERROR_INVALID_TIMESTAMP =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
  static inline bool Result_IsValid(int value) {
    return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >*
      mutable_responses();
  private:
  const ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& _internal_responses(int index) const;
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* _internal_add_responses();
  public:
  const ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& responses(int index) const;
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >&
      responses() const;

  // @@protoc_insertion_point(class_scope:CMsgClientToGCBatchGetPlayerCardRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse > responses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCSetPlayerCardRosterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCSetPlayerCardRosterRequest) */ {
 public:
  inline CMsgClientToGCSetPlayerCardRosterRequest() : CMsgClientToGCSetPlayerCardRosterRequest(nullptr) {}
  ~CMsgClientToGCSetPlayerCardRosterRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from);
  CMsgClientToGCSetPlayerCardRosterRequest(CMsgClientToGCSetPlayerCardRosterRequest&& from) noexcept
    : CMsgClientToGCSetPlayerCardRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCSetPlayerCardRosterRequest& operator=(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCSetPlayerCardRosterRequest& operator=(CMsgClientToGCSetPlayerCardRosterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCSetPlayerCardRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCSetPlayerCardRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCSetPlayerCardRosterRequest*>(
               &_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClientToGCSetPlayerCardRosterRequest& a, CMsgClientToGCSetPlayerCardRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCSetPlayerCardRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCSetPlayerCardRosterRequest& from) {
    CMsgClientToGCSetPlayerCardRosterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCSetPlayerCardRosterRequest";
  }
  protected:
  explicit CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kDeprecatedTimestampFieldNumber = 2,
    kPlayerCardItemIdFieldNumber = 4,
    kSlotFieldNumber = 3,
    kEventIdFieldNumber = 5,
    kFantasyPeriodFieldNumber = 6,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 deprecated_timestamp = 2;
  bool has_deprecated_timestamp() const;
  private:
  bool _internal_has_deprecated_timestamp() const;
  public:
  void clear_deprecated_timestamp();
  uint32_t deprecated_timestamp() const;
  void set_deprecated_timestamp(uint32_t value);
  private:
  uint32_t _internal_deprecated_timestamp() const;
  void _internal_set_deprecated_timestamp(uint32_t value);
  public:

  // optional uint64 player_card_item_id = 4;
  bool has_player_card_item_id() const;
  private:
  bool _internal_has_player_card_item_id() const;
  public:
  void clear_player_card_item_id();
  uint64_t player_card_item_id() const;
  void set_player_card_item_id(uint64_t value);
  private:
  uint64_t _internal_player_card_item_id() const;
  void _internal_set_player_card_item_id(uint64_t value);
  public:

  // optional uint32 slot = 3;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 event_id = 5;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 fantasy_period = 6 [default = 4294967295];
  bool has_fantasy_period() const;
  private:
  bool _internal_has_fantasy_period() const;
  public:
  void clear_fantasy_period();
  uint32_t fantasy_period() const;
  void set_fantasy_period(uint32_t value);
  private:
  uint32_t _internal_fantasy_period() const;
  void _internal_set_fantasy_period(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCSetPlayerCardRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t league_id_;
    uint32_t deprecated_timestamp_;
    uint64_t player_card_item_id_;
    uint32_t slot_;
    uint32_t event_id_;
    uint32_t fantasy_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCSetPlayerCardRosterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCSetPlayerCardRosterResponse) */ {
 public:
  inline CMsgClientToGCSetPlayerCardRosterResponse() : CMsgClientToGCSetPlayerCardRosterResponse(nullptr) {}
  ~CMsgClientToGCSetPlayerCardRosterResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from);
  CMsgClientToGCSetPlayerCardRosterResponse(CMsgClientToGCSetPlayerCardRosterResponse&& from) noexcept
    : CMsgClientToGCSetPlayerCardRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCSetPlayerCardRosterResponse& operator=(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCSetPlayerCardRosterResponse& operator=(CMsgClientToGCSetPlayerCardRosterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCSetPlayerCardRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCSetPlayerCardRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCSetPlayerCardRosterResponse*>(
               &_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgClientToGCSetPlayerCardRosterResponse& a, CMsgClientToGCSetPlayerCardRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCSetPlayerCardRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCSetPlayerCardRosterResponse& from) {
    CMsgClientToGCSetPlayerCardRosterResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCSetPlayerCardRosterResponse";
  }
  protected:
  explicit CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCSetPlayerCardRosterResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS;
  static constexpr Result ERROR_UNSPECIFIED =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED;
  static constexpr Result ERROR_INVALID_LEAGUE_ID =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID;
  static constexpr Result ERROR_INVALID_TIMESTAMP =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
  static constexpr Result ERROR_PLAYER_CARD_NOT_OWNED =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_PLAYER_CARD_NOT_OWNED;
  static constexpr Result ERROR_INVALID_SLOT =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_SLOT;
  static constexpr Result ERROR_FAILED_CARD_INFO =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_FAILED_CARD_INFO;
  static constexpr Result ERROR_ACCOUNT_DUPLICATE =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_ACCOUNT_DUPLICATE;
  static constexpr Result ERROR_LOCKED_TIMESTAMP =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_LOCKED_TIMESTAMP;
  static constexpr Result ERROR_INVALID_LEAGUE_FOR_PERIOD =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_FOR_PERIOD;
  static constexpr Result ERROR_INVALID_EVENT =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_EVENT;
  static inline bool Result_IsValid(int value) {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgClientToGCSetPlayerCardRosterResponse_Result result() const;
  void set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value);
  private:
  ::CMsgClientToGCSetPlayerCardRosterResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCSetPlayerCardRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo) */ {
 public:
  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() : CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(nullptr) {}
  ~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from);
  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo&& from) noexcept
    : CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& operator=(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& operator=(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo*>(
               &_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& a, CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
    CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo";
  }
  protected:
  explicit CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayTimestampsFieldNumber = 5,
    kLeagueNameFieldNumber = 2,
    kLeagueIdFieldNumber = 1,
    kStartTimestampFieldNumber = 3,
    kEndTimestampFieldNumber = 4,
    kStatusFieldNumber = 8,
  };
  // repeated uint32 day_timestamps = 5;
  int day_timestamps_size() const;
  private:
  int _internal_day_timestamps_size() const;
  public:
  void clear_day_timestamps();
  private:
  uint32_t _internal_day_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_day_timestamps() const;
  void _internal_add_day_timestamps(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_day_timestamps();
  public:
  uint32_t day_timestamps(int index) const;
  void set_day_timestamps(int index, uint32_t value);
  void add_day_timestamps(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      day_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_day_timestamps();

  // optional string league_name = 2;
  bool has_league_name() const;
  private:
  bool _internal_has_league_name() const;
  public:
  void clear_league_name();
  const std::string& league_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_league_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_league_name();
  PROTOBUF_NODISCARD std::string* release_league_name();
  void set_allocated_league_name(std::string* league_name);
  private:
  const std::string& _internal_league_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_league_name(const std::string& value);
  std::string* _internal_mutable_league_name();
  public:

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  uint32_t league_id() const;
  void set_league_id(uint32_t value);
  private:
  uint32_t _internal_league_id() const;
  void _internal_set_league_id(uint32_t value);
  public:

  // optional uint32 start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  uint32_t start_timestamp() const;
  void set_start_timestamp(uint32_t value);
  private:
  uint32_t _internal_start_timestamp() const;
  void _internal_set_start_timestamp(uint32_t value);
  public:

  // optional uint32 end_timestamp = 4;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  uint32_t end_timestamp() const;
  void set_end_timestamp(uint32_t value);
  private:
  uint32_t _internal_end_timestamp() const;
  void _internal_set_end_timestamp(uint32_t value);
  public:

  // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus status() const;
  void set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value);
  private:
  ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus _internal_status() const;
  void _internal_set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > day_timestamps_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr league_name_;
    uint32_t league_id_;
    uint32_t start_timestamp_;
    uint32_t end_timestamp_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyDPCLeagueStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyDPCLeagueStatus) */ {
 public:
  inline CMsgDOTAFantasyDPCLeagueStatus() : CMsgDOTAFantasyDPCLeagueStatus(nullptr) {}
  ~CMsgDOTAFantasyDPCLeagueStatus() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyDPCLeagueStatus(const CMsgDOTAFantasyDPCLeagueStatus& from);
  CMsgDOTAFantasyDPCLeagueStatus(CMsgDOTAFantasyDPCLeagueStatus&& from) noexcept
    : CMsgDOTAFantasyDPCLeagueStatus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyDPCLeagueStatus& operator=(const CMsgDOTAFantasyDPCLeagueStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyDPCLeagueStatus& operator=(CMsgDOTAFantasyDPCLeagueStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAFantasyDPCLeagueStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyDPCLeagueStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyDPCLeagueStatus*>(
               &_CMsgDOTAFantasyDPCLeagueStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgDOTAFantasyDPCLeagueStatus& a, CMsgDOTAFantasyDPCLeagueStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyDPCLeagueStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyDPCLeagueStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAFantasyDPCLeagueStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAFantasyDPCLeagueStatus& from) {
    CMsgDOTAFantasyDPCLeagueStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyDPCLeagueStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyDPCLeagueStatus";
  }
  protected:
  explicit CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo LeagueInfo;

  typedef CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus ERosterStatus;
  static constexpr ERosterStatus UNSET =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET;
  static constexpr ERosterStatus PARTIAL =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_PARTIAL;
  static constexpr ERosterStatus FULL =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_FULL;
  static constexpr ERosterStatus CONCLUDED =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED;
  static inline bool ERosterStatus_IsValid(int value) {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(value);
  }
  static constexpr ERosterStatus ERosterStatus_MIN =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MIN;
  static constexpr ERosterStatus ERosterStatus_MAX =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX;
  static constexpr int ERosterStatus_ARRAYSIZE =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERosterStatus_descriptor() {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ERosterStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERosterStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERosterStatus_Name.");
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name(enum_t_value);
  }
  static inline bool ERosterStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ERosterStatus* value) {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueInfosFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  int league_infos_size() const;
  private:
  int _internal_league_infos_size() const;
  public:
  void clear_league_infos();
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* mutable_league_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >*
      mutable_league_infos();
  private:
  const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& _internal_league_infos(int index) const;
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* _internal_add_league_infos();
  public:
  const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& league_infos(int index) const;
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* add_league_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >&
      league_infos() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyDPCLeagueStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo > league_infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.Player) */ {
 public:
  inline CMsgDOTADPCSearchResults_Player() : CMsgDOTADPCSearchResults_Player(nullptr) {}
  ~CMsgDOTADPCSearchResults_Player() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_Player(const CMsgDOTADPCSearchResults_Player& from);
  CMsgDOTADPCSearchResults_Player(CMsgDOTADPCSearchResults_Player&& from) noexcept
    : CMsgDOTADPCSearchResults_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_Player& operator=(const CMsgDOTADPCSearchResults_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_Player& operator=(CMsgDOTADPCSearchResults_Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCSearchResults_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_Player*>(
               &_CMsgDOTADPCSearchResults_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgDOTADPCSearchResults_Player& a, CMsgDOTADPCSearchResults_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCSearchResults_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCSearchResults_Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCSearchResults_Player& from) {
    CMsgDOTADPCSearchResults_Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.Player";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRealNameFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string real_name = 3;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_name();
  PROTOBUF_NODISCARD std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.Team) */ {
 public:
  inline CMsgDOTADPCSearchResults_Team() : CMsgDOTADPCSearchResults_Team(nullptr) {}
  ~CMsgDOTADPCSearchResults_Team() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_Team(const CMsgDOTADPCSearchResults_Team& from);
  CMsgDOTADPCSearchResults_Team(CMsgDOTADPCSearchResults_Team&& from) noexcept
    : CMsgDOTADPCSearchResults_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_Team& operator=(const CMsgDOTADPCSearchResults_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_Team& operator=(CMsgDOTADPCSearchResults_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCSearchResults_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_Team*>(
               &_CMsgDOTADPCSearchResults_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgDOTADPCSearchResults_Team& a, CMsgDOTADPCSearchResults_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCSearchResults_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCSearchResults_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCSearchResults_Team& from) {
    CMsgDOTADPCSearchResults_Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.Team";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUrlFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_League final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.League) */ {
 public:
  inline CMsgDOTADPCSearchResults_League() : CMsgDOTADPCSearchResults_League(nullptr) {}
  ~CMsgDOTADPCSearchResults_League() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_League(const CMsgDOTADPCSearchResults_League& from);
  CMsgDOTADPCSearchResults_League(CMsgDOTADPCSearchResults_League&& from) noexcept
    : CMsgDOTADPCSearchResults_League() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_League& operator=(const CMsgDOTADPCSearchResults_League& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_League& operator=(CMsgDOTADPCSearchResults_League&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCSearchResults_League& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_League* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_League*>(
               &_CMsgDOTADPCSearchResults_League_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgDOTADPCSearchResults_League& a, CMsgDOTADPCSearchResults_League& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_League* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_League* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCSearchResults_League* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_League>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCSearchResults_League& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCSearchResults_League& from) {
    CMsgDOTADPCSearchResults_League::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_League* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.League";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.League)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults) */ {
 public:
  inline CMsgDOTADPCSearchResults() : CMsgDOTADPCSearchResults(nullptr) {}
  ~CMsgDOTADPCSearchResults() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults(const CMsgDOTADPCSearchResults& from);
  CMsgDOTADPCSearchResults(CMsgDOTADPCSearchResults&& from) noexcept
    : CMsgDOTADPCSearchResults() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults& operator=(const CMsgDOTADPCSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults& operator=(CMsgDOTADPCSearchResults&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCSearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults*>(
               &_CMsgDOTADPCSearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgDOTADPCSearchResults& a, CMsgDOTADPCSearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCSearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCSearchResults& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCSearchResults& from) {
    CMsgDOTADPCSearchResults::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults";
  }
  protected:
  explicit CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCSearchResults_Player Player;
  typedef CMsgDOTADPCSearchResults_Team Team;
  typedef CMsgDOTADPCSearchResults_League League;

  typedef CMsgDOTADPCSearchResults_ESearchResultsDesired ESearchResultsDesired;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Players =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Teams =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Teams;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Leagues =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Leagues;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_All =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All;
  static inline bool ESearchResultsDesired_IsValid(int value) {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(value);
  }
  static constexpr ESearchResultsDesired ESearchResultsDesired_MIN =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MIN;
  static constexpr ESearchResultsDesired ESearchResultsDesired_MAX =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX;
  static constexpr int ESearchResultsDesired_ARRAYSIZE =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ESearchResultsDesired_descriptor() {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
  }
  template<typename T>
  static inline const std::string& ESearchResultsDesired_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ESearchResultsDesired>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ESearchResultsDesired_Name.");
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_Name(enum_t_value);
  }
  static inline bool ESearchResultsDesired_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ESearchResultsDesired* value) {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kTeamsFieldNumber = 2,
    kLeaguesFieldNumber = 3,
  };
  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTADPCSearchResults_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >*
      mutable_players();
  private:
  const ::CMsgDOTADPCSearchResults_Player& _internal_players(int index) const;
  ::CMsgDOTADPCSearchResults_Player* _internal_add_players();
  public:
  const ::CMsgDOTADPCSearchResults_Player& players(int index) const;
  ::CMsgDOTADPCSearchResults_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >&
      players() const;

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTADPCSearchResults_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >*
      mutable_teams();
  private:
  const ::CMsgDOTADPCSearchResults_Team& _internal_teams(int index) const;
  ::CMsgDOTADPCSearchResults_Team* _internal_add_teams();
  public:
  const ::CMsgDOTADPCSearchResults_Team& teams(int index) const;
  ::CMsgDOTADPCSearchResults_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >&
      teams() const;

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  int leagues_size() const;
  private:
  int _internal_leagues_size() const;
  public:
  void clear_leagues();
  ::CMsgDOTADPCSearchResults_League* mutable_leagues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >*
      mutable_leagues();
  private:
  const ::CMsgDOTADPCSearchResults_League& _internal_leagues(int index) const;
  ::CMsgDOTADPCSearchResults_League* _internal_add_leagues();
  public:
  const ::CMsgDOTADPCSearchResults_League& leagues(int index) const;
  ::CMsgDOTADPCSearchResults_League* add_leagues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >&
      leagues() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player > players_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team > teams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League > leagues_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCTeamFavoriteRankings_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCTeamFavoriteRankings.Team) */ {
 public:
  inline CMsgDOTADPCTeamFavoriteRankings_Team() : CMsgDOTADPCTeamFavoriteRankings_Team(nullptr) {}
  ~CMsgDOTADPCTeamFavoriteRankings_Team() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCTeamFavoriteRankings_Team(const CMsgDOTADPCTeamFavoriteRankings_Team& from);
  CMsgDOTADPCTeamFavoriteRankings_Team(CMsgDOTADPCTeamFavoriteRankings_Team&& from) noexcept
    : CMsgDOTADPCTeamFavoriteRankings_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCTeamFavoriteRankings_Team& operator=(const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCTeamFavoriteRankings_Team& operator=(CMsgDOTADPCTeamFavoriteRankings_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCTeamFavoriteRankings_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCTeamFavoriteRankings_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCTeamFavoriteRankings_Team*>(
               &_CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgDOTADPCTeamFavoriteRankings_Team& a, CMsgDOTADPCTeamFavoriteRankings_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCTeamFavoriteRankings_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
    CMsgDOTADPCTeamFavoriteRankings_Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCTeamFavoriteRankings.Team";
  }
  protected:
  explicit CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kFavoritesFieldNumber = 2,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 favorites = 2;
  bool has_favorites() const;
  private:
  bool _internal_has_favorites() const;
  public:
  void clear_favorites();
  uint32_t favorites() const;
  void set_favorites(uint32_t value);
  private:
  uint32_t _internal_favorites() const;
  void _internal_set_favorites(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCTeamFavoriteRankings.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t team_id_;
    uint32_t favorites_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCTeamFavoriteRankings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCTeamFavoriteRankings) */ {
 public:
  inline CMsgDOTADPCTeamFavoriteRankings() : CMsgDOTADPCTeamFavoriteRankings(nullptr) {}
  ~CMsgDOTADPCTeamFavoriteRankings() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCTeamFavoriteRankings(const CMsgDOTADPCTeamFavoriteRankings& from);
  CMsgDOTADPCTeamFavoriteRankings(CMsgDOTADPCTeamFavoriteRankings&& from) noexcept
    : CMsgDOTADPCTeamFavoriteRankings() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCTeamFavoriteRankings& operator=(const CMsgDOTADPCTeamFavoriteRankings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCTeamFavoriteRankings& operator=(CMsgDOTADPCTeamFavoriteRankings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTADPCTeamFavoriteRankings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCTeamFavoriteRankings* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCTeamFavoriteRankings*>(
               &_CMsgDOTADPCTeamFavoriteRankings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgDOTADPCTeamFavoriteRankings& a, CMsgDOTADPCTeamFavoriteRankings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCTeamFavoriteRankings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCTeamFavoriteRankings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTADPCTeamFavoriteRankings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTADPCTeamFavoriteRankings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTADPCTeamFavoriteRankings& from) {
    CMsgDOTADPCTeamFavoriteRankings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCTeamFavoriteRankings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCTeamFavoriteRankings";
  }
  protected:
  explicit CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCTeamFavoriteRankings_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
  };
  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTADPCTeamFavoriteRankings_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >*
      mutable_teams();
  private:
  const ::CMsgDOTADPCTeamFavoriteRankings_Team& _internal_teams(int index) const;
  ::CMsgDOTADPCTeamFavoriteRankings_Team* _internal_add_teams();
  public:
  const ::CMsgDOTADPCTeamFavoriteRankings_Team& teams(int index) const;
  ::CMsgDOTADPCTeamFavoriteRankings_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >&
      teams() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCTeamFavoriteRankings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team > teams_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDotaFantasyCraftingUserData_Gem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDotaFantasyCraftingUserData.Gem) */ {
 public:
  inline CMsgDotaFantasyCraftingUserData_Gem() : CMsgDotaFantasyCraftingUserData_Gem(nullptr) {}
  ~CMsgDotaFantasyCraftingUserData_Gem() override;
  explicit PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_Gem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDotaFantasyCraftingUserData_Gem(const CMsgDotaFantasyCraftingUserData_Gem& from);
  CMsgDotaFantasyCraftingUserData_Gem(CMsgDotaFantasyCraftingUserData_Gem&& from) noexcept
    : CMsgDotaFantasyCraftingUserData_Gem() {
    *this = ::std::move(from);
  }

  inline CMsgDotaFantasyCraftingUserData_Gem& operator=(const CMsgDotaFantasyCraftingUserData_Gem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDotaFantasyCraftingUserData_Gem& operator=(CMsgDotaFantasyCraftingUserData_Gem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDotaFantasyCraftingUserData_Gem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDotaFantasyCraftingUserData_Gem* internal_default_instance() {
    return reinterpret_cast<const CMsgDotaFantasyCraftingUserData_Gem*>(
               &_CMsgDotaFantasyCraftingUserData_Gem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgDotaFantasyCraftingUserData_Gem& a, CMsgDotaFantasyCraftingUserData_Gem& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDotaFantasyCraftingUserData_Gem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDotaFantasyCraftingUserData_Gem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDotaFantasyCraftingUserData_Gem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDotaFantasyCraftingUserData_Gem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDotaFantasyCraftingUserData_Gem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDotaFantasyCraftingUserData_Gem& from) {
    CMsgDotaFantasyCraftingUserData_Gem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDotaFantasyCraftingUserData_Gem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDotaFantasyCraftingUserData.Gem";
  }
  protected:
  explicit CMsgDotaFantasyCraftingUserData_Gem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSlotFieldNumber = 2,
    kShapeFieldNumber = 3,
    kQualityFieldNumber = 4,
    kStatFieldNumber = 5,
  };
  // optional .Fantasy_Gem_Type type = 1 [default = FANTASY_GEM_TYPE_RUBY];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Fantasy_Gem_Type type() const;
  void set_type(::Fantasy_Gem_Type value);
  private:
  ::Fantasy_Gem_Type _internal_type() const;
  void _internal_set_type(::Fantasy_Gem_Type value);
  public:

  // optional uint32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  uint32_t slot() const;
  void set_slot(uint32_t value);
  private:
  uint32_t _internal_slot() const;
  void _internal_set_slot(uint32_t value);
  public:

  // optional uint32 shape = 3;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  uint32_t shape() const;
  void set_shape(uint32_t value);
  private:
  uint32_t _internal_shape() const;
  void _internal_set_shape(uint32_t value);
  public:

  // optional uint32 quality = 4;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  uint32_t quality() const;
  void set_quality(uint32_t value);
  private:
  uint32_t _internal_quality() const;
  void _internal_set_quality(uint32_t value);
  public:

  // optional .Fantasy_Scoring stat = 5 [default = FANTASY_SCORING_KILLS];
  bool has_stat() const;
  private:
  bool _internal_has_stat() const;
  public:
  void clear_stat();
  ::Fantasy_Scoring stat() const;
  void set_stat(::Fantasy_Scoring value);
  private:
  ::Fantasy_Scoring _internal_stat() const;
  void _internal_set_stat(::Fantasy_Scoring value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDotaFantasyCraftingUserData.Gem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    uint32_t slot_;
    uint32_t shape_;
    uint32_t quality_;
    int stat_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDotaFantasyCraftingUserData_Tablet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDotaFantasyCraftingUserData.Tablet) */ {
 public:
  inline CMsgDotaFantasyCraftingUserData_Tablet() : CMsgDotaFantasyCraftingUserData_Tablet(nullptr) {}
  ~CMsgDotaFantasyCraftingUserData_Tablet() override;
  explicit PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData_Tablet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDotaFantasyCraftingUserData_Tablet(const CMsgDotaFantasyCraftingUserData_Tablet& from);
  CMsgDotaFantasyCraftingUserData_Tablet(CMsgDotaFantasyCraftingUserData_Tablet&& from) noexcept
    : CMsgDotaFantasyCraftingUserData_Tablet() {
    *this = ::std::move(from);
  }

  inline CMsgDotaFantasyCraftingUserData_Tablet& operator=(const CMsgDotaFantasyCraftingUserData_Tablet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDotaFantasyCraftingUserData_Tablet& operator=(CMsgDotaFantasyCraftingUserData_Tablet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDotaFantasyCraftingUserData_Tablet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDotaFantasyCraftingUserData_Tablet* internal_default_instance() {
    return reinterpret_cast<const CMsgDotaFantasyCraftingUserData_Tablet*>(
               &_CMsgDotaFantasyCraftingUserData_Tablet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgDotaFantasyCraftingUserData_Tablet& a, CMsgDotaFantasyCraftingUserData_Tablet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDotaFantasyCraftingUserData_Tablet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDotaFantasyCraftingUserData_Tablet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDotaFantasyCraftingUserData_Tablet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDotaFantasyCraftingUserData_Tablet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDotaFantasyCraftingUserData_Tablet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDotaFantasyCraftingUserData_Tablet& from) {
    CMsgDotaFantasyCraftingUserData_Tablet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDotaFantasyCraftingUserData_Tablet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDotaFantasyCraftingUserData.Tablet";
  }
  protected:
  explicit CMsgDotaFantasyCraftingUserData_Tablet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemsFieldNumber = 7,
    kTabletIdFieldNumber = 1,
    kTabletLevelFieldNumber = 2,
    kFantasyRoleFieldNumber = 3,
    kAccountIdFieldNumber = 4,
    kPrefixFieldNumber = 5,
    kSuffixFieldNumber = 6,
  };
  // repeated .CMsgDotaFantasyCraftingUserData.Gem gems = 7;
  int gems_size() const;
  private:
  int _internal_gems_size() const;
  public:
  void clear_gems();
  ::CMsgDotaFantasyCraftingUserData_Gem* mutable_gems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Gem >*
      mutable_gems();
  private:
  const ::CMsgDotaFantasyCraftingUserData_Gem& _internal_gems(int index) const;
  ::CMsgDotaFantasyCraftingUserData_Gem* _internal_add_gems();
  public:
  const ::CMsgDotaFantasyCraftingUserData_Gem& gems(int index) const;
  ::CMsgDotaFantasyCraftingUserData_Gem* add_gems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Gem >&
      gems() const;

  // optional uint32 tablet_id = 1;
  bool has_tablet_id() const;
  private:
  bool _internal_has_tablet_id() const;
  public:
  void clear_tablet_id();
  uint32_t tablet_id() const;
  void set_tablet_id(uint32_t value);
  private:
  uint32_t _internal_tablet_id() const;
  void _internal_set_tablet_id(uint32_t value);
  public:

  // optional uint32 tablet_level = 2;
  bool has_tablet_level() const;
  private:
  bool _internal_has_tablet_level() const;
  public:
  void clear_tablet_level();
  uint32_t tablet_level() const;
  void set_tablet_level(uint32_t value);
  private:
  uint32_t _internal_tablet_level() const;
  void _internal_set_tablet_level(uint32_t value);
  public:

  // optional .Fantasy_Roles fantasy_role = 3 [default = FANTASY_ROLE_UNDEFINED];
  bool has_fantasy_role() const;
  private:
  bool _internal_has_fantasy_role() const;
  public:
  void clear_fantasy_role();
  ::Fantasy_Roles fantasy_role() const;
  void set_fantasy_role(::Fantasy_Roles value);
  private:
  ::Fantasy_Roles _internal_fantasy_role() const;
  void _internal_set_fantasy_role(::Fantasy_Roles value);
  public:

  // optional uint32 account_id = 4;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 prefix = 5;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  uint32_t prefix() const;
  void set_prefix(uint32_t value);
  private:
  uint32_t _internal_prefix() const;
  void _internal_set_prefix(uint32_t value);
  public:

  // optional uint32 suffix = 6;
  bool has_suffix() const;
  private:
  bool _internal_has_suffix() const;
  public:
  void clear_suffix();
  uint32_t suffix() const;
  void set_suffix(uint32_t value);
  private:
  uint32_t _internal_suffix() const;
  void _internal_set_suffix(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDotaFantasyCraftingUserData.Tablet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Gem > gems_;
    uint32_t tablet_id_;
    uint32_t tablet_level_;
    int fantasy_role_;
    uint32_t account_id_;
    uint32_t prefix_;
    uint32_t suffix_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDotaFantasyCraftingUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDotaFantasyCraftingUserData) */ {
 public:
  inline CMsgDotaFantasyCraftingUserData() : CMsgDotaFantasyCraftingUserData(nullptr) {}
  ~CMsgDotaFantasyCraftingUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgDotaFantasyCraftingUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDotaFantasyCraftingUserData(const CMsgDotaFantasyCraftingUserData& from);
  CMsgDotaFantasyCraftingUserData(CMsgDotaFantasyCraftingUserData&& from) noexcept
    : CMsgDotaFantasyCraftingUserData() {
    *this = ::std::move(from);
  }

  inline CMsgDotaFantasyCraftingUserData& operator=(const CMsgDotaFantasyCraftingUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDotaFantasyCraftingUserData& operator=(CMsgDotaFantasyCraftingUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDotaFantasyCraftingUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDotaFantasyCraftingUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgDotaFantasyCraftingUserData*>(
               &_CMsgDotaFantasyCraftingUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgDotaFantasyCraftingUserData& a, CMsgDotaFantasyCraftingUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDotaFantasyCraftingUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDotaFantasyCraftingUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDotaFantasyCraftingUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDotaFantasyCraftingUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDotaFantasyCraftingUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDotaFantasyCraftingUserData& from) {
    CMsgDotaFantasyCraftingUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDotaFantasyCraftingUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDotaFantasyCraftingUserData";
  }
  protected:
  explicit CMsgDotaFantasyCraftingUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDotaFantasyCraftingUserData_Gem Gem;
  typedef CMsgDotaFantasyCraftingUserData_Tablet Tablet;

  // accessors -------------------------------------------------------

  enum : int {
    kTabletsFieldNumber = 1,
    kAvailableRollsFieldNumber = 2,
    kRollTokensFieldNumber = 3,
  };
  // repeated .CMsgDotaFantasyCraftingUserData.Tablet tablets = 1;
  int tablets_size() const;
  private:
  int _internal_tablets_size() const;
  public:
  void clear_tablets();
  ::CMsgDotaFantasyCraftingUserData_Tablet* mutable_tablets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Tablet >*
      mutable_tablets();
  private:
  const ::CMsgDotaFantasyCraftingUserData_Tablet& _internal_tablets(int index) const;
  ::CMsgDotaFantasyCraftingUserData_Tablet* _internal_add_tablets();
  public:
  const ::CMsgDotaFantasyCraftingUserData_Tablet& tablets(int index) const;
  ::CMsgDotaFantasyCraftingUserData_Tablet* add_tablets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Tablet >&
      tablets() const;

  // repeated uint32 available_rolls = 2;
  int available_rolls_size() const;
  private:
  int _internal_available_rolls_size() const;
  public:
  void clear_available_rolls();
  private:
  uint32_t _internal_available_rolls(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_available_rolls() const;
  void _internal_add_available_rolls(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_available_rolls();
  public:
  uint32_t available_rolls(int index) const;
  void set_available_rolls(int index, uint32_t value);
  void add_available_rolls(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      available_rolls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_available_rolls();

  // optional uint32 roll_tokens = 3;
  bool has_roll_tokens() const;
  private:
  bool _internal_has_roll_tokens() const;
  public:
  void clear_roll_tokens();
  uint32_t roll_tokens() const;
  void set_roll_tokens(uint32_t value);
  private:
  uint32_t _internal_roll_tokens() const;
  void _internal_set_roll_tokens(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDotaFantasyCraftingUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Tablet > tablets_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > available_rolls_;
    uint32_t roll_tokens_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingGetUserData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingGetUserData) */ {
 public:
  inline CMsgClientToGCFantasyCraftingGetUserData() : CMsgClientToGCFantasyCraftingGetUserData(nullptr) {}
  ~CMsgClientToGCFantasyCraftingGetUserData() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingGetUserData(const CMsgClientToGCFantasyCraftingGetUserData& from);
  CMsgClientToGCFantasyCraftingGetUserData(CMsgClientToGCFantasyCraftingGetUserData&& from) noexcept
    : CMsgClientToGCFantasyCraftingGetUserData() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingGetUserData& operator=(const CMsgClientToGCFantasyCraftingGetUserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingGetUserData& operator=(CMsgClientToGCFantasyCraftingGetUserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingGetUserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingGetUserData* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingGetUserData*>(
               &_CMsgClientToGCFantasyCraftingGetUserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgClientToGCFantasyCraftingGetUserData& a, CMsgClientToGCFantasyCraftingGetUserData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingGetUserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingGetUserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingGetUserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingGetUserData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingGetUserData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingGetUserData& from) {
    CMsgClientToGCFantasyCraftingGetUserData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingGetUserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingGetUserData";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingGetUserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueFieldNumber = 1,
    kAccountIdFieldNumber = 2,
  };
  // optional uint32 fantasy_league = 1;
  bool has_fantasy_league() const;
  private:
  bool _internal_has_fantasy_league() const;
  public:
  void clear_fantasy_league();
  uint32_t fantasy_league() const;
  void set_fantasy_league(uint32_t value);
  private:
  uint32_t _internal_fantasy_league() const;
  void _internal_set_fantasy_league(uint32_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingGetUserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t fantasy_league_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingGetUserDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingGetUserDataResponse) */ {
 public:
  inline CMsgClientToGCFantasyCraftingGetUserDataResponse() : CMsgClientToGCFantasyCraftingGetUserDataResponse(nullptr) {}
  ~CMsgClientToGCFantasyCraftingGetUserDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingGetUserDataResponse(const CMsgClientToGCFantasyCraftingGetUserDataResponse& from);
  CMsgClientToGCFantasyCraftingGetUserDataResponse(CMsgClientToGCFantasyCraftingGetUserDataResponse&& from) noexcept
    : CMsgClientToGCFantasyCraftingGetUserDataResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingGetUserDataResponse& operator=(const CMsgClientToGCFantasyCraftingGetUserDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingGetUserDataResponse& operator=(CMsgClientToGCFantasyCraftingGetUserDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingGetUserDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingGetUserDataResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingGetUserDataResponse*>(
               &_CMsgClientToGCFantasyCraftingGetUserDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgClientToGCFantasyCraftingGetUserDataResponse& a, CMsgClientToGCFantasyCraftingGetUserDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingGetUserDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingGetUserDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingGetUserDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingGetUserDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingGetUserDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingGetUserDataResponse& from) {
    CMsgClientToGCFantasyCraftingGetUserDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingGetUserDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingGetUserDataResponse";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingGetUserDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalidLeague =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_k_eInvalidLeague;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 2,
    kResponseFieldNumber = 1,
  };
  // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const ::CMsgDotaFantasyCraftingUserData& user_data() const;
  PROTOBUF_NODISCARD ::CMsgDotaFantasyCraftingUserData* release_user_data();
  ::CMsgDotaFantasyCraftingUserData* mutable_user_data();
  void set_allocated_user_data(::CMsgDotaFantasyCraftingUserData* user_data);
  private:
  const ::CMsgDotaFantasyCraftingUserData& _internal_user_data() const;
  ::CMsgDotaFantasyCraftingUserData* _internal_mutable_user_data();
  public:
  void unsafe_arena_set_allocated_user_data(
      ::CMsgDotaFantasyCraftingUserData* user_data);
  ::CMsgDotaFantasyCraftingUserData* unsafe_arena_release_user_data();

  // optional .CMsgClientToGCFantasyCraftingGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse response() const;
  void set_response(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse value);
  private:
  ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingGetUserDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDotaFantasyCraftingUserData* user_data_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingPerformOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingPerformOperation) */ {
 public:
  inline CMsgClientToGCFantasyCraftingPerformOperation() : CMsgClientToGCFantasyCraftingPerformOperation(nullptr) {}
  ~CMsgClientToGCFantasyCraftingPerformOperation() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingPerformOperation(const CMsgClientToGCFantasyCraftingPerformOperation& from);
  CMsgClientToGCFantasyCraftingPerformOperation(CMsgClientToGCFantasyCraftingPerformOperation&& from) noexcept
    : CMsgClientToGCFantasyCraftingPerformOperation() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingPerformOperation& operator=(const CMsgClientToGCFantasyCraftingPerformOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingPerformOperation& operator=(CMsgClientToGCFantasyCraftingPerformOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingPerformOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingPerformOperation* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingPerformOperation*>(
               &_CMsgClientToGCFantasyCraftingPerformOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgClientToGCFantasyCraftingPerformOperation& a, CMsgClientToGCFantasyCraftingPerformOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingPerformOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingPerformOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingPerformOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingPerformOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingPerformOperation& from) {
    CMsgClientToGCFantasyCraftingPerformOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingPerformOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingPerformOperation";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingPerformOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueFieldNumber = 1,
    kTabletIdFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kOperationIdFieldNumber = 3,
  };
  // optional uint32 fantasy_league = 1;
  bool has_fantasy_league() const;
  private:
  bool _internal_has_fantasy_league() const;
  public:
  void clear_fantasy_league();
  uint32_t fantasy_league() const;
  void set_fantasy_league(uint32_t value);
  private:
  uint32_t _internal_fantasy_league() const;
  void _internal_set_fantasy_league(uint32_t value);
  public:

  // optional uint32 tablet_id = 2;
  bool has_tablet_id() const;
  private:
  bool _internal_has_tablet_id() const;
  public:
  void clear_tablet_id();
  uint32_t tablet_id() const;
  void set_tablet_id(uint32_t value);
  private:
  uint32_t _internal_tablet_id() const;
  void _internal_set_tablet_id(uint32_t value);
  public:

  // optional uint64 extra_data = 4;
  bool has_extra_data() const;
  private:
  bool _internal_has_extra_data() const;
  public:
  void clear_extra_data();
  uint64_t extra_data() const;
  void set_extra_data(uint64_t value);
  private:
  uint64_t _internal_extra_data() const;
  void _internal_set_extra_data(uint64_t value);
  public:

  // optional uint32 operation_id = 3;
  bool has_operation_id() const;
  private:
  bool _internal_has_operation_id() const;
  public:
  void clear_operation_id();
  uint32_t operation_id() const;
  void set_operation_id(uint32_t value);
  private:
  uint32_t _internal_operation_id() const;
  void _internal_set_operation_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingPerformOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t fantasy_league_;
    uint32_t tablet_id_;
    uint64_t extra_data_;
    uint32_t operation_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice) */ {
 public:
  inline CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice() : CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(nullptr) {}
  ~CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from);
  CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice&& from) noexcept
    : CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& operator=(const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& operator=(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice*>(
               &_CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& a, CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& from) {
    CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixChoiceFieldNumber = 1,
    kSuffixChoiceFieldNumber = 2,
  };
  // optional uint32 prefix_choice = 1;
  bool has_prefix_choice() const;
  private:
  bool _internal_has_prefix_choice() const;
  public:
  void clear_prefix_choice();
  uint32_t prefix_choice() const;
  void set_prefix_choice(uint32_t value);
  private:
  uint32_t _internal_prefix_choice() const;
  void _internal_set_prefix_choice(uint32_t value);
  public:

  // optional uint32 suffix_choice = 2;
  bool has_suffix_choice() const;
  private:
  bool _internal_has_suffix_choice() const;
  public:
  void clear_suffix_choice();
  uint32_t suffix_choice() const;
  void set_suffix_choice(uint32_t value);
  private:
  uint32_t _internal_suffix_choice() const;
  void _internal_set_suffix_choice(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t prefix_choice_;
    uint32_t suffix_choice_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingPerformOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingPerformOperationResponse) */ {
 public:
  inline CMsgClientToGCFantasyCraftingPerformOperationResponse() : CMsgClientToGCFantasyCraftingPerformOperationResponse(nullptr) {}
  ~CMsgClientToGCFantasyCraftingPerformOperationResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingPerformOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingPerformOperationResponse(const CMsgClientToGCFantasyCraftingPerformOperationResponse& from);
  CMsgClientToGCFantasyCraftingPerformOperationResponse(CMsgClientToGCFantasyCraftingPerformOperationResponse&& from) noexcept
    : CMsgClientToGCFantasyCraftingPerformOperationResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingPerformOperationResponse& operator=(const CMsgClientToGCFantasyCraftingPerformOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingPerformOperationResponse& operator=(CMsgClientToGCFantasyCraftingPerformOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingPerformOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingPerformOperationResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingPerformOperationResponse*>(
               &_CMsgClientToGCFantasyCraftingPerformOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgClientToGCFantasyCraftingPerformOperationResponse& a, CMsgClientToGCFantasyCraftingPerformOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingPerformOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingPerformOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingPerformOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingPerformOperationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingPerformOperationResponse& from) {
    CMsgClientToGCFantasyCraftingPerformOperationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingPerformOperationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingPerformOperationResponse";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingPerformOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice TitleChoice;

  typedef CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalidLeague =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eInvalidLeague;
  static constexpr EResponse k_eNoTokens =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eNoTokens;
  static constexpr EResponse k_eMoreInfo =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_k_eMoreInfo;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerChoicesFieldNumber = 3,
    kPrefixChoicesFieldNumber = 4,
    kSuffixChoicesFieldNumber = 5,
    kTitleChoicesFieldNumber = 6,
    kResponseFieldNumber = 1,
    kOperationIdFieldNumber = 2,
  };
  // repeated uint32 player_choices = 3;
  int player_choices_size() const;
  private:
  int _internal_player_choices_size() const;
  public:
  void clear_player_choices();
  private:
  uint32_t _internal_player_choices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_player_choices() const;
  void _internal_add_player_choices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_player_choices();
  public:
  uint32_t player_choices(int index) const;
  void set_player_choices(int index, uint32_t value);
  void add_player_choices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      player_choices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_player_choices();

  // repeated uint32 prefix_choices = 4;
  int prefix_choices_size() const;
  private:
  int _internal_prefix_choices_size() const;
  public:
  void clear_prefix_choices();
  private:
  uint32_t _internal_prefix_choices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_prefix_choices() const;
  void _internal_add_prefix_choices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_prefix_choices();
  public:
  uint32_t prefix_choices(int index) const;
  void set_prefix_choices(int index, uint32_t value);
  void add_prefix_choices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      prefix_choices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_prefix_choices();

  // repeated uint32 suffix_choices = 5;
  int suffix_choices_size() const;
  private:
  int _internal_suffix_choices_size() const;
  public:
  void clear_suffix_choices();
  private:
  uint32_t _internal_suffix_choices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_suffix_choices() const;
  void _internal_add_suffix_choices(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_suffix_choices();
  public:
  uint32_t suffix_choices(int index) const;
  void set_suffix_choices(int index, uint32_t value);
  void add_suffix_choices(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      suffix_choices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_suffix_choices();

  // repeated .CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice title_choices = 6;
  int title_choices_size() const;
  private:
  int _internal_title_choices_size() const;
  public:
  void clear_title_choices();
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* mutable_title_choices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >*
      mutable_title_choices();
  private:
  const ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& _internal_title_choices(int index) const;
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* _internal_add_title_choices();
  public:
  const ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& title_choices(int index) const;
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* add_title_choices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >&
      title_choices() const;

  // optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse response() const;
  void set_response(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse value);
  private:
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse value);
  public:

  // optional uint32 operation_id = 2;
  bool has_operation_id() const;
  private:
  bool _internal_has_operation_id() const;
  public:
  void clear_operation_id();
  uint32_t operation_id() const;
  void set_operation_id(uint32_t value);
  private:
  uint32_t _internal_operation_id() const;
  void _internal_set_operation_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingPerformOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > player_choices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > prefix_choices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > suffix_choices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice > title_choices_;
    int response_;
    uint32_t operation_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientFantasyCraftingDataUpdated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientFantasyCraftingDataUpdated) */ {
 public:
  inline CMsgGCToClientFantasyCraftingDataUpdated() : CMsgGCToClientFantasyCraftingDataUpdated(nullptr) {}
  ~CMsgGCToClientFantasyCraftingDataUpdated() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientFantasyCraftingDataUpdated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientFantasyCraftingDataUpdated(const CMsgGCToClientFantasyCraftingDataUpdated& from);
  CMsgGCToClientFantasyCraftingDataUpdated(CMsgGCToClientFantasyCraftingDataUpdated&& from) noexcept
    : CMsgGCToClientFantasyCraftingDataUpdated() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientFantasyCraftingDataUpdated& operator=(const CMsgGCToClientFantasyCraftingDataUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientFantasyCraftingDataUpdated& operator=(CMsgGCToClientFantasyCraftingDataUpdated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientFantasyCraftingDataUpdated& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientFantasyCraftingDataUpdated* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFantasyCraftingDataUpdated*>(
               &_CMsgGCToClientFantasyCraftingDataUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgGCToClientFantasyCraftingDataUpdated& a, CMsgGCToClientFantasyCraftingDataUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientFantasyCraftingDataUpdated* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientFantasyCraftingDataUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientFantasyCraftingDataUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientFantasyCraftingDataUpdated>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientFantasyCraftingDataUpdated& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientFantasyCraftingDataUpdated& from) {
    CMsgGCToClientFantasyCraftingDataUpdated::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientFantasyCraftingDataUpdated* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientFantasyCraftingDataUpdated";
  }
  protected:
  explicit CMsgGCToClientFantasyCraftingDataUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 2,
    kFantasyLeagueFieldNumber = 1,
  };
  // optional .CMsgDotaFantasyCraftingUserData user_data = 2;
  bool has_user_data() const;
  private:
  bool _internal_has_user_data() const;
  public:
  void clear_user_data();
  const ::CMsgDotaFantasyCraftingUserData& user_data() const;
  PROTOBUF_NODISCARD ::CMsgDotaFantasyCraftingUserData* release_user_data();
  ::CMsgDotaFantasyCraftingUserData* mutable_user_data();
  void set_allocated_user_data(::CMsgDotaFantasyCraftingUserData* user_data);
  private:
  const ::CMsgDotaFantasyCraftingUserData& _internal_user_data() const;
  ::CMsgDotaFantasyCraftingUserData* _internal_mutable_user_data();
  public:
  void unsafe_arena_set_allocated_user_data(
      ::CMsgDotaFantasyCraftingUserData* user_data);
  ::CMsgDotaFantasyCraftingUserData* unsafe_arena_release_user_data();

  // optional uint32 fantasy_league = 1;
  bool has_fantasy_league() const;
  private:
  bool _internal_has_fantasy_league() const;
  public:
  void clear_fantasy_league();
  uint32_t fantasy_league() const;
  void set_fantasy_league(uint32_t value);
  private:
  uint32_t _internal_fantasy_league() const;
  void _internal_set_fantasy_league(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientFantasyCraftingDataUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CMsgDotaFantasyCraftingUserData* user_data_;
    uint32_t fantasy_league_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingDevModifyTablet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingDevModifyTablet) */ {
 public:
  inline CMsgClientToGCFantasyCraftingDevModifyTablet() : CMsgClientToGCFantasyCraftingDevModifyTablet(nullptr) {}
  ~CMsgClientToGCFantasyCraftingDevModifyTablet() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTablet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingDevModifyTablet(const CMsgClientToGCFantasyCraftingDevModifyTablet& from);
  CMsgClientToGCFantasyCraftingDevModifyTablet(CMsgClientToGCFantasyCraftingDevModifyTablet&& from) noexcept
    : CMsgClientToGCFantasyCraftingDevModifyTablet() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingDevModifyTablet& operator=(const CMsgClientToGCFantasyCraftingDevModifyTablet& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingDevModifyTablet& operator=(CMsgClientToGCFantasyCraftingDevModifyTablet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingDevModifyTablet& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingDevModifyTablet* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingDevModifyTablet*>(
               &_CMsgClientToGCFantasyCraftingDevModifyTablet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgClientToGCFantasyCraftingDevModifyTablet& a, CMsgClientToGCFantasyCraftingDevModifyTablet& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingDevModifyTablet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingDevModifyTablet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingDevModifyTablet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingDevModifyTablet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingDevModifyTablet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingDevModifyTablet& from) {
    CMsgClientToGCFantasyCraftingDevModifyTablet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingDevModifyTablet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingDevModifyTablet";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingDevModifyTablet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueFieldNumber = 1,
    kResetTabletFieldNumber = 2,
    kModifyTokensFieldNumber = 3,
    kTabletLevelFieldNumber = 4,
  };
  // optional uint32 fantasy_league = 1;
  bool has_fantasy_league() const;
  private:
  bool _internal_has_fantasy_league() const;
  public:
  void clear_fantasy_league();
  uint32_t fantasy_league() const;
  void set_fantasy_league(uint32_t value);
  private:
  uint32_t _internal_fantasy_league() const;
  void _internal_set_fantasy_league(uint32_t value);
  public:

  // optional bool reset_tablet = 2;
  bool has_reset_tablet() const;
  private:
  bool _internal_has_reset_tablet() const;
  public:
  void clear_reset_tablet();
  bool reset_tablet() const;
  void set_reset_tablet(bool value);
  private:
  bool _internal_reset_tablet() const;
  void _internal_set_reset_tablet(bool value);
  public:

  // optional uint32 modify_tokens = 3;
  bool has_modify_tokens() const;
  private:
  bool _internal_has_modify_tokens() const;
  public:
  void clear_modify_tokens();
  uint32_t modify_tokens() const;
  void set_modify_tokens(uint32_t value);
  private:
  uint32_t _internal_modify_tokens() const;
  void _internal_set_modify_tokens(uint32_t value);
  public:

  // optional uint32 tablet_level = 4;
  bool has_tablet_level() const;
  private:
  bool _internal_has_tablet_level() const;
  public:
  void clear_tablet_level();
  uint32_t tablet_level() const;
  void set_tablet_level(uint32_t value);
  private:
  uint32_t _internal_tablet_level() const;
  void _internal_set_tablet_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingDevModifyTablet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t fantasy_league_;
    bool reset_tablet_;
    uint32_t modify_tokens_;
    uint32_t tablet_level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCFantasyCraftingDevModifyTabletResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCFantasyCraftingDevModifyTabletResponse) */ {
 public:
  inline CMsgClientToGCFantasyCraftingDevModifyTabletResponse() : CMsgClientToGCFantasyCraftingDevModifyTabletResponse(nullptr) {}
  ~CMsgClientToGCFantasyCraftingDevModifyTabletResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCFantasyCraftingDevModifyTabletResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCFantasyCraftingDevModifyTabletResponse(const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from);
  CMsgClientToGCFantasyCraftingDevModifyTabletResponse(CMsgClientToGCFantasyCraftingDevModifyTabletResponse&& from) noexcept
    : CMsgClientToGCFantasyCraftingDevModifyTabletResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCFantasyCraftingDevModifyTabletResponse& operator=(const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCFantasyCraftingDevModifyTabletResponse& operator=(CMsgClientToGCFantasyCraftingDevModifyTabletResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCFantasyCraftingDevModifyTabletResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFantasyCraftingDevModifyTabletResponse*>(
               &_CMsgClientToGCFantasyCraftingDevModifyTabletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgClientToGCFantasyCraftingDevModifyTabletResponse& a, CMsgClientToGCFantasyCraftingDevModifyTabletResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCFantasyCraftingDevModifyTabletResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCFantasyCraftingDevModifyTabletResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCFantasyCraftingDevModifyTabletResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCFantasyCraftingDevModifyTabletResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCFantasyCraftingDevModifyTabletResponse& from) {
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCFantasyCraftingDevModifyTabletResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCFantasyCraftingDevModifyTabletResponse";
  }
  protected:
  explicit CMsgClientToGCFantasyCraftingDevModifyTabletResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse EResponse;
  static constexpr EResponse k_eInternalError =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInternalError;
  static constexpr EResponse k_eSuccess =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eSuccess;
  static constexpr EResponse k_eTooBusy =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eTooBusy;
  static constexpr EResponse k_eDisabled =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eDisabled;
  static constexpr EResponse k_eTimeout =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eTimeout;
  static constexpr EResponse k_eInvalidLeague =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_k_eInvalidLeague;
  static inline bool EResponse_IsValid(int value) {
    return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_IsValid(value);
  }
  static constexpr EResponse EResponse_MIN =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_MIN;
  static constexpr EResponse EResponse_MAX =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_MAX;
  static constexpr int EResponse_ARRAYSIZE =
    CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_EResponse_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResponse_descriptor() {
    return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor();
  }
  template<typename T>
  static inline const std::string& EResponse_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResponse>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResponse_Name.");
    return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_Name(enum_t_value);
  }
  static inline bool EResponse_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResponse* value) {
    return CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1 [default = k_eInternalError];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse response() const;
  void set_response(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse value);
  private:
  ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse _internal_response() const;
  void _internal_set_response(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCFantasyCraftingDevModifyTabletResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgDOTAPlayerInfo_Results

// optional uint32 league_id = 1;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAPlayerInfo_Results::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.league_id)
}

// optional uint32 placement = 2;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_placement() const {
  return _internal_has_placement();
}
inline void CMsgDOTAPlayerInfo_Results::clear_placement() {
  _impl_.placement_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::_internal_placement() const {
  return _impl_.placement_;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::placement() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.placement)
  return _internal_placement();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_placement(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.placement_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_placement(uint32_t value) {
  _internal_set_placement(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.placement)
}

// optional uint32 earnings = 3;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_earnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_earnings() const {
  return _internal_has_earnings();
}
inline void CMsgDOTAPlayerInfo_Results::clear_earnings() {
  _impl_.earnings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::_internal_earnings() const {
  return _impl_.earnings_;
}
inline uint32_t CMsgDOTAPlayerInfo_Results::earnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.earnings)
  return _internal_earnings();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_earnings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.earnings_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_earnings(uint32_t value) {
  _internal_set_earnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.earnings)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfo_AuditEntry

// optional uint32 start_timestamp = 1;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
}

// optional uint32 end_timestamp = 2;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_end_timestamp() {
  _impl_.end_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::_internal_end_timestamp() const {
  return _impl_.end_timestamp_;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_end_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.end_timestamp_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_end_timestamp(uint32_t value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
}

// optional uint32 team_id = 3;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAPlayerInfo_AuditEntry::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_id)
}

// optional string team_name = 4;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo_AuditEntry::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}

// optional string team_tag = 5;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_tag() {
  _impl_.team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo_AuditEntry::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_tag() const {
  return _impl_.team_tag_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_tag() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.team_tag_.SetAllocated(team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}

// optional string team_url_logo = 6;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_url_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_url_logo() const {
  return _internal_has_team_url_logo();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_url_logo() {
  _impl_.team_url_logo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_url_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  return _internal_team_url_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo_AuditEntry::set_team_url_logo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.team_url_logo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_url_logo() {
  std::string* _s = _internal_mutable_team_url_logo();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_url_logo() const {
  return _impl_.team_url_logo_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_url_logo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_url_logo_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_url_logo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.team_url_logo_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_url_logo() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  if (!_internal_has_team_url_logo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.team_url_logo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_url_logo_.IsDefault()) {
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_url_logo(std::string* team_url_logo) {
  if (team_url_logo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.team_url_logo_.SetAllocated(team_url_logo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_url_logo_.IsDefault()) {
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfo

// optional uint32 account_id = 1;
inline bool CMsgDOTAPlayerInfo::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAPlayerInfo::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAPlayerInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAPlayerInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAPlayerInfo::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAPlayerInfo::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.account_id)
}

// optional string name = 2;
inline bool CMsgDOTAPlayerInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTAPlayerInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.name)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.name)
}

// optional string country_code = 3;
inline bool CMsgDOTAPlayerInfo::_internal_has_country_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMsgDOTAPlayerInfo::clear_country_code() {
  _impl_.country_code_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAPlayerInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.country_code)
  return _internal_country_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_country_code(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.country_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.country_code)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_country_code() {
  std::string* _s = _internal_mutable_country_code();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.country_code)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_country_code() const {
  return _impl_.country_code_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_country_code(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.country_code_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_country_code() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.country_code_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.country_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.country_code_.SetAllocated(country_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.country_code_.IsDefault()) {
    _impl_.country_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.country_code)
}

// optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
inline bool CMsgDOTAPlayerInfo::_internal_has_fantasy_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_fantasy_role() const {
  return _internal_has_fantasy_role();
}
inline void CMsgDOTAPlayerInfo::clear_fantasy_role() {
  _impl_.fantasy_role_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::Fantasy_Roles CMsgDOTAPlayerInfo::_internal_fantasy_role() const {
  return static_cast< ::Fantasy_Roles >(_impl_.fantasy_role_);
}
inline ::Fantasy_Roles CMsgDOTAPlayerInfo::fantasy_role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.fantasy_role)
  return _internal_fantasy_role();
}
inline void CMsgDOTAPlayerInfo::_internal_set_fantasy_role(::Fantasy_Roles value) {
  assert(::Fantasy_Roles_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.fantasy_role_ = value;
}
inline void CMsgDOTAPlayerInfo::set_fantasy_role(::Fantasy_Roles value) {
  _internal_set_fantasy_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.fantasy_role)
}

// optional uint32 team_id = 5;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAPlayerInfo::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAPlayerInfo::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAPlayerInfo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAPlayerInfo::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_id)
}

// optional string team_name = 6;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAPlayerInfo::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_name)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_name)
}

// optional string team_tag = 7;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTAPlayerInfo::clear_team_tag() {
  _impl_.team_tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_tag)
  return _internal_team_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_team_tag(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.team_tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_tag() {
  std::string* _s = _internal_mutable_team_tag();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_tag)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_tag() const {
  return _impl_.team_tag_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_tag_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_tag() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.team_tag_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.team_tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.team_tag_.SetAllocated(team_tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_tag_.IsDefault()) {
    _impl_.team_tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_tag)
}

// optional string sponsor = 8;
inline bool CMsgDOTAPlayerInfo::_internal_has_sponsor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_sponsor() const {
  return _internal_has_sponsor();
}
inline void CMsgDOTAPlayerInfo::clear_sponsor() {
  _impl_.sponsor_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgDOTAPlayerInfo::sponsor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.sponsor)
  return _internal_sponsor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_sponsor(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.sponsor_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.sponsor)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_sponsor() {
  std::string* _s = _internal_mutable_sponsor();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.sponsor)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_sponsor() const {
  return _impl_.sponsor_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_sponsor(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sponsor_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_sponsor() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.sponsor_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_sponsor() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.sponsor)
  if (!_internal_has_sponsor()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.sponsor_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sponsor_.IsDefault()) {
    _impl_.sponsor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_sponsor(std::string* sponsor) {
  if (sponsor != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sponsor_.SetAllocated(sponsor, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sponsor_.IsDefault()) {
    _impl_.sponsor_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.sponsor)
}

// optional bool is_locked = 9;
inline bool CMsgDOTAPlayerInfo::_internal_has_is_locked() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_is_locked() const {
  return _internal_has_is_locked();
}
inline void CMsgDOTAPlayerInfo::clear_is_locked() {
  _impl_.is_locked_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgDOTAPlayerInfo::_internal_is_locked() const {
  return _impl_.is_locked_;
}
inline bool CMsgDOTAPlayerInfo::is_locked() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.is_locked)
  return _internal_is_locked();
}
inline void CMsgDOTAPlayerInfo::_internal_set_is_locked(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_locked_ = value;
}
inline void CMsgDOTAPlayerInfo::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.is_locked)
}

// optional bool is_pro = 10;
inline bool CMsgDOTAPlayerInfo::_internal_has_is_pro() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_is_pro() const {
  return _internal_has_is_pro();
}
inline void CMsgDOTAPlayerInfo::clear_is_pro() {
  _impl_.is_pro_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgDOTAPlayerInfo::_internal_is_pro() const {
  return _impl_.is_pro_;
}
inline bool CMsgDOTAPlayerInfo::is_pro() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.is_pro)
  return _internal_is_pro();
}
inline void CMsgDOTAPlayerInfo::_internal_set_is_pro(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.is_pro_ = value;
}
inline void CMsgDOTAPlayerInfo::set_is_pro(bool value) {
  _internal_set_is_pro(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.is_pro)
}

// optional string real_name = 11;
inline bool CMsgDOTAPlayerInfo::_internal_has_real_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgDOTAPlayerInfo::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgDOTAPlayerInfo::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_real_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000020u;
 _impl_.real_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.real_name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.real_name)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_real_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_real_name() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.real_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* p = _impl_.real_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.real_name_.SetAllocated(real_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.real_name)
}

// optional uint32 total_earnings = 13;
inline bool CMsgDOTAPlayerInfo::_internal_has_total_earnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_total_earnings() const {
  return _internal_has_total_earnings();
}
inline void CMsgDOTAPlayerInfo::clear_total_earnings() {
  _impl_.total_earnings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAPlayerInfo::_internal_total_earnings() const {
  return _impl_.total_earnings_;
}
inline uint32_t CMsgDOTAPlayerInfo::total_earnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.total_earnings)
  return _internal_total_earnings();
}
inline void CMsgDOTAPlayerInfo::_internal_set_total_earnings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.total_earnings_ = value;
}
inline void CMsgDOTAPlayerInfo::set_total_earnings(uint32_t value) {
  _internal_set_total_earnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.total_earnings)
}

// repeated .CMsgDOTAPlayerInfo.Results results = 14;
inline int CMsgDOTAPlayerInfo::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int CMsgDOTAPlayerInfo::results_size() const {
  return _internal_results_size();
}
inline void CMsgDOTAPlayerInfo::clear_results() {
  _impl_.results_.Clear();
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >*
CMsgDOTAPlayerInfo::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfo.results)
  return &_impl_.results_;
}
inline const ::CMsgDOTAPlayerInfo_Results& CMsgDOTAPlayerInfo::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo_Results& CMsgDOTAPlayerInfo::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.results)
  return _internal_results(index);
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::add_results() {
  ::CMsgDOTAPlayerInfo_Results* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfo.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >&
CMsgDOTAPlayerInfo::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfo.results)
  return _impl_.results_;
}

// optional string team_url_logo = 15;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_url_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_url_logo() const {
  return _internal_has_team_url_logo();
}
inline void CMsgDOTAPlayerInfo::clear_team_url_logo() {
  _impl_.team_url_logo_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_url_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_url_logo)
  return _internal_team_url_logo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_team_url_logo(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000040u;
 _impl_.team_url_logo_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_url_logo() {
  std::string* _s = _internal_mutable_team_url_logo();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_url_logo)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_url_logo() const {
  return _impl_.team_url_logo_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_url_logo(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_url_logo_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_url_logo() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.team_url_logo_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_url_logo() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_url_logo)
  if (!_internal_has_team_url_logo()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* p = _impl_.team_url_logo_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_url_logo_.IsDefault()) {
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_url_logo(std::string* team_url_logo) {
  if (team_url_logo != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.team_url_logo_.SetAllocated(team_url_logo, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_url_logo_.IsDefault()) {
    _impl_.team_url_logo_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_url_logo)
}

// repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
inline int CMsgDOTAPlayerInfo::_internal_audit_entries_size() const {
  return _impl_.audit_entries_.size();
}
inline int CMsgDOTAPlayerInfo::audit_entries_size() const {
  return _internal_audit_entries_size();
}
inline void CMsgDOTAPlayerInfo::clear_audit_entries() {
  _impl_.audit_entries_.Clear();
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::mutable_audit_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.audit_entries)
  return _impl_.audit_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >*
CMsgDOTAPlayerInfo::mutable_audit_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfo.audit_entries)
  return &_impl_.audit_entries_;
}
inline const ::CMsgDOTAPlayerInfo_AuditEntry& CMsgDOTAPlayerInfo::_internal_audit_entries(int index) const {
  return _impl_.audit_entries_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo_AuditEntry& CMsgDOTAPlayerInfo::audit_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.audit_entries)
  return _internal_audit_entries(index);
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::_internal_add_audit_entries() {
  return _impl_.audit_entries_.Add();
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::add_audit_entries() {
  ::CMsgDOTAPlayerInfo_AuditEntry* _add = _internal_add_audit_entries();
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfo.audit_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >&
CMsgDOTAPlayerInfo::audit_entries() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfo.audit_entries)
  return _impl_.audit_entries_;
}

// optional string team_abbreviation = 17;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_abbreviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_abbreviation() const {
  return _internal_has_team_abbreviation();
}
inline void CMsgDOTAPlayerInfo::clear_team_abbreviation() {
  _impl_.team_abbreviation_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_abbreviation() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_abbreviation)
  return _internal_team_abbreviation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAPlayerInfo::set_team_abbreviation(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000080u;
 _impl_.team_abbreviation_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_abbreviation)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_abbreviation() {
  std::string* _s = _internal_mutable_team_abbreviation();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_abbreviation)
  return _s;
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_abbreviation() const {
  return _impl_.team_abbreviation_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_abbreviation(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.team_abbreviation_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_abbreviation() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.team_abbreviation_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_abbreviation() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_abbreviation)
  if (!_internal_has_team_abbreviation()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* p = _impl_.team_abbreviation_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_abbreviation_.IsDefault()) {
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_abbreviation(std::string* team_abbreviation) {
  if (team_abbreviation != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.team_abbreviation_.SetAllocated(team_abbreviation, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_abbreviation_.IsDefault()) {
    _impl_.team_abbreviation_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_abbreviation)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfoList

// repeated .CMsgDOTAPlayerInfo player_infos = 1;
inline int CMsgDOTAPlayerInfoList::_internal_player_infos_size() const {
  return _impl_.player_infos_.size();
}
inline int CMsgDOTAPlayerInfoList::player_infos_size() const {
  return _internal_player_infos_size();
}
inline void CMsgDOTAPlayerInfoList::clear_player_infos() {
  _impl_.player_infos_.Clear();
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfoList.player_infos)
  return _impl_.player_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >*
CMsgDOTAPlayerInfoList::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfoList.player_infos)
  return &_impl_.player_infos_;
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTAPlayerInfoList::_internal_player_infos(int index) const {
  return _impl_.player_infos_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTAPlayerInfoList::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfoList.player_infos)
  return _internal_player_infos(index);
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::_internal_add_player_infos() {
  return _impl_.player_infos_.Add();
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::add_player_infos() {
  ::CMsgDOTAPlayerInfo* _add = _internal_add_player_infos();
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfoList.player_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >&
CMsgDOTAPlayerInfoList::player_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfoList.player_infos)
  return _impl_.player_infos_;
}

// -------------------------------------------------------------------

// CMsgDOTATeamRoster

// optional uint32 timestamp = 1;
inline bool CMsgDOTATeamRoster::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATeamRoster::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTATeamRoster::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTATeamRoster::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTATeamRoster::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamRoster.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTATeamRoster::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTATeamRoster::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamRoster.timestamp)
}

// optional uint32 team_id = 2;
inline bool CMsgDOTATeamRoster::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATeamRoster::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTATeamRoster::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATeamRoster::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTATeamRoster::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamRoster.team_id)
  return _internal_team_id();
}
inline void CMsgDOTATeamRoster::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTATeamRoster::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamRoster.team_id)
}

// repeated uint32 member_account_ids = 3;
inline int CMsgDOTATeamRoster::_internal_member_account_ids_size() const {
  return _impl_.member_account_ids_.size();
}
inline int CMsgDOTATeamRoster::member_account_ids_size() const {
  return _internal_member_account_ids_size();
}
inline void CMsgDOTATeamRoster::clear_member_account_ids() {
  _impl_.member_account_ids_.Clear();
}
inline uint32_t CMsgDOTATeamRoster::_internal_member_account_ids(int index) const {
  return _impl_.member_account_ids_.Get(index);
}
inline uint32_t CMsgDOTATeamRoster::member_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamRoster.member_account_ids)
  return _internal_member_account_ids(index);
}
inline void CMsgDOTATeamRoster::set_member_account_ids(int index, uint32_t value) {
  _impl_.member_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamRoster.member_account_ids)
}
inline void CMsgDOTATeamRoster::_internal_add_member_account_ids(uint32_t value) {
  _impl_.member_account_ids_.Add(value);
}
inline void CMsgDOTATeamRoster::add_member_account_ids(uint32_t value) {
  _internal_add_member_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATeamRoster.member_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATeamRoster::_internal_member_account_ids() const {
  return _impl_.member_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATeamRoster::member_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATeamRoster.member_account_ids)
  return _internal_member_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATeamRoster::_internal_mutable_member_account_ids() {
  return &_impl_.member_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATeamRoster::mutable_member_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATeamRoster.member_account_ids)
  return _internal_mutable_member_account_ids();
}

// optional uint32 coach_account_id = 4;
inline bool CMsgDOTATeamRoster::_internal_has_coach_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATeamRoster::has_coach_account_id() const {
  return _internal_has_coach_account_id();
}
inline void CMsgDOTATeamRoster::clear_coach_account_id() {
  _impl_.coach_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTATeamRoster::_internal_coach_account_id() const {
  return _impl_.coach_account_id_;
}
inline uint32_t CMsgDOTATeamRoster::coach_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATeamRoster.coach_account_id)
  return _internal_coach_account_id();
}
inline void CMsgDOTATeamRoster::_internal_set_coach_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.coach_account_id_ = value;
}
inline void CMsgDOTATeamRoster::set_coach_account_id(uint32_t value) {
  _internal_set_coach_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATeamRoster.coach_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo_PredictionInfo

// optional uint32 percent = 1;
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::_internal_has_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::has_percent() const {
  return _internal_has_percent();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::clear_percent() {
  _impl_.percent_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTADPCProfileInfo_PredictionInfo::_internal_percent() const {
  return _impl_.percent_;
}
inline uint32_t CMsgDOTADPCProfileInfo_PredictionInfo::percent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.PredictionInfo.percent)
  return _internal_percent();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::_internal_set_percent(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.percent_ = value;
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::set_percent(uint32_t value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.PredictionInfo.percent)
}

// optional int32 shard_winnings = 2;
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::_internal_has_shard_winnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::has_shard_winnings() const {
  return _internal_has_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::clear_shard_winnings() {
  _impl_.shard_winnings_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTADPCProfileInfo_PredictionInfo::_internal_shard_winnings() const {
  return _impl_.shard_winnings_;
}
inline int32_t CMsgDOTADPCProfileInfo_PredictionInfo::shard_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
  return _internal_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::_internal_set_shard_winnings(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shard_winnings_ = value;
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::set_shard_winnings(int32_t value) {
  _internal_set_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo_FantasyInfo

// optional uint32 top_90_finishes = 1;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_90_finishes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_90_finishes() const {
  return _internal_has_top_90_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_90_finishes() {
  _impl_.top_90_finishes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_90_finishes() const {
  return _impl_.top_90_finishes_;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::top_90_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
  return _internal_top_90_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_90_finishes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.top_90_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_90_finishes(uint32_t value) {
  _internal_set_top_90_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
}

// optional uint32 top_75_finishes = 2;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_75_finishes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_75_finishes() const {
  return _internal_has_top_75_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_75_finishes() {
  _impl_.top_75_finishes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_75_finishes() const {
  return _impl_.top_75_finishes_;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::top_75_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
  return _internal_top_75_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_75_finishes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.top_75_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_75_finishes(uint32_t value) {
  _internal_set_top_75_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
}

// optional uint32 top_50_finishes = 3;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_50_finishes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_50_finishes() const {
  return _internal_has_top_50_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_50_finishes() {
  _impl_.top_50_finishes_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_50_finishes() const {
  return _impl_.top_50_finishes_;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::top_50_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
  return _internal_top_50_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_50_finishes(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.top_50_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_50_finishes(uint32_t value) {
  _internal_set_top_50_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
}

// optional uint32 shard_winnings = 4;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_shard_winnings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_shard_winnings() const {
  return _internal_has_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_shard_winnings() {
  _impl_.shard_winnings_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::_internal_shard_winnings() const {
  return _impl_.shard_winnings_;
}
inline uint32_t CMsgDOTADPCProfileInfo_FantasyInfo::shard_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
  return _internal_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_shard_winnings(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.shard_winnings_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_shard_winnings(uint32_t value) {
  _internal_set_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo

// optional .CMsgDOTAPlayerInfo player_info = 1;
inline bool CMsgDOTADPCProfileInfo::_internal_has_player_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_player_info() const {
  return _internal_has_player_info();
}
inline void CMsgDOTADPCProfileInfo::clear_player_info() {
  if (_impl_.player_info_ != nullptr) _impl_.player_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTADPCProfileInfo::_internal_player_info() const {
  const ::CMsgDOTAPlayerInfo* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAPlayerInfo&>(
      ::_CMsgDOTAPlayerInfo_default_instance_);
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTADPCProfileInfo::player_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.player_info)
  return _internal_player_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_player_info(
    ::CMsgDOTAPlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = player_info;
  if (player_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.player_info)
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::release_player_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAPlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.player_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAPlayerInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::_internal_mutable_player_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAPlayerInfo>(GetArenaForAllocation());
    _impl_.player_info_ = p;
  }
  return _impl_.player_info_;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::mutable_player_info() {
  ::CMsgDOTAPlayerInfo* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.player_info)
  return _msg;
}
inline void CMsgDOTADPCProfileInfo::set_allocated_player_info(::CMsgDOTAPlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.player_info)
}

// optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
inline bool CMsgDOTADPCProfileInfo::_internal_has_prediction_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prediction_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_prediction_info() const {
  return _internal_has_prediction_info();
}
inline void CMsgDOTADPCProfileInfo::clear_prediction_info() {
  if (_impl_.prediction_info_ != nullptr) _impl_.prediction_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTADPCProfileInfo_PredictionInfo& CMsgDOTADPCProfileInfo::_internal_prediction_info() const {
  const ::CMsgDOTADPCProfileInfo_PredictionInfo* p = _impl_.prediction_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTADPCProfileInfo_PredictionInfo&>(
      ::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_);
}
inline const ::CMsgDOTADPCProfileInfo_PredictionInfo& CMsgDOTADPCProfileInfo::prediction_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.prediction_info)
  return _internal_prediction_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_prediction_info(
    ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prediction_info_);
  }
  _impl_.prediction_info_ = prediction_info;
  if (prediction_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.prediction_info)
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::release_prediction_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* temp = _impl_.prediction_info_;
  _impl_.prediction_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_prediction_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.prediction_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* temp = _impl_.prediction_info_;
  _impl_.prediction_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::_internal_mutable_prediction_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.prediction_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTADPCProfileInfo_PredictionInfo>(GetArenaForAllocation());
    _impl_.prediction_info_ = p;
  }
  return _impl_.prediction_info_;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::mutable_prediction_info() {
  ::CMsgDOTADPCProfileInfo_PredictionInfo* _msg = _internal_mutable_prediction_info();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.prediction_info)
  return _msg;
}
inline void CMsgDOTADPCProfileInfo::set_allocated_prediction_info(::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prediction_info_;
  }
  if (prediction_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prediction_info);
    if (message_arena != submessage_arena) {
      prediction_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prediction_info_ = prediction_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.prediction_info)
}

// optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
inline bool CMsgDOTADPCProfileInfo::_internal_has_fantasy_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fantasy_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_fantasy_info() const {
  return _internal_has_fantasy_info();
}
inline void CMsgDOTADPCProfileInfo::clear_fantasy_info() {
  if (_impl_.fantasy_info_ != nullptr) _impl_.fantasy_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgDOTADPCProfileInfo_FantasyInfo& CMsgDOTADPCProfileInfo::_internal_fantasy_info() const {
  const ::CMsgDOTADPCProfileInfo_FantasyInfo* p = _impl_.fantasy_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTADPCProfileInfo_FantasyInfo&>(
      ::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_);
}
inline const ::CMsgDOTADPCProfileInfo_FantasyInfo& CMsgDOTADPCProfileInfo::fantasy_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.fantasy_info)
  return _internal_fantasy_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_fantasy_info(
    ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fantasy_info_);
  }
  _impl_.fantasy_info_ = fantasy_info;
  if (fantasy_info) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.fantasy_info)
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::release_fantasy_info() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* temp = _impl_.fantasy_info_;
  _impl_.fantasy_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_fantasy_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.fantasy_info)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* temp = _impl_.fantasy_info_;
  _impl_.fantasy_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::_internal_mutable_fantasy_info() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.fantasy_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTADPCProfileInfo_FantasyInfo>(GetArenaForAllocation());
    _impl_.fantasy_info_ = p;
  }
  return _impl_.fantasy_info_;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::mutable_fantasy_info() {
  ::CMsgDOTADPCProfileInfo_FantasyInfo* _msg = _internal_mutable_fantasy_info();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.fantasy_info)
  return _msg;
}
inline void CMsgDOTADPCProfileInfo::set_allocated_fantasy_info(::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fantasy_info_;
  }
  if (fantasy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fantasy_info);
    if (message_arena != submessage_arena) {
      fantasy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fantasy_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.fantasy_info_ = fantasy_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.fantasy_info)
}

// repeated uint32 disabled_notifications = 4;
inline int CMsgDOTADPCProfileInfo::_internal_disabled_notifications_size() const {
  return _impl_.disabled_notifications_.size();
}
inline int CMsgDOTADPCProfileInfo::disabled_notifications_size() const {
  return _internal_disabled_notifications_size();
}
inline void CMsgDOTADPCProfileInfo::clear_disabled_notifications() {
  _impl_.disabled_notifications_.Clear();
}
inline uint32_t CMsgDOTADPCProfileInfo::_internal_disabled_notifications(int index) const {
  return _impl_.disabled_notifications_.Get(index);
}
inline uint32_t CMsgDOTADPCProfileInfo::disabled_notifications(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_disabled_notifications(index);
}
inline void CMsgDOTADPCProfileInfo::set_disabled_notifications(int index, uint32_t value) {
  _impl_.disabled_notifications_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.disabled_notifications)
}
inline void CMsgDOTADPCProfileInfo::_internal_add_disabled_notifications(uint32_t value) {
  _impl_.disabled_notifications_.Add(value);
}
inline void CMsgDOTADPCProfileInfo::add_disabled_notifications(uint32_t value) {
  _internal_add_disabled_notifications(value);
  // @@protoc_insertion_point(field_add:CMsgDOTADPCProfileInfo.disabled_notifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTADPCProfileInfo::_internal_disabled_notifications() const {
  return _impl_.disabled_notifications_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTADPCProfileInfo::disabled_notifications() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_disabled_notifications();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTADPCProfileInfo::_internal_mutable_disabled_notifications() {
  return &_impl_.disabled_notifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTADPCProfileInfo::mutable_disabled_notifications() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_mutable_disabled_notifications();
}

// -------------------------------------------------------------------

// CMsgDOTALeaderboards_RegionLeaderboard

// optional uint32 division = 1;
inline bool CMsgDOTALeaderboards_RegionLeaderboard::_internal_has_division() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALeaderboards_RegionLeaderboard::has_division() const {
  return _internal_has_division();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::clear_division() {
  _impl_.division_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTALeaderboards_RegionLeaderboard::_internal_division() const {
  return _impl_.division_;
}
inline uint32_t CMsgDOTALeaderboards_RegionLeaderboard::division() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.RegionLeaderboard.division)
  return _internal_division();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::_internal_set_division(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.division_ = value;
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::set_division(uint32_t value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaderboards.RegionLeaderboard.division)
}

// repeated uint32 account_ids = 2;
inline int CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids_size() const {
  return _impl_.account_ids_.size();
}
inline int CMsgDOTALeaderboards_RegionLeaderboard::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::clear_account_ids() {
  _impl_.account_ids_.Clear();
}
inline uint32_t CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids(int index) const {
  return _impl_.account_ids_.Get(index);
}
inline uint32_t CMsgDOTALeaderboards_RegionLeaderboard::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::set_account_ids(int index, uint32_t value) {
  _impl_.account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::_internal_add_account_ids(uint32_t value) {
  _impl_.account_ids_.Add(value);
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::add_account_ids(uint32_t value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids() const {
  return _impl_.account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTALeaderboards_RegionLeaderboard::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALeaderboards_RegionLeaderboard::_internal_mutable_account_ids() {
  return &_impl_.account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTALeaderboards_RegionLeaderboard::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgDOTALeaderboards

// repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
inline int CMsgDOTALeaderboards::_internal_leaderboards_size() const {
  return _impl_.leaderboards_.size();
}
inline int CMsgDOTALeaderboards::leaderboards_size() const {
  return _internal_leaderboards_size();
}
inline void CMsgDOTALeaderboards::clear_leaderboards() {
  _impl_.leaderboards_.Clear();
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeaderboards.leaderboards)
  return _impl_.leaderboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >*
CMsgDOTALeaderboards::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeaderboards.leaderboards)
  return &_impl_.leaderboards_;
}
inline const ::CMsgDOTALeaderboards_RegionLeaderboard& CMsgDOTALeaderboards::_internal_leaderboards(int index) const {
  return _impl_.leaderboards_.Get(index);
}
inline const ::CMsgDOTALeaderboards_RegionLeaderboard& CMsgDOTALeaderboards::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.leaderboards)
  return _internal_leaderboards(index);
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::_internal_add_leaderboards() {
  return _impl_.leaderboards_.Add();
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::add_leaderboards() {
  ::CMsgDOTALeaderboards_RegionLeaderboard* _add = _internal_add_leaderboards();
  // @@protoc_insertion_point(field_add:CMsgDOTALeaderboards.leaderboards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >&
CMsgDOTALeaderboards::leaderboards() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeaderboards.leaderboards)
  return _impl_.leaderboards_;
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteTeamGuess

// optional uint32 league_id = 1;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.league_id)
}

// optional uint32 winner_id = 2;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_winner_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_winner_id() const {
  return _internal_has_winner_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_winner_id() {
  _impl_.winner_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::_internal_winner_id() const {
  return _impl_.winner_id_;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::winner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.winner_id)
  return _internal_winner_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_winner_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.winner_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_winner_id(uint32_t value) {
  _internal_set_winner_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.winner_id)
}

// optional uint32 runnerup_id = 3;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_runnerup_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_runnerup_id() const {
  return _internal_has_runnerup_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_runnerup_id() {
  _impl_.runnerup_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::_internal_runnerup_id() const {
  return _impl_.runnerup_id_;
}
inline uint32_t CMsgDOTAPassportVoteTeamGuess::runnerup_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
  return _internal_runnerup_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_runnerup_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.runnerup_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_runnerup_id(uint32_t value) {
  _internal_set_runnerup_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteGenericSelection

// optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
inline bool CMsgDOTAPassportVoteGenericSelection::_internal_has_selection_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection_index() const {
  return _internal_has_selection_index();
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection_index() {
  _impl_.selection_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::_internal_selection_index() const {
  return static_cast< ::DOTA_2013PassportSelectionIndices >(_impl_.selection_index_);
}
inline ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::selection_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection_index)
  return _internal_selection_index();
}
inline void CMsgDOTAPassportVoteGenericSelection::_internal_set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  assert(::DOTA_2013PassportSelectionIndices_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.selection_index_ = value;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  _internal_set_selection_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection_index)
}

// optional uint32 selection = 2;
inline bool CMsgDOTAPassportVoteGenericSelection::_internal_has_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection() const {
  return _internal_has_selection();
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection() {
  _impl_.selection_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAPassportVoteGenericSelection::_internal_selection() const {
  return _impl_.selection_;
}
inline uint32_t CMsgDOTAPassportVoteGenericSelection::selection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection)
  return _internal_selection();
}
inline void CMsgDOTAPassportVoteGenericSelection::_internal_set_selection(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.selection_ = value;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection(uint32_t value) {
  _internal_set_selection(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportStampedPlayer

// optional uint64 steam_id = 1;
inline bool CMsgDOTAPassportStampedPlayer::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportStampedPlayer::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAPassportStampedPlayer::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAPassportStampedPlayer::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgDOTAPassportStampedPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAPassportStampedPlayer::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steam_id_ = value;
}
inline void CMsgDOTAPassportStampedPlayer::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.steam_id)
}

// optional uint32 stamp_level = 2;
inline bool CMsgDOTAPassportStampedPlayer::_internal_has_stamp_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportStampedPlayer::has_stamp_level() const {
  return _internal_has_stamp_level();
}
inline void CMsgDOTAPassportStampedPlayer::clear_stamp_level() {
  _impl_.stamp_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAPassportStampedPlayer::_internal_stamp_level() const {
  return _impl_.stamp_level_;
}
inline uint32_t CMsgDOTAPassportStampedPlayer::stamp_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.stamp_level)
  return _internal_stamp_level();
}
inline void CMsgDOTAPassportStampedPlayer::_internal_set_stamp_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.stamp_level_ = value;
}
inline void CMsgDOTAPassportStampedPlayer::set_stamp_level(uint32_t value) {
  _internal_set_stamp_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.stamp_level)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportPlayerCardChallenge

// optional uint32 challenge_id = 1;
inline bool CMsgDOTAPassportPlayerCardChallenge::_internal_has_challenge_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportPlayerCardChallenge::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline void CMsgDOTAPassportPlayerCardChallenge::clear_challenge_id() {
  _impl_.challenge_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAPassportPlayerCardChallenge::_internal_challenge_id() const {
  return _impl_.challenge_id_;
}
inline uint32_t CMsgDOTAPassportPlayerCardChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
  return _internal_challenge_id();
}
inline void CMsgDOTAPassportPlayerCardChallenge::_internal_set_challenge_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenge_id_ = value;
}
inline void CMsgDOTAPassportPlayerCardChallenge::set_challenge_id(uint32_t value) {
  _internal_set_challenge_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVote

// repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
inline int CMsgDOTAPassportVote::_internal_team_votes_size() const {
  return _impl_.team_votes_.size();
}
inline int CMsgDOTAPassportVote::team_votes_size() const {
  return _internal_team_votes_size();
}
inline void CMsgDOTAPassportVote::clear_team_votes() {
  _impl_.team_votes_.Clear();
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::mutable_team_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.team_votes)
  return _impl_.team_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
CMsgDOTAPassportVote::mutable_team_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.team_votes)
  return &_impl_.team_votes_;
}
inline const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::_internal_team_votes(int index) const {
  return _impl_.team_votes_.Get(index);
}
inline const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::team_votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.team_votes)
  return _internal_team_votes(index);
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::_internal_add_team_votes() {
  return _impl_.team_votes_.Add();
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::add_team_votes() {
  ::CMsgDOTAPassportVoteTeamGuess* _add = _internal_add_team_votes();
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.team_votes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
CMsgDOTAPassportVote::team_votes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.team_votes)
  return _impl_.team_votes_;
}

// repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
inline int CMsgDOTAPassportVote::_internal_generic_selections_size() const {
  return _impl_.generic_selections_.size();
}
inline int CMsgDOTAPassportVote::generic_selections_size() const {
  return _internal_generic_selections_size();
}
inline void CMsgDOTAPassportVote::clear_generic_selections() {
  _impl_.generic_selections_.Clear();
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::mutable_generic_selections(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.generic_selections)
  return _impl_.generic_selections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
CMsgDOTAPassportVote::mutable_generic_selections() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.generic_selections)
  return &_impl_.generic_selections_;
}
inline const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::_internal_generic_selections(int index) const {
  return _impl_.generic_selections_.Get(index);
}
inline const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::generic_selections(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.generic_selections)
  return _internal_generic_selections(index);
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::_internal_add_generic_selections() {
  return _impl_.generic_selections_.Add();
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::add_generic_selections() {
  ::CMsgDOTAPassportVoteGenericSelection* _add = _internal_add_generic_selections();
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.generic_selections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
CMsgDOTAPassportVote::generic_selections() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.generic_selections)
  return _impl_.generic_selections_;
}

// repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
inline int CMsgDOTAPassportVote::_internal_stamped_players_size() const {
  return _impl_.stamped_players_.size();
}
inline int CMsgDOTAPassportVote::stamped_players_size() const {
  return _internal_stamped_players_size();
}
inline void CMsgDOTAPassportVote::clear_stamped_players() {
  _impl_.stamped_players_.Clear();
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::mutable_stamped_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.stamped_players)
  return _impl_.stamped_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
CMsgDOTAPassportVote::mutable_stamped_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.stamped_players)
  return &_impl_.stamped_players_;
}
inline const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::_internal_stamped_players(int index) const {
  return _impl_.stamped_players_.Get(index);
}
inline const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::stamped_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.stamped_players)
  return _internal_stamped_players(index);
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::_internal_add_stamped_players() {
  return _impl_.stamped_players_.Add();
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::add_stamped_players() {
  ::CMsgDOTAPassportStampedPlayer* _add = _internal_add_stamped_players();
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.stamped_players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
CMsgDOTAPassportVote::stamped_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.stamped_players)
  return _impl_.stamped_players_;
}

// repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
inline int CMsgDOTAPassportVote::_internal_player_card_challenges_size() const {
  return _impl_.player_card_challenges_.size();
}
inline int CMsgDOTAPassportVote::player_card_challenges_size() const {
  return _internal_player_card_challenges_size();
}
inline void CMsgDOTAPassportVote::clear_player_card_challenges() {
  _impl_.player_card_challenges_.Clear();
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::mutable_player_card_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.player_card_challenges)
  return _impl_.player_card_challenges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >*
CMsgDOTAPassportVote::mutable_player_card_challenges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.player_card_challenges)
  return &_impl_.player_card_challenges_;
}
inline const ::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::_internal_player_card_challenges(int index) const {
  return _impl_.player_card_challenges_.Get(index);
}
inline const ::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::player_card_challenges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.player_card_challenges)
  return _internal_player_card_challenges(index);
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::_internal_add_player_card_challenges() {
  return _impl_.player_card_challenges_.Add();
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::add_player_card_challenges() {
  ::CMsgDOTAPassportPlayerCardChallenge* _add = _internal_add_player_card_challenges();
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.player_card_challenges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >&
CMsgDOTAPassportVote::player_card_challenges() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.player_card_challenges)
  return _impl_.player_card_challenges_;
}

// -------------------------------------------------------------------

// CMsgClientToGCGetPlayerCardRosterRequest

// optional uint32 league_id = 1;
inline bool CMsgClientToGCGetPlayerCardRosterRequest::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterRequest::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCGetPlayerCardRosterRequest::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgClientToGCGetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterRequest.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterRequest.league_id)
}

// optional uint32 fantasy_period = 3 [default = 4294967295];
inline bool CMsgClientToGCGetPlayerCardRosterRequest::_internal_has_fantasy_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterRequest::has_fantasy_period() const {
  return _internal_has_fantasy_period();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::clear_fantasy_period() {
  _impl_.fantasy_period_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCGetPlayerCardRosterRequest::_internal_fantasy_period() const {
  return _impl_.fantasy_period_;
}
inline uint32_t CMsgClientToGCGetPlayerCardRosterRequest::fantasy_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterRequest.fantasy_period)
  return _internal_fantasy_period();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::_internal_set_fantasy_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fantasy_period_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::set_fantasy_period(uint32_t value) {
  _internal_set_fantasy_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterRequest.fantasy_period)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetPlayerCardRosterResponse

// optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::_internal_result() const {
  return static_cast< ::CMsgClientToGCGetPlayerCardRosterResponse_Result >(_impl_.result_);
}
inline ::CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.result)
  return _internal_result();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value) {
  assert(::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.result)
}

// repeated uint64 player_card_item_id = 2;
inline int CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id_size() const {
  return _impl_.player_card_item_id_.size();
}
inline int CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id_size() const {
  return _internal_player_card_item_id_size();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_player_card_item_id() {
  _impl_.player_card_item_id_.Clear();
}
inline uint64_t CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id(int index) const {
  return _impl_.player_card_item_id_.Get(index);
}
inline uint64_t CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_player_card_item_id(index);
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_player_card_item_id(int index, uint64_t value) {
  _impl_.player_card_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_add_player_card_item_id(uint64_t value) {
  _impl_.player_card_item_id_.Add(value);
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::add_player_card_item_id(uint64_t value) {
  _internal_add_player_card_item_id(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id() const {
  return _impl_.player_card_item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_player_card_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCGetPlayerCardRosterResponse::_internal_mutable_player_card_item_id() {
  return &_impl_.player_card_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCGetPlayerCardRosterResponse::mutable_player_card_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_mutable_player_card_item_id();
}

// optional float score = 3;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_score() const {
  return _internal_has_score();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::_internal_score() const {
  return _impl_.score_;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.score)
  return _internal_score();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.score)
}

// optional bool finalized = 4;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_finalized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_finalized() const {
  return _internal_has_finalized();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_finalized() {
  _impl_.finalized_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_finalized() const {
  return _impl_.finalized_;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::finalized() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.finalized)
  return _internal_finalized();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_finalized(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.finalized_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_finalized(bool value) {
  _internal_set_finalized(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.finalized)
}

// optional float percentile = 5;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_percentile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_percentile() const {
  return _internal_has_percentile();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_percentile() {
  _impl_.percentile_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::_internal_percentile() const {
  return _impl_.percentile_;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::percentile() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.percentile)
  return _internal_percentile();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_percentile(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.percentile_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_percentile(float value) {
  _internal_set_percentile(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.percentile)
}

// -------------------------------------------------------------------

// CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp

// optional uint32 league_id = 1;
inline bool CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.league_id)
}

// optional uint32 fantasy_period = 3 [default = 4294967295];
inline bool CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_has_fantasy_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::has_fantasy_period() const {
  return _internal_has_fantasy_period();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::clear_fantasy_period() {
  _impl_.fantasy_period_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_fantasy_period() const {
  return _impl_.fantasy_period_;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::fantasy_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.fantasy_period)
  return _internal_fantasy_period();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::_internal_set_fantasy_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fantasy_period_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp::set_fantasy_period(uint32_t value) {
  _internal_set_fantasy_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp.fantasy_period)
}

// -------------------------------------------------------------------

// CMsgClientToGCBatchGetPlayerCardRosterRequest

// repeated .CMsgClientToGCBatchGetPlayerCardRosterRequest.LeagueTimestamp league_timestamps = 1;
inline int CMsgClientToGCBatchGetPlayerCardRosterRequest::_internal_league_timestamps_size() const {
  return _impl_.league_timestamps_.size();
}
inline int CMsgClientToGCBatchGetPlayerCardRosterRequest::league_timestamps_size() const {
  return _internal_league_timestamps_size();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterRequest::clear_league_timestamps() {
  _impl_.league_timestamps_.Clear();
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* CMsgClientToGCBatchGetPlayerCardRosterRequest::mutable_league_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
  return _impl_.league_timestamps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >*
CMsgClientToGCBatchGetPlayerCardRosterRequest::mutable_league_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
  return &_impl_.league_timestamps_;
}
inline const ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& CMsgClientToGCBatchGetPlayerCardRosterRequest::_internal_league_timestamps(int index) const {
  return _impl_.league_timestamps_.Get(index);
}
inline const ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp& CMsgClientToGCBatchGetPlayerCardRosterRequest::league_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
  return _internal_league_timestamps(index);
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* CMsgClientToGCBatchGetPlayerCardRosterRequest::_internal_add_league_timestamps() {
  return _impl_.league_timestamps_.Add();
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* CMsgClientToGCBatchGetPlayerCardRosterRequest::add_league_timestamps() {
  ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp* _add = _internal_add_league_timestamps();
  // @@protoc_insertion_point(field_add:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterRequest_LeagueTimestamp >&
CMsgClientToGCBatchGetPlayerCardRosterRequest::league_timestamps() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCBatchGetPlayerCardRosterRequest.league_timestamps)
  return _impl_.league_timestamps_;
}

// -------------------------------------------------------------------

// CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse

// optional uint32 league_id = 1;
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.league_id)
}

// optional uint32 deprecated_timestamp = 2;
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_deprecated_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_deprecated_timestamp() const {
  return _internal_has_deprecated_timestamp();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_deprecated_timestamp() {
  _impl_.deprecated_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_deprecated_timestamp() const {
  return _impl_.deprecated_timestamp_;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::deprecated_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.deprecated_timestamp)
  return _internal_deprecated_timestamp();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_deprecated_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.deprecated_timestamp_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_deprecated_timestamp(uint32_t value) {
  _internal_set_deprecated_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.deprecated_timestamp)
}

// optional .CMsgClientToGCBatchGetPlayerCardRosterResponse.Result result = 3 [default = SUCCESS];
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_result() const {
  return static_cast< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result >(_impl_.result_);
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.result)
  return _internal_result();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_result(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result value) {
  assert(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_result(::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.result)
}

// repeated uint64 player_card_item_id = 4;
inline int CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_player_card_item_id_size() const {
  return _impl_.player_card_item_id_.size();
}
inline int CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::player_card_item_id_size() const {
  return _internal_player_card_item_id_size();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_player_card_item_id() {
  _impl_.player_card_item_id_.Clear();
}
inline uint64_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_player_card_item_id(int index) const {
  return _impl_.player_card_item_id_.Get(index);
}
inline uint64_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::player_card_item_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
  return _internal_player_card_item_id(index);
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_player_card_item_id(int index, uint64_t value) {
  _impl_.player_card_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_add_player_card_item_id(uint64_t value) {
  _impl_.player_card_item_id_.Add(value);
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::add_player_card_item_id(uint64_t value) {
  _internal_add_player_card_item_id(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_player_card_item_id() const {
  return _impl_.player_card_item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::player_card_item_id() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
  return _internal_player_card_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_mutable_player_card_item_id() {
  return &_impl_.player_card_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::mutable_player_card_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.player_card_item_id)
  return _internal_mutable_player_card_item_id();
}

// optional float score = 5;
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_score() const {
  return _internal_has_score();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_score() {
  _impl_.score_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_score() const {
  return _impl_.score_;
}
inline float CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.score)
  return _internal_score();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_score(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.score_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.score)
}

// optional bool finalized = 6;
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_finalized() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_finalized() const {
  return _internal_has_finalized();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_finalized() {
  _impl_.finalized_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_finalized() const {
  return _impl_.finalized_;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::finalized() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.finalized)
  return _internal_finalized();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_finalized(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.finalized_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_finalized(bool value) {
  _internal_set_finalized(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.finalized)
}

// optional float percentile = 7;
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_percentile() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_percentile() const {
  return _internal_has_percentile();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_percentile() {
  _impl_.percentile_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_percentile() const {
  return _impl_.percentile_;
}
inline float CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::percentile() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.percentile)
  return _internal_percentile();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_percentile(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.percentile_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_percentile(float value) {
  _internal_set_percentile(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.percentile)
}

// optional uint32 fantasy_period = 8 [default = 4294967295];
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_has_fantasy_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::has_fantasy_period() const {
  return _internal_has_fantasy_period();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::clear_fantasy_period() {
  _impl_.fantasy_period_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_fantasy_period() const {
  return _impl_.fantasy_period_;
}
inline uint32_t CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::fantasy_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.fantasy_period)
  return _internal_fantasy_period();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::_internal_set_fantasy_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.fantasy_period_ = value;
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse::set_fantasy_period(uint32_t value) {
  _internal_set_fantasy_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse.fantasy_period)
}

// -------------------------------------------------------------------

// CMsgClientToGCBatchGetPlayerCardRosterResponse

// repeated .CMsgClientToGCBatchGetPlayerCardRosterResponse.RosterResponse responses = 1;
inline int CMsgClientToGCBatchGetPlayerCardRosterResponse::_internal_responses_size() const {
  return _impl_.responses_.size();
}
inline int CMsgClientToGCBatchGetPlayerCardRosterResponse::responses_size() const {
  return _internal_responses_size();
}
inline void CMsgClientToGCBatchGetPlayerCardRosterResponse::clear_responses() {
  _impl_.responses_.Clear();
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* CMsgClientToGCBatchGetPlayerCardRosterResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
  return _impl_.responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >*
CMsgClientToGCBatchGetPlayerCardRosterResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
  return &_impl_.responses_;
}
inline const ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& CMsgClientToGCBatchGetPlayerCardRosterResponse::_internal_responses(int index) const {
  return _impl_.responses_.Get(index);
}
inline const ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse& CMsgClientToGCBatchGetPlayerCardRosterResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
  return _internal_responses(index);
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* CMsgClientToGCBatchGetPlayerCardRosterResponse::_internal_add_responses() {
  return _impl_.responses_.Add();
}
inline ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* CMsgClientToGCBatchGetPlayerCardRosterResponse::add_responses() {
  ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_RosterResponse >&
CMsgClientToGCBatchGetPlayerCardRosterResponse::responses() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCBatchGetPlayerCardRosterResponse.responses)
  return _impl_.responses_;
}

// -------------------------------------------------------------------

// CMsgClientToGCSetPlayerCardRosterRequest

// optional uint32 league_id = 1;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.league_id)
}

// optional uint32 deprecated_timestamp = 2;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_deprecated_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_deprecated_timestamp() const {
  return _internal_has_deprecated_timestamp();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_deprecated_timestamp() {
  _impl_.deprecated_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_deprecated_timestamp() const {
  return _impl_.deprecated_timestamp_;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::deprecated_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.deprecated_timestamp)
  return _internal_deprecated_timestamp();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_deprecated_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.deprecated_timestamp_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_deprecated_timestamp(uint32_t value) {
  _internal_set_deprecated_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.deprecated_timestamp)
}

// optional uint32 slot = 3;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_slot() const {
  return _internal_has_slot();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::slot() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.slot)
  return _internal_slot();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.slot_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.slot)
}

// optional uint64 player_card_item_id = 4;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_player_card_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_player_card_item_id() const {
  return _internal_has_player_card_item_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_player_card_item_id() {
  _impl_.player_card_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_player_card_item_id() const {
  return _impl_.player_card_item_id_;
}
inline uint64_t CMsgClientToGCSetPlayerCardRosterRequest::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
  return _internal_player_card_item_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_player_card_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_card_item_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_player_card_item_id(uint64_t value) {
  _internal_set_player_card_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
}

// optional uint32 event_id = 5;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.event_id)
  return _internal_event_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.event_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.event_id)
}

// optional uint32 fantasy_period = 6 [default = 4294967295];
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_fantasy_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_fantasy_period() const {
  return _internal_has_fantasy_period();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_fantasy_period() {
  _impl_.fantasy_period_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::_internal_fantasy_period() const {
  return _impl_.fantasy_period_;
}
inline uint32_t CMsgClientToGCSetPlayerCardRosterRequest::fantasy_period() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.fantasy_period)
  return _internal_fantasy_period();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_fantasy_period(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.fantasy_period_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_fantasy_period(uint32_t value) {
  _internal_set_fantasy_period(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.fantasy_period)
}

// -------------------------------------------------------------------

// CMsgClientToGCSetPlayerCardRosterResponse

// optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgClientToGCSetPlayerCardRosterResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::_internal_result() const {
  return static_cast< ::CMsgClientToGCSetPlayerCardRosterResponse_Result >(_impl_.result_);
}
inline ::CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterResponse.result)
  return _internal_result();
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::_internal_set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value) {
  assert(::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.result_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo

// optional uint32 league_id = 1;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_league_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_league_id() {
  _impl_.league_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_league_id() const {
  return _impl_.league_id_;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_league_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.league_id_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_id(uint32_t value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
}

// optional string league_name = 2;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_league_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_league_name() const {
  return _internal_has_league_name();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_league_name() {
  _impl_.league_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  return _internal_league_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.league_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::mutable_league_name() {
  std::string* _s = _internal_mutable_league_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  return _s;
}
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_league_name() const {
  return _impl_.league_name_.Get();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_league_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.league_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_mutable_league_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.league_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::release_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  if (!_internal_has_league_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.league_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.league_name_.IsDefault()) {
    _impl_.league_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_allocated_league_name(std::string* league_name) {
  if (league_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.league_name_.SetAllocated(league_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.league_name_.IsDefault()) {
    _impl_.league_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}

// optional uint32 start_timestamp = 3;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_start_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_timestamp_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_start_timestamp(uint32_t value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
}

// optional uint32 end_timestamp = 4;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_end_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_end_timestamp() {
  _impl_.end_timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_end_timestamp() const {
  return _impl_.end_timestamp_;
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_end_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_timestamp_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_end_timestamp(uint32_t value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
}

// repeated uint32 day_timestamps = 5;
inline int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps_size() const {
  return _impl_.day_timestamps_.size();
}
inline int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps_size() const {
  return _internal_day_timestamps_size();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_day_timestamps() {
  _impl_.day_timestamps_.Clear();
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps(int index) const {
  return _impl_.day_timestamps_.Get(index);
}
inline uint32_t CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_day_timestamps(index);
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_day_timestamps(int index, uint32_t value) {
  _impl_.day_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_add_day_timestamps(uint32_t value) {
  _impl_.day_timestamps_.Add(value);
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::add_day_timestamps(uint32_t value) {
  _internal_add_day_timestamps(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps() const {
  return _impl_.day_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_day_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_mutable_day_timestamps() {
  return &_impl_.day_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::mutable_day_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_mutable_day_timestamps();
}

// optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_status() const {
  return static_cast< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus >(_impl_.status_);
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
  return _internal_status();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value) {
  assert(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyDPCLeagueStatus

// repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
inline int CMsgDOTAFantasyDPCLeagueStatus::_internal_league_infos_size() const {
  return _impl_.league_infos_.size();
}
inline int CMsgDOTAFantasyDPCLeagueStatus::league_infos_size() const {
  return _internal_league_infos_size();
}
inline void CMsgDOTAFantasyDPCLeagueStatus::clear_league_infos() {
  _impl_.league_infos_.Clear();
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::mutable_league_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _impl_.league_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >*
CMsgDOTAFantasyDPCLeagueStatus::mutable_league_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return &_impl_.league_infos_;
}
inline const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& CMsgDOTAFantasyDPCLeagueStatus::_internal_league_infos(int index) const {
  return _impl_.league_infos_.Get(index);
}
inline const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& CMsgDOTAFantasyDPCLeagueStatus::league_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _internal_league_infos(index);
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::_internal_add_league_infos() {
  return _impl_.league_infos_.Add();
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::add_league_infos() {
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* _add = _internal_add_league_infos();
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >&
CMsgDOTAFantasyDPCLeagueStatus::league_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _impl_.league_infos_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_Player

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_Player::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTADPCSearchResults_Player::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgDOTADPCSearchResults_Player::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void CMsgDOTADPCSearchResults_Player::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_Player::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTADPCSearchResults_Player::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Player.name)
  return _s;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Player::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Player::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Player.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTADPCSearchResults_Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Player.name)
}

// optional string real_name = 3;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_real_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgDOTADPCSearchResults_Player::clear_real_name() {
  _impl_.real_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.real_name)
  return _internal_real_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTADPCSearchResults_Player::set_real_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.real_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.real_name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::mutable_real_name() {
  std::string* _s = _internal_mutable_real_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Player.real_name)
  return _s;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::_internal_real_name() const {
  return _impl_.real_name_.Get();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_real_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.real_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Player::_internal_mutable_real_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.real_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Player::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Player.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.real_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTADPCSearchResults_Player::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.real_name_.SetAllocated(real_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.real_name_.IsDefault()) {
    _impl_.real_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Player.real_name)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_Team

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_Team::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTADPCSearchResults_Team::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgDOTADPCSearchResults_Team::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void CMsgDOTADPCSearchResults_Team::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_Team::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTADPCSearchResults_Team::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.name)
}
inline std::string* CMsgDOTADPCSearchResults_Team::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Team.name)
  return _s;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Team::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Team::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Team.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTADPCSearchResults_Team::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Team.name)
}

// optional string url = 3;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_url() const {
  return _internal_has_url();
}
inline void CMsgDOTADPCSearchResults_Team::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTADPCSearchResults_Team::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.url)
}
inline std::string* CMsgDOTADPCSearchResults_Team::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Team.url)
  return _s;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::_internal_url() const {
  return _impl_.url_.Get();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Team::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_Team::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Team.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTADPCSearchResults_Team::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Team.url)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_League

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_League::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_League::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_League::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTADPCSearchResults_League::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t CMsgDOTADPCSearchResults_League::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.League.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_League::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void CMsgDOTADPCSearchResults_League::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.League.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_League::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_League::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_League::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_League::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.League.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTADPCSearchResults_League::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.League.name)
}
inline std::string* CMsgDOTADPCSearchResults_League::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.League.name)
  return _s;
}
inline const std::string& CMsgDOTADPCSearchResults_League::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CMsgDOTADPCSearchResults_League::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_League::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTADPCSearchResults_League::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.League.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTADPCSearchResults_League::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.League.name)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults

// repeated .CMsgDOTADPCSearchResults.Player players = 1;
inline int CMsgDOTADPCSearchResults::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTADPCSearchResults::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTADPCSearchResults::clear_players() {
  _impl_.players_.Clear();
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >*
CMsgDOTADPCSearchResults::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.players)
  return &_impl_.players_;
}
inline const ::CMsgDOTADPCSearchResults_Player& CMsgDOTADPCSearchResults::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_Player& CMsgDOTADPCSearchResults::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.players)
  return _internal_players(index);
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::add_players() {
  ::CMsgDOTADPCSearchResults_Player* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >&
CMsgDOTADPCSearchResults::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.players)
  return _impl_.players_;
}

// repeated .CMsgDOTADPCSearchResults.Team teams = 2;
inline int CMsgDOTADPCSearchResults::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgDOTADPCSearchResults::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTADPCSearchResults::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >*
CMsgDOTADPCSearchResults::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.teams)
  return &_impl_.teams_;
}
inline const ::CMsgDOTADPCSearchResults_Team& CMsgDOTADPCSearchResults::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_Team& CMsgDOTADPCSearchResults::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::add_teams() {
  ::CMsgDOTADPCSearchResults_Team* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >&
CMsgDOTADPCSearchResults::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.teams)
  return _impl_.teams_;
}

// repeated .CMsgDOTADPCSearchResults.League leagues = 3;
inline int CMsgDOTADPCSearchResults::_internal_leagues_size() const {
  return _impl_.leagues_.size();
}
inline int CMsgDOTADPCSearchResults::leagues_size() const {
  return _internal_leagues_size();
}
inline void CMsgDOTADPCSearchResults::clear_leagues() {
  _impl_.leagues_.Clear();
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.leagues)
  return _impl_.leagues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >*
CMsgDOTADPCSearchResults::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.leagues)
  return &_impl_.leagues_;
}
inline const ::CMsgDOTADPCSearchResults_League& CMsgDOTADPCSearchResults::_internal_leagues(int index) const {
  return _impl_.leagues_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_League& CMsgDOTADPCSearchResults::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.leagues)
  return _internal_leagues(index);
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::_internal_add_leagues() {
  return _impl_.leagues_.Add();
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::add_leagues() {
  ::CMsgDOTADPCSearchResults_League* _add = _internal_add_leagues();
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.leagues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >&
CMsgDOTADPCSearchResults::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.leagues)
  return _impl_.leagues_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCTeamFavoriteRankings_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTADPCTeamFavoriteRankings_Team::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTADPCTeamFavoriteRankings_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
  return _internal_team_id();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
}

// optional uint32 favorites = 2;
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::_internal_has_favorites() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::has_favorites() const {
  return _internal_has_favorites();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::clear_favorites() {
  _impl_.favorites_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTADPCTeamFavoriteRankings_Team::_internal_favorites() const {
  return _impl_.favorites_;
}
inline uint32_t CMsgDOTADPCTeamFavoriteRankings_Team::favorites() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
  return _internal_favorites();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::_internal_set_favorites(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.favorites_ = value;
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::set_favorites(uint32_t value) {
  _internal_set_favorites(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
}

// -------------------------------------------------------------------

// CMsgDOTADPCTeamFavoriteRankings

// repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
inline int CMsgDOTADPCTeamFavoriteRankings::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgDOTADPCTeamFavoriteRankings::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTADPCTeamFavoriteRankings::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >*
CMsgDOTADPCTeamFavoriteRankings::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCTeamFavoriteRankings.teams)
  return &_impl_.teams_;
}
inline const ::CMsgDOTADPCTeamFavoriteRankings_Team& CMsgDOTADPCTeamFavoriteRankings::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgDOTADPCTeamFavoriteRankings_Team& CMsgDOTADPCTeamFavoriteRankings::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::add_teams() {
  ::CMsgDOTADPCTeamFavoriteRankings_Team* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >&
CMsgDOTADPCTeamFavoriteRankings::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _impl_.teams_;
}

// -------------------------------------------------------------------

// CMsgDotaFantasyCraftingUserData_Gem

// optional .Fantasy_Gem_Type type = 1 [default = FANTASY_GEM_TYPE_RUBY];
inline bool CMsgDotaFantasyCraftingUserData_Gem::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Gem::has_type() const {
  return _internal_has_type();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Fantasy_Gem_Type CMsgDotaFantasyCraftingUserData_Gem::_internal_type() const {
  return static_cast< ::Fantasy_Gem_Type >(_impl_.type_);
}
inline ::Fantasy_Gem_Type CMsgDotaFantasyCraftingUserData_Gem::type() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Gem.type)
  return _internal_type();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::_internal_set_type(::Fantasy_Gem_Type value) {
  assert(::Fantasy_Gem_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Gem::set_type(::Fantasy_Gem_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Gem.type)
}

// optional uint32 slot = 2;
inline bool CMsgDotaFantasyCraftingUserData_Gem::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Gem::has_slot() const {
  return _internal_has_slot();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::clear_slot() {
  _impl_.slot_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::_internal_slot() const {
  return _impl_.slot_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::slot() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Gem.slot)
  return _internal_slot();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::_internal_set_slot(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Gem::set_slot(uint32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Gem.slot)
}

// optional uint32 shape = 3;
inline bool CMsgDotaFantasyCraftingUserData_Gem::_internal_has_shape() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Gem::has_shape() const {
  return _internal_has_shape();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::clear_shape() {
  _impl_.shape_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::_internal_shape() const {
  return _impl_.shape_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::shape() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Gem.shape)
  return _internal_shape();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::_internal_set_shape(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.shape_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Gem::set_shape(uint32_t value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Gem.shape)
}

// optional uint32 quality = 4;
inline bool CMsgDotaFantasyCraftingUserData_Gem::_internal_has_quality() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Gem::has_quality() const {
  return _internal_has_quality();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::clear_quality() {
  _impl_.quality_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::_internal_quality() const {
  return _impl_.quality_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Gem::quality() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Gem.quality)
  return _internal_quality();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::_internal_set_quality(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.quality_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Gem::set_quality(uint32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Gem.quality)
}

// optional .Fantasy_Scoring stat = 5 [default = FANTASY_SCORING_KILLS];
inline bool CMsgDotaFantasyCraftingUserData_Gem::_internal_has_stat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Gem::has_stat() const {
  return _internal_has_stat();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::clear_stat() {
  _impl_.stat_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::Fantasy_Scoring CMsgDotaFantasyCraftingUserData_Gem::_internal_stat() const {
  return static_cast< ::Fantasy_Scoring >(_impl_.stat_);
}
inline ::Fantasy_Scoring CMsgDotaFantasyCraftingUserData_Gem::stat() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Gem.stat)
  return _internal_stat();
}
inline void CMsgDotaFantasyCraftingUserData_Gem::_internal_set_stat(::Fantasy_Scoring value) {
  assert(::Fantasy_Scoring_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.stat_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Gem::set_stat(::Fantasy_Scoring value) {
  _internal_set_stat(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Gem.stat)
}

// -------------------------------------------------------------------

// CMsgDotaFantasyCraftingUserData_Tablet

// optional uint32 tablet_id = 1;
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_tablet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_tablet_id() const {
  return _internal_has_tablet_id();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_tablet_id() {
  _impl_.tablet_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::_internal_tablet_id() const {
  return _impl_.tablet_id_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::tablet_id() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.tablet_id)
  return _internal_tablet_id();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_tablet_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tablet_id_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_tablet_id(uint32_t value) {
  _internal_set_tablet_id(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.tablet_id)
}

// optional uint32 tablet_level = 2;
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_tablet_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_tablet_level() const {
  return _internal_has_tablet_level();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_tablet_level() {
  _impl_.tablet_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::_internal_tablet_level() const {
  return _impl_.tablet_level_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::tablet_level() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.tablet_level)
  return _internal_tablet_level();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_tablet_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tablet_level_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_tablet_level(uint32_t value) {
  _internal_set_tablet_level(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.tablet_level)
}

// optional .Fantasy_Roles fantasy_role = 3 [default = FANTASY_ROLE_UNDEFINED];
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_fantasy_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_fantasy_role() const {
  return _internal_has_fantasy_role();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_fantasy_role() {
  _impl_.fantasy_role_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::Fantasy_Roles CMsgDotaFantasyCraftingUserData_Tablet::_internal_fantasy_role() const {
  return static_cast< ::Fantasy_Roles >(_impl_.fantasy_role_);
}
inline ::Fantasy_Roles CMsgDotaFantasyCraftingUserData_Tablet::fantasy_role() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.fantasy_role)
  return _internal_fantasy_role();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_fantasy_role(::Fantasy_Roles value) {
  assert(::Fantasy_Roles_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fantasy_role_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_fantasy_role(::Fantasy_Roles value) {
  _internal_set_fantasy_role(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.fantasy_role)
}

// optional uint32 account_id = 4;
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.account_id)
  return _internal_account_id();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.account_id_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.account_id)
}

// optional uint32 prefix = 5;
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_prefix() const {
  return _internal_has_prefix();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_prefix() {
  _impl_.prefix_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::_internal_prefix() const {
  return _impl_.prefix_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::prefix() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.prefix)
  return _internal_prefix();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_prefix(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.prefix_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_prefix(uint32_t value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.prefix)
}

// optional uint32 suffix = 6;
inline bool CMsgDotaFantasyCraftingUserData_Tablet::_internal_has_suffix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData_Tablet::has_suffix() const {
  return _internal_has_suffix();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_suffix() {
  _impl_.suffix_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::_internal_suffix() const {
  return _impl_.suffix_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData_Tablet::suffix() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.suffix)
  return _internal_suffix();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::_internal_set_suffix(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.suffix_ = value;
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::set_suffix(uint32_t value) {
  _internal_set_suffix(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.Tablet.suffix)
}

// repeated .CMsgDotaFantasyCraftingUserData.Gem gems = 7;
inline int CMsgDotaFantasyCraftingUserData_Tablet::_internal_gems_size() const {
  return _impl_.gems_.size();
}
inline int CMsgDotaFantasyCraftingUserData_Tablet::gems_size() const {
  return _internal_gems_size();
}
inline void CMsgDotaFantasyCraftingUserData_Tablet::clear_gems() {
  _impl_.gems_.Clear();
}
inline ::CMsgDotaFantasyCraftingUserData_Gem* CMsgDotaFantasyCraftingUserData_Tablet::mutable_gems(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDotaFantasyCraftingUserData.Tablet.gems)
  return _impl_.gems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Gem >*
CMsgDotaFantasyCraftingUserData_Tablet::mutable_gems() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDotaFantasyCraftingUserData.Tablet.gems)
  return &_impl_.gems_;
}
inline const ::CMsgDotaFantasyCraftingUserData_Gem& CMsgDotaFantasyCraftingUserData_Tablet::_internal_gems(int index) const {
  return _impl_.gems_.Get(index);
}
inline const ::CMsgDotaFantasyCraftingUserData_Gem& CMsgDotaFantasyCraftingUserData_Tablet::gems(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.Tablet.gems)
  return _internal_gems(index);
}
inline ::CMsgDotaFantasyCraftingUserData_Gem* CMsgDotaFantasyCraftingUserData_Tablet::_internal_add_gems() {
  return _impl_.gems_.Add();
}
inline ::CMsgDotaFantasyCraftingUserData_Gem* CMsgDotaFantasyCraftingUserData_Tablet::add_gems() {
  ::CMsgDotaFantasyCraftingUserData_Gem* _add = _internal_add_gems();
  // @@protoc_insertion_point(field_add:CMsgDotaFantasyCraftingUserData.Tablet.gems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Gem >&
CMsgDotaFantasyCraftingUserData_Tablet::gems() const {
  // @@protoc_insertion_point(field_list:CMsgDotaFantasyCraftingUserData.Tablet.gems)
  return _impl_.gems_;
}

// -------------------------------------------------------------------

// CMsgDotaFantasyCraftingUserData

// repeated .CMsgDotaFantasyCraftingUserData.Tablet tablets = 1;
inline int CMsgDotaFantasyCraftingUserData::_internal_tablets_size() const {
  return _impl_.tablets_.size();
}
inline int CMsgDotaFantasyCraftingUserData::tablets_size() const {
  return _internal_tablets_size();
}
inline void CMsgDotaFantasyCraftingUserData::clear_tablets() {
  _impl_.tablets_.Clear();
}
inline ::CMsgDotaFantasyCraftingUserData_Tablet* CMsgDotaFantasyCraftingUserData::mutable_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDotaFantasyCraftingUserData.tablets)
  return _impl_.tablets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Tablet >*
CMsgDotaFantasyCraftingUserData::mutable_tablets() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDotaFantasyCraftingUserData.tablets)
  return &_impl_.tablets_;
}
inline const ::CMsgDotaFantasyCraftingUserData_Tablet& CMsgDotaFantasyCraftingUserData::_internal_tablets(int index) const {
  return _impl_.tablets_.Get(index);
}
inline const ::CMsgDotaFantasyCraftingUserData_Tablet& CMsgDotaFantasyCraftingUserData::tablets(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.tablets)
  return _internal_tablets(index);
}
inline ::CMsgDotaFantasyCraftingUserData_Tablet* CMsgDotaFantasyCraftingUserData::_internal_add_tablets() {
  return _impl_.tablets_.Add();
}
inline ::CMsgDotaFantasyCraftingUserData_Tablet* CMsgDotaFantasyCraftingUserData::add_tablets() {
  ::CMsgDotaFantasyCraftingUserData_Tablet* _add = _internal_add_tablets();
  // @@protoc_insertion_point(field_add:CMsgDotaFantasyCraftingUserData.tablets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDotaFantasyCraftingUserData_Tablet >&
CMsgDotaFantasyCraftingUserData::tablets() const {
  // @@protoc_insertion_point(field_list:CMsgDotaFantasyCraftingUserData.tablets)
  return _impl_.tablets_;
}

// repeated uint32 available_rolls = 2;
inline int CMsgDotaFantasyCraftingUserData::_internal_available_rolls_size() const {
  return _impl_.available_rolls_.size();
}
inline int CMsgDotaFantasyCraftingUserData::available_rolls_size() const {
  return _internal_available_rolls_size();
}
inline void CMsgDotaFantasyCraftingUserData::clear_available_rolls() {
  _impl_.available_rolls_.Clear();
}
inline uint32_t CMsgDotaFantasyCraftingUserData::_internal_available_rolls(int index) const {
  return _impl_.available_rolls_.Get(index);
}
inline uint32_t CMsgDotaFantasyCraftingUserData::available_rolls(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.available_rolls)
  return _internal_available_rolls(index);
}
inline void CMsgDotaFantasyCraftingUserData::set_available_rolls(int index, uint32_t value) {
  _impl_.available_rolls_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.available_rolls)
}
inline void CMsgDotaFantasyCraftingUserData::_internal_add_available_rolls(uint32_t value) {
  _impl_.available_rolls_.Add(value);
}
inline void CMsgDotaFantasyCraftingUserData::add_available_rolls(uint32_t value) {
  _internal_add_available_rolls(value);
  // @@protoc_insertion_point(field_add:CMsgDotaFantasyCraftingUserData.available_rolls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDotaFantasyCraftingUserData::_internal_available_rolls() const {
  return _impl_.available_rolls_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDotaFantasyCraftingUserData::available_rolls() const {
  // @@protoc_insertion_point(field_list:CMsgDotaFantasyCraftingUserData.available_rolls)
  return _internal_available_rolls();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDotaFantasyCraftingUserData::_internal_mutable_available_rolls() {
  return &_impl_.available_rolls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDotaFantasyCraftingUserData::mutable_available_rolls() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDotaFantasyCraftingUserData.available_rolls)
  return _internal_mutable_available_rolls();
}

// optional uint32 roll_tokens = 3;
inline bool CMsgDotaFantasyCraftingUserData::_internal_has_roll_tokens() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDotaFantasyCraftingUserData::has_roll_tokens() const {
  return _internal_has_roll_tokens();
}
inline void CMsgDotaFantasyCraftingUserData::clear_roll_tokens() {
  _impl_.roll_tokens_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDotaFantasyCraftingUserData::_internal_roll_tokens() const {
  return _impl_.roll_tokens_;
}
inline uint32_t CMsgDotaFantasyCraftingUserData::roll_tokens() const {
  // @@protoc_insertion_point(field_get:CMsgDotaFantasyCraftingUserData.roll_tokens)
  return _internal_roll_tokens();
}
inline void CMsgDotaFantasyCraftingUserData::_internal_set_roll_tokens(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roll_tokens_ = value;
}
inline void CMsgDotaFantasyCraftingUserData::set_roll_tokens(uint32_t value) {
  _internal_set_roll_tokens(value);
  // @@protoc_insertion_point(field_set:CMsgDotaFantasyCraftingUserData.roll_tokens)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingGetUserData

// optional uint32 fantasy_league = 1;
inline bool CMsgClientToGCFantasyCraftingGetUserData::_internal_has_fantasy_league() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingGetUserData::has_fantasy_league() const {
  return _internal_has_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingGetUserData::clear_fantasy_league() {
  _impl_.fantasy_league_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFantasyCraftingGetUserData::_internal_fantasy_league() const {
  return _impl_.fantasy_league_;
}
inline uint32_t CMsgClientToGCFantasyCraftingGetUserData::fantasy_league() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingGetUserData.fantasy_league)
  return _internal_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingGetUserData::_internal_set_fantasy_league(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fantasy_league_ = value;
}
inline void CMsgClientToGCFantasyCraftingGetUserData::set_fantasy_league(uint32_t value) {
  _internal_set_fantasy_league(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingGetUserData.fantasy_league)
}

// optional uint32 account_id = 2;
inline bool CMsgClientToGCFantasyCraftingGetUserData::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingGetUserData::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgClientToGCFantasyCraftingGetUserData::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCFantasyCraftingGetUserData::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgClientToGCFantasyCraftingGetUserData::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingGetUserData.account_id)
  return _internal_account_id();
}
inline void CMsgClientToGCFantasyCraftingGetUserData::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgClientToGCFantasyCraftingGetUserData::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingGetUserData.account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingGetUserDataResponse

// optional .CMsgClientToGCFantasyCraftingGetUserDataResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingGetUserDataResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse CMsgClientToGCFantasyCraftingGetUserDataResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingGetUserDataResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_set_response(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse value) {
  assert(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::set_response(::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingGetUserDataResponse.response)
}

// optional .CMsgDotaFantasyCraftingUserData user_data = 2;
inline bool CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_has_user_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_data_ != nullptr);
  return value;
}
inline bool CMsgClientToGCFantasyCraftingGetUserDataResponse::has_user_data() const {
  return _internal_has_user_data();
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::clear_user_data() {
  if (_impl_.user_data_ != nullptr) _impl_.user_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDotaFantasyCraftingUserData& CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_user_data() const {
  const ::CMsgDotaFantasyCraftingUserData* p = _impl_.user_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDotaFantasyCraftingUserData&>(
      ::_CMsgDotaFantasyCraftingUserData_default_instance_);
}
inline const ::CMsgDotaFantasyCraftingUserData& CMsgClientToGCFantasyCraftingGetUserDataResponse::user_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingGetUserDataResponse.user_data)
  return _internal_user_data();
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::unsafe_arena_set_allocated_user_data(
    ::CMsgDotaFantasyCraftingUserData* user_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_data_);
  }
  _impl_.user_data_ = user_data;
  if (user_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgClientToGCFantasyCraftingGetUserDataResponse.user_data)
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgClientToGCFantasyCraftingGetUserDataResponse::release_user_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDotaFantasyCraftingUserData* temp = _impl_.user_data_;
  _impl_.user_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgClientToGCFantasyCraftingGetUserDataResponse::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCFantasyCraftingGetUserDataResponse.user_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDotaFantasyCraftingUserData* temp = _impl_.user_data_;
  _impl_.user_data_ = nullptr;
  return temp;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgClientToGCFantasyCraftingGetUserDataResponse::_internal_mutable_user_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDotaFantasyCraftingUserData>(GetArenaForAllocation());
    _impl_.user_data_ = p;
  }
  return _impl_.user_data_;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgClientToGCFantasyCraftingGetUserDataResponse::mutable_user_data() {
  ::CMsgDotaFantasyCraftingUserData* _msg = _internal_mutable_user_data();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCFantasyCraftingGetUserDataResponse.user_data)
  return _msg;
}
inline void CMsgClientToGCFantasyCraftingGetUserDataResponse::set_allocated_user_data(::CMsgDotaFantasyCraftingUserData* user_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_data_;
  }
  if (user_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_data);
    if (message_arena != submessage_arena) {
      user_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_data_ = user_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCFantasyCraftingGetUserDataResponse.user_data)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingPerformOperation

// optional uint32 fantasy_league = 1;
inline bool CMsgClientToGCFantasyCraftingPerformOperation::_internal_has_fantasy_league() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperation::has_fantasy_league() const {
  return _internal_has_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::clear_fantasy_league() {
  _impl_.fantasy_league_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::_internal_fantasy_league() const {
  return _impl_.fantasy_league_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::fantasy_league() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperation.fantasy_league)
  return _internal_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::_internal_set_fantasy_league(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fantasy_league_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::set_fantasy_league(uint32_t value) {
  _internal_set_fantasy_league(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperation.fantasy_league)
}

// optional uint32 tablet_id = 2;
inline bool CMsgClientToGCFantasyCraftingPerformOperation::_internal_has_tablet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperation::has_tablet_id() const {
  return _internal_has_tablet_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::clear_tablet_id() {
  _impl_.tablet_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::_internal_tablet_id() const {
  return _impl_.tablet_id_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::tablet_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperation.tablet_id)
  return _internal_tablet_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::_internal_set_tablet_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tablet_id_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::set_tablet_id(uint32_t value) {
  _internal_set_tablet_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperation.tablet_id)
}

// optional uint32 operation_id = 3;
inline bool CMsgClientToGCFantasyCraftingPerformOperation::_internal_has_operation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperation::has_operation_id() const {
  return _internal_has_operation_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::clear_operation_id() {
  _impl_.operation_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::_internal_operation_id() const {
  return _impl_.operation_id_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperation::operation_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperation.operation_id)
  return _internal_operation_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::_internal_set_operation_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.operation_id_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::set_operation_id(uint32_t value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperation.operation_id)
}

// optional uint64 extra_data = 4;
inline bool CMsgClientToGCFantasyCraftingPerformOperation::_internal_has_extra_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperation::has_extra_data() const {
  return _internal_has_extra_data();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::clear_extra_data() {
  _impl_.extra_data_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgClientToGCFantasyCraftingPerformOperation::_internal_extra_data() const {
  return _impl_.extra_data_;
}
inline uint64_t CMsgClientToGCFantasyCraftingPerformOperation::extra_data() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperation.extra_data)
  return _internal_extra_data();
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::_internal_set_extra_data(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.extra_data_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperation::set_extra_data(uint64_t value) {
  _internal_set_extra_data(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperation.extra_data)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice

// optional uint32 prefix_choice = 1;
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_has_prefix_choice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::has_prefix_choice() const {
  return _internal_has_prefix_choice();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::clear_prefix_choice() {
  _impl_.prefix_choice_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_prefix_choice() const {
  return _impl_.prefix_choice_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::prefix_choice() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.prefix_choice)
  return _internal_prefix_choice();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_set_prefix_choice(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.prefix_choice_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::set_prefix_choice(uint32_t value) {
  _internal_set_prefix_choice(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.prefix_choice)
}

// optional uint32 suffix_choice = 2;
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_has_suffix_choice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::has_suffix_choice() const {
  return _internal_has_suffix_choice();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::clear_suffix_choice() {
  _impl_.suffix_choice_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_suffix_choice() const {
  return _impl_.suffix_choice_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::suffix_choice() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.suffix_choice)
  return _internal_suffix_choice();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::_internal_set_suffix_choice(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.suffix_choice_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice::set_suffix_choice(uint32_t value) {
  _internal_set_suffix_choice(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice.suffix_choice)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingPerformOperationResponse

// optional .CMsgClientToGCFantasyCraftingPerformOperationResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse CMsgClientToGCFantasyCraftingPerformOperationResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_set_response(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse value) {
  assert(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::set_response(::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.response)
}

// optional uint32 operation_id = 2;
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_has_operation_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingPerformOperationResponse::has_operation_id() const {
  return _internal_has_operation_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_operation_id() {
  _impl_.operation_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_operation_id() const {
  return _impl_.operation_id_;
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::operation_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.operation_id)
  return _internal_operation_id();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_set_operation_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.operation_id_ = value;
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::set_operation_id(uint32_t value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.operation_id)
}

// repeated uint32 player_choices = 3;
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_player_choices_size() const {
  return _impl_.player_choices_.size();
}
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::player_choices_size() const {
  return _internal_player_choices_size();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_player_choices() {
  _impl_.player_choices_.Clear();
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_player_choices(int index) const {
  return _impl_.player_choices_.Get(index);
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::player_choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
  return _internal_player_choices(index);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::set_player_choices(int index, uint32_t value) {
  _impl_.player_choices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_add_player_choices(uint32_t value) {
  _impl_.player_choices_.Add(value);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::add_player_choices(uint32_t value) {
  _internal_add_player_choices(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_player_choices() const {
  return _impl_.player_choices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::player_choices() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
  return _internal_player_choices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_mutable_player_choices() {
  return &_impl_.player_choices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::mutable_player_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.player_choices)
  return _internal_mutable_player_choices();
}

// repeated uint32 prefix_choices = 4;
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_prefix_choices_size() const {
  return _impl_.prefix_choices_.size();
}
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::prefix_choices_size() const {
  return _internal_prefix_choices_size();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_prefix_choices() {
  _impl_.prefix_choices_.Clear();
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_prefix_choices(int index) const {
  return _impl_.prefix_choices_.Get(index);
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::prefix_choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
  return _internal_prefix_choices(index);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::set_prefix_choices(int index, uint32_t value) {
  _impl_.prefix_choices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_add_prefix_choices(uint32_t value) {
  _impl_.prefix_choices_.Add(value);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::add_prefix_choices(uint32_t value) {
  _internal_add_prefix_choices(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_prefix_choices() const {
  return _impl_.prefix_choices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::prefix_choices() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
  return _internal_prefix_choices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_mutable_prefix_choices() {
  return &_impl_.prefix_choices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::mutable_prefix_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.prefix_choices)
  return _internal_mutable_prefix_choices();
}

// repeated uint32 suffix_choices = 5;
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_suffix_choices_size() const {
  return _impl_.suffix_choices_.size();
}
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::suffix_choices_size() const {
  return _internal_suffix_choices_size();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_suffix_choices() {
  _impl_.suffix_choices_.Clear();
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_suffix_choices(int index) const {
  return _impl_.suffix_choices_.Get(index);
}
inline uint32_t CMsgClientToGCFantasyCraftingPerformOperationResponse::suffix_choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
  return _internal_suffix_choices(index);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::set_suffix_choices(int index, uint32_t value) {
  _impl_.suffix_choices_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_add_suffix_choices(uint32_t value) {
  _impl_.suffix_choices_.Add(value);
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::add_suffix_choices(uint32_t value) {
  _internal_add_suffix_choices(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_suffix_choices() const {
  return _impl_.suffix_choices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::suffix_choices() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
  return _internal_suffix_choices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_mutable_suffix_choices() {
  return &_impl_.suffix_choices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::mutable_suffix_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.suffix_choices)
  return _internal_mutable_suffix_choices();
}

// repeated .CMsgClientToGCFantasyCraftingPerformOperationResponse.TitleChoice title_choices = 6;
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_title_choices_size() const {
  return _impl_.title_choices_.size();
}
inline int CMsgClientToGCFantasyCraftingPerformOperationResponse::title_choices_size() const {
  return _internal_title_choices_size();
}
inline void CMsgClientToGCFantasyCraftingPerformOperationResponse::clear_title_choices() {
  _impl_.title_choices_.Clear();
}
inline ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* CMsgClientToGCFantasyCraftingPerformOperationResponse::mutable_title_choices(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
  return _impl_.title_choices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >*
CMsgClientToGCFantasyCraftingPerformOperationResponse::mutable_title_choices() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
  return &_impl_.title_choices_;
}
inline const ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_title_choices(int index) const {
  return _impl_.title_choices_.Get(index);
}
inline const ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice& CMsgClientToGCFantasyCraftingPerformOperationResponse::title_choices(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
  return _internal_title_choices(index);
}
inline ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* CMsgClientToGCFantasyCraftingPerformOperationResponse::_internal_add_title_choices() {
  return _impl_.title_choices_.Add();
}
inline ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* CMsgClientToGCFantasyCraftingPerformOperationResponse::add_title_choices() {
  ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice* _add = _internal_add_title_choices();
  // @@protoc_insertion_point(field_add:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_TitleChoice >&
CMsgClientToGCFantasyCraftingPerformOperationResponse::title_choices() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCFantasyCraftingPerformOperationResponse.title_choices)
  return _impl_.title_choices_;
}

// -------------------------------------------------------------------

// CMsgGCToClientFantasyCraftingDataUpdated

// optional uint32 fantasy_league = 1;
inline bool CMsgGCToClientFantasyCraftingDataUpdated::_internal_has_fantasy_league() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientFantasyCraftingDataUpdated::has_fantasy_league() const {
  return _internal_has_fantasy_league();
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::clear_fantasy_league() {
  _impl_.fantasy_league_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCToClientFantasyCraftingDataUpdated::_internal_fantasy_league() const {
  return _impl_.fantasy_league_;
}
inline uint32_t CMsgGCToClientFantasyCraftingDataUpdated::fantasy_league() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFantasyCraftingDataUpdated.fantasy_league)
  return _internal_fantasy_league();
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::_internal_set_fantasy_league(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fantasy_league_ = value;
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::set_fantasy_league(uint32_t value) {
  _internal_set_fantasy_league(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientFantasyCraftingDataUpdated.fantasy_league)
}

// optional .CMsgDotaFantasyCraftingUserData user_data = 2;
inline bool CMsgGCToClientFantasyCraftingDataUpdated::_internal_has_user_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_data_ != nullptr);
  return value;
}
inline bool CMsgGCToClientFantasyCraftingDataUpdated::has_user_data() const {
  return _internal_has_user_data();
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::clear_user_data() {
  if (_impl_.user_data_ != nullptr) _impl_.user_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDotaFantasyCraftingUserData& CMsgGCToClientFantasyCraftingDataUpdated::_internal_user_data() const {
  const ::CMsgDotaFantasyCraftingUserData* p = _impl_.user_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDotaFantasyCraftingUserData&>(
      ::_CMsgDotaFantasyCraftingUserData_default_instance_);
}
inline const ::CMsgDotaFantasyCraftingUserData& CMsgGCToClientFantasyCraftingDataUpdated::user_data() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
  return _internal_user_data();
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::unsafe_arena_set_allocated_user_data(
    ::CMsgDotaFantasyCraftingUserData* user_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_data_);
  }
  _impl_.user_data_ = user_data;
  if (user_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgGCToClientFantasyCraftingDataUpdated::release_user_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDotaFantasyCraftingUserData* temp = _impl_.user_data_;
  _impl_.user_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgGCToClientFantasyCraftingDataUpdated::unsafe_arena_release_user_data() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgDotaFantasyCraftingUserData* temp = _impl_.user_data_;
  _impl_.user_data_ = nullptr;
  return temp;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgGCToClientFantasyCraftingDataUpdated::_internal_mutable_user_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDotaFantasyCraftingUserData>(GetArenaForAllocation());
    _impl_.user_data_ = p;
  }
  return _impl_.user_data_;
}
inline ::CMsgDotaFantasyCraftingUserData* CMsgGCToClientFantasyCraftingDataUpdated::mutable_user_data() {
  ::CMsgDotaFantasyCraftingUserData* _msg = _internal_mutable_user_data();
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
  return _msg;
}
inline void CMsgGCToClientFantasyCraftingDataUpdated::set_allocated_user_data(::CMsgDotaFantasyCraftingUserData* user_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_data_;
  }
  if (user_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_data);
    if (message_arena != submessage_arena) {
      user_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_data_ = user_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientFantasyCraftingDataUpdated.user_data)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingDevModifyTablet

// optional uint32 fantasy_league = 1;
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_has_fantasy_league() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::has_fantasy_league() const {
  return _internal_has_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::clear_fantasy_league() {
  _impl_.fantasy_league_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_fantasy_league() const {
  return _impl_.fantasy_league_;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::fantasy_league() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingDevModifyTablet.fantasy_league)
  return _internal_fantasy_league();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_set_fantasy_league(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fantasy_league_ = value;
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::set_fantasy_league(uint32_t value) {
  _internal_set_fantasy_league(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingDevModifyTablet.fantasy_league)
}

// optional bool reset_tablet = 2;
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_has_reset_tablet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::has_reset_tablet() const {
  return _internal_has_reset_tablet();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::clear_reset_tablet() {
  _impl_.reset_tablet_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_reset_tablet() const {
  return _impl_.reset_tablet_;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::reset_tablet() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingDevModifyTablet.reset_tablet)
  return _internal_reset_tablet();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_set_reset_tablet(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reset_tablet_ = value;
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::set_reset_tablet(bool value) {
  _internal_set_reset_tablet(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingDevModifyTablet.reset_tablet)
}

// optional uint32 modify_tokens = 3;
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_has_modify_tokens() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::has_modify_tokens() const {
  return _internal_has_modify_tokens();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::clear_modify_tokens() {
  _impl_.modify_tokens_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_modify_tokens() const {
  return _impl_.modify_tokens_;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::modify_tokens() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingDevModifyTablet.modify_tokens)
  return _internal_modify_tokens();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_set_modify_tokens(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.modify_tokens_ = value;
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::set_modify_tokens(uint32_t value) {
  _internal_set_modify_tokens(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingDevModifyTablet.modify_tokens)
}

// optional uint32 tablet_level = 4;
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_has_tablet_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTablet::has_tablet_level() const {
  return _internal_has_tablet_level();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::clear_tablet_level() {
  _impl_.tablet_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_tablet_level() const {
  return _impl_.tablet_level_;
}
inline uint32_t CMsgClientToGCFantasyCraftingDevModifyTablet::tablet_level() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingDevModifyTablet.tablet_level)
  return _internal_tablet_level();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::_internal_set_tablet_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tablet_level_ = value;
}
inline void CMsgClientToGCFantasyCraftingDevModifyTablet::set_tablet_level(uint32_t value) {
  _internal_set_tablet_level(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingDevModifyTablet.tablet_level)
}

// -------------------------------------------------------------------

// CMsgClientToGCFantasyCraftingDevModifyTabletResponse

// optional .CMsgClientToGCFantasyCraftingDevModifyTabletResponse.EResponse response = 1 [default = k_eInternalError];
inline bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCFantasyCraftingDevModifyTabletResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::clear_response() {
  _impl_.response_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_internal_response() const {
  return static_cast< ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse >(_impl_.response_);
}
inline ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse CMsgClientToGCFantasyCraftingDevModifyTabletResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.response)
  return _internal_response();
}
inline void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::_internal_set_response(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse value) {
  assert(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.response_ = value;
}
inline void CMsgClientToGCFantasyCraftingDevModifyTabletResponse::set_response(::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCFantasyCraftingDevModifyTabletResponse.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgClientToGCGetPlayerCardRosterResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetPlayerCardRosterResponse_Result>() {
  return ::CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result>() {
  return ::CMsgClientToGCBatchGetPlayerCardRosterResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCSetPlayerCardRosterResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCSetPlayerCardRosterResponse_Result>() {
  return ::CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>() {
  return ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTADPCSearchResults_ESearchResultsDesired> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTADPCSearchResults_ESearchResultsDesired>() {
  return ::CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse>() {
  return ::CMsgClientToGCFantasyCraftingGetUserDataResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse>() {
  return ::CMsgClientToGCFantasyCraftingPerformOperationResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse>() {
  return ::CMsgClientToGCFantasyCraftingDevModifyTabletResponse_EResponse_descriptor();
}
template <> struct is_proto_enum< ::DOTA_2013PassportSelectionIndices> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_2013PassportSelectionIndices>() {
  return ::DOTA_2013PassportSelectionIndices_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto
