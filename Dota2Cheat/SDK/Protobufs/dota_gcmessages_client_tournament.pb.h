// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ftournament_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ftournament_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_client_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto;
class CMsgDOTATournament;
struct CMsgDOTATournamentDefaultTypeInternal;
extern CMsgDOTATournamentDefaultTypeInternal _CMsgDOTATournament_default_instance_;
class CMsgDOTATournamentStateChange;
struct CMsgDOTATournamentStateChangeDefaultTypeInternal;
extern CMsgDOTATournamentStateChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_default_instance_;
class CMsgDOTATournamentStateChange_GameChange;
struct CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal;
extern CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_GameChange_default_instance_;
class CMsgDOTATournamentStateChange_TeamChange;
struct CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal;
extern CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal _CMsgDOTATournamentStateChange_TeamChange_default_instance_;
class CMsgDOTATournament_Game;
struct CMsgDOTATournament_GameDefaultTypeInternal;
extern CMsgDOTATournament_GameDefaultTypeInternal _CMsgDOTATournament_Game_default_instance_;
class CMsgDOTATournament_Node;
struct CMsgDOTATournament_NodeDefaultTypeInternal;
extern CMsgDOTATournament_NodeDefaultTypeInternal _CMsgDOTATournament_Node_default_instance_;
class CMsgDOTATournament_Team;
struct CMsgDOTATournament_TeamDefaultTypeInternal;
extern CMsgDOTATournament_TeamDefaultTypeInternal _CMsgDOTATournament_Team_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails;
struct CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_Division;
struct CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_Tier;
struct CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistory;
struct CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistory_Tournament;
struct CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_;
class CMsgDOTAWeekendTourneyPlayerSkillLevelStats;
struct CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStats;
struct CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStatsRequest;
struct CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal;
extern CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_;
class CMsgRequestWeekendTourneySchedule;
struct CMsgRequestWeekendTourneyScheduleDefaultTypeInternal;
extern CMsgRequestWeekendTourneyScheduleDefaultTypeInternal _CMsgRequestWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneyLeave;
struct CMsgWeekendTourneyLeaveDefaultTypeInternal;
extern CMsgWeekendTourneyLeaveDefaultTypeInternal _CMsgWeekendTourneyLeave_default_instance_;
class CMsgWeekendTourneyOpts;
struct CMsgWeekendTourneyOptsDefaultTypeInternal;
extern CMsgWeekendTourneyOptsDefaultTypeInternal _CMsgWeekendTourneyOpts_default_instance_;
class CMsgWeekendTourneySchedule;
struct CMsgWeekendTourneyScheduleDefaultTypeInternal;
extern CMsgWeekendTourneyScheduleDefaultTypeInternal _CMsgWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneySchedule_Division;
struct CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal;
extern CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal _CMsgWeekendTourneySchedule_Division_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgDOTATournament* Arena::CreateMaybeMessage<::CMsgDOTATournament>(Arena*);
template<> ::CMsgDOTATournamentStateChange* Arena::CreateMaybeMessage<::CMsgDOTATournamentStateChange>(Arena*);
template<> ::CMsgDOTATournamentStateChange_GameChange* Arena::CreateMaybeMessage<::CMsgDOTATournamentStateChange_GameChange>(Arena*);
template<> ::CMsgDOTATournamentStateChange_TeamChange* Arena::CreateMaybeMessage<::CMsgDOTATournamentStateChange_TeamChange>(Arena*);
template<> ::CMsgDOTATournament_Game* Arena::CreateMaybeMessage<::CMsgDOTATournament_Game>(Arena*);
template<> ::CMsgDOTATournament_Node* Arena::CreateMaybeMessage<::CMsgDOTATournament_Node>(Arena*);
template<> ::CMsgDOTATournament_Team* Arena::CreateMaybeMessage<::CMsgDOTATournament_Team>(Arena*);
template<> ::CMsgDOTAWeekendTourneyParticipationDetails* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyParticipationDetails>(Arena*);
template<> ::CMsgDOTAWeekendTourneyParticipationDetails_Division* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyParticipationDetails_Division>(Arena*);
template<> ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyParticipationDetails_Tier>(Arena*);
template<> ::CMsgDOTAWeekendTourneyPlayerHistory* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyPlayerHistory>(Arena*);
template<> ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyPlayerHistory_Tournament>(Arena*);
template<> ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(Arena*);
template<> ::CMsgDOTAWeekendTourneyPlayerStats* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyPlayerStats>(Arena*);
template<> ::CMsgDOTAWeekendTourneyPlayerStatsRequest* Arena::CreateMaybeMessage<::CMsgDOTAWeekendTourneyPlayerStatsRequest>(Arena*);
template<> ::CMsgRequestWeekendTourneySchedule* Arena::CreateMaybeMessage<::CMsgRequestWeekendTourneySchedule>(Arena*);
template<> ::CMsgWeekendTourneyLeave* Arena::CreateMaybeMessage<::CMsgWeekendTourneyLeave>(Arena*);
template<> ::CMsgWeekendTourneyOpts* Arena::CreateMaybeMessage<::CMsgWeekendTourneyOpts>(Arena*);
template<> ::CMsgWeekendTourneySchedule* Arena::CreateMaybeMessage<::CMsgWeekendTourneySchedule>(Arena*);
template<> ::CMsgWeekendTourneySchedule_Division* Arena::CreateMaybeMessage<::CMsgWeekendTourneySchedule_Division>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ETournamentEvent : int {
  k_ETournamentEvent_None = 0,
  k_ETournamentEvent_TournamentCreated = 1,
  k_ETournamentEvent_TournamentsMerged = 2,
  k_ETournamentEvent_GameOutcome = 3,
  k_ETournamentEvent_TeamGivenBye = 4,
  k_ETournamentEvent_TournamentCanceledByAdmin = 5,
  k_ETournamentEvent_TeamAbandoned = 6,
  k_ETournamentEvent_ScheduledGameStarted = 7,
  k_ETournamentEvent_Canceled = 8,
  k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeRefund = 9,
  k_ETournamentEvent_TeamParticipationTimedOut_EntryFeeForfeit = 10,
  k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory = 11
};
bool ETournamentEvent_IsValid(int value);
constexpr ETournamentEvent ETournamentEvent_MIN = k_ETournamentEvent_None;
constexpr ETournamentEvent ETournamentEvent_MAX = k_ETournamentEvent_TeamParticipationTimedOut_GrantedVictory;
constexpr int ETournamentEvent_ARRAYSIZE = ETournamentEvent_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETournamentEvent_descriptor();
template<typename T>
inline const std::string& ETournamentEvent_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETournamentEvent>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETournamentEvent_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETournamentEvent_descriptor(), enum_t_value);
}
inline bool ETournamentEvent_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETournamentEvent* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETournamentEvent>(
    ETournamentEvent_descriptor(), name, value);
}
// ===================================================================

class CMsgRequestWeekendTourneySchedule final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgRequestWeekendTourneySchedule) */ {
 public:
  inline CMsgRequestWeekendTourneySchedule() : CMsgRequestWeekendTourneySchedule(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgRequestWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from);
  CMsgRequestWeekendTourneySchedule(CMsgRequestWeekendTourneySchedule&& from) noexcept
    : CMsgRequestWeekendTourneySchedule() {
    *this = ::std::move(from);
  }

  inline CMsgRequestWeekendTourneySchedule& operator=(const CMsgRequestWeekendTourneySchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRequestWeekendTourneySchedule& operator=(CMsgRequestWeekendTourneySchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgRequestWeekendTourneySchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRequestWeekendTourneySchedule* internal_default_instance() {
    return reinterpret_cast<const CMsgRequestWeekendTourneySchedule*>(
               &_CMsgRequestWeekendTourneySchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgRequestWeekendTourneySchedule& a, CMsgRequestWeekendTourneySchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRequestWeekendTourneySchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRequestWeekendTourneySchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgRequestWeekendTourneySchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgRequestWeekendTourneySchedule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgRequestWeekendTourneySchedule& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgRequestWeekendTourneySchedule& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRequestWeekendTourneySchedule";
  }
  protected:
  explicit CMsgRequestWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgRequestWeekendTourneySchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneySchedule_Division final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWeekendTourneySchedule.Division) */ {
 public:
  inline CMsgWeekendTourneySchedule_Division() : CMsgWeekendTourneySchedule_Division(nullptr) {}
  ~CMsgWeekendTourneySchedule_Division() override;
  explicit PROTOBUF_CONSTEXPR CMsgWeekendTourneySchedule_Division(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from);
  CMsgWeekendTourneySchedule_Division(CMsgWeekendTourneySchedule_Division&& from) noexcept
    : CMsgWeekendTourneySchedule_Division() {
    *this = ::std::move(from);
  }

  inline CMsgWeekendTourneySchedule_Division& operator=(const CMsgWeekendTourneySchedule_Division& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWeekendTourneySchedule_Division& operator=(CMsgWeekendTourneySchedule_Division&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWeekendTourneySchedule_Division& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWeekendTourneySchedule_Division* internal_default_instance() {
    return reinterpret_cast<const CMsgWeekendTourneySchedule_Division*>(
               &_CMsgWeekendTourneySchedule_Division_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgWeekendTourneySchedule_Division& a, CMsgWeekendTourneySchedule_Division& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWeekendTourneySchedule_Division* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWeekendTourneySchedule_Division* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWeekendTourneySchedule_Division* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWeekendTourneySchedule_Division>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWeekendTourneySchedule_Division& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWeekendTourneySchedule_Division& from) {
    CMsgWeekendTourneySchedule_Division::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWeekendTourneySchedule_Division* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWeekendTourneySchedule.Division";
  }
  protected:
  explicit CMsgWeekendTourneySchedule_Division(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDivisionCodeFieldNumber = 1,
    kTimeWindowOpenFieldNumber = 2,
    kTimeWindowCloseFieldNumber = 3,
    kTimeWindowOpenNextFieldNumber = 4,
    kTrophyIdFieldNumber = 5,
    kFreeWeekendFieldNumber = 6,
  };
  // optional uint32 division_code = 1;
  bool has_division_code() const;
  private:
  bool _internal_has_division_code() const;
  public:
  void clear_division_code();
  uint32_t division_code() const;
  void set_division_code(uint32_t value);
  private:
  uint32_t _internal_division_code() const;
  void _internal_set_division_code(uint32_t value);
  public:

  // optional uint32 time_window_open = 2;
  bool has_time_window_open() const;
  private:
  bool _internal_has_time_window_open() const;
  public:
  void clear_time_window_open();
  uint32_t time_window_open() const;
  void set_time_window_open(uint32_t value);
  private:
  uint32_t _internal_time_window_open() const;
  void _internal_set_time_window_open(uint32_t value);
  public:

  // optional uint32 time_window_close = 3;
  bool has_time_window_close() const;
  private:
  bool _internal_has_time_window_close() const;
  public:
  void clear_time_window_close();
  uint32_t time_window_close() const;
  void set_time_window_close(uint32_t value);
  private:
  uint32_t _internal_time_window_close() const;
  void _internal_set_time_window_close(uint32_t value);
  public:

  // optional uint32 time_window_open_next = 4;
  bool has_time_window_open_next() const;
  private:
  bool _internal_has_time_window_open_next() const;
  public:
  void clear_time_window_open_next();
  uint32_t time_window_open_next() const;
  void set_time_window_open_next(uint32_t value);
  private:
  uint32_t _internal_time_window_open_next() const;
  void _internal_set_time_window_open_next(uint32_t value);
  public:

  // optional uint32 trophy_id = 5;
  bool has_trophy_id() const;
  private:
  bool _internal_has_trophy_id() const;
  public:
  void clear_trophy_id();
  uint32_t trophy_id() const;
  void set_trophy_id(uint32_t value);
  private:
  uint32_t _internal_trophy_id() const;
  void _internal_set_trophy_id(uint32_t value);
  public:

  // optional bool free_weekend = 6;
  bool has_free_weekend() const;
  private:
  bool _internal_has_free_weekend() const;
  public:
  void clear_free_weekend();
  bool free_weekend() const;
  void set_free_weekend(bool value);
  private:
  bool _internal_free_weekend() const;
  void _internal_set_free_weekend(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneySchedule.Division)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t division_code_;
    uint32_t time_window_open_;
    uint32_t time_window_close_;
    uint32_t time_window_open_next_;
    uint32_t trophy_id_;
    bool free_weekend_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneySchedule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWeekendTourneySchedule) */ {
 public:
  inline CMsgWeekendTourneySchedule() : CMsgWeekendTourneySchedule(nullptr) {}
  ~CMsgWeekendTourneySchedule() override;
  explicit PROTOBUF_CONSTEXPR CMsgWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from);
  CMsgWeekendTourneySchedule(CMsgWeekendTourneySchedule&& from) noexcept
    : CMsgWeekendTourneySchedule() {
    *this = ::std::move(from);
  }

  inline CMsgWeekendTourneySchedule& operator=(const CMsgWeekendTourneySchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWeekendTourneySchedule& operator=(CMsgWeekendTourneySchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWeekendTourneySchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWeekendTourneySchedule* internal_default_instance() {
    return reinterpret_cast<const CMsgWeekendTourneySchedule*>(
               &_CMsgWeekendTourneySchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgWeekendTourneySchedule& a, CMsgWeekendTourneySchedule& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWeekendTourneySchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWeekendTourneySchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWeekendTourneySchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWeekendTourneySchedule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWeekendTourneySchedule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWeekendTourneySchedule& from) {
    CMsgWeekendTourneySchedule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWeekendTourneySchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWeekendTourneySchedule";
  }
  protected:
  explicit CMsgWeekendTourneySchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgWeekendTourneySchedule_Division Division;

  // accessors -------------------------------------------------------

  enum : int {
    kDivisionsFieldNumber = 1,
  };
  // repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
  int divisions_size() const;
  private:
  int _internal_divisions_size() const;
  public:
  void clear_divisions();
  ::CMsgWeekendTourneySchedule_Division* mutable_divisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >*
      mutable_divisions();
  private:
  const ::CMsgWeekendTourneySchedule_Division& _internal_divisions(int index) const;
  ::CMsgWeekendTourneySchedule_Division* _internal_add_divisions();
  public:
  const ::CMsgWeekendTourneySchedule_Division& divisions(int index) const;
  ::CMsgWeekendTourneySchedule_Division* add_divisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >&
      divisions() const;

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneySchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division > divisions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneyOpts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgWeekendTourneyOpts) */ {
 public:
  inline CMsgWeekendTourneyOpts() : CMsgWeekendTourneyOpts(nullptr) {}
  ~CMsgWeekendTourneyOpts() override;
  explicit PROTOBUF_CONSTEXPR CMsgWeekendTourneyOpts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from);
  CMsgWeekendTourneyOpts(CMsgWeekendTourneyOpts&& from) noexcept
    : CMsgWeekendTourneyOpts() {
    *this = ::std::move(from);
  }

  inline CMsgWeekendTourneyOpts& operator=(const CMsgWeekendTourneyOpts& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWeekendTourneyOpts& operator=(CMsgWeekendTourneyOpts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWeekendTourneyOpts& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWeekendTourneyOpts* internal_default_instance() {
    return reinterpret_cast<const CMsgWeekendTourneyOpts*>(
               &_CMsgWeekendTourneyOpts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgWeekendTourneyOpts& a, CMsgWeekendTourneyOpts& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWeekendTourneyOpts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWeekendTourneyOpts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWeekendTourneyOpts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWeekendTourneyOpts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgWeekendTourneyOpts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgWeekendTourneyOpts& from) {
    CMsgWeekendTourneyOpts::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgWeekendTourneyOpts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWeekendTourneyOpts";
  }
  protected:
  explicit CMsgWeekendTourneyOpts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPickupTeamNameFieldNumber = 7,
    kParticipatingFieldNumber = 1,
    kDivisionIdFieldNumber = 2,
    kBuyinFieldNumber = 3,
    kSkillLevelFieldNumber = 4,
    kMatchGroupsFieldNumber = 5,
    kTeamIdFieldNumber = 6,
    kPickupTeamLogoFieldNumber = 8,
  };
  // optional string pickup_team_name = 7;
  bool has_pickup_team_name() const;
  private:
  bool _internal_has_pickup_team_name() const;
  public:
  void clear_pickup_team_name();
  const std::string& pickup_team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pickup_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pickup_team_name();
  PROTOBUF_NODISCARD std::string* release_pickup_team_name();
  void set_allocated_pickup_team_name(std::string* pickup_team_name);
  private:
  const std::string& _internal_pickup_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pickup_team_name(const std::string& value);
  std::string* _internal_mutable_pickup_team_name();
  public:

  // optional bool participating = 1;
  bool has_participating() const;
  private:
  bool _internal_has_participating() const;
  public:
  void clear_participating();
  bool participating() const;
  void set_participating(bool value);
  private:
  bool _internal_participating() const;
  void _internal_set_participating(bool value);
  public:

  // optional uint32 division_id = 2;
  bool has_division_id() const;
  private:
  bool _internal_has_division_id() const;
  public:
  void clear_division_id();
  uint32_t division_id() const;
  void set_division_id(uint32_t value);
  private:
  uint32_t _internal_division_id() const;
  void _internal_set_division_id(uint32_t value);
  public:

  // optional uint32 buyin = 3;
  bool has_buyin() const;
  private:
  bool _internal_has_buyin() const;
  public:
  void clear_buyin();
  uint32_t buyin() const;
  void set_buyin(uint32_t value);
  private:
  uint32_t _internal_buyin() const;
  void _internal_set_buyin(uint32_t value);
  public:

  // optional uint32 skill_level = 4;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // optional uint32 match_groups = 5;
  bool has_match_groups() const;
  private:
  bool _internal_has_match_groups() const;
  public:
  void clear_match_groups();
  uint32_t match_groups() const;
  void set_match_groups(uint32_t value);
  private:
  uint32_t _internal_match_groups() const;
  void _internal_set_match_groups(uint32_t value);
  public:

  // optional uint32 team_id = 6;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint64 pickup_team_logo = 8;
  bool has_pickup_team_logo() const;
  private:
  bool _internal_has_pickup_team_logo() const;
  public:
  void clear_pickup_team_logo();
  uint64_t pickup_team_logo() const;
  void set_pickup_team_logo(uint64_t value);
  private:
  uint64_t _internal_pickup_team_logo() const;
  void _internal_set_pickup_team_logo(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneyOpts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pickup_team_name_;
    bool participating_;
    uint32_t division_id_;
    uint32_t buyin_;
    uint32_t skill_level_;
    uint32_t match_groups_;
    uint32_t team_id_;
    uint64_t pickup_team_logo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgWeekendTourneyLeave final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgWeekendTourneyLeave) */ {
 public:
  inline CMsgWeekendTourneyLeave() : CMsgWeekendTourneyLeave(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgWeekendTourneyLeave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from);
  CMsgWeekendTourneyLeave(CMsgWeekendTourneyLeave&& from) noexcept
    : CMsgWeekendTourneyLeave() {
    *this = ::std::move(from);
  }

  inline CMsgWeekendTourneyLeave& operator=(const CMsgWeekendTourneyLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgWeekendTourneyLeave& operator=(CMsgWeekendTourneyLeave&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgWeekendTourneyLeave& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgWeekendTourneyLeave* internal_default_instance() {
    return reinterpret_cast<const CMsgWeekendTourneyLeave*>(
               &_CMsgWeekendTourneyLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgWeekendTourneyLeave& a, CMsgWeekendTourneyLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgWeekendTourneyLeave* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgWeekendTourneyLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgWeekendTourneyLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgWeekendTourneyLeave>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgWeekendTourneyLeave& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgWeekendTourneyLeave& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgWeekendTourneyLeave";
  }
  protected:
  explicit CMsgWeekendTourneyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgWeekendTourneyLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Team final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Team) */ {
 public:
  inline CMsgDOTATournament_Team() : CMsgDOTATournament_Team(nullptr) {}
  ~CMsgDOTATournament_Team() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournament_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from);
  CMsgDOTATournament_Team(CMsgDOTATournament_Team&& from) noexcept
    : CMsgDOTATournament_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Team& operator=(const CMsgDOTATournament_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournament_Team& operator=(CMsgDOTATournament_Team&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournament_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournament_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Team*>(
               &_CMsgDOTATournament_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgDOTATournament_Team& a, CMsgDOTATournament_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournament_Team* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournament_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournament_Team>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournament_Team& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournament_Team& from) {
    CMsgDOTATournament_Team::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournament_Team* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournament.Team";
  }
  protected:
  explicit CMsgDOTATournament_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kPlayerBuyinFieldNumber = 9,
    kPlayerSkillLevelFieldNumber = 10,
    kTeamNameFieldNumber = 5,
    kTeamGidFieldNumber = 1,
    kNodeOrStateFieldNumber = 2,
    kTeamIdFieldNumber = 4,
    kTeamBaseLogoFieldNumber = 7,
    kTeamUiLogoFieldNumber = 8,
    kMatchGroupMaskFieldNumber = 12,
  };
  // repeated uint32 players = 3 [packed = true];
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  private:
  uint32_t _internal_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_players() const;
  void _internal_add_players(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_players();
  public:
  uint32_t players(int index) const;
  void set_players(int index, uint32_t value);
  void add_players(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_players();

  // repeated uint32 player_buyin = 9 [packed = true];
  int player_buyin_size() const;
  private:
  int _internal_player_buyin_size() const;
  public:
  void clear_player_buyin();
  private:
  uint32_t _internal_player_buyin(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_player_buyin() const;
  void _internal_add_player_buyin(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_player_buyin();
  public:
  uint32_t player_buyin(int index) const;
  void set_player_buyin(int index, uint32_t value);
  void add_player_buyin(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      player_buyin() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_player_buyin();

  // repeated uint32 player_skill_level = 10 [packed = true];
  int player_skill_level_size() const;
  private:
  int _internal_player_skill_level_size() const;
  public:
  void clear_player_skill_level();
  private:
  uint32_t _internal_player_skill_level(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_player_skill_level() const;
  void _internal_add_player_skill_level(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_player_skill_level();
  public:
  uint32_t player_skill_level(int index) const;
  void set_player_skill_level(int index, uint32_t value);
  void add_player_skill_level(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      player_skill_level() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_player_skill_level();

  // optional string team_name = 5;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional fixed64 team_gid = 1;
  bool has_team_gid() const;
  private:
  bool _internal_has_team_gid() const;
  public:
  void clear_team_gid();
  uint64_t team_gid() const;
  void set_team_gid(uint64_t value);
  private:
  uint64_t _internal_team_gid() const;
  void _internal_set_team_gid(uint64_t value);
  public:

  // optional uint32 node_or_state = 2;
  bool has_node_or_state() const;
  private:
  bool _internal_has_node_or_state() const;
  public:
  void clear_node_or_state();
  uint32_t node_or_state() const;
  void set_node_or_state(uint32_t value);
  private:
  uint32_t _internal_node_or_state() const;
  void _internal_set_node_or_state(uint32_t value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint64 team_base_logo = 7;
  bool has_team_base_logo() const;
  private:
  bool _internal_has_team_base_logo() const;
  public:
  void clear_team_base_logo();
  uint64_t team_base_logo() const;
  void set_team_base_logo(uint64_t value);
  private:
  uint64_t _internal_team_base_logo() const;
  void _internal_set_team_base_logo(uint64_t value);
  public:

  // optional uint64 team_ui_logo = 8;
  bool has_team_ui_logo() const;
  private:
  bool _internal_has_team_ui_logo() const;
  public:
  void clear_team_ui_logo();
  uint64_t team_ui_logo() const;
  void set_team_ui_logo(uint64_t value);
  private:
  uint64_t _internal_team_ui_logo() const;
  void _internal_set_team_ui_logo(uint64_t value);
  public:

  // optional uint32 match_group_mask = 12;
  bool has_match_group_mask() const;
  private:
  bool _internal_has_match_group_mask() const;
  public:
  void clear_match_group_mask();
  uint32_t match_group_mask() const;
  void set_match_group_mask(uint32_t value);
  private:
  uint32_t _internal_match_group_mask() const;
  void _internal_set_match_group_mask(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > players_;
    mutable std::atomic<int> _players_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > player_buyin_;
    mutable std::atomic<int> _player_buyin_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > player_skill_level_;
    mutable std::atomic<int> _player_skill_level_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    uint64_t team_gid_;
    uint32_t node_or_state_;
    uint32_t team_id_;
    uint64_t team_base_logo_;
    uint64_t team_ui_logo_;
    uint32_t match_group_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Game final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Game) */ {
 public:
  inline CMsgDOTATournament_Game() : CMsgDOTATournament_Game(nullptr) {}
  ~CMsgDOTATournament_Game() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournament_Game(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from);
  CMsgDOTATournament_Game(CMsgDOTATournament_Game&& from) noexcept
    : CMsgDOTATournament_Game() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Game& operator=(const CMsgDOTATournament_Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournament_Game& operator=(CMsgDOTATournament_Game&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournament_Game& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournament_Game* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Game*>(
               &_CMsgDOTATournament_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgDOTATournament_Game& a, CMsgDOTATournament_Game& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournament_Game* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournament_Game* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournament_Game>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournament_Game& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournament_Game& from) {
    CMsgDOTATournament_Game::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournament_Game* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournament.Game";
  }
  protected:
  explicit CMsgDOTATournament_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyIdFieldNumber = 2,
    kNodeIdxFieldNumber = 1,
    kTeamAGoodFieldNumber = 4,
    kMatchIdFieldNumber = 3,
    kStateFieldNumber = 5,
    kStartTimeFieldNumber = 6,
  };
  // optional fixed64 lobby_id = 2;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  uint64_t lobby_id() const;
  void set_lobby_id(uint64_t value);
  private:
  uint64_t _internal_lobby_id() const;
  void _internal_set_lobby_id(uint64_t value);
  public:

  // optional uint32 node_idx = 1;
  bool has_node_idx() const;
  private:
  bool _internal_has_node_idx() const;
  public:
  void clear_node_idx();
  uint32_t node_idx() const;
  void set_node_idx(uint32_t value);
  private:
  uint32_t _internal_node_idx() const;
  void _internal_set_node_idx(uint32_t value);
  public:

  // optional bool team_a_good = 4;
  bool has_team_a_good() const;
  private:
  bool _internal_has_team_a_good() const;
  public:
  void clear_team_a_good();
  bool team_a_good() const;
  void set_team_a_good(bool value);
  private:
  bool _internal_team_a_good() const;
  void _internal_set_team_a_good(bool value);
  public:

  // optional uint64 match_id = 3;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::ETournamentGameState state() const;
  void set_state(::ETournamentGameState value);
  private:
  ::ETournamentGameState _internal_state() const;
  void _internal_set_state(::ETournamentGameState value);
  public:

  // optional uint32 start_time = 6;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Game)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t lobby_id_;
    uint32_t node_idx_;
    bool team_a_good_;
    uint64_t match_id_;
    int state_;
    uint32_t start_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournament_Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament.Node) */ {
 public:
  inline CMsgDOTATournament_Node() : CMsgDOTATournament_Node(nullptr) {}
  ~CMsgDOTATournament_Node() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournament_Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from);
  CMsgDOTATournament_Node(CMsgDOTATournament_Node&& from) noexcept
    : CMsgDOTATournament_Node() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament_Node& operator=(const CMsgDOTATournament_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournament_Node& operator=(CMsgDOTATournament_Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournament_Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournament_Node* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament_Node*>(
               &_CMsgDOTATournament_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDOTATournament_Node& a, CMsgDOTATournament_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournament_Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournament_Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournament_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournament_Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournament_Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournament_Node& from) {
    CMsgDOTATournament_Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournament_Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournament.Node";
  }
  protected:
  explicit CMsgDOTATournament_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kTeamIdxAFieldNumber = 2,
    kTeamIdxBFieldNumber = 3,
    kNodeStateFieldNumber = 4,
  };
  // optional uint32 node_id = 1;
  bool has_node_id() const;
  private:
  bool _internal_has_node_id() const;
  public:
  void clear_node_id();
  uint32_t node_id() const;
  void set_node_id(uint32_t value);
  private:
  uint32_t _internal_node_id() const;
  void _internal_set_node_id(uint32_t value);
  public:

  // optional uint32 team_idx_a = 2;
  bool has_team_idx_a() const;
  private:
  bool _internal_has_team_idx_a() const;
  public:
  void clear_team_idx_a();
  uint32_t team_idx_a() const;
  void set_team_idx_a(uint32_t value);
  private:
  uint32_t _internal_team_idx_a() const;
  void _internal_set_team_idx_a(uint32_t value);
  public:

  // optional uint32 team_idx_b = 3;
  bool has_team_idx_b() const;
  private:
  bool _internal_has_team_idx_b() const;
  public:
  void clear_team_idx_b();
  uint32_t team_idx_b() const;
  void set_team_idx_b(uint32_t value);
  private:
  uint32_t _internal_team_idx_b() const;
  void _internal_set_team_idx_b(uint32_t value);
  public:

  // optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  bool has_node_state() const;
  private:
  bool _internal_has_node_state() const;
  public:
  void clear_node_state();
  ::ETournamentNodeState node_state() const;
  void set_node_state(::ETournamentNodeState value);
  private:
  ::ETournamentNodeState _internal_node_state() const;
  void _internal_set_node_state(::ETournamentNodeState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t node_id_;
    uint32_t team_idx_a_;
    uint32_t team_idx_b_;
    int node_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournament final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournament) */ {
 public:
  inline CMsgDOTATournament() : CMsgDOTATournament(nullptr) {}
  ~CMsgDOTATournament() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournament(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournament(const CMsgDOTATournament& from);
  CMsgDOTATournament(CMsgDOTATournament&& from) noexcept
    : CMsgDOTATournament() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournament& operator=(const CMsgDOTATournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournament& operator=(CMsgDOTATournament&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournament& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournament* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournament*>(
               &_CMsgDOTATournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTATournament& a, CMsgDOTATournament& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournament* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournament>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournament& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournament& from) {
    CMsgDOTATournament::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournament* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournament";
  }
  protected:
  explicit CMsgDOTATournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournament_Team Team;
  typedef CMsgDOTATournament_Game Game;
  typedef CMsgDOTATournament_Node Node;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 7,
    kGamesFieldNumber = 8,
    kNodesFieldNumber = 9,
    kTournamentIdFieldNumber = 1,
    kDivisionIdFieldNumber = 2,
    kScheduleTimeFieldNumber = 3,
    kSkillLevelFieldNumber = 4,
    kTournamentTemplateFieldNumber = 5,
    kStateFieldNumber = 6,
    kStateSeqNumFieldNumber = 10,
    kSeasonTrophyIdFieldNumber = 11,
  };
  // repeated .CMsgDOTATournament.Team teams = 7;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTATournament_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Team >*
      mutable_teams();
  private:
  const ::CMsgDOTATournament_Team& _internal_teams(int index) const;
  ::CMsgDOTATournament_Team* _internal_add_teams();
  public:
  const ::CMsgDOTATournament_Team& teams(int index) const;
  ::CMsgDOTATournament_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Team >&
      teams() const;

  // repeated .CMsgDOTATournament.Game games = 8;
  int games_size() const;
  private:
  int _internal_games_size() const;
  public:
  void clear_games();
  ::CMsgDOTATournament_Game* mutable_games(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Game >*
      mutable_games();
  private:
  const ::CMsgDOTATournament_Game& _internal_games(int index) const;
  ::CMsgDOTATournament_Game* _internal_add_games();
  public:
  const ::CMsgDOTATournament_Game& games(int index) const;
  ::CMsgDOTATournament_Game* add_games();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Game >&
      games() const;

  // repeated .CMsgDOTATournament.Node nodes = 9;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::CMsgDOTATournament_Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Node >*
      mutable_nodes();
  private:
  const ::CMsgDOTATournament_Node& _internal_nodes(int index) const;
  ::CMsgDOTATournament_Node* _internal_add_nodes();
  public:
  const ::CMsgDOTATournament_Node& nodes(int index) const;
  ::CMsgDOTATournament_Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Node >&
      nodes() const;

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 division_id = 2;
  bool has_division_id() const;
  private:
  bool _internal_has_division_id() const;
  public:
  void clear_division_id();
  uint32_t division_id() const;
  void set_division_id(uint32_t value);
  private:
  uint32_t _internal_division_id() const;
  void _internal_set_division_id(uint32_t value);
  public:

  // optional uint32 schedule_time = 3;
  bool has_schedule_time() const;
  private:
  bool _internal_has_schedule_time() const;
  public:
  void clear_schedule_time();
  uint32_t schedule_time() const;
  void set_schedule_time(uint32_t value);
  private:
  uint32_t _internal_schedule_time() const;
  void _internal_set_schedule_time(uint32_t value);
  public:

  // optional uint32 skill_level = 4;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  bool has_tournament_template() const;
  private:
  bool _internal_has_tournament_template() const;
  public:
  void clear_tournament_template();
  ::ETournamentTemplate tournament_template() const;
  void set_tournament_template(::ETournamentTemplate value);
  private:
  ::ETournamentTemplate _internal_tournament_template() const;
  void _internal_set_tournament_template(::ETournamentTemplate value);
  public:

  // optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::ETournamentState state() const;
  void set_state(::ETournamentState value);
  private:
  ::ETournamentState _internal_state() const;
  void _internal_set_state(::ETournamentState value);
  public:

  // optional uint32 state_seq_num = 10;
  bool has_state_seq_num() const;
  private:
  bool _internal_has_state_seq_num() const;
  public:
  void clear_state_seq_num();
  uint32_t state_seq_num() const;
  void set_state_seq_num(uint32_t value);
  private:
  uint32_t _internal_state_seq_num() const;
  void _internal_set_state_seq_num(uint32_t value);
  public:

  // optional uint32 season_trophy_id = 11;
  bool has_season_trophy_id() const;
  private:
  bool _internal_has_season_trophy_id() const;
  public:
  void clear_season_trophy_id();
  uint32_t season_trophy_id() const;
  void set_season_trophy_id(uint32_t value);
  private:
  uint32_t _internal_season_trophy_id() const;
  void _internal_set_season_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Team > teams_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Game > games_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Node > nodes_;
    uint32_t tournament_id_;
    uint32_t division_id_;
    uint32_t schedule_time_;
    uint32_t skill_level_;
    int tournament_template_;
    int state_;
    uint32_t state_seq_num_;
    uint32_t season_trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange_GameChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournamentStateChange.GameChange) */ {
 public:
  inline CMsgDOTATournamentStateChange_GameChange() : CMsgDOTATournamentStateChange_GameChange(nullptr) {}
  ~CMsgDOTATournamentStateChange_GameChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournamentStateChange_GameChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from);
  CMsgDOTATournamentStateChange_GameChange(CMsgDOTATournamentStateChange_GameChange&& from) noexcept
    : CMsgDOTATournamentStateChange_GameChange() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournamentStateChange_GameChange& operator=(const CMsgDOTATournamentStateChange_GameChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournamentStateChange_GameChange& operator=(CMsgDOTATournamentStateChange_GameChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournamentStateChange_GameChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournamentStateChange_GameChange* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournamentStateChange_GameChange*>(
               &_CMsgDOTATournamentStateChange_GameChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTATournamentStateChange_GameChange& a, CMsgDOTATournamentStateChange_GameChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournamentStateChange_GameChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournamentStateChange_GameChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange_GameChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournamentStateChange_GameChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournamentStateChange_GameChange& from) {
    CMsgDOTATournamentStateChange_GameChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournamentStateChange_GameChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournamentStateChange.GameChange";
  }
  protected:
  explicit CMsgDOTATournamentStateChange_GameChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchIdFieldNumber = 1,
    kNewStateFieldNumber = 2,
  };
  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  uint64_t match_id() const;
  void set_match_id(uint64_t value);
  private:
  uint64_t _internal_match_id() const;
  void _internal_set_match_id(uint64_t value);
  public:

  // optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  bool has_new_state() const;
  private:
  bool _internal_has_new_state() const;
  public:
  void clear_new_state();
  ::ETournamentGameState new_state() const;
  void set_new_state(::ETournamentGameState value);
  private:
  ::ETournamentGameState _internal_new_state() const;
  void _internal_set_new_state(::ETournamentGameState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange.GameChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t match_id_;
    int new_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange_TeamChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournamentStateChange.TeamChange) */ {
 public:
  inline CMsgDOTATournamentStateChange_TeamChange() : CMsgDOTATournamentStateChange_TeamChange(nullptr) {}
  ~CMsgDOTATournamentStateChange_TeamChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournamentStateChange_TeamChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from);
  CMsgDOTATournamentStateChange_TeamChange(CMsgDOTATournamentStateChange_TeamChange&& from) noexcept
    : CMsgDOTATournamentStateChange_TeamChange() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournamentStateChange_TeamChange& operator=(const CMsgDOTATournamentStateChange_TeamChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournamentStateChange_TeamChange& operator=(CMsgDOTATournamentStateChange_TeamChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournamentStateChange_TeamChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournamentStateChange_TeamChange* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournamentStateChange_TeamChange*>(
               &_CMsgDOTATournamentStateChange_TeamChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgDOTATournamentStateChange_TeamChange& a, CMsgDOTATournamentStateChange_TeamChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournamentStateChange_TeamChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournamentStateChange_TeamChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange_TeamChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournamentStateChange_TeamChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournamentStateChange_TeamChange& from) {
    CMsgDOTATournamentStateChange_TeamChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournamentStateChange_TeamChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournamentStateChange.TeamChange";
  }
  protected:
  explicit CMsgDOTATournamentStateChange_TeamChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamGidFieldNumber = 1,
    kNewNodeOrStateFieldNumber = 2,
    kOldNodeOrStateFieldNumber = 3,
  };
  // optional uint64 team_gid = 1;
  bool has_team_gid() const;
  private:
  bool _internal_has_team_gid() const;
  public:
  void clear_team_gid();
  uint64_t team_gid() const;
  void set_team_gid(uint64_t value);
  private:
  uint64_t _internal_team_gid() const;
  void _internal_set_team_gid(uint64_t value);
  public:

  // optional uint32 new_node_or_state = 2;
  bool has_new_node_or_state() const;
  private:
  bool _internal_has_new_node_or_state() const;
  public:
  void clear_new_node_or_state();
  uint32_t new_node_or_state() const;
  void set_new_node_or_state(uint32_t value);
  private:
  uint32_t _internal_new_node_or_state() const;
  void _internal_set_new_node_or_state(uint32_t value);
  public:

  // optional uint32 old_node_or_state = 3;
  bool has_old_node_or_state() const;
  private:
  bool _internal_has_old_node_or_state() const;
  public:
  void clear_old_node_or_state();
  uint32_t old_node_or_state() const;
  void set_old_node_or_state(uint32_t value);
  private:
  uint32_t _internal_old_node_or_state() const;
  void _internal_set_old_node_or_state(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange.TeamChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t team_gid_;
    uint32_t new_node_or_state_;
    uint32_t old_node_or_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTATournamentStateChange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTATournamentStateChange) */ {
 public:
  inline CMsgDOTATournamentStateChange() : CMsgDOTATournamentStateChange(nullptr) {}
  ~CMsgDOTATournamentStateChange() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTATournamentStateChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from);
  CMsgDOTATournamentStateChange(CMsgDOTATournamentStateChange&& from) noexcept
    : CMsgDOTATournamentStateChange() {
    *this = ::std::move(from);
  }

  inline CMsgDOTATournamentStateChange& operator=(const CMsgDOTATournamentStateChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTATournamentStateChange& operator=(CMsgDOTATournamentStateChange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTATournamentStateChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTATournamentStateChange* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTATournamentStateChange*>(
               &_CMsgDOTATournamentStateChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgDOTATournamentStateChange& a, CMsgDOTATournamentStateChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTATournamentStateChange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTATournamentStateChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTATournamentStateChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTATournamentStateChange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTATournamentStateChange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTATournamentStateChange& from) {
    CMsgDOTATournamentStateChange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTATournamentStateChange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTATournamentStateChange";
  }
  protected:
  explicit CMsgDOTATournamentStateChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTATournamentStateChange_GameChange GameChange;
  typedef CMsgDOTATournamentStateChange_TeamChange TeamChange;

  // accessors -------------------------------------------------------

  enum : int {
    kGameChangesFieldNumber = 4,
    kTeamChangesFieldNumber = 5,
    kMergedTournamentIdsFieldNumber = 6,
    kNewTournamentIdFieldNumber = 1,
    kEventFieldNumber = 2,
    kNewTournamentStateFieldNumber = 3,
    kStateSeqNumFieldNumber = 7,
  };
  // repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  int game_changes_size() const;
  private:
  int _internal_game_changes_size() const;
  public:
  void clear_game_changes();
  ::CMsgDOTATournamentStateChange_GameChange* mutable_game_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >*
      mutable_game_changes();
  private:
  const ::CMsgDOTATournamentStateChange_GameChange& _internal_game_changes(int index) const;
  ::CMsgDOTATournamentStateChange_GameChange* _internal_add_game_changes();
  public:
  const ::CMsgDOTATournamentStateChange_GameChange& game_changes(int index) const;
  ::CMsgDOTATournamentStateChange_GameChange* add_game_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >&
      game_changes() const;

  // repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  int team_changes_size() const;
  private:
  int _internal_team_changes_size() const;
  public:
  void clear_team_changes();
  ::CMsgDOTATournamentStateChange_TeamChange* mutable_team_changes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >*
      mutable_team_changes();
  private:
  const ::CMsgDOTATournamentStateChange_TeamChange& _internal_team_changes(int index) const;
  ::CMsgDOTATournamentStateChange_TeamChange* _internal_add_team_changes();
  public:
  const ::CMsgDOTATournamentStateChange_TeamChange& team_changes(int index) const;
  ::CMsgDOTATournamentStateChange_TeamChange* add_team_changes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >&
      team_changes() const;

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  int merged_tournament_ids_size() const;
  private:
  int _internal_merged_tournament_ids_size() const;
  public:
  void clear_merged_tournament_ids();
  private:
  uint32_t _internal_merged_tournament_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_merged_tournament_ids() const;
  void _internal_add_merged_tournament_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_merged_tournament_ids();
  public:
  uint32_t merged_tournament_ids(int index) const;
  void set_merged_tournament_ids(int index, uint32_t value);
  void add_merged_tournament_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      merged_tournament_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_merged_tournament_ids();

  // optional uint32 new_tournament_id = 1;
  bool has_new_tournament_id() const;
  private:
  bool _internal_has_new_tournament_id() const;
  public:
  void clear_new_tournament_id();
  uint32_t new_tournament_id() const;
  void set_new_tournament_id(uint32_t value);
  private:
  uint32_t _internal_new_tournament_id() const;
  void _internal_set_new_tournament_id(uint32_t value);
  public:

  // optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::ETournamentEvent event() const;
  void set_event(::ETournamentEvent value);
  private:
  ::ETournamentEvent _internal_event() const;
  void _internal_set_event(::ETournamentEvent value);
  public:

  // optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  bool has_new_tournament_state() const;
  private:
  bool _internal_has_new_tournament_state() const;
  public:
  void clear_new_tournament_state();
  ::ETournamentState new_tournament_state() const;
  void set_new_tournament_state(::ETournamentState value);
  private:
  ::ETournamentState _internal_new_tournament_state() const;
  void _internal_set_new_tournament_state(::ETournamentState value);
  public:

  // optional uint32 state_seq_num = 7;
  bool has_state_seq_num() const;
  private:
  bool _internal_has_state_seq_num() const;
  public:
  void clear_state_seq_num();
  uint32_t state_seq_num() const;
  void set_state_seq_num(uint32_t value);
  private:
  uint32_t _internal_state_seq_num() const;
  void _internal_set_state_seq_num(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTATournamentStateChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange > game_changes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange > team_changes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > merged_tournament_ids_;
    mutable std::atomic<int> _merged_tournament_ids_cached_byte_size_;
    uint32_t new_tournament_id_;
    int event_;
    int new_tournament_state_;
    uint32_t state_seq_num_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerSkillLevelStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyPlayerSkillLevelStats) */ {
 public:
  inline CMsgDOTAWeekendTourneyPlayerSkillLevelStats() : CMsgDOTAWeekendTourneyPlayerSkillLevelStats(nullptr) {}
  ~CMsgDOTAWeekendTourneyPlayerSkillLevelStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyPlayerSkillLevelStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from);
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats(CMsgDOTAWeekendTourneyPlayerSkillLevelStats&& from) noexcept
    : CMsgDOTAWeekendTourneyPlayerSkillLevelStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyPlayerSkillLevelStats& operator=(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyPlayerSkillLevelStats& operator=(CMsgDOTAWeekendTourneyPlayerSkillLevelStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyPlayerSkillLevelStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyPlayerSkillLevelStats*>(
               &_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats& a, CMsgDOTAWeekendTourneyPlayerSkillLevelStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerSkillLevelStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
    CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyPlayerSkillLevelStats";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyPlayerSkillLevelStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillLevelFieldNumber = 1,
    kTimesWon0FieldNumber = 2,
    kTimesWon1FieldNumber = 3,
    kTimesWon2FieldNumber = 4,
    kTimesWon3FieldNumber = 5,
    kTimesByeAndLostFieldNumber = 6,
    kTimesByeAndWonFieldNumber = 7,
    kTotalGamesWonFieldNumber = 8,
    kScoreFieldNumber = 9,
    kTimesUnusualChampFieldNumber = 10,
  };
  // optional uint32 skill_level = 1;
  bool has_skill_level() const;
  private:
  bool _internal_has_skill_level() const;
  public:
  void clear_skill_level();
  uint32_t skill_level() const;
  void set_skill_level(uint32_t value);
  private:
  uint32_t _internal_skill_level() const;
  void _internal_set_skill_level(uint32_t value);
  public:

  // optional uint32 times_won_0 = 2;
  bool has_times_won_0() const;
  private:
  bool _internal_has_times_won_0() const;
  public:
  void clear_times_won_0();
  uint32_t times_won_0() const;
  void set_times_won_0(uint32_t value);
  private:
  uint32_t _internal_times_won_0() const;
  void _internal_set_times_won_0(uint32_t value);
  public:

  // optional uint32 times_won_1 = 3;
  bool has_times_won_1() const;
  private:
  bool _internal_has_times_won_1() const;
  public:
  void clear_times_won_1();
  uint32_t times_won_1() const;
  void set_times_won_1(uint32_t value);
  private:
  uint32_t _internal_times_won_1() const;
  void _internal_set_times_won_1(uint32_t value);
  public:

  // optional uint32 times_won_2 = 4;
  bool has_times_won_2() const;
  private:
  bool _internal_has_times_won_2() const;
  public:
  void clear_times_won_2();
  uint32_t times_won_2() const;
  void set_times_won_2(uint32_t value);
  private:
  uint32_t _internal_times_won_2() const;
  void _internal_set_times_won_2(uint32_t value);
  public:

  // optional uint32 times_won_3 = 5;
  bool has_times_won_3() const;
  private:
  bool _internal_has_times_won_3() const;
  public:
  void clear_times_won_3();
  uint32_t times_won_3() const;
  void set_times_won_3(uint32_t value);
  private:
  uint32_t _internal_times_won_3() const;
  void _internal_set_times_won_3(uint32_t value);
  public:

  // optional uint32 times_bye_and_lost = 6;
  bool has_times_bye_and_lost() const;
  private:
  bool _internal_has_times_bye_and_lost() const;
  public:
  void clear_times_bye_and_lost();
  uint32_t times_bye_and_lost() const;
  void set_times_bye_and_lost(uint32_t value);
  private:
  uint32_t _internal_times_bye_and_lost() const;
  void _internal_set_times_bye_and_lost(uint32_t value);
  public:

  // optional uint32 times_bye_and_won = 7;
  bool has_times_bye_and_won() const;
  private:
  bool _internal_has_times_bye_and_won() const;
  public:
  void clear_times_bye_and_won();
  uint32_t times_bye_and_won() const;
  void set_times_bye_and_won(uint32_t value);
  private:
  uint32_t _internal_times_bye_and_won() const;
  void _internal_set_times_bye_and_won(uint32_t value);
  public:

  // optional uint32 total_games_won = 8;
  bool has_total_games_won() const;
  private:
  bool _internal_has_total_games_won() const;
  public:
  void clear_total_games_won();
  uint32_t total_games_won() const;
  void set_total_games_won(uint32_t value);
  private:
  uint32_t _internal_total_games_won() const;
  void _internal_set_total_games_won(uint32_t value);
  public:

  // optional uint32 score = 9;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // optional uint32 times_unusual_champ = 10;
  bool has_times_unusual_champ() const;
  private:
  bool _internal_has_times_unusual_champ() const;
  public:
  void clear_times_unusual_champ();
  uint32_t times_unusual_champ() const;
  void set_times_unusual_champ(uint32_t value);
  private:
  uint32_t _internal_times_unusual_champ() const;
  void _internal_set_times_unusual_champ(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t skill_level_;
    uint32_t times_won_0_;
    uint32_t times_won_1_;
    uint32_t times_won_2_;
    uint32_t times_won_3_;
    uint32_t times_bye_and_lost_;
    uint32_t times_bye_and_won_;
    uint32_t total_games_won_;
    uint32_t score_;
    uint32_t times_unusual_champ_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerStats final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyPlayerStats) */ {
 public:
  inline CMsgDOTAWeekendTourneyPlayerStats() : CMsgDOTAWeekendTourneyPlayerStats(nullptr) {}
  ~CMsgDOTAWeekendTourneyPlayerStats() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyPlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from);
  CMsgDOTAWeekendTourneyPlayerStats(CMsgDOTAWeekendTourneyPlayerStats&& from) noexcept
    : CMsgDOTAWeekendTourneyPlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyPlayerStats& operator=(const CMsgDOTAWeekendTourneyPlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyPlayerStats& operator=(CMsgDOTAWeekendTourneyPlayerStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyPlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyPlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyPlayerStats*>(
               &_CMsgDOTAWeekendTourneyPlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgDOTAWeekendTourneyPlayerStats& a, CMsgDOTAWeekendTourneyPlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyPlayerStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyPlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyPlayerStats>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyPlayerStats& from) {
    CMsgDOTAWeekendTourneyPlayerStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyPlayerStats* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyPlayerStats";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillLevelsFieldNumber = 3,
    kAccountIdFieldNumber = 1,
    kSeasonTrophyIdFieldNumber = 2,
    kCurrentTierFieldNumber = 4,
  };
  // repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  int skill_levels_size() const;
  private:
  int _internal_skill_levels_size() const;
  public:
  void clear_skill_levels();
  ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* mutable_skill_levels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >*
      mutable_skill_levels();
  private:
  const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& _internal_skill_levels(int index) const;
  ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* _internal_add_skill_levels();
  public:
  const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& skill_levels(int index) const;
  ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* add_skill_levels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >&
      skill_levels() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 season_trophy_id = 2;
  bool has_season_trophy_id() const;
  private:
  bool _internal_has_season_trophy_id() const;
  public:
  void clear_season_trophy_id();
  uint32_t season_trophy_id() const;
  void set_season_trophy_id(uint32_t value);
  private:
  uint32_t _internal_season_trophy_id() const;
  void _internal_set_season_trophy_id(uint32_t value);
  public:

  // optional uint32 current_tier = 4;
  bool has_current_tier() const;
  private:
  bool _internal_has_current_tier() const;
  public:
  void clear_current_tier();
  uint32_t current_tier() const;
  void set_current_tier(uint32_t value);
  private:
  uint32_t _internal_current_tier() const;
  void _internal_set_current_tier(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats > skill_levels_;
    uint32_t account_id_;
    uint32_t season_trophy_id_;
    uint32_t current_tier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerStatsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyPlayerStatsRequest) */ {
 public:
  inline CMsgDOTAWeekendTourneyPlayerStatsRequest() : CMsgDOTAWeekendTourneyPlayerStatsRequest(nullptr) {}
  ~CMsgDOTAWeekendTourneyPlayerStatsRequest() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyPlayerStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from);
  CMsgDOTAWeekendTourneyPlayerStatsRequest(CMsgDOTAWeekendTourneyPlayerStatsRequest&& from) noexcept
    : CMsgDOTAWeekendTourneyPlayerStatsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyPlayerStatsRequest& operator=(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyPlayerStatsRequest& operator=(CMsgDOTAWeekendTourneyPlayerStatsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyPlayerStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyPlayerStatsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyPlayerStatsRequest*>(
               &_CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgDOTAWeekendTourneyPlayerStatsRequest& a, CMsgDOTAWeekendTourneyPlayerStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyPlayerStatsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
    CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyPlayerStatsRequest";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyPlayerStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kSeasonTrophyIdFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 season_trophy_id = 2;
  bool has_season_trophy_id() const;
  private:
  bool _internal_has_season_trophy_id() const;
  public:
  void clear_season_trophy_id();
  uint32_t season_trophy_id() const;
  void set_season_trophy_id(uint32_t value);
  private:
  uint32_t _internal_season_trophy_id() const;
  void _internal_set_season_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t account_id_;
    uint32_t season_trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerHistory_Tournament final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyPlayerHistory.Tournament) */ {
 public:
  inline CMsgDOTAWeekendTourneyPlayerHistory_Tournament() : CMsgDOTAWeekendTourneyPlayerHistory_Tournament(nullptr) {}
  ~CMsgDOTAWeekendTourneyPlayerHistory_Tournament() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyPlayerHistory_Tournament(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from);
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament(CMsgDOTAWeekendTourneyPlayerHistory_Tournament&& from) noexcept
    : CMsgDOTAWeekendTourneyPlayerHistory_Tournament() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyPlayerHistory_Tournament& operator=(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyPlayerHistory_Tournament& operator=(CMsgDOTAWeekendTourneyPlayerHistory_Tournament&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyPlayerHistory_Tournament* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyPlayerHistory_Tournament*>(
               &_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament& a, CMsgDOTAWeekendTourneyPlayerHistory_Tournament& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerHistory_Tournament* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyPlayerHistory_Tournament>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
    CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyPlayerHistory.Tournament";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyPlayerHistory_Tournament(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 7,
    kTeamNameFieldNumber = 8,
    kTournamentIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kTournamentTierFieldNumber = 3,
    kTeamIdFieldNumber = 4,
    kTeamDateFieldNumber = 5,
    kTeamResultFieldNumber = 6,
    kSeasonTrophyIdFieldNumber = 9,
  };
  // repeated uint32 account_id = 7;
  int account_id_size() const;
  private:
  int _internal_account_id_size() const;
  public:
  void clear_account_id();
  private:
  uint32_t _internal_account_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_account_id() const;
  void _internal_add_account_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_account_id();
  public:
  uint32_t account_id(int index) const;
  void set_account_id(int index, uint32_t value);
  void add_account_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      account_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_account_id();

  // optional string team_name = 8;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_name();
  PROTOBUF_NODISCARD std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 tournament_id = 1;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  uint32_t tournament_id() const;
  void set_tournament_id(uint32_t value);
  private:
  uint32_t _internal_tournament_id() const;
  void _internal_set_tournament_id(uint32_t value);
  public:

  // optional uint32 start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  uint32_t start_time() const;
  void set_start_time(uint32_t value);
  private:
  uint32_t _internal_start_time() const;
  void _internal_set_start_time(uint32_t value);
  public:

  // optional uint32 tournament_tier = 3;
  bool has_tournament_tier() const;
  private:
  bool _internal_has_tournament_tier() const;
  public:
  void clear_tournament_tier();
  uint32_t tournament_tier() const;
  void set_tournament_tier(uint32_t value);
  private:
  uint32_t _internal_tournament_tier() const;
  void _internal_set_tournament_tier(uint32_t value);
  public:

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  uint32_t team_id() const;
  void set_team_id(uint32_t value);
  private:
  uint32_t _internal_team_id() const;
  void _internal_set_team_id(uint32_t value);
  public:

  // optional uint32 team_date = 5;
  bool has_team_date() const;
  private:
  bool _internal_has_team_date() const;
  public:
  void clear_team_date();
  uint32_t team_date() const;
  void set_team_date(uint32_t value);
  private:
  uint32_t _internal_team_date() const;
  void _internal_set_team_date(uint32_t value);
  public:

  // optional uint32 team_result = 6;
  bool has_team_result() const;
  private:
  bool _internal_has_team_result() const;
  public:
  void clear_team_result();
  uint32_t team_result() const;
  void set_team_result(uint32_t value);
  private:
  uint32_t _internal_team_result() const;
  void _internal_set_team_result(uint32_t value);
  public:

  // optional uint32 season_trophy_id = 9;
  bool has_season_trophy_id() const;
  private:
  bool _internal_has_season_trophy_id() const;
  public:
  void clear_season_trophy_id();
  uint32_t season_trophy_id() const;
  void set_season_trophy_id(uint32_t value);
  private:
  uint32_t _internal_season_trophy_id() const;
  void _internal_set_season_trophy_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
    uint32_t tournament_id_;
    uint32_t start_time_;
    uint32_t tournament_tier_;
    uint32_t team_id_;
    uint32_t team_date_;
    uint32_t team_result_;
    uint32_t season_trophy_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyPlayerHistory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyPlayerHistory) */ {
 public:
  inline CMsgDOTAWeekendTourneyPlayerHistory() : CMsgDOTAWeekendTourneyPlayerHistory(nullptr) {}
  ~CMsgDOTAWeekendTourneyPlayerHistory() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyPlayerHistory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from);
  CMsgDOTAWeekendTourneyPlayerHistory(CMsgDOTAWeekendTourneyPlayerHistory&& from) noexcept
    : CMsgDOTAWeekendTourneyPlayerHistory() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyPlayerHistory& operator=(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyPlayerHistory& operator=(CMsgDOTAWeekendTourneyPlayerHistory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyPlayerHistory& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyPlayerHistory* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyPlayerHistory*>(
               &_CMsgDOTAWeekendTourneyPlayerHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgDOTAWeekendTourneyPlayerHistory& a, CMsgDOTAWeekendTourneyPlayerHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyPlayerHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyPlayerHistory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyPlayerHistory& from) {
    CMsgDOTAWeekendTourneyPlayerHistory::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyPlayerHistory";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyPlayerHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAWeekendTourneyPlayerHistory_Tournament Tournament;

  // accessors -------------------------------------------------------

  enum : int {
    kTournamentsFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  int tournaments_size() const;
  private:
  int _internal_tournaments_size() const;
  public:
  void clear_tournaments();
  ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* mutable_tournaments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >*
      mutable_tournaments();
  private:
  const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& _internal_tournaments(int index) const;
  ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* _internal_add_tournaments();
  public:
  const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& tournaments(int index) const;
  ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* add_tournaments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >&
      tournaments() const;

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyPlayerHistory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament > tournaments_;
    uint32_t account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails_Tier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyParticipationDetails.Tier) */ {
 public:
  inline CMsgDOTAWeekendTourneyParticipationDetails_Tier() : CMsgDOTAWeekendTourneyParticipationDetails_Tier(nullptr) {}
  ~CMsgDOTAWeekendTourneyParticipationDetails_Tier() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyParticipationDetails_Tier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from);
  CMsgDOTAWeekendTourneyParticipationDetails_Tier(CMsgDOTAWeekendTourneyParticipationDetails_Tier&& from) noexcept
    : CMsgDOTAWeekendTourneyParticipationDetails_Tier() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyParticipationDetails_Tier& operator=(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyParticipationDetails_Tier& operator=(CMsgDOTAWeekendTourneyParticipationDetails_Tier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyParticipationDetails_Tier& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyParticipationDetails_Tier* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyParticipationDetails_Tier*>(
               &_CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier& a, CMsgDOTAWeekendTourneyParticipationDetails_Tier& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails_Tier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyParticipationDetails_Tier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
    CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyParticipationDetails.Tier";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyParticipationDetails_Tier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTierFieldNumber = 1,
    kPlayersFieldNumber = 2,
    kTeamsFieldNumber = 3,
    kWinningTeamsFieldNumber = 4,
    kPlayersStreak2FieldNumber = 5,
    kPlayersStreak3FieldNumber = 6,
    kPlayersStreak4FieldNumber = 7,
    kPlayersStreak5FieldNumber = 8,
  };
  // optional uint32 tier = 1;
  bool has_tier() const;
  private:
  bool _internal_has_tier() const;
  public:
  void clear_tier();
  uint32_t tier() const;
  void set_tier(uint32_t value);
  private:
  uint32_t _internal_tier() const;
  void _internal_set_tier(uint32_t value);
  public:

  // optional uint32 players = 2;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  uint32_t players() const;
  void set_players(uint32_t value);
  private:
  uint32_t _internal_players() const;
  void _internal_set_players(uint32_t value);
  public:

  // optional uint32 teams = 3;
  bool has_teams() const;
  private:
  bool _internal_has_teams() const;
  public:
  void clear_teams();
  uint32_t teams() const;
  void set_teams(uint32_t value);
  private:
  uint32_t _internal_teams() const;
  void _internal_set_teams(uint32_t value);
  public:

  // optional uint32 winning_teams = 4;
  bool has_winning_teams() const;
  private:
  bool _internal_has_winning_teams() const;
  public:
  void clear_winning_teams();
  uint32_t winning_teams() const;
  void set_winning_teams(uint32_t value);
  private:
  uint32_t _internal_winning_teams() const;
  void _internal_set_winning_teams(uint32_t value);
  public:

  // optional uint32 players_streak_2 = 5;
  bool has_players_streak_2() const;
  private:
  bool _internal_has_players_streak_2() const;
  public:
  void clear_players_streak_2();
  uint32_t players_streak_2() const;
  void set_players_streak_2(uint32_t value);
  private:
  uint32_t _internal_players_streak_2() const;
  void _internal_set_players_streak_2(uint32_t value);
  public:

  // optional uint32 players_streak_3 = 6;
  bool has_players_streak_3() const;
  private:
  bool _internal_has_players_streak_3() const;
  public:
  void clear_players_streak_3();
  uint32_t players_streak_3() const;
  void set_players_streak_3(uint32_t value);
  private:
  uint32_t _internal_players_streak_3() const;
  void _internal_set_players_streak_3(uint32_t value);
  public:

  // optional uint32 players_streak_4 = 7;
  bool has_players_streak_4() const;
  private:
  bool _internal_has_players_streak_4() const;
  public:
  void clear_players_streak_4();
  uint32_t players_streak_4() const;
  void set_players_streak_4(uint32_t value);
  private:
  uint32_t _internal_players_streak_4() const;
  void _internal_set_players_streak_4(uint32_t value);
  public:

  // optional uint32 players_streak_5 = 8;
  bool has_players_streak_5() const;
  private:
  bool _internal_has_players_streak_5() const;
  public:
  void clear_players_streak_5();
  uint32_t players_streak_5() const;
  void set_players_streak_5(uint32_t value);
  private:
  uint32_t _internal_players_streak_5() const;
  void _internal_set_players_streak_5(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails.Tier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t tier_;
    uint32_t players_;
    uint32_t teams_;
    uint32_t winning_teams_;
    uint32_t players_streak_2_;
    uint32_t players_streak_3_;
    uint32_t players_streak_4_;
    uint32_t players_streak_5_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails_Division final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyParticipationDetails.Division) */ {
 public:
  inline CMsgDOTAWeekendTourneyParticipationDetails_Division() : CMsgDOTAWeekendTourneyParticipationDetails_Division(nullptr) {}
  ~CMsgDOTAWeekendTourneyParticipationDetails_Division() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyParticipationDetails_Division(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from);
  CMsgDOTAWeekendTourneyParticipationDetails_Division(CMsgDOTAWeekendTourneyParticipationDetails_Division&& from) noexcept
    : CMsgDOTAWeekendTourneyParticipationDetails_Division() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyParticipationDetails_Division& operator=(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyParticipationDetails_Division& operator=(CMsgDOTAWeekendTourneyParticipationDetails_Division&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyParticipationDetails_Division& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyParticipationDetails_Division* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyParticipationDetails_Division*>(
               &_CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgDOTAWeekendTourneyParticipationDetails_Division& a, CMsgDOTAWeekendTourneyParticipationDetails_Division& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails_Division* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyParticipationDetails_Division>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
    CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyParticipationDetails.Division";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyParticipationDetails_Division(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 3,
    kDivisionIdFieldNumber = 1,
    kScheduleTimeFieldNumber = 2,
  };
  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* mutable_tiers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >*
      mutable_tiers();
  private:
  const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& _internal_tiers(int index) const;
  ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* _internal_add_tiers();
  public:
  const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& tiers(int index) const;
  ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* add_tiers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >&
      tiers() const;

  // optional uint32 division_id = 1;
  bool has_division_id() const;
  private:
  bool _internal_has_division_id() const;
  public:
  void clear_division_id();
  uint32_t division_id() const;
  void set_division_id(uint32_t value);
  private:
  uint32_t _internal_division_id() const;
  void _internal_set_division_id(uint32_t value);
  public:

  // optional uint32 schedule_time = 2;
  bool has_schedule_time() const;
  private:
  bool _internal_has_schedule_time() const;
  public:
  void clear_schedule_time();
  uint32_t schedule_time() const;
  void set_schedule_time(uint32_t value);
  private:
  uint32_t _internal_schedule_time() const;
  void _internal_set_schedule_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails.Division)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier > tiers_;
    uint32_t division_id_;
    uint32_t schedule_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAWeekendTourneyParticipationDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAWeekendTourneyParticipationDetails) */ {
 public:
  inline CMsgDOTAWeekendTourneyParticipationDetails() : CMsgDOTAWeekendTourneyParticipationDetails(nullptr) {}
  ~CMsgDOTAWeekendTourneyParticipationDetails() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAWeekendTourneyParticipationDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from);
  CMsgDOTAWeekendTourneyParticipationDetails(CMsgDOTAWeekendTourneyParticipationDetails&& from) noexcept
    : CMsgDOTAWeekendTourneyParticipationDetails() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAWeekendTourneyParticipationDetails& operator=(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAWeekendTourneyParticipationDetails& operator=(CMsgDOTAWeekendTourneyParticipationDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAWeekendTourneyParticipationDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAWeekendTourneyParticipationDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAWeekendTourneyParticipationDetails*>(
               &_CMsgDOTAWeekendTourneyParticipationDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgDOTAWeekendTourneyParticipationDetails& a, CMsgDOTAWeekendTourneyParticipationDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAWeekendTourneyParticipationDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAWeekendTourneyParticipationDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAWeekendTourneyParticipationDetails& from) {
    CMsgDOTAWeekendTourneyParticipationDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAWeekendTourneyParticipationDetails";
  }
  protected:
  explicit CMsgDOTAWeekendTourneyParticipationDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAWeekendTourneyParticipationDetails_Tier Tier;
  typedef CMsgDOTAWeekendTourneyParticipationDetails_Division Division;

  // accessors -------------------------------------------------------

  enum : int {
    kDivisionsFieldNumber = 1,
  };
  // repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  int divisions_size() const;
  private:
  int _internal_divisions_size() const;
  public:
  void clear_divisions();
  ::CMsgDOTAWeekendTourneyParticipationDetails_Division* mutable_divisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >*
      mutable_divisions();
  private:
  const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& _internal_divisions(int index) const;
  ::CMsgDOTAWeekendTourneyParticipationDetails_Division* _internal_add_divisions();
  public:
  const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& divisions(int index) const;
  ::CMsgDOTAWeekendTourneyParticipationDetails_Division* add_divisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >&
      divisions() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAWeekendTourneyParticipationDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division > divisions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgRequestWeekendTourneySchedule

// -------------------------------------------------------------------

// CMsgWeekendTourneySchedule_Division

// optional uint32 division_code = 1;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_division_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_division_code() const {
  return _internal_has_division_code();
}
inline void CMsgWeekendTourneySchedule_Division::clear_division_code() {
  _impl_.division_code_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::_internal_division_code() const {
  return _impl_.division_code_;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::division_code() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.division_code)
  return _internal_division_code();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_division_code(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.division_code_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_division_code(uint32_t value) {
  _internal_set_division_code(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.division_code)
}

// optional uint32 time_window_open = 2;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_time_window_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_open() const {
  return _internal_has_time_window_open();
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_open() {
  _impl_.time_window_open_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::_internal_time_window_open() const {
  return _impl_.time_window_open_;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::time_window_open() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_open)
  return _internal_time_window_open();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_time_window_open(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.time_window_open_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_open(uint32_t value) {
  _internal_set_time_window_open(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_open)
}

// optional uint32 time_window_close = 3;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_time_window_close() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_close() const {
  return _internal_has_time_window_close();
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_close() {
  _impl_.time_window_close_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::_internal_time_window_close() const {
  return _impl_.time_window_close_;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::time_window_close() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_close)
  return _internal_time_window_close();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_time_window_close(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.time_window_close_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_close(uint32_t value) {
  _internal_set_time_window_close(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_close)
}

// optional uint32 time_window_open_next = 4;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_time_window_open_next() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_time_window_open_next() const {
  return _internal_has_time_window_open_next();
}
inline void CMsgWeekendTourneySchedule_Division::clear_time_window_open_next() {
  _impl_.time_window_open_next_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::_internal_time_window_open_next() const {
  return _impl_.time_window_open_next_;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::time_window_open_next() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.time_window_open_next)
  return _internal_time_window_open_next();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_time_window_open_next(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.time_window_open_next_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_time_window_open_next(uint32_t value) {
  _internal_set_time_window_open_next(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.time_window_open_next)
}

// optional uint32 trophy_id = 5;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_trophy_id() const {
  return _internal_has_trophy_id();
}
inline void CMsgWeekendTourneySchedule_Division::clear_trophy_id() {
  _impl_.trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::_internal_trophy_id() const {
  return _impl_.trophy_id_;
}
inline uint32_t CMsgWeekendTourneySchedule_Division::trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.trophy_id)
  return _internal_trophy_id();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.trophy_id_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_trophy_id(uint32_t value) {
  _internal_set_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.trophy_id)
}

// optional bool free_weekend = 6;
inline bool CMsgWeekendTourneySchedule_Division::_internal_has_free_weekend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgWeekendTourneySchedule_Division::has_free_weekend() const {
  return _internal_has_free_weekend();
}
inline void CMsgWeekendTourneySchedule_Division::clear_free_weekend() {
  _impl_.free_weekend_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgWeekendTourneySchedule_Division::_internal_free_weekend() const {
  return _impl_.free_weekend_;
}
inline bool CMsgWeekendTourneySchedule_Division::free_weekend() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.Division.free_weekend)
  return _internal_free_weekend();
}
inline void CMsgWeekendTourneySchedule_Division::_internal_set_free_weekend(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.free_weekend_ = value;
}
inline void CMsgWeekendTourneySchedule_Division::set_free_weekend(bool value) {
  _internal_set_free_weekend(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneySchedule.Division.free_weekend)
}

// -------------------------------------------------------------------

// CMsgWeekendTourneySchedule

// repeated .CMsgWeekendTourneySchedule.Division divisions = 1;
inline int CMsgWeekendTourneySchedule::_internal_divisions_size() const {
  return _impl_.divisions_.size();
}
inline int CMsgWeekendTourneySchedule::divisions_size() const {
  return _internal_divisions_size();
}
inline void CMsgWeekendTourneySchedule::clear_divisions() {
  _impl_.divisions_.Clear();
}
inline ::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgWeekendTourneySchedule.divisions)
  return _impl_.divisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >*
CMsgWeekendTourneySchedule::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgWeekendTourneySchedule.divisions)
  return &_impl_.divisions_;
}
inline const ::CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule::_internal_divisions(int index) const {
  return _impl_.divisions_.Get(index);
}
inline const ::CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule::divisions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneySchedule.divisions)
  return _internal_divisions(index);
}
inline ::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::_internal_add_divisions() {
  return _impl_.divisions_.Add();
}
inline ::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::add_divisions() {
  ::CMsgWeekendTourneySchedule_Division* _add = _internal_add_divisions();
  // @@protoc_insertion_point(field_add:CMsgWeekendTourneySchedule.divisions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgWeekendTourneySchedule_Division >&
CMsgWeekendTourneySchedule::divisions() const {
  // @@protoc_insertion_point(field_list:CMsgWeekendTourneySchedule.divisions)
  return _impl_.divisions_;
}

// -------------------------------------------------------------------

// CMsgWeekendTourneyOpts

// optional bool participating = 1;
inline bool CMsgWeekendTourneyOpts::_internal_has_participating() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_participating() const {
  return _internal_has_participating();
}
inline void CMsgWeekendTourneyOpts::clear_participating() {
  _impl_.participating_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgWeekendTourneyOpts::_internal_participating() const {
  return _impl_.participating_;
}
inline bool CMsgWeekendTourneyOpts::participating() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.participating)
  return _internal_participating();
}
inline void CMsgWeekendTourneyOpts::_internal_set_participating(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.participating_ = value;
}
inline void CMsgWeekendTourneyOpts::set_participating(bool value) {
  _internal_set_participating(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.participating)
}

// optional uint32 division_id = 2;
inline bool CMsgWeekendTourneyOpts::_internal_has_division_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_division_id() const {
  return _internal_has_division_id();
}
inline void CMsgWeekendTourneyOpts::clear_division_id() {
  _impl_.division_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgWeekendTourneyOpts::_internal_division_id() const {
  return _impl_.division_id_;
}
inline uint32_t CMsgWeekendTourneyOpts::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.division_id)
  return _internal_division_id();
}
inline void CMsgWeekendTourneyOpts::_internal_set_division_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.division_id_ = value;
}
inline void CMsgWeekendTourneyOpts::set_division_id(uint32_t value) {
  _internal_set_division_id(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.division_id)
}

// optional uint32 buyin = 3;
inline bool CMsgWeekendTourneyOpts::_internal_has_buyin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_buyin() const {
  return _internal_has_buyin();
}
inline void CMsgWeekendTourneyOpts::clear_buyin() {
  _impl_.buyin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgWeekendTourneyOpts::_internal_buyin() const {
  return _impl_.buyin_;
}
inline uint32_t CMsgWeekendTourneyOpts::buyin() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.buyin)
  return _internal_buyin();
}
inline void CMsgWeekendTourneyOpts::_internal_set_buyin(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.buyin_ = value;
}
inline void CMsgWeekendTourneyOpts::set_buyin(uint32_t value) {
  _internal_set_buyin(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.buyin)
}

// optional uint32 skill_level = 4;
inline bool CMsgWeekendTourneyOpts::_internal_has_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void CMsgWeekendTourneyOpts::clear_skill_level() {
  _impl_.skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgWeekendTourneyOpts::_internal_skill_level() const {
  return _impl_.skill_level_;
}
inline uint32_t CMsgWeekendTourneyOpts::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.skill_level)
  return _internal_skill_level();
}
inline void CMsgWeekendTourneyOpts::_internal_set_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.skill_level_ = value;
}
inline void CMsgWeekendTourneyOpts::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.skill_level)
}

// optional uint32 match_groups = 5;
inline bool CMsgWeekendTourneyOpts::_internal_has_match_groups() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_match_groups() const {
  return _internal_has_match_groups();
}
inline void CMsgWeekendTourneyOpts::clear_match_groups() {
  _impl_.match_groups_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgWeekendTourneyOpts::_internal_match_groups() const {
  return _impl_.match_groups_;
}
inline uint32_t CMsgWeekendTourneyOpts::match_groups() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.match_groups)
  return _internal_match_groups();
}
inline void CMsgWeekendTourneyOpts::_internal_set_match_groups(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.match_groups_ = value;
}
inline void CMsgWeekendTourneyOpts::set_match_groups(uint32_t value) {
  _internal_set_match_groups(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.match_groups)
}

// optional uint32 team_id = 6;
inline bool CMsgWeekendTourneyOpts::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgWeekendTourneyOpts::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgWeekendTourneyOpts::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgWeekendTourneyOpts::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.team_id)
  return _internal_team_id();
}
inline void CMsgWeekendTourneyOpts::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_id_ = value;
}
inline void CMsgWeekendTourneyOpts::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.team_id)
}

// optional string pickup_team_name = 7;
inline bool CMsgWeekendTourneyOpts::_internal_has_pickup_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_pickup_team_name() const {
  return _internal_has_pickup_team_name();
}
inline void CMsgWeekendTourneyOpts::clear_pickup_team_name() {
  _impl_.pickup_team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgWeekendTourneyOpts::pickup_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.pickup_team_name)
  return _internal_pickup_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgWeekendTourneyOpts::set_pickup_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.pickup_team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.pickup_team_name)
}
inline std::string* CMsgWeekendTourneyOpts::mutable_pickup_team_name() {
  std::string* _s = _internal_mutable_pickup_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgWeekendTourneyOpts.pickup_team_name)
  return _s;
}
inline const std::string& CMsgWeekendTourneyOpts::_internal_pickup_team_name() const {
  return _impl_.pickup_team_name_.Get();
}
inline void CMsgWeekendTourneyOpts::_internal_set_pickup_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.pickup_team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgWeekendTourneyOpts::_internal_mutable_pickup_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.pickup_team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgWeekendTourneyOpts::release_pickup_team_name() {
  // @@protoc_insertion_point(field_release:CMsgWeekendTourneyOpts.pickup_team_name)
  if (!_internal_has_pickup_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.pickup_team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pickup_team_name_.IsDefault()) {
    _impl_.pickup_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgWeekendTourneyOpts::set_allocated_pickup_team_name(std::string* pickup_team_name) {
  if (pickup_team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pickup_team_name_.SetAllocated(pickup_team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pickup_team_name_.IsDefault()) {
    _impl_.pickup_team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgWeekendTourneyOpts.pickup_team_name)
}

// optional uint64 pickup_team_logo = 8;
inline bool CMsgWeekendTourneyOpts::_internal_has_pickup_team_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgWeekendTourneyOpts::has_pickup_team_logo() const {
  return _internal_has_pickup_team_logo();
}
inline void CMsgWeekendTourneyOpts::clear_pickup_team_logo() {
  _impl_.pickup_team_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint64_t CMsgWeekendTourneyOpts::_internal_pickup_team_logo() const {
  return _impl_.pickup_team_logo_;
}
inline uint64_t CMsgWeekendTourneyOpts::pickup_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgWeekendTourneyOpts.pickup_team_logo)
  return _internal_pickup_team_logo();
}
inline void CMsgWeekendTourneyOpts::_internal_set_pickup_team_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.pickup_team_logo_ = value;
}
inline void CMsgWeekendTourneyOpts::set_pickup_team_logo(uint64_t value) {
  _internal_set_pickup_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgWeekendTourneyOpts.pickup_team_logo)
}

// -------------------------------------------------------------------

// CMsgWeekendTourneyLeave

// -------------------------------------------------------------------

// CMsgDOTATournament_Team

// optional fixed64 team_gid = 1;
inline bool CMsgDOTATournament_Team::_internal_has_team_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_team_gid() const {
  return _internal_has_team_gid();
}
inline void CMsgDOTATournament_Team::clear_team_gid() {
  _impl_.team_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTATournament_Team::_internal_team_gid() const {
  return _impl_.team_gid_;
}
inline uint64_t CMsgDOTATournament_Team::team_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_gid)
  return _internal_team_gid();
}
inline void CMsgDOTATournament_Team::_internal_set_team_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_gid_ = value;
}
inline void CMsgDOTATournament_Team::set_team_gid(uint64_t value) {
  _internal_set_team_gid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_gid)
}

// optional uint32 node_or_state = 2;
inline bool CMsgDOTATournament_Team::_internal_has_node_or_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_node_or_state() const {
  return _internal_has_node_or_state();
}
inline void CMsgDOTATournament_Team::clear_node_or_state() {
  _impl_.node_or_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTATournament_Team::_internal_node_or_state() const {
  return _impl_.node_or_state_;
}
inline uint32_t CMsgDOTATournament_Team::node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.node_or_state)
  return _internal_node_or_state();
}
inline void CMsgDOTATournament_Team::_internal_set_node_or_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.node_or_state_ = value;
}
inline void CMsgDOTATournament_Team::set_node_or_state(uint32_t value) {
  _internal_set_node_or_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.node_or_state)
}

// repeated uint32 players = 3 [packed = true];
inline int CMsgDOTATournament_Team::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int CMsgDOTATournament_Team::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTATournament_Team::clear_players() {
  _impl_.players_.Clear();
}
inline uint32_t CMsgDOTATournament_Team::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline uint32_t CMsgDOTATournament_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.players)
  return _internal_players(index);
}
inline void CMsgDOTATournament_Team::set_players(int index, uint32_t value) {
  _impl_.players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.players)
}
inline void CMsgDOTATournament_Team::_internal_add_players(uint32_t value) {
  _impl_.players_.Add(value);
}
inline void CMsgDOTATournament_Team::add_players(uint32_t value) {
  _internal_add_players(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::_internal_players() const {
  return _impl_.players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.players)
  return _internal_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::_internal_mutable_players() {
  return &_impl_.players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.players)
  return _internal_mutable_players();
}

// repeated uint32 player_buyin = 9 [packed = true];
inline int CMsgDOTATournament_Team::_internal_player_buyin_size() const {
  return _impl_.player_buyin_.size();
}
inline int CMsgDOTATournament_Team::player_buyin_size() const {
  return _internal_player_buyin_size();
}
inline void CMsgDOTATournament_Team::clear_player_buyin() {
  _impl_.player_buyin_.Clear();
}
inline uint32_t CMsgDOTATournament_Team::_internal_player_buyin(int index) const {
  return _impl_.player_buyin_.Get(index);
}
inline uint32_t CMsgDOTATournament_Team::player_buyin(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.player_buyin)
  return _internal_player_buyin(index);
}
inline void CMsgDOTATournament_Team::set_player_buyin(int index, uint32_t value) {
  _impl_.player_buyin_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.player_buyin)
}
inline void CMsgDOTATournament_Team::_internal_add_player_buyin(uint32_t value) {
  _impl_.player_buyin_.Add(value);
}
inline void CMsgDOTATournament_Team::add_player_buyin(uint32_t value) {
  _internal_add_player_buyin(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.player_buyin)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::_internal_player_buyin() const {
  return _impl_.player_buyin_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::player_buyin() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.player_buyin)
  return _internal_player_buyin();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::_internal_mutable_player_buyin() {
  return &_impl_.player_buyin_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::mutable_player_buyin() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.player_buyin)
  return _internal_mutable_player_buyin();
}

// repeated uint32 player_skill_level = 10 [packed = true];
inline int CMsgDOTATournament_Team::_internal_player_skill_level_size() const {
  return _impl_.player_skill_level_.size();
}
inline int CMsgDOTATournament_Team::player_skill_level_size() const {
  return _internal_player_skill_level_size();
}
inline void CMsgDOTATournament_Team::clear_player_skill_level() {
  _impl_.player_skill_level_.Clear();
}
inline uint32_t CMsgDOTATournament_Team::_internal_player_skill_level(int index) const {
  return _impl_.player_skill_level_.Get(index);
}
inline uint32_t CMsgDOTATournament_Team::player_skill_level(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.player_skill_level)
  return _internal_player_skill_level(index);
}
inline void CMsgDOTATournament_Team::set_player_skill_level(int index, uint32_t value) {
  _impl_.player_skill_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.player_skill_level)
}
inline void CMsgDOTATournament_Team::_internal_add_player_skill_level(uint32_t value) {
  _impl_.player_skill_level_.Add(value);
}
inline void CMsgDOTATournament_Team::add_player_skill_level(uint32_t value) {
  _internal_add_player_skill_level(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.Team.player_skill_level)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::_internal_player_skill_level() const {
  return _impl_.player_skill_level_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournament_Team::player_skill_level() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.Team.player_skill_level)
  return _internal_player_skill_level();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::_internal_mutable_player_skill_level() {
  return &_impl_.player_skill_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournament_Team::mutable_player_skill_level() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.Team.player_skill_level)
  return _internal_mutable_player_skill_level();
}

// optional uint32 match_group_mask = 12;
inline bool CMsgDOTATournament_Team::_internal_has_match_group_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_match_group_mask() const {
  return _internal_has_match_group_mask();
}
inline void CMsgDOTATournament_Team::clear_match_group_mask() {
  _impl_.match_group_mask_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTATournament_Team::_internal_match_group_mask() const {
  return _impl_.match_group_mask_;
}
inline uint32_t CMsgDOTATournament_Team::match_group_mask() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.match_group_mask)
  return _internal_match_group_mask();
}
inline void CMsgDOTATournament_Team::_internal_set_match_group_mask(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.match_group_mask_ = value;
}
inline void CMsgDOTATournament_Team::set_match_group_mask(uint32_t value) {
  _internal_set_match_group_mask(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.match_group_mask)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTATournament_Team::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTATournament_Team::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTATournament_Team::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTATournament_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_id)
  return _internal_team_id();
}
inline void CMsgDOTATournament_Team::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTATournament_Team::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_id)
}

// optional string team_name = 5;
inline bool CMsgDOTATournament_Team::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTATournament_Team::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTATournament_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTATournament_Team::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_name)
}
inline std::string* CMsgDOTATournament_Team::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.Team.team_name)
  return _s;
}
inline const std::string& CMsgDOTATournament_Team::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTATournament_Team::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTATournament_Team::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTATournament_Team::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTATournament.Team.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTATournament_Team::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTATournament.Team.team_name)
}

// optional uint64 team_base_logo = 7;
inline bool CMsgDOTATournament_Team::_internal_has_team_base_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_team_base_logo() const {
  return _internal_has_team_base_logo();
}
inline void CMsgDOTATournament_Team::clear_team_base_logo() {
  _impl_.team_base_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgDOTATournament_Team::_internal_team_base_logo() const {
  return _impl_.team_base_logo_;
}
inline uint64_t CMsgDOTATournament_Team::team_base_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_base_logo)
  return _internal_team_base_logo();
}
inline void CMsgDOTATournament_Team::_internal_set_team_base_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_base_logo_ = value;
}
inline void CMsgDOTATournament_Team::set_team_base_logo(uint64_t value) {
  _internal_set_team_base_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_base_logo)
}

// optional uint64 team_ui_logo = 8;
inline bool CMsgDOTATournament_Team::_internal_has_team_ui_logo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Team::has_team_ui_logo() const {
  return _internal_has_team_ui_logo();
}
inline void CMsgDOTATournament_Team::clear_team_ui_logo() {
  _impl_.team_ui_logo_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t CMsgDOTATournament_Team::_internal_team_ui_logo() const {
  return _impl_.team_ui_logo_;
}
inline uint64_t CMsgDOTATournament_Team::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Team.team_ui_logo)
  return _internal_team_ui_logo();
}
inline void CMsgDOTATournament_Team::_internal_set_team_ui_logo(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_ui_logo_ = value;
}
inline void CMsgDOTATournament_Team::set_team_ui_logo(uint64_t value) {
  _internal_set_team_ui_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Team.team_ui_logo)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Game

// optional uint32 node_idx = 1;
inline bool CMsgDOTATournament_Game::_internal_has_node_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_node_idx() const {
  return _internal_has_node_idx();
}
inline void CMsgDOTATournament_Game::clear_node_idx() {
  _impl_.node_idx_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATournament_Game::_internal_node_idx() const {
  return _impl_.node_idx_;
}
inline uint32_t CMsgDOTATournament_Game::node_idx() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.node_idx)
  return _internal_node_idx();
}
inline void CMsgDOTATournament_Game::_internal_set_node_idx(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.node_idx_ = value;
}
inline void CMsgDOTATournament_Game::set_node_idx(uint32_t value) {
  _internal_set_node_idx(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.node_idx)
}

// optional fixed64 lobby_id = 2;
inline bool CMsgDOTATournament_Game::_internal_has_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgDOTATournament_Game::clear_lobby_id() {
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTATournament_Game::_internal_lobby_id() const {
  return _impl_.lobby_id_;
}
inline uint64_t CMsgDOTATournament_Game::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgDOTATournament_Game::_internal_set_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lobby_id_ = value;
}
inline void CMsgDOTATournament_Game::set_lobby_id(uint64_t value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.lobby_id)
}

// optional uint64 match_id = 3;
inline bool CMsgDOTATournament_Game::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTATournament_Game::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t CMsgDOTATournament_Game::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTATournament_Game::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.match_id)
  return _internal_match_id();
}
inline void CMsgDOTATournament_Game::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTATournament_Game::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.match_id)
}

// optional bool team_a_good = 4;
inline bool CMsgDOTATournament_Game::_internal_has_team_a_good() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_team_a_good() const {
  return _internal_has_team_a_good();
}
inline void CMsgDOTATournament_Game::clear_team_a_good() {
  _impl_.team_a_good_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTATournament_Game::_internal_team_a_good() const {
  return _impl_.team_a_good_;
}
inline bool CMsgDOTATournament_Game::team_a_good() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.team_a_good)
  return _internal_team_a_good();
}
inline void CMsgDOTATournament_Game::_internal_set_team_a_good(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_a_good_ = value;
}
inline void CMsgDOTATournament_Game::set_team_a_good(bool value) {
  _internal_set_team_a_good(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.team_a_good)
}

// optional .ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
inline bool CMsgDOTATournament_Game::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_state() const {
  return _internal_has_state();
}
inline void CMsgDOTATournament_Game::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::ETournamentGameState CMsgDOTATournament_Game::_internal_state() const {
  return static_cast< ::ETournamentGameState >(_impl_.state_);
}
inline ::ETournamentGameState CMsgDOTATournament_Game::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.state)
  return _internal_state();
}
inline void CMsgDOTATournament_Game::_internal_set_state(::ETournamentGameState value) {
  assert(::ETournamentGameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.state_ = value;
}
inline void CMsgDOTATournament_Game::set_state(::ETournamentGameState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.state)
}

// optional uint32 start_time = 6;
inline bool CMsgDOTATournament_Game::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Game::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTATournament_Game::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTATournament_Game::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgDOTATournament_Game::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Game.start_time)
  return _internal_start_time();
}
inline void CMsgDOTATournament_Game::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.start_time_ = value;
}
inline void CMsgDOTATournament_Game::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Game.start_time)
}

// -------------------------------------------------------------------

// CMsgDOTATournament_Node

// optional uint32 node_id = 1;
inline bool CMsgDOTATournament_Node::_internal_has_node_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Node::has_node_id() const {
  return _internal_has_node_id();
}
inline void CMsgDOTATournament_Node::clear_node_id() {
  _impl_.node_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTATournament_Node::_internal_node_id() const {
  return _impl_.node_id_;
}
inline uint32_t CMsgDOTATournament_Node::node_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_id)
  return _internal_node_id();
}
inline void CMsgDOTATournament_Node::_internal_set_node_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.node_id_ = value;
}
inline void CMsgDOTATournament_Node::set_node_id(uint32_t value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_id)
}

// optional uint32 team_idx_a = 2;
inline bool CMsgDOTATournament_Node::_internal_has_team_idx_a() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Node::has_team_idx_a() const {
  return _internal_has_team_idx_a();
}
inline void CMsgDOTATournament_Node::clear_team_idx_a() {
  _impl_.team_idx_a_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATournament_Node::_internal_team_idx_a() const {
  return _impl_.team_idx_a_;
}
inline uint32_t CMsgDOTATournament_Node::team_idx_a() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_idx_a)
  return _internal_team_idx_a();
}
inline void CMsgDOTATournament_Node::_internal_set_team_idx_a(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.team_idx_a_ = value;
}
inline void CMsgDOTATournament_Node::set_team_idx_a(uint32_t value) {
  _internal_set_team_idx_a(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_idx_a)
}

// optional uint32 team_idx_b = 3;
inline bool CMsgDOTATournament_Node::_internal_has_team_idx_b() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Node::has_team_idx_b() const {
  return _internal_has_team_idx_b();
}
inline void CMsgDOTATournament_Node::clear_team_idx_b() {
  _impl_.team_idx_b_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTATournament_Node::_internal_team_idx_b() const {
  return _impl_.team_idx_b_;
}
inline uint32_t CMsgDOTATournament_Node::team_idx_b() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.team_idx_b)
  return _internal_team_idx_b();
}
inline void CMsgDOTATournament_Node::_internal_set_team_idx_b(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.team_idx_b_ = value;
}
inline void CMsgDOTATournament_Node::set_team_idx_b(uint32_t value) {
  _internal_set_team_idx_b(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.team_idx_b)
}

// optional .ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
inline bool CMsgDOTATournament_Node::_internal_has_node_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATournament_Node::has_node_state() const {
  return _internal_has_node_state();
}
inline void CMsgDOTATournament_Node::clear_node_state() {
  _impl_.node_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::ETournamentNodeState CMsgDOTATournament_Node::_internal_node_state() const {
  return static_cast< ::ETournamentNodeState >(_impl_.node_state_);
}
inline ::ETournamentNodeState CMsgDOTATournament_Node::node_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.Node.node_state)
  return _internal_node_state();
}
inline void CMsgDOTATournament_Node::_internal_set_node_state(::ETournamentNodeState value) {
  assert(::ETournamentNodeState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.node_state_ = value;
}
inline void CMsgDOTATournament_Node::set_node_state(::ETournamentNodeState value) {
  _internal_set_node_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.Node.node_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournament

// optional uint32 tournament_id = 1;
inline bool CMsgDOTATournament::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgDOTATournament::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTATournament::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgDOTATournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgDOTATournament::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tournament_id_ = value;
}
inline void CMsgDOTATournament::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_id)
}

// optional uint32 division_id = 2;
inline bool CMsgDOTATournament::_internal_has_division_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_division_id() const {
  return _internal_has_division_id();
}
inline void CMsgDOTATournament::clear_division_id() {
  _impl_.division_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATournament::_internal_division_id() const {
  return _impl_.division_id_;
}
inline uint32_t CMsgDOTATournament::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.division_id)
  return _internal_division_id();
}
inline void CMsgDOTATournament::_internal_set_division_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.division_id_ = value;
}
inline void CMsgDOTATournament::set_division_id(uint32_t value) {
  _internal_set_division_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.division_id)
}

// optional uint32 schedule_time = 3;
inline bool CMsgDOTATournament::_internal_has_schedule_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_schedule_time() const {
  return _internal_has_schedule_time();
}
inline void CMsgDOTATournament::clear_schedule_time() {
  _impl_.schedule_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTATournament::_internal_schedule_time() const {
  return _impl_.schedule_time_;
}
inline uint32_t CMsgDOTATournament::schedule_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.schedule_time)
  return _internal_schedule_time();
}
inline void CMsgDOTATournament::_internal_set_schedule_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.schedule_time_ = value;
}
inline void CMsgDOTATournament::set_schedule_time(uint32_t value) {
  _internal_set_schedule_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.schedule_time)
}

// optional uint32 skill_level = 4;
inline bool CMsgDOTATournament::_internal_has_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void CMsgDOTATournament::clear_skill_level() {
  _impl_.skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTATournament::_internal_skill_level() const {
  return _impl_.skill_level_;
}
inline uint32_t CMsgDOTATournament::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.skill_level)
  return _internal_skill_level();
}
inline void CMsgDOTATournament::_internal_set_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.skill_level_ = value;
}
inline void CMsgDOTATournament::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.skill_level)
}

// optional .ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
inline bool CMsgDOTATournament::_internal_has_tournament_template() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_tournament_template() const {
  return _internal_has_tournament_template();
}
inline void CMsgDOTATournament::clear_tournament_template() {
  _impl_.tournament_template_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::ETournamentTemplate CMsgDOTATournament::_internal_tournament_template() const {
  return static_cast< ::ETournamentTemplate >(_impl_.tournament_template_);
}
inline ::ETournamentTemplate CMsgDOTATournament::tournament_template() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.tournament_template)
  return _internal_tournament_template();
}
inline void CMsgDOTATournament::_internal_set_tournament_template(::ETournamentTemplate value) {
  assert(::ETournamentTemplate_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.tournament_template_ = value;
}
inline void CMsgDOTATournament::set_tournament_template(::ETournamentTemplate value) {
  _internal_set_tournament_template(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.tournament_template)
}

// optional .ETournamentState state = 6 [default = k_ETournamentState_Unknown];
inline bool CMsgDOTATournament::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_state() const {
  return _internal_has_state();
}
inline void CMsgDOTATournament::clear_state() {
  _impl_.state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::ETournamentState CMsgDOTATournament::_internal_state() const {
  return static_cast< ::ETournamentState >(_impl_.state_);
}
inline ::ETournamentState CMsgDOTATournament::state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.state)
  return _internal_state();
}
inline void CMsgDOTATournament::_internal_set_state(::ETournamentState value) {
  assert(::ETournamentState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.state_ = value;
}
inline void CMsgDOTATournament::set_state(::ETournamentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.state)
}

// optional uint32 state_seq_num = 10;
inline bool CMsgDOTATournament::_internal_has_state_seq_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_state_seq_num() const {
  return _internal_has_state_seq_num();
}
inline void CMsgDOTATournament::clear_state_seq_num() {
  _impl_.state_seq_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTATournament::_internal_state_seq_num() const {
  return _impl_.state_seq_num_;
}
inline uint32_t CMsgDOTATournament::state_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.state_seq_num)
  return _internal_state_seq_num();
}
inline void CMsgDOTATournament::_internal_set_state_seq_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.state_seq_num_ = value;
}
inline void CMsgDOTATournament::set_state_seq_num(uint32_t value) {
  _internal_set_state_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.state_seq_num)
}

// optional uint32 season_trophy_id = 11;
inline bool CMsgDOTATournament::_internal_has_season_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTATournament::has_season_trophy_id() const {
  return _internal_has_season_trophy_id();
}
inline void CMsgDOTATournament::clear_season_trophy_id() {
  _impl_.season_trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTATournament::_internal_season_trophy_id() const {
  return _impl_.season_trophy_id_;
}
inline uint32_t CMsgDOTATournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.season_trophy_id)
  return _internal_season_trophy_id();
}
inline void CMsgDOTATournament::_internal_set_season_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.season_trophy_id_ = value;
}
inline void CMsgDOTATournament::set_season_trophy_id(uint32_t value) {
  _internal_set_season_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournament.season_trophy_id)
}

// repeated .CMsgDOTATournament.Team teams = 7;
inline int CMsgDOTATournament::_internal_teams_size() const {
  return _impl_.teams_.size();
}
inline int CMsgDOTATournament::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTATournament::clear_teams() {
  _impl_.teams_.Clear();
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.teams)
  return _impl_.teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Team >*
CMsgDOTATournament::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.teams)
  return &_impl_.teams_;
}
inline const ::CMsgDOTATournament_Team& CMsgDOTATournament::_internal_teams(int index) const {
  return _impl_.teams_.Get(index);
}
inline const ::CMsgDOTATournament_Team& CMsgDOTATournament::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::_internal_add_teams() {
  return _impl_.teams_.Add();
}
inline ::CMsgDOTATournament_Team* CMsgDOTATournament::add_teams() {
  ::CMsgDOTATournament_Team* _add = _internal_add_teams();
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.teams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Team >&
CMsgDOTATournament::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.teams)
  return _impl_.teams_;
}

// repeated .CMsgDOTATournament.Game games = 8;
inline int CMsgDOTATournament::_internal_games_size() const {
  return _impl_.games_.size();
}
inline int CMsgDOTATournament::games_size() const {
  return _internal_games_size();
}
inline void CMsgDOTATournament::clear_games() {
  _impl_.games_.Clear();
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.games)
  return _impl_.games_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Game >*
CMsgDOTATournament::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.games)
  return &_impl_.games_;
}
inline const ::CMsgDOTATournament_Game& CMsgDOTATournament::_internal_games(int index) const {
  return _impl_.games_.Get(index);
}
inline const ::CMsgDOTATournament_Game& CMsgDOTATournament::games(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.games)
  return _internal_games(index);
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::_internal_add_games() {
  return _impl_.games_.Add();
}
inline ::CMsgDOTATournament_Game* CMsgDOTATournament::add_games() {
  ::CMsgDOTATournament_Game* _add = _internal_add_games();
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.games)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Game >&
CMsgDOTATournament::games() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.games)
  return _impl_.games_;
}

// repeated .CMsgDOTATournament.Node nodes = 9;
inline int CMsgDOTATournament::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int CMsgDOTATournament::nodes_size() const {
  return _internal_nodes_size();
}
inline void CMsgDOTATournament::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::CMsgDOTATournament_Node* CMsgDOTATournament::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournament.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Node >*
CMsgDOTATournament::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournament.nodes)
  return &_impl_.nodes_;
}
inline const ::CMsgDOTATournament_Node& CMsgDOTATournament::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::CMsgDOTATournament_Node& CMsgDOTATournament::nodes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournament.nodes)
  return _internal_nodes(index);
}
inline ::CMsgDOTATournament_Node* CMsgDOTATournament::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::CMsgDOTATournament_Node* CMsgDOTATournament::add_nodes() {
  ::CMsgDOTATournament_Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:CMsgDOTATournament.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournament_Node >&
CMsgDOTATournament::nodes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournament.nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange_GameChange

// optional uint64 match_id = 1;
inline bool CMsgDOTATournamentStateChange_GameChange::_internal_has_match_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange_GameChange::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_match_id() {
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTATournamentStateChange_GameChange::_internal_match_id() const {
  return _impl_.match_id_;
}
inline uint64_t CMsgDOTATournamentStateChange_GameChange::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.GameChange.match_id)
  return _internal_match_id();
}
inline void CMsgDOTATournamentStateChange_GameChange::_internal_set_match_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.match_id_ = value;
}
inline void CMsgDOTATournamentStateChange_GameChange::set_match_id(uint64_t value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.GameChange.match_id)
}

// optional .ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
inline bool CMsgDOTATournamentStateChange_GameChange::_internal_has_new_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange_GameChange::has_new_state() const {
  return _internal_has_new_state();
}
inline void CMsgDOTATournamentStateChange_GameChange::clear_new_state() {
  _impl_.new_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ETournamentGameState CMsgDOTATournamentStateChange_GameChange::_internal_new_state() const {
  return static_cast< ::ETournamentGameState >(_impl_.new_state_);
}
inline ::ETournamentGameState CMsgDOTATournamentStateChange_GameChange::new_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.GameChange.new_state)
  return _internal_new_state();
}
inline void CMsgDOTATournamentStateChange_GameChange::_internal_set_new_state(::ETournamentGameState value) {
  assert(::ETournamentGameState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_state_ = value;
}
inline void CMsgDOTATournamentStateChange_GameChange::set_new_state(::ETournamentGameState value) {
  _internal_set_new_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.GameChange.new_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange_TeamChange

// optional uint64 team_gid = 1;
inline bool CMsgDOTATournamentStateChange_TeamChange::_internal_has_team_gid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange_TeamChange::has_team_gid() const {
  return _internal_has_team_gid();
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_team_gid() {
  _impl_.team_gid_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTATournamentStateChange_TeamChange::_internal_team_gid() const {
  return _impl_.team_gid_;
}
inline uint64_t CMsgDOTATournamentStateChange_TeamChange::team_gid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.team_gid)
  return _internal_team_gid();
}
inline void CMsgDOTATournamentStateChange_TeamChange::_internal_set_team_gid(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_gid_ = value;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_team_gid(uint64_t value) {
  _internal_set_team_gid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.team_gid)
}

// optional uint32 new_node_or_state = 2;
inline bool CMsgDOTATournamentStateChange_TeamChange::_internal_has_new_node_or_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange_TeamChange::has_new_node_or_state() const {
  return _internal_has_new_node_or_state();
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_new_node_or_state() {
  _impl_.new_node_or_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTATournamentStateChange_TeamChange::_internal_new_node_or_state() const {
  return _impl_.new_node_or_state_;
}
inline uint32_t CMsgDOTATournamentStateChange_TeamChange::new_node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
  return _internal_new_node_or_state();
}
inline void CMsgDOTATournamentStateChange_TeamChange::_internal_set_new_node_or_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_node_or_state_ = value;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_new_node_or_state(uint32_t value) {
  _internal_set_new_node_or_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
}

// optional uint32 old_node_or_state = 3;
inline bool CMsgDOTATournamentStateChange_TeamChange::_internal_has_old_node_or_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange_TeamChange::has_old_node_or_state() const {
  return _internal_has_old_node_or_state();
}
inline void CMsgDOTATournamentStateChange_TeamChange::clear_old_node_or_state() {
  _impl_.old_node_or_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTATournamentStateChange_TeamChange::_internal_old_node_or_state() const {
  return _impl_.old_node_or_state_;
}
inline uint32_t CMsgDOTATournamentStateChange_TeamChange::old_node_or_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
  return _internal_old_node_or_state();
}
inline void CMsgDOTATournamentStateChange_TeamChange::_internal_set_old_node_or_state(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.old_node_or_state_ = value;
}
inline void CMsgDOTATournamentStateChange_TeamChange::set_old_node_or_state(uint32_t value) {
  _internal_set_old_node_or_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
}

// -------------------------------------------------------------------

// CMsgDOTATournamentStateChange

// optional uint32 new_tournament_id = 1;
inline bool CMsgDOTATournamentStateChange::_internal_has_new_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange::has_new_tournament_id() const {
  return _internal_has_new_tournament_id();
}
inline void CMsgDOTATournamentStateChange::clear_new_tournament_id() {
  _impl_.new_tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTATournamentStateChange::_internal_new_tournament_id() const {
  return _impl_.new_tournament_id_;
}
inline uint32_t CMsgDOTATournamentStateChange::new_tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.new_tournament_id)
  return _internal_new_tournament_id();
}
inline void CMsgDOTATournamentStateChange::_internal_set_new_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.new_tournament_id_ = value;
}
inline void CMsgDOTATournamentStateChange::set_new_tournament_id(uint32_t value) {
  _internal_set_new_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.new_tournament_id)
}

// optional .ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
inline bool CMsgDOTATournamentStateChange::_internal_has_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange::has_event() const {
  return _internal_has_event();
}
inline void CMsgDOTATournamentStateChange::clear_event() {
  _impl_.event_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::ETournamentEvent CMsgDOTATournamentStateChange::_internal_event() const {
  return static_cast< ::ETournamentEvent >(_impl_.event_);
}
inline ::ETournamentEvent CMsgDOTATournamentStateChange::event() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.event)
  return _internal_event();
}
inline void CMsgDOTATournamentStateChange::_internal_set_event(::ETournamentEvent value) {
  assert(::ETournamentEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.event_ = value;
}
inline void CMsgDOTATournamentStateChange::set_event(::ETournamentEvent value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.event)
}

// optional .ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
inline bool CMsgDOTATournamentStateChange::_internal_has_new_tournament_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange::has_new_tournament_state() const {
  return _internal_has_new_tournament_state();
}
inline void CMsgDOTATournamentStateChange::clear_new_tournament_state() {
  _impl_.new_tournament_state_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::ETournamentState CMsgDOTATournamentStateChange::_internal_new_tournament_state() const {
  return static_cast< ::ETournamentState >(_impl_.new_tournament_state_);
}
inline ::ETournamentState CMsgDOTATournamentStateChange::new_tournament_state() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.new_tournament_state)
  return _internal_new_tournament_state();
}
inline void CMsgDOTATournamentStateChange::_internal_set_new_tournament_state(::ETournamentState value) {
  assert(::ETournamentState_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.new_tournament_state_ = value;
}
inline void CMsgDOTATournamentStateChange::set_new_tournament_state(::ETournamentState value) {
  _internal_set_new_tournament_state(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.new_tournament_state)
}

// repeated .CMsgDOTATournamentStateChange.GameChange game_changes = 4;
inline int CMsgDOTATournamentStateChange::_internal_game_changes_size() const {
  return _impl_.game_changes_.size();
}
inline int CMsgDOTATournamentStateChange::game_changes_size() const {
  return _internal_game_changes_size();
}
inline void CMsgDOTATournamentStateChange::clear_game_changes() {
  _impl_.game_changes_.Clear();
}
inline ::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::mutable_game_changes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentStateChange.game_changes)
  return _impl_.game_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >*
CMsgDOTATournamentStateChange::mutable_game_changes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.game_changes)
  return &_impl_.game_changes_;
}
inline const ::CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange::_internal_game_changes(int index) const {
  return _impl_.game_changes_.Get(index);
}
inline const ::CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange::game_changes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.game_changes)
  return _internal_game_changes(index);
}
inline ::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::_internal_add_game_changes() {
  return _impl_.game_changes_.Add();
}
inline ::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::add_game_changes() {
  ::CMsgDOTATournamentStateChange_GameChange* _add = _internal_add_game_changes();
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.game_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_GameChange >&
CMsgDOTATournamentStateChange::game_changes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.game_changes)
  return _impl_.game_changes_;
}

// repeated .CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
inline int CMsgDOTATournamentStateChange::_internal_team_changes_size() const {
  return _impl_.team_changes_.size();
}
inline int CMsgDOTATournamentStateChange::team_changes_size() const {
  return _internal_team_changes_size();
}
inline void CMsgDOTATournamentStateChange::clear_team_changes() {
  _impl_.team_changes_.Clear();
}
inline ::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::mutable_team_changes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTATournamentStateChange.team_changes)
  return _impl_.team_changes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >*
CMsgDOTATournamentStateChange::mutable_team_changes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.team_changes)
  return &_impl_.team_changes_;
}
inline const ::CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange::_internal_team_changes(int index) const {
  return _impl_.team_changes_.Get(index);
}
inline const ::CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange::team_changes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.team_changes)
  return _internal_team_changes(index);
}
inline ::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::_internal_add_team_changes() {
  return _impl_.team_changes_.Add();
}
inline ::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::add_team_changes() {
  ::CMsgDOTATournamentStateChange_TeamChange* _add = _internal_add_team_changes();
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.team_changes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTATournamentStateChange_TeamChange >&
CMsgDOTATournamentStateChange::team_changes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.team_changes)
  return _impl_.team_changes_;
}

// repeated uint32 merged_tournament_ids = 6 [packed = true];
inline int CMsgDOTATournamentStateChange::_internal_merged_tournament_ids_size() const {
  return _impl_.merged_tournament_ids_.size();
}
inline int CMsgDOTATournamentStateChange::merged_tournament_ids_size() const {
  return _internal_merged_tournament_ids_size();
}
inline void CMsgDOTATournamentStateChange::clear_merged_tournament_ids() {
  _impl_.merged_tournament_ids_.Clear();
}
inline uint32_t CMsgDOTATournamentStateChange::_internal_merged_tournament_ids(int index) const {
  return _impl_.merged_tournament_ids_.Get(index);
}
inline uint32_t CMsgDOTATournamentStateChange::merged_tournament_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return _internal_merged_tournament_ids(index);
}
inline void CMsgDOTATournamentStateChange::set_merged_tournament_ids(int index, uint32_t value) {
  _impl_.merged_tournament_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.merged_tournament_ids)
}
inline void CMsgDOTATournamentStateChange::_internal_add_merged_tournament_ids(uint32_t value) {
  _impl_.merged_tournament_ids_.Add(value);
}
inline void CMsgDOTATournamentStateChange::add_merged_tournament_ids(uint32_t value) {
  _internal_add_merged_tournament_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTATournamentStateChange.merged_tournament_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournamentStateChange::_internal_merged_tournament_ids() const {
  return _impl_.merged_tournament_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTATournamentStateChange::merged_tournament_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return _internal_merged_tournament_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournamentStateChange::_internal_mutable_merged_tournament_ids() {
  return &_impl_.merged_tournament_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTATournamentStateChange::mutable_merged_tournament_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTATournamentStateChange.merged_tournament_ids)
  return _internal_mutable_merged_tournament_ids();
}

// optional uint32 state_seq_num = 7;
inline bool CMsgDOTATournamentStateChange::_internal_has_state_seq_num() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTATournamentStateChange::has_state_seq_num() const {
  return _internal_has_state_seq_num();
}
inline void CMsgDOTATournamentStateChange::clear_state_seq_num() {
  _impl_.state_seq_num_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTATournamentStateChange::_internal_state_seq_num() const {
  return _impl_.state_seq_num_;
}
inline uint32_t CMsgDOTATournamentStateChange::state_seq_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTATournamentStateChange.state_seq_num)
  return _internal_state_seq_num();
}
inline void CMsgDOTATournamentStateChange::_internal_set_state_seq_num(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.state_seq_num_ = value;
}
inline void CMsgDOTATournamentStateChange::set_state_seq_num(uint32_t value) {
  _internal_set_state_seq_num(value);
  // @@protoc_insertion_point(field_set:CMsgDOTATournamentStateChange.state_seq_num)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerSkillLevelStats

// optional uint32 skill_level = 1;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_skill_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_skill_level() const {
  return _internal_has_skill_level();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_skill_level() {
  _impl_.skill_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_skill_level() const {
  return _impl_.skill_level_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::skill_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
  return _internal_skill_level();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_skill_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.skill_level_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_skill_level(uint32_t value) {
  _internal_set_skill_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
}

// optional uint32 times_won_0 = 2;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_won_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_0() const {
  return _internal_has_times_won_0();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_0() {
  _impl_.times_won_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_won_0() const {
  return _impl_.times_won_0_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_0() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
  return _internal_times_won_0();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_won_0(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.times_won_0_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_0(uint32_t value) {
  _internal_set_times_won_0(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
}

// optional uint32 times_won_1 = 3;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_won_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_1() const {
  return _internal_has_times_won_1();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_1() {
  _impl_.times_won_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_won_1() const {
  return _impl_.times_won_1_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
  return _internal_times_won_1();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_won_1(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.times_won_1_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_1(uint32_t value) {
  _internal_set_times_won_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
}

// optional uint32 times_won_2 = 4;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_won_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_2() const {
  return _internal_has_times_won_2();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_2() {
  _impl_.times_won_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_won_2() const {
  return _impl_.times_won_2_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
  return _internal_times_won_2();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_won_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.times_won_2_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_2(uint32_t value) {
  _internal_set_times_won_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
}

// optional uint32 times_won_3 = 5;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_won_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_3() const {
  return _internal_has_times_won_3();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_3() {
  _impl_.times_won_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_won_3() const {
  return _impl_.times_won_3_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
  return _internal_times_won_3();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_won_3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.times_won_3_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_3(uint32_t value) {
  _internal_set_times_won_3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
}

// optional uint32 times_bye_and_lost = 6;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_bye_and_lost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_lost() const {
  return _internal_has_times_bye_and_lost();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_lost() {
  _impl_.times_bye_and_lost_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_bye_and_lost() const {
  return _impl_.times_bye_and_lost_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_lost() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
  return _internal_times_bye_and_lost();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_bye_and_lost(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.times_bye_and_lost_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_lost(uint32_t value) {
  _internal_set_times_bye_and_lost(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
}

// optional uint32 times_bye_and_won = 7;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_bye_and_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_won() const {
  return _internal_has_times_bye_and_won();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_won() {
  _impl_.times_bye_and_won_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_bye_and_won() const {
  return _impl_.times_bye_and_won_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
  return _internal_times_bye_and_won();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_bye_and_won(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.times_bye_and_won_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_won(uint32_t value) {
  _internal_set_times_bye_and_won(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
}

// optional uint32 times_unusual_champ = 10;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_times_unusual_champ() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_unusual_champ() const {
  return _internal_has_times_unusual_champ();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_unusual_champ() {
  _impl_.times_unusual_champ_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_times_unusual_champ() const {
  return _impl_.times_unusual_champ_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_unusual_champ() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
  return _internal_times_unusual_champ();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_times_unusual_champ(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.times_unusual_champ_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_unusual_champ(uint32_t value) {
  _internal_set_times_unusual_champ(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
}

// optional uint32 total_games_won = 8;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_total_games_won() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_total_games_won() const {
  return _internal_has_total_games_won();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_total_games_won() {
  _impl_.total_games_won_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_total_games_won() const {
  return _impl_.total_games_won_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::total_games_won() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
  return _internal_total_games_won();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_total_games_won(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.total_games_won_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_total_games_won(uint32_t value) {
  _internal_set_total_games_won(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
}

// optional uint32 score = 9;
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_score() {
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
  return _internal_score();
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_internal_set_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.score_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerStats

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerStats::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.account_id)
}

// optional uint32 season_trophy_id = 2;
inline bool CMsgDOTAWeekendTourneyPlayerStats::_internal_has_season_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_season_trophy_id() const {
  return _internal_has_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_season_trophy_id() {
  _impl_.season_trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::_internal_season_trophy_id() const {
  return _impl_.season_trophy_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
  return _internal_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::_internal_set_season_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.season_trophy_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_season_trophy_id(uint32_t value) {
  _internal_set_season_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
}

// repeated .CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
inline int CMsgDOTAWeekendTourneyPlayerStats::_internal_skill_levels_size() const {
  return _impl_.skill_levels_.size();
}
inline int CMsgDOTAWeekendTourneyPlayerStats::skill_levels_size() const {
  return _internal_skill_levels_size();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_skill_levels() {
  _impl_.skill_levels_.Clear();
}
inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return _impl_.skill_levels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >*
CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return &_impl_.skill_levels_;
}
inline const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerStats::_internal_skill_levels(int index) const {
  return _impl_.skill_levels_.Get(index);
}
inline const ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerStats::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return _internal_skill_levels(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::_internal_add_skill_levels() {
  return _impl_.skill_levels_.Add();
}
inline ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::add_skill_levels() {
  ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* _add = _internal_add_skill_levels();
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >&
CMsgDOTAWeekendTourneyPlayerStats::skill_levels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return _impl_.skill_levels_;
}

// optional uint32 current_tier = 4;
inline bool CMsgDOTAWeekendTourneyPlayerStats::_internal_has_current_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerStats::has_current_tier() const {
  return _internal_has_current_tier();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::clear_current_tier() {
  _impl_.current_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::_internal_current_tier() const {
  return _impl_.current_tier_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStats::current_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStats.current_tier)
  return _internal_current_tier();
}
inline void CMsgDOTAWeekendTourneyPlayerStats::_internal_set_current_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.current_tier_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerStats::set_current_tier(uint32_t value) {
  _internal_set_current_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStats.current_tier)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerStatsRequest

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStatsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
}

// optional uint32 season_trophy_id = 2;
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_has_season_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_season_trophy_id() const {
  return _internal_has_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_season_trophy_id() {
  _impl_.season_trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_season_trophy_id() const {
  return _impl_.season_trophy_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerStatsRequest::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
  return _internal_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::_internal_set_season_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.season_trophy_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_season_trophy_id(uint32_t value) {
  _internal_set_season_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerHistory_Tournament

// optional uint32 tournament_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_tournament_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_id() {
  _impl_.tournament_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_tournament_id() const {
  return _impl_.tournament_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
  return _internal_tournament_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_tournament_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tournament_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_id(uint32_t value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
}

// optional uint32 start_time = 2;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_start_time() {
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_start_time() const {
  return _impl_.start_time_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
  return _internal_start_time();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_start_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_time_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_start_time(uint32_t value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
}

// optional uint32 tournament_tier = 3;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_tournament_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_tier() const {
  return _internal_has_tournament_tier();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_tier() {
  _impl_.tournament_tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_tournament_tier() const {
  return _impl_.tournament_tier_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
  return _internal_tournament_tier();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_tournament_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.tournament_tier_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_tier(uint32_t value) {
  _internal_set_tournament_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
}

// optional uint32 team_id = 4;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_team_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_id() {
  _impl_.team_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_team_id() const {
  return _impl_.team_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_team_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.team_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_id(uint32_t value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
}

// optional uint32 team_date = 5;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_team_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_date() const {
  return _internal_has_team_date();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_date() {
  _impl_.team_date_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_team_date() const {
  return _impl_.team_date_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_date() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
  return _internal_team_date();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_team_date(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.team_date_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_date(uint32_t value) {
  _internal_set_team_date(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
}

// optional uint32 team_result = 6;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_team_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_result() const {
  return _internal_has_team_result();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_result() {
  _impl_.team_result_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_team_result() const {
  return _impl_.team_result_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
  return _internal_team_result();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_team_result(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.team_result_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_result(uint32_t value) {
  _internal_set_team_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
}

// repeated uint32 account_id = 7;
inline int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_account_id_size() const {
  return _impl_.account_id_.size();
}
inline int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id_size() const {
  return _internal_account_id_size();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_account_id() {
  _impl_.account_id_.Clear();
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_account_id(int index) const {
  return _impl_.account_id_.Get(index);
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return _internal_account_id(index);
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_account_id(int index, uint32_t value) {
  _impl_.account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_add_account_id(uint32_t value) {
  _impl_.account_id_.Add(value);
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::add_account_id(uint32_t value) {
  _internal_add_account_id(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_account_id() const {
  return _impl_.account_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return _internal_account_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_mutable_account_id() {
  return &_impl_.account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return _internal_mutable_account_id();
}

// optional string team_name = 8;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_team_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_name() {
  _impl_.team_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return _internal_team_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.team_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
inline std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_team_name() {
  std::string* _s = _internal_mutable_team_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return _s;
}
inline const std::string& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_team_name() const {
  return _impl_.team_name_.Get();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_team_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_mutable_team_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.team_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.team_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.team_name_.SetAllocated(team_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.team_name_.IsDefault()) {
    _impl_.team_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}

// optional uint32 season_trophy_id = 9;
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_has_season_trophy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_season_trophy_id() const {
  return _internal_has_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_season_trophy_id() {
  _impl_.season_trophy_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_season_trophy_id() const {
  return _impl_.season_trophy_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
  return _internal_season_trophy_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_internal_set_season_trophy_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.season_trophy_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_season_trophy_id(uint32_t value) {
  _internal_set_season_trophy_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyPlayerHistory

// optional uint32 account_id = 1;
inline bool CMsgDOTAWeekendTourneyPlayerHistory::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyPlayerHistory::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyPlayerHistory::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyPlayerHistory.account_id)
}

// repeated .CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
inline int CMsgDOTAWeekendTourneyPlayerHistory::_internal_tournaments_size() const {
  return _impl_.tournaments_.size();
}
inline int CMsgDOTAWeekendTourneyPlayerHistory::tournaments_size() const {
  return _internal_tournaments_size();
}
inline void CMsgDOTAWeekendTourneyPlayerHistory::clear_tournaments() {
  _impl_.tournaments_.Clear();
}
inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return _impl_.tournaments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >*
CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return &_impl_.tournaments_;
}
inline const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory::_internal_tournaments(int index) const {
  return _impl_.tournaments_.Get(index);
}
inline const ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory::tournaments(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return _internal_tournaments(index);
}
inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::_internal_add_tournaments() {
  return _impl_.tournaments_.Add();
}
inline ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::add_tournaments() {
  ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* _add = _internal_add_tournaments();
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >&
CMsgDOTAWeekendTourneyPlayerHistory::tournaments() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return _impl_.tournaments_;
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails_Tier

// optional uint32 tier = 1;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_tier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_tier() const {
  return _internal_has_tier();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_tier() {
  _impl_.tier_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_tier() const {
  return _impl_.tier_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
  return _internal_tier();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_tier(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tier_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_tier(uint32_t value) {
  _internal_set_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
}

// optional uint32 players = 2;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_players() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players() const {
  return _internal_has_players();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players() {
  _impl_.players_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_players() const {
  return _impl_.players_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::players() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
  return _internal_players();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_players(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.players_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players(uint32_t value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
}

// optional uint32 teams = 3;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_teams() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_teams() const {
  return _internal_has_teams();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_teams() {
  _impl_.teams_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_teams() const {
  return _impl_.teams_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::teams() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
  return _internal_teams();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_teams(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.teams_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_teams(uint32_t value) {
  _internal_set_teams(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
}

// optional uint32 winning_teams = 4;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_winning_teams() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_winning_teams() const {
  return _internal_has_winning_teams();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_winning_teams() {
  _impl_.winning_teams_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_winning_teams() const {
  return _impl_.winning_teams_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::winning_teams() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
  return _internal_winning_teams();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_winning_teams(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.winning_teams_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_winning_teams(uint32_t value) {
  _internal_set_winning_teams(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
}

// optional uint32 players_streak_2 = 5;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_players_streak_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_2() const {
  return _internal_has_players_streak_2();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_2() {
  _impl_.players_streak_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_players_streak_2() const {
  return _impl_.players_streak_2_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
  return _internal_players_streak_2();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_players_streak_2(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.players_streak_2_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_2(uint32_t value) {
  _internal_set_players_streak_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
}

// optional uint32 players_streak_3 = 6;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_players_streak_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_3() const {
  return _internal_has_players_streak_3();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_3() {
  _impl_.players_streak_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_players_streak_3() const {
  return _impl_.players_streak_3_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
  return _internal_players_streak_3();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_players_streak_3(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.players_streak_3_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_3(uint32_t value) {
  _internal_set_players_streak_3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
}

// optional uint32 players_streak_4 = 7;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_players_streak_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_4() const {
  return _internal_has_players_streak_4();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_4() {
  _impl_.players_streak_4_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_players_streak_4() const {
  return _impl_.players_streak_4_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
  return _internal_players_streak_4();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_players_streak_4(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.players_streak_4_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_4(uint32_t value) {
  _internal_set_players_streak_4(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
}

// optional uint32 players_streak_5 = 8;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_has_players_streak_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_5() const {
  return _internal_has_players_streak_5();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_5() {
  _impl_.players_streak_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_players_streak_5() const {
  return _impl_.players_streak_5_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
  return _internal_players_streak_5();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::_internal_set_players_streak_5(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.players_streak_5_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_5(uint32_t value) {
  _internal_set_players_streak_5(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails_Division

// optional uint32 division_id = 1;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_has_division_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_division_id() const {
  return _internal_has_division_id();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_division_id() {
  _impl_.division_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_division_id() const {
  return _impl_.division_id_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Division::division_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
  return _internal_division_id();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_set_division_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.division_id_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_division_id(uint32_t value) {
  _internal_set_division_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
}

// optional uint32 schedule_time = 2;
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_has_schedule_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_schedule_time() const {
  return _internal_has_schedule_time();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_schedule_time() {
  _impl_.schedule_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_schedule_time() const {
  return _impl_.schedule_time_;
}
inline uint32_t CMsgDOTAWeekendTourneyParticipationDetails_Division::schedule_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
  return _internal_schedule_time();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_set_schedule_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.schedule_time_ = value;
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_schedule_time(uint32_t value) {
  _internal_set_schedule_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
}

// repeated .CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
inline int CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_tiers_size() const {
  return _impl_.tiers_.size();
}
inline int CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers_size() const {
  return _internal_tiers_size();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_tiers() {
  _impl_.tiers_.Clear();
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return _impl_.tiers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >*
CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return &_impl_.tiers_;
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_tiers(int index) const {
  return _impl_.tiers_.Get(index);
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return _internal_tiers(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::_internal_add_tiers() {
  return _impl_.tiers_.Add();
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::add_tiers() {
  ::CMsgDOTAWeekendTourneyParticipationDetails_Tier* _add = _internal_add_tiers();
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Tier >&
CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return _impl_.tiers_;
}

// -------------------------------------------------------------------

// CMsgDOTAWeekendTourneyParticipationDetails

// repeated .CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
inline int CMsgDOTAWeekendTourneyParticipationDetails::_internal_divisions_size() const {
  return _impl_.divisions_.size();
}
inline int CMsgDOTAWeekendTourneyParticipationDetails::divisions_size() const {
  return _internal_divisions_size();
}
inline void CMsgDOTAWeekendTourneyParticipationDetails::clear_divisions() {
  _impl_.divisions_.Clear();
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return _impl_.divisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >*
CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return &_impl_.divisions_;
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails::_internal_divisions(int index) const {
  return _impl_.divisions_.Get(index);
}
inline const ::CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails::divisions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return _internal_divisions(index);
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::_internal_add_divisions() {
  return _impl_.divisions_.Add();
}
inline ::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::add_divisions() {
  ::CMsgDOTAWeekendTourneyParticipationDetails_Division* _add = _internal_add_divisions();
  // @@protoc_insertion_point(field_add:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAWeekendTourneyParticipationDetails_Division >&
CMsgDOTAWeekendTourneyParticipationDetails::divisions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return _impl_.divisions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ETournamentEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ETournamentEvent>() {
  return ::ETournamentEvent_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ftournament_2eproto
