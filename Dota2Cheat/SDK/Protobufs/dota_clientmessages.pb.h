// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_clientmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fclientmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fclientmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_commonmessages.pb.h"
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fclientmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fclientmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fclientmessages_2eproto;
class CDOTAClientMsg_AbilityAlert;
struct CDOTAClientMsg_AbilityAlertDefaultTypeInternal;
extern CDOTAClientMsg_AbilityAlertDefaultTypeInternal _CDOTAClientMsg_AbilityAlert_default_instance_;
class CDOTAClientMsg_AbilityDraftRequestAbility;
struct CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal;
extern CDOTAClientMsg_AbilityDraftRequestAbilityDefaultTypeInternal _CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_;
class CDOTAClientMsg_AddCommunicationsBlockMarker;
struct CDOTAClientMsg_AddCommunicationsBlockMarkerDefaultTypeInternal;
extern CDOTAClientMsg_AddCommunicationsBlockMarkerDefaultTypeInternal _CDOTAClientMsg_AddCommunicationsBlockMarker_default_instance_;
class CDOTAClientMsg_AddCommunicationsReportMarker;
struct CDOTAClientMsg_AddCommunicationsReportMarkerDefaultTypeInternal;
extern CDOTAClientMsg_AddCommunicationsReportMarkerDefaultTypeInternal _CDOTAClientMsg_AddCommunicationsReportMarker_default_instance_;
class CDOTAClientMsg_AddOverwatchReportMarker;
struct CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal;
extern CDOTAClientMsg_AddOverwatchReportMarkerDefaultTypeInternal _CDOTAClientMsg_AddOverwatchReportMarker_default_instance_;
class CDOTAClientMsg_AghsStatusAlert;
struct CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal;
extern CDOTAClientMsg_AghsStatusAlertDefaultTypeInternal _CDOTAClientMsg_AghsStatusAlert_default_instance_;
class CDOTAClientMsg_AspectRatio;
struct CDOTAClientMsg_AspectRatioDefaultTypeInternal;
extern CDOTAClientMsg_AspectRatioDefaultTypeInternal _CDOTAClientMsg_AspectRatio_default_instance_;
class CDOTAClientMsg_BeginLastHitChallenge;
struct CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal;
extern CDOTAClientMsg_BeginLastHitChallengeDefaultTypeInternal _CDOTAClientMsg_BeginLastHitChallenge_default_instance_;
class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator;
struct CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal;
extern CDOTAClientMsg_BroadcasterUsingAssistedCameraOperatorDefaultTypeInternal _CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_;
class CDOTAClientMsg_BroadcasterUsingCameraman;
struct CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal;
extern CDOTAClientMsg_BroadcasterUsingCameramanDefaultTypeInternal _CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_;
class CDOTAClientMsg_BuyBackStateAlert;
struct CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal;
extern CDOTAClientMsg_BuyBackStateAlertDefaultTypeInternal _CDOTAClientMsg_BuyBackStateAlert_default_instance_;
class CDOTAClientMsg_CameraZoomAmount;
struct CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal;
extern CDOTAClientMsg_CameraZoomAmountDefaultTypeInternal _CDOTAClientMsg_CameraZoomAmount_default_instance_;
class CDOTAClientMsg_ChallengeReroll;
struct CDOTAClientMsg_ChallengeRerollDefaultTypeInternal;
extern CDOTAClientMsg_ChallengeRerollDefaultTypeInternal _CDOTAClientMsg_ChallengeReroll_default_instance_;
class CDOTAClientMsg_ChallengeSelect;
struct CDOTAClientMsg_ChallengeSelectDefaultTypeInternal;
extern CDOTAClientMsg_ChallengeSelectDefaultTypeInternal _CDOTAClientMsg_ChallengeSelect_default_instance_;
class CDOTAClientMsg_ChannelRequiresHalt;
struct CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal;
extern CDOTAClientMsg_ChannelRequiresHaltDefaultTypeInternal _CDOTAClientMsg_ChannelRequiresHalt_default_instance_;
class CDOTAClientMsg_ChatMessage;
struct CDOTAClientMsg_ChatMessageDefaultTypeInternal;
extern CDOTAClientMsg_ChatMessageDefaultTypeInternal _CDOTAClientMsg_ChatMessage_default_instance_;
class CDOTAClientMsg_ChatWheel;
struct CDOTAClientMsg_ChatWheelDefaultTypeInternal;
extern CDOTAClientMsg_ChatWheelDefaultTypeInternal _CDOTAClientMsg_ChatWheel_default_instance_;
class CDOTAClientMsg_ChooseNeutralItem;
struct CDOTAClientMsg_ChooseNeutralItemDefaultTypeInternal;
extern CDOTAClientMsg_ChooseNeutralItemDefaultTypeInternal _CDOTAClientMsg_ChooseNeutralItem_default_instance_;
class CDOTAClientMsg_ClickedBuff;
struct CDOTAClientMsg_ClickedBuffDefaultTypeInternal;
extern CDOTAClientMsg_ClickedBuffDefaultTypeInternal _CDOTAClientMsg_ClickedBuff_default_instance_;
class CDOTAClientMsg_CoinWager;
struct CDOTAClientMsg_CoinWagerDefaultTypeInternal;
extern CDOTAClientMsg_CoinWagerDefaultTypeInternal _CDOTAClientMsg_CoinWager_default_instance_;
class CDOTAClientMsg_CoinWagerToken;
struct CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal;
extern CDOTAClientMsg_CoinWagerTokenDefaultTypeInternal _CDOTAClientMsg_CoinWagerToken_default_instance_;
class CDOTAClientMsg_ContextualTips_Subscribe;
struct CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal;
extern CDOTAClientMsg_ContextualTips_SubscribeDefaultTypeInternal _CDOTAClientMsg_ContextualTips_Subscribe_default_instance_;
class CDOTAClientMsg_ContextualTips_Subscribe_Entry;
struct CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal;
extern CDOTAClientMsg_ContextualTips_Subscribe_EntryDefaultTypeInternal _CDOTAClientMsg_ContextualTips_Subscribe_Entry_default_instance_;
class CDOTAClientMsg_DamageReport;
struct CDOTAClientMsg_DamageReportDefaultTypeInternal;
extern CDOTAClientMsg_DamageReportDefaultTypeInternal _CDOTAClientMsg_DamageReport_default_instance_;
class CDOTAClientMsg_DemoHero;
struct CDOTAClientMsg_DemoHeroDefaultTypeInternal;
extern CDOTAClientMsg_DemoHeroDefaultTypeInternal _CDOTAClientMsg_DemoHero_default_instance_;
class CDOTAClientMsg_DismissAllStatPopups;
struct CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal;
extern CDOTAClientMsg_DismissAllStatPopupsDefaultTypeInternal _CDOTAClientMsg_DismissAllStatPopups_default_instance_;
class CDOTAClientMsg_DuelAccepted;
struct CDOTAClientMsg_DuelAcceptedDefaultTypeInternal;
extern CDOTAClientMsg_DuelAcceptedDefaultTypeInternal _CDOTAClientMsg_DuelAccepted_default_instance_;
class CDOTAClientMsg_EmptyItemSlotAlert;
struct CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal;
extern CDOTAClientMsg_EmptyItemSlotAlertDefaultTypeInternal _CDOTAClientMsg_EmptyItemSlotAlert_default_instance_;
class CDOTAClientMsg_EmptyTeleportAlert;
struct CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal;
extern CDOTAClientMsg_EmptyTeleportAlertDefaultTypeInternal _CDOTAClientMsg_EmptyTeleportAlert_default_instance_;
class CDOTAClientMsg_EnemyItemAlert;
struct CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal;
extern CDOTAClientMsg_EnemyItemAlertDefaultTypeInternal _CDOTAClientMsg_EnemyItemAlert_default_instance_;
class CDOTAClientMsg_EventCNY2015Cmd;
struct CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal;
extern CDOTAClientMsg_EventCNY2015CmdDefaultTypeInternal _CDOTAClientMsg_EventCNY2015Cmd_default_instance_;
class CDOTAClientMsg_EventPointsTip;
struct CDOTAClientMsg_EventPointsTipDefaultTypeInternal;
extern CDOTAClientMsg_EventPointsTipDefaultTypeInternal _CDOTAClientMsg_EventPointsTip_default_instance_;
class CDOTAClientMsg_ExecuteOrders;
struct CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal;
extern CDOTAClientMsg_ExecuteOrdersDefaultTypeInternal _CDOTAClientMsg_ExecuteOrders_default_instance_;
class CDOTAClientMsg_FillEmptySlotsWithBots;
struct CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal;
extern CDOTAClientMsg_FillEmptySlotsWithBotsDefaultTypeInternal _CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_;
class CDOTAClientMsg_FlipCoin;
struct CDOTAClientMsg_FlipCoinDefaultTypeInternal;
extern CDOTAClientMsg_FlipCoinDefaultTypeInternal _CDOTAClientMsg_FlipCoin_default_instance_;
class CDOTAClientMsg_GlyphAlert;
struct CDOTAClientMsg_GlyphAlertDefaultTypeInternal;
extern CDOTAClientMsg_GlyphAlertDefaultTypeInternal _CDOTAClientMsg_GlyphAlert_default_instance_;
class CDOTAClientMsg_GuideSelectOption;
struct CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal;
extern CDOTAClientMsg_GuideSelectOptionDefaultTypeInternal _CDOTAClientMsg_GuideSelectOption_default_instance_;
class CDOTAClientMsg_GuideSelected;
struct CDOTAClientMsg_GuideSelectedDefaultTypeInternal;
extern CDOTAClientMsg_GuideSelectedDefaultTypeInternal _CDOTAClientMsg_GuideSelected_default_instance_;
class CDOTAClientMsg_HPManaAlert;
struct CDOTAClientMsg_HPManaAlertDefaultTypeInternal;
extern CDOTAClientMsg_HPManaAlertDefaultTypeInternal _CDOTAClientMsg_HPManaAlert_default_instance_;
class CDOTAClientMsg_HelpTipSystemStateChanged;
struct CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal;
extern CDOTAClientMsg_HelpTipSystemStateChangedDefaultTypeInternal _CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_;
class CDOTAClientMsg_HeroStatueLike;
struct CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal;
extern CDOTAClientMsg_HeroStatueLikeDefaultTypeInternal _CDOTAClientMsg_HeroStatueLike_default_instance_;
class CDOTAClientMsg_ItemAlert;
struct CDOTAClientMsg_ItemAlertDefaultTypeInternal;
extern CDOTAClientMsg_ItemAlertDefaultTypeInternal _CDOTAClientMsg_ItemAlert_default_instance_;
class CDOTAClientMsg_KillMyHero;
struct CDOTAClientMsg_KillMyHeroDefaultTypeInternal;
extern CDOTAClientMsg_KillMyHeroDefaultTypeInternal _CDOTAClientMsg_KillMyHero_default_instance_;
class CDOTAClientMsg_KillcamDamageTaken;
struct CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal;
extern CDOTAClientMsg_KillcamDamageTakenDefaultTypeInternal _CDOTAClientMsg_KillcamDamageTaken_default_instance_;
class CDOTAClientMsg_MakeTeamCaptain;
struct CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal;
extern CDOTAClientMsg_MakeTeamCaptainDefaultTypeInternal _CDOTAClientMsg_MakeTeamCaptain_default_instance_;
class CDOTAClientMsg_MapLine;
struct CDOTAClientMsg_MapLineDefaultTypeInternal;
extern CDOTAClientMsg_MapLineDefaultTypeInternal _CDOTAClientMsg_MapLine_default_instance_;
class CDOTAClientMsg_MapPing;
struct CDOTAClientMsg_MapPingDefaultTypeInternal;
extern CDOTAClientMsg_MapPingDefaultTypeInternal _CDOTAClientMsg_MapPing_default_instance_;
class CDOTAClientMsg_ModifierAlert;
struct CDOTAClientMsg_ModifierAlertDefaultTypeInternal;
extern CDOTAClientMsg_ModifierAlertDefaultTypeInternal _CDOTAClientMsg_ModifierAlert_default_instance_;
class CDOTAClientMsg_NeutralCampAlert;
struct CDOTAClientMsg_NeutralCampAlertDefaultTypeInternal;
extern CDOTAClientMsg_NeutralCampAlertDefaultTypeInternal _CDOTAClientMsg_NeutralCampAlert_default_instance_;
class CDOTAClientMsg_Pause;
struct CDOTAClientMsg_PauseDefaultTypeInternal;
extern CDOTAClientMsg_PauseDefaultTypeInternal _CDOTAClientMsg_Pause_default_instance_;
class CDOTAClientMsg_PauseGameOrder;
struct CDOTAClientMsg_PauseGameOrderDefaultTypeInternal;
extern CDOTAClientMsg_PauseGameOrderDefaultTypeInternal _CDOTAClientMsg_PauseGameOrder_default_instance_;
class CDOTAClientMsg_PerfReport;
struct CDOTAClientMsg_PerfReportDefaultTypeInternal;
extern CDOTAClientMsg_PerfReportDefaultTypeInternal _CDOTAClientMsg_PerfReport_default_instance_;
class CDOTAClientMsg_PlayerBounty;
struct CDOTAClientMsg_PlayerBountyDefaultTypeInternal;
extern CDOTAClientMsg_PlayerBountyDefaultTypeInternal _CDOTAClientMsg_PlayerBounty_default_instance_;
class CDOTAClientMsg_PlayerDraftPick;
struct CDOTAClientMsg_PlayerDraftPickDefaultTypeInternal;
extern CDOTAClientMsg_PlayerDraftPickDefaultTypeInternal _CDOTAClientMsg_PlayerDraftPick_default_instance_;
class CDOTAClientMsg_PlayerDraftPreferRole;
struct CDOTAClientMsg_PlayerDraftPreferRoleDefaultTypeInternal;
extern CDOTAClientMsg_PlayerDraftPreferRoleDefaultTypeInternal _CDOTAClientMsg_PlayerDraftPreferRole_default_instance_;
class CDOTAClientMsg_PlayerDraftPreferTeam;
struct CDOTAClientMsg_PlayerDraftPreferTeamDefaultTypeInternal;
extern CDOTAClientMsg_PlayerDraftPreferTeamDefaultTypeInternal _CDOTAClientMsg_PlayerDraftPreferTeam_default_instance_;
class CDOTAClientMsg_PlayerDraftSuggest;
struct CDOTAClientMsg_PlayerDraftSuggestDefaultTypeInternal;
extern CDOTAClientMsg_PlayerDraftSuggestDefaultTypeInternal _CDOTAClientMsg_PlayerDraftSuggest_default_instance_;
class CDOTAClientMsg_PlayerShowCase;
struct CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal;
extern CDOTAClientMsg_PlayerShowCaseDefaultTypeInternal _CDOTAClientMsg_PlayerShowCase_default_instance_;
class CDOTAClientMsg_QuestStatus;
struct CDOTAClientMsg_QuestStatusDefaultTypeInternal;
extern CDOTAClientMsg_QuestStatusDefaultTypeInternal _CDOTAClientMsg_QuestStatus_default_instance_;
class CDOTAClientMsg_QuickBuyAlert;
struct CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal;
extern CDOTAClientMsg_QuickBuyAlertDefaultTypeInternal _CDOTAClientMsg_QuickBuyAlert_default_instance_;
class CDOTAClientMsg_RadarAlert;
struct CDOTAClientMsg_RadarAlertDefaultTypeInternal;
extern CDOTAClientMsg_RadarAlertDefaultTypeInternal _CDOTAClientMsg_RadarAlert_default_instance_;
class CDOTAClientMsg_RankWager;
struct CDOTAClientMsg_RankWagerDefaultTypeInternal;
extern CDOTAClientMsg_RankWagerDefaultTypeInternal _CDOTAClientMsg_RankWager_default_instance_;
class CDOTAClientMsg_RecordVote;
struct CDOTAClientMsg_RecordVoteDefaultTypeInternal;
extern CDOTAClientMsg_RecordVoteDefaultTypeInternal _CDOTAClientMsg_RecordVote_default_instance_;
class CDOTAClientMsg_RequestBulkCombatLog;
struct CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal;
extern CDOTAClientMsg_RequestBulkCombatLogDefaultTypeInternal _CDOTAClientMsg_RequestBulkCombatLog_default_instance_;
class CDOTAClientMsg_RequestGraphUpdate;
struct CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal;
extern CDOTAClientMsg_RequestGraphUpdateDefaultTypeInternal _CDOTAClientMsg_RequestGraphUpdate_default_instance_;
class CDOTAClientMsg_RequestItemSuggestions;
struct CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal;
extern CDOTAClientMsg_RequestItemSuggestionsDefaultTypeInternal _CDOTAClientMsg_RequestItemSuggestions_default_instance_;
class CDOTAClientMsg_RollDice;
struct CDOTAClientMsg_RollDiceDefaultTypeInternal;
extern CDOTAClientMsg_RollDiceDefaultTypeInternal _CDOTAClientMsg_RollDice_default_instance_;
class CDOTAClientMsg_SalutePlayer;
struct CDOTAClientMsg_SalutePlayerDefaultTypeInternal;
extern CDOTAClientMsg_SalutePlayerDefaultTypeInternal _CDOTAClientMsg_SalutePlayer_default_instance_;
class CDOTAClientMsg_SearchString;
struct CDOTAClientMsg_SearchStringDefaultTypeInternal;
extern CDOTAClientMsg_SearchStringDefaultTypeInternal _CDOTAClientMsg_SearchString_default_instance_;
class CDOTAClientMsg_SendStatPopup;
struct CDOTAClientMsg_SendStatPopupDefaultTypeInternal;
extern CDOTAClientMsg_SendStatPopupDefaultTypeInternal _CDOTAClientMsg_SendStatPopup_default_instance_;
class CDOTAClientMsg_SetCavernMapVariant;
struct CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal;
extern CDOTAClientMsg_SetCavernMapVariantDefaultTypeInternal _CDOTAClientMsg_SetCavernMapVariant_default_instance_;
class CDOTAClientMsg_SetDesiredWardPlacement;
struct CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal;
extern CDOTAClientMsg_SetDesiredWardPlacementDefaultTypeInternal _CDOTAClientMsg_SetDesiredWardPlacement_default_instance_;
class CDOTAClientMsg_SetEnemyStartingPosition;
struct CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal;
extern CDOTAClientMsg_SetEnemyStartingPositionDefaultTypeInternal _CDOTAClientMsg_SetEnemyStartingPosition_default_instance_;
class CDOTAClientMsg_SetUnitShareFlag;
struct CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal;
extern CDOTAClientMsg_SetUnitShareFlagDefaultTypeInternal _CDOTAClientMsg_SetUnitShareFlag_default_instance_;
class CDOTAClientMsg_ShopViewMode;
struct CDOTAClientMsg_ShopViewModeDefaultTypeInternal;
extern CDOTAClientMsg_ShopViewModeDefaultTypeInternal _CDOTAClientMsg_ShopViewMode_default_instance_;
class CDOTAClientMsg_SpecialAbility;
struct CDOTAClientMsg_SpecialAbilityDefaultTypeInternal;
extern CDOTAClientMsg_SpecialAbilityDefaultTypeInternal _CDOTAClientMsg_SpecialAbility_default_instance_;
class CDOTAClientMsg_SwapAccept;
struct CDOTAClientMsg_SwapAcceptDefaultTypeInternal;
extern CDOTAClientMsg_SwapAcceptDefaultTypeInternal _CDOTAClientMsg_SwapAccept_default_instance_;
class CDOTAClientMsg_SwapRequest;
struct CDOTAClientMsg_SwapRequestDefaultTypeInternal;
extern CDOTAClientMsg_SwapRequestDefaultTypeInternal _CDOTAClientMsg_SwapRequest_default_instance_;
class CDOTAClientMsg_TalentTreeAlert;
struct CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal;
extern CDOTAClientMsg_TalentTreeAlertDefaultTypeInternal _CDOTAClientMsg_TalentTreeAlert_default_instance_;
class CDOTAClientMsg_TeleportRequiresHalt;
struct CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal;
extern CDOTAClientMsg_TeleportRequiresHaltDefaultTypeInternal _CDOTAClientMsg_TeleportRequiresHalt_default_instance_;
class CDOTAClientMsg_TipAlert;
struct CDOTAClientMsg_TipAlertDefaultTypeInternal;
extern CDOTAClientMsg_TipAlertDefaultTypeInternal _CDOTAClientMsg_TipAlert_default_instance_;
class CDOTAClientMsg_ToggleAutoattack;
struct CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal;
extern CDOTAClientMsg_ToggleAutoattackDefaultTypeInternal _CDOTAClientMsg_ToggleAutoattack_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackAfterSpell;
struct CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal;
extern CDOTAClientMsg_UnitsAutoAttackAfterSpellDefaultTypeInternal _CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_;
class CDOTAClientMsg_UnitsAutoAttackMode;
struct CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal;
extern CDOTAClientMsg_UnitsAutoAttackModeDefaultTypeInternal _CDOTAClientMsg_UnitsAutoAttackMode_default_instance_;
class CDOTAClientMsg_UpdateQuickBuy;
struct CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal;
extern CDOTAClientMsg_UpdateQuickBuyDefaultTypeInternal _CDOTAClientMsg_UpdateQuickBuy_default_instance_;
class CDOTAClientMsg_UpdateQuickBuyItem;
struct CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal;
extern CDOTAClientMsg_UpdateQuickBuyItemDefaultTypeInternal _CDOTAClientMsg_UpdateQuickBuyItem_default_instance_;
class CDOTAClientMsg_VersusScene_PlayerBehavior;
struct CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal;
extern CDOTAClientMsg_VersusScene_PlayerBehaviorDefaultTypeInternal _CDOTAClientMsg_VersusScene_PlayerBehavior_default_instance_;
class CDOTAClientMsg_WillPurchaseAlert;
struct CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal;
extern CDOTAClientMsg_WillPurchaseAlertDefaultTypeInternal _CDOTAClientMsg_WillPurchaseAlert_default_instance_;
class CDOTAClientMsg_WorldLine;
struct CDOTAClientMsg_WorldLineDefaultTypeInternal;
extern CDOTAClientMsg_WorldLineDefaultTypeInternal _CDOTAClientMsg_WorldLine_default_instance_;
class CDOTAClientMsg_XPAlert;
struct CDOTAClientMsg_XPAlertDefaultTypeInternal;
extern CDOTAClientMsg_XPAlertDefaultTypeInternal _CDOTAClientMsg_XPAlert_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDOTAClientMsg_AbilityAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_AbilityAlert>(Arena*);
template<> ::CDOTAClientMsg_AbilityDraftRequestAbility* Arena::CreateMaybeMessage<::CDOTAClientMsg_AbilityDraftRequestAbility>(Arena*);
template<> ::CDOTAClientMsg_AddCommunicationsBlockMarker* Arena::CreateMaybeMessage<::CDOTAClientMsg_AddCommunicationsBlockMarker>(Arena*);
template<> ::CDOTAClientMsg_AddCommunicationsReportMarker* Arena::CreateMaybeMessage<::CDOTAClientMsg_AddCommunicationsReportMarker>(Arena*);
template<> ::CDOTAClientMsg_AddOverwatchReportMarker* Arena::CreateMaybeMessage<::CDOTAClientMsg_AddOverwatchReportMarker>(Arena*);
template<> ::CDOTAClientMsg_AghsStatusAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_AghsStatusAlert>(Arena*);
template<> ::CDOTAClientMsg_AspectRatio* Arena::CreateMaybeMessage<::CDOTAClientMsg_AspectRatio>(Arena*);
template<> ::CDOTAClientMsg_BeginLastHitChallenge* Arena::CreateMaybeMessage<::CDOTAClientMsg_BeginLastHitChallenge>(Arena*);
template<> ::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* Arena::CreateMaybeMessage<::CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(Arena*);
template<> ::CDOTAClientMsg_BroadcasterUsingCameraman* Arena::CreateMaybeMessage<::CDOTAClientMsg_BroadcasterUsingCameraman>(Arena*);
template<> ::CDOTAClientMsg_BuyBackStateAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_BuyBackStateAlert>(Arena*);
template<> ::CDOTAClientMsg_CameraZoomAmount* Arena::CreateMaybeMessage<::CDOTAClientMsg_CameraZoomAmount>(Arena*);
template<> ::CDOTAClientMsg_ChallengeReroll* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChallengeReroll>(Arena*);
template<> ::CDOTAClientMsg_ChallengeSelect* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChallengeSelect>(Arena*);
template<> ::CDOTAClientMsg_ChannelRequiresHalt* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChannelRequiresHalt>(Arena*);
template<> ::CDOTAClientMsg_ChatMessage* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChatMessage>(Arena*);
template<> ::CDOTAClientMsg_ChatWheel* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChatWheel>(Arena*);
template<> ::CDOTAClientMsg_ChooseNeutralItem* Arena::CreateMaybeMessage<::CDOTAClientMsg_ChooseNeutralItem>(Arena*);
template<> ::CDOTAClientMsg_ClickedBuff* Arena::CreateMaybeMessage<::CDOTAClientMsg_ClickedBuff>(Arena*);
template<> ::CDOTAClientMsg_CoinWager* Arena::CreateMaybeMessage<::CDOTAClientMsg_CoinWager>(Arena*);
template<> ::CDOTAClientMsg_CoinWagerToken* Arena::CreateMaybeMessage<::CDOTAClientMsg_CoinWagerToken>(Arena*);
template<> ::CDOTAClientMsg_ContextualTips_Subscribe* Arena::CreateMaybeMessage<::CDOTAClientMsg_ContextualTips_Subscribe>(Arena*);
template<> ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* Arena::CreateMaybeMessage<::CDOTAClientMsg_ContextualTips_Subscribe_Entry>(Arena*);
template<> ::CDOTAClientMsg_DamageReport* Arena::CreateMaybeMessage<::CDOTAClientMsg_DamageReport>(Arena*);
template<> ::CDOTAClientMsg_DemoHero* Arena::CreateMaybeMessage<::CDOTAClientMsg_DemoHero>(Arena*);
template<> ::CDOTAClientMsg_DismissAllStatPopups* Arena::CreateMaybeMessage<::CDOTAClientMsg_DismissAllStatPopups>(Arena*);
template<> ::CDOTAClientMsg_DuelAccepted* Arena::CreateMaybeMessage<::CDOTAClientMsg_DuelAccepted>(Arena*);
template<> ::CDOTAClientMsg_EmptyItemSlotAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_EmptyItemSlotAlert>(Arena*);
template<> ::CDOTAClientMsg_EmptyTeleportAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_EmptyTeleportAlert>(Arena*);
template<> ::CDOTAClientMsg_EnemyItemAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_EnemyItemAlert>(Arena*);
template<> ::CDOTAClientMsg_EventCNY2015Cmd* Arena::CreateMaybeMessage<::CDOTAClientMsg_EventCNY2015Cmd>(Arena*);
template<> ::CDOTAClientMsg_EventPointsTip* Arena::CreateMaybeMessage<::CDOTAClientMsg_EventPointsTip>(Arena*);
template<> ::CDOTAClientMsg_ExecuteOrders* Arena::CreateMaybeMessage<::CDOTAClientMsg_ExecuteOrders>(Arena*);
template<> ::CDOTAClientMsg_FillEmptySlotsWithBots* Arena::CreateMaybeMessage<::CDOTAClientMsg_FillEmptySlotsWithBots>(Arena*);
template<> ::CDOTAClientMsg_FlipCoin* Arena::CreateMaybeMessage<::CDOTAClientMsg_FlipCoin>(Arena*);
template<> ::CDOTAClientMsg_GlyphAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_GlyphAlert>(Arena*);
template<> ::CDOTAClientMsg_GuideSelectOption* Arena::CreateMaybeMessage<::CDOTAClientMsg_GuideSelectOption>(Arena*);
template<> ::CDOTAClientMsg_GuideSelected* Arena::CreateMaybeMessage<::CDOTAClientMsg_GuideSelected>(Arena*);
template<> ::CDOTAClientMsg_HPManaAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_HPManaAlert>(Arena*);
template<> ::CDOTAClientMsg_HelpTipSystemStateChanged* Arena::CreateMaybeMessage<::CDOTAClientMsg_HelpTipSystemStateChanged>(Arena*);
template<> ::CDOTAClientMsg_HeroStatueLike* Arena::CreateMaybeMessage<::CDOTAClientMsg_HeroStatueLike>(Arena*);
template<> ::CDOTAClientMsg_ItemAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_ItemAlert>(Arena*);
template<> ::CDOTAClientMsg_KillMyHero* Arena::CreateMaybeMessage<::CDOTAClientMsg_KillMyHero>(Arena*);
template<> ::CDOTAClientMsg_KillcamDamageTaken* Arena::CreateMaybeMessage<::CDOTAClientMsg_KillcamDamageTaken>(Arena*);
template<> ::CDOTAClientMsg_MakeTeamCaptain* Arena::CreateMaybeMessage<::CDOTAClientMsg_MakeTeamCaptain>(Arena*);
template<> ::CDOTAClientMsg_MapLine* Arena::CreateMaybeMessage<::CDOTAClientMsg_MapLine>(Arena*);
template<> ::CDOTAClientMsg_MapPing* Arena::CreateMaybeMessage<::CDOTAClientMsg_MapPing>(Arena*);
template<> ::CDOTAClientMsg_ModifierAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_ModifierAlert>(Arena*);
template<> ::CDOTAClientMsg_NeutralCampAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_NeutralCampAlert>(Arena*);
template<> ::CDOTAClientMsg_Pause* Arena::CreateMaybeMessage<::CDOTAClientMsg_Pause>(Arena*);
template<> ::CDOTAClientMsg_PauseGameOrder* Arena::CreateMaybeMessage<::CDOTAClientMsg_PauseGameOrder>(Arena*);
template<> ::CDOTAClientMsg_PerfReport* Arena::CreateMaybeMessage<::CDOTAClientMsg_PerfReport>(Arena*);
template<> ::CDOTAClientMsg_PlayerBounty* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerBounty>(Arena*);
template<> ::CDOTAClientMsg_PlayerDraftPick* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerDraftPick>(Arena*);
template<> ::CDOTAClientMsg_PlayerDraftPreferRole* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerDraftPreferRole>(Arena*);
template<> ::CDOTAClientMsg_PlayerDraftPreferTeam* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerDraftPreferTeam>(Arena*);
template<> ::CDOTAClientMsg_PlayerDraftSuggest* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerDraftSuggest>(Arena*);
template<> ::CDOTAClientMsg_PlayerShowCase* Arena::CreateMaybeMessage<::CDOTAClientMsg_PlayerShowCase>(Arena*);
template<> ::CDOTAClientMsg_QuestStatus* Arena::CreateMaybeMessage<::CDOTAClientMsg_QuestStatus>(Arena*);
template<> ::CDOTAClientMsg_QuickBuyAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_QuickBuyAlert>(Arena*);
template<> ::CDOTAClientMsg_RadarAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_RadarAlert>(Arena*);
template<> ::CDOTAClientMsg_RankWager* Arena::CreateMaybeMessage<::CDOTAClientMsg_RankWager>(Arena*);
template<> ::CDOTAClientMsg_RecordVote* Arena::CreateMaybeMessage<::CDOTAClientMsg_RecordVote>(Arena*);
template<> ::CDOTAClientMsg_RequestBulkCombatLog* Arena::CreateMaybeMessage<::CDOTAClientMsg_RequestBulkCombatLog>(Arena*);
template<> ::CDOTAClientMsg_RequestGraphUpdate* Arena::CreateMaybeMessage<::CDOTAClientMsg_RequestGraphUpdate>(Arena*);
template<> ::CDOTAClientMsg_RequestItemSuggestions* Arena::CreateMaybeMessage<::CDOTAClientMsg_RequestItemSuggestions>(Arena*);
template<> ::CDOTAClientMsg_RollDice* Arena::CreateMaybeMessage<::CDOTAClientMsg_RollDice>(Arena*);
template<> ::CDOTAClientMsg_SalutePlayer* Arena::CreateMaybeMessage<::CDOTAClientMsg_SalutePlayer>(Arena*);
template<> ::CDOTAClientMsg_SearchString* Arena::CreateMaybeMessage<::CDOTAClientMsg_SearchString>(Arena*);
template<> ::CDOTAClientMsg_SendStatPopup* Arena::CreateMaybeMessage<::CDOTAClientMsg_SendStatPopup>(Arena*);
template<> ::CDOTAClientMsg_SetCavernMapVariant* Arena::CreateMaybeMessage<::CDOTAClientMsg_SetCavernMapVariant>(Arena*);
template<> ::CDOTAClientMsg_SetDesiredWardPlacement* Arena::CreateMaybeMessage<::CDOTAClientMsg_SetDesiredWardPlacement>(Arena*);
template<> ::CDOTAClientMsg_SetEnemyStartingPosition* Arena::CreateMaybeMessage<::CDOTAClientMsg_SetEnemyStartingPosition>(Arena*);
template<> ::CDOTAClientMsg_SetUnitShareFlag* Arena::CreateMaybeMessage<::CDOTAClientMsg_SetUnitShareFlag>(Arena*);
template<> ::CDOTAClientMsg_ShopViewMode* Arena::CreateMaybeMessage<::CDOTAClientMsg_ShopViewMode>(Arena*);
template<> ::CDOTAClientMsg_SpecialAbility* Arena::CreateMaybeMessage<::CDOTAClientMsg_SpecialAbility>(Arena*);
template<> ::CDOTAClientMsg_SwapAccept* Arena::CreateMaybeMessage<::CDOTAClientMsg_SwapAccept>(Arena*);
template<> ::CDOTAClientMsg_SwapRequest* Arena::CreateMaybeMessage<::CDOTAClientMsg_SwapRequest>(Arena*);
template<> ::CDOTAClientMsg_TalentTreeAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_TalentTreeAlert>(Arena*);
template<> ::CDOTAClientMsg_TeleportRequiresHalt* Arena::CreateMaybeMessage<::CDOTAClientMsg_TeleportRequiresHalt>(Arena*);
template<> ::CDOTAClientMsg_TipAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_TipAlert>(Arena*);
template<> ::CDOTAClientMsg_ToggleAutoattack* Arena::CreateMaybeMessage<::CDOTAClientMsg_ToggleAutoattack>(Arena*);
template<> ::CDOTAClientMsg_UnitsAutoAttackAfterSpell* Arena::CreateMaybeMessage<::CDOTAClientMsg_UnitsAutoAttackAfterSpell>(Arena*);
template<> ::CDOTAClientMsg_UnitsAutoAttackMode* Arena::CreateMaybeMessage<::CDOTAClientMsg_UnitsAutoAttackMode>(Arena*);
template<> ::CDOTAClientMsg_UpdateQuickBuy* Arena::CreateMaybeMessage<::CDOTAClientMsg_UpdateQuickBuy>(Arena*);
template<> ::CDOTAClientMsg_UpdateQuickBuyItem* Arena::CreateMaybeMessage<::CDOTAClientMsg_UpdateQuickBuyItem>(Arena*);
template<> ::CDOTAClientMsg_VersusScene_PlayerBehavior* Arena::CreateMaybeMessage<::CDOTAClientMsg_VersusScene_PlayerBehavior>(Arena*);
template<> ::CDOTAClientMsg_WillPurchaseAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_WillPurchaseAlert>(Arena*);
template<> ::CDOTAClientMsg_WorldLine* Arena::CreateMaybeMessage<::CDOTAClientMsg_WorldLine>(Arena*);
template<> ::CDOTAClientMsg_XPAlert* Arena::CreateMaybeMessage<::CDOTAClientMsg_XPAlert>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CDOTAClientMsg_UnitsAutoAttackMode_EMode : int {
  CDOTAClientMsg_UnitsAutoAttackMode_EMode_INVALID = -1,
  CDOTAClientMsg_UnitsAutoAttackMode_EMode_NEVER = 0,
  CDOTAClientMsg_UnitsAutoAttackMode_EMode_AFTER_SPELLCAST = 1,
  CDOTAClientMsg_UnitsAutoAttackMode_EMode_ALWAYS = 2
};
bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(int value);
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_MIN = CDOTAClientMsg_UnitsAutoAttackMode_EMode_INVALID;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_MAX = CDOTAClientMsg_UnitsAutoAttackMode_EMode_ALWAYS;
constexpr int CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_ARRAYSIZE = CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor();
template<typename T>
inline const std::string& CDOTAClientMsg_UnitsAutoAttackMode_EMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CDOTAClientMsg_UnitsAutoAttackMode_EMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CDOTAClientMsg_UnitsAutoAttackMode_EMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor(), enum_t_value);
}
inline bool CDOTAClientMsg_UnitsAutoAttackMode_EMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CDOTAClientMsg_UnitsAutoAttackMode_EMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CDOTAClientMsg_UnitsAutoAttackMode_EMode>(
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor(), name, value);
}
enum CDOTAClientMsg_UnitsAutoAttackMode_EUnitType : int {
  CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_NORMAL = 0,
  CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_SUMMONED = 1
};
bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(int value);
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_MIN = CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_NORMAL;
constexpr CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_MAX = CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_SUMMONED;
constexpr int CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_ARRAYSIZE = CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor();
template<typename T>
inline const std::string& CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CDOTAClientMsg_UnitsAutoAttackMode_EUnitType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor(), enum_t_value);
}
inline bool CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CDOTAClientMsg_UnitsAutoAttackMode_EUnitType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CDOTAClientMsg_UnitsAutoAttackMode_EUnitType>(
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor(), name, value);
}
enum EDotaClientMessages : int {
  DOTA_CM_MapLine = 301,
  DOTA_CM_AspectRatio = 302,
  DOTA_CM_MapPing = 303,
  DOTA_CM_UnitsAutoAttack = 304,
  DOTA_CM_SearchString = 307,
  DOTA_CM_Pause = 308,
  DOTA_CM_ShopViewMode = 309,
  DOTA_CM_SetUnitShareFlag = 310,
  DOTA_CM_SwapRequest = 311,
  DOTA_CM_SwapAccept = 312,
  DOTA_CM_WorldLine = 313,
  DOTA_CM_RequestGraphUpdate = 314,
  DOTA_CM_ItemAlert = 315,
  DOTA_CM_ChatWheel = 316,
  DOTA_CM_SendStatPopup = 317,
  DOTA_CM_BeginLastHitChallenge = 318,
  DOTA_CM_UpdateQuickBuy = 319,
  DOTA_CM_UpdateCoachListen = 320,
  DOTA_CM_CoachHUDPing = 321,
  DOTA_CM_RecordVote = 322,
  DOTA_CM_UnitsAutoAttackAfterSpell = 323,
  DOTA_CM_WillPurchaseAlert = 324,
  DOTA_CM_PlayerShowCase = 325,
  DOTA_CM_TeleportRequiresHalt = 326,
  DOTA_CM_CameraZoomAmount = 327,
  DOTA_CM_BroadcasterUsingCamerman = 328,
  DOTA_CM_BroadcasterUsingAssistedCameraOperator = 329,
  DOTA_CM_EnemyItemAlert = 330,
  DOTA_CM_FreeInventory = 331,
  DOTA_CM_BuyBackStateAlert = 332,
  DOTA_CM_QuickBuyAlert = 333,
  DOTA_CM_HeroStatueLike = 334,
  DOTA_CM_ModifierAlert = 335,
  DOTA_CM_TeamShowcaseEditor = 336,
  DOTA_CM_HPManaAlert = 337,
  DOTA_CM_GlyphAlert = 338,
  DOTA_CM_TeamShowcaseClientData = 339,
  DOTA_CM_PlayTeamShowcase = 340,
  DOTA_CM_EventCNY2015Cmd = 341,
  DOTA_CM_FillEmptySlotsWithBots = 342,
  DOTA_CM_DemoHero = 343,
  DOTA_CM_AbilityLearnModeToggled = 344,
  DOTA_CM_AbilityStartUse = 345,
  DOTA_CM_ChallengeSelect = 346,
  DOTA_CM_ChallengeReroll = 347,
  DOTA_CM_ClickedBuff = 348,
  DOTA_CM_CoinWager = 349,
  DOTA_CM_ExecuteOrders = 350,
  DOTA_CM_XPAlert = 351,
  DOTA_CM_EventPointsTip = 353,
  DOTA_CM_KillMyHero = 355,
  DOTA_CM_QuestStatus = 356,
  DOTA_CM_ToggleAutoattack = 357,
  DOTA_CM_SpecialAbility = 358,
  DOTA_CM_KillcamDamageTaken = 359,
  DOTA_CM_SetEnemyStartingPosition = 360,
  DOTA_CM_SetDesiredWardPlacement = 361,
  DOTA_CM_RollDice = 362,
  DOTA_CM_FlipCoin = 363,
  DOTA_CM_RequestItemSuggestions = 364,
  DOTA_CM_MakeTeamCaptain = 365,
  DOTA_CM_CoinWagerToken = 366,
  DOTA_CM_RankWager = 367,
  DOTA_CM_DismissAllStatPopups = 368,
  DOTA_CM_HelpTipSystemStateChanged = 369,
  DOTA_CM_ChannelRequiresHalt = 370,
  DOTA_CM_RequestBulkCombatLog = 371,
  DOTA_CM_AbilityDraftRequestAbility = 372,
  DOTA_CM_GuideSelectOption = 373,
  DOTA_CM_GuideSelected = 374,
  DOTA_CM_DamageReport = 375,
  DOTA_CM_SalutePlayer = 376,
  DOTA_CM_SprayWheel = 377,
  DOTA_CM_TipAlert = 378,
  DOTA_CM_EmptyTeleportAlert = 379,
  DOTA_CM_RadarAlert = 380,
  DOTA_CM_TalentTreeAlert = 381,
  DOTA_CM_SetCavernMapVariant = 382,
  DOTA_CM_PauseGameOrder = 383,
  DOTA_CM_VersusScene_PlayerBehavior = 384,
  DOTA_CM_PlayerBounty = 385,
  DOTA_CM_PlayerBountyCancel = 386,
  DOTA_CM_EmptyItemSlotAlert = 388,
  DOTA_CM_AddOverwatchReportMarker = 389,
  DOTA_CM_AghsStatusAlert = 390,
  DOTA_CM_PerfReport = 391,
  DOTA_CM_ContextualTips_Subscribe = 393,
  DOTA_CM_ChatMessage = 394,
  DOTA_CM_AddCommunicationsReportMarker = 395,
  DOTA_CM_AddCommunicationsBlockMarker = 396,
  DOTA_CM_NeutralCampAlert = 397,
  DOTA_CM_DuelAccepted = 398,
  DOTA_CM_ChooseNeutralItem = 399,
  DOTA_CM_PlayerDraftPick = 800,
  DOTA_CM_PlayerDraftSuggest = 801,
  DOTA_CM_PlayerDraftPreferRole = 802,
  DOTA_CM_PlayerDraftPreferTeam = 803,
  DOTA_CM_ChatWheelAlert = 804,
  DOTA_CM_AbilityAlert = 805,
  DOTA_CM_AllyAbilityAlert = 806
};
bool EDotaClientMessages_IsValid(int value);
constexpr EDotaClientMessages EDotaClientMessages_MIN = DOTA_CM_MapLine;
constexpr EDotaClientMessages EDotaClientMessages_MAX = DOTA_CM_AllyAbilityAlert;
constexpr int EDotaClientMessages_ARRAYSIZE = EDotaClientMessages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaClientMessages_descriptor();
template<typename T>
inline const std::string& EDotaClientMessages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDotaClientMessages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDotaClientMessages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDotaClientMessages_descriptor(), enum_t_value);
}
inline bool EDotaClientMessages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDotaClientMessages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDotaClientMessages>(
    EDotaClientMessages_descriptor(), name, value);
}
// ===================================================================

class CDOTAClientMsg_MapPing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_MapPing) */ {
 public:
  inline CDOTAClientMsg_MapPing() : CDOTAClientMsg_MapPing(nullptr) {}
  ~CDOTAClientMsg_MapPing() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_MapPing(const CDOTAClientMsg_MapPing& from);
  CDOTAClientMsg_MapPing(CDOTAClientMsg_MapPing&& from) noexcept
    : CDOTAClientMsg_MapPing() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_MapPing& operator=(const CDOTAClientMsg_MapPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_MapPing& operator=(CDOTAClientMsg_MapPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_MapPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_MapPing* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_MapPing*>(
               &_CDOTAClientMsg_MapPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDOTAClientMsg_MapPing& a, CDOTAClientMsg_MapPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_MapPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_MapPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_MapPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_MapPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_MapPing& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_MapPing& from) {
    CDOTAClientMsg_MapPing::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_MapPing* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_MapPing";
  }
  protected:
  explicit CDOTAClientMsg_MapPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationPingFieldNumber = 1,
  };
  // optional .CDOTAMsg_LocationPing location_ping = 1;
  bool has_location_ping() const;
  private:
  bool _internal_has_location_ping() const;
  public:
  void clear_location_ping();
  const ::CDOTAMsg_LocationPing& location_ping() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_LocationPing* release_location_ping();
  ::CDOTAMsg_LocationPing* mutable_location_ping();
  void set_allocated_location_ping(::CDOTAMsg_LocationPing* location_ping);
  private:
  const ::CDOTAMsg_LocationPing& _internal_location_ping() const;
  ::CDOTAMsg_LocationPing* _internal_mutable_location_ping();
  public:
  void unsafe_arena_set_allocated_location_ping(
      ::CDOTAMsg_LocationPing* location_ping);
  ::CDOTAMsg_LocationPing* unsafe_arena_release_location_ping();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_MapPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_LocationPing* location_ping_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ItemAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ItemAlert) */ {
 public:
  inline CDOTAClientMsg_ItemAlert() : CDOTAClientMsg_ItemAlert(nullptr) {}
  ~CDOTAClientMsg_ItemAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ItemAlert(const CDOTAClientMsg_ItemAlert& from);
  CDOTAClientMsg_ItemAlert(CDOTAClientMsg_ItemAlert&& from) noexcept
    : CDOTAClientMsg_ItemAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ItemAlert& operator=(const CDOTAClientMsg_ItemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ItemAlert& operator=(CDOTAClientMsg_ItemAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ItemAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ItemAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ItemAlert*>(
               &_CDOTAClientMsg_ItemAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDOTAClientMsg_ItemAlert& a, CDOTAClientMsg_ItemAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ItemAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ItemAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ItemAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ItemAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ItemAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ItemAlert& from) {
    CDOTAClientMsg_ItemAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ItemAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ItemAlert";
  }
  protected:
  explicit CDOTAClientMsg_ItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemAlertFieldNumber = 1,
  };
  // optional .CDOTAMsg_ItemAlert item_alert = 1;
  bool has_item_alert() const;
  private:
  bool _internal_has_item_alert() const;
  public:
  void clear_item_alert();
  const ::CDOTAMsg_ItemAlert& item_alert() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_ItemAlert* release_item_alert();
  ::CDOTAMsg_ItemAlert* mutable_item_alert();
  void set_allocated_item_alert(::CDOTAMsg_ItemAlert* item_alert);
  private:
  const ::CDOTAMsg_ItemAlert& _internal_item_alert() const;
  ::CDOTAMsg_ItemAlert* _internal_mutable_item_alert();
  public:
  void unsafe_arena_set_allocated_item_alert(
      ::CDOTAMsg_ItemAlert* item_alert);
  ::CDOTAMsg_ItemAlert* unsafe_arena_release_item_alert();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ItemAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_ItemAlert* item_alert_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EnemyItemAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EnemyItemAlert) */ {
 public:
  inline CDOTAClientMsg_EnemyItemAlert() : CDOTAClientMsg_EnemyItemAlert(nullptr) {}
  ~CDOTAClientMsg_EnemyItemAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_EnemyItemAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EnemyItemAlert(const CDOTAClientMsg_EnemyItemAlert& from);
  CDOTAClientMsg_EnemyItemAlert(CDOTAClientMsg_EnemyItemAlert&& from) noexcept
    : CDOTAClientMsg_EnemyItemAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EnemyItemAlert& operator=(const CDOTAClientMsg_EnemyItemAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EnemyItemAlert& operator=(CDOTAClientMsg_EnemyItemAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EnemyItemAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EnemyItemAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EnemyItemAlert*>(
               &_CDOTAClientMsg_EnemyItemAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDOTAClientMsg_EnemyItemAlert& a, CDOTAClientMsg_EnemyItemAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EnemyItemAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EnemyItemAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EnemyItemAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EnemyItemAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EnemyItemAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_EnemyItemAlert& from) {
    CDOTAClientMsg_EnemyItemAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EnemyItemAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EnemyItemAlert";
  }
  protected:
  explicit CDOTAClientMsg_EnemyItemAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondaryChargesFieldNumber = 5,
    kItemEntindexFieldNumber = 1,
    kRuneTypeFieldNumber = 2,
    kItemLevelFieldNumber = 3,
    kPrimaryChargesFieldNumber = 4,
  };
  // optional int32 secondary_charges = 5 [default = -1];
  bool has_secondary_charges() const;
  private:
  bool _internal_has_secondary_charges() const;
  public:
  void clear_secondary_charges();
  int32_t secondary_charges() const;
  void set_secondary_charges(int32_t value);
  private:
  int32_t _internal_secondary_charges() const;
  void _internal_set_secondary_charges(int32_t value);
  public:

  // optional int32 item_entindex = 1 [default = -1];
  bool has_item_entindex() const;
  private:
  bool _internal_has_item_entindex() const;
  public:
  void clear_item_entindex();
  int32_t item_entindex() const;
  void set_item_entindex(int32_t value);
  private:
  int32_t _internal_item_entindex() const;
  void _internal_set_item_entindex(int32_t value);
  public:

  // optional int32 rune_type = 2 [default = -1];
  bool has_rune_type() const;
  private:
  bool _internal_has_rune_type() const;
  public:
  void clear_rune_type();
  int32_t rune_type() const;
  void set_rune_type(int32_t value);
  private:
  int32_t _internal_rune_type() const;
  void _internal_set_rune_type(int32_t value);
  public:

  // optional int32 item_level = 3 [default = -1];
  bool has_item_level() const;
  private:
  bool _internal_has_item_level() const;
  public:
  void clear_item_level();
  int32_t item_level() const;
  void set_item_level(int32_t value);
  private:
  int32_t _internal_item_level() const;
  void _internal_set_item_level(int32_t value);
  public:

  // optional int32 primary_charges = 4 [default = -1];
  bool has_primary_charges() const;
  private:
  bool _internal_has_primary_charges() const;
  public:
  void clear_primary_charges();
  int32_t primary_charges() const;
  void set_primary_charges(int32_t value);
  private:
  int32_t _internal_primary_charges() const;
  void _internal_set_primary_charges(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EnemyItemAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t secondary_charges_;
    int32_t item_entindex_;
    int32_t rune_type_;
    int32_t item_level_;
    int32_t primary_charges_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ModifierAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ModifierAlert) */ {
 public:
  inline CDOTAClientMsg_ModifierAlert() : CDOTAClientMsg_ModifierAlert(nullptr) {}
  ~CDOTAClientMsg_ModifierAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ModifierAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ModifierAlert(const CDOTAClientMsg_ModifierAlert& from);
  CDOTAClientMsg_ModifierAlert(CDOTAClientMsg_ModifierAlert&& from) noexcept
    : CDOTAClientMsg_ModifierAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ModifierAlert& operator=(const CDOTAClientMsg_ModifierAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ModifierAlert& operator=(CDOTAClientMsg_ModifierAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ModifierAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ModifierAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ModifierAlert*>(
               &_CDOTAClientMsg_ModifierAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDOTAClientMsg_ModifierAlert& a, CDOTAClientMsg_ModifierAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ModifierAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ModifierAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ModifierAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ModifierAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ModifierAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ModifierAlert& from) {
    CDOTAClientMsg_ModifierAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ModifierAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ModifierAlert";
  }
  protected:
  explicit CDOTAClientMsg_ModifierAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffInternalIndexFieldNumber = 1,
    kTargetEntindexFieldNumber = 2,
  };
  // optional int32 buff_internal_index = 1;
  bool has_buff_internal_index() const;
  private:
  bool _internal_has_buff_internal_index() const;
  public:
  void clear_buff_internal_index();
  int32_t buff_internal_index() const;
  void set_buff_internal_index(int32_t value);
  private:
  int32_t _internal_buff_internal_index() const;
  void _internal_set_buff_internal_index(int32_t value);
  public:

  // optional int32 target_entindex = 2 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ModifierAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t buff_internal_index_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ClickedBuff final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ClickedBuff) */ {
 public:
  inline CDOTAClientMsg_ClickedBuff() : CDOTAClientMsg_ClickedBuff(nullptr) {}
  ~CDOTAClientMsg_ClickedBuff() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ClickedBuff(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ClickedBuff(const CDOTAClientMsg_ClickedBuff& from);
  CDOTAClientMsg_ClickedBuff(CDOTAClientMsg_ClickedBuff&& from) noexcept
    : CDOTAClientMsg_ClickedBuff() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ClickedBuff& operator=(const CDOTAClientMsg_ClickedBuff& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ClickedBuff& operator=(CDOTAClientMsg_ClickedBuff&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ClickedBuff& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ClickedBuff* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ClickedBuff*>(
               &_CDOTAClientMsg_ClickedBuff_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CDOTAClientMsg_ClickedBuff& a, CDOTAClientMsg_ClickedBuff& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ClickedBuff* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ClickedBuff* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ClickedBuff* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ClickedBuff>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ClickedBuff& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ClickedBuff& from) {
    CDOTAClientMsg_ClickedBuff::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ClickedBuff* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ClickedBuff";
  }
  protected:
  explicit CDOTAClientMsg_ClickedBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffInternalIndexFieldNumber = 1,
    kTargetEntindexFieldNumber = 2,
  };
  // optional int32 buff_internal_index = 1;
  bool has_buff_internal_index() const;
  private:
  bool _internal_has_buff_internal_index() const;
  public:
  void clear_buff_internal_index();
  int32_t buff_internal_index() const;
  void set_buff_internal_index(int32_t value);
  private:
  int32_t _internal_buff_internal_index() const;
  void _internal_set_buff_internal_index(int32_t value);
  public:

  // optional int32 target_entindex = 2 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ClickedBuff)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t buff_internal_index_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_HPManaAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_HPManaAlert) */ {
 public:
  inline CDOTAClientMsg_HPManaAlert() : CDOTAClientMsg_HPManaAlert(nullptr) {}
  ~CDOTAClientMsg_HPManaAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_HPManaAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_HPManaAlert(const CDOTAClientMsg_HPManaAlert& from);
  CDOTAClientMsg_HPManaAlert(CDOTAClientMsg_HPManaAlert&& from) noexcept
    : CDOTAClientMsg_HPManaAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_HPManaAlert& operator=(const CDOTAClientMsg_HPManaAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_HPManaAlert& operator=(CDOTAClientMsg_HPManaAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_HPManaAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_HPManaAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_HPManaAlert*>(
               &_CDOTAClientMsg_HPManaAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CDOTAClientMsg_HPManaAlert& a, CDOTAClientMsg_HPManaAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_HPManaAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_HPManaAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_HPManaAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_HPManaAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_HPManaAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_HPManaAlert& from) {
    CDOTAClientMsg_HPManaAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_HPManaAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_HPManaAlert";
  }
  protected:
  explicit CDOTAClientMsg_HPManaAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowRawValuesFieldNumber = 2,
    kTargetEntindexFieldNumber = 1,
  };
  // optional bool show_raw_values = 2;
  bool has_show_raw_values() const;
  private:
  bool _internal_has_show_raw_values() const;
  public:
  void clear_show_raw_values();
  bool show_raw_values() const;
  void set_show_raw_values(bool value);
  private:
  bool _internal_show_raw_values() const;
  void _internal_set_show_raw_values(bool value);
  public:

  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_HPManaAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool show_raw_values_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_NeutralCampAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_NeutralCampAlert) */ {
 public:
  inline CDOTAClientMsg_NeutralCampAlert() : CDOTAClientMsg_NeutralCampAlert(nullptr) {}
  ~CDOTAClientMsg_NeutralCampAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_NeutralCampAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_NeutralCampAlert(const CDOTAClientMsg_NeutralCampAlert& from);
  CDOTAClientMsg_NeutralCampAlert(CDOTAClientMsg_NeutralCampAlert&& from) noexcept
    : CDOTAClientMsg_NeutralCampAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_NeutralCampAlert& operator=(const CDOTAClientMsg_NeutralCampAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_NeutralCampAlert& operator=(CDOTAClientMsg_NeutralCampAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_NeutralCampAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_NeutralCampAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_NeutralCampAlert*>(
               &_CDOTAClientMsg_NeutralCampAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDOTAClientMsg_NeutralCampAlert& a, CDOTAClientMsg_NeutralCampAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_NeutralCampAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_NeutralCampAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_NeutralCampAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_NeutralCampAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_NeutralCampAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_NeutralCampAlert& from) {
    CDOTAClientMsg_NeutralCampAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_NeutralCampAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_NeutralCampAlert";
  }
  protected:
  explicit CDOTAClientMsg_NeutralCampAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStackRequestFieldNumber = 3,
    kSpawnerEntindexFieldNumber = 1,
    kUnitEntindexFieldNumber = 2,
  };
  // optional bool stack_request = 3;
  bool has_stack_request() const;
  private:
  bool _internal_has_stack_request() const;
  public:
  void clear_stack_request();
  bool stack_request() const;
  void set_stack_request(bool value);
  private:
  bool _internal_stack_request() const;
  void _internal_set_stack_request(bool value);
  public:

  // optional int32 spawner_entindex = 1 [default = -1];
  bool has_spawner_entindex() const;
  private:
  bool _internal_has_spawner_entindex() const;
  public:
  void clear_spawner_entindex();
  int32_t spawner_entindex() const;
  void set_spawner_entindex(int32_t value);
  private:
  int32_t _internal_spawner_entindex() const;
  void _internal_set_spawner_entindex(int32_t value);
  public:

  // optional int32 unit_entindex = 2 [default = -1];
  bool has_unit_entindex() const;
  private:
  bool _internal_has_unit_entindex() const;
  public:
  void clear_unit_entindex();
  int32_t unit_entindex() const;
  void set_unit_entindex(int32_t value);
  private:
  int32_t _internal_unit_entindex() const;
  void _internal_set_unit_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_NeutralCampAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool stack_request_;
    int32_t spawner_entindex_;
    int32_t unit_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_GlyphAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_GlyphAlert) */ {
 public:
  inline CDOTAClientMsg_GlyphAlert() : CDOTAClientMsg_GlyphAlert(nullptr) {}
  ~CDOTAClientMsg_GlyphAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_GlyphAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_GlyphAlert(const CDOTAClientMsg_GlyphAlert& from);
  CDOTAClientMsg_GlyphAlert(CDOTAClientMsg_GlyphAlert&& from) noexcept
    : CDOTAClientMsg_GlyphAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_GlyphAlert& operator=(const CDOTAClientMsg_GlyphAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_GlyphAlert& operator=(CDOTAClientMsg_GlyphAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_GlyphAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_GlyphAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_GlyphAlert*>(
               &_CDOTAClientMsg_GlyphAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDOTAClientMsg_GlyphAlert& a, CDOTAClientMsg_GlyphAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_GlyphAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_GlyphAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_GlyphAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_GlyphAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_GlyphAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_GlyphAlert& from) {
    CDOTAClientMsg_GlyphAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_GlyphAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_GlyphAlert";
  }
  protected:
  explicit CDOTAClientMsg_GlyphAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeFieldNumber = 1,
  };
  // optional bool negative = 1;
  bool has_negative() const;
  private:
  bool _internal_has_negative() const;
  public:
  void clear_negative();
  bool negative() const;
  void set_negative(bool value);
  private:
  bool _internal_negative() const;
  void _internal_set_negative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_GlyphAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool negative_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RadarAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RadarAlert) */ {
 public:
  inline CDOTAClientMsg_RadarAlert() : CDOTAClientMsg_RadarAlert(nullptr) {}
  ~CDOTAClientMsg_RadarAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RadarAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RadarAlert(const CDOTAClientMsg_RadarAlert& from);
  CDOTAClientMsg_RadarAlert(CDOTAClientMsg_RadarAlert&& from) noexcept
    : CDOTAClientMsg_RadarAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RadarAlert& operator=(const CDOTAClientMsg_RadarAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RadarAlert& operator=(CDOTAClientMsg_RadarAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RadarAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RadarAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RadarAlert*>(
               &_CDOTAClientMsg_RadarAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CDOTAClientMsg_RadarAlert& a, CDOTAClientMsg_RadarAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RadarAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RadarAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RadarAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RadarAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RadarAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_RadarAlert& from) {
    CDOTAClientMsg_RadarAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RadarAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RadarAlert";
  }
  protected:
  explicit CDOTAClientMsg_RadarAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNegativeFieldNumber = 1,
  };
  // optional bool negative = 1;
  bool has_negative() const;
  private:
  bool _internal_has_negative() const;
  public:
  void clear_negative();
  bool negative() const;
  void set_negative(bool value);
  private:
  bool _internal_negative() const;
  void _internal_set_negative(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RadarAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool negative_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_MapLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_MapLine) */ {
 public:
  inline CDOTAClientMsg_MapLine() : CDOTAClientMsg_MapLine(nullptr) {}
  ~CDOTAClientMsg_MapLine() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_MapLine(const CDOTAClientMsg_MapLine& from);
  CDOTAClientMsg_MapLine(CDOTAClientMsg_MapLine&& from) noexcept
    : CDOTAClientMsg_MapLine() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_MapLine& operator=(const CDOTAClientMsg_MapLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_MapLine& operator=(CDOTAClientMsg_MapLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_MapLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_MapLine* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_MapLine*>(
               &_CDOTAClientMsg_MapLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CDOTAClientMsg_MapLine& a, CDOTAClientMsg_MapLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_MapLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_MapLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_MapLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_MapLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_MapLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_MapLine& from) {
    CDOTAClientMsg_MapLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_MapLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_MapLine";
  }
  protected:
  explicit CDOTAClientMsg_MapLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaplineFieldNumber = 1,
  };
  // optional .CDOTAMsg_MapLine mapline = 1;
  bool has_mapline() const;
  private:
  bool _internal_has_mapline() const;
  public:
  void clear_mapline();
  const ::CDOTAMsg_MapLine& mapline() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_MapLine* release_mapline();
  ::CDOTAMsg_MapLine* mutable_mapline();
  void set_allocated_mapline(::CDOTAMsg_MapLine* mapline);
  private:
  const ::CDOTAMsg_MapLine& _internal_mapline() const;
  ::CDOTAMsg_MapLine* _internal_mutable_mapline();
  public:
  void unsafe_arena_set_allocated_mapline(
      ::CDOTAMsg_MapLine* mapline);
  ::CDOTAMsg_MapLine* unsafe_arena_release_mapline();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_MapLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_MapLine* mapline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AspectRatio final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AspectRatio) */ {
 public:
  inline CDOTAClientMsg_AspectRatio() : CDOTAClientMsg_AspectRatio(nullptr) {}
  ~CDOTAClientMsg_AspectRatio() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AspectRatio(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AspectRatio(const CDOTAClientMsg_AspectRatio& from);
  CDOTAClientMsg_AspectRatio(CDOTAClientMsg_AspectRatio&& from) noexcept
    : CDOTAClientMsg_AspectRatio() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AspectRatio& operator=(const CDOTAClientMsg_AspectRatio& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AspectRatio& operator=(CDOTAClientMsg_AspectRatio&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AspectRatio& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AspectRatio* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AspectRatio*>(
               &_CDOTAClientMsg_AspectRatio_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CDOTAClientMsg_AspectRatio& a, CDOTAClientMsg_AspectRatio& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AspectRatio* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AspectRatio* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AspectRatio* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AspectRatio>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AspectRatio& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AspectRatio& from) {
    CDOTAClientMsg_AspectRatio::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AspectRatio* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AspectRatio";
  }
  protected:
  explicit CDOTAClientMsg_AspectRatio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatioFieldNumber = 1,
  };
  // optional float ratio = 1;
  bool has_ratio() const;
  private:
  bool _internal_has_ratio() const;
  public:
  void clear_ratio();
  float ratio() const;
  void set_ratio(float value);
  private:
  float _internal_ratio() const;
  void _internal_set_ratio(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AspectRatio)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float ratio_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_UnitsAutoAttackMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_UnitsAutoAttackMode) */ {
 public:
  inline CDOTAClientMsg_UnitsAutoAttackMode() : CDOTAClientMsg_UnitsAutoAttackMode(nullptr) {}
  ~CDOTAClientMsg_UnitsAutoAttackMode() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_UnitsAutoAttackMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_UnitsAutoAttackMode(const CDOTAClientMsg_UnitsAutoAttackMode& from);
  CDOTAClientMsg_UnitsAutoAttackMode(CDOTAClientMsg_UnitsAutoAttackMode&& from) noexcept
    : CDOTAClientMsg_UnitsAutoAttackMode() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_UnitsAutoAttackMode& operator=(const CDOTAClientMsg_UnitsAutoAttackMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_UnitsAutoAttackMode& operator=(CDOTAClientMsg_UnitsAutoAttackMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_UnitsAutoAttackMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_UnitsAutoAttackMode* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_UnitsAutoAttackMode*>(
               &_CDOTAClientMsg_UnitsAutoAttackMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CDOTAClientMsg_UnitsAutoAttackMode& a, CDOTAClientMsg_UnitsAutoAttackMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_UnitsAutoAttackMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_UnitsAutoAttackMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_UnitsAutoAttackMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_UnitsAutoAttackMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_UnitsAutoAttackMode& from) {
    CDOTAClientMsg_UnitsAutoAttackMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_UnitsAutoAttackMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_UnitsAutoAttackMode";
  }
  protected:
  explicit CDOTAClientMsg_UnitsAutoAttackMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTAClientMsg_UnitsAutoAttackMode_EMode EMode;
  static constexpr EMode INVALID =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_INVALID;
  static constexpr EMode NEVER =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_NEVER;
  static constexpr EMode AFTER_SPELLCAST =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_AFTER_SPELLCAST;
  static constexpr EMode ALWAYS =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_ALWAYS;
  static inline bool EMode_IsValid(int value) {
    return CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value);
  }
  static constexpr EMode EMode_MIN =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_MIN;
  static constexpr EMode EMode_MAX =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_MAX;
  static constexpr int EMode_ARRAYSIZE =
    CDOTAClientMsg_UnitsAutoAttackMode_EMode_EMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EMode_descriptor() {
    return CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor();
  }
  template<typename T>
  static inline const std::string& EMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EMode_Name.");
    return CDOTAClientMsg_UnitsAutoAttackMode_EMode_Name(enum_t_value);
  }
  static inline bool EMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EMode* value) {
    return CDOTAClientMsg_UnitsAutoAttackMode_EMode_Parse(name, value);
  }

  typedef CDOTAClientMsg_UnitsAutoAttackMode_EUnitType EUnitType;
  static constexpr EUnitType NORMAL =
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_NORMAL;
  static constexpr EUnitType SUMMONED =
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_SUMMONED;
  static inline bool EUnitType_IsValid(int value) {
    return CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value);
  }
  static constexpr EUnitType EUnitType_MIN =
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_MIN;
  static constexpr EUnitType EUnitType_MAX =
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_MAX;
  static constexpr int EUnitType_ARRAYSIZE =
    CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_EUnitType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EUnitType_descriptor() {
    return CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor();
  }
  template<typename T>
  static inline const std::string& EUnitType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EUnitType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EUnitType_Name.");
    return CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_Name(enum_t_value);
  }
  static inline bool EUnitType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EUnitType* value) {
    return CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUnitTypeFieldNumber = 2,
    kModeFieldNumber = 1,
  };
  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
  bool has_unit_type() const;
  private:
  bool _internal_has_unit_type() const;
  public:
  void clear_unit_type();
  ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType unit_type() const;
  void set_unit_type(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType value);
  private:
  ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType _internal_unit_type() const;
  void _internal_set_unit_type(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType value);
  public:

  // optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  ::CDOTAClientMsg_UnitsAutoAttackMode_EMode mode() const;
  void set_mode(::CDOTAClientMsg_UnitsAutoAttackMode_EMode value);
  private:
  ::CDOTAClientMsg_UnitsAutoAttackMode_EMode _internal_mode() const;
  void _internal_set_mode(::CDOTAClientMsg_UnitsAutoAttackMode_EMode value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_UnitsAutoAttackMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int unit_type_;
    int mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_UnitsAutoAttackAfterSpell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_UnitsAutoAttackAfterSpell) */ {
 public:
  inline CDOTAClientMsg_UnitsAutoAttackAfterSpell() : CDOTAClientMsg_UnitsAutoAttackAfterSpell(nullptr) {}
  ~CDOTAClientMsg_UnitsAutoAttackAfterSpell() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_UnitsAutoAttackAfterSpell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_UnitsAutoAttackAfterSpell(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from);
  CDOTAClientMsg_UnitsAutoAttackAfterSpell(CDOTAClientMsg_UnitsAutoAttackAfterSpell&& from) noexcept
    : CDOTAClientMsg_UnitsAutoAttackAfterSpell() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_UnitsAutoAttackAfterSpell& operator=(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_UnitsAutoAttackAfterSpell& operator=(CDOTAClientMsg_UnitsAutoAttackAfterSpell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_UnitsAutoAttackAfterSpell& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_UnitsAutoAttackAfterSpell* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_UnitsAutoAttackAfterSpell*>(
               &_CDOTAClientMsg_UnitsAutoAttackAfterSpell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell& a, CDOTAClientMsg_UnitsAutoAttackAfterSpell& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_UnitsAutoAttackAfterSpell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_UnitsAutoAttackAfterSpell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_UnitsAutoAttackAfterSpell& from) {
    CDOTAClientMsg_UnitsAutoAttackAfterSpell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_UnitsAutoAttackAfterSpell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_UnitsAutoAttackAfterSpell";
  }
  protected:
  explicit CDOTAClientMsg_UnitsAutoAttackAfterSpell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_UnitsAutoAttackAfterSpell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_TeleportRequiresHalt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_TeleportRequiresHalt) */ {
 public:
  inline CDOTAClientMsg_TeleportRequiresHalt() : CDOTAClientMsg_TeleportRequiresHalt(nullptr) {}
  ~CDOTAClientMsg_TeleportRequiresHalt() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_TeleportRequiresHalt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_TeleportRequiresHalt(const CDOTAClientMsg_TeleportRequiresHalt& from);
  CDOTAClientMsg_TeleportRequiresHalt(CDOTAClientMsg_TeleportRequiresHalt&& from) noexcept
    : CDOTAClientMsg_TeleportRequiresHalt() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_TeleportRequiresHalt& operator=(const CDOTAClientMsg_TeleportRequiresHalt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_TeleportRequiresHalt& operator=(CDOTAClientMsg_TeleportRequiresHalt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_TeleportRequiresHalt& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_TeleportRequiresHalt* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_TeleportRequiresHalt*>(
               &_CDOTAClientMsg_TeleportRequiresHalt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CDOTAClientMsg_TeleportRequiresHalt& a, CDOTAClientMsg_TeleportRequiresHalt& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_TeleportRequiresHalt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_TeleportRequiresHalt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_TeleportRequiresHalt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_TeleportRequiresHalt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_TeleportRequiresHalt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_TeleportRequiresHalt& from) {
    CDOTAClientMsg_TeleportRequiresHalt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_TeleportRequiresHalt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_TeleportRequiresHalt";
  }
  protected:
  explicit CDOTAClientMsg_TeleportRequiresHalt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_TeleportRequiresHalt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChannelRequiresHalt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChannelRequiresHalt) */ {
 public:
  inline CDOTAClientMsg_ChannelRequiresHalt() : CDOTAClientMsg_ChannelRequiresHalt(nullptr) {}
  ~CDOTAClientMsg_ChannelRequiresHalt() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChannelRequiresHalt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChannelRequiresHalt(const CDOTAClientMsg_ChannelRequiresHalt& from);
  CDOTAClientMsg_ChannelRequiresHalt(CDOTAClientMsg_ChannelRequiresHalt&& from) noexcept
    : CDOTAClientMsg_ChannelRequiresHalt() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChannelRequiresHalt& operator=(const CDOTAClientMsg_ChannelRequiresHalt& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChannelRequiresHalt& operator=(CDOTAClientMsg_ChannelRequiresHalt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChannelRequiresHalt& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChannelRequiresHalt* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChannelRequiresHalt*>(
               &_CDOTAClientMsg_ChannelRequiresHalt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CDOTAClientMsg_ChannelRequiresHalt& a, CDOTAClientMsg_ChannelRequiresHalt& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChannelRequiresHalt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChannelRequiresHalt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChannelRequiresHalt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChannelRequiresHalt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChannelRequiresHalt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChannelRequiresHalt& from) {
    CDOTAClientMsg_ChannelRequiresHalt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChannelRequiresHalt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChannelRequiresHalt";
  }
  protected:
  explicit CDOTAClientMsg_ChannelRequiresHalt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChannelRequiresHalt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SearchString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SearchString) */ {
 public:
  inline CDOTAClientMsg_SearchString() : CDOTAClientMsg_SearchString(nullptr) {}
  ~CDOTAClientMsg_SearchString() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SearchString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SearchString(const CDOTAClientMsg_SearchString& from);
  CDOTAClientMsg_SearchString(CDOTAClientMsg_SearchString&& from) noexcept
    : CDOTAClientMsg_SearchString() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SearchString& operator=(const CDOTAClientMsg_SearchString& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SearchString& operator=(CDOTAClientMsg_SearchString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SearchString& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SearchString* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SearchString*>(
               &_CDOTAClientMsg_SearchString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CDOTAClientMsg_SearchString& a, CDOTAClientMsg_SearchString& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SearchString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SearchString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SearchString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SearchString>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SearchString& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SearchString& from) {
    CDOTAClientMsg_SearchString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SearchString* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SearchString";
  }
  protected:
  explicit CDOTAClientMsg_SearchString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchFieldNumber = 1,
  };
  // optional string search = 1;
  bool has_search() const;
  private:
  bool _internal_has_search() const;
  public:
  void clear_search();
  const std::string& search() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_search(ArgT0&& arg0, ArgT... args);
  std::string* mutable_search();
  PROTOBUF_NODISCARD std::string* release_search();
  void set_allocated_search(std::string* search);
  private:
  const std::string& _internal_search() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search(const std::string& value);
  std::string* _internal_mutable_search();
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SearchString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_Pause final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_Pause) */ {
 public:
  inline CDOTAClientMsg_Pause() : CDOTAClientMsg_Pause(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_Pause(const CDOTAClientMsg_Pause& from);
  CDOTAClientMsg_Pause(CDOTAClientMsg_Pause&& from) noexcept
    : CDOTAClientMsg_Pause() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_Pause& operator=(const CDOTAClientMsg_Pause& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_Pause& operator=(CDOTAClientMsg_Pause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_Pause& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_Pause* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_Pause*>(
               &_CDOTAClientMsg_Pause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CDOTAClientMsg_Pause& a, CDOTAClientMsg_Pause& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_Pause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_Pause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_Pause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_Pause>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDOTAClientMsg_Pause& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_Pause& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_Pause";
  }
  protected:
  explicit CDOTAClientMsg_Pause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_Pause)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ShopViewMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ShopViewMode) */ {
 public:
  inline CDOTAClientMsg_ShopViewMode() : CDOTAClientMsg_ShopViewMode(nullptr) {}
  ~CDOTAClientMsg_ShopViewMode() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ShopViewMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ShopViewMode(const CDOTAClientMsg_ShopViewMode& from);
  CDOTAClientMsg_ShopViewMode(CDOTAClientMsg_ShopViewMode&& from) noexcept
    : CDOTAClientMsg_ShopViewMode() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ShopViewMode& operator=(const CDOTAClientMsg_ShopViewMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ShopViewMode& operator=(CDOTAClientMsg_ShopViewMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ShopViewMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ShopViewMode* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ShopViewMode*>(
               &_CDOTAClientMsg_ShopViewMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CDOTAClientMsg_ShopViewMode& a, CDOTAClientMsg_ShopViewMode& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ShopViewMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ShopViewMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ShopViewMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ShopViewMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ShopViewMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ShopViewMode& from) {
    CDOTAClientMsg_ShopViewMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ShopViewMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ShopViewMode";
  }
  protected:
  explicit CDOTAClientMsg_ShopViewMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
  };
  // optional uint32 mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  uint32_t mode() const;
  void set_mode(uint32_t value);
  private:
  uint32_t _internal_mode() const;
  void _internal_set_mode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ShopViewMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SetUnitShareFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SetUnitShareFlag) */ {
 public:
  inline CDOTAClientMsg_SetUnitShareFlag() : CDOTAClientMsg_SetUnitShareFlag(nullptr) {}
  ~CDOTAClientMsg_SetUnitShareFlag() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SetUnitShareFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SetUnitShareFlag(const CDOTAClientMsg_SetUnitShareFlag& from);
  CDOTAClientMsg_SetUnitShareFlag(CDOTAClientMsg_SetUnitShareFlag&& from) noexcept
    : CDOTAClientMsg_SetUnitShareFlag() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SetUnitShareFlag& operator=(const CDOTAClientMsg_SetUnitShareFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SetUnitShareFlag& operator=(CDOTAClientMsg_SetUnitShareFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SetUnitShareFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SetUnitShareFlag* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SetUnitShareFlag*>(
               &_CDOTAClientMsg_SetUnitShareFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CDOTAClientMsg_SetUnitShareFlag& a, CDOTAClientMsg_SetUnitShareFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SetUnitShareFlag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SetUnitShareFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SetUnitShareFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SetUnitShareFlag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SetUnitShareFlag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SetUnitShareFlag& from) {
    CDOTAClientMsg_SetUnitShareFlag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SetUnitShareFlag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SetUnitShareFlag";
  }
  protected:
  explicit CDOTAClientMsg_SetUnitShareFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 2,
    kStateFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // optional uint32 flag = 2;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  uint32_t flag() const;
  void set_flag(uint32_t value);
  private:
  uint32_t _internal_flag() const;
  void _internal_set_flag(uint32_t value);
  public:

  // optional bool state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  bool state() const;
  void set_state(bool value);
  private:
  bool _internal_state() const;
  void _internal_set_state(bool value);
  public:

  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SetUnitShareFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t flag_;
    bool state_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SwapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SwapRequest) */ {
 public:
  inline CDOTAClientMsg_SwapRequest() : CDOTAClientMsg_SwapRequest(nullptr) {}
  ~CDOTAClientMsg_SwapRequest() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SwapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SwapRequest(const CDOTAClientMsg_SwapRequest& from);
  CDOTAClientMsg_SwapRequest(CDOTAClientMsg_SwapRequest&& from) noexcept
    : CDOTAClientMsg_SwapRequest() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SwapRequest& operator=(const CDOTAClientMsg_SwapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SwapRequest& operator=(CDOTAClientMsg_SwapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SwapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SwapRequest* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SwapRequest*>(
               &_CDOTAClientMsg_SwapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CDOTAClientMsg_SwapRequest& a, CDOTAClientMsg_SwapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SwapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SwapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SwapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SwapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SwapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SwapRequest& from) {
    CDOTAClientMsg_SwapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SwapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SwapRequest";
  }
  protected:
  explicit CDOTAClientMsg_SwapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SwapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SwapAccept final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SwapAccept) */ {
 public:
  inline CDOTAClientMsg_SwapAccept() : CDOTAClientMsg_SwapAccept(nullptr) {}
  ~CDOTAClientMsg_SwapAccept() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SwapAccept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SwapAccept(const CDOTAClientMsg_SwapAccept& from);
  CDOTAClientMsg_SwapAccept(CDOTAClientMsg_SwapAccept&& from) noexcept
    : CDOTAClientMsg_SwapAccept() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SwapAccept& operator=(const CDOTAClientMsg_SwapAccept& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SwapAccept& operator=(CDOTAClientMsg_SwapAccept&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SwapAccept& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SwapAccept* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SwapAccept*>(
               &_CDOTAClientMsg_SwapAccept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CDOTAClientMsg_SwapAccept& a, CDOTAClientMsg_SwapAccept& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SwapAccept* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SwapAccept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SwapAccept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SwapAccept>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SwapAccept& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SwapAccept& from) {
    CDOTAClientMsg_SwapAccept::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SwapAccept* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SwapAccept";
  }
  protected:
  explicit CDOTAClientMsg_SwapAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SwapAccept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_WorldLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_WorldLine) */ {
 public:
  inline CDOTAClientMsg_WorldLine() : CDOTAClientMsg_WorldLine(nullptr) {}
  ~CDOTAClientMsg_WorldLine() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_WorldLine(const CDOTAClientMsg_WorldLine& from);
  CDOTAClientMsg_WorldLine(CDOTAClientMsg_WorldLine&& from) noexcept
    : CDOTAClientMsg_WorldLine() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_WorldLine& operator=(const CDOTAClientMsg_WorldLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_WorldLine& operator=(CDOTAClientMsg_WorldLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_WorldLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_WorldLine* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_WorldLine*>(
               &_CDOTAClientMsg_WorldLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CDOTAClientMsg_WorldLine& a, CDOTAClientMsg_WorldLine& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_WorldLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_WorldLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_WorldLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_WorldLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_WorldLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_WorldLine& from) {
    CDOTAClientMsg_WorldLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_WorldLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_WorldLine";
  }
  protected:
  explicit CDOTAClientMsg_WorldLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldlineFieldNumber = 1,
  };
  // optional .CDOTAMsg_WorldLine worldline = 1;
  bool has_worldline() const;
  private:
  bool _internal_has_worldline() const;
  public:
  void clear_worldline();
  const ::CDOTAMsg_WorldLine& worldline() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_WorldLine* release_worldline();
  ::CDOTAMsg_WorldLine* mutable_worldline();
  void set_allocated_worldline(::CDOTAMsg_WorldLine* worldline);
  private:
  const ::CDOTAMsg_WorldLine& _internal_worldline() const;
  ::CDOTAMsg_WorldLine* _internal_mutable_worldline();
  public:
  void unsafe_arena_set_allocated_worldline(
      ::CDOTAMsg_WorldLine* worldline);
  ::CDOTAMsg_WorldLine* unsafe_arena_release_worldline();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_WorldLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_WorldLine* worldline_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RequestGraphUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RequestGraphUpdate) */ {
 public:
  inline CDOTAClientMsg_RequestGraphUpdate() : CDOTAClientMsg_RequestGraphUpdate(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RequestGraphUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RequestGraphUpdate(const CDOTAClientMsg_RequestGraphUpdate& from);
  CDOTAClientMsg_RequestGraphUpdate(CDOTAClientMsg_RequestGraphUpdate&& from) noexcept
    : CDOTAClientMsg_RequestGraphUpdate() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RequestGraphUpdate& operator=(const CDOTAClientMsg_RequestGraphUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RequestGraphUpdate& operator=(CDOTAClientMsg_RequestGraphUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RequestGraphUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RequestGraphUpdate* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RequestGraphUpdate*>(
               &_CDOTAClientMsg_RequestGraphUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CDOTAClientMsg_RequestGraphUpdate& a, CDOTAClientMsg_RequestGraphUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RequestGraphUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RequestGraphUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RequestGraphUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RequestGraphUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_RequestGraphUpdate& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RequestGraphUpdate";
  }
  protected:
  explicit CDOTAClientMsg_RequestGraphUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RequestGraphUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChatWheel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChatWheel) */ {
 public:
  inline CDOTAClientMsg_ChatWheel() : CDOTAClientMsg_ChatWheel(nullptr) {}
  ~CDOTAClientMsg_ChatWheel() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChatWheel(const CDOTAClientMsg_ChatWheel& from);
  CDOTAClientMsg_ChatWheel(CDOTAClientMsg_ChatWheel&& from) noexcept
    : CDOTAClientMsg_ChatWheel() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChatWheel& operator=(const CDOTAClientMsg_ChatWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChatWheel& operator=(CDOTAClientMsg_ChatWheel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChatWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChatWheel* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChatWheel*>(
               &_CDOTAClientMsg_ChatWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CDOTAClientMsg_ChatWheel& a, CDOTAClientMsg_ChatWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChatWheel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChatWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChatWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChatWheel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChatWheel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChatWheel& from) {
    CDOTAClientMsg_ChatWheel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChatWheel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChatWheel";
  }
  protected:
  explicit CDOTAClientMsg_ChatWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamHeroIdFieldNumber = 2,
    kEmoticonIdFieldNumber = 3,
    kChatMessageIdFieldNumber = 1,
  };
  // optional uint32 param_hero_id = 2;
  bool has_param_hero_id() const;
  private:
  bool _internal_has_param_hero_id() const;
  public:
  void clear_param_hero_id();
  uint32_t param_hero_id() const;
  void set_param_hero_id(uint32_t value);
  private:
  uint32_t _internal_param_hero_id() const;
  void _internal_set_param_hero_id(uint32_t value);
  public:

  // optional uint32 emoticon_id = 3;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // optional uint32 chat_message_id = 1 [default = 4294967295];
  bool has_chat_message_id() const;
  private:
  bool _internal_has_chat_message_id() const;
  public:
  void clear_chat_message_id();
  uint32_t chat_message_id() const;
  void set_chat_message_id(uint32_t value);
  private:
  uint32_t _internal_chat_message_id() const;
  void _internal_set_chat_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChatWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t param_hero_id_;
    uint32_t emoticon_id_;
    uint32_t chat_message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SendStatPopup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SendStatPopup) */ {
 public:
  inline CDOTAClientMsg_SendStatPopup() : CDOTAClientMsg_SendStatPopup(nullptr) {}
  ~CDOTAClientMsg_SendStatPopup() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SendStatPopup(const CDOTAClientMsg_SendStatPopup& from);
  CDOTAClientMsg_SendStatPopup(CDOTAClientMsg_SendStatPopup&& from) noexcept
    : CDOTAClientMsg_SendStatPopup() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SendStatPopup& operator=(const CDOTAClientMsg_SendStatPopup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SendStatPopup& operator=(CDOTAClientMsg_SendStatPopup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SendStatPopup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SendStatPopup* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SendStatPopup*>(
               &_CDOTAClientMsg_SendStatPopup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CDOTAClientMsg_SendStatPopup& a, CDOTAClientMsg_SendStatPopup& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SendStatPopup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SendStatPopup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SendStatPopup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SendStatPopup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SendStatPopup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SendStatPopup& from) {
    CDOTAClientMsg_SendStatPopup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SendStatPopup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SendStatPopup";
  }
  protected:
  explicit CDOTAClientMsg_SendStatPopup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatpopupFieldNumber = 1,
  };
  // optional .CDOTAMsg_SendStatPopup statpopup = 1;
  bool has_statpopup() const;
  private:
  bool _internal_has_statpopup() const;
  public:
  void clear_statpopup();
  const ::CDOTAMsg_SendStatPopup& statpopup() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_SendStatPopup* release_statpopup();
  ::CDOTAMsg_SendStatPopup* mutable_statpopup();
  void set_allocated_statpopup(::CDOTAMsg_SendStatPopup* statpopup);
  private:
  const ::CDOTAMsg_SendStatPopup& _internal_statpopup() const;
  ::CDOTAMsg_SendStatPopup* _internal_mutable_statpopup();
  public:
  void unsafe_arena_set_allocated_statpopup(
      ::CDOTAMsg_SendStatPopup* statpopup);
  ::CDOTAMsg_SendStatPopup* unsafe_arena_release_statpopup();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SendStatPopup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_SendStatPopup* statpopup_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_DismissAllStatPopups final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_DismissAllStatPopups) */ {
 public:
  inline CDOTAClientMsg_DismissAllStatPopups() : CDOTAClientMsg_DismissAllStatPopups(nullptr) {}
  ~CDOTAClientMsg_DismissAllStatPopups() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_DismissAllStatPopups(const CDOTAClientMsg_DismissAllStatPopups& from);
  CDOTAClientMsg_DismissAllStatPopups(CDOTAClientMsg_DismissAllStatPopups&& from) noexcept
    : CDOTAClientMsg_DismissAllStatPopups() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_DismissAllStatPopups& operator=(const CDOTAClientMsg_DismissAllStatPopups& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_DismissAllStatPopups& operator=(CDOTAClientMsg_DismissAllStatPopups&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_DismissAllStatPopups& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_DismissAllStatPopups* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_DismissAllStatPopups*>(
               &_CDOTAClientMsg_DismissAllStatPopups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CDOTAClientMsg_DismissAllStatPopups& a, CDOTAClientMsg_DismissAllStatPopups& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_DismissAllStatPopups* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_DismissAllStatPopups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_DismissAllStatPopups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_DismissAllStatPopups>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_DismissAllStatPopups& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_DismissAllStatPopups& from) {
    CDOTAClientMsg_DismissAllStatPopups::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_DismissAllStatPopups* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_DismissAllStatPopups";
  }
  protected:
  explicit CDOTAClientMsg_DismissAllStatPopups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDismissallmsgFieldNumber = 1,
  };
  // optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
  bool has_dismissallmsg() const;
  private:
  bool _internal_has_dismissallmsg() const;
  public:
  void clear_dismissallmsg();
  const ::CDOTAMsg_DismissAllStatPopups& dismissallmsg() const;
  PROTOBUF_NODISCARD ::CDOTAMsg_DismissAllStatPopups* release_dismissallmsg();
  ::CDOTAMsg_DismissAllStatPopups* mutable_dismissallmsg();
  void set_allocated_dismissallmsg(::CDOTAMsg_DismissAllStatPopups* dismissallmsg);
  private:
  const ::CDOTAMsg_DismissAllStatPopups& _internal_dismissallmsg() const;
  ::CDOTAMsg_DismissAllStatPopups* _internal_mutable_dismissallmsg();
  public:
  void unsafe_arena_set_allocated_dismissallmsg(
      ::CDOTAMsg_DismissAllStatPopups* dismissallmsg);
  ::CDOTAMsg_DismissAllStatPopups* unsafe_arena_release_dismissallmsg();

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_DismissAllStatPopups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::CDOTAMsg_DismissAllStatPopups* dismissallmsg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_BeginLastHitChallenge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_BeginLastHitChallenge) */ {
 public:
  inline CDOTAClientMsg_BeginLastHitChallenge() : CDOTAClientMsg_BeginLastHitChallenge(nullptr) {}
  ~CDOTAClientMsg_BeginLastHitChallenge() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_BeginLastHitChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_BeginLastHitChallenge(const CDOTAClientMsg_BeginLastHitChallenge& from);
  CDOTAClientMsg_BeginLastHitChallenge(CDOTAClientMsg_BeginLastHitChallenge&& from) noexcept
    : CDOTAClientMsg_BeginLastHitChallenge() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_BeginLastHitChallenge& operator=(const CDOTAClientMsg_BeginLastHitChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_BeginLastHitChallenge& operator=(CDOTAClientMsg_BeginLastHitChallenge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_BeginLastHitChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_BeginLastHitChallenge* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_BeginLastHitChallenge*>(
               &_CDOTAClientMsg_BeginLastHitChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CDOTAClientMsg_BeginLastHitChallenge& a, CDOTAClientMsg_BeginLastHitChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_BeginLastHitChallenge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_BeginLastHitChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_BeginLastHitChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_BeginLastHitChallenge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_BeginLastHitChallenge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_BeginLastHitChallenge& from) {
    CDOTAClientMsg_BeginLastHitChallenge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_BeginLastHitChallenge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_BeginLastHitChallenge";
  }
  protected:
  explicit CDOTAClientMsg_BeginLastHitChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChosenLaneFieldNumber = 1,
    kHelperEnabledFieldNumber = 2,
  };
  // optional uint32 chosen_lane = 1;
  bool has_chosen_lane() const;
  private:
  bool _internal_has_chosen_lane() const;
  public:
  void clear_chosen_lane();
  uint32_t chosen_lane() const;
  void set_chosen_lane(uint32_t value);
  private:
  uint32_t _internal_chosen_lane() const;
  void _internal_set_chosen_lane(uint32_t value);
  public:

  // optional bool helper_enabled = 2;
  bool has_helper_enabled() const;
  private:
  bool _internal_has_helper_enabled() const;
  public:
  void clear_helper_enabled();
  bool helper_enabled() const;
  void set_helper_enabled(bool value);
  private:
  bool _internal_helper_enabled() const;
  void _internal_set_helper_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_BeginLastHitChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t chosen_lane_;
    bool helper_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_UpdateQuickBuyItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_UpdateQuickBuyItem) */ {
 public:
  inline CDOTAClientMsg_UpdateQuickBuyItem() : CDOTAClientMsg_UpdateQuickBuyItem(nullptr) {}
  ~CDOTAClientMsg_UpdateQuickBuyItem() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_UpdateQuickBuyItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_UpdateQuickBuyItem(const CDOTAClientMsg_UpdateQuickBuyItem& from);
  CDOTAClientMsg_UpdateQuickBuyItem(CDOTAClientMsg_UpdateQuickBuyItem&& from) noexcept
    : CDOTAClientMsg_UpdateQuickBuyItem() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_UpdateQuickBuyItem& operator=(const CDOTAClientMsg_UpdateQuickBuyItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_UpdateQuickBuyItem& operator=(CDOTAClientMsg_UpdateQuickBuyItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_UpdateQuickBuyItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_UpdateQuickBuyItem* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_UpdateQuickBuyItem*>(
               &_CDOTAClientMsg_UpdateQuickBuyItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CDOTAClientMsg_UpdateQuickBuyItem& a, CDOTAClientMsg_UpdateQuickBuyItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_UpdateQuickBuyItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_UpdateQuickBuyItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_UpdateQuickBuyItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_UpdateQuickBuyItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_UpdateQuickBuyItem& from) {
    CDOTAClientMsg_UpdateQuickBuyItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_UpdateQuickBuyItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_UpdateQuickBuyItem";
  }
  protected:
  explicit CDOTAClientMsg_UpdateQuickBuyItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurchasableFieldNumber = 2,
    kItemAbilityIdFieldNumber = 1,
  };
  // optional bool purchasable = 2 [default = false];
  bool has_purchasable() const;
  private:
  bool _internal_has_purchasable() const;
  public:
  void clear_purchasable();
  bool purchasable() const;
  void set_purchasable(bool value);
  private:
  bool _internal_purchasable() const;
  void _internal_set_purchasable(bool value);
  public:

  // optional int32 item_ability_id = 1 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_UpdateQuickBuyItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool purchasable_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_UpdateQuickBuy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_UpdateQuickBuy) */ {
 public:
  inline CDOTAClientMsg_UpdateQuickBuy() : CDOTAClientMsg_UpdateQuickBuy(nullptr) {}
  ~CDOTAClientMsg_UpdateQuickBuy() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_UpdateQuickBuy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_UpdateQuickBuy(const CDOTAClientMsg_UpdateQuickBuy& from);
  CDOTAClientMsg_UpdateQuickBuy(CDOTAClientMsg_UpdateQuickBuy&& from) noexcept
    : CDOTAClientMsg_UpdateQuickBuy() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_UpdateQuickBuy& operator=(const CDOTAClientMsg_UpdateQuickBuy& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_UpdateQuickBuy& operator=(CDOTAClientMsg_UpdateQuickBuy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_UpdateQuickBuy& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_UpdateQuickBuy* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_UpdateQuickBuy*>(
               &_CDOTAClientMsg_UpdateQuickBuy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CDOTAClientMsg_UpdateQuickBuy& a, CDOTAClientMsg_UpdateQuickBuy& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_UpdateQuickBuy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_UpdateQuickBuy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_UpdateQuickBuy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_UpdateQuickBuy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_UpdateQuickBuy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_UpdateQuickBuy& from) {
    CDOTAClientMsg_UpdateQuickBuy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_UpdateQuickBuy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_UpdateQuickBuy";
  }
  protected:
  explicit CDOTAClientMsg_UpdateQuickBuy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::CDOTAClientMsg_UpdateQuickBuyItem* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >*
      mutable_items();
  private:
  const ::CDOTAClientMsg_UpdateQuickBuyItem& _internal_items(int index) const;
  ::CDOTAClientMsg_UpdateQuickBuyItem* _internal_add_items();
  public:
  const ::CDOTAClientMsg_UpdateQuickBuyItem& items(int index) const;
  ::CDOTAClientMsg_UpdateQuickBuyItem* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >&
      items() const;

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_UpdateQuickBuy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RecordVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RecordVote) */ {
 public:
  inline CDOTAClientMsg_RecordVote() : CDOTAClientMsg_RecordVote(nullptr) {}
  ~CDOTAClientMsg_RecordVote() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RecordVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RecordVote(const CDOTAClientMsg_RecordVote& from);
  CDOTAClientMsg_RecordVote(CDOTAClientMsg_RecordVote&& from) noexcept
    : CDOTAClientMsg_RecordVote() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RecordVote& operator=(const CDOTAClientMsg_RecordVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RecordVote& operator=(CDOTAClientMsg_RecordVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RecordVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RecordVote* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RecordVote*>(
               &_CDOTAClientMsg_RecordVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CDOTAClientMsg_RecordVote& a, CDOTAClientMsg_RecordVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RecordVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RecordVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RecordVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RecordVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RecordVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_RecordVote& from) {
    CDOTAClientMsg_RecordVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RecordVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RecordVote";
  }
  protected:
  explicit CDOTAClientMsg_RecordVote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChoiceIndexFieldNumber = 1,
  };
  // optional int32 choice_index = 1;
  bool has_choice_index() const;
  private:
  bool _internal_has_choice_index() const;
  public:
  void clear_choice_index();
  int32_t choice_index() const;
  void set_choice_index(int32_t value);
  private:
  int32_t _internal_choice_index() const;
  void _internal_set_choice_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RecordVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t choice_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_WillPurchaseAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_WillPurchaseAlert) */ {
 public:
  inline CDOTAClientMsg_WillPurchaseAlert() : CDOTAClientMsg_WillPurchaseAlert(nullptr) {}
  ~CDOTAClientMsg_WillPurchaseAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_WillPurchaseAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_WillPurchaseAlert(const CDOTAClientMsg_WillPurchaseAlert& from);
  CDOTAClientMsg_WillPurchaseAlert(CDOTAClientMsg_WillPurchaseAlert&& from) noexcept
    : CDOTAClientMsg_WillPurchaseAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_WillPurchaseAlert& operator=(const CDOTAClientMsg_WillPurchaseAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_WillPurchaseAlert& operator=(CDOTAClientMsg_WillPurchaseAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_WillPurchaseAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_WillPurchaseAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_WillPurchaseAlert*>(
               &_CDOTAClientMsg_WillPurchaseAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CDOTAClientMsg_WillPurchaseAlert& a, CDOTAClientMsg_WillPurchaseAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_WillPurchaseAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_WillPurchaseAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_WillPurchaseAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_WillPurchaseAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_WillPurchaseAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_WillPurchaseAlert& from) {
    CDOTAClientMsg_WillPurchaseAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_WillPurchaseAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_WillPurchaseAlert";
  }
  protected:
  explicit CDOTAClientMsg_WillPurchaseAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldRemainingFieldNumber = 2,
    kItemAbilityIdFieldNumber = 1,
    kSuggestionPlayerIdFieldNumber = 3,
  };
  // optional uint32 gold_remaining = 2;
  bool has_gold_remaining() const;
  private:
  bool _internal_has_gold_remaining() const;
  public:
  void clear_gold_remaining();
  uint32_t gold_remaining() const;
  void set_gold_remaining(uint32_t value);
  private:
  uint32_t _internal_gold_remaining() const;
  void _internal_set_gold_remaining(uint32_t value);
  public:

  // optional int32 item_ability_id = 1 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // optional int32 suggestion_player_id = 3 [default = -1];
  bool has_suggestion_player_id() const;
  private:
  bool _internal_has_suggestion_player_id() const;
  public:
  void clear_suggestion_player_id();
  int32_t suggestion_player_id() const;
  void set_suggestion_player_id(int32_t value);
  private:
  int32_t _internal_suggestion_player_id() const;
  void _internal_set_suggestion_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_WillPurchaseAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t gold_remaining_;
    int32_t item_ability_id_;
    int32_t suggestion_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_BuyBackStateAlert final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_BuyBackStateAlert) */ {
 public:
  inline CDOTAClientMsg_BuyBackStateAlert() : CDOTAClientMsg_BuyBackStateAlert(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_BuyBackStateAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_BuyBackStateAlert(const CDOTAClientMsg_BuyBackStateAlert& from);
  CDOTAClientMsg_BuyBackStateAlert(CDOTAClientMsg_BuyBackStateAlert&& from) noexcept
    : CDOTAClientMsg_BuyBackStateAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_BuyBackStateAlert& operator=(const CDOTAClientMsg_BuyBackStateAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_BuyBackStateAlert& operator=(CDOTAClientMsg_BuyBackStateAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_BuyBackStateAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_BuyBackStateAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_BuyBackStateAlert*>(
               &_CDOTAClientMsg_BuyBackStateAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CDOTAClientMsg_BuyBackStateAlert& a, CDOTAClientMsg_BuyBackStateAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_BuyBackStateAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_BuyBackStateAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_BuyBackStateAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_BuyBackStateAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_BuyBackStateAlert& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_BuyBackStateAlert";
  }
  protected:
  explicit CDOTAClientMsg_BuyBackStateAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_BuyBackStateAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_QuickBuyAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_QuickBuyAlert) */ {
 public:
  inline CDOTAClientMsg_QuickBuyAlert() : CDOTAClientMsg_QuickBuyAlert(nullptr) {}
  ~CDOTAClientMsg_QuickBuyAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_QuickBuyAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_QuickBuyAlert(const CDOTAClientMsg_QuickBuyAlert& from);
  CDOTAClientMsg_QuickBuyAlert(CDOTAClientMsg_QuickBuyAlert&& from) noexcept
    : CDOTAClientMsg_QuickBuyAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_QuickBuyAlert& operator=(const CDOTAClientMsg_QuickBuyAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_QuickBuyAlert& operator=(CDOTAClientMsg_QuickBuyAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_QuickBuyAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_QuickBuyAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_QuickBuyAlert*>(
               &_CDOTAClientMsg_QuickBuyAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CDOTAClientMsg_QuickBuyAlert& a, CDOTAClientMsg_QuickBuyAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_QuickBuyAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_QuickBuyAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_QuickBuyAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_QuickBuyAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_QuickBuyAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_QuickBuyAlert& from) {
    CDOTAClientMsg_QuickBuyAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_QuickBuyAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_QuickBuyAlert";
  }
  protected:
  explicit CDOTAClientMsg_QuickBuyAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoldCostFieldNumber = 2,
    kItemCooldownSecondsFieldNumber = 3,
    kShowBuybackFieldNumber = 4,
    kItemAbilityIdFieldNumber = 1,
  };
  // optional int32 gold_cost = 2;
  bool has_gold_cost() const;
  private:
  bool _internal_has_gold_cost() const;
  public:
  void clear_gold_cost();
  int32_t gold_cost() const;
  void set_gold_cost(int32_t value);
  private:
  int32_t _internal_gold_cost() const;
  void _internal_set_gold_cost(int32_t value);
  public:

  // optional int32 item_cooldown_seconds = 3;
  bool has_item_cooldown_seconds() const;
  private:
  bool _internal_has_item_cooldown_seconds() const;
  public:
  void clear_item_cooldown_seconds();
  int32_t item_cooldown_seconds() const;
  void set_item_cooldown_seconds(int32_t value);
  private:
  int32_t _internal_item_cooldown_seconds() const;
  void _internal_set_item_cooldown_seconds(int32_t value);
  public:

  // optional bool show_buyback = 4;
  bool has_show_buyback() const;
  private:
  bool _internal_has_show_buyback() const;
  public:
  void clear_show_buyback();
  bool show_buyback() const;
  void set_show_buyback(bool value);
  private:
  bool _internal_show_buyback() const;
  void _internal_set_show_buyback(bool value);
  public:

  // optional int32 item_ability_id = 1 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_QuickBuyAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t gold_cost_;
    int32_t item_cooldown_seconds_;
    bool show_buyback_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerShowCase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerShowCase) */ {
 public:
  inline CDOTAClientMsg_PlayerShowCase() : CDOTAClientMsg_PlayerShowCase(nullptr) {}
  ~CDOTAClientMsg_PlayerShowCase() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerShowCase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerShowCase(const CDOTAClientMsg_PlayerShowCase& from);
  CDOTAClientMsg_PlayerShowCase(CDOTAClientMsg_PlayerShowCase&& from) noexcept
    : CDOTAClientMsg_PlayerShowCase() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerShowCase& operator=(const CDOTAClientMsg_PlayerShowCase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerShowCase& operator=(CDOTAClientMsg_PlayerShowCase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerShowCase& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerShowCase* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerShowCase*>(
               &_CDOTAClientMsg_PlayerShowCase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CDOTAClientMsg_PlayerShowCase& a, CDOTAClientMsg_PlayerShowCase& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerShowCase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerShowCase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerShowCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerShowCase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerShowCase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerShowCase& from) {
    CDOTAClientMsg_PlayerShowCase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerShowCase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerShowCase";
  }
  protected:
  explicit CDOTAClientMsg_PlayerShowCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowcaseFieldNumber = 1,
  };
  // optional bool showcase = 1;
  bool has_showcase() const;
  private:
  bool _internal_has_showcase() const;
  public:
  void clear_showcase();
  bool showcase() const;
  void set_showcase(bool value);
  private:
  bool _internal_showcase() const;
  void _internal_set_showcase(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerShowCase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool showcase_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_CameraZoomAmount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_CameraZoomAmount) */ {
 public:
  inline CDOTAClientMsg_CameraZoomAmount() : CDOTAClientMsg_CameraZoomAmount(nullptr) {}
  ~CDOTAClientMsg_CameraZoomAmount() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_CameraZoomAmount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_CameraZoomAmount(const CDOTAClientMsg_CameraZoomAmount& from);
  CDOTAClientMsg_CameraZoomAmount(CDOTAClientMsg_CameraZoomAmount&& from) noexcept
    : CDOTAClientMsg_CameraZoomAmount() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_CameraZoomAmount& operator=(const CDOTAClientMsg_CameraZoomAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_CameraZoomAmount& operator=(CDOTAClientMsg_CameraZoomAmount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_CameraZoomAmount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_CameraZoomAmount* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_CameraZoomAmount*>(
               &_CDOTAClientMsg_CameraZoomAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CDOTAClientMsg_CameraZoomAmount& a, CDOTAClientMsg_CameraZoomAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_CameraZoomAmount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_CameraZoomAmount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_CameraZoomAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_CameraZoomAmount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_CameraZoomAmount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_CameraZoomAmount& from) {
    CDOTAClientMsg_CameraZoomAmount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_CameraZoomAmount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_CameraZoomAmount";
  }
  protected:
  explicit CDOTAClientMsg_CameraZoomAmount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZoomAmountFieldNumber = 1,
  };
  // optional float zoom_amount = 1;
  bool has_zoom_amount() const;
  private:
  bool _internal_has_zoom_amount() const;
  public:
  void clear_zoom_amount();
  float zoom_amount() const;
  void set_zoom_amount(float value);
  private:
  float _internal_zoom_amount() const;
  void _internal_set_zoom_amount(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_CameraZoomAmount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float zoom_amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_BroadcasterUsingCameraman final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_BroadcasterUsingCameraman) */ {
 public:
  inline CDOTAClientMsg_BroadcasterUsingCameraman() : CDOTAClientMsg_BroadcasterUsingCameraman(nullptr) {}
  ~CDOTAClientMsg_BroadcasterUsingCameraman() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_BroadcasterUsingCameraman(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_BroadcasterUsingCameraman(const CDOTAClientMsg_BroadcasterUsingCameraman& from);
  CDOTAClientMsg_BroadcasterUsingCameraman(CDOTAClientMsg_BroadcasterUsingCameraman&& from) noexcept
    : CDOTAClientMsg_BroadcasterUsingCameraman() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_BroadcasterUsingCameraman& operator=(const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_BroadcasterUsingCameraman& operator=(CDOTAClientMsg_BroadcasterUsingCameraman&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_BroadcasterUsingCameraman& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_BroadcasterUsingCameraman* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_BroadcasterUsingCameraman*>(
               &_CDOTAClientMsg_BroadcasterUsingCameraman_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CDOTAClientMsg_BroadcasterUsingCameraman& a, CDOTAClientMsg_BroadcasterUsingCameraman& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_BroadcasterUsingCameraman* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_BroadcasterUsingCameraman>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_BroadcasterUsingCameraman& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_BroadcasterUsingCameraman& from) {
    CDOTAClientMsg_BroadcasterUsingCameraman::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_BroadcasterUsingCameraman* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_BroadcasterUsingCameraman";
  }
  protected:
  explicit CDOTAClientMsg_BroadcasterUsingCameraman(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameramanFieldNumber = 1,
  };
  // optional bool cameraman = 1;
  bool has_cameraman() const;
  private:
  bool _internal_has_cameraman() const;
  public:
  void clear_cameraman();
  bool cameraman() const;
  void set_cameraman(bool value);
  private:
  bool _internal_cameraman() const;
  void _internal_set_cameraman(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_BroadcasterUsingCameraman)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool cameraman_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator) */ {
 public:
  inline CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() : CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(nullptr) {}
  ~CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from);
  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator&& from) noexcept
    : CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& operator=(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& operator=(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator*>(
               &_CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& a, CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator& from) {
    CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator";
  }
  protected:
  explicit CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
  };
  // optional bool enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_FillEmptySlotsWithBots final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_FillEmptySlotsWithBots) */ {
 public:
  inline CDOTAClientMsg_FillEmptySlotsWithBots() : CDOTAClientMsg_FillEmptySlotsWithBots(nullptr) {}
  ~CDOTAClientMsg_FillEmptySlotsWithBots() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_FillEmptySlotsWithBots(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_FillEmptySlotsWithBots(const CDOTAClientMsg_FillEmptySlotsWithBots& from);
  CDOTAClientMsg_FillEmptySlotsWithBots(CDOTAClientMsg_FillEmptySlotsWithBots&& from) noexcept
    : CDOTAClientMsg_FillEmptySlotsWithBots() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_FillEmptySlotsWithBots& operator=(const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_FillEmptySlotsWithBots& operator=(CDOTAClientMsg_FillEmptySlotsWithBots&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_FillEmptySlotsWithBots& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_FillEmptySlotsWithBots* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_FillEmptySlotsWithBots*>(
               &_CDOTAClientMsg_FillEmptySlotsWithBots_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CDOTAClientMsg_FillEmptySlotsWithBots& a, CDOTAClientMsg_FillEmptySlotsWithBots& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_FillEmptySlotsWithBots* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_FillEmptySlotsWithBots>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_FillEmptySlotsWithBots& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_FillEmptySlotsWithBots& from) {
    CDOTAClientMsg_FillEmptySlotsWithBots::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_FillEmptySlotsWithBots* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_FillEmptySlotsWithBots";
  }
  protected:
  explicit CDOTAClientMsg_FillEmptySlotsWithBots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFillwithbotsFieldNumber = 1,
  };
  // optional bool fillwithbots = 1;
  bool has_fillwithbots() const;
  private:
  bool _internal_has_fillwithbots() const;
  public:
  void clear_fillwithbots();
  bool fillwithbots() const;
  void set_fillwithbots(bool value);
  private:
  bool _internal_fillwithbots() const;
  void _internal_set_fillwithbots(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_FillEmptySlotsWithBots)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool fillwithbots_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_HeroStatueLike final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_HeroStatueLike) */ {
 public:
  inline CDOTAClientMsg_HeroStatueLike() : CDOTAClientMsg_HeroStatueLike(nullptr) {}
  ~CDOTAClientMsg_HeroStatueLike() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_HeroStatueLike(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_HeroStatueLike(const CDOTAClientMsg_HeroStatueLike& from);
  CDOTAClientMsg_HeroStatueLike(CDOTAClientMsg_HeroStatueLike&& from) noexcept
    : CDOTAClientMsg_HeroStatueLike() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_HeroStatueLike& operator=(const CDOTAClientMsg_HeroStatueLike& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_HeroStatueLike& operator=(CDOTAClientMsg_HeroStatueLike&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_HeroStatueLike& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_HeroStatueLike* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_HeroStatueLike*>(
               &_CDOTAClientMsg_HeroStatueLike_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CDOTAClientMsg_HeroStatueLike& a, CDOTAClientMsg_HeroStatueLike& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_HeroStatueLike* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_HeroStatueLike* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_HeroStatueLike* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_HeroStatueLike>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_HeroStatueLike& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_HeroStatueLike& from) {
    CDOTAClientMsg_HeroStatueLike::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_HeroStatueLike* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_HeroStatueLike";
  }
  protected:
  explicit CDOTAClientMsg_HeroStatueLike(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerPlayerIdFieldNumber = 1,
  };
  // optional int32 owner_player_id = 1 [default = -1];
  bool has_owner_player_id() const;
  private:
  bool _internal_has_owner_player_id() const;
  public:
  void clear_owner_player_id();
  int32_t owner_player_id() const;
  void set_owner_player_id(int32_t value);
  private:
  int32_t _internal_owner_player_id() const;
  void _internal_set_owner_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_HeroStatueLike)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t owner_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EventCNY2015Cmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EventCNY2015Cmd) */ {
 public:
  inline CDOTAClientMsg_EventCNY2015Cmd() : CDOTAClientMsg_EventCNY2015Cmd(nullptr) {}
  ~CDOTAClientMsg_EventCNY2015Cmd() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EventCNY2015Cmd(const CDOTAClientMsg_EventCNY2015Cmd& from);
  CDOTAClientMsg_EventCNY2015Cmd(CDOTAClientMsg_EventCNY2015Cmd&& from) noexcept
    : CDOTAClientMsg_EventCNY2015Cmd() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EventCNY2015Cmd& operator=(const CDOTAClientMsg_EventCNY2015Cmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EventCNY2015Cmd& operator=(CDOTAClientMsg_EventCNY2015Cmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EventCNY2015Cmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EventCNY2015Cmd* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EventCNY2015Cmd*>(
               &_CDOTAClientMsg_EventCNY2015Cmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CDOTAClientMsg_EventCNY2015Cmd& a, CDOTAClientMsg_EventCNY2015Cmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EventCNY2015Cmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EventCNY2015Cmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EventCNY2015Cmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EventCNY2015Cmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EventCNY2015Cmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_EventCNY2015Cmd& from) {
    CDOTAClientMsg_EventCNY2015Cmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EventCNY2015Cmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EventCNY2015Cmd";
  }
  protected:
  explicit CDOTAClientMsg_EventCNY2015Cmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EventCNY2015Cmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_DemoHero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_DemoHero) */ {
 public:
  inline CDOTAClientMsg_DemoHero() : CDOTAClientMsg_DemoHero(nullptr) {}
  ~CDOTAClientMsg_DemoHero() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_DemoHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_DemoHero(const CDOTAClientMsg_DemoHero& from);
  CDOTAClientMsg_DemoHero(CDOTAClientMsg_DemoHero&& from) noexcept
    : CDOTAClientMsg_DemoHero() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_DemoHero& operator=(const CDOTAClientMsg_DemoHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_DemoHero& operator=(CDOTAClientMsg_DemoHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_DemoHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_DemoHero* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_DemoHero*>(
               &_CDOTAClientMsg_DemoHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CDOTAClientMsg_DemoHero& a, CDOTAClientMsg_DemoHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_DemoHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_DemoHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_DemoHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_DemoHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_DemoHero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_DemoHero& from) {
    CDOTAClientMsg_DemoHero::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_DemoHero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_DemoHero";
  }
  protected:
  explicit CDOTAClientMsg_DemoHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemDefsFieldNumber = 3,
    kItemIdsFieldNumber = 4,
    kHeroIdFieldNumber = 1,
    kHeroIdToSpawnFieldNumber = 2,
    kKeepExistingDemoheroFieldNumber = 6,
    kStyleIndexFieldNumber = 5,
  };
  // repeated uint32 item_defs = 3;
  int item_defs_size() const;
  private:
  int _internal_item_defs_size() const;
  public:
  void clear_item_defs();
  private:
  uint32_t _internal_item_defs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_item_defs() const;
  void _internal_add_item_defs(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_item_defs();
  public:
  uint32_t item_defs(int index) const;
  void set_item_defs(int index, uint32_t value);
  void add_item_defs(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      item_defs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_item_defs();

  // repeated uint64 item_ids = 4;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  private:
  uint64_t _internal_item_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_item_ids() const;
  void _internal_add_item_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_item_ids();
  public:
  uint64_t item_ids(int index) const;
  void set_item_ids(int index, uint64_t value);
  void add_item_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      item_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_item_ids();

  // optional int32 hero_id = 1;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  int32_t hero_id() const;
  void set_hero_id(int32_t value);
  private:
  int32_t _internal_hero_id() const;
  void _internal_set_hero_id(int32_t value);
  public:

  // optional int32 hero_id_to_spawn = 2;
  bool has_hero_id_to_spawn() const;
  private:
  bool _internal_has_hero_id_to_spawn() const;
  public:
  void clear_hero_id_to_spawn();
  int32_t hero_id_to_spawn() const;
  void set_hero_id_to_spawn(int32_t value);
  private:
  int32_t _internal_hero_id_to_spawn() const;
  void _internal_set_hero_id_to_spawn(int32_t value);
  public:

  // optional bool keep_existing_demohero = 6;
  bool has_keep_existing_demohero() const;
  private:
  bool _internal_has_keep_existing_demohero() const;
  public:
  void clear_keep_existing_demohero();
  bool keep_existing_demohero() const;
  void set_keep_existing_demohero(bool value);
  private:
  bool _internal_keep_existing_demohero() const;
  void _internal_set_keep_existing_demohero(bool value);
  public:

  // optional uint32 style_index = 5 [default = 255];
  bool has_style_index() const;
  private:
  bool _internal_has_style_index() const;
  public:
  void clear_style_index();
  uint32_t style_index() const;
  void set_style_index(uint32_t value);
  private:
  uint32_t _internal_style_index() const;
  void _internal_set_style_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_DemoHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > item_defs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > item_ids_;
    int32_t hero_id_;
    int32_t hero_id_to_spawn_;
    bool keep_existing_demohero_;
    uint32_t style_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChallengeSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChallengeSelect) */ {
 public:
  inline CDOTAClientMsg_ChallengeSelect() : CDOTAClientMsg_ChallengeSelect(nullptr) {}
  ~CDOTAClientMsg_ChallengeSelect() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChallengeSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChallengeSelect(const CDOTAClientMsg_ChallengeSelect& from);
  CDOTAClientMsg_ChallengeSelect(CDOTAClientMsg_ChallengeSelect&& from) noexcept
    : CDOTAClientMsg_ChallengeSelect() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChallengeSelect& operator=(const CDOTAClientMsg_ChallengeSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChallengeSelect& operator=(CDOTAClientMsg_ChallengeSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChallengeSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChallengeSelect* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChallengeSelect*>(
               &_CDOTAClientMsg_ChallengeSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CDOTAClientMsg_ChallengeSelect& a, CDOTAClientMsg_ChallengeSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChallengeSelect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChallengeSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChallengeSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChallengeSelect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChallengeSelect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChallengeSelect& from) {
    CDOTAClientMsg_ChallengeSelect::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChallengeSelect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChallengeSelect";
  }
  protected:
  explicit CDOTAClientMsg_ChallengeSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSlotIdFieldNumber = 2,
    kSequenceIdFieldNumber = 3,
  };
  // optional uint32 event_id = 1;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 slot_id = 2;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 sequence_id = 3;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChallengeSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t event_id_;
    uint32_t slot_id_;
    uint32_t sequence_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChallengeReroll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChallengeReroll) */ {
 public:
  inline CDOTAClientMsg_ChallengeReroll() : CDOTAClientMsg_ChallengeReroll(nullptr) {}
  ~CDOTAClientMsg_ChallengeReroll() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChallengeReroll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChallengeReroll(const CDOTAClientMsg_ChallengeReroll& from);
  CDOTAClientMsg_ChallengeReroll(CDOTAClientMsg_ChallengeReroll&& from) noexcept
    : CDOTAClientMsg_ChallengeReroll() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChallengeReroll& operator=(const CDOTAClientMsg_ChallengeReroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChallengeReroll& operator=(CDOTAClientMsg_ChallengeReroll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChallengeReroll& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChallengeReroll* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChallengeReroll*>(
               &_CDOTAClientMsg_ChallengeReroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CDOTAClientMsg_ChallengeReroll& a, CDOTAClientMsg_ChallengeReroll& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChallengeReroll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChallengeReroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChallengeReroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChallengeReroll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChallengeReroll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChallengeReroll& from) {
    CDOTAClientMsg_ChallengeReroll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChallengeReroll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChallengeReroll";
  }
  protected:
  explicit CDOTAClientMsg_ChallengeReroll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 1,
    kSlotIdFieldNumber = 2,
    kSequenceIdFieldNumber = 3,
    kHeroIdFieldNumber = 4,
  };
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::EEvent event_id() const;
  void set_event_id(::EEvent value);
  private:
  ::EEvent _internal_event_id() const;
  void _internal_set_event_id(::EEvent value);
  public:

  // optional uint32 slot_id = 2;
  bool has_slot_id() const;
  private:
  bool _internal_has_slot_id() const;
  public:
  void clear_slot_id();
  uint32_t slot_id() const;
  void set_slot_id(uint32_t value);
  private:
  uint32_t _internal_slot_id() const;
  void _internal_set_slot_id(uint32_t value);
  public:

  // optional uint32 sequence_id = 3;
  bool has_sequence_id() const;
  private:
  bool _internal_has_sequence_id() const;
  public:
  void clear_sequence_id();
  uint32_t sequence_id() const;
  void set_sequence_id(uint32_t value);
  private:
  uint32_t _internal_sequence_id() const;
  void _internal_set_sequence_id(uint32_t value);
  public:

  // optional uint32 hero_id = 4;
  bool has_hero_id() const;
  private:
  bool _internal_has_hero_id() const;
  public:
  void clear_hero_id();
  uint32_t hero_id() const;
  void set_hero_id(uint32_t value);
  private:
  uint32_t _internal_hero_id() const;
  void _internal_set_hero_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChallengeReroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int event_id_;
    uint32_t slot_id_;
    uint32_t sequence_id_;
    uint32_t hero_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_CoinWager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_CoinWager) */ {
 public:
  inline CDOTAClientMsg_CoinWager() : CDOTAClientMsg_CoinWager(nullptr) {}
  ~CDOTAClientMsg_CoinWager() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_CoinWager(const CDOTAClientMsg_CoinWager& from);
  CDOTAClientMsg_CoinWager(CDOTAClientMsg_CoinWager&& from) noexcept
    : CDOTAClientMsg_CoinWager() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_CoinWager& operator=(const CDOTAClientMsg_CoinWager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_CoinWager& operator=(CDOTAClientMsg_CoinWager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_CoinWager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_CoinWager* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_CoinWager*>(
               &_CDOTAClientMsg_CoinWager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CDOTAClientMsg_CoinWager& a, CDOTAClientMsg_CoinWager& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_CoinWager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_CoinWager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_CoinWager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_CoinWager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_CoinWager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_CoinWager& from) {
    CDOTAClientMsg_CoinWager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_CoinWager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_CoinWager";
  }
  protected:
  explicit CDOTAClientMsg_CoinWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWagerAmountFieldNumber = 1,
  };
  // optional uint32 wager_amount = 1;
  bool has_wager_amount() const;
  private:
  bool _internal_has_wager_amount() const;
  public:
  void clear_wager_amount();
  uint32_t wager_amount() const;
  void set_wager_amount(uint32_t value);
  private:
  uint32_t _internal_wager_amount() const;
  void _internal_set_wager_amount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_CoinWager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t wager_amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_CoinWagerToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_CoinWagerToken) */ {
 public:
  inline CDOTAClientMsg_CoinWagerToken() : CDOTAClientMsg_CoinWagerToken(nullptr) {}
  ~CDOTAClientMsg_CoinWagerToken() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_CoinWagerToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_CoinWagerToken(const CDOTAClientMsg_CoinWagerToken& from);
  CDOTAClientMsg_CoinWagerToken(CDOTAClientMsg_CoinWagerToken&& from) noexcept
    : CDOTAClientMsg_CoinWagerToken() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_CoinWagerToken& operator=(const CDOTAClientMsg_CoinWagerToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_CoinWagerToken& operator=(CDOTAClientMsg_CoinWagerToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_CoinWagerToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_CoinWagerToken* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_CoinWagerToken*>(
               &_CDOTAClientMsg_CoinWagerToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CDOTAClientMsg_CoinWagerToken& a, CDOTAClientMsg_CoinWagerToken& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_CoinWagerToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_CoinWagerToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_CoinWagerToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_CoinWagerToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_CoinWagerToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_CoinWagerToken& from) {
    CDOTAClientMsg_CoinWagerToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_CoinWagerToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_CoinWagerToken";
  }
  protected:
  explicit CDOTAClientMsg_CoinWagerToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWagerTokenItemIdFieldNumber = 1,
  };
  // optional uint64 wager_token_item_id = 1;
  bool has_wager_token_item_id() const;
  private:
  bool _internal_has_wager_token_item_id() const;
  public:
  void clear_wager_token_item_id();
  uint64_t wager_token_item_id() const;
  void set_wager_token_item_id(uint64_t value);
  private:
  uint64_t _internal_wager_token_item_id() const;
  void _internal_set_wager_token_item_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_CoinWagerToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t wager_token_item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RankWager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RankWager) */ {
 public:
  inline CDOTAClientMsg_RankWager() : CDOTAClientMsg_RankWager(nullptr) {}
  ~CDOTAClientMsg_RankWager() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RankWager(const CDOTAClientMsg_RankWager& from);
  CDOTAClientMsg_RankWager(CDOTAClientMsg_RankWager&& from) noexcept
    : CDOTAClientMsg_RankWager() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RankWager& operator=(const CDOTAClientMsg_RankWager& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RankWager& operator=(CDOTAClientMsg_RankWager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RankWager& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RankWager* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RankWager*>(
               &_CDOTAClientMsg_RankWager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CDOTAClientMsg_RankWager& a, CDOTAClientMsg_RankWager& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RankWager* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RankWager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RankWager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RankWager>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RankWager& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_RankWager& from) {
    CDOTAClientMsg_RankWager::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RankWager* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RankWager";
  }
  protected:
  explicit CDOTAClientMsg_RankWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnnounceWagerFieldNumber = 1,
  };
  // optional bool announce_wager = 1;
  bool has_announce_wager() const;
  private:
  bool _internal_has_announce_wager() const;
  public:
  void clear_announce_wager();
  bool announce_wager() const;
  void set_announce_wager(bool value);
  private:
  bool _internal_announce_wager() const;
  void _internal_set_announce_wager(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RankWager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool announce_wager_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerBounty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerBounty) */ {
 public:
  inline CDOTAClientMsg_PlayerBounty() : CDOTAClientMsg_PlayerBounty(nullptr) {}
  ~CDOTAClientMsg_PlayerBounty() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerBounty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerBounty(const CDOTAClientMsg_PlayerBounty& from);
  CDOTAClientMsg_PlayerBounty(CDOTAClientMsg_PlayerBounty&& from) noexcept
    : CDOTAClientMsg_PlayerBounty() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerBounty& operator=(const CDOTAClientMsg_PlayerBounty& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerBounty& operator=(CDOTAClientMsg_PlayerBounty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerBounty& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerBounty* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerBounty*>(
               &_CDOTAClientMsg_PlayerBounty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CDOTAClientMsg_PlayerBounty& a, CDOTAClientMsg_PlayerBounty& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerBounty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerBounty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerBounty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerBounty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerBounty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerBounty& from) {
    CDOTAClientMsg_PlayerBounty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerBounty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerBounty";
  }
  protected:
  explicit CDOTAClientMsg_PlayerBounty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerBounty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EventPointsTip final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EventPointsTip) */ {
 public:
  inline CDOTAClientMsg_EventPointsTip() : CDOTAClientMsg_EventPointsTip(nullptr) {}
  ~CDOTAClientMsg_EventPointsTip() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EventPointsTip(const CDOTAClientMsg_EventPointsTip& from);
  CDOTAClientMsg_EventPointsTip(CDOTAClientMsg_EventPointsTip&& from) noexcept
    : CDOTAClientMsg_EventPointsTip() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EventPointsTip& operator=(const CDOTAClientMsg_EventPointsTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EventPointsTip& operator=(CDOTAClientMsg_EventPointsTip&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EventPointsTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EventPointsTip* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EventPointsTip*>(
               &_CDOTAClientMsg_EventPointsTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CDOTAClientMsg_EventPointsTip& a, CDOTAClientMsg_EventPointsTip& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EventPointsTip* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EventPointsTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EventPointsTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EventPointsTip>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EventPointsTip& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_EventPointsTip& from) {
    CDOTAClientMsg_EventPointsTip::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EventPointsTip* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EventPointsTip";
  }
  protected:
  explicit CDOTAClientMsg_EventPointsTip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipientPlayerIdFieldNumber = 1,
  };
  // optional int32 recipient_player_id = 1 [default = -1];
  bool has_recipient_player_id() const;
  private:
  bool _internal_has_recipient_player_id() const;
  public:
  void clear_recipient_player_id();
  int32_t recipient_player_id() const;
  void set_recipient_player_id(int32_t value);
  private:
  int32_t _internal_recipient_player_id() const;
  void _internal_set_recipient_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EventPointsTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t recipient_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ExecuteOrders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ExecuteOrders) */ {
 public:
  inline CDOTAClientMsg_ExecuteOrders() : CDOTAClientMsg_ExecuteOrders(nullptr) {}
  ~CDOTAClientMsg_ExecuteOrders() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ExecuteOrders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ExecuteOrders(const CDOTAClientMsg_ExecuteOrders& from);
  CDOTAClientMsg_ExecuteOrders(CDOTAClientMsg_ExecuteOrders&& from) noexcept
    : CDOTAClientMsg_ExecuteOrders() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ExecuteOrders& operator=(const CDOTAClientMsg_ExecuteOrders& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ExecuteOrders& operator=(CDOTAClientMsg_ExecuteOrders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ExecuteOrders& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ExecuteOrders* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ExecuteOrders*>(
               &_CDOTAClientMsg_ExecuteOrders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CDOTAClientMsg_ExecuteOrders& a, CDOTAClientMsg_ExecuteOrders& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ExecuteOrders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ExecuteOrders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ExecuteOrders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ExecuteOrders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ExecuteOrders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ExecuteOrders& from) {
    CDOTAClientMsg_ExecuteOrders::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ExecuteOrders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ExecuteOrders";
  }
  protected:
  explicit CDOTAClientMsg_ExecuteOrders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .CDOTAMsg_UnitOrder orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::CDOTAMsg_UnitOrder* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMsg_UnitOrder >*
      mutable_orders();
  private:
  const ::CDOTAMsg_UnitOrder& _internal_orders(int index) const;
  ::CDOTAMsg_UnitOrder* _internal_add_orders();
  public:
  const ::CDOTAMsg_UnitOrder& orders(int index) const;
  ::CDOTAMsg_UnitOrder* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMsg_UnitOrder >&
      orders() const;

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ExecuteOrders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMsg_UnitOrder > orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_XPAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_XPAlert) */ {
 public:
  inline CDOTAClientMsg_XPAlert() : CDOTAClientMsg_XPAlert(nullptr) {}
  ~CDOTAClientMsg_XPAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_XPAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_XPAlert(const CDOTAClientMsg_XPAlert& from);
  CDOTAClientMsg_XPAlert(CDOTAClientMsg_XPAlert&& from) noexcept
    : CDOTAClientMsg_XPAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_XPAlert& operator=(const CDOTAClientMsg_XPAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_XPAlert& operator=(CDOTAClientMsg_XPAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_XPAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_XPAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_XPAlert*>(
               &_CDOTAClientMsg_XPAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CDOTAClientMsg_XPAlert& a, CDOTAClientMsg_XPAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_XPAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_XPAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_XPAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_XPAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_XPAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_XPAlert& from) {
    CDOTAClientMsg_XPAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_XPAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_XPAlert";
  }
  protected:
  explicit CDOTAClientMsg_XPAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDamageTakenFieldNumber = 2,
    kTargetEntindexFieldNumber = 1,
  };
  // optional uint32 damage_taken = 2;
  bool has_damage_taken() const;
  private:
  bool _internal_has_damage_taken() const;
  public:
  void clear_damage_taken();
  uint32_t damage_taken() const;
  void set_damage_taken(uint32_t value);
  private:
  uint32_t _internal_damage_taken() const;
  void _internal_set_damage_taken(uint32_t value);
  public:

  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_XPAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t damage_taken_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_TalentTreeAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_TalentTreeAlert) */ {
 public:
  inline CDOTAClientMsg_TalentTreeAlert() : CDOTAClientMsg_TalentTreeAlert(nullptr) {}
  ~CDOTAClientMsg_TalentTreeAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_TalentTreeAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_TalentTreeAlert(const CDOTAClientMsg_TalentTreeAlert& from);
  CDOTAClientMsg_TalentTreeAlert(CDOTAClientMsg_TalentTreeAlert&& from) noexcept
    : CDOTAClientMsg_TalentTreeAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_TalentTreeAlert& operator=(const CDOTAClientMsg_TalentTreeAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_TalentTreeAlert& operator=(CDOTAClientMsg_TalentTreeAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_TalentTreeAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_TalentTreeAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_TalentTreeAlert*>(
               &_CDOTAClientMsg_TalentTreeAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CDOTAClientMsg_TalentTreeAlert& a, CDOTAClientMsg_TalentTreeAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_TalentTreeAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_TalentTreeAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_TalentTreeAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_TalentTreeAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_TalentTreeAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_TalentTreeAlert& from) {
    CDOTAClientMsg_TalentTreeAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_TalentTreeAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_TalentTreeAlert";
  }
  protected:
  explicit CDOTAClientMsg_TalentTreeAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 3,
    kLearnedFieldNumber = 4,
    kTargetEntindexFieldNumber = 1,
    kAbilityIdFieldNumber = 2,
  };
  // optional int32 slot = 3;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  int32_t slot() const;
  void set_slot(int32_t value);
  private:
  int32_t _internal_slot() const;
  void _internal_set_slot(int32_t value);
  public:

  // optional bool learned = 4;
  bool has_learned() const;
  private:
  bool _internal_has_learned() const;
  public:
  void clear_learned();
  bool learned() const;
  void set_learned(bool value);
  private:
  bool _internal_learned() const;
  void _internal_set_learned(bool value);
  public:

  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // optional int32 ability_id = 2 [default = -1];
  bool has_ability_id() const;
  private:
  bool _internal_has_ability_id() const;
  public:
  void clear_ability_id();
  int32_t ability_id() const;
  void set_ability_id(int32_t value);
  private:
  int32_t _internal_ability_id() const;
  void _internal_set_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_TalentTreeAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t slot_;
    bool learned_;
    int32_t target_entindex_;
    int32_t ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_KillcamDamageTaken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_KillcamDamageTaken) */ {
 public:
  inline CDOTAClientMsg_KillcamDamageTaken() : CDOTAClientMsg_KillcamDamageTaken(nullptr) {}
  ~CDOTAClientMsg_KillcamDamageTaken() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_KillcamDamageTaken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_KillcamDamageTaken(const CDOTAClientMsg_KillcamDamageTaken& from);
  CDOTAClientMsg_KillcamDamageTaken(CDOTAClientMsg_KillcamDamageTaken&& from) noexcept
    : CDOTAClientMsg_KillcamDamageTaken() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_KillcamDamageTaken& operator=(const CDOTAClientMsg_KillcamDamageTaken& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_KillcamDamageTaken& operator=(CDOTAClientMsg_KillcamDamageTaken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_KillcamDamageTaken& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_KillcamDamageTaken* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_KillcamDamageTaken*>(
               &_CDOTAClientMsg_KillcamDamageTaken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CDOTAClientMsg_KillcamDamageTaken& a, CDOTAClientMsg_KillcamDamageTaken& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_KillcamDamageTaken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_KillcamDamageTaken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_KillcamDamageTaken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_KillcamDamageTaken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_KillcamDamageTaken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_KillcamDamageTaken& from) {
    CDOTAClientMsg_KillcamDamageTaken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_KillcamDamageTaken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_KillcamDamageTaken";
  }
  protected:
  explicit CDOTAClientMsg_KillcamDamageTaken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeroNameFieldNumber = 5,
    kDamageColorFieldNumber = 6,
    kDamageTakenFieldNumber = 2,
    kItemTypeFieldNumber = 3,
    kTargetEntindexFieldNumber = 1,
    kItemAbilityIdFieldNumber = 4,
  };
  // optional string hero_name = 5;
  bool has_hero_name() const;
  private:
  bool _internal_has_hero_name() const;
  public:
  void clear_hero_name();
  const std::string& hero_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hero_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hero_name();
  PROTOBUF_NODISCARD std::string* release_hero_name();
  void set_allocated_hero_name(std::string* hero_name);
  private:
  const std::string& _internal_hero_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hero_name(const std::string& value);
  std::string* _internal_mutable_hero_name();
  public:

  // optional string damage_color = 6;
  bool has_damage_color() const;
  private:
  bool _internal_has_damage_color() const;
  public:
  void clear_damage_color();
  const std::string& damage_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_damage_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_damage_color();
  PROTOBUF_NODISCARD std::string* release_damage_color();
  void set_allocated_damage_color(std::string* damage_color);
  private:
  const std::string& _internal_damage_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_damage_color(const std::string& value);
  std::string* _internal_mutable_damage_color();
  public:

  // optional uint32 damage_taken = 2;
  bool has_damage_taken() const;
  private:
  bool _internal_has_damage_taken() const;
  public:
  void clear_damage_taken();
  uint32_t damage_taken() const;
  void set_damage_taken(uint32_t value);
  private:
  uint32_t _internal_damage_taken() const;
  void _internal_set_damage_taken(uint32_t value);
  public:

  // optional uint32 item_type = 3;
  bool has_item_type() const;
  private:
  bool _internal_has_item_type() const;
  public:
  void clear_item_type();
  uint32_t item_type() const;
  void set_item_type(uint32_t value);
  private:
  uint32_t _internal_item_type() const;
  void _internal_set_item_type(uint32_t value);
  public:

  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // optional int32 item_ability_id = 4 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_KillcamDamageTaken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hero_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr damage_color_;
    uint32_t damage_taken_;
    uint32_t item_type_;
    int32_t target_entindex_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_KillMyHero final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_KillMyHero) */ {
 public:
  inline CDOTAClientMsg_KillMyHero() : CDOTAClientMsg_KillMyHero(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_KillMyHero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_KillMyHero(const CDOTAClientMsg_KillMyHero& from);
  CDOTAClientMsg_KillMyHero(CDOTAClientMsg_KillMyHero&& from) noexcept
    : CDOTAClientMsg_KillMyHero() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_KillMyHero& operator=(const CDOTAClientMsg_KillMyHero& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_KillMyHero& operator=(CDOTAClientMsg_KillMyHero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_KillMyHero& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_KillMyHero* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_KillMyHero*>(
               &_CDOTAClientMsg_KillMyHero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CDOTAClientMsg_KillMyHero& a, CDOTAClientMsg_KillMyHero& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_KillMyHero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_KillMyHero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_KillMyHero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_KillMyHero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDOTAClientMsg_KillMyHero& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_KillMyHero& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_KillMyHero";
  }
  protected:
  explicit CDOTAClientMsg_KillMyHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_KillMyHero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_QuestStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_QuestStatus) */ {
 public:
  inline CDOTAClientMsg_QuestStatus() : CDOTAClientMsg_QuestStatus(nullptr) {}
  ~CDOTAClientMsg_QuestStatus() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_QuestStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_QuestStatus(const CDOTAClientMsg_QuestStatus& from);
  CDOTAClientMsg_QuestStatus(CDOTAClientMsg_QuestStatus&& from) noexcept
    : CDOTAClientMsg_QuestStatus() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_QuestStatus& operator=(const CDOTAClientMsg_QuestStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_QuestStatus& operator=(CDOTAClientMsg_QuestStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_QuestStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_QuestStatus* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_QuestStatus*>(
               &_CDOTAClientMsg_QuestStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CDOTAClientMsg_QuestStatus& a, CDOTAClientMsg_QuestStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_QuestStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_QuestStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_QuestStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_QuestStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_QuestStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_QuestStatus& from) {
    CDOTAClientMsg_QuestStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_QuestStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_QuestStatus";
  }
  protected:
  explicit CDOTAClientMsg_QuestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestIdFieldNumber = 1,
    kChallengeIdFieldNumber = 2,
    kProgressFieldNumber = 3,
    kGoalFieldNumber = 4,
    kQueryFieldNumber = 5,
    kFailGametimeFieldNumber = 6,
    kItemAbilityIdFieldNumber = 7,
  };
  // optional uint32 quest_id = 1;
  bool has_quest_id() const;
  private:
  bool _internal_has_quest_id() const;
  public:
  void clear_quest_id();
  uint32_t quest_id() const;
  void set_quest_id(uint32_t value);
  private:
  uint32_t _internal_quest_id() const;
  void _internal_set_quest_id(uint32_t value);
  public:

  // optional uint32 challenge_id = 2;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  uint32_t challenge_id() const;
  void set_challenge_id(uint32_t value);
  private:
  uint32_t _internal_challenge_id() const;
  void _internal_set_challenge_id(uint32_t value);
  public:

  // optional uint32 progress = 3;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  uint32_t progress() const;
  void set_progress(uint32_t value);
  private:
  uint32_t _internal_progress() const;
  void _internal_set_progress(uint32_t value);
  public:

  // optional uint32 goal = 4;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  uint32_t goal() const;
  void set_goal(uint32_t value);
  private:
  uint32_t _internal_goal() const;
  void _internal_set_goal(uint32_t value);
  public:

  // optional uint32 query = 5;
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  uint32_t query() const;
  void set_query(uint32_t value);
  private:
  uint32_t _internal_query() const;
  void _internal_set_query(uint32_t value);
  public:

  // optional float fail_gametime = 6;
  bool has_fail_gametime() const;
  private:
  bool _internal_has_fail_gametime() const;
  public:
  void clear_fail_gametime();
  float fail_gametime() const;
  void set_fail_gametime(float value);
  private:
  float _internal_fail_gametime() const;
  void _internal_set_fail_gametime(float value);
  public:

  // optional int32 item_ability_id = 7 [default = -1];
  bool has_item_ability_id() const;
  private:
  bool _internal_has_item_ability_id() const;
  public:
  void clear_item_ability_id();
  int32_t item_ability_id() const;
  void set_item_ability_id(int32_t value);
  private:
  int32_t _internal_item_ability_id() const;
  void _internal_set_item_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_QuestStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t quest_id_;
    uint32_t challenge_id_;
    uint32_t progress_;
    uint32_t goal_;
    uint32_t query_;
    float fail_gametime_;
    int32_t item_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ToggleAutoattack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ToggleAutoattack) */ {
 public:
  inline CDOTAClientMsg_ToggleAutoattack() : CDOTAClientMsg_ToggleAutoattack(nullptr) {}
  ~CDOTAClientMsg_ToggleAutoattack() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ToggleAutoattack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ToggleAutoattack(const CDOTAClientMsg_ToggleAutoattack& from);
  CDOTAClientMsg_ToggleAutoattack(CDOTAClientMsg_ToggleAutoattack&& from) noexcept
    : CDOTAClientMsg_ToggleAutoattack() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ToggleAutoattack& operator=(const CDOTAClientMsg_ToggleAutoattack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ToggleAutoattack& operator=(CDOTAClientMsg_ToggleAutoattack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ToggleAutoattack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ToggleAutoattack* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ToggleAutoattack*>(
               &_CDOTAClientMsg_ToggleAutoattack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CDOTAClientMsg_ToggleAutoattack& a, CDOTAClientMsg_ToggleAutoattack& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ToggleAutoattack* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ToggleAutoattack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ToggleAutoattack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ToggleAutoattack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ToggleAutoattack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ToggleAutoattack& from) {
    CDOTAClientMsg_ToggleAutoattack::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ToggleAutoattack* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ToggleAutoattack";
  }
  protected:
  explicit CDOTAClientMsg_ToggleAutoattack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kShowMessageFieldNumber = 2,
  };
  // optional int32 mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // optional bool show_message = 2;
  bool has_show_message() const;
  private:
  bool _internal_has_show_message() const;
  public:
  void clear_show_message();
  bool show_message() const;
  void set_show_message(bool value);
  private:
  bool _internal_show_message() const;
  void _internal_set_show_message(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ToggleAutoattack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t mode_;
    bool show_message_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SpecialAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SpecialAbility) */ {
 public:
  inline CDOTAClientMsg_SpecialAbility() : CDOTAClientMsg_SpecialAbility(nullptr) {}
  ~CDOTAClientMsg_SpecialAbility() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SpecialAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SpecialAbility(const CDOTAClientMsg_SpecialAbility& from);
  CDOTAClientMsg_SpecialAbility(CDOTAClientMsg_SpecialAbility&& from) noexcept
    : CDOTAClientMsg_SpecialAbility() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SpecialAbility& operator=(const CDOTAClientMsg_SpecialAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SpecialAbility& operator=(CDOTAClientMsg_SpecialAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SpecialAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SpecialAbility* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SpecialAbility*>(
               &_CDOTAClientMsg_SpecialAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CDOTAClientMsg_SpecialAbility& a, CDOTAClientMsg_SpecialAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SpecialAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SpecialAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SpecialAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SpecialAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SpecialAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SpecialAbility& from) {
    CDOTAClientMsg_SpecialAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SpecialAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SpecialAbility";
  }
  protected:
  explicit CDOTAClientMsg_SpecialAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbilityIndexFieldNumber = 1,
    kTargetEntindexFieldNumber = 2,
  };
  // optional uint32 ability_index = 1;
  bool has_ability_index() const;
  private:
  bool _internal_has_ability_index() const;
  public:
  void clear_ability_index();
  uint32_t ability_index() const;
  void set_ability_index(uint32_t value);
  private:
  uint32_t _internal_ability_index() const;
  void _internal_set_ability_index(uint32_t value);
  public:

  // optional int32 target_entindex = 2 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SpecialAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ability_index_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SetEnemyStartingPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SetEnemyStartingPosition) */ {
 public:
  inline CDOTAClientMsg_SetEnemyStartingPosition() : CDOTAClientMsg_SetEnemyStartingPosition(nullptr) {}
  ~CDOTAClientMsg_SetEnemyStartingPosition() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SetEnemyStartingPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SetEnemyStartingPosition(const CDOTAClientMsg_SetEnemyStartingPosition& from);
  CDOTAClientMsg_SetEnemyStartingPosition(CDOTAClientMsg_SetEnemyStartingPosition&& from) noexcept
    : CDOTAClientMsg_SetEnemyStartingPosition() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SetEnemyStartingPosition& operator=(const CDOTAClientMsg_SetEnemyStartingPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SetEnemyStartingPosition& operator=(CDOTAClientMsg_SetEnemyStartingPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SetEnemyStartingPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SetEnemyStartingPosition* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SetEnemyStartingPosition*>(
               &_CDOTAClientMsg_SetEnemyStartingPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CDOTAClientMsg_SetEnemyStartingPosition& a, CDOTAClientMsg_SetEnemyStartingPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SetEnemyStartingPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SetEnemyStartingPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SetEnemyStartingPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SetEnemyStartingPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SetEnemyStartingPosition& from) {
    CDOTAClientMsg_SetEnemyStartingPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SetEnemyStartingPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SetEnemyStartingPosition";
  }
  protected:
  explicit CDOTAClientMsg_SetEnemyStartingPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnemyStartingPositionFieldNumber = 2,
    kEnemyPlayerIdFieldNumber = 1,
  };
  // optional uint32 enemy_starting_position = 2;
  bool has_enemy_starting_position() const;
  private:
  bool _internal_has_enemy_starting_position() const;
  public:
  void clear_enemy_starting_position();
  uint32_t enemy_starting_position() const;
  void set_enemy_starting_position(uint32_t value);
  private:
  uint32_t _internal_enemy_starting_position() const;
  void _internal_set_enemy_starting_position(uint32_t value);
  public:

  // optional int32 enemy_player_id = 1 [default = -1];
  bool has_enemy_player_id() const;
  private:
  bool _internal_has_enemy_player_id() const;
  public:
  void clear_enemy_player_id();
  int32_t enemy_player_id() const;
  void set_enemy_player_id(int32_t value);
  private:
  int32_t _internal_enemy_player_id() const;
  void _internal_set_enemy_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SetEnemyStartingPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t enemy_starting_position_;
    int32_t enemy_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SetDesiredWardPlacement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SetDesiredWardPlacement) */ {
 public:
  inline CDOTAClientMsg_SetDesiredWardPlacement() : CDOTAClientMsg_SetDesiredWardPlacement(nullptr) {}
  ~CDOTAClientMsg_SetDesiredWardPlacement() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SetDesiredWardPlacement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SetDesiredWardPlacement(const CDOTAClientMsg_SetDesiredWardPlacement& from);
  CDOTAClientMsg_SetDesiredWardPlacement(CDOTAClientMsg_SetDesiredWardPlacement&& from) noexcept
    : CDOTAClientMsg_SetDesiredWardPlacement() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SetDesiredWardPlacement& operator=(const CDOTAClientMsg_SetDesiredWardPlacement& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SetDesiredWardPlacement& operator=(CDOTAClientMsg_SetDesiredWardPlacement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SetDesiredWardPlacement& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SetDesiredWardPlacement* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SetDesiredWardPlacement*>(
               &_CDOTAClientMsg_SetDesiredWardPlacement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CDOTAClientMsg_SetDesiredWardPlacement& a, CDOTAClientMsg_SetDesiredWardPlacement& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SetDesiredWardPlacement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SetDesiredWardPlacement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SetDesiredWardPlacement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SetDesiredWardPlacement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SetDesiredWardPlacement& from) {
    CDOTAClientMsg_SetDesiredWardPlacement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SetDesiredWardPlacement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SetDesiredWardPlacement";
  }
  protected:
  explicit CDOTAClientMsg_SetDesiredWardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWardIndexFieldNumber = 1,
    kWardXFieldNumber = 2,
    kWardYFieldNumber = 3,
  };
  // optional uint32 ward_index = 1;
  bool has_ward_index() const;
  private:
  bool _internal_has_ward_index() const;
  public:
  void clear_ward_index();
  uint32_t ward_index() const;
  void set_ward_index(uint32_t value);
  private:
  uint32_t _internal_ward_index() const;
  void _internal_set_ward_index(uint32_t value);
  public:

  // optional float ward_x = 2;
  bool has_ward_x() const;
  private:
  bool _internal_has_ward_x() const;
  public:
  void clear_ward_x();
  float ward_x() const;
  void set_ward_x(float value);
  private:
  float _internal_ward_x() const;
  void _internal_set_ward_x(float value);
  public:

  // optional float ward_y = 3;
  bool has_ward_y() const;
  private:
  bool _internal_has_ward_y() const;
  public:
  void clear_ward_y();
  float ward_y() const;
  void set_ward_y(float value);
  private:
  float _internal_ward_y() const;
  void _internal_set_ward_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SetDesiredWardPlacement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t ward_index_;
    float ward_x_;
    float ward_y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RollDice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RollDice) */ {
 public:
  inline CDOTAClientMsg_RollDice() : CDOTAClientMsg_RollDice(nullptr) {}
  ~CDOTAClientMsg_RollDice() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RollDice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RollDice(const CDOTAClientMsg_RollDice& from);
  CDOTAClientMsg_RollDice(CDOTAClientMsg_RollDice&& from) noexcept
    : CDOTAClientMsg_RollDice() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RollDice& operator=(const CDOTAClientMsg_RollDice& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RollDice& operator=(CDOTAClientMsg_RollDice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RollDice& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RollDice* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RollDice*>(
               &_CDOTAClientMsg_RollDice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CDOTAClientMsg_RollDice& a, CDOTAClientMsg_RollDice& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RollDice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RollDice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RollDice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RollDice>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RollDice& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_RollDice& from) {
    CDOTAClientMsg_RollDice::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RollDice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RollDice";
  }
  protected:
  explicit CDOTAClientMsg_RollDice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelTypeFieldNumber = 1,
    kRollMinFieldNumber = 2,
    kRollMaxFieldNumber = 3,
  };
  // optional uint32 channel_type = 1;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  uint32_t channel_type() const;
  void set_channel_type(uint32_t value);
  private:
  uint32_t _internal_channel_type() const;
  void _internal_set_channel_type(uint32_t value);
  public:

  // optional uint32 roll_min = 2;
  bool has_roll_min() const;
  private:
  bool _internal_has_roll_min() const;
  public:
  void clear_roll_min();
  uint32_t roll_min() const;
  void set_roll_min(uint32_t value);
  private:
  uint32_t _internal_roll_min() const;
  void _internal_set_roll_min(uint32_t value);
  public:

  // optional uint32 roll_max = 3;
  bool has_roll_max() const;
  private:
  bool _internal_has_roll_max() const;
  public:
  void clear_roll_max();
  uint32_t roll_max() const;
  void set_roll_max(uint32_t value);
  private:
  uint32_t _internal_roll_max() const;
  void _internal_set_roll_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RollDice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t channel_type_;
    uint32_t roll_min_;
    uint32_t roll_max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_FlipCoin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_FlipCoin) */ {
 public:
  inline CDOTAClientMsg_FlipCoin() : CDOTAClientMsg_FlipCoin(nullptr) {}
  ~CDOTAClientMsg_FlipCoin() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_FlipCoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_FlipCoin(const CDOTAClientMsg_FlipCoin& from);
  CDOTAClientMsg_FlipCoin(CDOTAClientMsg_FlipCoin&& from) noexcept
    : CDOTAClientMsg_FlipCoin() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_FlipCoin& operator=(const CDOTAClientMsg_FlipCoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_FlipCoin& operator=(CDOTAClientMsg_FlipCoin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_FlipCoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_FlipCoin* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_FlipCoin*>(
               &_CDOTAClientMsg_FlipCoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CDOTAClientMsg_FlipCoin& a, CDOTAClientMsg_FlipCoin& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_FlipCoin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_FlipCoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_FlipCoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_FlipCoin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_FlipCoin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_FlipCoin& from) {
    CDOTAClientMsg_FlipCoin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_FlipCoin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_FlipCoin";
  }
  protected:
  explicit CDOTAClientMsg_FlipCoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelTypeFieldNumber = 1,
  };
  // optional uint32 channel_type = 1;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  uint32_t channel_type() const;
  void set_channel_type(uint32_t value);
  private:
  uint32_t _internal_channel_type() const;
  void _internal_set_channel_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_FlipCoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t channel_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RequestItemSuggestions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RequestItemSuggestions) */ {
 public:
  inline CDOTAClientMsg_RequestItemSuggestions() : CDOTAClientMsg_RequestItemSuggestions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RequestItemSuggestions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RequestItemSuggestions(const CDOTAClientMsg_RequestItemSuggestions& from);
  CDOTAClientMsg_RequestItemSuggestions(CDOTAClientMsg_RequestItemSuggestions&& from) noexcept
    : CDOTAClientMsg_RequestItemSuggestions() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RequestItemSuggestions& operator=(const CDOTAClientMsg_RequestItemSuggestions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RequestItemSuggestions& operator=(CDOTAClientMsg_RequestItemSuggestions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RequestItemSuggestions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RequestItemSuggestions* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RequestItemSuggestions*>(
               &_CDOTAClientMsg_RequestItemSuggestions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CDOTAClientMsg_RequestItemSuggestions& a, CDOTAClientMsg_RequestItemSuggestions& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RequestItemSuggestions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RequestItemSuggestions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RequestItemSuggestions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RequestItemSuggestions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CDOTAClientMsg_RequestItemSuggestions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RequestItemSuggestions";
  }
  protected:
  explicit CDOTAClientMsg_RequestItemSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RequestItemSuggestions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_MakeTeamCaptain final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_MakeTeamCaptain) */ {
 public:
  inline CDOTAClientMsg_MakeTeamCaptain() : CDOTAClientMsg_MakeTeamCaptain(nullptr) {}
  ~CDOTAClientMsg_MakeTeamCaptain() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_MakeTeamCaptain(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_MakeTeamCaptain(const CDOTAClientMsg_MakeTeamCaptain& from);
  CDOTAClientMsg_MakeTeamCaptain(CDOTAClientMsg_MakeTeamCaptain&& from) noexcept
    : CDOTAClientMsg_MakeTeamCaptain() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_MakeTeamCaptain& operator=(const CDOTAClientMsg_MakeTeamCaptain& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_MakeTeamCaptain& operator=(CDOTAClientMsg_MakeTeamCaptain&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_MakeTeamCaptain& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_MakeTeamCaptain* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_MakeTeamCaptain*>(
               &_CDOTAClientMsg_MakeTeamCaptain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CDOTAClientMsg_MakeTeamCaptain& a, CDOTAClientMsg_MakeTeamCaptain& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_MakeTeamCaptain* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_MakeTeamCaptain* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_MakeTeamCaptain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_MakeTeamCaptain>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_MakeTeamCaptain& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_MakeTeamCaptain& from) {
    CDOTAClientMsg_MakeTeamCaptain::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_MakeTeamCaptain* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_MakeTeamCaptain";
  }
  protected:
  explicit CDOTAClientMsg_MakeTeamCaptain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_MakeTeamCaptain)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_HelpTipSystemStateChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_HelpTipSystemStateChanged) */ {
 public:
  inline CDOTAClientMsg_HelpTipSystemStateChanged() : CDOTAClientMsg_HelpTipSystemStateChanged(nullptr) {}
  ~CDOTAClientMsg_HelpTipSystemStateChanged() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_HelpTipSystemStateChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_HelpTipSystemStateChanged(const CDOTAClientMsg_HelpTipSystemStateChanged& from);
  CDOTAClientMsg_HelpTipSystemStateChanged(CDOTAClientMsg_HelpTipSystemStateChanged&& from) noexcept
    : CDOTAClientMsg_HelpTipSystemStateChanged() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_HelpTipSystemStateChanged& operator=(const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_HelpTipSystemStateChanged& operator=(CDOTAClientMsg_HelpTipSystemStateChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_HelpTipSystemStateChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_HelpTipSystemStateChanged* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_HelpTipSystemStateChanged*>(
               &_CDOTAClientMsg_HelpTipSystemStateChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CDOTAClientMsg_HelpTipSystemStateChanged& a, CDOTAClientMsg_HelpTipSystemStateChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_HelpTipSystemStateChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_HelpTipSystemStateChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_HelpTipSystemStateChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_HelpTipSystemStateChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_HelpTipSystemStateChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_HelpTipSystemStateChanged& from) {
    CDOTAClientMsg_HelpTipSystemStateChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_HelpTipSystemStateChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_HelpTipSystemStateChanged";
  }
  protected:
  explicit CDOTAClientMsg_HelpTipSystemStateChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipDisplayedFieldNumber = 1,
  };
  // optional bool tip_displayed = 1;
  bool has_tip_displayed() const;
  private:
  bool _internal_has_tip_displayed() const;
  public:
  void clear_tip_displayed();
  bool tip_displayed() const;
  void set_tip_displayed(bool value);
  private:
  bool _internal_tip_displayed() const;
  void _internal_set_tip_displayed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_HelpTipSystemStateChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool tip_displayed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_RequestBulkCombatLog final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_RequestBulkCombatLog) */ {
 public:
  inline CDOTAClientMsg_RequestBulkCombatLog() : CDOTAClientMsg_RequestBulkCombatLog(nullptr) {}
  ~CDOTAClientMsg_RequestBulkCombatLog() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_RequestBulkCombatLog(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_RequestBulkCombatLog(const CDOTAClientMsg_RequestBulkCombatLog& from);
  CDOTAClientMsg_RequestBulkCombatLog(CDOTAClientMsg_RequestBulkCombatLog&& from) noexcept
    : CDOTAClientMsg_RequestBulkCombatLog() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_RequestBulkCombatLog& operator=(const CDOTAClientMsg_RequestBulkCombatLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_RequestBulkCombatLog& operator=(CDOTAClientMsg_RequestBulkCombatLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_RequestBulkCombatLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_RequestBulkCombatLog* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_RequestBulkCombatLog*>(
               &_CDOTAClientMsg_RequestBulkCombatLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CDOTAClientMsg_RequestBulkCombatLog& a, CDOTAClientMsg_RequestBulkCombatLog& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_RequestBulkCombatLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_RequestBulkCombatLog* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_RequestBulkCombatLog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_RequestBulkCombatLog>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_RequestBulkCombatLog& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_RequestBulkCombatLog& from) {
    CDOTAClientMsg_RequestBulkCombatLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_RequestBulkCombatLog* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_RequestBulkCombatLog";
  }
  protected:
  explicit CDOTAClientMsg_RequestBulkCombatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameTimeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kRecentPlayerDeathFieldNumber = 3,
    kPlayerIdFieldNumber = 4,
  };
  // optional float game_time = 1;
  bool has_game_time() const;
  private:
  bool _internal_has_game_time() const;
  public:
  void clear_game_time();
  float game_time() const;
  void set_game_time(float value);
  private:
  float _internal_game_time() const;
  void _internal_set_game_time(float value);
  public:

  // optional float duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  float duration() const;
  void set_duration(float value);
  private:
  float _internal_duration() const;
  void _internal_set_duration(float value);
  public:

  // optional bool recent_player_death = 3;
  bool has_recent_player_death() const;
  private:
  bool _internal_has_recent_player_death() const;
  public:
  void clear_recent_player_death();
  bool recent_player_death() const;
  void set_recent_player_death(bool value);
  private:
  bool _internal_recent_player_death() const;
  void _internal_set_recent_player_death(bool value);
  public:

  // optional int32 player_id = 4 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_RequestBulkCombatLog)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float game_time_;
    float duration_;
    bool recent_player_death_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AbilityDraftRequestAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AbilityDraftRequestAbility) */ {
 public:
  inline CDOTAClientMsg_AbilityDraftRequestAbility() : CDOTAClientMsg_AbilityDraftRequestAbility(nullptr) {}
  ~CDOTAClientMsg_AbilityDraftRequestAbility() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AbilityDraftRequestAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AbilityDraftRequestAbility(const CDOTAClientMsg_AbilityDraftRequestAbility& from);
  CDOTAClientMsg_AbilityDraftRequestAbility(CDOTAClientMsg_AbilityDraftRequestAbility&& from) noexcept
    : CDOTAClientMsg_AbilityDraftRequestAbility() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AbilityDraftRequestAbility& operator=(const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AbilityDraftRequestAbility& operator=(CDOTAClientMsg_AbilityDraftRequestAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AbilityDraftRequestAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AbilityDraftRequestAbility* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AbilityDraftRequestAbility*>(
               &_CDOTAClientMsg_AbilityDraftRequestAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CDOTAClientMsg_AbilityDraftRequestAbility& a, CDOTAClientMsg_AbilityDraftRequestAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AbilityDraftRequestAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AbilityDraftRequestAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AbilityDraftRequestAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AbilityDraftRequestAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AbilityDraftRequestAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AbilityDraftRequestAbility& from) {
    CDOTAClientMsg_AbilityDraftRequestAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AbilityDraftRequestAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AbilityDraftRequestAbility";
  }
  protected:
  explicit CDOTAClientMsg_AbilityDraftRequestAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlIsDownFieldNumber = 2,
    kRequestedAbilityIdFieldNumber = 1,
  };
  // optional bool ctrl_is_down = 2;
  bool has_ctrl_is_down() const;
  private:
  bool _internal_has_ctrl_is_down() const;
  public:
  void clear_ctrl_is_down();
  bool ctrl_is_down() const;
  void set_ctrl_is_down(bool value);
  private:
  bool _internal_ctrl_is_down() const;
  void _internal_set_ctrl_is_down(bool value);
  public:

  // optional int32 requested_ability_id = 1 [default = -1];
  bool has_requested_ability_id() const;
  private:
  bool _internal_has_requested_ability_id() const;
  public:
  void clear_requested_ability_id();
  int32_t requested_ability_id() const;
  void set_requested_ability_id(int32_t value);
  private:
  int32_t _internal_requested_ability_id() const;
  void _internal_set_requested_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AbilityDraftRequestAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ctrl_is_down_;
    int32_t requested_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_GuideSelectOption final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_GuideSelectOption) */ {
 public:
  inline CDOTAClientMsg_GuideSelectOption() : CDOTAClientMsg_GuideSelectOption(nullptr) {}
  ~CDOTAClientMsg_GuideSelectOption() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_GuideSelectOption(const CDOTAClientMsg_GuideSelectOption& from);
  CDOTAClientMsg_GuideSelectOption(CDOTAClientMsg_GuideSelectOption&& from) noexcept
    : CDOTAClientMsg_GuideSelectOption() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_GuideSelectOption& operator=(const CDOTAClientMsg_GuideSelectOption& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_GuideSelectOption& operator=(CDOTAClientMsg_GuideSelectOption&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_GuideSelectOption& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_GuideSelectOption* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_GuideSelectOption*>(
               &_CDOTAClientMsg_GuideSelectOption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CDOTAClientMsg_GuideSelectOption& a, CDOTAClientMsg_GuideSelectOption& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_GuideSelectOption* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_GuideSelectOption* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_GuideSelectOption* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_GuideSelectOption>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_GuideSelectOption& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_GuideSelectOption& from) {
    CDOTAClientMsg_GuideSelectOption::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_GuideSelectOption* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_GuideSelectOption";
  }
  protected:
  explicit CDOTAClientMsg_GuideSelectOption(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
    kForceRecalculateFieldNumber = 2,
  };
  // optional uint32 option = 1;
  bool has_option() const;
  private:
  bool _internal_has_option() const;
  public:
  void clear_option();
  uint32_t option() const;
  void set_option(uint32_t value);
  private:
  uint32_t _internal_option() const;
  void _internal_set_option(uint32_t value);
  public:

  // optional bool force_recalculate = 2;
  bool has_force_recalculate() const;
  private:
  bool _internal_has_force_recalculate() const;
  public:
  void clear_force_recalculate();
  bool force_recalculate() const;
  void set_force_recalculate(bool value);
  private:
  bool _internal_force_recalculate() const;
  void _internal_set_force_recalculate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_GuideSelectOption)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t option_;
    bool force_recalculate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_GuideSelected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_GuideSelected) */ {
 public:
  inline CDOTAClientMsg_GuideSelected() : CDOTAClientMsg_GuideSelected(nullptr) {}
  ~CDOTAClientMsg_GuideSelected() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_GuideSelected(const CDOTAClientMsg_GuideSelected& from);
  CDOTAClientMsg_GuideSelected(CDOTAClientMsg_GuideSelected&& from) noexcept
    : CDOTAClientMsg_GuideSelected() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_GuideSelected& operator=(const CDOTAClientMsg_GuideSelected& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_GuideSelected& operator=(CDOTAClientMsg_GuideSelected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_GuideSelected& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_GuideSelected* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_GuideSelected*>(
               &_CDOTAClientMsg_GuideSelected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CDOTAClientMsg_GuideSelected& a, CDOTAClientMsg_GuideSelected& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_GuideSelected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_GuideSelected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_GuideSelected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_GuideSelected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_GuideSelected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_GuideSelected& from) {
    CDOTAClientMsg_GuideSelected::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_GuideSelected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_GuideSelected";
  }
  protected:
  explicit CDOTAClientMsg_GuideSelected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuideWorkshopIdFieldNumber = 1,
    kIsPlusGuideFieldNumber = 2,
  };
  // optional uint64 guide_workshop_id = 1;
  bool has_guide_workshop_id() const;
  private:
  bool _internal_has_guide_workshop_id() const;
  public:
  void clear_guide_workshop_id();
  uint64_t guide_workshop_id() const;
  void set_guide_workshop_id(uint64_t value);
  private:
  uint64_t _internal_guide_workshop_id() const;
  void _internal_set_guide_workshop_id(uint64_t value);
  public:

  // optional bool is_plus_guide = 2;
  bool has_is_plus_guide() const;
  private:
  bool _internal_has_is_plus_guide() const;
  public:
  void clear_is_plus_guide();
  bool is_plus_guide() const;
  void set_is_plus_guide(bool value);
  private:
  bool _internal_is_plus_guide() const;
  void _internal_set_is_plus_guide(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_GuideSelected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t guide_workshop_id_;
    bool is_plus_guide_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_DamageReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_DamageReport) */ {
 public:
  inline CDOTAClientMsg_DamageReport() : CDOTAClientMsg_DamageReport(nullptr) {}
  ~CDOTAClientMsg_DamageReport() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_DamageReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_DamageReport(const CDOTAClientMsg_DamageReport& from);
  CDOTAClientMsg_DamageReport(CDOTAClientMsg_DamageReport&& from) noexcept
    : CDOTAClientMsg_DamageReport() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_DamageReport& operator=(const CDOTAClientMsg_DamageReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_DamageReport& operator=(CDOTAClientMsg_DamageReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_DamageReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_DamageReport* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_DamageReport*>(
               &_CDOTAClientMsg_DamageReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CDOTAClientMsg_DamageReport& a, CDOTAClientMsg_DamageReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_DamageReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_DamageReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_DamageReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_DamageReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_DamageReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_DamageReport& from) {
    CDOTAClientMsg_DamageReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_DamageReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_DamageReport";
  }
  protected:
  explicit CDOTAClientMsg_DamageReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetHeroIdFieldNumber = 1,
    kSourceHeroIdFieldNumber = 2,
    kDamageAmountFieldNumber = 3,
    kBroadcastFieldNumber = 4,
  };
  // optional uint32 target_hero_id = 1;
  bool has_target_hero_id() const;
  private:
  bool _internal_has_target_hero_id() const;
  public:
  void clear_target_hero_id();
  uint32_t target_hero_id() const;
  void set_target_hero_id(uint32_t value);
  private:
  uint32_t _internal_target_hero_id() const;
  void _internal_set_target_hero_id(uint32_t value);
  public:

  // optional uint32 source_hero_id = 2;
  bool has_source_hero_id() const;
  private:
  bool _internal_has_source_hero_id() const;
  public:
  void clear_source_hero_id();
  uint32_t source_hero_id() const;
  void set_source_hero_id(uint32_t value);
  private:
  uint32_t _internal_source_hero_id() const;
  void _internal_set_source_hero_id(uint32_t value);
  public:

  // optional int32 damage_amount = 3;
  bool has_damage_amount() const;
  private:
  bool _internal_has_damage_amount() const;
  public:
  void clear_damage_amount();
  int32_t damage_amount() const;
  void set_damage_amount(int32_t value);
  private:
  int32_t _internal_damage_amount() const;
  void _internal_set_damage_amount(int32_t value);
  public:

  // optional bool broadcast = 4;
  bool has_broadcast() const;
  private:
  bool _internal_has_broadcast() const;
  public:
  void clear_broadcast();
  bool broadcast() const;
  void set_broadcast(bool value);
  private:
  bool _internal_broadcast() const;
  void _internal_set_broadcast(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_DamageReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t target_hero_id_;
    uint32_t source_hero_id_;
    int32_t damage_amount_;
    bool broadcast_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SalutePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SalutePlayer) */ {
 public:
  inline CDOTAClientMsg_SalutePlayer() : CDOTAClientMsg_SalutePlayer(nullptr) {}
  ~CDOTAClientMsg_SalutePlayer() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SalutePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SalutePlayer(const CDOTAClientMsg_SalutePlayer& from);
  CDOTAClientMsg_SalutePlayer(CDOTAClientMsg_SalutePlayer&& from) noexcept
    : CDOTAClientMsg_SalutePlayer() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SalutePlayer& operator=(const CDOTAClientMsg_SalutePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SalutePlayer& operator=(CDOTAClientMsg_SalutePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SalutePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SalutePlayer* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SalutePlayer*>(
               &_CDOTAClientMsg_SalutePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CDOTAClientMsg_SalutePlayer& a, CDOTAClientMsg_SalutePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SalutePlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SalutePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SalutePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SalutePlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SalutePlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SalutePlayer& from) {
    CDOTAClientMsg_SalutePlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SalutePlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SalutePlayer";
  }
  protected:
  explicit CDOTAClientMsg_SalutePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 2,
    kTargetPlayerIdFieldNumber = 1,
  };
  // optional int32 event_id = 2;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  int32_t event_id() const;
  void set_event_id(int32_t value);
  private:
  int32_t _internal_event_id() const;
  void _internal_set_event_id(int32_t value);
  public:

  // optional int32 target_player_id = 1 [default = -1];
  bool has_target_player_id() const;
  private:
  bool _internal_has_target_player_id() const;
  public:
  void clear_target_player_id();
  int32_t target_player_id() const;
  void set_target_player_id(int32_t value);
  private:
  int32_t _internal_target_player_id() const;
  void _internal_set_target_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SalutePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t event_id_;
    int32_t target_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_TipAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_TipAlert) */ {
 public:
  inline CDOTAClientMsg_TipAlert() : CDOTAClientMsg_TipAlert(nullptr) {}
  ~CDOTAClientMsg_TipAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_TipAlert(const CDOTAClientMsg_TipAlert& from);
  CDOTAClientMsg_TipAlert(CDOTAClientMsg_TipAlert&& from) noexcept
    : CDOTAClientMsg_TipAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_TipAlert& operator=(const CDOTAClientMsg_TipAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_TipAlert& operator=(CDOTAClientMsg_TipAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_TipAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_TipAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_TipAlert*>(
               &_CDOTAClientMsg_TipAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CDOTAClientMsg_TipAlert& a, CDOTAClientMsg_TipAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_TipAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_TipAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_TipAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_TipAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_TipAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_TipAlert& from) {
    CDOTAClientMsg_TipAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_TipAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_TipAlert";
  }
  protected:
  explicit CDOTAClientMsg_TipAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipTextFieldNumber = 1,
  };
  // optional string tip_text = 1;
  bool has_tip_text() const;
  private:
  bool _internal_has_tip_text() const;
  public:
  void clear_tip_text();
  const std::string& tip_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tip_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tip_text();
  PROTOBUF_NODISCARD std::string* release_tip_text();
  void set_allocated_tip_text(std::string* tip_text);
  private:
  const std::string& _internal_tip_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tip_text(const std::string& value);
  std::string* _internal_mutable_tip_text();
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_TipAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tip_text_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EmptyTeleportAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EmptyTeleportAlert) */ {
 public:
  inline CDOTAClientMsg_EmptyTeleportAlert() : CDOTAClientMsg_EmptyTeleportAlert(nullptr) {}
  ~CDOTAClientMsg_EmptyTeleportAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_EmptyTeleportAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EmptyTeleportAlert(const CDOTAClientMsg_EmptyTeleportAlert& from);
  CDOTAClientMsg_EmptyTeleportAlert(CDOTAClientMsg_EmptyTeleportAlert&& from) noexcept
    : CDOTAClientMsg_EmptyTeleportAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EmptyTeleportAlert& operator=(const CDOTAClientMsg_EmptyTeleportAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EmptyTeleportAlert& operator=(CDOTAClientMsg_EmptyTeleportAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EmptyTeleportAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EmptyTeleportAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EmptyTeleportAlert*>(
               &_CDOTAClientMsg_EmptyTeleportAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CDOTAClientMsg_EmptyTeleportAlert& a, CDOTAClientMsg_EmptyTeleportAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EmptyTeleportAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EmptyTeleportAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EmptyTeleportAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EmptyTeleportAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EmptyTeleportAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_EmptyTeleportAlert& from) {
    CDOTAClientMsg_EmptyTeleportAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EmptyTeleportAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EmptyTeleportAlert";
  }
  protected:
  explicit CDOTAClientMsg_EmptyTeleportAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetEntindexFieldNumber = 1,
  };
  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EmptyTeleportAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_SetCavernMapVariant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_SetCavernMapVariant) */ {
 public:
  inline CDOTAClientMsg_SetCavernMapVariant() : CDOTAClientMsg_SetCavernMapVariant(nullptr) {}
  ~CDOTAClientMsg_SetCavernMapVariant() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_SetCavernMapVariant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_SetCavernMapVariant(const CDOTAClientMsg_SetCavernMapVariant& from);
  CDOTAClientMsg_SetCavernMapVariant(CDOTAClientMsg_SetCavernMapVariant&& from) noexcept
    : CDOTAClientMsg_SetCavernMapVariant() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_SetCavernMapVariant& operator=(const CDOTAClientMsg_SetCavernMapVariant& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_SetCavernMapVariant& operator=(CDOTAClientMsg_SetCavernMapVariant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_SetCavernMapVariant& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_SetCavernMapVariant* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_SetCavernMapVariant*>(
               &_CDOTAClientMsg_SetCavernMapVariant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CDOTAClientMsg_SetCavernMapVariant& a, CDOTAClientMsg_SetCavernMapVariant& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_SetCavernMapVariant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_SetCavernMapVariant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_SetCavernMapVariant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_SetCavernMapVariant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_SetCavernMapVariant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_SetCavernMapVariant& from) {
    CDOTAClientMsg_SetCavernMapVariant::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_SetCavernMapVariant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_SetCavernMapVariant";
  }
  protected:
  explicit CDOTAClientMsg_SetCavernMapVariant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapVariantFieldNumber = 1,
  };
  // optional uint32 map_variant = 1 [default = 255];
  bool has_map_variant() const;
  private:
  bool _internal_has_map_variant() const;
  public:
  void clear_map_variant();
  uint32_t map_variant() const;
  void set_map_variant(uint32_t value);
  private:
  uint32_t _internal_map_variant() const;
  void _internal_set_map_variant(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_SetCavernMapVariant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t map_variant_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PauseGameOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PauseGameOrder) */ {
 public:
  inline CDOTAClientMsg_PauseGameOrder() : CDOTAClientMsg_PauseGameOrder(nullptr) {}
  ~CDOTAClientMsg_PauseGameOrder() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PauseGameOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PauseGameOrder(const CDOTAClientMsg_PauseGameOrder& from);
  CDOTAClientMsg_PauseGameOrder(CDOTAClientMsg_PauseGameOrder&& from) noexcept
    : CDOTAClientMsg_PauseGameOrder() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PauseGameOrder& operator=(const CDOTAClientMsg_PauseGameOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PauseGameOrder& operator=(CDOTAClientMsg_PauseGameOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PauseGameOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PauseGameOrder* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PauseGameOrder*>(
               &_CDOTAClientMsg_PauseGameOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CDOTAClientMsg_PauseGameOrder& a, CDOTAClientMsg_PauseGameOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PauseGameOrder* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PauseGameOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PauseGameOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PauseGameOrder>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PauseGameOrder& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PauseGameOrder& from) {
    CDOTAClientMsg_PauseGameOrder::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PauseGameOrder* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PauseGameOrder";
  }
  protected:
  explicit CDOTAClientMsg_PauseGameOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // optional int32 order_id = 1;
  bool has_order_id() const;
  private:
  bool _internal_has_order_id() const;
  public:
  void clear_order_id();
  int32_t order_id() const;
  void set_order_id(int32_t value);
  private:
  int32_t _internal_order_id() const;
  void _internal_set_order_id(int32_t value);
  public:

  // optional int32 data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  int32_t data() const;
  void set_data(int32_t value);
  private:
  int32_t _internal_data() const;
  void _internal_set_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PauseGameOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t order_id_;
    int32_t data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_VersusScene_PlayerBehavior final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_VersusScene_PlayerBehavior) */ {
 public:
  inline CDOTAClientMsg_VersusScene_PlayerBehavior() : CDOTAClientMsg_VersusScene_PlayerBehavior(nullptr) {}
  ~CDOTAClientMsg_VersusScene_PlayerBehavior() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_VersusScene_PlayerBehavior(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_VersusScene_PlayerBehavior(const CDOTAClientMsg_VersusScene_PlayerBehavior& from);
  CDOTAClientMsg_VersusScene_PlayerBehavior(CDOTAClientMsg_VersusScene_PlayerBehavior&& from) noexcept
    : CDOTAClientMsg_VersusScene_PlayerBehavior() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_VersusScene_PlayerBehavior& operator=(const CDOTAClientMsg_VersusScene_PlayerBehavior& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_VersusScene_PlayerBehavior& operator=(CDOTAClientMsg_VersusScene_PlayerBehavior&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_VersusScene_PlayerBehavior& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_VersusScene_PlayerBehavior* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_VersusScene_PlayerBehavior*>(
               &_CDOTAClientMsg_VersusScene_PlayerBehavior_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CDOTAClientMsg_VersusScene_PlayerBehavior& a, CDOTAClientMsg_VersusScene_PlayerBehavior& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_VersusScene_PlayerBehavior* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_VersusScene_PlayerBehavior* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_VersusScene_PlayerBehavior* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_VersusScene_PlayerBehavior>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_VersusScene_PlayerBehavior& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_VersusScene_PlayerBehavior& from) {
    CDOTAClientMsg_VersusScene_PlayerBehavior::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_VersusScene_PlayerBehavior* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_VersusScene_PlayerBehavior";
  }
  protected:
  explicit CDOTAClientMsg_VersusScene_PlayerBehavior(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayActivityFieldNumber = 2,
    kChatWheelFieldNumber = 3,
    kPlaybackRateFieldNumber = 4,
    kBehaviorFieldNumber = 1,
  };
  // optional .VersusScene_PlayActivity play_activity = 2;
  bool has_play_activity() const;
  private:
  bool _internal_has_play_activity() const;
  public:
  void clear_play_activity();
  const ::VersusScene_PlayActivity& play_activity() const;
  PROTOBUF_NODISCARD ::VersusScene_PlayActivity* release_play_activity();
  ::VersusScene_PlayActivity* mutable_play_activity();
  void set_allocated_play_activity(::VersusScene_PlayActivity* play_activity);
  private:
  const ::VersusScene_PlayActivity& _internal_play_activity() const;
  ::VersusScene_PlayActivity* _internal_mutable_play_activity();
  public:
  void unsafe_arena_set_allocated_play_activity(
      ::VersusScene_PlayActivity* play_activity);
  ::VersusScene_PlayActivity* unsafe_arena_release_play_activity();

  // optional .VersusScene_ChatWheel chat_wheel = 3;
  bool has_chat_wheel() const;
  private:
  bool _internal_has_chat_wheel() const;
  public:
  void clear_chat_wheel();
  const ::VersusScene_ChatWheel& chat_wheel() const;
  PROTOBUF_NODISCARD ::VersusScene_ChatWheel* release_chat_wheel();
  ::VersusScene_ChatWheel* mutable_chat_wheel();
  void set_allocated_chat_wheel(::VersusScene_ChatWheel* chat_wheel);
  private:
  const ::VersusScene_ChatWheel& _internal_chat_wheel() const;
  ::VersusScene_ChatWheel* _internal_mutable_chat_wheel();
  public:
  void unsafe_arena_set_allocated_chat_wheel(
      ::VersusScene_ChatWheel* chat_wheel);
  ::VersusScene_ChatWheel* unsafe_arena_release_chat_wheel();

  // optional .VersusScene_PlaybackRate playback_rate = 4;
  bool has_playback_rate() const;
  private:
  bool _internal_has_playback_rate() const;
  public:
  void clear_playback_rate();
  const ::VersusScene_PlaybackRate& playback_rate() const;
  PROTOBUF_NODISCARD ::VersusScene_PlaybackRate* release_playback_rate();
  ::VersusScene_PlaybackRate* mutable_playback_rate();
  void set_allocated_playback_rate(::VersusScene_PlaybackRate* playback_rate);
  private:
  const ::VersusScene_PlaybackRate& _internal_playback_rate() const;
  ::VersusScene_PlaybackRate* _internal_mutable_playback_rate();
  public:
  void unsafe_arena_set_allocated_playback_rate(
      ::VersusScene_PlaybackRate* playback_rate);
  ::VersusScene_PlaybackRate* unsafe_arena_release_playback_rate();

  // optional .EDOTAVersusScenePlayerBehavior behavior = 1 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
  bool has_behavior() const;
  private:
  bool _internal_has_behavior() const;
  public:
  void clear_behavior();
  ::EDOTAVersusScenePlayerBehavior behavior() const;
  void set_behavior(::EDOTAVersusScenePlayerBehavior value);
  private:
  ::EDOTAVersusScenePlayerBehavior _internal_behavior() const;
  void _internal_set_behavior(::EDOTAVersusScenePlayerBehavior value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_VersusScene_PlayerBehavior)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::VersusScene_PlayActivity* play_activity_;
    ::VersusScene_ChatWheel* chat_wheel_;
    ::VersusScene_PlaybackRate* playback_rate_;
    int behavior_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_EmptyItemSlotAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_EmptyItemSlotAlert) */ {
 public:
  inline CDOTAClientMsg_EmptyItemSlotAlert() : CDOTAClientMsg_EmptyItemSlotAlert(nullptr) {}
  ~CDOTAClientMsg_EmptyItemSlotAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_EmptyItemSlotAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_EmptyItemSlotAlert(const CDOTAClientMsg_EmptyItemSlotAlert& from);
  CDOTAClientMsg_EmptyItemSlotAlert(CDOTAClientMsg_EmptyItemSlotAlert&& from) noexcept
    : CDOTAClientMsg_EmptyItemSlotAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_EmptyItemSlotAlert& operator=(const CDOTAClientMsg_EmptyItemSlotAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_EmptyItemSlotAlert& operator=(CDOTAClientMsg_EmptyItemSlotAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_EmptyItemSlotAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_EmptyItemSlotAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_EmptyItemSlotAlert*>(
               &_CDOTAClientMsg_EmptyItemSlotAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CDOTAClientMsg_EmptyItemSlotAlert& a, CDOTAClientMsg_EmptyItemSlotAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_EmptyItemSlotAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_EmptyItemSlotAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_EmptyItemSlotAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_EmptyItemSlotAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_EmptyItemSlotAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_EmptyItemSlotAlert& from) {
    CDOTAClientMsg_EmptyItemSlotAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_EmptyItemSlotAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_EmptyItemSlotAlert";
  }
  protected:
  explicit CDOTAClientMsg_EmptyItemSlotAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIndexFieldNumber = 2,
    kTargetEntindexFieldNumber = 1,
  };
  // optional int32 slot_index = 2;
  bool has_slot_index() const;
  private:
  bool _internal_has_slot_index() const;
  public:
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // optional int32 target_entindex = 1 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_EmptyItemSlotAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t slot_index_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AddOverwatchReportMarker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AddOverwatchReportMarker) */ {
 public:
  inline CDOTAClientMsg_AddOverwatchReportMarker() : CDOTAClientMsg_AddOverwatchReportMarker(nullptr) {}
  ~CDOTAClientMsg_AddOverwatchReportMarker() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AddOverwatchReportMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AddOverwatchReportMarker(const CDOTAClientMsg_AddOverwatchReportMarker& from);
  CDOTAClientMsg_AddOverwatchReportMarker(CDOTAClientMsg_AddOverwatchReportMarker&& from) noexcept
    : CDOTAClientMsg_AddOverwatchReportMarker() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AddOverwatchReportMarker& operator=(const CDOTAClientMsg_AddOverwatchReportMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AddOverwatchReportMarker& operator=(CDOTAClientMsg_AddOverwatchReportMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AddOverwatchReportMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AddOverwatchReportMarker* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AddOverwatchReportMarker*>(
               &_CDOTAClientMsg_AddOverwatchReportMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CDOTAClientMsg_AddOverwatchReportMarker& a, CDOTAClientMsg_AddOverwatchReportMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AddOverwatchReportMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AddOverwatchReportMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AddOverwatchReportMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AddOverwatchReportMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AddOverwatchReportMarker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AddOverwatchReportMarker& from) {
    CDOTAClientMsg_AddOverwatchReportMarker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AddOverwatchReportMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AddOverwatchReportMarker";
  }
  protected:
  explicit CDOTAClientMsg_AddOverwatchReportMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSecondsAgoFieldNumber = 4,
    kTargetPlayerIdFieldNumber = 1,
  };
  // optional .EOverwatchReportReason reason = 2 [default = k_EOverwatchReportReason_Unknown];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::EOverwatchReportReason reason() const;
  void set_reason(::EOverwatchReportReason value);
  private:
  ::EOverwatchReportReason _internal_reason() const;
  void _internal_set_reason(::EOverwatchReportReason value);
  public:

  // optional uint32 seconds_ago = 4;
  bool has_seconds_ago() const;
  private:
  bool _internal_has_seconds_ago() const;
  public:
  void clear_seconds_ago();
  uint32_t seconds_ago() const;
  void set_seconds_ago(uint32_t value);
  private:
  uint32_t _internal_seconds_ago() const;
  void _internal_set_seconds_ago(uint32_t value);
  public:

  // optional int32 target_player_id = 1 [default = -1];
  bool has_target_player_id() const;
  private:
  bool _internal_has_target_player_id() const;
  public:
  void clear_target_player_id();
  int32_t target_player_id() const;
  void set_target_player_id(int32_t value);
  private:
  int32_t _internal_target_player_id() const;
  void _internal_set_target_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AddOverwatchReportMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int reason_;
    uint32_t seconds_ago_;
    int32_t target_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AddCommunicationsReportMarker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AddCommunicationsReportMarker) */ {
 public:
  inline CDOTAClientMsg_AddCommunicationsReportMarker() : CDOTAClientMsg_AddCommunicationsReportMarker(nullptr) {}
  ~CDOTAClientMsg_AddCommunicationsReportMarker() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AddCommunicationsReportMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AddCommunicationsReportMarker(const CDOTAClientMsg_AddCommunicationsReportMarker& from);
  CDOTAClientMsg_AddCommunicationsReportMarker(CDOTAClientMsg_AddCommunicationsReportMarker&& from) noexcept
    : CDOTAClientMsg_AddCommunicationsReportMarker() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AddCommunicationsReportMarker& operator=(const CDOTAClientMsg_AddCommunicationsReportMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AddCommunicationsReportMarker& operator=(CDOTAClientMsg_AddCommunicationsReportMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AddCommunicationsReportMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AddCommunicationsReportMarker* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AddCommunicationsReportMarker*>(
               &_CDOTAClientMsg_AddCommunicationsReportMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CDOTAClientMsg_AddCommunicationsReportMarker& a, CDOTAClientMsg_AddCommunicationsReportMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AddCommunicationsReportMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AddCommunicationsReportMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AddCommunicationsReportMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AddCommunicationsReportMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AddCommunicationsReportMarker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AddCommunicationsReportMarker& from) {
    CDOTAClientMsg_AddCommunicationsReportMarker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AddCommunicationsReportMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AddCommunicationsReportMarker";
  }
  protected:
  explicit CDOTAClientMsg_AddCommunicationsReportMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPlayerIdFieldNumber = 1,
  };
  // optional int32 target_player_id = 1 [default = -1];
  bool has_target_player_id() const;
  private:
  bool _internal_has_target_player_id() const;
  public:
  void clear_target_player_id();
  int32_t target_player_id() const;
  void set_target_player_id(int32_t value);
  private:
  int32_t _internal_target_player_id() const;
  void _internal_set_target_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AddCommunicationsReportMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t target_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AddCommunicationsBlockMarker final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AddCommunicationsBlockMarker) */ {
 public:
  inline CDOTAClientMsg_AddCommunicationsBlockMarker() : CDOTAClientMsg_AddCommunicationsBlockMarker(nullptr) {}
  ~CDOTAClientMsg_AddCommunicationsBlockMarker() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AddCommunicationsBlockMarker(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AddCommunicationsBlockMarker(const CDOTAClientMsg_AddCommunicationsBlockMarker& from);
  CDOTAClientMsg_AddCommunicationsBlockMarker(CDOTAClientMsg_AddCommunicationsBlockMarker&& from) noexcept
    : CDOTAClientMsg_AddCommunicationsBlockMarker() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AddCommunicationsBlockMarker& operator=(const CDOTAClientMsg_AddCommunicationsBlockMarker& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AddCommunicationsBlockMarker& operator=(CDOTAClientMsg_AddCommunicationsBlockMarker&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AddCommunicationsBlockMarker& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AddCommunicationsBlockMarker* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AddCommunicationsBlockMarker*>(
               &_CDOTAClientMsg_AddCommunicationsBlockMarker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CDOTAClientMsg_AddCommunicationsBlockMarker& a, CDOTAClientMsg_AddCommunicationsBlockMarker& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AddCommunicationsBlockMarker* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AddCommunicationsBlockMarker* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AddCommunicationsBlockMarker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AddCommunicationsBlockMarker>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AddCommunicationsBlockMarker& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AddCommunicationsBlockMarker& from) {
    CDOTAClientMsg_AddCommunicationsBlockMarker::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AddCommunicationsBlockMarker* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AddCommunicationsBlockMarker";
  }
  protected:
  explicit CDOTAClientMsg_AddCommunicationsBlockMarker(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetPlayerIdFieldNumber = 1,
  };
  // optional int32 target_player_id = 1 [default = -1];
  bool has_target_player_id() const;
  private:
  bool _internal_has_target_player_id() const;
  public:
  void clear_target_player_id();
  int32_t target_player_id() const;
  void set_target_player_id(int32_t value);
  private:
  int32_t _internal_target_player_id() const;
  void _internal_set_target_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AddCommunicationsBlockMarker)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t target_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AghsStatusAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AghsStatusAlert) */ {
 public:
  inline CDOTAClientMsg_AghsStatusAlert() : CDOTAClientMsg_AghsStatusAlert(nullptr) {}
  ~CDOTAClientMsg_AghsStatusAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AghsStatusAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AghsStatusAlert(const CDOTAClientMsg_AghsStatusAlert& from);
  CDOTAClientMsg_AghsStatusAlert(CDOTAClientMsg_AghsStatusAlert&& from) noexcept
    : CDOTAClientMsg_AghsStatusAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AghsStatusAlert& operator=(const CDOTAClientMsg_AghsStatusAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AghsStatusAlert& operator=(CDOTAClientMsg_AghsStatusAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AghsStatusAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AghsStatusAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AghsStatusAlert*>(
               &_CDOTAClientMsg_AghsStatusAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CDOTAClientMsg_AghsStatusAlert& a, CDOTAClientMsg_AghsStatusAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AghsStatusAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AghsStatusAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AghsStatusAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AghsStatusAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AghsStatusAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AghsStatusAlert& from) {
    CDOTAClientMsg_AghsStatusAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AghsStatusAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AghsStatusAlert";
  }
  protected:
  explicit CDOTAClientMsg_AghsStatusAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertTypeFieldNumber = 4,
    kTargetEntindexFieldNumber = 3,
    kSourcePlayerIdFieldNumber = 1,
    kTargetPlayerIdFieldNumber = 2,
  };
  // optional uint32 alert_type = 4;
  bool has_alert_type() const;
  private:
  bool _internal_has_alert_type() const;
  public:
  void clear_alert_type();
  uint32_t alert_type() const;
  void set_alert_type(uint32_t value);
  private:
  uint32_t _internal_alert_type() const;
  void _internal_set_alert_type(uint32_t value);
  public:

  // optional int32 target_entindex = 3 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // optional int32 source_player_id = 1 [default = -1];
  bool has_source_player_id() const;
  private:
  bool _internal_has_source_player_id() const;
  public:
  void clear_source_player_id();
  int32_t source_player_id() const;
  void set_source_player_id(int32_t value);
  private:
  int32_t _internal_source_player_id() const;
  void _internal_set_source_player_id(int32_t value);
  public:

  // optional int32 target_player_id = 2 [default = -1];
  bool has_target_player_id() const;
  private:
  bool _internal_has_target_player_id() const;
  public:
  void clear_target_player_id();
  int32_t target_player_id() const;
  void set_target_player_id(int32_t value);
  private:
  int32_t _internal_target_player_id() const;
  void _internal_set_target_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AghsStatusAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t alert_type_;
    int32_t target_entindex_;
    int32_t source_player_id_;
    int32_t target_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PerfReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PerfReport) */ {
 public:
  inline CDOTAClientMsg_PerfReport() : CDOTAClientMsg_PerfReport(nullptr) {}
  ~CDOTAClientMsg_PerfReport() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PerfReport(const CDOTAClientMsg_PerfReport& from);
  CDOTAClientMsg_PerfReport(CDOTAClientMsg_PerfReport&& from) noexcept
    : CDOTAClientMsg_PerfReport() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PerfReport& operator=(const CDOTAClientMsg_PerfReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PerfReport& operator=(CDOTAClientMsg_PerfReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PerfReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PerfReport* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PerfReport*>(
               &_CDOTAClientMsg_PerfReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CDOTAClientMsg_PerfReport& a, CDOTAClientMsg_PerfReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PerfReport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PerfReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PerfReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PerfReport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PerfReport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PerfReport& from) {
    CDOTAClientMsg_PerfReport::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PerfReport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PerfReport";
  }
  protected:
  explicit CDOTAClientMsg_PerfReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageFrameTimeFieldNumber = 1,
    kMaxFrameTimeFieldNumber = 2,
    kAverageComputeTimeFieldNumber = 3,
    kMaxComputeTimeFieldNumber = 4,
    kAverageClientTickTimeFieldNumber = 5,
    kMaxClientTickTimeFieldNumber = 6,
    kAverageClientSimulateTimeFieldNumber = 7,
    kMaxClientSimulateTimeFieldNumber = 8,
    kAverageOutputTimeFieldNumber = 9,
    kMaxOutputTimeFieldNumber = 10,
    kAverageWaitForRenderingToCompleteTimeFieldNumber = 11,
    kMaxWaitForRenderingToCompleteTimeFieldNumber = 12,
    kAverageSwapTimeFieldNumber = 13,
    kMaxSwapTimeFieldNumber = 14,
    kAverageFrameUpdateTimeFieldNumber = 15,
    kMaxFrameUpdateTimeFieldNumber = 16,
    kAverageIdleTimeFieldNumber = 17,
    kMaxIdleTimeFieldNumber = 18,
    kAverageInputProcessingTimeFieldNumber = 19,
    kMaxInputProcessingTimeFieldNumber = 20,
  };
  // optional float average_frame_time = 1;
  bool has_average_frame_time() const;
  private:
  bool _internal_has_average_frame_time() const;
  public:
  void clear_average_frame_time();
  float average_frame_time() const;
  void set_average_frame_time(float value);
  private:
  float _internal_average_frame_time() const;
  void _internal_set_average_frame_time(float value);
  public:

  // optional float max_frame_time = 2;
  bool has_max_frame_time() const;
  private:
  bool _internal_has_max_frame_time() const;
  public:
  void clear_max_frame_time();
  float max_frame_time() const;
  void set_max_frame_time(float value);
  private:
  float _internal_max_frame_time() const;
  void _internal_set_max_frame_time(float value);
  public:

  // optional float average_compute_time = 3;
  bool has_average_compute_time() const;
  private:
  bool _internal_has_average_compute_time() const;
  public:
  void clear_average_compute_time();
  float average_compute_time() const;
  void set_average_compute_time(float value);
  private:
  float _internal_average_compute_time() const;
  void _internal_set_average_compute_time(float value);
  public:

  // optional float max_compute_time = 4;
  bool has_max_compute_time() const;
  private:
  bool _internal_has_max_compute_time() const;
  public:
  void clear_max_compute_time();
  float max_compute_time() const;
  void set_max_compute_time(float value);
  private:
  float _internal_max_compute_time() const;
  void _internal_set_max_compute_time(float value);
  public:

  // optional float average_client_tick_time = 5;
  bool has_average_client_tick_time() const;
  private:
  bool _internal_has_average_client_tick_time() const;
  public:
  void clear_average_client_tick_time();
  float average_client_tick_time() const;
  void set_average_client_tick_time(float value);
  private:
  float _internal_average_client_tick_time() const;
  void _internal_set_average_client_tick_time(float value);
  public:

  // optional float max_client_tick_time = 6;
  bool has_max_client_tick_time() const;
  private:
  bool _internal_has_max_client_tick_time() const;
  public:
  void clear_max_client_tick_time();
  float max_client_tick_time() const;
  void set_max_client_tick_time(float value);
  private:
  float _internal_max_client_tick_time() const;
  void _internal_set_max_client_tick_time(float value);
  public:

  // optional float average_client_simulate_time = 7;
  bool has_average_client_simulate_time() const;
  private:
  bool _internal_has_average_client_simulate_time() const;
  public:
  void clear_average_client_simulate_time();
  float average_client_simulate_time() const;
  void set_average_client_simulate_time(float value);
  private:
  float _internal_average_client_simulate_time() const;
  void _internal_set_average_client_simulate_time(float value);
  public:

  // optional float max_client_simulate_time = 8;
  bool has_max_client_simulate_time() const;
  private:
  bool _internal_has_max_client_simulate_time() const;
  public:
  void clear_max_client_simulate_time();
  float max_client_simulate_time() const;
  void set_max_client_simulate_time(float value);
  private:
  float _internal_max_client_simulate_time() const;
  void _internal_set_max_client_simulate_time(float value);
  public:

  // optional float average_output_time = 9;
  bool has_average_output_time() const;
  private:
  bool _internal_has_average_output_time() const;
  public:
  void clear_average_output_time();
  float average_output_time() const;
  void set_average_output_time(float value);
  private:
  float _internal_average_output_time() const;
  void _internal_set_average_output_time(float value);
  public:

  // optional float max_output_time = 10;
  bool has_max_output_time() const;
  private:
  bool _internal_has_max_output_time() const;
  public:
  void clear_max_output_time();
  float max_output_time() const;
  void set_max_output_time(float value);
  private:
  float _internal_max_output_time() const;
  void _internal_set_max_output_time(float value);
  public:

  // optional float average_wait_for_rendering_to_complete_time = 11;
  bool has_average_wait_for_rendering_to_complete_time() const;
  private:
  bool _internal_has_average_wait_for_rendering_to_complete_time() const;
  public:
  void clear_average_wait_for_rendering_to_complete_time();
  float average_wait_for_rendering_to_complete_time() const;
  void set_average_wait_for_rendering_to_complete_time(float value);
  private:
  float _internal_average_wait_for_rendering_to_complete_time() const;
  void _internal_set_average_wait_for_rendering_to_complete_time(float value);
  public:

  // optional float max_wait_for_rendering_to_complete_time = 12;
  bool has_max_wait_for_rendering_to_complete_time() const;
  private:
  bool _internal_has_max_wait_for_rendering_to_complete_time() const;
  public:
  void clear_max_wait_for_rendering_to_complete_time();
  float max_wait_for_rendering_to_complete_time() const;
  void set_max_wait_for_rendering_to_complete_time(float value);
  private:
  float _internal_max_wait_for_rendering_to_complete_time() const;
  void _internal_set_max_wait_for_rendering_to_complete_time(float value);
  public:

  // optional float average_swap_time = 13;
  bool has_average_swap_time() const;
  private:
  bool _internal_has_average_swap_time() const;
  public:
  void clear_average_swap_time();
  float average_swap_time() const;
  void set_average_swap_time(float value);
  private:
  float _internal_average_swap_time() const;
  void _internal_set_average_swap_time(float value);
  public:

  // optional float max_swap_time = 14;
  bool has_max_swap_time() const;
  private:
  bool _internal_has_max_swap_time() const;
  public:
  void clear_max_swap_time();
  float max_swap_time() const;
  void set_max_swap_time(float value);
  private:
  float _internal_max_swap_time() const;
  void _internal_set_max_swap_time(float value);
  public:

  // optional float average_frame_update_time = 15;
  bool has_average_frame_update_time() const;
  private:
  bool _internal_has_average_frame_update_time() const;
  public:
  void clear_average_frame_update_time();
  float average_frame_update_time() const;
  void set_average_frame_update_time(float value);
  private:
  float _internal_average_frame_update_time() const;
  void _internal_set_average_frame_update_time(float value);
  public:

  // optional float max_frame_update_time = 16;
  bool has_max_frame_update_time() const;
  private:
  bool _internal_has_max_frame_update_time() const;
  public:
  void clear_max_frame_update_time();
  float max_frame_update_time() const;
  void set_max_frame_update_time(float value);
  private:
  float _internal_max_frame_update_time() const;
  void _internal_set_max_frame_update_time(float value);
  public:

  // optional float average_idle_time = 17;
  bool has_average_idle_time() const;
  private:
  bool _internal_has_average_idle_time() const;
  public:
  void clear_average_idle_time();
  float average_idle_time() const;
  void set_average_idle_time(float value);
  private:
  float _internal_average_idle_time() const;
  void _internal_set_average_idle_time(float value);
  public:

  // optional float max_idle_time = 18;
  bool has_max_idle_time() const;
  private:
  bool _internal_has_max_idle_time() const;
  public:
  void clear_max_idle_time();
  float max_idle_time() const;
  void set_max_idle_time(float value);
  private:
  float _internal_max_idle_time() const;
  void _internal_set_max_idle_time(float value);
  public:

  // optional float average_input_processing_time = 19;
  bool has_average_input_processing_time() const;
  private:
  bool _internal_has_average_input_processing_time() const;
  public:
  void clear_average_input_processing_time();
  float average_input_processing_time() const;
  void set_average_input_processing_time(float value);
  private:
  float _internal_average_input_processing_time() const;
  void _internal_set_average_input_processing_time(float value);
  public:

  // optional float max_input_processing_time = 20;
  bool has_max_input_processing_time() const;
  private:
  bool _internal_has_max_input_processing_time() const;
  public:
  void clear_max_input_processing_time();
  float max_input_processing_time() const;
  void set_max_input_processing_time(float value);
  private:
  float _internal_max_input_processing_time() const;
  void _internal_set_max_input_processing_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PerfReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float average_frame_time_;
    float max_frame_time_;
    float average_compute_time_;
    float max_compute_time_;
    float average_client_tick_time_;
    float max_client_tick_time_;
    float average_client_simulate_time_;
    float max_client_simulate_time_;
    float average_output_time_;
    float max_output_time_;
    float average_wait_for_rendering_to_complete_time_;
    float max_wait_for_rendering_to_complete_time_;
    float average_swap_time_;
    float max_swap_time_;
    float average_frame_update_time_;
    float max_frame_update_time_;
    float average_idle_time_;
    float max_idle_time_;
    float average_input_processing_time_;
    float max_input_processing_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ContextualTips_Subscribe_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ContextualTips_Subscribe_Entry) */ {
 public:
  inline CDOTAClientMsg_ContextualTips_Subscribe_Entry() : CDOTAClientMsg_ContextualTips_Subscribe_Entry(nullptr) {}
  ~CDOTAClientMsg_ContextualTips_Subscribe_Entry() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ContextualTips_Subscribe_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ContextualTips_Subscribe_Entry(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from);
  CDOTAClientMsg_ContextualTips_Subscribe_Entry(CDOTAClientMsg_ContextualTips_Subscribe_Entry&& from) noexcept
    : CDOTAClientMsg_ContextualTips_Subscribe_Entry() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ContextualTips_Subscribe_Entry& operator=(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ContextualTips_Subscribe_Entry& operator=(CDOTAClientMsg_ContextualTips_Subscribe_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ContextualTips_Subscribe_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ContextualTips_Subscribe_Entry* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ContextualTips_Subscribe_Entry*>(
               &_CDOTAClientMsg_ContextualTips_Subscribe_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CDOTAClientMsg_ContextualTips_Subscribe_Entry& a, CDOTAClientMsg_ContextualTips_Subscribe_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ContextualTips_Subscribe_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ContextualTips_Subscribe_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ContextualTips_Subscribe_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ContextualTips_Subscribe_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ContextualTips_Subscribe_Entry& from) {
    CDOTAClientMsg_ContextualTips_Subscribe_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ContextualTips_Subscribe_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ContextualTips_Subscribe_Entry";
  }
  protected:
  explicit CDOTAClientMsg_ContextualTips_Subscribe_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantsSeenFieldNumber = 4,
    kUnsubscribeFieldNumber = 1,
    kTipIdFieldNumber = 2,
    kPriorDisplayCountFieldNumber = 3,
  };
  // repeated int32 variants_seen = 4;
  int variants_seen_size() const;
  private:
  int _internal_variants_seen_size() const;
  public:
  void clear_variants_seen();
  private:
  int32_t _internal_variants_seen(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_variants_seen() const;
  void _internal_add_variants_seen(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_variants_seen();
  public:
  int32_t variants_seen(int index) const;
  void set_variants_seen(int index, int32_t value);
  void add_variants_seen(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      variants_seen() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_variants_seen();

  // optional bool unsubscribe = 1;
  bool has_unsubscribe() const;
  private:
  bool _internal_has_unsubscribe() const;
  public:
  void clear_unsubscribe();
  bool unsubscribe() const;
  void set_unsubscribe(bool value);
  private:
  bool _internal_unsubscribe() const;
  void _internal_set_unsubscribe(bool value);
  public:

  // optional int32 tip_id = 2;
  bool has_tip_id() const;
  private:
  bool _internal_has_tip_id() const;
  public:
  void clear_tip_id();
  int32_t tip_id() const;
  void set_tip_id(int32_t value);
  private:
  int32_t _internal_tip_id() const;
  void _internal_set_tip_id(int32_t value);
  public:

  // optional int32 prior_display_count = 3;
  bool has_prior_display_count() const;
  private:
  bool _internal_has_prior_display_count() const;
  public:
  void clear_prior_display_count();
  int32_t prior_display_count() const;
  void set_prior_display_count(int32_t value);
  private:
  int32_t _internal_prior_display_count() const;
  void _internal_set_prior_display_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ContextualTips_Subscribe_Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > variants_seen_;
    bool unsubscribe_;
    int32_t tip_id_;
    int32_t prior_display_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ContextualTips_Subscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ContextualTips_Subscribe) */ {
 public:
  inline CDOTAClientMsg_ContextualTips_Subscribe() : CDOTAClientMsg_ContextualTips_Subscribe(nullptr) {}
  ~CDOTAClientMsg_ContextualTips_Subscribe() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ContextualTips_Subscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ContextualTips_Subscribe(const CDOTAClientMsg_ContextualTips_Subscribe& from);
  CDOTAClientMsg_ContextualTips_Subscribe(CDOTAClientMsg_ContextualTips_Subscribe&& from) noexcept
    : CDOTAClientMsg_ContextualTips_Subscribe() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ContextualTips_Subscribe& operator=(const CDOTAClientMsg_ContextualTips_Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ContextualTips_Subscribe& operator=(CDOTAClientMsg_ContextualTips_Subscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ContextualTips_Subscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ContextualTips_Subscribe* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ContextualTips_Subscribe*>(
               &_CDOTAClientMsg_ContextualTips_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CDOTAClientMsg_ContextualTips_Subscribe& a, CDOTAClientMsg_ContextualTips_Subscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ContextualTips_Subscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ContextualTips_Subscribe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ContextualTips_Subscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ContextualTips_Subscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ContextualTips_Subscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ContextualTips_Subscribe& from) {
    CDOTAClientMsg_ContextualTips_Subscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ContextualTips_Subscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ContextualTips_Subscribe";
  }
  protected:
  explicit CDOTAClientMsg_ContextualTips_Subscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTipsFieldNumber = 1,
  };
  // repeated .CDOTAClientMsg_ContextualTips_Subscribe_Entry tips = 1;
  int tips_size() const;
  private:
  int _internal_tips_size() const;
  public:
  void clear_tips();
  ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* mutable_tips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >*
      mutable_tips();
  private:
  const ::CDOTAClientMsg_ContextualTips_Subscribe_Entry& _internal_tips(int index) const;
  ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* _internal_add_tips();
  public:
  const ::CDOTAClientMsg_ContextualTips_Subscribe_Entry& tips(int index) const;
  ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* add_tips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >&
      tips() const;

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ContextualTips_Subscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry > tips_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChatMessage) */ {
 public:
  inline CDOTAClientMsg_ChatMessage() : CDOTAClientMsg_ChatMessage(nullptr) {}
  ~CDOTAClientMsg_ChatMessage() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChatMessage(const CDOTAClientMsg_ChatMessage& from);
  CDOTAClientMsg_ChatMessage(CDOTAClientMsg_ChatMessage&& from) noexcept
    : CDOTAClientMsg_ChatMessage() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChatMessage& operator=(const CDOTAClientMsg_ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChatMessage& operator=(CDOTAClientMsg_ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChatMessage* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChatMessage*>(
               &_CDOTAClientMsg_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CDOTAClientMsg_ChatMessage& a, CDOTAClientMsg_ChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChatMessage& from) {
    CDOTAClientMsg_ChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChatMessage";
  }
  protected:
  explicit CDOTAClientMsg_ChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageTextFieldNumber = 2,
    kChannelTypeFieldNumber = 1,
  };
  // optional string message_text = 2;
  bool has_message_text() const;
  private:
  bool _internal_has_message_text() const;
  public:
  void clear_message_text();
  const std::string& message_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_text();
  PROTOBUF_NODISCARD std::string* release_message_text();
  void set_allocated_message_text(std::string* message_text);
  private:
  const std::string& _internal_message_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_text(const std::string& value);
  std::string* _internal_mutable_message_text();
  public:

  // optional uint32 channel_type = 1;
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  uint32_t channel_type() const;
  void set_channel_type(uint32_t value);
  private:
  uint32_t _internal_channel_type() const;
  void _internal_set_channel_type(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_text_;
    uint32_t channel_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_DuelAccepted final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_DuelAccepted) */ {
 public:
  inline CDOTAClientMsg_DuelAccepted() : CDOTAClientMsg_DuelAccepted(nullptr) {}
  ~CDOTAClientMsg_DuelAccepted() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_DuelAccepted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_DuelAccepted(const CDOTAClientMsg_DuelAccepted& from);
  CDOTAClientMsg_DuelAccepted(CDOTAClientMsg_DuelAccepted&& from) noexcept
    : CDOTAClientMsg_DuelAccepted() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_DuelAccepted& operator=(const CDOTAClientMsg_DuelAccepted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_DuelAccepted& operator=(CDOTAClientMsg_DuelAccepted&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_DuelAccepted& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_DuelAccepted* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_DuelAccepted*>(
               &_CDOTAClientMsg_DuelAccepted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CDOTAClientMsg_DuelAccepted& a, CDOTAClientMsg_DuelAccepted& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_DuelAccepted* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_DuelAccepted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_DuelAccepted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_DuelAccepted>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_DuelAccepted& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_DuelAccepted& from) {
    CDOTAClientMsg_DuelAccepted::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_DuelAccepted* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_DuelAccepted";
  }
  protected:
  explicit CDOTAClientMsg_DuelAccepted(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengerPlayerIdFieldNumber = 1,
    kAccepterPlayerIdFieldNumber = 2,
  };
  // optional int32 challenger_player_id = 1 [default = -1];
  bool has_challenger_player_id() const;
  private:
  bool _internal_has_challenger_player_id() const;
  public:
  void clear_challenger_player_id();
  int32_t challenger_player_id() const;
  void set_challenger_player_id(int32_t value);
  private:
  int32_t _internal_challenger_player_id() const;
  void _internal_set_challenger_player_id(int32_t value);
  public:

  // optional int32 accepter_player_id = 2 [default = -1];
  bool has_accepter_player_id() const;
  private:
  bool _internal_has_accepter_player_id() const;
  public:
  void clear_accepter_player_id();
  int32_t accepter_player_id() const;
  void set_accepter_player_id(int32_t value);
  private:
  int32_t _internal_accepter_player_id() const;
  void _internal_set_accepter_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_DuelAccepted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t challenger_player_id_;
    int32_t accepter_player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_ChooseNeutralItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_ChooseNeutralItem) */ {
 public:
  inline CDOTAClientMsg_ChooseNeutralItem() : CDOTAClientMsg_ChooseNeutralItem(nullptr) {}
  ~CDOTAClientMsg_ChooseNeutralItem() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_ChooseNeutralItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_ChooseNeutralItem(const CDOTAClientMsg_ChooseNeutralItem& from);
  CDOTAClientMsg_ChooseNeutralItem(CDOTAClientMsg_ChooseNeutralItem&& from) noexcept
    : CDOTAClientMsg_ChooseNeutralItem() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_ChooseNeutralItem& operator=(const CDOTAClientMsg_ChooseNeutralItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_ChooseNeutralItem& operator=(CDOTAClientMsg_ChooseNeutralItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_ChooseNeutralItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_ChooseNeutralItem* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_ChooseNeutralItem*>(
               &_CDOTAClientMsg_ChooseNeutralItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CDOTAClientMsg_ChooseNeutralItem& a, CDOTAClientMsg_ChooseNeutralItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_ChooseNeutralItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_ChooseNeutralItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_ChooseNeutralItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_ChooseNeutralItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_ChooseNeutralItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_ChooseNeutralItem& from) {
    CDOTAClientMsg_ChooseNeutralItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_ChooseNeutralItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_ChooseNeutralItem";
  }
  protected:
  explicit CDOTAClientMsg_ChooseNeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeutralItemIndexFieldNumber = 1,
    kSlotIndexFieldNumber = 3,
    kTargetEntindexFieldNumber = 2,
  };
  // optional int32 neutral_item_index = 1;
  bool has_neutral_item_index() const;
  private:
  bool _internal_has_neutral_item_index() const;
  public:
  void clear_neutral_item_index();
  int32_t neutral_item_index() const;
  void set_neutral_item_index(int32_t value);
  private:
  int32_t _internal_neutral_item_index() const;
  void _internal_set_neutral_item_index(int32_t value);
  public:

  // optional int32 slot_index = 3;
  bool has_slot_index() const;
  private:
  bool _internal_has_slot_index() const;
  public:
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // optional int32 target_entindex = 2 [default = -1];
  bool has_target_entindex() const;
  private:
  bool _internal_has_target_entindex() const;
  public:
  void clear_target_entindex();
  int32_t target_entindex() const;
  void set_target_entindex(int32_t value);
  private:
  int32_t _internal_target_entindex() const;
  void _internal_set_target_entindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_ChooseNeutralItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t neutral_item_index_;
    int32_t slot_index_;
    int32_t target_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerDraftPick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerDraftPick) */ {
 public:
  inline CDOTAClientMsg_PlayerDraftPick() : CDOTAClientMsg_PlayerDraftPick(nullptr) {}
  ~CDOTAClientMsg_PlayerDraftPick() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerDraftPick(const CDOTAClientMsg_PlayerDraftPick& from);
  CDOTAClientMsg_PlayerDraftPick(CDOTAClientMsg_PlayerDraftPick&& from) noexcept
    : CDOTAClientMsg_PlayerDraftPick() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerDraftPick& operator=(const CDOTAClientMsg_PlayerDraftPick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerDraftPick& operator=(CDOTAClientMsg_PlayerDraftPick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerDraftPick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerDraftPick* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerDraftPick*>(
               &_CDOTAClientMsg_PlayerDraftPick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CDOTAClientMsg_PlayerDraftPick& a, CDOTAClientMsg_PlayerDraftPick& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerDraftPick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerDraftPick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerDraftPick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerDraftPick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerDraftPick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerDraftPick& from) {
    CDOTAClientMsg_PlayerDraftPick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerDraftPick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerDraftPick";
  }
  protected:
  explicit CDOTAClientMsg_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerDraftPick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerDraftSuggest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerDraftSuggest) */ {
 public:
  inline CDOTAClientMsg_PlayerDraftSuggest() : CDOTAClientMsg_PlayerDraftSuggest(nullptr) {}
  ~CDOTAClientMsg_PlayerDraftSuggest() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerDraftSuggest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerDraftSuggest(const CDOTAClientMsg_PlayerDraftSuggest& from);
  CDOTAClientMsg_PlayerDraftSuggest(CDOTAClientMsg_PlayerDraftSuggest&& from) noexcept
    : CDOTAClientMsg_PlayerDraftSuggest() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerDraftSuggest& operator=(const CDOTAClientMsg_PlayerDraftSuggest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerDraftSuggest& operator=(CDOTAClientMsg_PlayerDraftSuggest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerDraftSuggest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerDraftSuggest* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerDraftSuggest*>(
               &_CDOTAClientMsg_PlayerDraftSuggest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CDOTAClientMsg_PlayerDraftSuggest& a, CDOTAClientMsg_PlayerDraftSuggest& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerDraftSuggest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerDraftSuggest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerDraftSuggest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerDraftSuggest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerDraftSuggest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerDraftSuggest& from) {
    CDOTAClientMsg_PlayerDraftSuggest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerDraftSuggest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerDraftSuggest";
  }
  protected:
  explicit CDOTAClientMsg_PlayerDraftSuggest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerDraftSuggest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerDraftPreferRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerDraftPreferRole) */ {
 public:
  inline CDOTAClientMsg_PlayerDraftPreferRole() : CDOTAClientMsg_PlayerDraftPreferRole(nullptr) {}
  ~CDOTAClientMsg_PlayerDraftPreferRole() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerDraftPreferRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerDraftPreferRole(const CDOTAClientMsg_PlayerDraftPreferRole& from);
  CDOTAClientMsg_PlayerDraftPreferRole(CDOTAClientMsg_PlayerDraftPreferRole&& from) noexcept
    : CDOTAClientMsg_PlayerDraftPreferRole() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerDraftPreferRole& operator=(const CDOTAClientMsg_PlayerDraftPreferRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerDraftPreferRole& operator=(CDOTAClientMsg_PlayerDraftPreferRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerDraftPreferRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerDraftPreferRole* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerDraftPreferRole*>(
               &_CDOTAClientMsg_PlayerDraftPreferRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CDOTAClientMsg_PlayerDraftPreferRole& a, CDOTAClientMsg_PlayerDraftPreferRole& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerDraftPreferRole* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerDraftPreferRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerDraftPreferRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerDraftPreferRole>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerDraftPreferRole& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerDraftPreferRole& from) {
    CDOTAClientMsg_PlayerDraftPreferRole::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerDraftPreferRole* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerDraftPreferRole";
  }
  protected:
  explicit CDOTAClientMsg_PlayerDraftPreferRole(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdxFieldNumber = 1,
    kDesiredFieldNumber = 2,
  };
  // optional int32 role_idx = 1;
  bool has_role_idx() const;
  private:
  bool _internal_has_role_idx() const;
  public:
  void clear_role_idx();
  int32_t role_idx() const;
  void set_role_idx(int32_t value);
  private:
  int32_t _internal_role_idx() const;
  void _internal_set_role_idx(int32_t value);
  public:

  // optional bool desired = 2;
  bool has_desired() const;
  private:
  bool _internal_has_desired() const;
  public:
  void clear_desired();
  bool desired() const;
  void set_desired(bool value);
  private:
  bool _internal_desired() const;
  void _internal_set_desired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerDraftPreferRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t role_idx_;
    bool desired_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_PlayerDraftPreferTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_PlayerDraftPreferTeam) */ {
 public:
  inline CDOTAClientMsg_PlayerDraftPreferTeam() : CDOTAClientMsg_PlayerDraftPreferTeam(nullptr) {}
  ~CDOTAClientMsg_PlayerDraftPreferTeam() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_PlayerDraftPreferTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_PlayerDraftPreferTeam(const CDOTAClientMsg_PlayerDraftPreferTeam& from);
  CDOTAClientMsg_PlayerDraftPreferTeam(CDOTAClientMsg_PlayerDraftPreferTeam&& from) noexcept
    : CDOTAClientMsg_PlayerDraftPreferTeam() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_PlayerDraftPreferTeam& operator=(const CDOTAClientMsg_PlayerDraftPreferTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_PlayerDraftPreferTeam& operator=(CDOTAClientMsg_PlayerDraftPreferTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_PlayerDraftPreferTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_PlayerDraftPreferTeam* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_PlayerDraftPreferTeam*>(
               &_CDOTAClientMsg_PlayerDraftPreferTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CDOTAClientMsg_PlayerDraftPreferTeam& a, CDOTAClientMsg_PlayerDraftPreferTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_PlayerDraftPreferTeam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_PlayerDraftPreferTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_PlayerDraftPreferTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_PlayerDraftPreferTeam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_PlayerDraftPreferTeam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_PlayerDraftPreferTeam& from) {
    CDOTAClientMsg_PlayerDraftPreferTeam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_PlayerDraftPreferTeam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_PlayerDraftPreferTeam";
  }
  protected:
  explicit CDOTAClientMsg_PlayerDraftPreferTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
  };
  // optional int32 team = 1;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  int32_t team() const;
  void set_team(int32_t value);
  private:
  int32_t _internal_team() const;
  void _internal_set_team(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_PlayerDraftPreferTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTAClientMsg_AbilityAlert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTAClientMsg_AbilityAlert) */ {
 public:
  inline CDOTAClientMsg_AbilityAlert() : CDOTAClientMsg_AbilityAlert(nullptr) {}
  ~CDOTAClientMsg_AbilityAlert() override;
  explicit PROTOBUF_CONSTEXPR CDOTAClientMsg_AbilityAlert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTAClientMsg_AbilityAlert(const CDOTAClientMsg_AbilityAlert& from);
  CDOTAClientMsg_AbilityAlert(CDOTAClientMsg_AbilityAlert&& from) noexcept
    : CDOTAClientMsg_AbilityAlert() {
    *this = ::std::move(from);
  }

  inline CDOTAClientMsg_AbilityAlert& operator=(const CDOTAClientMsg_AbilityAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTAClientMsg_AbilityAlert& operator=(CDOTAClientMsg_AbilityAlert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDOTAClientMsg_AbilityAlert& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTAClientMsg_AbilityAlert* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientMsg_AbilityAlert*>(
               &_CDOTAClientMsg_AbilityAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CDOTAClientMsg_AbilityAlert& a, CDOTAClientMsg_AbilityAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTAClientMsg_AbilityAlert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTAClientMsg_AbilityAlert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDOTAClientMsg_AbilityAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDOTAClientMsg_AbilityAlert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CDOTAClientMsg_AbilityAlert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CDOTAClientMsg_AbilityAlert& from) {
    CDOTAClientMsg_AbilityAlert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientMsg_AbilityAlert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTAClientMsg_AbilityAlert";
  }
  protected:
  explicit CDOTAClientMsg_AbilityAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCtrlHeldFieldNumber = 2,
    kAbilityEntindexFieldNumber = 1,
  };
  // optional bool ctrl_held = 2;
  bool has_ctrl_held() const;
  private:
  bool _internal_has_ctrl_held() const;
  public:
  void clear_ctrl_held();
  bool ctrl_held() const;
  void set_ctrl_held(bool value);
  private:
  bool _internal_ctrl_held() const;
  void _internal_set_ctrl_held(bool value);
  public:

  // optional uint32 ability_entindex = 1 [default = 16777215];
  bool has_ability_entindex() const;
  private:
  bool _internal_has_ability_entindex() const;
  public:
  void clear_ability_entindex();
  uint32_t ability_entindex() const;
  void set_ability_entindex(uint32_t value);
  private:
  uint32_t _internal_ability_entindex() const;
  void _internal_set_ability_entindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTAClientMsg_AbilityAlert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool ctrl_held_;
    uint32_t ability_entindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fclientmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTAClientMsg_MapPing

// optional .CDOTAMsg_LocationPing location_ping = 1;
inline bool CDOTAClientMsg_MapPing::_internal_has_location_ping() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.location_ping_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_MapPing::has_location_ping() const {
  return _internal_has_location_ping();
}
inline const ::CDOTAMsg_LocationPing& CDOTAClientMsg_MapPing::_internal_location_ping() const {
  const ::CDOTAMsg_LocationPing* p = _impl_.location_ping_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_LocationPing&>(
      ::_CDOTAMsg_LocationPing_default_instance_);
}
inline const ::CDOTAMsg_LocationPing& CDOTAClientMsg_MapPing::location_ping() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MapPing.location_ping)
  return _internal_location_ping();
}
inline void CDOTAClientMsg_MapPing::unsafe_arena_set_allocated_location_ping(
    ::CDOTAMsg_LocationPing* location_ping) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_ping_);
  }
  _impl_.location_ping_ = location_ping;
  if (location_ping) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_MapPing.location_ping)
}
inline ::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::release_location_ping() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_LocationPing* temp = _impl_.location_ping_;
  _impl_.location_ping_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::unsafe_arena_release_location_ping() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_MapPing.location_ping)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_LocationPing* temp = _impl_.location_ping_;
  _impl_.location_ping_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::_internal_mutable_location_ping() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.location_ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_LocationPing>(GetArenaForAllocation());
    _impl_.location_ping_ = p;
  }
  return _impl_.location_ping_;
}
inline ::CDOTAMsg_LocationPing* CDOTAClientMsg_MapPing::mutable_location_ping() {
  ::CDOTAMsg_LocationPing* _msg = _internal_mutable_location_ping();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_MapPing.location_ping)
  return _msg;
}
inline void CDOTAClientMsg_MapPing::set_allocated_location_ping(::CDOTAMsg_LocationPing* location_ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_ping_);
  }
  if (location_ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_ping));
    if (message_arena != submessage_arena) {
      location_ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_ping, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.location_ping_ = location_ping;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_MapPing.location_ping)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ItemAlert

// optional .CDOTAMsg_ItemAlert item_alert = 1;
inline bool CDOTAClientMsg_ItemAlert::_internal_has_item_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_alert_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_ItemAlert::has_item_alert() const {
  return _internal_has_item_alert();
}
inline const ::CDOTAMsg_ItemAlert& CDOTAClientMsg_ItemAlert::_internal_item_alert() const {
  const ::CDOTAMsg_ItemAlert* p = _impl_.item_alert_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_ItemAlert&>(
      ::_CDOTAMsg_ItemAlert_default_instance_);
}
inline const ::CDOTAMsg_ItemAlert& CDOTAClientMsg_ItemAlert::item_alert() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ItemAlert.item_alert)
  return _internal_item_alert();
}
inline void CDOTAClientMsg_ItemAlert::unsafe_arena_set_allocated_item_alert(
    ::CDOTAMsg_ItemAlert* item_alert) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_alert_);
  }
  _impl_.item_alert_ = item_alert;
  if (item_alert) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_ItemAlert.item_alert)
}
inline ::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::release_item_alert() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_ItemAlert* temp = _impl_.item_alert_;
  _impl_.item_alert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::unsafe_arena_release_item_alert() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_ItemAlert.item_alert)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_ItemAlert* temp = _impl_.item_alert_;
  _impl_.item_alert_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::_internal_mutable_item_alert() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.item_alert_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_ItemAlert>(GetArenaForAllocation());
    _impl_.item_alert_ = p;
  }
  return _impl_.item_alert_;
}
inline ::CDOTAMsg_ItemAlert* CDOTAClientMsg_ItemAlert::mutable_item_alert() {
  ::CDOTAMsg_ItemAlert* _msg = _internal_mutable_item_alert();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_ItemAlert.item_alert)
  return _msg;
}
inline void CDOTAClientMsg_ItemAlert::set_allocated_item_alert(::CDOTAMsg_ItemAlert* item_alert) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_alert_);
  }
  if (item_alert) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_alert));
    if (message_arena != submessage_arena) {
      item_alert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_alert, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.item_alert_ = item_alert;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_ItemAlert.item_alert)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EnemyItemAlert

// optional int32 item_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_EnemyItemAlert::_internal_has_item_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EnemyItemAlert::has_item_entindex() const {
  return _internal_has_item_entindex();
}
inline void CDOTAClientMsg_EnemyItemAlert::clear_item_entindex() {
  _impl_.item_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::_internal_item_entindex() const {
  return _impl_.item_entindex_;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::item_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.item_entindex)
  return _internal_item_entindex();
}
inline void CDOTAClientMsg_EnemyItemAlert::_internal_set_item_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_entindex_ = value;
}
inline void CDOTAClientMsg_EnemyItemAlert::set_item_entindex(int32_t value) {
  _internal_set_item_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.item_entindex)
}

// optional int32 rune_type = 2 [default = -1];
inline bool CDOTAClientMsg_EnemyItemAlert::_internal_has_rune_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EnemyItemAlert::has_rune_type() const {
  return _internal_has_rune_type();
}
inline void CDOTAClientMsg_EnemyItemAlert::clear_rune_type() {
  _impl_.rune_type_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::_internal_rune_type() const {
  return _impl_.rune_type_;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::rune_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.rune_type)
  return _internal_rune_type();
}
inline void CDOTAClientMsg_EnemyItemAlert::_internal_set_rune_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rune_type_ = value;
}
inline void CDOTAClientMsg_EnemyItemAlert::set_rune_type(int32_t value) {
  _internal_set_rune_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.rune_type)
}

// optional int32 item_level = 3 [default = -1];
inline bool CDOTAClientMsg_EnemyItemAlert::_internal_has_item_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EnemyItemAlert::has_item_level() const {
  return _internal_has_item_level();
}
inline void CDOTAClientMsg_EnemyItemAlert::clear_item_level() {
  _impl_.item_level_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::_internal_item_level() const {
  return _impl_.item_level_;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::item_level() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.item_level)
  return _internal_item_level();
}
inline void CDOTAClientMsg_EnemyItemAlert::_internal_set_item_level(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.item_level_ = value;
}
inline void CDOTAClientMsg_EnemyItemAlert::set_item_level(int32_t value) {
  _internal_set_item_level(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.item_level)
}

// optional int32 primary_charges = 4 [default = -1];
inline bool CDOTAClientMsg_EnemyItemAlert::_internal_has_primary_charges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EnemyItemAlert::has_primary_charges() const {
  return _internal_has_primary_charges();
}
inline void CDOTAClientMsg_EnemyItemAlert::clear_primary_charges() {
  _impl_.primary_charges_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::_internal_primary_charges() const {
  return _impl_.primary_charges_;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::primary_charges() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.primary_charges)
  return _internal_primary_charges();
}
inline void CDOTAClientMsg_EnemyItemAlert::_internal_set_primary_charges(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.primary_charges_ = value;
}
inline void CDOTAClientMsg_EnemyItemAlert::set_primary_charges(int32_t value) {
  _internal_set_primary_charges(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.primary_charges)
}

// optional int32 secondary_charges = 5 [default = -1];
inline bool CDOTAClientMsg_EnemyItemAlert::_internal_has_secondary_charges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EnemyItemAlert::has_secondary_charges() const {
  return _internal_has_secondary_charges();
}
inline void CDOTAClientMsg_EnemyItemAlert::clear_secondary_charges() {
  _impl_.secondary_charges_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::_internal_secondary_charges() const {
  return _impl_.secondary_charges_;
}
inline int32_t CDOTAClientMsg_EnemyItemAlert::secondary_charges() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EnemyItemAlert.secondary_charges)
  return _internal_secondary_charges();
}
inline void CDOTAClientMsg_EnemyItemAlert::_internal_set_secondary_charges(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.secondary_charges_ = value;
}
inline void CDOTAClientMsg_EnemyItemAlert::set_secondary_charges(int32_t value) {
  _internal_set_secondary_charges(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EnemyItemAlert.secondary_charges)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ModifierAlert

// optional int32 buff_internal_index = 1;
inline bool CDOTAClientMsg_ModifierAlert::_internal_has_buff_internal_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ModifierAlert::has_buff_internal_index() const {
  return _internal_has_buff_internal_index();
}
inline void CDOTAClientMsg_ModifierAlert::clear_buff_internal_index() {
  _impl_.buff_internal_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_ModifierAlert::_internal_buff_internal_index() const {
  return _impl_.buff_internal_index_;
}
inline int32_t CDOTAClientMsg_ModifierAlert::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ModifierAlert.buff_internal_index)
  return _internal_buff_internal_index();
}
inline void CDOTAClientMsg_ModifierAlert::_internal_set_buff_internal_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buff_internal_index_ = value;
}
inline void CDOTAClientMsg_ModifierAlert::set_buff_internal_index(int32_t value) {
  _internal_set_buff_internal_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ModifierAlert.buff_internal_index)
}

// optional int32 target_entindex = 2 [default = -1];
inline bool CDOTAClientMsg_ModifierAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ModifierAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_ModifierAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_ModifierAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_ModifierAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ModifierAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_ModifierAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_ModifierAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ModifierAlert.target_entindex)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ClickedBuff

// optional int32 buff_internal_index = 1;
inline bool CDOTAClientMsg_ClickedBuff::_internal_has_buff_internal_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ClickedBuff::has_buff_internal_index() const {
  return _internal_has_buff_internal_index();
}
inline void CDOTAClientMsg_ClickedBuff::clear_buff_internal_index() {
  _impl_.buff_internal_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_ClickedBuff::_internal_buff_internal_index() const {
  return _impl_.buff_internal_index_;
}
inline int32_t CDOTAClientMsg_ClickedBuff::buff_internal_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ClickedBuff.buff_internal_index)
  return _internal_buff_internal_index();
}
inline void CDOTAClientMsg_ClickedBuff::_internal_set_buff_internal_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buff_internal_index_ = value;
}
inline void CDOTAClientMsg_ClickedBuff::set_buff_internal_index(int32_t value) {
  _internal_set_buff_internal_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ClickedBuff.buff_internal_index)
}

// optional int32 target_entindex = 2 [default = -1];
inline bool CDOTAClientMsg_ClickedBuff::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ClickedBuff::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_ClickedBuff::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_ClickedBuff::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_ClickedBuff::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ClickedBuff.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_ClickedBuff::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_ClickedBuff::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ClickedBuff.target_entindex)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_HPManaAlert

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_HPManaAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_HPManaAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_HPManaAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_HPManaAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_HPManaAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HPManaAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_HPManaAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_HPManaAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HPManaAlert.target_entindex)
}

// optional bool show_raw_values = 2;
inline bool CDOTAClientMsg_HPManaAlert::_internal_has_show_raw_values() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_HPManaAlert::has_show_raw_values() const {
  return _internal_has_show_raw_values();
}
inline void CDOTAClientMsg_HPManaAlert::clear_show_raw_values() {
  _impl_.show_raw_values_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_HPManaAlert::_internal_show_raw_values() const {
  return _impl_.show_raw_values_;
}
inline bool CDOTAClientMsg_HPManaAlert::show_raw_values() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HPManaAlert.show_raw_values)
  return _internal_show_raw_values();
}
inline void CDOTAClientMsg_HPManaAlert::_internal_set_show_raw_values(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.show_raw_values_ = value;
}
inline void CDOTAClientMsg_HPManaAlert::set_show_raw_values(bool value) {
  _internal_set_show_raw_values(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HPManaAlert.show_raw_values)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_NeutralCampAlert

// optional int32 spawner_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_NeutralCampAlert::_internal_has_spawner_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_NeutralCampAlert::has_spawner_entindex() const {
  return _internal_has_spawner_entindex();
}
inline void CDOTAClientMsg_NeutralCampAlert::clear_spawner_entindex() {
  _impl_.spawner_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_NeutralCampAlert::_internal_spawner_entindex() const {
  return _impl_.spawner_entindex_;
}
inline int32_t CDOTAClientMsg_NeutralCampAlert::spawner_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_NeutralCampAlert.spawner_entindex)
  return _internal_spawner_entindex();
}
inline void CDOTAClientMsg_NeutralCampAlert::_internal_set_spawner_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.spawner_entindex_ = value;
}
inline void CDOTAClientMsg_NeutralCampAlert::set_spawner_entindex(int32_t value) {
  _internal_set_spawner_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_NeutralCampAlert.spawner_entindex)
}

// optional int32 unit_entindex = 2 [default = -1];
inline bool CDOTAClientMsg_NeutralCampAlert::_internal_has_unit_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_NeutralCampAlert::has_unit_entindex() const {
  return _internal_has_unit_entindex();
}
inline void CDOTAClientMsg_NeutralCampAlert::clear_unit_entindex() {
  _impl_.unit_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_NeutralCampAlert::_internal_unit_entindex() const {
  return _impl_.unit_entindex_;
}
inline int32_t CDOTAClientMsg_NeutralCampAlert::unit_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_NeutralCampAlert.unit_entindex)
  return _internal_unit_entindex();
}
inline void CDOTAClientMsg_NeutralCampAlert::_internal_set_unit_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_entindex_ = value;
}
inline void CDOTAClientMsg_NeutralCampAlert::set_unit_entindex(int32_t value) {
  _internal_set_unit_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_NeutralCampAlert.unit_entindex)
}

// optional bool stack_request = 3;
inline bool CDOTAClientMsg_NeutralCampAlert::_internal_has_stack_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_NeutralCampAlert::has_stack_request() const {
  return _internal_has_stack_request();
}
inline void CDOTAClientMsg_NeutralCampAlert::clear_stack_request() {
  _impl_.stack_request_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_NeutralCampAlert::_internal_stack_request() const {
  return _impl_.stack_request_;
}
inline bool CDOTAClientMsg_NeutralCampAlert::stack_request() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_NeutralCampAlert.stack_request)
  return _internal_stack_request();
}
inline void CDOTAClientMsg_NeutralCampAlert::_internal_set_stack_request(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.stack_request_ = value;
}
inline void CDOTAClientMsg_NeutralCampAlert::set_stack_request(bool value) {
  _internal_set_stack_request(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_NeutralCampAlert.stack_request)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_GlyphAlert

// optional bool negative = 1;
inline bool CDOTAClientMsg_GlyphAlert::_internal_has_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GlyphAlert::has_negative() const {
  return _internal_has_negative();
}
inline void CDOTAClientMsg_GlyphAlert::clear_negative() {
  _impl_.negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_GlyphAlert::_internal_negative() const {
  return _impl_.negative_;
}
inline bool CDOTAClientMsg_GlyphAlert::negative() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GlyphAlert.negative)
  return _internal_negative();
}
inline void CDOTAClientMsg_GlyphAlert::_internal_set_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.negative_ = value;
}
inline void CDOTAClientMsg_GlyphAlert::set_negative(bool value) {
  _internal_set_negative(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GlyphAlert.negative)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RadarAlert

// optional bool negative = 1;
inline bool CDOTAClientMsg_RadarAlert::_internal_has_negative() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RadarAlert::has_negative() const {
  return _internal_has_negative();
}
inline void CDOTAClientMsg_RadarAlert::clear_negative() {
  _impl_.negative_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_RadarAlert::_internal_negative() const {
  return _impl_.negative_;
}
inline bool CDOTAClientMsg_RadarAlert::negative() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RadarAlert.negative)
  return _internal_negative();
}
inline void CDOTAClientMsg_RadarAlert::_internal_set_negative(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.negative_ = value;
}
inline void CDOTAClientMsg_RadarAlert::set_negative(bool value) {
  _internal_set_negative(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RadarAlert.negative)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_MapLine

// optional .CDOTAMsg_MapLine mapline = 1;
inline bool CDOTAClientMsg_MapLine::_internal_has_mapline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mapline_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_MapLine::has_mapline() const {
  return _internal_has_mapline();
}
inline const ::CDOTAMsg_MapLine& CDOTAClientMsg_MapLine::_internal_mapline() const {
  const ::CDOTAMsg_MapLine* p = _impl_.mapline_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_MapLine&>(
      ::_CDOTAMsg_MapLine_default_instance_);
}
inline const ::CDOTAMsg_MapLine& CDOTAClientMsg_MapLine::mapline() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MapLine.mapline)
  return _internal_mapline();
}
inline void CDOTAClientMsg_MapLine::unsafe_arena_set_allocated_mapline(
    ::CDOTAMsg_MapLine* mapline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapline_);
  }
  _impl_.mapline_ = mapline;
  if (mapline) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_MapLine.mapline)
}
inline ::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::release_mapline() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_MapLine* temp = _impl_.mapline_;
  _impl_.mapline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::unsafe_arena_release_mapline() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_MapLine.mapline)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_MapLine* temp = _impl_.mapline_;
  _impl_.mapline_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::_internal_mutable_mapline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mapline_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_MapLine>(GetArenaForAllocation());
    _impl_.mapline_ = p;
  }
  return _impl_.mapline_;
}
inline ::CDOTAMsg_MapLine* CDOTAClientMsg_MapLine::mutable_mapline() {
  ::CDOTAMsg_MapLine* _msg = _internal_mutable_mapline();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_MapLine.mapline)
  return _msg;
}
inline void CDOTAClientMsg_MapLine::set_allocated_mapline(::CDOTAMsg_MapLine* mapline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mapline_);
  }
  if (mapline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapline));
    if (message_arena != submessage_arena) {
      mapline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapline, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.mapline_ = mapline;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_MapLine.mapline)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AspectRatio

// optional float ratio = 1;
inline bool CDOTAClientMsg_AspectRatio::_internal_has_ratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AspectRatio::has_ratio() const {
  return _internal_has_ratio();
}
inline void CDOTAClientMsg_AspectRatio::clear_ratio() {
  _impl_.ratio_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CDOTAClientMsg_AspectRatio::_internal_ratio() const {
  return _impl_.ratio_;
}
inline float CDOTAClientMsg_AspectRatio::ratio() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AspectRatio.ratio)
  return _internal_ratio();
}
inline void CDOTAClientMsg_AspectRatio::_internal_set_ratio(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ratio_ = value;
}
inline void CDOTAClientMsg_AspectRatio::set_ratio(float value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AspectRatio.ratio)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_UnitsAutoAttackMode

// optional .CDOTAClientMsg_UnitsAutoAttackMode.EMode mode = 1 [default = INVALID];
inline bool CDOTAClientMsg_UnitsAutoAttackMode::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_UnitsAutoAttackMode::has_mode() const {
  return _internal_has_mode();
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::clear_mode() {
  _impl_.mode_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::_internal_mode() const {
  return static_cast< ::CDOTAClientMsg_UnitsAutoAttackMode_EMode >(_impl_.mode_);
}
inline ::CDOTAClientMsg_UnitsAutoAttackMode_EMode CDOTAClientMsg_UnitsAutoAttackMode::mode() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UnitsAutoAttackMode.mode)
  return _internal_mode();
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::_internal_set_mode(::CDOTAClientMsg_UnitsAutoAttackMode_EMode value) {
  assert(::CDOTAClientMsg_UnitsAutoAttackMode_EMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_ = value;
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::set_mode(::CDOTAClientMsg_UnitsAutoAttackMode_EMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UnitsAutoAttackMode.mode)
}

// optional .CDOTAClientMsg_UnitsAutoAttackMode.EUnitType unit_type = 2 [default = NORMAL];
inline bool CDOTAClientMsg_UnitsAutoAttackMode::_internal_has_unit_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_UnitsAutoAttackMode::has_unit_type() const {
  return _internal_has_unit_type();
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::clear_unit_type() {
  _impl_.unit_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::_internal_unit_type() const {
  return static_cast< ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType >(_impl_.unit_type_);
}
inline ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType CDOTAClientMsg_UnitsAutoAttackMode::unit_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UnitsAutoAttackMode.unit_type)
  return _internal_unit_type();
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::_internal_set_unit_type(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType value) {
  assert(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unit_type_ = value;
}
inline void CDOTAClientMsg_UnitsAutoAttackMode::set_unit_type(::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType value) {
  _internal_set_unit_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UnitsAutoAttackMode.unit_type)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_UnitsAutoAttackAfterSpell

// optional bool enabled = 1;
inline bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::has_enabled() const {
  return _internal_has_enabled();
}
inline void CDOTAClientMsg_UnitsAutoAttackAfterSpell::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CDOTAClientMsg_UnitsAutoAttackAfterSpell::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
  return _internal_enabled();
}
inline void CDOTAClientMsg_UnitsAutoAttackAfterSpell::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void CDOTAClientMsg_UnitsAutoAttackAfterSpell::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UnitsAutoAttackAfterSpell.enabled)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_TeleportRequiresHalt

// optional bool enabled = 1;
inline bool CDOTAClientMsg_TeleportRequiresHalt::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TeleportRequiresHalt::has_enabled() const {
  return _internal_has_enabled();
}
inline void CDOTAClientMsg_TeleportRequiresHalt::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_TeleportRequiresHalt::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CDOTAClientMsg_TeleportRequiresHalt::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TeleportRequiresHalt.enabled)
  return _internal_enabled();
}
inline void CDOTAClientMsg_TeleportRequiresHalt::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void CDOTAClientMsg_TeleportRequiresHalt::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TeleportRequiresHalt.enabled)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ChannelRequiresHalt

// optional bool enabled = 1;
inline bool CDOTAClientMsg_ChannelRequiresHalt::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChannelRequiresHalt::has_enabled() const {
  return _internal_has_enabled();
}
inline void CDOTAClientMsg_ChannelRequiresHalt::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_ChannelRequiresHalt::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CDOTAClientMsg_ChannelRequiresHalt::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChannelRequiresHalt.enabled)
  return _internal_enabled();
}
inline void CDOTAClientMsg_ChannelRequiresHalt::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void CDOTAClientMsg_ChannelRequiresHalt::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChannelRequiresHalt.enabled)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SearchString

// optional string search = 1;
inline bool CDOTAClientMsg_SearchString::_internal_has_search() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SearchString::has_search() const {
  return _internal_has_search();
}
inline void CDOTAClientMsg_SearchString::clear_search() {
  _impl_.search_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_SearchString::search() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SearchString.search)
  return _internal_search();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_SearchString::set_search(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.search_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SearchString.search)
}
inline std::string* CDOTAClientMsg_SearchString::mutable_search() {
  std::string* _s = _internal_mutable_search();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_SearchString.search)
  return _s;
}
inline const std::string& CDOTAClientMsg_SearchString::_internal_search() const {
  return _impl_.search_.Get();
}
inline void CDOTAClientMsg_SearchString::_internal_set_search(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.search_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_SearchString::_internal_mutable_search() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.search_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_SearchString::release_search() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_SearchString.search)
  if (!_internal_has_search()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.search_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_.IsDefault()) {
    _impl_.search_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_SearchString::set_allocated_search(std::string* search) {
  if (search != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.search_.SetAllocated(search, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.search_.IsDefault()) {
    _impl_.search_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_SearchString.search)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_Pause

// -------------------------------------------------------------------

// CDOTAClientMsg_ShopViewMode

// optional uint32 mode = 1;
inline bool CDOTAClientMsg_ShopViewMode::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ShopViewMode::has_mode() const {
  return _internal_has_mode();
}
inline void CDOTAClientMsg_ShopViewMode::clear_mode() {
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_ShopViewMode::_internal_mode() const {
  return _impl_.mode_;
}
inline uint32_t CDOTAClientMsg_ShopViewMode::mode() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ShopViewMode.mode)
  return _internal_mode();
}
inline void CDOTAClientMsg_ShopViewMode::_internal_set_mode(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void CDOTAClientMsg_ShopViewMode::set_mode(uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ShopViewMode.mode)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SetUnitShareFlag

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_SetUnitShareFlag::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetUnitShareFlag::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_SetUnitShareFlag::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_SetUnitShareFlag::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_SetUnitShareFlag::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_SetUnitShareFlag::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_SetUnitShareFlag::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.player_id)
}

// optional uint32 flag = 2;
inline bool CDOTAClientMsg_SetUnitShareFlag::_internal_has_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetUnitShareFlag::has_flag() const {
  return _internal_has_flag();
}
inline void CDOTAClientMsg_SetUnitShareFlag::clear_flag() {
  _impl_.flag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_SetUnitShareFlag::_internal_flag() const {
  return _impl_.flag_;
}
inline uint32_t CDOTAClientMsg_SetUnitShareFlag::flag() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.flag)
  return _internal_flag();
}
inline void CDOTAClientMsg_SetUnitShareFlag::_internal_set_flag(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.flag_ = value;
}
inline void CDOTAClientMsg_SetUnitShareFlag::set_flag(uint32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.flag)
}

// optional bool state = 3;
inline bool CDOTAClientMsg_SetUnitShareFlag::_internal_has_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetUnitShareFlag::has_state() const {
  return _internal_has_state();
}
inline void CDOTAClientMsg_SetUnitShareFlag::clear_state() {
  _impl_.state_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_SetUnitShareFlag::_internal_state() const {
  return _impl_.state_;
}
inline bool CDOTAClientMsg_SetUnitShareFlag::state() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetUnitShareFlag.state)
  return _internal_state();
}
inline void CDOTAClientMsg_SetUnitShareFlag::_internal_set_state(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.state_ = value;
}
inline void CDOTAClientMsg_SetUnitShareFlag::set_state(bool value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetUnitShareFlag.state)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SwapRequest

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_SwapRequest::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SwapRequest::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_SwapRequest::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_SwapRequest::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_SwapRequest::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SwapRequest.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_SwapRequest::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_SwapRequest::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SwapRequest.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SwapAccept

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_SwapAccept::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SwapAccept::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_SwapAccept::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_SwapAccept::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_SwapAccept::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SwapAccept.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_SwapAccept::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_SwapAccept::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SwapAccept.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_WorldLine

// optional .CDOTAMsg_WorldLine worldline = 1;
inline bool CDOTAClientMsg_WorldLine::_internal_has_worldline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.worldline_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_WorldLine::has_worldline() const {
  return _internal_has_worldline();
}
inline const ::CDOTAMsg_WorldLine& CDOTAClientMsg_WorldLine::_internal_worldline() const {
  const ::CDOTAMsg_WorldLine* p = _impl_.worldline_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_WorldLine&>(
      ::_CDOTAMsg_WorldLine_default_instance_);
}
inline const ::CDOTAMsg_WorldLine& CDOTAClientMsg_WorldLine::worldline() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WorldLine.worldline)
  return _internal_worldline();
}
inline void CDOTAClientMsg_WorldLine::unsafe_arena_set_allocated_worldline(
    ::CDOTAMsg_WorldLine* worldline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldline_);
  }
  _impl_.worldline_ = worldline;
  if (worldline) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_WorldLine.worldline)
}
inline ::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::release_worldline() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_WorldLine* temp = _impl_.worldline_;
  _impl_.worldline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::unsafe_arena_release_worldline() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_WorldLine.worldline)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_WorldLine* temp = _impl_.worldline_;
  _impl_.worldline_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::_internal_mutable_worldline() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.worldline_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_WorldLine>(GetArenaForAllocation());
    _impl_.worldline_ = p;
  }
  return _impl_.worldline_;
}
inline ::CDOTAMsg_WorldLine* CDOTAClientMsg_WorldLine::mutable_worldline() {
  ::CDOTAMsg_WorldLine* _msg = _internal_mutable_worldline();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_WorldLine.worldline)
  return _msg;
}
inline void CDOTAClientMsg_WorldLine::set_allocated_worldline(::CDOTAMsg_WorldLine* worldline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.worldline_);
  }
  if (worldline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(worldline));
    if (message_arena != submessage_arena) {
      worldline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, worldline, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.worldline_ = worldline;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_WorldLine.worldline)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RequestGraphUpdate

// -------------------------------------------------------------------

// CDOTAClientMsg_ChatWheel

// optional uint32 chat_message_id = 1 [default = 4294967295];
inline bool CDOTAClientMsg_ChatWheel::_internal_has_chat_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChatWheel::has_chat_message_id() const {
  return _internal_has_chat_message_id();
}
inline void CDOTAClientMsg_ChatWheel::clear_chat_message_id() {
  _impl_.chat_message_id_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_ChatWheel::_internal_chat_message_id() const {
  return _impl_.chat_message_id_;
}
inline uint32_t CDOTAClientMsg_ChatWheel::chat_message_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatWheel.chat_message_id)
  return _internal_chat_message_id();
}
inline void CDOTAClientMsg_ChatWheel::_internal_set_chat_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.chat_message_id_ = value;
}
inline void CDOTAClientMsg_ChatWheel::set_chat_message_id(uint32_t value) {
  _internal_set_chat_message_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatWheel.chat_message_id)
}

// optional uint32 param_hero_id = 2;
inline bool CDOTAClientMsg_ChatWheel::_internal_has_param_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChatWheel::has_param_hero_id() const {
  return _internal_has_param_hero_id();
}
inline void CDOTAClientMsg_ChatWheel::clear_param_hero_id() {
  _impl_.param_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_ChatWheel::_internal_param_hero_id() const {
  return _impl_.param_hero_id_;
}
inline uint32_t CDOTAClientMsg_ChatWheel::param_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatWheel.param_hero_id)
  return _internal_param_hero_id();
}
inline void CDOTAClientMsg_ChatWheel::_internal_set_param_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.param_hero_id_ = value;
}
inline void CDOTAClientMsg_ChatWheel::set_param_hero_id(uint32_t value) {
  _internal_set_param_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatWheel.param_hero_id)
}

// optional uint32 emoticon_id = 3;
inline bool CDOTAClientMsg_ChatWheel::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChatWheel::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CDOTAClientMsg_ChatWheel::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_ChatWheel::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t CDOTAClientMsg_ChatWheel::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatWheel.emoticon_id)
  return _internal_emoticon_id();
}
inline void CDOTAClientMsg_ChatWheel::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.emoticon_id_ = value;
}
inline void CDOTAClientMsg_ChatWheel::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatWheel.emoticon_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SendStatPopup

// optional .CDOTAMsg_SendStatPopup statpopup = 1;
inline bool CDOTAClientMsg_SendStatPopup::_internal_has_statpopup() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.statpopup_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_SendStatPopup::has_statpopup() const {
  return _internal_has_statpopup();
}
inline const ::CDOTAMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::_internal_statpopup() const {
  const ::CDOTAMsg_SendStatPopup* p = _impl_.statpopup_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_SendStatPopup&>(
      ::_CDOTAMsg_SendStatPopup_default_instance_);
}
inline const ::CDOTAMsg_SendStatPopup& CDOTAClientMsg_SendStatPopup::statpopup() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SendStatPopup.statpopup)
  return _internal_statpopup();
}
inline void CDOTAClientMsg_SendStatPopup::unsafe_arena_set_allocated_statpopup(
    ::CDOTAMsg_SendStatPopup* statpopup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statpopup_);
  }
  _impl_.statpopup_ = statpopup;
  if (statpopup) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_SendStatPopup.statpopup)
}
inline ::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::release_statpopup() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_SendStatPopup* temp = _impl_.statpopup_;
  _impl_.statpopup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::unsafe_arena_release_statpopup() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_SendStatPopup.statpopup)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_SendStatPopup* temp = _impl_.statpopup_;
  _impl_.statpopup_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::_internal_mutable_statpopup() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.statpopup_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_SendStatPopup>(GetArenaForAllocation());
    _impl_.statpopup_ = p;
  }
  return _impl_.statpopup_;
}
inline ::CDOTAMsg_SendStatPopup* CDOTAClientMsg_SendStatPopup::mutable_statpopup() {
  ::CDOTAMsg_SendStatPopup* _msg = _internal_mutable_statpopup();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_SendStatPopup.statpopup)
  return _msg;
}
inline void CDOTAClientMsg_SendStatPopup::set_allocated_statpopup(::CDOTAMsg_SendStatPopup* statpopup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.statpopup_);
  }
  if (statpopup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(statpopup));
    if (message_arena != submessage_arena) {
      statpopup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, statpopup, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.statpopup_ = statpopup;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_SendStatPopup.statpopup)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_DismissAllStatPopups

// optional .CDOTAMsg_DismissAllStatPopups dismissallmsg = 1;
inline bool CDOTAClientMsg_DismissAllStatPopups::_internal_has_dismissallmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dismissallmsg_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_DismissAllStatPopups::has_dismissallmsg() const {
  return _internal_has_dismissallmsg();
}
inline const ::CDOTAMsg_DismissAllStatPopups& CDOTAClientMsg_DismissAllStatPopups::_internal_dismissallmsg() const {
  const ::CDOTAMsg_DismissAllStatPopups* p = _impl_.dismissallmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAMsg_DismissAllStatPopups&>(
      ::_CDOTAMsg_DismissAllStatPopups_default_instance_);
}
inline const ::CDOTAMsg_DismissAllStatPopups& CDOTAClientMsg_DismissAllStatPopups::dismissallmsg() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  return _internal_dismissallmsg();
}
inline void CDOTAClientMsg_DismissAllStatPopups::unsafe_arena_set_allocated_dismissallmsg(
    ::CDOTAMsg_DismissAllStatPopups* dismissallmsg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dismissallmsg_);
  }
  _impl_.dismissallmsg_ = dismissallmsg;
  if (dismissallmsg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
}
inline ::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::release_dismissallmsg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_DismissAllStatPopups* temp = _impl_.dismissallmsg_;
  _impl_.dismissallmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::unsafe_arena_release_dismissallmsg() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CDOTAMsg_DismissAllStatPopups* temp = _impl_.dismissallmsg_;
  _impl_.dismissallmsg_ = nullptr;
  return temp;
}
inline ::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::_internal_mutable_dismissallmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dismissallmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAMsg_DismissAllStatPopups>(GetArenaForAllocation());
    _impl_.dismissallmsg_ = p;
  }
  return _impl_.dismissallmsg_;
}
inline ::CDOTAMsg_DismissAllStatPopups* CDOTAClientMsg_DismissAllStatPopups::mutable_dismissallmsg() {
  ::CDOTAMsg_DismissAllStatPopups* _msg = _internal_mutable_dismissallmsg();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
  return _msg;
}
inline void CDOTAClientMsg_DismissAllStatPopups::set_allocated_dismissallmsg(::CDOTAMsg_DismissAllStatPopups* dismissallmsg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dismissallmsg_);
  }
  if (dismissallmsg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dismissallmsg));
    if (message_arena != submessage_arena) {
      dismissallmsg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dismissallmsg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dismissallmsg_ = dismissallmsg;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_DismissAllStatPopups.dismissallmsg)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_BeginLastHitChallenge

// optional uint32 chosen_lane = 1;
inline bool CDOTAClientMsg_BeginLastHitChallenge::_internal_has_chosen_lane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_BeginLastHitChallenge::has_chosen_lane() const {
  return _internal_has_chosen_lane();
}
inline void CDOTAClientMsg_BeginLastHitChallenge::clear_chosen_lane() {
  _impl_.chosen_lane_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_BeginLastHitChallenge::_internal_chosen_lane() const {
  return _impl_.chosen_lane_;
}
inline uint32_t CDOTAClientMsg_BeginLastHitChallenge::chosen_lane() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
  return _internal_chosen_lane();
}
inline void CDOTAClientMsg_BeginLastHitChallenge::_internal_set_chosen_lane(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chosen_lane_ = value;
}
inline void CDOTAClientMsg_BeginLastHitChallenge::set_chosen_lane(uint32_t value) {
  _internal_set_chosen_lane(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BeginLastHitChallenge.chosen_lane)
}

// optional bool helper_enabled = 2;
inline bool CDOTAClientMsg_BeginLastHitChallenge::_internal_has_helper_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_BeginLastHitChallenge::has_helper_enabled() const {
  return _internal_has_helper_enabled();
}
inline void CDOTAClientMsg_BeginLastHitChallenge::clear_helper_enabled() {
  _impl_.helper_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_BeginLastHitChallenge::_internal_helper_enabled() const {
  return _impl_.helper_enabled_;
}
inline bool CDOTAClientMsg_BeginLastHitChallenge::helper_enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
  return _internal_helper_enabled();
}
inline void CDOTAClientMsg_BeginLastHitChallenge::_internal_set_helper_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.helper_enabled_ = value;
}
inline void CDOTAClientMsg_BeginLastHitChallenge::set_helper_enabled(bool value) {
  _internal_set_helper_enabled(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BeginLastHitChallenge.helper_enabled)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_UpdateQuickBuyItem

// optional int32 item_ability_id = 1 [default = -1];
inline bool CDOTAClientMsg_UpdateQuickBuyItem::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_UpdateQuickBuyItem::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_UpdateQuickBuyItem::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAClientMsg_UpdateQuickBuyItem::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuyItem.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UpdateQuickBuyItem.item_ability_id)
}

// optional bool purchasable = 2 [default = false];
inline bool CDOTAClientMsg_UpdateQuickBuyItem::_internal_has_purchasable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_UpdateQuickBuyItem::has_purchasable() const {
  return _internal_has_purchasable();
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::clear_purchasable() {
  _impl_.purchasable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_UpdateQuickBuyItem::_internal_purchasable() const {
  return _impl_.purchasable_;
}
inline bool CDOTAClientMsg_UpdateQuickBuyItem::purchasable() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
  return _internal_purchasable();
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::_internal_set_purchasable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.purchasable_ = value;
}
inline void CDOTAClientMsg_UpdateQuickBuyItem::set_purchasable(bool value) {
  _internal_set_purchasable(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_UpdateQuickBuyItem.purchasable)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_UpdateQuickBuy

// repeated .CDOTAClientMsg_UpdateQuickBuyItem items = 1;
inline int CDOTAClientMsg_UpdateQuickBuy::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CDOTAClientMsg_UpdateQuickBuy::items_size() const {
  return _internal_items_size();
}
inline void CDOTAClientMsg_UpdateQuickBuy::clear_items() {
  _impl_.items_.Clear();
}
inline ::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_UpdateQuickBuy.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >*
CDOTAClientMsg_UpdateQuickBuy::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_UpdateQuickBuy.items)
  return &_impl_.items_;
}
inline const ::CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuy::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::CDOTAClientMsg_UpdateQuickBuyItem& CDOTAClientMsg_UpdateQuickBuy::items(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_UpdateQuickBuy.items)
  return _internal_items(index);
}
inline ::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::CDOTAClientMsg_UpdateQuickBuyItem* CDOTAClientMsg_UpdateQuickBuy::add_items() {
  ::CDOTAClientMsg_UpdateQuickBuyItem* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_UpdateQuickBuy.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_UpdateQuickBuyItem >&
CDOTAClientMsg_UpdateQuickBuy::items() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_UpdateQuickBuy.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RecordVote

// optional int32 choice_index = 1;
inline bool CDOTAClientMsg_RecordVote::_internal_has_choice_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RecordVote::has_choice_index() const {
  return _internal_has_choice_index();
}
inline void CDOTAClientMsg_RecordVote::clear_choice_index() {
  _impl_.choice_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_RecordVote::_internal_choice_index() const {
  return _impl_.choice_index_;
}
inline int32_t CDOTAClientMsg_RecordVote::choice_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RecordVote.choice_index)
  return _internal_choice_index();
}
inline void CDOTAClientMsg_RecordVote::_internal_set_choice_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.choice_index_ = value;
}
inline void CDOTAClientMsg_RecordVote::set_choice_index(int32_t value) {
  _internal_set_choice_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RecordVote.choice_index)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_WillPurchaseAlert

// optional int32 item_ability_id = 1 [default = -1];
inline bool CDOTAClientMsg_WillPurchaseAlert::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_WillPurchaseAlert::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAClientMsg_WillPurchaseAlert::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_WillPurchaseAlert::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAClientMsg_WillPurchaseAlert::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WillPurchaseAlert.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAClientMsg_WillPurchaseAlert::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAClientMsg_WillPurchaseAlert::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_WillPurchaseAlert.item_ability_id)
}

// optional uint32 gold_remaining = 2;
inline bool CDOTAClientMsg_WillPurchaseAlert::_internal_has_gold_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_WillPurchaseAlert::has_gold_remaining() const {
  return _internal_has_gold_remaining();
}
inline void CDOTAClientMsg_WillPurchaseAlert::clear_gold_remaining() {
  _impl_.gold_remaining_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_WillPurchaseAlert::_internal_gold_remaining() const {
  return _impl_.gold_remaining_;
}
inline uint32_t CDOTAClientMsg_WillPurchaseAlert::gold_remaining() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
  return _internal_gold_remaining();
}
inline void CDOTAClientMsg_WillPurchaseAlert::_internal_set_gold_remaining(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gold_remaining_ = value;
}
inline void CDOTAClientMsg_WillPurchaseAlert::set_gold_remaining(uint32_t value) {
  _internal_set_gold_remaining(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_WillPurchaseAlert.gold_remaining)
}

// optional int32 suggestion_player_id = 3 [default = -1];
inline bool CDOTAClientMsg_WillPurchaseAlert::_internal_has_suggestion_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_WillPurchaseAlert::has_suggestion_player_id() const {
  return _internal_has_suggestion_player_id();
}
inline void CDOTAClientMsg_WillPurchaseAlert::clear_suggestion_player_id() {
  _impl_.suggestion_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_WillPurchaseAlert::_internal_suggestion_player_id() const {
  return _impl_.suggestion_player_id_;
}
inline int32_t CDOTAClientMsg_WillPurchaseAlert::suggestion_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_WillPurchaseAlert.suggestion_player_id)
  return _internal_suggestion_player_id();
}
inline void CDOTAClientMsg_WillPurchaseAlert::_internal_set_suggestion_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.suggestion_player_id_ = value;
}
inline void CDOTAClientMsg_WillPurchaseAlert::set_suggestion_player_id(int32_t value) {
  _internal_set_suggestion_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_WillPurchaseAlert.suggestion_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_BuyBackStateAlert

// -------------------------------------------------------------------

// CDOTAClientMsg_QuickBuyAlert

// optional int32 item_ability_id = 1 [default = -1];
inline bool CDOTAClientMsg_QuickBuyAlert::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuickBuyAlert::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAClientMsg_QuickBuyAlert::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAClientMsg_QuickBuyAlert::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAClientMsg_QuickBuyAlert::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.item_ability_id)
}

// optional int32 gold_cost = 2;
inline bool CDOTAClientMsg_QuickBuyAlert::_internal_has_gold_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuickBuyAlert::has_gold_cost() const {
  return _internal_has_gold_cost();
}
inline void CDOTAClientMsg_QuickBuyAlert::clear_gold_cost() {
  _impl_.gold_cost_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::_internal_gold_cost() const {
  return _impl_.gold_cost_;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::gold_cost() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.gold_cost)
  return _internal_gold_cost();
}
inline void CDOTAClientMsg_QuickBuyAlert::_internal_set_gold_cost(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.gold_cost_ = value;
}
inline void CDOTAClientMsg_QuickBuyAlert::set_gold_cost(int32_t value) {
  _internal_set_gold_cost(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.gold_cost)
}

// optional int32 item_cooldown_seconds = 3;
inline bool CDOTAClientMsg_QuickBuyAlert::_internal_has_item_cooldown_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuickBuyAlert::has_item_cooldown_seconds() const {
  return _internal_has_item_cooldown_seconds();
}
inline void CDOTAClientMsg_QuickBuyAlert::clear_item_cooldown_seconds() {
  _impl_.item_cooldown_seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::_internal_item_cooldown_seconds() const {
  return _impl_.item_cooldown_seconds_;
}
inline int32_t CDOTAClientMsg_QuickBuyAlert::item_cooldown_seconds() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.item_cooldown_seconds)
  return _internal_item_cooldown_seconds();
}
inline void CDOTAClientMsg_QuickBuyAlert::_internal_set_item_cooldown_seconds(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.item_cooldown_seconds_ = value;
}
inline void CDOTAClientMsg_QuickBuyAlert::set_item_cooldown_seconds(int32_t value) {
  _internal_set_item_cooldown_seconds(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.item_cooldown_seconds)
}

// optional bool show_buyback = 4;
inline bool CDOTAClientMsg_QuickBuyAlert::_internal_has_show_buyback() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuickBuyAlert::has_show_buyback() const {
  return _internal_has_show_buyback();
}
inline void CDOTAClientMsg_QuickBuyAlert::clear_show_buyback() {
  _impl_.show_buyback_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAClientMsg_QuickBuyAlert::_internal_show_buyback() const {
  return _impl_.show_buyback_;
}
inline bool CDOTAClientMsg_QuickBuyAlert::show_buyback() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuickBuyAlert.show_buyback)
  return _internal_show_buyback();
}
inline void CDOTAClientMsg_QuickBuyAlert::_internal_set_show_buyback(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.show_buyback_ = value;
}
inline void CDOTAClientMsg_QuickBuyAlert::set_show_buyback(bool value) {
  _internal_set_show_buyback(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuickBuyAlert.show_buyback)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerShowCase

// optional bool showcase = 1;
inline bool CDOTAClientMsg_PlayerShowCase::_internal_has_showcase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerShowCase::has_showcase() const {
  return _internal_has_showcase();
}
inline void CDOTAClientMsg_PlayerShowCase::clear_showcase() {
  _impl_.showcase_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_PlayerShowCase::_internal_showcase() const {
  return _impl_.showcase_;
}
inline bool CDOTAClientMsg_PlayerShowCase::showcase() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerShowCase.showcase)
  return _internal_showcase();
}
inline void CDOTAClientMsg_PlayerShowCase::_internal_set_showcase(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.showcase_ = value;
}
inline void CDOTAClientMsg_PlayerShowCase::set_showcase(bool value) {
  _internal_set_showcase(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerShowCase.showcase)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_CameraZoomAmount

// optional float zoom_amount = 1;
inline bool CDOTAClientMsg_CameraZoomAmount::_internal_has_zoom_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_CameraZoomAmount::has_zoom_amount() const {
  return _internal_has_zoom_amount();
}
inline void CDOTAClientMsg_CameraZoomAmount::clear_zoom_amount() {
  _impl_.zoom_amount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CDOTAClientMsg_CameraZoomAmount::_internal_zoom_amount() const {
  return _impl_.zoom_amount_;
}
inline float CDOTAClientMsg_CameraZoomAmount::zoom_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CameraZoomAmount.zoom_amount)
  return _internal_zoom_amount();
}
inline void CDOTAClientMsg_CameraZoomAmount::_internal_set_zoom_amount(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zoom_amount_ = value;
}
inline void CDOTAClientMsg_CameraZoomAmount::set_zoom_amount(float value) {
  _internal_set_zoom_amount(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CameraZoomAmount.zoom_amount)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_BroadcasterUsingCameraman

// optional bool cameraman = 1;
inline bool CDOTAClientMsg_BroadcasterUsingCameraman::_internal_has_cameraman() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_BroadcasterUsingCameraman::has_cameraman() const {
  return _internal_has_cameraman();
}
inline void CDOTAClientMsg_BroadcasterUsingCameraman::clear_cameraman() {
  _impl_.cameraman_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_BroadcasterUsingCameraman::_internal_cameraman() const {
  return _impl_.cameraman_;
}
inline bool CDOTAClientMsg_BroadcasterUsingCameraman::cameraman() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
  return _internal_cameraman();
}
inline void CDOTAClientMsg_BroadcasterUsingCameraman::_internal_set_cameraman(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cameraman_ = value;
}
inline void CDOTAClientMsg_BroadcasterUsingCameraman::set_cameraman(bool value) {
  _internal_set_cameraman(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BroadcasterUsingCameraman.cameraman)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator

// optional bool enabled = 1;
inline bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::has_enabled() const {
  return _internal_has_enabled();
}
inline void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::clear_enabled() {
  _impl_.enabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::enabled() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
  return _internal_enabled();
}
inline void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::_internal_set_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enabled_ = value;
}
inline void CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_BroadcasterUsingAssistedCameraOperator.enabled)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_FillEmptySlotsWithBots

// optional bool fillwithbots = 1;
inline bool CDOTAClientMsg_FillEmptySlotsWithBots::_internal_has_fillwithbots() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_FillEmptySlotsWithBots::has_fillwithbots() const {
  return _internal_has_fillwithbots();
}
inline void CDOTAClientMsg_FillEmptySlotsWithBots::clear_fillwithbots() {
  _impl_.fillwithbots_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_FillEmptySlotsWithBots::_internal_fillwithbots() const {
  return _impl_.fillwithbots_;
}
inline bool CDOTAClientMsg_FillEmptySlotsWithBots::fillwithbots() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
  return _internal_fillwithbots();
}
inline void CDOTAClientMsg_FillEmptySlotsWithBots::_internal_set_fillwithbots(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.fillwithbots_ = value;
}
inline void CDOTAClientMsg_FillEmptySlotsWithBots::set_fillwithbots(bool value) {
  _internal_set_fillwithbots(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_FillEmptySlotsWithBots.fillwithbots)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_HeroStatueLike

// optional int32 owner_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_HeroStatueLike::_internal_has_owner_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_HeroStatueLike::has_owner_player_id() const {
  return _internal_has_owner_player_id();
}
inline void CDOTAClientMsg_HeroStatueLike::clear_owner_player_id() {
  _impl_.owner_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_HeroStatueLike::_internal_owner_player_id() const {
  return _impl_.owner_player_id_;
}
inline int32_t CDOTAClientMsg_HeroStatueLike::owner_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HeroStatueLike.owner_player_id)
  return _internal_owner_player_id();
}
inline void CDOTAClientMsg_HeroStatueLike::_internal_set_owner_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.owner_player_id_ = value;
}
inline void CDOTAClientMsg_HeroStatueLike::set_owner_player_id(int32_t value) {
  _internal_set_owner_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HeroStatueLike.owner_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EventCNY2015Cmd

// optional bytes data = 1;
inline bool CDOTAClientMsg_EventCNY2015Cmd::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EventCNY2015Cmd::has_data() const {
  return _internal_has_data();
}
inline void CDOTAClientMsg_EventCNY2015Cmd::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_EventCNY2015Cmd::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EventCNY2015Cmd.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_EventCNY2015Cmd::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EventCNY2015Cmd.data)
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_EventCNY2015Cmd.data)
  return _s;
}
inline const std::string& CDOTAClientMsg_EventCNY2015Cmd::_internal_data() const {
  return _impl_.data_.Get();
}
inline void CDOTAClientMsg_EventCNY2015Cmd::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_EventCNY2015Cmd::release_data() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_EventCNY2015Cmd.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_EventCNY2015Cmd::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_EventCNY2015Cmd.data)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_DemoHero

// optional int32 hero_id = 1;
inline bool CDOTAClientMsg_DemoHero::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DemoHero::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CDOTAClientMsg_DemoHero::clear_hero_id() {
  _impl_.hero_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_DemoHero::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline int32_t CDOTAClientMsg_DemoHero::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.hero_id)
  return _internal_hero_id();
}
inline void CDOTAClientMsg_DemoHero::_internal_set_hero_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_id_ = value;
}
inline void CDOTAClientMsg_DemoHero::set_hero_id(int32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.hero_id)
}

// optional int32 hero_id_to_spawn = 2;
inline bool CDOTAClientMsg_DemoHero::_internal_has_hero_id_to_spawn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DemoHero::has_hero_id_to_spawn() const {
  return _internal_has_hero_id_to_spawn();
}
inline void CDOTAClientMsg_DemoHero::clear_hero_id_to_spawn() {
  _impl_.hero_id_to_spawn_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_DemoHero::_internal_hero_id_to_spawn() const {
  return _impl_.hero_id_to_spawn_;
}
inline int32_t CDOTAClientMsg_DemoHero::hero_id_to_spawn() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.hero_id_to_spawn)
  return _internal_hero_id_to_spawn();
}
inline void CDOTAClientMsg_DemoHero::_internal_set_hero_id_to_spawn(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.hero_id_to_spawn_ = value;
}
inline void CDOTAClientMsg_DemoHero::set_hero_id_to_spawn(int32_t value) {
  _internal_set_hero_id_to_spawn(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.hero_id_to_spawn)
}

// repeated uint32 item_defs = 3;
inline int CDOTAClientMsg_DemoHero::_internal_item_defs_size() const {
  return _impl_.item_defs_.size();
}
inline int CDOTAClientMsg_DemoHero::item_defs_size() const {
  return _internal_item_defs_size();
}
inline void CDOTAClientMsg_DemoHero::clear_item_defs() {
  _impl_.item_defs_.Clear();
}
inline uint32_t CDOTAClientMsg_DemoHero::_internal_item_defs(int index) const {
  return _impl_.item_defs_.Get(index);
}
inline uint32_t CDOTAClientMsg_DemoHero::item_defs(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.item_defs)
  return _internal_item_defs(index);
}
inline void CDOTAClientMsg_DemoHero::set_item_defs(int index, uint32_t value) {
  _impl_.item_defs_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.item_defs)
}
inline void CDOTAClientMsg_DemoHero::_internal_add_item_defs(uint32_t value) {
  _impl_.item_defs_.Add(value);
}
inline void CDOTAClientMsg_DemoHero::add_item_defs(uint32_t value) {
  _internal_add_item_defs(value);
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_DemoHero.item_defs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAClientMsg_DemoHero::_internal_item_defs() const {
  return _impl_.item_defs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
CDOTAClientMsg_DemoHero::item_defs() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_DemoHero.item_defs)
  return _internal_item_defs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAClientMsg_DemoHero::_internal_mutable_item_defs() {
  return &_impl_.item_defs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
CDOTAClientMsg_DemoHero::mutable_item_defs() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_DemoHero.item_defs)
  return _internal_mutable_item_defs();
}

// repeated uint64 item_ids = 4;
inline int CDOTAClientMsg_DemoHero::_internal_item_ids_size() const {
  return _impl_.item_ids_.size();
}
inline int CDOTAClientMsg_DemoHero::item_ids_size() const {
  return _internal_item_ids_size();
}
inline void CDOTAClientMsg_DemoHero::clear_item_ids() {
  _impl_.item_ids_.Clear();
}
inline uint64_t CDOTAClientMsg_DemoHero::_internal_item_ids(int index) const {
  return _impl_.item_ids_.Get(index);
}
inline uint64_t CDOTAClientMsg_DemoHero::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.item_ids)
  return _internal_item_ids(index);
}
inline void CDOTAClientMsg_DemoHero::set_item_ids(int index, uint64_t value) {
  _impl_.item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.item_ids)
}
inline void CDOTAClientMsg_DemoHero::_internal_add_item_ids(uint64_t value) {
  _impl_.item_ids_.Add(value);
}
inline void CDOTAClientMsg_DemoHero::add_item_ids(uint64_t value) {
  _internal_add_item_ids(value);
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_DemoHero.item_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDOTAClientMsg_DemoHero::_internal_item_ids() const {
  return _impl_.item_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
CDOTAClientMsg_DemoHero::item_ids() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_DemoHero.item_ids)
  return _internal_item_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDOTAClientMsg_DemoHero::_internal_mutable_item_ids() {
  return &_impl_.item_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
CDOTAClientMsg_DemoHero::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_DemoHero.item_ids)
  return _internal_mutable_item_ids();
}

// optional uint32 style_index = 5 [default = 255];
inline bool CDOTAClientMsg_DemoHero::_internal_has_style_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DemoHero::has_style_index() const {
  return _internal_has_style_index();
}
inline void CDOTAClientMsg_DemoHero::clear_style_index() {
  _impl_.style_index_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAClientMsg_DemoHero::_internal_style_index() const {
  return _impl_.style_index_;
}
inline uint32_t CDOTAClientMsg_DemoHero::style_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.style_index)
  return _internal_style_index();
}
inline void CDOTAClientMsg_DemoHero::_internal_set_style_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.style_index_ = value;
}
inline void CDOTAClientMsg_DemoHero::set_style_index(uint32_t value) {
  _internal_set_style_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.style_index)
}

// optional bool keep_existing_demohero = 6;
inline bool CDOTAClientMsg_DemoHero::_internal_has_keep_existing_demohero() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DemoHero::has_keep_existing_demohero() const {
  return _internal_has_keep_existing_demohero();
}
inline void CDOTAClientMsg_DemoHero::clear_keep_existing_demohero() {
  _impl_.keep_existing_demohero_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAClientMsg_DemoHero::_internal_keep_existing_demohero() const {
  return _impl_.keep_existing_demohero_;
}
inline bool CDOTAClientMsg_DemoHero::keep_existing_demohero() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DemoHero.keep_existing_demohero)
  return _internal_keep_existing_demohero();
}
inline void CDOTAClientMsg_DemoHero::_internal_set_keep_existing_demohero(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.keep_existing_demohero_ = value;
}
inline void CDOTAClientMsg_DemoHero::set_keep_existing_demohero(bool value) {
  _internal_set_keep_existing_demohero(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DemoHero.keep_existing_demohero)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ChallengeSelect

// optional uint32 event_id = 1;
inline bool CDOTAClientMsg_ChallengeSelect::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeSelect::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAClientMsg_ChallengeSelect::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.event_id)
  return _internal_event_id();
}
inline void CDOTAClientMsg_ChallengeSelect::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CDOTAClientMsg_ChallengeSelect::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.event_id)
}

// optional uint32 slot_id = 2;
inline bool CDOTAClientMsg_ChallengeSelect::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeSelect::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CDOTAClientMsg_ChallengeSelect::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.slot_id)
  return _internal_slot_id();
}
inline void CDOTAClientMsg_ChallengeSelect::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_id_ = value;
}
inline void CDOTAClientMsg_ChallengeSelect::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.slot_id)
}

// optional uint32 sequence_id = 3;
inline bool CDOTAClientMsg_ChallengeSelect::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeSelect::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void CDOTAClientMsg_ChallengeSelect::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeSelect::sequence_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeSelect.sequence_id)
  return _internal_sequence_id();
}
inline void CDOTAClientMsg_ChallengeSelect::_internal_set_sequence_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_id_ = value;
}
inline void CDOTAClientMsg_ChallengeSelect::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeSelect.sequence_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ChallengeReroll

// optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
inline bool CDOTAClientMsg_ChallengeReroll::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeReroll::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAClientMsg_ChallengeReroll::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EEvent CDOTAClientMsg_ChallengeReroll::_internal_event_id() const {
  return static_cast< ::EEvent >(_impl_.event_id_);
}
inline ::EEvent CDOTAClientMsg_ChallengeReroll::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.event_id)
  return _internal_event_id();
}
inline void CDOTAClientMsg_ChallengeReroll::_internal_set_event_id(::EEvent value) {
  assert(::EEvent_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CDOTAClientMsg_ChallengeReroll::set_event_id(::EEvent value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.event_id)
}

// optional uint32 slot_id = 2;
inline bool CDOTAClientMsg_ChallengeReroll::_internal_has_slot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeReroll::has_slot_id() const {
  return _internal_has_slot_id();
}
inline void CDOTAClientMsg_ChallengeReroll::clear_slot_id() {
  _impl_.slot_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::_internal_slot_id() const {
  return _impl_.slot_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::slot_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.slot_id)
  return _internal_slot_id();
}
inline void CDOTAClientMsg_ChallengeReroll::_internal_set_slot_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_id_ = value;
}
inline void CDOTAClientMsg_ChallengeReroll::set_slot_id(uint32_t value) {
  _internal_set_slot_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.slot_id)
}

// optional uint32 sequence_id = 3;
inline bool CDOTAClientMsg_ChallengeReroll::_internal_has_sequence_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeReroll::has_sequence_id() const {
  return _internal_has_sequence_id();
}
inline void CDOTAClientMsg_ChallengeReroll::clear_sequence_id() {
  _impl_.sequence_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::_internal_sequence_id() const {
  return _impl_.sequence_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::sequence_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.sequence_id)
  return _internal_sequence_id();
}
inline void CDOTAClientMsg_ChallengeReroll::_internal_set_sequence_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sequence_id_ = value;
}
inline void CDOTAClientMsg_ChallengeReroll::set_sequence_id(uint32_t value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.sequence_id)
}

// optional uint32 hero_id = 4;
inline bool CDOTAClientMsg_ChallengeReroll::_internal_has_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChallengeReroll::has_hero_id() const {
  return _internal_has_hero_id();
}
inline void CDOTAClientMsg_ChallengeReroll::clear_hero_id() {
  _impl_.hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::_internal_hero_id() const {
  return _impl_.hero_id_;
}
inline uint32_t CDOTAClientMsg_ChallengeReroll::hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChallengeReroll.hero_id)
  return _internal_hero_id();
}
inline void CDOTAClientMsg_ChallengeReroll::_internal_set_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.hero_id_ = value;
}
inline void CDOTAClientMsg_ChallengeReroll::set_hero_id(uint32_t value) {
  _internal_set_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChallengeReroll.hero_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_CoinWager

// optional uint32 wager_amount = 1;
inline bool CDOTAClientMsg_CoinWager::_internal_has_wager_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_CoinWager::has_wager_amount() const {
  return _internal_has_wager_amount();
}
inline void CDOTAClientMsg_CoinWager::clear_wager_amount() {
  _impl_.wager_amount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_CoinWager::_internal_wager_amount() const {
  return _impl_.wager_amount_;
}
inline uint32_t CDOTAClientMsg_CoinWager::wager_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CoinWager.wager_amount)
  return _internal_wager_amount();
}
inline void CDOTAClientMsg_CoinWager::_internal_set_wager_amount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wager_amount_ = value;
}
inline void CDOTAClientMsg_CoinWager::set_wager_amount(uint32_t value) {
  _internal_set_wager_amount(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CoinWager.wager_amount)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_CoinWagerToken

// optional uint64 wager_token_item_id = 1;
inline bool CDOTAClientMsg_CoinWagerToken::_internal_has_wager_token_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_CoinWagerToken::has_wager_token_item_id() const {
  return _internal_has_wager_token_item_id();
}
inline void CDOTAClientMsg_CoinWagerToken::clear_wager_token_item_id() {
  _impl_.wager_token_item_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDOTAClientMsg_CoinWagerToken::_internal_wager_token_item_id() const {
  return _impl_.wager_token_item_id_;
}
inline uint64_t CDOTAClientMsg_CoinWagerToken::wager_token_item_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_CoinWagerToken.wager_token_item_id)
  return _internal_wager_token_item_id();
}
inline void CDOTAClientMsg_CoinWagerToken::_internal_set_wager_token_item_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wager_token_item_id_ = value;
}
inline void CDOTAClientMsg_CoinWagerToken::set_wager_token_item_id(uint64_t value) {
  _internal_set_wager_token_item_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_CoinWagerToken.wager_token_item_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RankWager

// optional bool announce_wager = 1;
inline bool CDOTAClientMsg_RankWager::_internal_has_announce_wager() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RankWager::has_announce_wager() const {
  return _internal_has_announce_wager();
}
inline void CDOTAClientMsg_RankWager::clear_announce_wager() {
  _impl_.announce_wager_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_RankWager::_internal_announce_wager() const {
  return _impl_.announce_wager_;
}
inline bool CDOTAClientMsg_RankWager::announce_wager() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RankWager.announce_wager)
  return _internal_announce_wager();
}
inline void CDOTAClientMsg_RankWager::_internal_set_announce_wager(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.announce_wager_ = value;
}
inline void CDOTAClientMsg_RankWager::set_announce_wager(bool value) {
  _internal_set_announce_wager(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RankWager.announce_wager)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerBounty

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_PlayerBounty::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerBounty::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_PlayerBounty::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PlayerBounty::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_PlayerBounty::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerBounty.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_PlayerBounty::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_PlayerBounty::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerBounty.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EventPointsTip

// optional int32 recipient_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_EventPointsTip::_internal_has_recipient_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EventPointsTip::has_recipient_player_id() const {
  return _internal_has_recipient_player_id();
}
inline void CDOTAClientMsg_EventPointsTip::clear_recipient_player_id() {
  _impl_.recipient_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_EventPointsTip::_internal_recipient_player_id() const {
  return _impl_.recipient_player_id_;
}
inline int32_t CDOTAClientMsg_EventPointsTip::recipient_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EventPointsTip.recipient_player_id)
  return _internal_recipient_player_id();
}
inline void CDOTAClientMsg_EventPointsTip::_internal_set_recipient_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recipient_player_id_ = value;
}
inline void CDOTAClientMsg_EventPointsTip::set_recipient_player_id(int32_t value) {
  _internal_set_recipient_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EventPointsTip.recipient_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ExecuteOrders

// repeated .CDOTAMsg_UnitOrder orders = 1;
inline int CDOTAClientMsg_ExecuteOrders::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int CDOTAClientMsg_ExecuteOrders::orders_size() const {
  return _internal_orders_size();
}
inline ::CDOTAMsg_UnitOrder* CDOTAClientMsg_ExecuteOrders::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_ExecuteOrders.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMsg_UnitOrder >*
CDOTAClientMsg_ExecuteOrders::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_ExecuteOrders.orders)
  return &_impl_.orders_;
}
inline const ::CDOTAMsg_UnitOrder& CDOTAClientMsg_ExecuteOrders::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::CDOTAMsg_UnitOrder& CDOTAClientMsg_ExecuteOrders::orders(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ExecuteOrders.orders)
  return _internal_orders(index);
}
inline ::CDOTAMsg_UnitOrder* CDOTAClientMsg_ExecuteOrders::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::CDOTAMsg_UnitOrder* CDOTAClientMsg_ExecuteOrders::add_orders() {
  ::CDOTAMsg_UnitOrder* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_ExecuteOrders.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAMsg_UnitOrder >&
CDOTAClientMsg_ExecuteOrders::orders() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_ExecuteOrders.orders)
  return _impl_.orders_;
}

// -------------------------------------------------------------------

// CDOTAClientMsg_XPAlert

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_XPAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_XPAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_XPAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_XPAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_XPAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_XPAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_XPAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_XPAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_XPAlert.target_entindex)
}

// optional uint32 damage_taken = 2;
inline bool CDOTAClientMsg_XPAlert::_internal_has_damage_taken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_XPAlert::has_damage_taken() const {
  return _internal_has_damage_taken();
}
inline void CDOTAClientMsg_XPAlert::clear_damage_taken() {
  _impl_.damage_taken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_XPAlert::_internal_damage_taken() const {
  return _impl_.damage_taken_;
}
inline uint32_t CDOTAClientMsg_XPAlert::damage_taken() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_XPAlert.damage_taken)
  return _internal_damage_taken();
}
inline void CDOTAClientMsg_XPAlert::_internal_set_damage_taken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.damage_taken_ = value;
}
inline void CDOTAClientMsg_XPAlert::set_damage_taken(uint32_t value) {
  _internal_set_damage_taken(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_XPAlert.damage_taken)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_TalentTreeAlert

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_TalentTreeAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TalentTreeAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_TalentTreeAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TalentTreeAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_TalentTreeAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_TalentTreeAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TalentTreeAlert.target_entindex)
}

// optional int32 ability_id = 2 [default = -1];
inline bool CDOTAClientMsg_TalentTreeAlert::_internal_has_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TalentTreeAlert::has_ability_id() const {
  return _internal_has_ability_id();
}
inline void CDOTAClientMsg_TalentTreeAlert::clear_ability_id() {
  _impl_.ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::_internal_ability_id() const {
  return _impl_.ability_id_;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TalentTreeAlert.ability_id)
  return _internal_ability_id();
}
inline void CDOTAClientMsg_TalentTreeAlert::_internal_set_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ability_id_ = value;
}
inline void CDOTAClientMsg_TalentTreeAlert::set_ability_id(int32_t value) {
  _internal_set_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TalentTreeAlert.ability_id)
}

// optional int32 slot = 3;
inline bool CDOTAClientMsg_TalentTreeAlert::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TalentTreeAlert::has_slot() const {
  return _internal_has_slot();
}
inline void CDOTAClientMsg_TalentTreeAlert::clear_slot() {
  _impl_.slot_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::_internal_slot() const {
  return _impl_.slot_;
}
inline int32_t CDOTAClientMsg_TalentTreeAlert::slot() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TalentTreeAlert.slot)
  return _internal_slot();
}
inline void CDOTAClientMsg_TalentTreeAlert::_internal_set_slot(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_ = value;
}
inline void CDOTAClientMsg_TalentTreeAlert::set_slot(int32_t value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TalentTreeAlert.slot)
}

// optional bool learned = 4;
inline bool CDOTAClientMsg_TalentTreeAlert::_internal_has_learned() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TalentTreeAlert::has_learned() const {
  return _internal_has_learned();
}
inline void CDOTAClientMsg_TalentTreeAlert::clear_learned() {
  _impl_.learned_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_TalentTreeAlert::_internal_learned() const {
  return _impl_.learned_;
}
inline bool CDOTAClientMsg_TalentTreeAlert::learned() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TalentTreeAlert.learned)
  return _internal_learned();
}
inline void CDOTAClientMsg_TalentTreeAlert::_internal_set_learned(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.learned_ = value;
}
inline void CDOTAClientMsg_TalentTreeAlert::set_learned(bool value) {
  _internal_set_learned(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TalentTreeAlert.learned)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_KillcamDamageTaken

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CDOTAClientMsg_KillcamDamageTaken::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_KillcamDamageTaken::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.target_entindex)
}

// optional uint32 damage_taken = 2;
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_damage_taken() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_damage_taken() const {
  return _internal_has_damage_taken();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_damage_taken() {
  _impl_.damage_taken_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_KillcamDamageTaken::_internal_damage_taken() const {
  return _impl_.damage_taken_;
}
inline uint32_t CDOTAClientMsg_KillcamDamageTaken::damage_taken() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.damage_taken)
  return _internal_damage_taken();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_damage_taken(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.damage_taken_ = value;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_damage_taken(uint32_t value) {
  _internal_set_damage_taken(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.damage_taken)
}

// optional uint32 item_type = 3;
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_item_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_item_type() const {
  return _internal_has_item_type();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_item_type() {
  _impl_.item_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAClientMsg_KillcamDamageTaken::_internal_item_type() const {
  return _impl_.item_type_;
}
inline uint32_t CDOTAClientMsg_KillcamDamageTaken::item_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.item_type)
  return _internal_item_type();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_item_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.item_type_ = value;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_item_type(uint32_t value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.item_type)
}

// optional int32 item_ability_id = 4 [default = -1];
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t CDOTAClientMsg_KillcamDamageTaken::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAClientMsg_KillcamDamageTaken::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.item_ability_id)
}

// optional string hero_name = 5;
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_hero_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_hero_name() const {
  return _internal_has_hero_name();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_hero_name() {
  _impl_.hero_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_KillcamDamageTaken::hero_name() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.hero_name)
  return _internal_hero_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_KillcamDamageTaken::set_hero_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.hero_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.hero_name)
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::mutable_hero_name() {
  std::string* _s = _internal_mutable_hero_name();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_KillcamDamageTaken.hero_name)
  return _s;
}
inline const std::string& CDOTAClientMsg_KillcamDamageTaken::_internal_hero_name() const {
  return _impl_.hero_name_.Get();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_hero_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hero_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::_internal_mutable_hero_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hero_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::release_hero_name() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_KillcamDamageTaken.hero_name)
  if (!_internal_has_hero_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.hero_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hero_name_.IsDefault()) {
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_allocated_hero_name(std::string* hero_name) {
  if (hero_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hero_name_.SetAllocated(hero_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hero_name_.IsDefault()) {
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_KillcamDamageTaken.hero_name)
}

// optional string damage_color = 6;
inline bool CDOTAClientMsg_KillcamDamageTaken::_internal_has_damage_color() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_KillcamDamageTaken::has_damage_color() const {
  return _internal_has_damage_color();
}
inline void CDOTAClientMsg_KillcamDamageTaken::clear_damage_color() {
  _impl_.damage_color_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CDOTAClientMsg_KillcamDamageTaken::damage_color() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_KillcamDamageTaken.damage_color)
  return _internal_damage_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_KillcamDamageTaken::set_damage_color(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.damage_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_KillcamDamageTaken.damage_color)
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::mutable_damage_color() {
  std::string* _s = _internal_mutable_damage_color();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_KillcamDamageTaken.damage_color)
  return _s;
}
inline const std::string& CDOTAClientMsg_KillcamDamageTaken::_internal_damage_color() const {
  return _impl_.damage_color_.Get();
}
inline void CDOTAClientMsg_KillcamDamageTaken::_internal_set_damage_color(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.damage_color_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::_internal_mutable_damage_color() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.damage_color_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_KillcamDamageTaken::release_damage_color() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_KillcamDamageTaken.damage_color)
  if (!_internal_has_damage_color()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.damage_color_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.damage_color_.IsDefault()) {
    _impl_.damage_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_KillcamDamageTaken::set_allocated_damage_color(std::string* damage_color) {
  if (damage_color != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.damage_color_.SetAllocated(damage_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.damage_color_.IsDefault()) {
    _impl_.damage_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_KillcamDamageTaken.damage_color)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_KillMyHero

// -------------------------------------------------------------------

// CDOTAClientMsg_QuestStatus

// optional uint32 quest_id = 1;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_quest_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_quest_id() const {
  return _internal_has_quest_id();
}
inline void CDOTAClientMsg_QuestStatus::clear_quest_id() {
  _impl_.quest_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_QuestStatus::_internal_quest_id() const {
  return _impl_.quest_id_;
}
inline uint32_t CDOTAClientMsg_QuestStatus::quest_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.quest_id)
  return _internal_quest_id();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_quest_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.quest_id_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_quest_id(uint32_t value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.quest_id)
}

// optional uint32 challenge_id = 2;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_challenge_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline void CDOTAClientMsg_QuestStatus::clear_challenge_id() {
  _impl_.challenge_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_QuestStatus::_internal_challenge_id() const {
  return _impl_.challenge_id_;
}
inline uint32_t CDOTAClientMsg_QuestStatus::challenge_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.challenge_id)
  return _internal_challenge_id();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_challenge_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.challenge_id_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_challenge_id(uint32_t value) {
  _internal_set_challenge_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.challenge_id)
}

// optional uint32 progress = 3;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_progress() const {
  return _internal_has_progress();
}
inline void CDOTAClientMsg_QuestStatus::clear_progress() {
  _impl_.progress_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_QuestStatus::_internal_progress() const {
  return _impl_.progress_;
}
inline uint32_t CDOTAClientMsg_QuestStatus::progress() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.progress)
  return _internal_progress();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_progress(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.progress_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_progress(uint32_t value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.progress)
}

// optional uint32 goal = 4;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_goal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_goal() const {
  return _internal_has_goal();
}
inline void CDOTAClientMsg_QuestStatus::clear_goal() {
  _impl_.goal_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CDOTAClientMsg_QuestStatus::_internal_goal() const {
  return _impl_.goal_;
}
inline uint32_t CDOTAClientMsg_QuestStatus::goal() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.goal)
  return _internal_goal();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_goal(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.goal_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_goal(uint32_t value) {
  _internal_set_goal(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.goal)
}

// optional uint32 query = 5;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_query() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_query() const {
  return _internal_has_query();
}
inline void CDOTAClientMsg_QuestStatus::clear_query() {
  _impl_.query_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CDOTAClientMsg_QuestStatus::_internal_query() const {
  return _impl_.query_;
}
inline uint32_t CDOTAClientMsg_QuestStatus::query() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.query)
  return _internal_query();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_query(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.query_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_query(uint32_t value) {
  _internal_set_query(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.query)
}

// optional float fail_gametime = 6;
inline bool CDOTAClientMsg_QuestStatus::_internal_has_fail_gametime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_fail_gametime() const {
  return _internal_has_fail_gametime();
}
inline void CDOTAClientMsg_QuestStatus::clear_fail_gametime() {
  _impl_.fail_gametime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CDOTAClientMsg_QuestStatus::_internal_fail_gametime() const {
  return _impl_.fail_gametime_;
}
inline float CDOTAClientMsg_QuestStatus::fail_gametime() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.fail_gametime)
  return _internal_fail_gametime();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_fail_gametime(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.fail_gametime_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_fail_gametime(float value) {
  _internal_set_fail_gametime(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.fail_gametime)
}

// optional int32 item_ability_id = 7 [default = -1];
inline bool CDOTAClientMsg_QuestStatus::_internal_has_item_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAClientMsg_QuestStatus::has_item_ability_id() const {
  return _internal_has_item_ability_id();
}
inline void CDOTAClientMsg_QuestStatus::clear_item_ability_id() {
  _impl_.item_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t CDOTAClientMsg_QuestStatus::_internal_item_ability_id() const {
  return _impl_.item_ability_id_;
}
inline int32_t CDOTAClientMsg_QuestStatus::item_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_QuestStatus.item_ability_id)
  return _internal_item_ability_id();
}
inline void CDOTAClientMsg_QuestStatus::_internal_set_item_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.item_ability_id_ = value;
}
inline void CDOTAClientMsg_QuestStatus::set_item_ability_id(int32_t value) {
  _internal_set_item_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_QuestStatus.item_ability_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ToggleAutoattack

// optional int32 mode = 1;
inline bool CDOTAClientMsg_ToggleAutoattack::_internal_has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ToggleAutoattack::has_mode() const {
  return _internal_has_mode();
}
inline void CDOTAClientMsg_ToggleAutoattack::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_ToggleAutoattack::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t CDOTAClientMsg_ToggleAutoattack::mode() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ToggleAutoattack.mode)
  return _internal_mode();
}
inline void CDOTAClientMsg_ToggleAutoattack::_internal_set_mode(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}
inline void CDOTAClientMsg_ToggleAutoattack::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ToggleAutoattack.mode)
}

// optional bool show_message = 2;
inline bool CDOTAClientMsg_ToggleAutoattack::_internal_has_show_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ToggleAutoattack::has_show_message() const {
  return _internal_has_show_message();
}
inline void CDOTAClientMsg_ToggleAutoattack::clear_show_message() {
  _impl_.show_message_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_ToggleAutoattack::_internal_show_message() const {
  return _impl_.show_message_;
}
inline bool CDOTAClientMsg_ToggleAutoattack::show_message() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ToggleAutoattack.show_message)
  return _internal_show_message();
}
inline void CDOTAClientMsg_ToggleAutoattack::_internal_set_show_message(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.show_message_ = value;
}
inline void CDOTAClientMsg_ToggleAutoattack::set_show_message(bool value) {
  _internal_set_show_message(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ToggleAutoattack.show_message)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SpecialAbility

// optional uint32 ability_index = 1;
inline bool CDOTAClientMsg_SpecialAbility::_internal_has_ability_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SpecialAbility::has_ability_index() const {
  return _internal_has_ability_index();
}
inline void CDOTAClientMsg_SpecialAbility::clear_ability_index() {
  _impl_.ability_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_SpecialAbility::_internal_ability_index() const {
  return _impl_.ability_index_;
}
inline uint32_t CDOTAClientMsg_SpecialAbility::ability_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SpecialAbility.ability_index)
  return _internal_ability_index();
}
inline void CDOTAClientMsg_SpecialAbility::_internal_set_ability_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ability_index_ = value;
}
inline void CDOTAClientMsg_SpecialAbility::set_ability_index(uint32_t value) {
  _internal_set_ability_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SpecialAbility.ability_index)
}

// optional int32 target_entindex = 2 [default = -1];
inline bool CDOTAClientMsg_SpecialAbility::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SpecialAbility::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_SpecialAbility::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_SpecialAbility::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_SpecialAbility::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SpecialAbility.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_SpecialAbility::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_SpecialAbility::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SpecialAbility.target_entindex)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SetEnemyStartingPosition

// optional int32 enemy_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_SetEnemyStartingPosition::_internal_has_enemy_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetEnemyStartingPosition::has_enemy_player_id() const {
  return _internal_has_enemy_player_id();
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::clear_enemy_player_id() {
  _impl_.enemy_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_SetEnemyStartingPosition::_internal_enemy_player_id() const {
  return _impl_.enemy_player_id_;
}
inline int32_t CDOTAClientMsg_SetEnemyStartingPosition::enemy_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetEnemyStartingPosition.enemy_player_id)
  return _internal_enemy_player_id();
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::_internal_set_enemy_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.enemy_player_id_ = value;
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::set_enemy_player_id(int32_t value) {
  _internal_set_enemy_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetEnemyStartingPosition.enemy_player_id)
}

// optional uint32 enemy_starting_position = 2;
inline bool CDOTAClientMsg_SetEnemyStartingPosition::_internal_has_enemy_starting_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetEnemyStartingPosition::has_enemy_starting_position() const {
  return _internal_has_enemy_starting_position();
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::clear_enemy_starting_position() {
  _impl_.enemy_starting_position_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_SetEnemyStartingPosition::_internal_enemy_starting_position() const {
  return _impl_.enemy_starting_position_;
}
inline uint32_t CDOTAClientMsg_SetEnemyStartingPosition::enemy_starting_position() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetEnemyStartingPosition.enemy_starting_position)
  return _internal_enemy_starting_position();
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::_internal_set_enemy_starting_position(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enemy_starting_position_ = value;
}
inline void CDOTAClientMsg_SetEnemyStartingPosition::set_enemy_starting_position(uint32_t value) {
  _internal_set_enemy_starting_position(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetEnemyStartingPosition.enemy_starting_position)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SetDesiredWardPlacement

// optional uint32 ward_index = 1;
inline bool CDOTAClientMsg_SetDesiredWardPlacement::_internal_has_ward_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_index() const {
  return _internal_has_ward_index();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_index() {
  _impl_.ward_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_SetDesiredWardPlacement::_internal_ward_index() const {
  return _impl_.ward_index_;
}
inline uint32_t CDOTAClientMsg_SetDesiredWardPlacement::ward_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetDesiredWardPlacement.ward_index)
  return _internal_ward_index();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::_internal_set_ward_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ward_index_ = value;
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_index(uint32_t value) {
  _internal_set_ward_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetDesiredWardPlacement.ward_index)
}

// optional float ward_x = 2;
inline bool CDOTAClientMsg_SetDesiredWardPlacement::_internal_has_ward_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_x() const {
  return _internal_has_ward_x();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_x() {
  _impl_.ward_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAClientMsg_SetDesiredWardPlacement::_internal_ward_x() const {
  return _impl_.ward_x_;
}
inline float CDOTAClientMsg_SetDesiredWardPlacement::ward_x() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetDesiredWardPlacement.ward_x)
  return _internal_ward_x();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::_internal_set_ward_x(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ward_x_ = value;
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_x(float value) {
  _internal_set_ward_x(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetDesiredWardPlacement.ward_x)
}

// optional float ward_y = 3;
inline bool CDOTAClientMsg_SetDesiredWardPlacement::_internal_has_ward_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetDesiredWardPlacement::has_ward_y() const {
  return _internal_has_ward_y();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::clear_ward_y() {
  _impl_.ward_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CDOTAClientMsg_SetDesiredWardPlacement::_internal_ward_y() const {
  return _impl_.ward_y_;
}
inline float CDOTAClientMsg_SetDesiredWardPlacement::ward_y() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetDesiredWardPlacement.ward_y)
  return _internal_ward_y();
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::_internal_set_ward_y(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ward_y_ = value;
}
inline void CDOTAClientMsg_SetDesiredWardPlacement::set_ward_y(float value) {
  _internal_set_ward_y(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetDesiredWardPlacement.ward_y)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RollDice

// optional uint32 channel_type = 1;
inline bool CDOTAClientMsg_RollDice::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RollDice::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CDOTAClientMsg_RollDice::clear_channel_type() {
  _impl_.channel_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_RollDice::_internal_channel_type() const {
  return _impl_.channel_type_;
}
inline uint32_t CDOTAClientMsg_RollDice::channel_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RollDice.channel_type)
  return _internal_channel_type();
}
inline void CDOTAClientMsg_RollDice::_internal_set_channel_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_type_ = value;
}
inline void CDOTAClientMsg_RollDice::set_channel_type(uint32_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RollDice.channel_type)
}

// optional uint32 roll_min = 2;
inline bool CDOTAClientMsg_RollDice::_internal_has_roll_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RollDice::has_roll_min() const {
  return _internal_has_roll_min();
}
inline void CDOTAClientMsg_RollDice::clear_roll_min() {
  _impl_.roll_min_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_RollDice::_internal_roll_min() const {
  return _impl_.roll_min_;
}
inline uint32_t CDOTAClientMsg_RollDice::roll_min() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RollDice.roll_min)
  return _internal_roll_min();
}
inline void CDOTAClientMsg_RollDice::_internal_set_roll_min(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roll_min_ = value;
}
inline void CDOTAClientMsg_RollDice::set_roll_min(uint32_t value) {
  _internal_set_roll_min(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RollDice.roll_min)
}

// optional uint32 roll_max = 3;
inline bool CDOTAClientMsg_RollDice::_internal_has_roll_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RollDice::has_roll_max() const {
  return _internal_has_roll_max();
}
inline void CDOTAClientMsg_RollDice::clear_roll_max() {
  _impl_.roll_max_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CDOTAClientMsg_RollDice::_internal_roll_max() const {
  return _impl_.roll_max_;
}
inline uint32_t CDOTAClientMsg_RollDice::roll_max() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RollDice.roll_max)
  return _internal_roll_max();
}
inline void CDOTAClientMsg_RollDice::_internal_set_roll_max(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.roll_max_ = value;
}
inline void CDOTAClientMsg_RollDice::set_roll_max(uint32_t value) {
  _internal_set_roll_max(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RollDice.roll_max)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_FlipCoin

// optional uint32 channel_type = 1;
inline bool CDOTAClientMsg_FlipCoin::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_FlipCoin::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CDOTAClientMsg_FlipCoin::clear_channel_type() {
  _impl_.channel_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_FlipCoin::_internal_channel_type() const {
  return _impl_.channel_type_;
}
inline uint32_t CDOTAClientMsg_FlipCoin::channel_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_FlipCoin.channel_type)
  return _internal_channel_type();
}
inline void CDOTAClientMsg_FlipCoin::_internal_set_channel_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_type_ = value;
}
inline void CDOTAClientMsg_FlipCoin::set_channel_type(uint32_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_FlipCoin.channel_type)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RequestItemSuggestions

// -------------------------------------------------------------------

// CDOTAClientMsg_MakeTeamCaptain

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_MakeTeamCaptain::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_MakeTeamCaptain::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_MakeTeamCaptain::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_MakeTeamCaptain::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_MakeTeamCaptain::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_MakeTeamCaptain.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_MakeTeamCaptain::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_MakeTeamCaptain::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_MakeTeamCaptain.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_HelpTipSystemStateChanged

// optional bool tip_displayed = 1;
inline bool CDOTAClientMsg_HelpTipSystemStateChanged::_internal_has_tip_displayed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_HelpTipSystemStateChanged::has_tip_displayed() const {
  return _internal_has_tip_displayed();
}
inline void CDOTAClientMsg_HelpTipSystemStateChanged::clear_tip_displayed() {
  _impl_.tip_displayed_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_HelpTipSystemStateChanged::_internal_tip_displayed() const {
  return _impl_.tip_displayed_;
}
inline bool CDOTAClientMsg_HelpTipSystemStateChanged::tip_displayed() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_HelpTipSystemStateChanged.tip_displayed)
  return _internal_tip_displayed();
}
inline void CDOTAClientMsg_HelpTipSystemStateChanged::_internal_set_tip_displayed(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tip_displayed_ = value;
}
inline void CDOTAClientMsg_HelpTipSystemStateChanged::set_tip_displayed(bool value) {
  _internal_set_tip_displayed(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_HelpTipSystemStateChanged.tip_displayed)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_RequestBulkCombatLog

// optional float game_time = 1;
inline bool CDOTAClientMsg_RequestBulkCombatLog::_internal_has_game_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::has_game_time() const {
  return _internal_has_game_time();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::clear_game_time() {
  _impl_.game_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CDOTAClientMsg_RequestBulkCombatLog::_internal_game_time() const {
  return _impl_.game_time_;
}
inline float CDOTAClientMsg_RequestBulkCombatLog::game_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RequestBulkCombatLog.game_time)
  return _internal_game_time();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::_internal_set_game_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.game_time_ = value;
}
inline void CDOTAClientMsg_RequestBulkCombatLog::set_game_time(float value) {
  _internal_set_game_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RequestBulkCombatLog.game_time)
}

// optional float duration = 2;
inline bool CDOTAClientMsg_RequestBulkCombatLog::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::has_duration() const {
  return _internal_has_duration();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::clear_duration() {
  _impl_.duration_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAClientMsg_RequestBulkCombatLog::_internal_duration() const {
  return _impl_.duration_;
}
inline float CDOTAClientMsg_RequestBulkCombatLog::duration() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RequestBulkCombatLog.duration)
  return _internal_duration();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::_internal_set_duration(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void CDOTAClientMsg_RequestBulkCombatLog::set_duration(float value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RequestBulkCombatLog.duration)
}

// optional bool recent_player_death = 3;
inline bool CDOTAClientMsg_RequestBulkCombatLog::_internal_has_recent_player_death() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::has_recent_player_death() const {
  return _internal_has_recent_player_death();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::clear_recent_player_death() {
  _impl_.recent_player_death_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::_internal_recent_player_death() const {
  return _impl_.recent_player_death_;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::recent_player_death() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RequestBulkCombatLog.recent_player_death)
  return _internal_recent_player_death();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::_internal_set_recent_player_death(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.recent_player_death_ = value;
}
inline void CDOTAClientMsg_RequestBulkCombatLog::set_recent_player_death(bool value) {
  _internal_set_recent_player_death(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RequestBulkCombatLog.recent_player_death)
}

// optional int32 player_id = 4 [default = -1];
inline bool CDOTAClientMsg_RequestBulkCombatLog::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_RequestBulkCombatLog::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAClientMsg_RequestBulkCombatLog::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_RequestBulkCombatLog::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_RequestBulkCombatLog.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_RequestBulkCombatLog::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_RequestBulkCombatLog::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_RequestBulkCombatLog.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AbilityDraftRequestAbility

// optional int32 requested_ability_id = 1 [default = -1];
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::_internal_has_requested_ability_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::has_requested_ability_id() const {
  return _internal_has_requested_ability_id();
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::clear_requested_ability_id() {
  _impl_.requested_ability_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_AbilityDraftRequestAbility::_internal_requested_ability_id() const {
  return _impl_.requested_ability_id_;
}
inline int32_t CDOTAClientMsg_AbilityDraftRequestAbility::requested_ability_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AbilityDraftRequestAbility.requested_ability_id)
  return _internal_requested_ability_id();
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::_internal_set_requested_ability_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.requested_ability_id_ = value;
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::set_requested_ability_id(int32_t value) {
  _internal_set_requested_ability_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AbilityDraftRequestAbility.requested_ability_id)
}

// optional bool ctrl_is_down = 2;
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::_internal_has_ctrl_is_down() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::has_ctrl_is_down() const {
  return _internal_has_ctrl_is_down();
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::clear_ctrl_is_down() {
  _impl_.ctrl_is_down_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::_internal_ctrl_is_down() const {
  return _impl_.ctrl_is_down_;
}
inline bool CDOTAClientMsg_AbilityDraftRequestAbility::ctrl_is_down() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AbilityDraftRequestAbility.ctrl_is_down)
  return _internal_ctrl_is_down();
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::_internal_set_ctrl_is_down(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctrl_is_down_ = value;
}
inline void CDOTAClientMsg_AbilityDraftRequestAbility::set_ctrl_is_down(bool value) {
  _internal_set_ctrl_is_down(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AbilityDraftRequestAbility.ctrl_is_down)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_GuideSelectOption

// optional uint32 option = 1;
inline bool CDOTAClientMsg_GuideSelectOption::_internal_has_option() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelectOption::has_option() const {
  return _internal_has_option();
}
inline void CDOTAClientMsg_GuideSelectOption::clear_option() {
  _impl_.option_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_GuideSelectOption::_internal_option() const {
  return _impl_.option_;
}
inline uint32_t CDOTAClientMsg_GuideSelectOption::option() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelectOption.option)
  return _internal_option();
}
inline void CDOTAClientMsg_GuideSelectOption::_internal_set_option(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.option_ = value;
}
inline void CDOTAClientMsg_GuideSelectOption::set_option(uint32_t value) {
  _internal_set_option(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelectOption.option)
}

// optional bool force_recalculate = 2;
inline bool CDOTAClientMsg_GuideSelectOption::_internal_has_force_recalculate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelectOption::has_force_recalculate() const {
  return _internal_has_force_recalculate();
}
inline void CDOTAClientMsg_GuideSelectOption::clear_force_recalculate() {
  _impl_.force_recalculate_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_GuideSelectOption::_internal_force_recalculate() const {
  return _impl_.force_recalculate_;
}
inline bool CDOTAClientMsg_GuideSelectOption::force_recalculate() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelectOption.force_recalculate)
  return _internal_force_recalculate();
}
inline void CDOTAClientMsg_GuideSelectOption::_internal_set_force_recalculate(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.force_recalculate_ = value;
}
inline void CDOTAClientMsg_GuideSelectOption::set_force_recalculate(bool value) {
  _internal_set_force_recalculate(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelectOption.force_recalculate)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_GuideSelected

// optional uint64 guide_workshop_id = 1;
inline bool CDOTAClientMsg_GuideSelected::_internal_has_guide_workshop_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelected::has_guide_workshop_id() const {
  return _internal_has_guide_workshop_id();
}
inline void CDOTAClientMsg_GuideSelected::clear_guide_workshop_id() {
  _impl_.guide_workshop_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CDOTAClientMsg_GuideSelected::_internal_guide_workshop_id() const {
  return _impl_.guide_workshop_id_;
}
inline uint64_t CDOTAClientMsg_GuideSelected::guide_workshop_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelected.guide_workshop_id)
  return _internal_guide_workshop_id();
}
inline void CDOTAClientMsg_GuideSelected::_internal_set_guide_workshop_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.guide_workshop_id_ = value;
}
inline void CDOTAClientMsg_GuideSelected::set_guide_workshop_id(uint64_t value) {
  _internal_set_guide_workshop_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelected.guide_workshop_id)
}

// optional bool is_plus_guide = 2;
inline bool CDOTAClientMsg_GuideSelected::_internal_has_is_plus_guide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_GuideSelected::has_is_plus_guide() const {
  return _internal_has_is_plus_guide();
}
inline void CDOTAClientMsg_GuideSelected::clear_is_plus_guide() {
  _impl_.is_plus_guide_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_GuideSelected::_internal_is_plus_guide() const {
  return _impl_.is_plus_guide_;
}
inline bool CDOTAClientMsg_GuideSelected::is_plus_guide() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_GuideSelected.is_plus_guide)
  return _internal_is_plus_guide();
}
inline void CDOTAClientMsg_GuideSelected::_internal_set_is_plus_guide(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.is_plus_guide_ = value;
}
inline void CDOTAClientMsg_GuideSelected::set_is_plus_guide(bool value) {
  _internal_set_is_plus_guide(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_GuideSelected.is_plus_guide)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_DamageReport

// optional uint32 target_hero_id = 1;
inline bool CDOTAClientMsg_DamageReport::_internal_has_target_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DamageReport::has_target_hero_id() const {
  return _internal_has_target_hero_id();
}
inline void CDOTAClientMsg_DamageReport::clear_target_hero_id() {
  _impl_.target_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_DamageReport::_internal_target_hero_id() const {
  return _impl_.target_hero_id_;
}
inline uint32_t CDOTAClientMsg_DamageReport::target_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DamageReport.target_hero_id)
  return _internal_target_hero_id();
}
inline void CDOTAClientMsg_DamageReport::_internal_set_target_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_hero_id_ = value;
}
inline void CDOTAClientMsg_DamageReport::set_target_hero_id(uint32_t value) {
  _internal_set_target_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DamageReport.target_hero_id)
}

// optional uint32 source_hero_id = 2;
inline bool CDOTAClientMsg_DamageReport::_internal_has_source_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DamageReport::has_source_hero_id() const {
  return _internal_has_source_hero_id();
}
inline void CDOTAClientMsg_DamageReport::clear_source_hero_id() {
  _impl_.source_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_DamageReport::_internal_source_hero_id() const {
  return _impl_.source_hero_id_;
}
inline uint32_t CDOTAClientMsg_DamageReport::source_hero_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DamageReport.source_hero_id)
  return _internal_source_hero_id();
}
inline void CDOTAClientMsg_DamageReport::_internal_set_source_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_hero_id_ = value;
}
inline void CDOTAClientMsg_DamageReport::set_source_hero_id(uint32_t value) {
  _internal_set_source_hero_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DamageReport.source_hero_id)
}

// optional int32 damage_amount = 3;
inline bool CDOTAClientMsg_DamageReport::_internal_has_damage_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DamageReport::has_damage_amount() const {
  return _internal_has_damage_amount();
}
inline void CDOTAClientMsg_DamageReport::clear_damage_amount() {
  _impl_.damage_amount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_DamageReport::_internal_damage_amount() const {
  return _impl_.damage_amount_;
}
inline int32_t CDOTAClientMsg_DamageReport::damage_amount() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DamageReport.damage_amount)
  return _internal_damage_amount();
}
inline void CDOTAClientMsg_DamageReport::_internal_set_damage_amount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.damage_amount_ = value;
}
inline void CDOTAClientMsg_DamageReport::set_damage_amount(int32_t value) {
  _internal_set_damage_amount(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DamageReport.damage_amount)
}

// optional bool broadcast = 4;
inline bool CDOTAClientMsg_DamageReport::_internal_has_broadcast() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DamageReport::has_broadcast() const {
  return _internal_has_broadcast();
}
inline void CDOTAClientMsg_DamageReport::clear_broadcast() {
  _impl_.broadcast_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAClientMsg_DamageReport::_internal_broadcast() const {
  return _impl_.broadcast_;
}
inline bool CDOTAClientMsg_DamageReport::broadcast() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DamageReport.broadcast)
  return _internal_broadcast();
}
inline void CDOTAClientMsg_DamageReport::_internal_set_broadcast(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.broadcast_ = value;
}
inline void CDOTAClientMsg_DamageReport::set_broadcast(bool value) {
  _internal_set_broadcast(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DamageReport.broadcast)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SalutePlayer

// optional int32 target_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_SalutePlayer::_internal_has_target_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SalutePlayer::has_target_player_id() const {
  return _internal_has_target_player_id();
}
inline void CDOTAClientMsg_SalutePlayer::clear_target_player_id() {
  _impl_.target_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_SalutePlayer::_internal_target_player_id() const {
  return _impl_.target_player_id_;
}
inline int32_t CDOTAClientMsg_SalutePlayer::target_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SalutePlayer.target_player_id)
  return _internal_target_player_id();
}
inline void CDOTAClientMsg_SalutePlayer::_internal_set_target_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_player_id_ = value;
}
inline void CDOTAClientMsg_SalutePlayer::set_target_player_id(int32_t value) {
  _internal_set_target_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SalutePlayer.target_player_id)
}

// optional int32 event_id = 2;
inline bool CDOTAClientMsg_SalutePlayer::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SalutePlayer::has_event_id() const {
  return _internal_has_event_id();
}
inline void CDOTAClientMsg_SalutePlayer::clear_event_id() {
  _impl_.event_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_SalutePlayer::_internal_event_id() const {
  return _impl_.event_id_;
}
inline int32_t CDOTAClientMsg_SalutePlayer::event_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SalutePlayer.event_id)
  return _internal_event_id();
}
inline void CDOTAClientMsg_SalutePlayer::_internal_set_event_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.event_id_ = value;
}
inline void CDOTAClientMsg_SalutePlayer::set_event_id(int32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SalutePlayer.event_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_TipAlert

// optional string tip_text = 1;
inline bool CDOTAClientMsg_TipAlert::_internal_has_tip_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_TipAlert::has_tip_text() const {
  return _internal_has_tip_text();
}
inline void CDOTAClientMsg_TipAlert::clear_tip_text() {
  _impl_.tip_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_TipAlert::tip_text() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_TipAlert.tip_text)
  return _internal_tip_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_TipAlert::set_tip_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.tip_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_TipAlert.tip_text)
}
inline std::string* CDOTAClientMsg_TipAlert::mutable_tip_text() {
  std::string* _s = _internal_mutable_tip_text();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_TipAlert.tip_text)
  return _s;
}
inline const std::string& CDOTAClientMsg_TipAlert::_internal_tip_text() const {
  return _impl_.tip_text_.Get();
}
inline void CDOTAClientMsg_TipAlert::_internal_set_tip_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tip_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_TipAlert::_internal_mutable_tip_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tip_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_TipAlert::release_tip_text() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_TipAlert.tip_text)
  if (!_internal_has_tip_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.tip_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tip_text_.IsDefault()) {
    _impl_.tip_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_TipAlert::set_allocated_tip_text(std::string* tip_text) {
  if (tip_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tip_text_.SetAllocated(tip_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.tip_text_.IsDefault()) {
    _impl_.tip_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_TipAlert.tip_text)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EmptyTeleportAlert

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_EmptyTeleportAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EmptyTeleportAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_EmptyTeleportAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_EmptyTeleportAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_EmptyTeleportAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EmptyTeleportAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_EmptyTeleportAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_EmptyTeleportAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EmptyTeleportAlert.target_entindex)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_SetCavernMapVariant

// optional uint32 map_variant = 1 [default = 255];
inline bool CDOTAClientMsg_SetCavernMapVariant::_internal_has_map_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_SetCavernMapVariant::has_map_variant() const {
  return _internal_has_map_variant();
}
inline void CDOTAClientMsg_SetCavernMapVariant::clear_map_variant() {
  _impl_.map_variant_ = 255u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_SetCavernMapVariant::_internal_map_variant() const {
  return _impl_.map_variant_;
}
inline uint32_t CDOTAClientMsg_SetCavernMapVariant::map_variant() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_SetCavernMapVariant.map_variant)
  return _internal_map_variant();
}
inline void CDOTAClientMsg_SetCavernMapVariant::_internal_set_map_variant(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.map_variant_ = value;
}
inline void CDOTAClientMsg_SetCavernMapVariant::set_map_variant(uint32_t value) {
  _internal_set_map_variant(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_SetCavernMapVariant.map_variant)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PauseGameOrder

// optional int32 order_id = 1;
inline bool CDOTAClientMsg_PauseGameOrder::_internal_has_order_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PauseGameOrder::has_order_id() const {
  return _internal_has_order_id();
}
inline void CDOTAClientMsg_PauseGameOrder::clear_order_id() {
  _impl_.order_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PauseGameOrder::_internal_order_id() const {
  return _impl_.order_id_;
}
inline int32_t CDOTAClientMsg_PauseGameOrder::order_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PauseGameOrder.order_id)
  return _internal_order_id();
}
inline void CDOTAClientMsg_PauseGameOrder::_internal_set_order_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.order_id_ = value;
}
inline void CDOTAClientMsg_PauseGameOrder::set_order_id(int32_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PauseGameOrder.order_id)
}

// optional int32 data = 2;
inline bool CDOTAClientMsg_PauseGameOrder::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PauseGameOrder::has_data() const {
  return _internal_has_data();
}
inline void CDOTAClientMsg_PauseGameOrder::clear_data() {
  _impl_.data_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_PauseGameOrder::_internal_data() const {
  return _impl_.data_;
}
inline int32_t CDOTAClientMsg_PauseGameOrder::data() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PauseGameOrder.data)
  return _internal_data();
}
inline void CDOTAClientMsg_PauseGameOrder::_internal_set_data(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.data_ = value;
}
inline void CDOTAClientMsg_PauseGameOrder::set_data(int32_t value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PauseGameOrder.data)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_VersusScene_PlayerBehavior

// optional .EDOTAVersusScenePlayerBehavior behavior = 1 [default = VS_PLAYER_BEHAVIOR_PLAY_ACTIVITY];
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_has_behavior() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::has_behavior() const {
  return _internal_has_behavior();
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::clear_behavior() {
  _impl_.behavior_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::EDOTAVersusScenePlayerBehavior CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_behavior() const {
  return static_cast< ::EDOTAVersusScenePlayerBehavior >(_impl_.behavior_);
}
inline ::EDOTAVersusScenePlayerBehavior CDOTAClientMsg_VersusScene_PlayerBehavior::behavior() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_VersusScene_PlayerBehavior.behavior)
  return _internal_behavior();
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_set_behavior(::EDOTAVersusScenePlayerBehavior value) {
  assert(::EDOTAVersusScenePlayerBehavior_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.behavior_ = value;
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::set_behavior(::EDOTAVersusScenePlayerBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_VersusScene_PlayerBehavior.behavior)
}

// optional .VersusScene_PlayActivity play_activity = 2;
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_has_play_activity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.play_activity_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::has_play_activity() const {
  return _internal_has_play_activity();
}
inline const ::VersusScene_PlayActivity& CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_play_activity() const {
  const ::VersusScene_PlayActivity* p = _impl_.play_activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::VersusScene_PlayActivity&>(
      ::_VersusScene_PlayActivity_default_instance_);
}
inline const ::VersusScene_PlayActivity& CDOTAClientMsg_VersusScene_PlayerBehavior::play_activity() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity)
  return _internal_play_activity();
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_set_allocated_play_activity(
    ::VersusScene_PlayActivity* play_activity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.play_activity_);
  }
  _impl_.play_activity_ = play_activity;
  if (play_activity) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity)
}
inline ::VersusScene_PlayActivity* CDOTAClientMsg_VersusScene_PlayerBehavior::release_play_activity() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VersusScene_PlayActivity* temp = _impl_.play_activity_;
  _impl_.play_activity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VersusScene_PlayActivity* CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_release_play_activity() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::VersusScene_PlayActivity* temp = _impl_.play_activity_;
  _impl_.play_activity_ = nullptr;
  return temp;
}
inline ::VersusScene_PlayActivity* CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_mutable_play_activity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.play_activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::VersusScene_PlayActivity>(GetArenaForAllocation());
    _impl_.play_activity_ = p;
  }
  return _impl_.play_activity_;
}
inline ::VersusScene_PlayActivity* CDOTAClientMsg_VersusScene_PlayerBehavior::mutable_play_activity() {
  ::VersusScene_PlayActivity* _msg = _internal_mutable_play_activity();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity)
  return _msg;
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::set_allocated_play_activity(::VersusScene_PlayActivity* play_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.play_activity_);
  }
  if (play_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(play_activity));
    if (message_arena != submessage_arena) {
      play_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play_activity, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.play_activity_ = play_activity;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.play_activity)
}

// optional .VersusScene_ChatWheel chat_wheel = 3;
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_has_chat_wheel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chat_wheel_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::has_chat_wheel() const {
  return _internal_has_chat_wheel();
}
inline const ::VersusScene_ChatWheel& CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_chat_wheel() const {
  const ::VersusScene_ChatWheel* p = _impl_.chat_wheel_;
  return p != nullptr ? *p : reinterpret_cast<const ::VersusScene_ChatWheel&>(
      ::_VersusScene_ChatWheel_default_instance_);
}
inline const ::VersusScene_ChatWheel& CDOTAClientMsg_VersusScene_PlayerBehavior::chat_wheel() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel)
  return _internal_chat_wheel();
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_set_allocated_chat_wheel(
    ::VersusScene_ChatWheel* chat_wheel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_wheel_);
  }
  _impl_.chat_wheel_ = chat_wheel;
  if (chat_wheel) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel)
}
inline ::VersusScene_ChatWheel* CDOTAClientMsg_VersusScene_PlayerBehavior::release_chat_wheel() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::VersusScene_ChatWheel* temp = _impl_.chat_wheel_;
  _impl_.chat_wheel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VersusScene_ChatWheel* CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_release_chat_wheel() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::VersusScene_ChatWheel* temp = _impl_.chat_wheel_;
  _impl_.chat_wheel_ = nullptr;
  return temp;
}
inline ::VersusScene_ChatWheel* CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_mutable_chat_wheel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chat_wheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::VersusScene_ChatWheel>(GetArenaForAllocation());
    _impl_.chat_wheel_ = p;
  }
  return _impl_.chat_wheel_;
}
inline ::VersusScene_ChatWheel* CDOTAClientMsg_VersusScene_PlayerBehavior::mutable_chat_wheel() {
  ::VersusScene_ChatWheel* _msg = _internal_mutable_chat_wheel();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel)
  return _msg;
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::set_allocated_chat_wheel(::VersusScene_ChatWheel* chat_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_wheel_);
  }
  if (chat_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_wheel));
    if (message_arena != submessage_arena) {
      chat_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_wheel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chat_wheel_ = chat_wheel;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.chat_wheel)
}

// optional .VersusScene_PlaybackRate playback_rate = 4;
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_has_playback_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.playback_rate_ != nullptr);
  return value;
}
inline bool CDOTAClientMsg_VersusScene_PlayerBehavior::has_playback_rate() const {
  return _internal_has_playback_rate();
}
inline const ::VersusScene_PlaybackRate& CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_playback_rate() const {
  const ::VersusScene_PlaybackRate* p = _impl_.playback_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::VersusScene_PlaybackRate&>(
      ::_VersusScene_PlaybackRate_default_instance_);
}
inline const ::VersusScene_PlaybackRate& CDOTAClientMsg_VersusScene_PlayerBehavior::playback_rate() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate)
  return _internal_playback_rate();
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_set_allocated_playback_rate(
    ::VersusScene_PlaybackRate* playback_rate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playback_rate_);
  }
  _impl_.playback_rate_ = playback_rate;
  if (playback_rate) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate)
}
inline ::VersusScene_PlaybackRate* CDOTAClientMsg_VersusScene_PlayerBehavior::release_playback_rate() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::VersusScene_PlaybackRate* temp = _impl_.playback_rate_;
  _impl_.playback_rate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VersusScene_PlaybackRate* CDOTAClientMsg_VersusScene_PlayerBehavior::unsafe_arena_release_playback_rate() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::VersusScene_PlaybackRate* temp = _impl_.playback_rate_;
  _impl_.playback_rate_ = nullptr;
  return temp;
}
inline ::VersusScene_PlaybackRate* CDOTAClientMsg_VersusScene_PlayerBehavior::_internal_mutable_playback_rate() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.playback_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::VersusScene_PlaybackRate>(GetArenaForAllocation());
    _impl_.playback_rate_ = p;
  }
  return _impl_.playback_rate_;
}
inline ::VersusScene_PlaybackRate* CDOTAClientMsg_VersusScene_PlayerBehavior::mutable_playback_rate() {
  ::VersusScene_PlaybackRate* _msg = _internal_mutable_playback_rate();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate)
  return _msg;
}
inline void CDOTAClientMsg_VersusScene_PlayerBehavior::set_allocated_playback_rate(::VersusScene_PlaybackRate* playback_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.playback_rate_);
  }
  if (playback_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(playback_rate));
    if (message_arena != submessage_arena) {
      playback_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, playback_rate, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.playback_rate_ = playback_rate;
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_VersusScene_PlayerBehavior.playback_rate)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_EmptyItemSlotAlert

// optional int32 target_entindex = 1 [default = -1];
inline bool CDOTAClientMsg_EmptyItemSlotAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EmptyItemSlotAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_EmptyItemSlotAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_EmptyItemSlotAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EmptyItemSlotAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EmptyItemSlotAlert.target_entindex)
}

// optional int32 slot_index = 2;
inline bool CDOTAClientMsg_EmptyItemSlotAlert::_internal_has_slot_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_EmptyItemSlotAlert::has_slot_index() const {
  return _internal_has_slot_index();
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::clear_slot_index() {
  _impl_.slot_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_EmptyItemSlotAlert::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t CDOTAClientMsg_EmptyItemSlotAlert::slot_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_EmptyItemSlotAlert.slot_index)
  return _internal_slot_index();
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::_internal_set_slot_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.slot_index_ = value;
}
inline void CDOTAClientMsg_EmptyItemSlotAlert::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_EmptyItemSlotAlert.slot_index)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AddOverwatchReportMarker

// optional int32 target_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_AddOverwatchReportMarker::_internal_has_target_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AddOverwatchReportMarker::has_target_player_id() const {
  return _internal_has_target_player_id();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::clear_target_player_id() {
  _impl_.target_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_AddOverwatchReportMarker::_internal_target_player_id() const {
  return _impl_.target_player_id_;
}
inline int32_t CDOTAClientMsg_AddOverwatchReportMarker::target_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AddOverwatchReportMarker.target_player_id)
  return _internal_target_player_id();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::_internal_set_target_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_player_id_ = value;
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::set_target_player_id(int32_t value) {
  _internal_set_target_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AddOverwatchReportMarker.target_player_id)
}

// optional .EOverwatchReportReason reason = 2 [default = k_EOverwatchReportReason_Unknown];
inline bool CDOTAClientMsg_AddOverwatchReportMarker::_internal_has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AddOverwatchReportMarker::has_reason() const {
  return _internal_has_reason();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::clear_reason() {
  _impl_.reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::EOverwatchReportReason CDOTAClientMsg_AddOverwatchReportMarker::_internal_reason() const {
  return static_cast< ::EOverwatchReportReason >(_impl_.reason_);
}
inline ::EOverwatchReportReason CDOTAClientMsg_AddOverwatchReportMarker::reason() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AddOverwatchReportMarker.reason)
  return _internal_reason();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::_internal_set_reason(::EOverwatchReportReason value) {
  assert(::EOverwatchReportReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.reason_ = value;
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::set_reason(::EOverwatchReportReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AddOverwatchReportMarker.reason)
}

// optional uint32 seconds_ago = 4;
inline bool CDOTAClientMsg_AddOverwatchReportMarker::_internal_has_seconds_ago() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AddOverwatchReportMarker::has_seconds_ago() const {
  return _internal_has_seconds_ago();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::clear_seconds_ago() {
  _impl_.seconds_ago_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_AddOverwatchReportMarker::_internal_seconds_ago() const {
  return _impl_.seconds_ago_;
}
inline uint32_t CDOTAClientMsg_AddOverwatchReportMarker::seconds_ago() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AddOverwatchReportMarker.seconds_ago)
  return _internal_seconds_ago();
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::_internal_set_seconds_ago(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.seconds_ago_ = value;
}
inline void CDOTAClientMsg_AddOverwatchReportMarker::set_seconds_ago(uint32_t value) {
  _internal_set_seconds_ago(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AddOverwatchReportMarker.seconds_ago)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AddCommunicationsReportMarker

// optional int32 target_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_AddCommunicationsReportMarker::_internal_has_target_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AddCommunicationsReportMarker::has_target_player_id() const {
  return _internal_has_target_player_id();
}
inline void CDOTAClientMsg_AddCommunicationsReportMarker::clear_target_player_id() {
  _impl_.target_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_AddCommunicationsReportMarker::_internal_target_player_id() const {
  return _impl_.target_player_id_;
}
inline int32_t CDOTAClientMsg_AddCommunicationsReportMarker::target_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AddCommunicationsReportMarker.target_player_id)
  return _internal_target_player_id();
}
inline void CDOTAClientMsg_AddCommunicationsReportMarker::_internal_set_target_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_player_id_ = value;
}
inline void CDOTAClientMsg_AddCommunicationsReportMarker::set_target_player_id(int32_t value) {
  _internal_set_target_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AddCommunicationsReportMarker.target_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AddCommunicationsBlockMarker

// optional int32 target_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_AddCommunicationsBlockMarker::_internal_has_target_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AddCommunicationsBlockMarker::has_target_player_id() const {
  return _internal_has_target_player_id();
}
inline void CDOTAClientMsg_AddCommunicationsBlockMarker::clear_target_player_id() {
  _impl_.target_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_AddCommunicationsBlockMarker::_internal_target_player_id() const {
  return _impl_.target_player_id_;
}
inline int32_t CDOTAClientMsg_AddCommunicationsBlockMarker::target_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AddCommunicationsBlockMarker.target_player_id)
  return _internal_target_player_id();
}
inline void CDOTAClientMsg_AddCommunicationsBlockMarker::_internal_set_target_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_player_id_ = value;
}
inline void CDOTAClientMsg_AddCommunicationsBlockMarker::set_target_player_id(int32_t value) {
  _internal_set_target_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AddCommunicationsBlockMarker.target_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AghsStatusAlert

// optional int32 source_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_AghsStatusAlert::_internal_has_source_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AghsStatusAlert::has_source_player_id() const {
  return _internal_has_source_player_id();
}
inline void CDOTAClientMsg_AghsStatusAlert::clear_source_player_id() {
  _impl_.source_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::_internal_source_player_id() const {
  return _impl_.source_player_id_;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::source_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AghsStatusAlert.source_player_id)
  return _internal_source_player_id();
}
inline void CDOTAClientMsg_AghsStatusAlert::_internal_set_source_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_player_id_ = value;
}
inline void CDOTAClientMsg_AghsStatusAlert::set_source_player_id(int32_t value) {
  _internal_set_source_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AghsStatusAlert.source_player_id)
}

// optional int32 target_player_id = 2 [default = -1];
inline bool CDOTAClientMsg_AghsStatusAlert::_internal_has_target_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AghsStatusAlert::has_target_player_id() const {
  return _internal_has_target_player_id();
}
inline void CDOTAClientMsg_AghsStatusAlert::clear_target_player_id() {
  _impl_.target_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::_internal_target_player_id() const {
  return _impl_.target_player_id_;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::target_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AghsStatusAlert.target_player_id)
  return _internal_target_player_id();
}
inline void CDOTAClientMsg_AghsStatusAlert::_internal_set_target_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.target_player_id_ = value;
}
inline void CDOTAClientMsg_AghsStatusAlert::set_target_player_id(int32_t value) {
  _internal_set_target_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AghsStatusAlert.target_player_id)
}

// optional int32 target_entindex = 3 [default = -1];
inline bool CDOTAClientMsg_AghsStatusAlert::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AghsStatusAlert::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_AghsStatusAlert::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_AghsStatusAlert::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AghsStatusAlert.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_AghsStatusAlert::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_AghsStatusAlert::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AghsStatusAlert.target_entindex)
}

// optional uint32 alert_type = 4;
inline bool CDOTAClientMsg_AghsStatusAlert::_internal_has_alert_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AghsStatusAlert::has_alert_type() const {
  return _internal_has_alert_type();
}
inline void CDOTAClientMsg_AghsStatusAlert::clear_alert_type() {
  _impl_.alert_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CDOTAClientMsg_AghsStatusAlert::_internal_alert_type() const {
  return _impl_.alert_type_;
}
inline uint32_t CDOTAClientMsg_AghsStatusAlert::alert_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AghsStatusAlert.alert_type)
  return _internal_alert_type();
}
inline void CDOTAClientMsg_AghsStatusAlert::_internal_set_alert_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.alert_type_ = value;
}
inline void CDOTAClientMsg_AghsStatusAlert::set_alert_type(uint32_t value) {
  _internal_set_alert_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AghsStatusAlert.alert_type)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PerfReport

// optional float average_frame_time = 1;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_frame_time() const {
  return _internal_has_average_frame_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_frame_time() {
  _impl_.average_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_frame_time() const {
  return _impl_.average_frame_time_;
}
inline float CDOTAClientMsg_PerfReport::average_frame_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_frame_time)
  return _internal_average_frame_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.average_frame_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_frame_time(float value) {
  _internal_set_average_frame_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_frame_time)
}

// optional float max_frame_time = 2;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_frame_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_frame_time() const {
  return _internal_has_max_frame_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_frame_time() {
  _impl_.max_frame_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_frame_time() const {
  return _impl_.max_frame_time_;
}
inline float CDOTAClientMsg_PerfReport::max_frame_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_frame_time)
  return _internal_max_frame_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_frame_time(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_frame_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_frame_time(float value) {
  _internal_set_max_frame_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_frame_time)
}

// optional float average_compute_time = 3;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_compute_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_compute_time() const {
  return _internal_has_average_compute_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_compute_time() {
  _impl_.average_compute_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_compute_time() const {
  return _impl_.average_compute_time_;
}
inline float CDOTAClientMsg_PerfReport::average_compute_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_compute_time)
  return _internal_average_compute_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_compute_time(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.average_compute_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_compute_time(float value) {
  _internal_set_average_compute_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_compute_time)
}

// optional float max_compute_time = 4;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_compute_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_compute_time() const {
  return _internal_has_max_compute_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_compute_time() {
  _impl_.max_compute_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_compute_time() const {
  return _impl_.max_compute_time_;
}
inline float CDOTAClientMsg_PerfReport::max_compute_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_compute_time)
  return _internal_max_compute_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_compute_time(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_compute_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_compute_time(float value) {
  _internal_set_max_compute_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_compute_time)
}

// optional float average_client_tick_time = 5;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_client_tick_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_client_tick_time() const {
  return _internal_has_average_client_tick_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_client_tick_time() {
  _impl_.average_client_tick_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_client_tick_time() const {
  return _impl_.average_client_tick_time_;
}
inline float CDOTAClientMsg_PerfReport::average_client_tick_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_client_tick_time)
  return _internal_average_client_tick_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_client_tick_time(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.average_client_tick_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_client_tick_time(float value) {
  _internal_set_average_client_tick_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_client_tick_time)
}

// optional float max_client_tick_time = 6;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_client_tick_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_client_tick_time() const {
  return _internal_has_max_client_tick_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_client_tick_time() {
  _impl_.max_client_tick_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_client_tick_time() const {
  return _impl_.max_client_tick_time_;
}
inline float CDOTAClientMsg_PerfReport::max_client_tick_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_client_tick_time)
  return _internal_max_client_tick_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_client_tick_time(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_client_tick_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_client_tick_time(float value) {
  _internal_set_max_client_tick_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_client_tick_time)
}

// optional float average_client_simulate_time = 7;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_client_simulate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_client_simulate_time() const {
  return _internal_has_average_client_simulate_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_client_simulate_time() {
  _impl_.average_client_simulate_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_client_simulate_time() const {
  return _impl_.average_client_simulate_time_;
}
inline float CDOTAClientMsg_PerfReport::average_client_simulate_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_client_simulate_time)
  return _internal_average_client_simulate_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_client_simulate_time(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.average_client_simulate_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_client_simulate_time(float value) {
  _internal_set_average_client_simulate_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_client_simulate_time)
}

// optional float max_client_simulate_time = 8;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_client_simulate_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_client_simulate_time() const {
  return _internal_has_max_client_simulate_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_client_simulate_time() {
  _impl_.max_client_simulate_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_client_simulate_time() const {
  return _impl_.max_client_simulate_time_;
}
inline float CDOTAClientMsg_PerfReport::max_client_simulate_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_client_simulate_time)
  return _internal_max_client_simulate_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_client_simulate_time(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_client_simulate_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_client_simulate_time(float value) {
  _internal_set_max_client_simulate_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_client_simulate_time)
}

// optional float average_output_time = 9;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_output_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_output_time() const {
  return _internal_has_average_output_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_output_time() {
  _impl_.average_output_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_output_time() const {
  return _impl_.average_output_time_;
}
inline float CDOTAClientMsg_PerfReport::average_output_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_output_time)
  return _internal_average_output_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_output_time(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.average_output_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_output_time(float value) {
  _internal_set_average_output_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_output_time)
}

// optional float max_output_time = 10;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_output_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_output_time() const {
  return _internal_has_max_output_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_output_time() {
  _impl_.max_output_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_output_time() const {
  return _impl_.max_output_time_;
}
inline float CDOTAClientMsg_PerfReport::max_output_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_output_time)
  return _internal_max_output_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_output_time(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_output_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_output_time(float value) {
  _internal_set_max_output_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_output_time)
}

// optional float average_wait_for_rendering_to_complete_time = 11;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_wait_for_rendering_to_complete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_wait_for_rendering_to_complete_time() const {
  return _internal_has_average_wait_for_rendering_to_complete_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_wait_for_rendering_to_complete_time() {
  _impl_.average_wait_for_rendering_to_complete_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_wait_for_rendering_to_complete_time() const {
  return _impl_.average_wait_for_rendering_to_complete_time_;
}
inline float CDOTAClientMsg_PerfReport::average_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_wait_for_rendering_to_complete_time)
  return _internal_average_wait_for_rendering_to_complete_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_wait_for_rendering_to_complete_time(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.average_wait_for_rendering_to_complete_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_wait_for_rendering_to_complete_time(float value) {
  _internal_set_average_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_wait_for_rendering_to_complete_time)
}

// optional float max_wait_for_rendering_to_complete_time = 12;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_wait_for_rendering_to_complete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_wait_for_rendering_to_complete_time() const {
  return _internal_has_max_wait_for_rendering_to_complete_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_wait_for_rendering_to_complete_time() {
  _impl_.max_wait_for_rendering_to_complete_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_wait_for_rendering_to_complete_time() const {
  return _impl_.max_wait_for_rendering_to_complete_time_;
}
inline float CDOTAClientMsg_PerfReport::max_wait_for_rendering_to_complete_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_wait_for_rendering_to_complete_time)
  return _internal_max_wait_for_rendering_to_complete_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_wait_for_rendering_to_complete_time(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_wait_for_rendering_to_complete_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_wait_for_rendering_to_complete_time(float value) {
  _internal_set_max_wait_for_rendering_to_complete_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_wait_for_rendering_to_complete_time)
}

// optional float average_swap_time = 13;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_swap_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_swap_time() const {
  return _internal_has_average_swap_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_swap_time() {
  _impl_.average_swap_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_swap_time() const {
  return _impl_.average_swap_time_;
}
inline float CDOTAClientMsg_PerfReport::average_swap_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_swap_time)
  return _internal_average_swap_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_swap_time(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.average_swap_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_swap_time(float value) {
  _internal_set_average_swap_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_swap_time)
}

// optional float max_swap_time = 14;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_swap_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_swap_time() const {
  return _internal_has_max_swap_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_swap_time() {
  _impl_.max_swap_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_swap_time() const {
  return _impl_.max_swap_time_;
}
inline float CDOTAClientMsg_PerfReport::max_swap_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_swap_time)
  return _internal_max_swap_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_swap_time(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_swap_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_swap_time(float value) {
  _internal_set_max_swap_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_swap_time)
}

// optional float average_frame_update_time = 15;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_frame_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_frame_update_time() const {
  return _internal_has_average_frame_update_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_frame_update_time() {
  _impl_.average_frame_update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_frame_update_time() const {
  return _impl_.average_frame_update_time_;
}
inline float CDOTAClientMsg_PerfReport::average_frame_update_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_frame_update_time)
  return _internal_average_frame_update_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_frame_update_time(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.average_frame_update_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_frame_update_time(float value) {
  _internal_set_average_frame_update_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_frame_update_time)
}

// optional float max_frame_update_time = 16;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_frame_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_frame_update_time() const {
  return _internal_has_max_frame_update_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_frame_update_time() {
  _impl_.max_frame_update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_frame_update_time() const {
  return _impl_.max_frame_update_time_;
}
inline float CDOTAClientMsg_PerfReport::max_frame_update_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_frame_update_time)
  return _internal_max_frame_update_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_frame_update_time(float value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.max_frame_update_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_frame_update_time(float value) {
  _internal_set_max_frame_update_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_frame_update_time)
}

// optional float average_idle_time = 17;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_idle_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_idle_time() const {
  return _internal_has_average_idle_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_idle_time() {
  _impl_.average_idle_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_idle_time() const {
  return _impl_.average_idle_time_;
}
inline float CDOTAClientMsg_PerfReport::average_idle_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_idle_time)
  return _internal_average_idle_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_idle_time(float value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.average_idle_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_idle_time(float value) {
  _internal_set_average_idle_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_idle_time)
}

// optional float max_idle_time = 18;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_idle_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_idle_time() const {
  return _internal_has_max_idle_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_idle_time() {
  _impl_.max_idle_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_idle_time() const {
  return _impl_.max_idle_time_;
}
inline float CDOTAClientMsg_PerfReport::max_idle_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_idle_time)
  return _internal_max_idle_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_idle_time(float value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.max_idle_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_idle_time(float value) {
  _internal_set_max_idle_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_idle_time)
}

// optional float average_input_processing_time = 19;
inline bool CDOTAClientMsg_PerfReport::_internal_has_average_input_processing_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_average_input_processing_time() const {
  return _internal_has_average_input_processing_time();
}
inline void CDOTAClientMsg_PerfReport::clear_average_input_processing_time() {
  _impl_.average_input_processing_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_average_input_processing_time() const {
  return _impl_.average_input_processing_time_;
}
inline float CDOTAClientMsg_PerfReport::average_input_processing_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.average_input_processing_time)
  return _internal_average_input_processing_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_average_input_processing_time(float value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.average_input_processing_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_average_input_processing_time(float value) {
  _internal_set_average_input_processing_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.average_input_processing_time)
}

// optional float max_input_processing_time = 20;
inline bool CDOTAClientMsg_PerfReport::_internal_has_max_input_processing_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PerfReport::has_max_input_processing_time() const {
  return _internal_has_max_input_processing_time();
}
inline void CDOTAClientMsg_PerfReport::clear_max_input_processing_time() {
  _impl_.max_input_processing_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline float CDOTAClientMsg_PerfReport::_internal_max_input_processing_time() const {
  return _impl_.max_input_processing_time_;
}
inline float CDOTAClientMsg_PerfReport::max_input_processing_time() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PerfReport.max_input_processing_time)
  return _internal_max_input_processing_time();
}
inline void CDOTAClientMsg_PerfReport::_internal_set_max_input_processing_time(float value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.max_input_processing_time_ = value;
}
inline void CDOTAClientMsg_PerfReport::set_max_input_processing_time(float value) {
  _internal_set_max_input_processing_time(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PerfReport.max_input_processing_time)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ContextualTips_Subscribe_Entry

// optional bool unsubscribe = 1;
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_has_unsubscribe() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::has_unsubscribe() const {
  return _internal_has_unsubscribe();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::clear_unsubscribe() {
  _impl_.unsubscribe_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_unsubscribe() const {
  return _impl_.unsubscribe_;
}
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::unsubscribe() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ContextualTips_Subscribe_Entry.unsubscribe)
  return _internal_unsubscribe();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_set_unsubscribe(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.unsubscribe_ = value;
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::set_unsubscribe(bool value) {
  _internal_set_unsubscribe(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ContextualTips_Subscribe_Entry.unsubscribe)
}

// optional int32 tip_id = 2;
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_has_tip_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::has_tip_id() const {
  return _internal_has_tip_id();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::clear_tip_id() {
  _impl_.tip_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_tip_id() const {
  return _impl_.tip_id_;
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::tip_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ContextualTips_Subscribe_Entry.tip_id)
  return _internal_tip_id();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_set_tip_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.tip_id_ = value;
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::set_tip_id(int32_t value) {
  _internal_set_tip_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ContextualTips_Subscribe_Entry.tip_id)
}

// optional int32 prior_display_count = 3;
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_has_prior_display_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ContextualTips_Subscribe_Entry::has_prior_display_count() const {
  return _internal_has_prior_display_count();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::clear_prior_display_count() {
  _impl_.prior_display_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_prior_display_count() const {
  return _impl_.prior_display_count_;
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::prior_display_count() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ContextualTips_Subscribe_Entry.prior_display_count)
  return _internal_prior_display_count();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_set_prior_display_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prior_display_count_ = value;
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::set_prior_display_count(int32_t value) {
  _internal_set_prior_display_count(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ContextualTips_Subscribe_Entry.prior_display_count)
}

// repeated int32 variants_seen = 4;
inline int CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_variants_seen_size() const {
  return _impl_.variants_seen_.size();
}
inline int CDOTAClientMsg_ContextualTips_Subscribe_Entry::variants_seen_size() const {
  return _internal_variants_seen_size();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::clear_variants_seen() {
  _impl_.variants_seen_.Clear();
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_variants_seen(int index) const {
  return _impl_.variants_seen_.Get(index);
}
inline int32_t CDOTAClientMsg_ContextualTips_Subscribe_Entry::variants_seen(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ContextualTips_Subscribe_Entry.variants_seen)
  return _internal_variants_seen(index);
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::set_variants_seen(int index, int32_t value) {
  _impl_.variants_seen_.Set(index, value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ContextualTips_Subscribe_Entry.variants_seen)
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_add_variants_seen(int32_t value) {
  _impl_.variants_seen_.Add(value);
}
inline void CDOTAClientMsg_ContextualTips_Subscribe_Entry::add_variants_seen(int32_t value) {
  _internal_add_variants_seen(value);
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_ContextualTips_Subscribe_Entry.variants_seen)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_variants_seen() const {
  return _impl_.variants_seen_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CDOTAClientMsg_ContextualTips_Subscribe_Entry::variants_seen() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_ContextualTips_Subscribe_Entry.variants_seen)
  return _internal_variants_seen();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAClientMsg_ContextualTips_Subscribe_Entry::_internal_mutable_variants_seen() {
  return &_impl_.variants_seen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CDOTAClientMsg_ContextualTips_Subscribe_Entry::mutable_variants_seen() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_ContextualTips_Subscribe_Entry.variants_seen)
  return _internal_mutable_variants_seen();
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ContextualTips_Subscribe

// repeated .CDOTAClientMsg_ContextualTips_Subscribe_Entry tips = 1;
inline int CDOTAClientMsg_ContextualTips_Subscribe::_internal_tips_size() const {
  return _impl_.tips_.size();
}
inline int CDOTAClientMsg_ContextualTips_Subscribe::tips_size() const {
  return _internal_tips_size();
}
inline void CDOTAClientMsg_ContextualTips_Subscribe::clear_tips() {
  _impl_.tips_.Clear();
}
inline ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* CDOTAClientMsg_ContextualTips_Subscribe::mutable_tips(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_ContextualTips_Subscribe.tips)
  return _impl_.tips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >*
CDOTAClientMsg_ContextualTips_Subscribe::mutable_tips() {
  // @@protoc_insertion_point(field_mutable_list:CDOTAClientMsg_ContextualTips_Subscribe.tips)
  return &_impl_.tips_;
}
inline const ::CDOTAClientMsg_ContextualTips_Subscribe_Entry& CDOTAClientMsg_ContextualTips_Subscribe::_internal_tips(int index) const {
  return _impl_.tips_.Get(index);
}
inline const ::CDOTAClientMsg_ContextualTips_Subscribe_Entry& CDOTAClientMsg_ContextualTips_Subscribe::tips(int index) const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ContextualTips_Subscribe.tips)
  return _internal_tips(index);
}
inline ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* CDOTAClientMsg_ContextualTips_Subscribe::_internal_add_tips() {
  return _impl_.tips_.Add();
}
inline ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* CDOTAClientMsg_ContextualTips_Subscribe::add_tips() {
  ::CDOTAClientMsg_ContextualTips_Subscribe_Entry* _add = _internal_add_tips();
  // @@protoc_insertion_point(field_add:CDOTAClientMsg_ContextualTips_Subscribe.tips)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTAClientMsg_ContextualTips_Subscribe_Entry >&
CDOTAClientMsg_ContextualTips_Subscribe::tips() const {
  // @@protoc_insertion_point(field_list:CDOTAClientMsg_ContextualTips_Subscribe.tips)
  return _impl_.tips_;
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ChatMessage

// optional uint32 channel_type = 1;
inline bool CDOTAClientMsg_ChatMessage::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChatMessage::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CDOTAClientMsg_ChatMessage::clear_channel_type() {
  _impl_.channel_type_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_ChatMessage::_internal_channel_type() const {
  return _impl_.channel_type_;
}
inline uint32_t CDOTAClientMsg_ChatMessage::channel_type() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatMessage.channel_type)
  return _internal_channel_type();
}
inline void CDOTAClientMsg_ChatMessage::_internal_set_channel_type(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_type_ = value;
}
inline void CDOTAClientMsg_ChatMessage::set_channel_type(uint32_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatMessage.channel_type)
}

// optional string message_text = 2;
inline bool CDOTAClientMsg_ChatMessage::_internal_has_message_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChatMessage::has_message_text() const {
  return _internal_has_message_text();
}
inline void CDOTAClientMsg_ChatMessage::clear_message_text() {
  _impl_.message_text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTAClientMsg_ChatMessage::message_text() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChatMessage.message_text)
  return _internal_message_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CDOTAClientMsg_ChatMessage::set_message_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.message_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChatMessage.message_text)
}
inline std::string* CDOTAClientMsg_ChatMessage::mutable_message_text() {
  std::string* _s = _internal_mutable_message_text();
  // @@protoc_insertion_point(field_mutable:CDOTAClientMsg_ChatMessage.message_text)
  return _s;
}
inline const std::string& CDOTAClientMsg_ChatMessage::_internal_message_text() const {
  return _impl_.message_text_.Get();
}
inline void CDOTAClientMsg_ChatMessage::_internal_set_message_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_ChatMessage::_internal_mutable_message_text() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CDOTAClientMsg_ChatMessage::release_message_text() {
  // @@protoc_insertion_point(field_release:CDOTAClientMsg_ChatMessage.message_text)
  if (!_internal_has_message_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.message_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_text_.IsDefault()) {
    _impl_.message_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CDOTAClientMsg_ChatMessage::set_allocated_message_text(std::string* message_text) {
  if (message_text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_text_.SetAllocated(message_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_text_.IsDefault()) {
    _impl_.message_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CDOTAClientMsg_ChatMessage.message_text)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_DuelAccepted

// optional int32 challenger_player_id = 1 [default = -1];
inline bool CDOTAClientMsg_DuelAccepted::_internal_has_challenger_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DuelAccepted::has_challenger_player_id() const {
  return _internal_has_challenger_player_id();
}
inline void CDOTAClientMsg_DuelAccepted::clear_challenger_player_id() {
  _impl_.challenger_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_DuelAccepted::_internal_challenger_player_id() const {
  return _impl_.challenger_player_id_;
}
inline int32_t CDOTAClientMsg_DuelAccepted::challenger_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DuelAccepted.challenger_player_id)
  return _internal_challenger_player_id();
}
inline void CDOTAClientMsg_DuelAccepted::_internal_set_challenger_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.challenger_player_id_ = value;
}
inline void CDOTAClientMsg_DuelAccepted::set_challenger_player_id(int32_t value) {
  _internal_set_challenger_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DuelAccepted.challenger_player_id)
}

// optional int32 accepter_player_id = 2 [default = -1];
inline bool CDOTAClientMsg_DuelAccepted::_internal_has_accepter_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_DuelAccepted::has_accepter_player_id() const {
  return _internal_has_accepter_player_id();
}
inline void CDOTAClientMsg_DuelAccepted::clear_accepter_player_id() {
  _impl_.accepter_player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_DuelAccepted::_internal_accepter_player_id() const {
  return _impl_.accepter_player_id_;
}
inline int32_t CDOTAClientMsg_DuelAccepted::accepter_player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_DuelAccepted.accepter_player_id)
  return _internal_accepter_player_id();
}
inline void CDOTAClientMsg_DuelAccepted::_internal_set_accepter_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.accepter_player_id_ = value;
}
inline void CDOTAClientMsg_DuelAccepted::set_accepter_player_id(int32_t value) {
  _internal_set_accepter_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_DuelAccepted.accepter_player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_ChooseNeutralItem

// optional int32 neutral_item_index = 1;
inline bool CDOTAClientMsg_ChooseNeutralItem::_internal_has_neutral_item_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChooseNeutralItem::has_neutral_item_index() const {
  return _internal_has_neutral_item_index();
}
inline void CDOTAClientMsg_ChooseNeutralItem::clear_neutral_item_index() {
  _impl_.neutral_item_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::_internal_neutral_item_index() const {
  return _impl_.neutral_item_index_;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::neutral_item_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChooseNeutralItem.neutral_item_index)
  return _internal_neutral_item_index();
}
inline void CDOTAClientMsg_ChooseNeutralItem::_internal_set_neutral_item_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.neutral_item_index_ = value;
}
inline void CDOTAClientMsg_ChooseNeutralItem::set_neutral_item_index(int32_t value) {
  _internal_set_neutral_item_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChooseNeutralItem.neutral_item_index)
}

// optional int32 target_entindex = 2 [default = -1];
inline bool CDOTAClientMsg_ChooseNeutralItem::_internal_has_target_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChooseNeutralItem::has_target_entindex() const {
  return _internal_has_target_entindex();
}
inline void CDOTAClientMsg_ChooseNeutralItem::clear_target_entindex() {
  _impl_.target_entindex_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::_internal_target_entindex() const {
  return _impl_.target_entindex_;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::target_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChooseNeutralItem.target_entindex)
  return _internal_target_entindex();
}
inline void CDOTAClientMsg_ChooseNeutralItem::_internal_set_target_entindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_entindex_ = value;
}
inline void CDOTAClientMsg_ChooseNeutralItem::set_target_entindex(int32_t value) {
  _internal_set_target_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChooseNeutralItem.target_entindex)
}

// optional int32 slot_index = 3;
inline bool CDOTAClientMsg_ChooseNeutralItem::_internal_has_slot_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_ChooseNeutralItem::has_slot_index() const {
  return _internal_has_slot_index();
}
inline void CDOTAClientMsg_ChooseNeutralItem::clear_slot_index() {
  _impl_.slot_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t CDOTAClientMsg_ChooseNeutralItem::slot_index() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_ChooseNeutralItem.slot_index)
  return _internal_slot_index();
}
inline void CDOTAClientMsg_ChooseNeutralItem::_internal_set_slot_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.slot_index_ = value;
}
inline void CDOTAClientMsg_ChooseNeutralItem::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_ChooseNeutralItem.slot_index)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerDraftPick

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_PlayerDraftPick::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerDraftPick::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_PlayerDraftPick::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PlayerDraftPick::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_PlayerDraftPick::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerDraftPick.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_PlayerDraftPick::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_PlayerDraftPick::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerDraftPick.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerDraftSuggest

// optional int32 player_id = 1 [default = -1];
inline bool CDOTAClientMsg_PlayerDraftSuggest::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerDraftSuggest::has_player_id() const {
  return _internal_has_player_id();
}
inline void CDOTAClientMsg_PlayerDraftSuggest::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PlayerDraftSuggest::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CDOTAClientMsg_PlayerDraftSuggest::player_id() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerDraftSuggest.player_id)
  return _internal_player_id();
}
inline void CDOTAClientMsg_PlayerDraftSuggest::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.player_id_ = value;
}
inline void CDOTAClientMsg_PlayerDraftSuggest::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerDraftSuggest.player_id)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerDraftPreferRole

// optional int32 role_idx = 1;
inline bool CDOTAClientMsg_PlayerDraftPreferRole::_internal_has_role_idx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerDraftPreferRole::has_role_idx() const {
  return _internal_has_role_idx();
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::clear_role_idx() {
  _impl_.role_idx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PlayerDraftPreferRole::_internal_role_idx() const {
  return _impl_.role_idx_;
}
inline int32_t CDOTAClientMsg_PlayerDraftPreferRole::role_idx() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerDraftPreferRole.role_idx)
  return _internal_role_idx();
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::_internal_set_role_idx(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.role_idx_ = value;
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::set_role_idx(int32_t value) {
  _internal_set_role_idx(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerDraftPreferRole.role_idx)
}

// optional bool desired = 2;
inline bool CDOTAClientMsg_PlayerDraftPreferRole::_internal_has_desired() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerDraftPreferRole::has_desired() const {
  return _internal_has_desired();
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::clear_desired() {
  _impl_.desired_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CDOTAClientMsg_PlayerDraftPreferRole::_internal_desired() const {
  return _impl_.desired_;
}
inline bool CDOTAClientMsg_PlayerDraftPreferRole::desired() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerDraftPreferRole.desired)
  return _internal_desired();
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::_internal_set_desired(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.desired_ = value;
}
inline void CDOTAClientMsg_PlayerDraftPreferRole::set_desired(bool value) {
  _internal_set_desired(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerDraftPreferRole.desired)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_PlayerDraftPreferTeam

// optional int32 team = 1;
inline bool CDOTAClientMsg_PlayerDraftPreferTeam::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_PlayerDraftPreferTeam::has_team() const {
  return _internal_has_team();
}
inline void CDOTAClientMsg_PlayerDraftPreferTeam::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CDOTAClientMsg_PlayerDraftPreferTeam::_internal_team() const {
  return _impl_.team_;
}
inline int32_t CDOTAClientMsg_PlayerDraftPreferTeam::team() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_PlayerDraftPreferTeam.team)
  return _internal_team();
}
inline void CDOTAClientMsg_PlayerDraftPreferTeam::_internal_set_team(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CDOTAClientMsg_PlayerDraftPreferTeam::set_team(int32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_PlayerDraftPreferTeam.team)
}

// -------------------------------------------------------------------

// CDOTAClientMsg_AbilityAlert

// optional uint32 ability_entindex = 1 [default = 16777215];
inline bool CDOTAClientMsg_AbilityAlert::_internal_has_ability_entindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AbilityAlert::has_ability_entindex() const {
  return _internal_has_ability_entindex();
}
inline void CDOTAClientMsg_AbilityAlert::clear_ability_entindex() {
  _impl_.ability_entindex_ = 16777215u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CDOTAClientMsg_AbilityAlert::_internal_ability_entindex() const {
  return _impl_.ability_entindex_;
}
inline uint32_t CDOTAClientMsg_AbilityAlert::ability_entindex() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AbilityAlert.ability_entindex)
  return _internal_ability_entindex();
}
inline void CDOTAClientMsg_AbilityAlert::_internal_set_ability_entindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ability_entindex_ = value;
}
inline void CDOTAClientMsg_AbilityAlert::set_ability_entindex(uint32_t value) {
  _internal_set_ability_entindex(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AbilityAlert.ability_entindex)
}

// optional bool ctrl_held = 2;
inline bool CDOTAClientMsg_AbilityAlert::_internal_has_ctrl_held() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTAClientMsg_AbilityAlert::has_ctrl_held() const {
  return _internal_has_ctrl_held();
}
inline void CDOTAClientMsg_AbilityAlert::clear_ctrl_held() {
  _impl_.ctrl_held_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CDOTAClientMsg_AbilityAlert::_internal_ctrl_held() const {
  return _impl_.ctrl_held_;
}
inline bool CDOTAClientMsg_AbilityAlert::ctrl_held() const {
  // @@protoc_insertion_point(field_get:CDOTAClientMsg_AbilityAlert.ctrl_held)
  return _internal_ctrl_held();
}
inline void CDOTAClientMsg_AbilityAlert::_internal_set_ctrl_held(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ctrl_held_ = value;
}
inline void CDOTAClientMsg_AbilityAlert::set_ctrl_held(bool value) {
  _internal_set_ctrl_held(value);
  // @@protoc_insertion_point(field_set:CDOTAClientMsg_AbilityAlert.ctrl_held)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CDOTAClientMsg_UnitsAutoAttackMode_EMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CDOTAClientMsg_UnitsAutoAttackMode_EMode>() {
  return ::CDOTAClientMsg_UnitsAutoAttackMode_EMode_descriptor();
}
template <> struct is_proto_enum< ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType>() {
  return ::CDOTAClientMsg_UnitsAutoAttackMode_EUnitType_descriptor();
}
template <> struct is_proto_enum< ::EDotaClientMessages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDotaClientMessages>() {
  return ::EDotaClientMessages_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fclientmessages_2eproto
