// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto;
class CMsgClientToGCPrivateChatDemote;
struct CMsgClientToGCPrivateChatDemoteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatDemoteDefaultTypeInternal _CMsgClientToGCPrivateChatDemote_default_instance_;
class CMsgClientToGCPrivateChatInvite;
struct CMsgClientToGCPrivateChatInviteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatInviteDefaultTypeInternal _CMsgClientToGCPrivateChatInvite_default_instance_;
class CMsgClientToGCPrivateChatKick;
struct CMsgClientToGCPrivateChatKickDefaultTypeInternal;
extern CMsgClientToGCPrivateChatKickDefaultTypeInternal _CMsgClientToGCPrivateChatKick_default_instance_;
class CMsgClientToGCPrivateChatPromote;
struct CMsgClientToGCPrivateChatPromoteDefaultTypeInternal;
extern CMsgClientToGCPrivateChatPromoteDefaultTypeInternal _CMsgClientToGCPrivateChatPromote_default_instance_;
class CMsgDOTAChatGetMemberCount;
struct CMsgDOTAChatGetMemberCountDefaultTypeInternal;
extern CMsgDOTAChatGetMemberCountDefaultTypeInternal _CMsgDOTAChatGetMemberCount_default_instance_;
class CMsgDOTAChatGetMemberCountResponse;
struct CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal;
extern CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal _CMsgDOTAChatGetMemberCountResponse_default_instance_;
class CMsgDOTAChatGetUserListResponse;
struct CMsgDOTAChatGetUserListResponseDefaultTypeInternal;
extern CMsgDOTAChatGetUserListResponseDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_default_instance_;
class CMsgDOTAChatGetUserListResponse_Member;
struct CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal;
extern CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
class CMsgDOTAChatMember;
struct CMsgDOTAChatMemberDefaultTypeInternal;
extern CMsgDOTAChatMemberDefaultTypeInternal _CMsgDOTAChatMember_default_instance_;
class CMsgDOTAChatMessage;
struct CMsgDOTAChatMessageDefaultTypeInternal;
extern CMsgDOTAChatMessageDefaultTypeInternal _CMsgDOTAChatMessage_default_instance_;
class CMsgDOTAChatMessage_ChatWheelMessage;
struct CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal;
extern CMsgDOTAChatMessage_ChatWheelMessageDefaultTypeInternal _CMsgDOTAChatMessage_ChatWheelMessage_default_instance_;
class CMsgDOTAChatMessage_DiceRoll;
struct CMsgDOTAChatMessage_DiceRollDefaultTypeInternal;
extern CMsgDOTAChatMessage_DiceRollDefaultTypeInternal _CMsgDOTAChatMessage_DiceRoll_default_instance_;
class CMsgDOTAChatMessage_PlayerDraftPick;
struct CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal;
extern CMsgDOTAChatMessage_PlayerDraftPickDefaultTypeInternal _CMsgDOTAChatMessage_PlayerDraftPick_default_instance_;
class CMsgDOTAChatMessage_TriviaAnswered;
struct CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal;
extern CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
class CMsgDOTAChatModeratorBan;
struct CMsgDOTAChatModeratorBanDefaultTypeInternal;
extern CMsgDOTAChatModeratorBanDefaultTypeInternal _CMsgDOTAChatModeratorBan_default_instance_;
class CMsgDOTAChatRegionsEnabled;
struct CMsgDOTAChatRegionsEnabledDefaultTypeInternal;
extern CMsgDOTAChatRegionsEnabledDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_default_instance_;
class CMsgDOTAChatRegionsEnabled_Region;
struct CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal;
extern CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
class CMsgDOTAJoinChatChannel;
struct CMsgDOTAJoinChatChannelDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelDefaultTypeInternal _CMsgDOTAJoinChatChannel_default_instance_;
class CMsgDOTAJoinChatChannelResponse;
struct CMsgDOTAJoinChatChannelResponseDefaultTypeInternal;
extern CMsgDOTAJoinChatChannelResponseDefaultTypeInternal _CMsgDOTAJoinChatChannelResponse_default_instance_;
class CMsgDOTALeaveChatChannel;
struct CMsgDOTALeaveChatChannelDefaultTypeInternal;
extern CMsgDOTALeaveChatChannelDefaultTypeInternal _CMsgDOTALeaveChatChannel_default_instance_;
class CMsgDOTAOtherJoinedChatChannel;
struct CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal _CMsgDOTAOtherJoinedChatChannel_default_instance_;
class CMsgDOTAOtherLeftChatChannel;
struct CMsgDOTAOtherLeftChatChannelDefaultTypeInternal;
extern CMsgDOTAOtherLeftChatChannelDefaultTypeInternal _CMsgDOTAOtherLeftChatChannel_default_instance_;
class CMsgDOTARequestChatChannelList;
struct CMsgDOTARequestChatChannelListDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListDefaultTypeInternal _CMsgDOTARequestChatChannelList_default_instance_;
class CMsgDOTARequestChatChannelListResponse;
struct CMsgDOTARequestChatChannelListResponseDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponseDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_default_instance_;
class CMsgDOTARequestChatChannelListResponse_ChatChannel;
struct CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal;
extern CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgGCChatReportPublicSpam;
struct CMsgGCChatReportPublicSpamDefaultTypeInternal;
extern CMsgGCChatReportPublicSpamDefaultTypeInternal _CMsgGCChatReportPublicSpam_default_instance_;
class CMsgGCToClientPrivateChatResponse;
struct CMsgGCToClientPrivateChatResponseDefaultTypeInternal;
extern CMsgGCToClientPrivateChatResponseDefaultTypeInternal _CMsgGCToClientPrivateChatResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCPrivateChatDemote* Arena::CreateMaybeMessage<::CMsgClientToGCPrivateChatDemote>(Arena*);
template<> ::CMsgClientToGCPrivateChatInvite* Arena::CreateMaybeMessage<::CMsgClientToGCPrivateChatInvite>(Arena*);
template<> ::CMsgClientToGCPrivateChatKick* Arena::CreateMaybeMessage<::CMsgClientToGCPrivateChatKick>(Arena*);
template<> ::CMsgClientToGCPrivateChatPromote* Arena::CreateMaybeMessage<::CMsgClientToGCPrivateChatPromote>(Arena*);
template<> ::CMsgDOTAChatGetMemberCount* Arena::CreateMaybeMessage<::CMsgDOTAChatGetMemberCount>(Arena*);
template<> ::CMsgDOTAChatGetMemberCountResponse* Arena::CreateMaybeMessage<::CMsgDOTAChatGetMemberCountResponse>(Arena*);
template<> ::CMsgDOTAChatGetUserListResponse* Arena::CreateMaybeMessage<::CMsgDOTAChatGetUserListResponse>(Arena*);
template<> ::CMsgDOTAChatGetUserListResponse_Member* Arena::CreateMaybeMessage<::CMsgDOTAChatGetUserListResponse_Member>(Arena*);
template<> ::CMsgDOTAChatMember* Arena::CreateMaybeMessage<::CMsgDOTAChatMember>(Arena*);
template<> ::CMsgDOTAChatMessage* Arena::CreateMaybeMessage<::CMsgDOTAChatMessage>(Arena*);
template<> ::CMsgDOTAChatMessage_ChatWheelMessage* Arena::CreateMaybeMessage<::CMsgDOTAChatMessage_ChatWheelMessage>(Arena*);
template<> ::CMsgDOTAChatMessage_DiceRoll* Arena::CreateMaybeMessage<::CMsgDOTAChatMessage_DiceRoll>(Arena*);
template<> ::CMsgDOTAChatMessage_PlayerDraftPick* Arena::CreateMaybeMessage<::CMsgDOTAChatMessage_PlayerDraftPick>(Arena*);
template<> ::CMsgDOTAChatMessage_TriviaAnswered* Arena::CreateMaybeMessage<::CMsgDOTAChatMessage_TriviaAnswered>(Arena*);
template<> ::CMsgDOTAChatModeratorBan* Arena::CreateMaybeMessage<::CMsgDOTAChatModeratorBan>(Arena*);
template<> ::CMsgDOTAChatRegionsEnabled* Arena::CreateMaybeMessage<::CMsgDOTAChatRegionsEnabled>(Arena*);
template<> ::CMsgDOTAChatRegionsEnabled_Region* Arena::CreateMaybeMessage<::CMsgDOTAChatRegionsEnabled_Region>(Arena*);
template<> ::CMsgDOTAJoinChatChannel* Arena::CreateMaybeMessage<::CMsgDOTAJoinChatChannel>(Arena*);
template<> ::CMsgDOTAJoinChatChannelResponse* Arena::CreateMaybeMessage<::CMsgDOTAJoinChatChannelResponse>(Arena*);
template<> ::CMsgDOTALeaveChatChannel* Arena::CreateMaybeMessage<::CMsgDOTALeaveChatChannel>(Arena*);
template<> ::CMsgDOTAOtherJoinedChatChannel* Arena::CreateMaybeMessage<::CMsgDOTAOtherJoinedChatChannel>(Arena*);
template<> ::CMsgDOTAOtherLeftChatChannel* Arena::CreateMaybeMessage<::CMsgDOTAOtherLeftChatChannel>(Arena*);
template<> ::CMsgDOTARequestChatChannelList* Arena::CreateMaybeMessage<::CMsgDOTARequestChatChannelList>(Arena*);
template<> ::CMsgDOTARequestChatChannelListResponse* Arena::CreateMaybeMessage<::CMsgDOTARequestChatChannelListResponse>(Arena*);
template<> ::CMsgDOTARequestChatChannelListResponse_ChatChannel* Arena::CreateMaybeMessage<::CMsgDOTARequestChatChannelListResponse_ChatChannel>(Arena*);
template<> ::CMsgGCChatReportPublicSpam* Arena::CreateMaybeMessage<::CMsgGCChatReportPublicSpam>(Arena*);
template<> ::CMsgGCToClientPrivateChatResponse* Arena::CreateMaybeMessage<::CMsgGCToClientPrivateChatResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgGCToClientPrivateChatResponse_Result : int {
  CMsgGCToClientPrivateChatResponse_Result_SUCCESS = 0,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK = 1,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION = 2,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD = 3,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION = 4,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER = 5,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER = 7,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS = 8,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM = 9,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED = 10,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME = 11,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER = 12,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR = 13,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN = 14,
  CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN = 15
};
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value);
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MIN = CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
constexpr CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse_Result_Result_MAX = CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
constexpr int CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE = CMsgGCToClientPrivateChatResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgGCToClientPrivateChatResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgGCToClientPrivateChatResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgGCToClientPrivateChatResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgGCToClientPrivateChatResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgGCToClientPrivateChatResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgGCToClientPrivateChatResponse_Result>(
    CMsgGCToClientPrivateChatResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAJoinChatChannelResponse_Result : int {
  CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS = 0,
  CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE = 1,
  CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND = 2,
  CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED = 3,
  CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS = 4,
  CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED = 5,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL = 6,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED = 7,
  CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER = 8,
  CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED = 9,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED = 10,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION = 11,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED = 12,
  CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED = 13,
  CMsgDOTAJoinChatChannelResponse_Result_USER_NOT_ALLOWED = 14,
  CMsgDOTAJoinChatChannelResponse_Result_ENSURE_SPECIAL_PRIVILEGES_FAILED = 15,
  CMsgDOTAJoinChatChannelResponse_Result_NEW_PLAYER_USER_NOT_ELIGIBLE = 16,
  CMsgDOTAJoinChatChannelResponse_Result_SILENT_ERROR = 17,
  CMsgDOTAJoinChatChannelResponse_Result_NEW_PLAYER_USER_BANNED = 18
};
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value);
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MIN = CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
constexpr CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse_Result_Result_MAX = CMsgDOTAJoinChatChannelResponse_Result_NEW_PLAYER_USER_BANNED;
constexpr int CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE = CMsgDOTAJoinChatChannelResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgDOTAJoinChatChannelResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAJoinChatChannelResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAJoinChatChannelResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgDOTAJoinChatChannelResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAJoinChatChannelResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAJoinChatChannelResponse_Result>(
    CMsgDOTAJoinChatChannelResponse_Result_descriptor(), name, value);
}
// ===================================================================

class CMsgClientToGCPrivateChatInvite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCPrivateChatInvite) */ {
 public:
  inline CMsgClientToGCPrivateChatInvite() : CMsgClientToGCPrivateChatInvite(nullptr) {}
  ~CMsgClientToGCPrivateChatInvite() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from);
  CMsgClientToGCPrivateChatInvite(CMsgClientToGCPrivateChatInvite&& from) noexcept
    : CMsgClientToGCPrivateChatInvite() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatInvite& operator=(const CMsgClientToGCPrivateChatInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCPrivateChatInvite& operator=(CMsgClientToGCPrivateChatInvite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCPrivateChatInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCPrivateChatInvite* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatInvite*>(
               &_CMsgClientToGCPrivateChatInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgClientToGCPrivateChatInvite& a, CMsgClientToGCPrivateChatInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCPrivateChatInvite* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCPrivateChatInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatInvite>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCPrivateChatInvite& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCPrivateChatInvite& from) {
    CMsgClientToGCPrivateChatInvite::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatInvite* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCPrivateChatInvite";
  }
  protected:
  explicit CMsgClientToGCPrivateChatInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateChatChannelNameFieldNumber = 1,
    kInvitedAccountIdFieldNumber = 2,
  };
  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  private:
  bool _internal_has_private_chat_channel_name() const;
  public:
  void clear_private_chat_channel_name();
  const std::string& private_chat_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_chat_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_chat_channel_name();
  PROTOBUF_NODISCARD std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(std::string* private_chat_channel_name);
  private:
  const std::string& _internal_private_chat_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_chat_channel_name(const std::string& value);
  std::string* _internal_mutable_private_chat_channel_name();
  public:

  // optional uint32 invited_account_id = 2;
  bool has_invited_account_id() const;
  private:
  bool _internal_has_invited_account_id() const;
  public:
  void clear_invited_account_id();
  uint32_t invited_account_id() const;
  void set_invited_account_id(uint32_t value);
  private:
  uint32_t _internal_invited_account_id() const;
  void _internal_set_invited_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_chat_channel_name_;
    uint32_t invited_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatKick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCPrivateChatKick) */ {
 public:
  inline CMsgClientToGCPrivateChatKick() : CMsgClientToGCPrivateChatKick(nullptr) {}
  ~CMsgClientToGCPrivateChatKick() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from);
  CMsgClientToGCPrivateChatKick(CMsgClientToGCPrivateChatKick&& from) noexcept
    : CMsgClientToGCPrivateChatKick() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatKick& operator=(const CMsgClientToGCPrivateChatKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCPrivateChatKick& operator=(CMsgClientToGCPrivateChatKick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCPrivateChatKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCPrivateChatKick* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatKick*>(
               &_CMsgClientToGCPrivateChatKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgClientToGCPrivateChatKick& a, CMsgClientToGCPrivateChatKick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCPrivateChatKick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCPrivateChatKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatKick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCPrivateChatKick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCPrivateChatKick& from) {
    CMsgClientToGCPrivateChatKick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatKick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCPrivateChatKick";
  }
  protected:
  explicit CMsgClientToGCPrivateChatKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateChatChannelNameFieldNumber = 1,
    kKickAccountIdFieldNumber = 2,
  };
  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  private:
  bool _internal_has_private_chat_channel_name() const;
  public:
  void clear_private_chat_channel_name();
  const std::string& private_chat_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_chat_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_chat_channel_name();
  PROTOBUF_NODISCARD std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(std::string* private_chat_channel_name);
  private:
  const std::string& _internal_private_chat_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_chat_channel_name(const std::string& value);
  std::string* _internal_mutable_private_chat_channel_name();
  public:

  // optional uint32 kick_account_id = 2;
  bool has_kick_account_id() const;
  private:
  bool _internal_has_kick_account_id() const;
  public:
  void clear_kick_account_id();
  uint32_t kick_account_id() const;
  void set_kick_account_id(uint32_t value);
  private:
  uint32_t _internal_kick_account_id() const;
  void _internal_set_kick_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_chat_channel_name_;
    uint32_t kick_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatPromote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCPrivateChatPromote) */ {
 public:
  inline CMsgClientToGCPrivateChatPromote() : CMsgClientToGCPrivateChatPromote(nullptr) {}
  ~CMsgClientToGCPrivateChatPromote() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatPromote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from);
  CMsgClientToGCPrivateChatPromote(CMsgClientToGCPrivateChatPromote&& from) noexcept
    : CMsgClientToGCPrivateChatPromote() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatPromote& operator=(const CMsgClientToGCPrivateChatPromote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCPrivateChatPromote& operator=(CMsgClientToGCPrivateChatPromote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCPrivateChatPromote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCPrivateChatPromote* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatPromote*>(
               &_CMsgClientToGCPrivateChatPromote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgClientToGCPrivateChatPromote& a, CMsgClientToGCPrivateChatPromote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCPrivateChatPromote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCPrivateChatPromote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatPromote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatPromote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCPrivateChatPromote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCPrivateChatPromote& from) {
    CMsgClientToGCPrivateChatPromote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatPromote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCPrivateChatPromote";
  }
  protected:
  explicit CMsgClientToGCPrivateChatPromote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateChatChannelNameFieldNumber = 1,
    kPromoteAccountIdFieldNumber = 2,
  };
  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  private:
  bool _internal_has_private_chat_channel_name() const;
  public:
  void clear_private_chat_channel_name();
  const std::string& private_chat_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_chat_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_chat_channel_name();
  PROTOBUF_NODISCARD std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(std::string* private_chat_channel_name);
  private:
  const std::string& _internal_private_chat_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_chat_channel_name(const std::string& value);
  std::string* _internal_mutable_private_chat_channel_name();
  public:

  // optional uint32 promote_account_id = 2;
  bool has_promote_account_id() const;
  private:
  bool _internal_has_promote_account_id() const;
  public:
  void clear_promote_account_id();
  uint32_t promote_account_id() const;
  void set_promote_account_id(uint32_t value);
  private:
  uint32_t _internal_promote_account_id() const;
  void _internal_set_promote_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatPromote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_chat_channel_name_;
    uint32_t promote_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCPrivateChatDemote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCPrivateChatDemote) */ {
 public:
  inline CMsgClientToGCPrivateChatDemote() : CMsgClientToGCPrivateChatDemote(nullptr) {}
  ~CMsgClientToGCPrivateChatDemote() override;
  explicit PROTOBUF_CONSTEXPR CMsgClientToGCPrivateChatDemote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from);
  CMsgClientToGCPrivateChatDemote(CMsgClientToGCPrivateChatDemote&& from) noexcept
    : CMsgClientToGCPrivateChatDemote() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCPrivateChatDemote& operator=(const CMsgClientToGCPrivateChatDemote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCPrivateChatDemote& operator=(CMsgClientToGCPrivateChatDemote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgClientToGCPrivateChatDemote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCPrivateChatDemote* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCPrivateChatDemote*>(
               &_CMsgClientToGCPrivateChatDemote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgClientToGCPrivateChatDemote& a, CMsgClientToGCPrivateChatDemote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCPrivateChatDemote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCPrivateChatDemote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgClientToGCPrivateChatDemote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgClientToGCPrivateChatDemote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgClientToGCPrivateChatDemote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgClientToGCPrivateChatDemote& from) {
    CMsgClientToGCPrivateChatDemote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCPrivateChatDemote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCPrivateChatDemote";
  }
  protected:
  explicit CMsgClientToGCPrivateChatDemote(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateChatChannelNameFieldNumber = 1,
    kDemoteAccountIdFieldNumber = 2,
  };
  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  private:
  bool _internal_has_private_chat_channel_name() const;
  public:
  void clear_private_chat_channel_name();
  const std::string& private_chat_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_chat_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_chat_channel_name();
  PROTOBUF_NODISCARD std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(std::string* private_chat_channel_name);
  private:
  const std::string& _internal_private_chat_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_chat_channel_name(const std::string& value);
  std::string* _internal_mutable_private_chat_channel_name();
  public:

  // optional uint32 demote_account_id = 2;
  bool has_demote_account_id() const;
  private:
  bool _internal_has_demote_account_id() const;
  public:
  void clear_demote_account_id();
  uint32_t demote_account_id() const;
  void set_demote_account_id(uint32_t value);
  private:
  uint32_t _internal_demote_account_id() const;
  void _internal_set_demote_account_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCPrivateChatDemote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_chat_channel_name_;
    uint32_t demote_account_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientPrivateChatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientPrivateChatResponse) */ {
 public:
  inline CMsgGCToClientPrivateChatResponse() : CMsgGCToClientPrivateChatResponse(nullptr) {}
  ~CMsgGCToClientPrivateChatResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCToClientPrivateChatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from);
  CMsgGCToClientPrivateChatResponse(CMsgGCToClientPrivateChatResponse&& from) noexcept
    : CMsgGCToClientPrivateChatResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientPrivateChatResponse& operator=(const CMsgGCToClientPrivateChatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientPrivateChatResponse& operator=(CMsgGCToClientPrivateChatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCToClientPrivateChatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientPrivateChatResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientPrivateChatResponse*>(
               &_CMsgGCToClientPrivateChatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgGCToClientPrivateChatResponse& a, CMsgGCToClientPrivateChatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientPrivateChatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientPrivateChatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCToClientPrivateChatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCToClientPrivateChatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCToClientPrivateChatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCToClientPrivateChatResponse& from) {
    CMsgGCToClientPrivateChatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientPrivateChatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientPrivateChatResponse";
  }
  protected:
  explicit CMsgGCToClientPrivateChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgGCToClientPrivateChatResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgGCToClientPrivateChatResponse_Result_SUCCESS;
  static constexpr Result FAILURE_CREATION_LOCK =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_LOCK;
  static constexpr Result FAILURE_SQL_TRANSACTION =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_SQL_TRANSACTION;
  static constexpr Result FAILURE_SDO_LOAD =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_SDO_LOAD;
  static constexpr Result FAILURE_NO_PERMISSION =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_PERMISSION;
  static constexpr Result FAILURE_ALREADY_MEMBER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_MEMBER;
  static constexpr Result FAILURE_NOT_A_MEMBER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NOT_A_MEMBER;
  static constexpr Result FAILURE_NO_REMAINING_ADMINS =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_REMAINING_ADMINS;
  static constexpr Result FAILURE_NO_ROOM =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_NO_ROOM;
  static constexpr Result FAILURE_CREATION_RATE_LIMITED =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CREATION_RATE_LIMITED;
  static constexpr Result FAILURE_UNKNOWN_CHANNEL_NAME =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_CHANNEL_NAME;
  static constexpr Result FAILURE_UNKNOWN_USER =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_USER;
  static constexpr Result FAILURE_UNKNOWN_ERROR =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_UNKNOWN_ERROR;
  static constexpr Result FAILURE_CANNOT_KICK_ADMIN =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_CANNOT_KICK_ADMIN;
  static constexpr Result FAILURE_ALREADY_ADMIN =
    CMsgGCToClientPrivateChatResponse_Result_FAILURE_ALREADY_ADMIN;
  static inline bool Result_IsValid(int value) {
    return CMsgGCToClientPrivateChatResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgGCToClientPrivateChatResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgGCToClientPrivateChatResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgGCToClientPrivateChatResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgGCToClientPrivateChatResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgGCToClientPrivateChatResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgGCToClientPrivateChatResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateChatChannelNameFieldNumber = 1,
    kUsernameFieldNumber = 3,
    kResultFieldNumber = 2,
  };
  // optional string private_chat_channel_name = 1;
  bool has_private_chat_channel_name() const;
  private:
  bool _internal_has_private_chat_channel_name() const;
  public:
  void clear_private_chat_channel_name();
  const std::string& private_chat_channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_chat_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_chat_channel_name();
  PROTOBUF_NODISCARD std::string* release_private_chat_channel_name();
  void set_allocated_private_chat_channel_name(std::string* private_chat_channel_name);
  private:
  const std::string& _internal_private_chat_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_chat_channel_name(const std::string& value);
  std::string* _internal_mutable_private_chat_channel_name();
  public:

  // optional string username = 3;
  bool has_username() const;
  private:
  bool _internal_has_username() const;
  public:
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgGCToClientPrivateChatResponse_Result result() const;
  void set_result(::CMsgGCToClientPrivateChatResponse_Result value);
  private:
  ::CMsgGCToClientPrivateChatResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgGCToClientPrivateChatResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientPrivateChatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_chat_channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinChatChannel) */ {
 public:
  inline CMsgDOTAJoinChatChannel() : CMsgDOTAJoinChatChannel(nullptr) {}
  ~CMsgDOTAJoinChatChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from);
  CMsgDOTAJoinChatChannel(CMsgDOTAJoinChatChannel&& from) noexcept
    : CMsgDOTAJoinChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannel& operator=(const CMsgDOTAJoinChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAJoinChatChannel& operator=(CMsgDOTAJoinChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAJoinChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAJoinChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannel*>(
               &_CMsgDOTAJoinChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgDOTAJoinChatChannel& a, CMsgDOTAJoinChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAJoinChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAJoinChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAJoinChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAJoinChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAJoinChatChannel& from) {
    CMsgDOTAJoinChatChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAJoinChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAJoinChatChannel";
  }
  protected:
  explicit CMsgDOTAJoinChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 2,
    kChannelTypeFieldNumber = 4,
    kSilentRejectionFieldNumber = 5,
  };
  // optional string channel_name = 2;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);
  private:
  ::DOTAChatChannelType_t _internal_channel_type() const;
  void _internal_set_channel_type(::DOTAChatChannelType_t value);
  public:

  // optional bool silent_rejection = 5;
  bool has_silent_rejection() const;
  private:
  bool _internal_has_silent_rejection() const;
  public:
  void clear_silent_rejection();
  bool silent_rejection() const;
  void set_silent_rejection(bool value);
  private:
  bool _internal_silent_rejection() const;
  void _internal_set_silent_rejection(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    int channel_type_;
    bool silent_rejection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaveChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaveChatChannel) */ {
 public:
  inline CMsgDOTALeaveChatChannel() : CMsgDOTALeaveChatChannel(nullptr) {}
  ~CMsgDOTALeaveChatChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTALeaveChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from);
  CMsgDOTALeaveChatChannel(CMsgDOTALeaveChatChannel&& from) noexcept
    : CMsgDOTALeaveChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaveChatChannel& operator=(const CMsgDOTALeaveChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALeaveChatChannel& operator=(CMsgDOTALeaveChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTALeaveChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALeaveChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaveChatChannel*>(
               &_CMsgDOTALeaveChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgDOTALeaveChatChannel& a, CMsgDOTALeaveChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALeaveChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALeaveChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTALeaveChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTALeaveChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTALeaveChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTALeaveChatChannel& from) {
    CMsgDOTALeaveChatChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaveChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALeaveChatChannel";
  }
  protected:
  explicit CMsgDOTALeaveChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaveChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t channel_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCChatReportPublicSpam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCChatReportPublicSpam) */ {
 public:
  inline CMsgGCChatReportPublicSpam() : CMsgGCChatReportPublicSpam(nullptr) {}
  ~CMsgGCChatReportPublicSpam() override;
  explicit PROTOBUF_CONSTEXPR CMsgGCChatReportPublicSpam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from);
  CMsgGCChatReportPublicSpam(CMsgGCChatReportPublicSpam&& from) noexcept
    : CMsgGCChatReportPublicSpam() {
    *this = ::std::move(from);
  }

  inline CMsgGCChatReportPublicSpam& operator=(const CMsgGCChatReportPublicSpam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCChatReportPublicSpam& operator=(CMsgGCChatReportPublicSpam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgGCChatReportPublicSpam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCChatReportPublicSpam* internal_default_instance() {
    return reinterpret_cast<const CMsgGCChatReportPublicSpam*>(
               &_CMsgGCChatReportPublicSpam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgGCChatReportPublicSpam& a, CMsgGCChatReportPublicSpam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCChatReportPublicSpam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCChatReportPublicSpam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgGCChatReportPublicSpam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgGCChatReportPublicSpam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgGCChatReportPublicSpam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgGCChatReportPublicSpam& from) {
    CMsgGCChatReportPublicSpam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCChatReportPublicSpam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCChatReportPublicSpam";
  }
  protected:
  explicit CMsgGCChatReportPublicSpam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kChannelUserIdFieldNumber = 2,
  };
  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 2;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCChatReportPublicSpam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t channel_id_;
    uint32_t channel_user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatModeratorBan final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatModeratorBan) */ {
 public:
  inline CMsgDOTAChatModeratorBan() : CMsgDOTAChatModeratorBan(nullptr) {}
  ~CMsgDOTAChatModeratorBan() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatModeratorBan(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatModeratorBan(const CMsgDOTAChatModeratorBan& from);
  CMsgDOTAChatModeratorBan(CMsgDOTAChatModeratorBan&& from) noexcept
    : CMsgDOTAChatModeratorBan() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatModeratorBan& operator=(const CMsgDOTAChatModeratorBan& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatModeratorBan& operator=(CMsgDOTAChatModeratorBan&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatModeratorBan& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatModeratorBan* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatModeratorBan*>(
               &_CMsgDOTAChatModeratorBan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTAChatModeratorBan& a, CMsgDOTAChatModeratorBan& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatModeratorBan* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatModeratorBan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatModeratorBan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatModeratorBan>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatModeratorBan& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatModeratorBan& from) {
    CMsgDOTAChatModeratorBan::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatModeratorBan* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatModeratorBan";
  }
  protected:
  explicit CMsgDOTAChatModeratorBan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kDurationFieldNumber = 3,
  };
  // optional uint64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional uint32 account_id = 2;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 duration = 3;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatModeratorBan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t channel_id_;
    uint32_t account_id_;
    uint32_t duration_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_DiceRoll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage.DiceRoll) */ {
 public:
  inline CMsgDOTAChatMessage_DiceRoll() : CMsgDOTAChatMessage_DiceRoll(nullptr) {}
  ~CMsgDOTAChatMessage_DiceRoll() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_DiceRoll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from);
  CMsgDOTAChatMessage_DiceRoll(CMsgDOTAChatMessage_DiceRoll&& from) noexcept
    : CMsgDOTAChatMessage_DiceRoll() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_DiceRoll& operator=(const CMsgDOTAChatMessage_DiceRoll& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMessage_DiceRoll& operator=(CMsgDOTAChatMessage_DiceRoll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMessage_DiceRoll& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMessage_DiceRoll* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_DiceRoll*>(
               &_CMsgDOTAChatMessage_DiceRoll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTAChatMessage_DiceRoll& a, CMsgDOTAChatMessage_DiceRoll& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMessage_DiceRoll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMessage_DiceRoll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage_DiceRoll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_DiceRoll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMessage_DiceRoll& from) {
    CMsgDOTAChatMessage_DiceRoll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_DiceRoll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMessage.DiceRoll";
  }
  protected:
  explicit CMsgDOTAChatMessage_DiceRoll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollMinFieldNumber = 1,
    kRollMaxFieldNumber = 2,
    kResultFieldNumber = 3,
  };
  // optional int32 roll_min = 1;
  bool has_roll_min() const;
  private:
  bool _internal_has_roll_min() const;
  public:
  void clear_roll_min();
  int32_t roll_min() const;
  void set_roll_min(int32_t value);
  private:
  int32_t _internal_roll_min() const;
  void _internal_set_roll_min(int32_t value);
  public:

  // optional int32 roll_max = 2;
  bool has_roll_max() const;
  private:
  bool _internal_has_roll_max() const;
  public:
  void clear_roll_max();
  int32_t roll_max() const;
  void set_roll_max(int32_t value);
  private:
  int32_t _internal_roll_max() const;
  void _internal_set_roll_max(int32_t value);
  public:

  // optional int32 result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  int32_t result() const;
  void set_result(int32_t value);
  private:
  int32_t _internal_result() const;
  void _internal_set_result(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage.DiceRoll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t roll_min_;
    int32_t roll_max_;
    int32_t result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_TriviaAnswered final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage.TriviaAnswered) */ {
 public:
  inline CMsgDOTAChatMessage_TriviaAnswered() : CMsgDOTAChatMessage_TriviaAnswered(nullptr) {}
  ~CMsgDOTAChatMessage_TriviaAnswered() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_TriviaAnswered(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from);
  CMsgDOTAChatMessage_TriviaAnswered(CMsgDOTAChatMessage_TriviaAnswered&& from) noexcept
    : CMsgDOTAChatMessage_TriviaAnswered() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_TriviaAnswered& operator=(const CMsgDOTAChatMessage_TriviaAnswered& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMessage_TriviaAnswered& operator=(CMsgDOTAChatMessage_TriviaAnswered&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMessage_TriviaAnswered& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMessage_TriviaAnswered* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_TriviaAnswered*>(
               &_CMsgDOTAChatMessage_TriviaAnswered_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgDOTAChatMessage_TriviaAnswered& a, CMsgDOTAChatMessage_TriviaAnswered& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMessage_TriviaAnswered* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMessage_TriviaAnswered* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage_TriviaAnswered* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_TriviaAnswered>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMessage_TriviaAnswered& from) {
    CMsgDOTAChatMessage_TriviaAnswered::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMessage.TriviaAnswered";
  }
  protected:
  explicit CMsgDOTAChatMessage_TriviaAnswered(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionIdFieldNumber = 1,
    kAnswerIndexFieldNumber = 2,
    kPartyQuestionsCorrectFieldNumber = 3,
    kPartyQuestionsViewedFieldNumber = 4,
    kPartyTriviaPointsFieldNumber = 5,
  };
  // optional uint32 question_id = 1;
  bool has_question_id() const;
  private:
  bool _internal_has_question_id() const;
  public:
  void clear_question_id();
  uint32_t question_id() const;
  void set_question_id(uint32_t value);
  private:
  uint32_t _internal_question_id() const;
  void _internal_set_question_id(uint32_t value);
  public:

  // optional uint32 answer_index = 2;
  bool has_answer_index() const;
  private:
  bool _internal_has_answer_index() const;
  public:
  void clear_answer_index();
  uint32_t answer_index() const;
  void set_answer_index(uint32_t value);
  private:
  uint32_t _internal_answer_index() const;
  void _internal_set_answer_index(uint32_t value);
  public:

  // optional uint32 party_questions_correct = 3;
  bool has_party_questions_correct() const;
  private:
  bool _internal_has_party_questions_correct() const;
  public:
  void clear_party_questions_correct();
  uint32_t party_questions_correct() const;
  void set_party_questions_correct(uint32_t value);
  private:
  uint32_t _internal_party_questions_correct() const;
  void _internal_set_party_questions_correct(uint32_t value);
  public:

  // optional uint32 party_questions_viewed = 4;
  bool has_party_questions_viewed() const;
  private:
  bool _internal_has_party_questions_viewed() const;
  public:
  void clear_party_questions_viewed();
  uint32_t party_questions_viewed() const;
  void set_party_questions_viewed(uint32_t value);
  private:
  uint32_t _internal_party_questions_viewed() const;
  void _internal_set_party_questions_viewed(uint32_t value);
  public:

  // optional uint32 party_trivia_points = 5;
  bool has_party_trivia_points() const;
  private:
  bool _internal_has_party_trivia_points() const;
  public:
  void clear_party_trivia_points();
  uint32_t party_trivia_points() const;
  void set_party_trivia_points(uint32_t value);
  private:
  uint32_t _internal_party_trivia_points() const;
  void _internal_set_party_trivia_points(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage.TriviaAnswered)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t question_id_;
    uint32_t answer_index_;
    uint32_t party_questions_correct_;
    uint32_t party_questions_viewed_;
    uint32_t party_trivia_points_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_PlayerDraftPick final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage.PlayerDraftPick) */ {
 public:
  inline CMsgDOTAChatMessage_PlayerDraftPick() : CMsgDOTAChatMessage_PlayerDraftPick(nullptr) {}
  ~CMsgDOTAChatMessage_PlayerDraftPick() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMessage_PlayerDraftPick(const CMsgDOTAChatMessage_PlayerDraftPick& from);
  CMsgDOTAChatMessage_PlayerDraftPick(CMsgDOTAChatMessage_PlayerDraftPick&& from) noexcept
    : CMsgDOTAChatMessage_PlayerDraftPick() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_PlayerDraftPick& operator=(const CMsgDOTAChatMessage_PlayerDraftPick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMessage_PlayerDraftPick& operator=(CMsgDOTAChatMessage_PlayerDraftPick&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMessage_PlayerDraftPick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMessage_PlayerDraftPick* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_PlayerDraftPick*>(
               &_CMsgDOTAChatMessage_PlayerDraftPick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgDOTAChatMessage_PlayerDraftPick& a, CMsgDOTAChatMessage_PlayerDraftPick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMessage_PlayerDraftPick* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMessage_PlayerDraftPick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage_PlayerDraftPick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_PlayerDraftPick>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMessage_PlayerDraftPick& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMessage_PlayerDraftPick& from) {
    CMsgDOTAChatMessage_PlayerDraftPick::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_PlayerDraftPick* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMessage.PlayerDraftPick";
  }
  protected:
  explicit CMsgDOTAChatMessage_PlayerDraftPick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // optional int32 team = 2;
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  int32_t team() const;
  void set_team(int32_t value);
  private:
  int32_t _internal_team() const;
  void _internal_set_team(int32_t value);
  public:

  // optional int32 player_id = 1 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage.PlayerDraftPick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t team_;
    int32_t player_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage_ChatWheelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage.ChatWheelMessage) */ {
 public:
  inline CMsgDOTAChatMessage_ChatWheelMessage() : CMsgDOTAChatMessage_ChatWheelMessage(nullptr) {}
  ~CMsgDOTAChatMessage_ChatWheelMessage() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMessage_ChatWheelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMessage_ChatWheelMessage(const CMsgDOTAChatMessage_ChatWheelMessage& from);
  CMsgDOTAChatMessage_ChatWheelMessage(CMsgDOTAChatMessage_ChatWheelMessage&& from) noexcept
    : CMsgDOTAChatMessage_ChatWheelMessage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage_ChatWheelMessage& operator=(const CMsgDOTAChatMessage_ChatWheelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMessage_ChatWheelMessage& operator=(CMsgDOTAChatMessage_ChatWheelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMessage_ChatWheelMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMessage_ChatWheelMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage_ChatWheelMessage*>(
               &_CMsgDOTAChatMessage_ChatWheelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgDOTAChatMessage_ChatWheelMessage& a, CMsgDOTAChatMessage_ChatWheelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMessage_ChatWheelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMessage_ChatWheelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage_ChatWheelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage_ChatWheelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMessage_ChatWheelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMessage_ChatWheelMessage& from) {
    CMsgDOTAChatMessage_ChatWheelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage_ChatWheelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMessage.ChatWheelMessage";
  }
  protected:
  explicit CMsgDOTAChatMessage_ChatWheelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmoticonIdFieldNumber = 2,
    kMessageIdFieldNumber = 1,
  };
  // optional uint32 emoticon_id = 2;
  bool has_emoticon_id() const;
  private:
  bool _internal_has_emoticon_id() const;
  public:
  void clear_emoticon_id();
  uint32_t emoticon_id() const;
  void set_emoticon_id(uint32_t value);
  private:
  uint32_t _internal_emoticon_id() const;
  void _internal_set_emoticon_id(uint32_t value);
  public:

  // optional uint32 message_id = 1 [default = 4294967295];
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  uint32_t message_id() const;
  void set_message_id(uint32_t value);
  private:
  uint32_t _internal_message_id() const;
  void _internal_set_message_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage.ChatWheelMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t emoticon_id_;
    uint32_t message_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMessage) */ {
 public:
  inline CMsgDOTAChatMessage() : CMsgDOTAChatMessage(nullptr) {}
  ~CMsgDOTAChatMessage() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from);
  CMsgDOTAChatMessage(CMsgDOTAChatMessage&& from) noexcept
    : CMsgDOTAChatMessage() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMessage& operator=(const CMsgDOTAChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMessage& operator=(CMsgDOTAChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMessage* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMessage*>(
               &_CMsgDOTAChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgDOTAChatMessage& a, CMsgDOTAChatMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMessage& from) {
    CMsgDOTAChatMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMessage";
  }
  protected:
  explicit CMsgDOTAChatMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatMessage_DiceRoll DiceRoll;
  typedef CMsgDOTAChatMessage_TriviaAnswered TriviaAnswered;
  typedef CMsgDOTAChatMessage_PlayerDraftPick PlayerDraftPick;
  typedef CMsgDOTAChatMessage_ChatWheelMessage ChatWheelMessage;

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 3,
    kTextFieldNumber = 4,
    kSuggestInviteNameFieldNumber = 7,
    kShareLobbyPasskeyFieldNumber = 21,
    kSuggestPickHeroRoleFieldNumber = 27,
    kDiceRollFieldNumber = 17,
    kTriviaAnswerFieldNumber = 32,
    kPlayerDraftPickFieldNumber = 40,
    kChatWheelMessageFieldNumber = 41,
    kChannelIdFieldNumber = 2,
    kAccountIdFieldNumber = 1,
    kTimestampFieldNumber = 5,
    kSuggestInviteAccountIdFieldNumber = 6,
    kFantasyDraftOwnerAccountIdFieldNumber = 8,
    kFantasyDraftPlayerAccountIdFieldNumber = 9,
    kEventIdFieldNumber = 10,
    kEventPointsFieldNumber = 12,
    kShareProfileAccountIdFieldNumber = 15,
    kSharePartyIdFieldNumber = 18,
    kShareLobbyIdFieldNumber = 19,
    kChannelUserIdFieldNumber = 16,
    kSuggestInviteToLobbyFieldNumber = 11,
    kCoinFlipFieldNumber = 13,
    kLegacyBattleCupVictoryFieldNumber = 24,
    kStartedFindingMatchFieldNumber = 35,
    kShareLobbyCustomGameIdFieldNumber = 20,
    kPrivateChatChannelIdFieldNumber = 22,
    kStatusFieldNumber = 23,
    kBadgeLevelFieldNumber = 25,
    kSuggestPickHeroIdFieldNumber = 26,
    kBattleCupStreakFieldNumber = 29,
    kSuggestBanHeroIdFieldNumber = 30,
    kChatFlagsFieldNumber = 34,
    kCtrlIsDownFieldNumber = 36,
    kFavoriteTeamIdFieldNumber = 37,
    kFavoriteTeamQualityFieldNumber = 38,
    kSuggestPlayerDraftPickFieldNumber = 39,
    kPlayerIdFieldNumber = 14,
    kRequestedAbilityIdFieldNumber = 33,
  };
  // optional string persona_name = 3;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional string text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string suggest_invite_name = 7;
  bool has_suggest_invite_name() const;
  private:
  bool _internal_has_suggest_invite_name() const;
  public:
  void clear_suggest_invite_name();
  const std::string& suggest_invite_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suggest_invite_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suggest_invite_name();
  PROTOBUF_NODISCARD std::string* release_suggest_invite_name();
  void set_allocated_suggest_invite_name(std::string* suggest_invite_name);
  private:
  const std::string& _internal_suggest_invite_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggest_invite_name(const std::string& value);
  std::string* _internal_mutable_suggest_invite_name();
  public:

  // optional string share_lobby_passkey = 21;
  bool has_share_lobby_passkey() const;
  private:
  bool _internal_has_share_lobby_passkey() const;
  public:
  void clear_share_lobby_passkey();
  const std::string& share_lobby_passkey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_share_lobby_passkey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_share_lobby_passkey();
  PROTOBUF_NODISCARD std::string* release_share_lobby_passkey();
  void set_allocated_share_lobby_passkey(std::string* share_lobby_passkey);
  private:
  const std::string& _internal_share_lobby_passkey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_share_lobby_passkey(const std::string& value);
  std::string* _internal_mutable_share_lobby_passkey();
  public:

  // optional string suggest_pick_hero_role = 27;
  bool has_suggest_pick_hero_role() const;
  private:
  bool _internal_has_suggest_pick_hero_role() const;
  public:
  void clear_suggest_pick_hero_role();
  const std::string& suggest_pick_hero_role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suggest_pick_hero_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suggest_pick_hero_role();
  PROTOBUF_NODISCARD std::string* release_suggest_pick_hero_role();
  void set_allocated_suggest_pick_hero_role(std::string* suggest_pick_hero_role);
  private:
  const std::string& _internal_suggest_pick_hero_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suggest_pick_hero_role(const std::string& value);
  std::string* _internal_mutable_suggest_pick_hero_role();
  public:

  // optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  bool has_dice_roll() const;
  private:
  bool _internal_has_dice_roll() const;
  public:
  void clear_dice_roll();
  const ::CMsgDOTAChatMessage_DiceRoll& dice_roll() const;
  PROTOBUF_NODISCARD ::CMsgDOTAChatMessage_DiceRoll* release_dice_roll();
  ::CMsgDOTAChatMessage_DiceRoll* mutable_dice_roll();
  void set_allocated_dice_roll(::CMsgDOTAChatMessage_DiceRoll* dice_roll);
  private:
  const ::CMsgDOTAChatMessage_DiceRoll& _internal_dice_roll() const;
  ::CMsgDOTAChatMessage_DiceRoll* _internal_mutable_dice_roll();
  public:
  void unsafe_arena_set_allocated_dice_roll(
      ::CMsgDOTAChatMessage_DiceRoll* dice_roll);
  ::CMsgDOTAChatMessage_DiceRoll* unsafe_arena_release_dice_roll();

  // optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  bool has_trivia_answer() const;
  private:
  bool _internal_has_trivia_answer() const;
  public:
  void clear_trivia_answer();
  const ::CMsgDOTAChatMessage_TriviaAnswered& trivia_answer() const;
  PROTOBUF_NODISCARD ::CMsgDOTAChatMessage_TriviaAnswered* release_trivia_answer();
  ::CMsgDOTAChatMessage_TriviaAnswered* mutable_trivia_answer();
  void set_allocated_trivia_answer(::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer);
  private:
  const ::CMsgDOTAChatMessage_TriviaAnswered& _internal_trivia_answer() const;
  ::CMsgDOTAChatMessage_TriviaAnswered* _internal_mutable_trivia_answer();
  public:
  void unsafe_arena_set_allocated_trivia_answer(
      ::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer);
  ::CMsgDOTAChatMessage_TriviaAnswered* unsafe_arena_release_trivia_answer();

  // optional .CMsgDOTAChatMessage.PlayerDraftPick player_draft_pick = 40;
  bool has_player_draft_pick() const;
  private:
  bool _internal_has_player_draft_pick() const;
  public:
  void clear_player_draft_pick();
  const ::CMsgDOTAChatMessage_PlayerDraftPick& player_draft_pick() const;
  PROTOBUF_NODISCARD ::CMsgDOTAChatMessage_PlayerDraftPick* release_player_draft_pick();
  ::CMsgDOTAChatMessage_PlayerDraftPick* mutable_player_draft_pick();
  void set_allocated_player_draft_pick(::CMsgDOTAChatMessage_PlayerDraftPick* player_draft_pick);
  private:
  const ::CMsgDOTAChatMessage_PlayerDraftPick& _internal_player_draft_pick() const;
  ::CMsgDOTAChatMessage_PlayerDraftPick* _internal_mutable_player_draft_pick();
  public:
  void unsafe_arena_set_allocated_player_draft_pick(
      ::CMsgDOTAChatMessage_PlayerDraftPick* player_draft_pick);
  ::CMsgDOTAChatMessage_PlayerDraftPick* unsafe_arena_release_player_draft_pick();

  // optional .CMsgDOTAChatMessage.ChatWheelMessage chat_wheel_message = 41;
  bool has_chat_wheel_message() const;
  private:
  bool _internal_has_chat_wheel_message() const;
  public:
  void clear_chat_wheel_message();
  const ::CMsgDOTAChatMessage_ChatWheelMessage& chat_wheel_message() const;
  PROTOBUF_NODISCARD ::CMsgDOTAChatMessage_ChatWheelMessage* release_chat_wheel_message();
  ::CMsgDOTAChatMessage_ChatWheelMessage* mutable_chat_wheel_message();
  void set_allocated_chat_wheel_message(::CMsgDOTAChatMessage_ChatWheelMessage* chat_wheel_message);
  private:
  const ::CMsgDOTAChatMessage_ChatWheelMessage& _internal_chat_wheel_message() const;
  ::CMsgDOTAChatMessage_ChatWheelMessage* _internal_mutable_chat_wheel_message();
  public:
  void unsafe_arena_set_allocated_chat_wheel_message(
      ::CMsgDOTAChatMessage_ChatWheelMessage* chat_wheel_message);
  ::CMsgDOTAChatMessage_ChatWheelMessage* unsafe_arena_release_chat_wheel_message();

  // optional uint64 channel_id = 2;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  uint32_t account_id() const;
  void set_account_id(uint32_t value);
  private:
  uint32_t _internal_account_id() const;
  void _internal_set_account_id(uint32_t value);
  public:

  // optional uint32 timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  uint32_t timestamp() const;
  void set_timestamp(uint32_t value);
  private:
  uint32_t _internal_timestamp() const;
  void _internal_set_timestamp(uint32_t value);
  public:

  // optional uint32 suggest_invite_account_id = 6;
  bool has_suggest_invite_account_id() const;
  private:
  bool _internal_has_suggest_invite_account_id() const;
  public:
  void clear_suggest_invite_account_id();
  uint32_t suggest_invite_account_id() const;
  void set_suggest_invite_account_id(uint32_t value);
  private:
  uint32_t _internal_suggest_invite_account_id() const;
  void _internal_set_suggest_invite_account_id(uint32_t value);
  public:

  // optional uint32 fantasy_draft_owner_account_id = 8;
  bool has_fantasy_draft_owner_account_id() const;
  private:
  bool _internal_has_fantasy_draft_owner_account_id() const;
  public:
  void clear_fantasy_draft_owner_account_id();
  uint32_t fantasy_draft_owner_account_id() const;
  void set_fantasy_draft_owner_account_id(uint32_t value);
  private:
  uint32_t _internal_fantasy_draft_owner_account_id() const;
  void _internal_set_fantasy_draft_owner_account_id(uint32_t value);
  public:

  // optional uint32 fantasy_draft_player_account_id = 9;
  bool has_fantasy_draft_player_account_id() const;
  private:
  bool _internal_has_fantasy_draft_player_account_id() const;
  public:
  void clear_fantasy_draft_player_account_id();
  uint32_t fantasy_draft_player_account_id() const;
  void set_fantasy_draft_player_account_id(uint32_t value);
  private:
  uint32_t _internal_fantasy_draft_player_account_id() const;
  void _internal_set_fantasy_draft_player_account_id(uint32_t value);
  public:

  // optional uint32 event_id = 10;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  uint32_t event_id() const;
  void set_event_id(uint32_t value);
  private:
  uint32_t _internal_event_id() const;
  void _internal_set_event_id(uint32_t value);
  public:

  // optional uint32 event_points = 12;
  bool has_event_points() const;
  private:
  bool _internal_has_event_points() const;
  public:
  void clear_event_points();
  uint32_t event_points() const;
  void set_event_points(uint32_t value);
  private:
  uint32_t _internal_event_points() const;
  void _internal_set_event_points(uint32_t value);
  public:

  // optional uint32 share_profile_account_id = 15;
  bool has_share_profile_account_id() const;
  private:
  bool _internal_has_share_profile_account_id() const;
  public:
  void clear_share_profile_account_id();
  uint32_t share_profile_account_id() const;
  void set_share_profile_account_id(uint32_t value);
  private:
  uint32_t _internal_share_profile_account_id() const;
  void _internal_set_share_profile_account_id(uint32_t value);
  public:

  // optional uint64 share_party_id = 18;
  bool has_share_party_id() const;
  private:
  bool _internal_has_share_party_id() const;
  public:
  void clear_share_party_id();
  uint64_t share_party_id() const;
  void set_share_party_id(uint64_t value);
  private:
  uint64_t _internal_share_party_id() const;
  void _internal_set_share_party_id(uint64_t value);
  public:

  // optional uint64 share_lobby_id = 19;
  bool has_share_lobby_id() const;
  private:
  bool _internal_has_share_lobby_id() const;
  public:
  void clear_share_lobby_id();
  uint64_t share_lobby_id() const;
  void set_share_lobby_id(uint64_t value);
  private:
  uint64_t _internal_share_lobby_id() const;
  void _internal_set_share_lobby_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 16;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // optional bool suggest_invite_to_lobby = 11;
  bool has_suggest_invite_to_lobby() const;
  private:
  bool _internal_has_suggest_invite_to_lobby() const;
  public:
  void clear_suggest_invite_to_lobby();
  bool suggest_invite_to_lobby() const;
  void set_suggest_invite_to_lobby(bool value);
  private:
  bool _internal_suggest_invite_to_lobby() const;
  void _internal_set_suggest_invite_to_lobby(bool value);
  public:

  // optional bool coin_flip = 13;
  bool has_coin_flip() const;
  private:
  bool _internal_has_coin_flip() const;
  public:
  void clear_coin_flip();
  bool coin_flip() const;
  void set_coin_flip(bool value);
  private:
  bool _internal_coin_flip() const;
  void _internal_set_coin_flip(bool value);
  public:

  // optional bool legacy_battle_cup_victory = 24;
  bool has_legacy_battle_cup_victory() const;
  private:
  bool _internal_has_legacy_battle_cup_victory() const;
  public:
  void clear_legacy_battle_cup_victory();
  bool legacy_battle_cup_victory() const;
  void set_legacy_battle_cup_victory(bool value);
  private:
  bool _internal_legacy_battle_cup_victory() const;
  void _internal_set_legacy_battle_cup_victory(bool value);
  public:

  // optional bool started_finding_match = 35;
  bool has_started_finding_match() const;
  private:
  bool _internal_has_started_finding_match() const;
  public:
  void clear_started_finding_match();
  bool started_finding_match() const;
  void set_started_finding_match(bool value);
  private:
  bool _internal_started_finding_match() const;
  void _internal_set_started_finding_match(bool value);
  public:

  // optional uint64 share_lobby_custom_game_id = 20;
  bool has_share_lobby_custom_game_id() const;
  private:
  bool _internal_has_share_lobby_custom_game_id() const;
  public:
  void clear_share_lobby_custom_game_id();
  uint64_t share_lobby_custom_game_id() const;
  void set_share_lobby_custom_game_id(uint64_t value);
  private:
  uint64_t _internal_share_lobby_custom_game_id() const;
  void _internal_set_share_lobby_custom_game_id(uint64_t value);
  public:

  // optional uint32 private_chat_channel_id = 22;
  bool has_private_chat_channel_id() const;
  private:
  bool _internal_has_private_chat_channel_id() const;
  public:
  void clear_private_chat_channel_id();
  uint32_t private_chat_channel_id() const;
  void set_private_chat_channel_id(uint32_t value);
  private:
  uint32_t _internal_private_chat_channel_id() const;
  void _internal_set_private_chat_channel_id(uint32_t value);
  public:

  // optional uint32 status = 23;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // optional uint32 badge_level = 25;
  bool has_badge_level() const;
  private:
  bool _internal_has_badge_level() const;
  public:
  void clear_badge_level();
  uint32_t badge_level() const;
  void set_badge_level(uint32_t value);
  private:
  uint32_t _internal_badge_level() const;
  void _internal_set_badge_level(uint32_t value);
  public:

  // optional uint32 suggest_pick_hero_id = 26;
  bool has_suggest_pick_hero_id() const;
  private:
  bool _internal_has_suggest_pick_hero_id() const;
  public:
  void clear_suggest_pick_hero_id();
  uint32_t suggest_pick_hero_id() const;
  void set_suggest_pick_hero_id(uint32_t value);
  private:
  uint32_t _internal_suggest_pick_hero_id() const;
  void _internal_set_suggest_pick_hero_id(uint32_t value);
  public:

  // optional uint32 battle_cup_streak = 29;
  bool has_battle_cup_streak() const;
  private:
  bool _internal_has_battle_cup_streak() const;
  public:
  void clear_battle_cup_streak();
  uint32_t battle_cup_streak() const;
  void set_battle_cup_streak(uint32_t value);
  private:
  uint32_t _internal_battle_cup_streak() const;
  void _internal_set_battle_cup_streak(uint32_t value);
  public:

  // optional uint32 suggest_ban_hero_id = 30;
  bool has_suggest_ban_hero_id() const;
  private:
  bool _internal_has_suggest_ban_hero_id() const;
  public:
  void clear_suggest_ban_hero_id();
  uint32_t suggest_ban_hero_id() const;
  void set_suggest_ban_hero_id(uint32_t value);
  private:
  uint32_t _internal_suggest_ban_hero_id() const;
  void _internal_set_suggest_ban_hero_id(uint32_t value);
  public:

  // optional uint32 chat_flags = 34;
  bool has_chat_flags() const;
  private:
  bool _internal_has_chat_flags() const;
  public:
  void clear_chat_flags();
  uint32_t chat_flags() const;
  void set_chat_flags(uint32_t value);
  private:
  uint32_t _internal_chat_flags() const;
  void _internal_set_chat_flags(uint32_t value);
  public:

  // optional bool ctrl_is_down = 36;
  bool has_ctrl_is_down() const;
  private:
  bool _internal_has_ctrl_is_down() const;
  public:
  void clear_ctrl_is_down();
  bool ctrl_is_down() const;
  void set_ctrl_is_down(bool value);
  private:
  bool _internal_ctrl_is_down() const;
  void _internal_set_ctrl_is_down(bool value);
  public:

  // optional uint32 favorite_team_id = 37;
  bool has_favorite_team_id() const;
  private:
  bool _internal_has_favorite_team_id() const;
  public:
  void clear_favorite_team_id();
  uint32_t favorite_team_id() const;
  void set_favorite_team_id(uint32_t value);
  private:
  uint32_t _internal_favorite_team_id() const;
  void _internal_set_favorite_team_id(uint32_t value);
  public:

  // optional uint32 favorite_team_quality = 38;
  bool has_favorite_team_quality() const;
  private:
  bool _internal_has_favorite_team_quality() const;
  public:
  void clear_favorite_team_quality();
  uint32_t favorite_team_quality() const;
  void set_favorite_team_quality(uint32_t value);
  private:
  uint32_t _internal_favorite_team_quality() const;
  void _internal_set_favorite_team_quality(uint32_t value);
  public:

  // optional int32 suggest_player_draft_pick = 39 [default = -1];
  bool has_suggest_player_draft_pick() const;
  private:
  bool _internal_has_suggest_player_draft_pick() const;
  public:
  void clear_suggest_player_draft_pick();
  int32_t suggest_player_draft_pick() const;
  void set_suggest_player_draft_pick(int32_t value);
  private:
  int32_t _internal_suggest_player_draft_pick() const;
  void _internal_set_suggest_player_draft_pick(int32_t value);
  public:

  // optional int32 player_id = 14 [default = -1];
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  int32_t player_id() const;
  void set_player_id(int32_t value);
  private:
  int32_t _internal_player_id() const;
  void _internal_set_player_id(int32_t value);
  public:

  // optional int32 requested_ability_id = 33 [default = -1];
  bool has_requested_ability_id() const;
  private:
  bool _internal_has_requested_ability_id() const;
  public:
  void clear_requested_ability_id();
  int32_t requested_ability_id() const;
  void set_requested_ability_id(int32_t value);
  private:
  int32_t _internal_requested_ability_id() const;
  void _internal_set_requested_ability_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggest_invite_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr share_lobby_passkey_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suggest_pick_hero_role_;
    ::CMsgDOTAChatMessage_DiceRoll* dice_roll_;
    ::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer_;
    ::CMsgDOTAChatMessage_PlayerDraftPick* player_draft_pick_;
    ::CMsgDOTAChatMessage_ChatWheelMessage* chat_wheel_message_;
    uint64_t channel_id_;
    uint32_t account_id_;
    uint32_t timestamp_;
    uint32_t suggest_invite_account_id_;
    uint32_t fantasy_draft_owner_account_id_;
    uint32_t fantasy_draft_player_account_id_;
    uint32_t event_id_;
    uint32_t event_points_;
    uint32_t share_profile_account_id_;
    uint64_t share_party_id_;
    uint64_t share_lobby_id_;
    uint32_t channel_user_id_;
    bool suggest_invite_to_lobby_;
    bool coin_flip_;
    bool legacy_battle_cup_victory_;
    bool started_finding_match_;
    uint64_t share_lobby_custom_game_id_;
    uint32_t private_chat_channel_id_;
    uint32_t status_;
    uint32_t badge_level_;
    uint32_t suggest_pick_hero_id_;
    uint32_t battle_cup_streak_;
    uint32_t suggest_ban_hero_id_;
    uint32_t chat_flags_;
    bool ctrl_is_down_;
    uint32_t favorite_team_id_;
    uint32_t favorite_team_quality_;
    int32_t suggest_player_draft_pick_;
    int32_t player_id_;
    int32_t requested_ability_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatMember) */ {
 public:
  inline CMsgDOTAChatMember() : CMsgDOTAChatMember(nullptr) {}
  ~CMsgDOTAChatMember() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatMember(const CMsgDOTAChatMember& from);
  CMsgDOTAChatMember(CMsgDOTAChatMember&& from) noexcept
    : CMsgDOTAChatMember() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatMember& operator=(const CMsgDOTAChatMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatMember& operator=(CMsgDOTAChatMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatMember* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatMember*>(
               &_CMsgDOTAChatMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgDOTAChatMember& a, CMsgDOTAChatMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatMember& from) {
    CMsgDOTAChatMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatMember";
  }
  protected:
  explicit CMsgDOTAChatMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kSteamIdFieldNumber = 1,
    kChannelUserIdFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // optional uint32 status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    uint64_t steam_id_;
    uint32_t channel_user_id_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAJoinChatChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAJoinChatChannelResponse) */ {
 public:
  inline CMsgDOTAJoinChatChannelResponse() : CMsgDOTAJoinChatChannelResponse(nullptr) {}
  ~CMsgDOTAJoinChatChannelResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAJoinChatChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from);
  CMsgDOTAJoinChatChannelResponse(CMsgDOTAJoinChatChannelResponse&& from) noexcept
    : CMsgDOTAJoinChatChannelResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAJoinChatChannelResponse& operator=(const CMsgDOTAJoinChatChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAJoinChatChannelResponse& operator=(CMsgDOTAJoinChatChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAJoinChatChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAJoinChatChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAJoinChatChannelResponse*>(
               &_CMsgDOTAJoinChatChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgDOTAJoinChatChannelResponse& a, CMsgDOTAJoinChatChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAJoinChatChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAJoinChatChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAJoinChatChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAJoinChatChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAJoinChatChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAJoinChatChannelResponse& from) {
    CMsgDOTAJoinChatChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAJoinChatChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAJoinChatChannelResponse";
  }
  protected:
  explicit CMsgDOTAJoinChatChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAJoinChatChannelResponse_Result Result;
  static constexpr Result JOIN_SUCCESS =
    CMsgDOTAJoinChatChannelResponse_Result_JOIN_SUCCESS;
  static constexpr Result INVALID_CHANNEL_TYPE =
    CMsgDOTAJoinChatChannelResponse_Result_INVALID_CHANNEL_TYPE;
  static constexpr Result ACCOUNT_NOT_FOUND =
    CMsgDOTAJoinChatChannelResponse_Result_ACCOUNT_NOT_FOUND;
  static constexpr Result ACH_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_ACH_FAILED;
  static constexpr Result USER_IN_TOO_MANY_CHANNELS =
    CMsgDOTAJoinChatChannelResponse_Result_USER_IN_TOO_MANY_CHANNELS;
  static constexpr Result RATE_LIMIT_EXCEEDED =
    CMsgDOTAJoinChatChannelResponse_Result_RATE_LIMIT_EXCEEDED;
  static constexpr Result CHANNEL_FULL =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL;
  static constexpr Result CHANNEL_FULL_OVERFLOWED =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_FULL_OVERFLOWED;
  static constexpr Result FAILED_TO_ADD_USER =
    CMsgDOTAJoinChatChannelResponse_Result_FAILED_TO_ADD_USER;
  static constexpr Result CHANNEL_TYPE_DISABLED =
    CMsgDOTAJoinChatChannelResponse_Result_CHANNEL_TYPE_DISABLED;
  static constexpr Result PRIVATE_CHAT_CREATE_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_FAILED;
  static constexpr Result PRIVATE_CHAT_NO_PERMISSION =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_NO_PERMISSION;
  static constexpr Result PRIVATE_CHAT_CREATE_LOCK_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_CREATE_LOCK_FAILED;
  static constexpr Result PRIVATE_CHAT_KICKED =
    CMsgDOTAJoinChatChannelResponse_Result_PRIVATE_CHAT_KICKED;
  static constexpr Result USER_NOT_ALLOWED =
    CMsgDOTAJoinChatChannelResponse_Result_USER_NOT_ALLOWED;
  static constexpr Result ENSURE_SPECIAL_PRIVILEGES_FAILED =
    CMsgDOTAJoinChatChannelResponse_Result_ENSURE_SPECIAL_PRIVILEGES_FAILED;
  static constexpr Result NEW_PLAYER_USER_NOT_ELIGIBLE =
    CMsgDOTAJoinChatChannelResponse_Result_NEW_PLAYER_USER_NOT_ELIGIBLE;
  static constexpr Result SILENT_ERROR =
    CMsgDOTAJoinChatChannelResponse_Result_SILENT_ERROR;
  static constexpr Result NEW_PLAYER_USER_BANNED =
    CMsgDOTAJoinChatChannelResponse_Result_NEW_PLAYER_USER_BANNED;
  static inline bool Result_IsValid(int value) {
    return CMsgDOTAJoinChatChannelResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgDOTAJoinChatChannelResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgDOTAJoinChatChannelResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgDOTAJoinChatChannelResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgDOTAJoinChatChannelResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgDOTAJoinChatChannelResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 5,
    kChannelNameFieldNumber = 2,
    kWelcomeMessageFieldNumber = 10,
    kResponseFieldNumber = 1,
    kMaxMembersFieldNumber = 4,
    kChannelIdFieldNumber = 3,
    kChannelTypeFieldNumber = 6,
    kResultFieldNumber = 7,
    kGcInitiatedJoinFieldNumber = 8,
    kChannelUserIdFieldNumber = 9,
    kSpecialPrivilegesFieldNumber = 11,
  };
  // repeated .CMsgDOTAChatMember members = 5;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CMsgDOTAChatMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatMember >*
      mutable_members();
  private:
  const ::CMsgDOTAChatMember& _internal_members(int index) const;
  ::CMsgDOTAChatMember* _internal_add_members();
  public:
  const ::CMsgDOTAChatMember& members(int index) const;
  ::CMsgDOTAChatMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatMember >&
      members() const;

  // optional string channel_name = 2;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional string welcome_message = 10;
  bool has_welcome_message() const;
  private:
  bool _internal_has_welcome_message() const;
  public:
  void clear_welcome_message();
  const std::string& welcome_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_welcome_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_welcome_message();
  PROTOBUF_NODISCARD std::string* release_welcome_message();
  void set_allocated_welcome_message(std::string* welcome_message);
  private:
  const std::string& _internal_welcome_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_welcome_message(const std::string& value);
  std::string* _internal_mutable_welcome_message();
  public:

  // optional uint32 response = 1;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  uint32_t response() const;
  void set_response(uint32_t value);
  private:
  uint32_t _internal_response() const;
  void _internal_set_response(uint32_t value);
  public:

  // optional uint32 max_members = 4;
  bool has_max_members() const;
  private:
  bool _internal_has_max_members() const;
  public:
  void clear_max_members();
  uint32_t max_members() const;
  void set_max_members(uint32_t value);
  private:
  uint32_t _internal_max_members() const;
  void _internal_set_max_members(uint32_t value);
  public:

  // optional fixed64 channel_id = 3;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);
  private:
  ::DOTAChatChannelType_t _internal_channel_type() const;
  void _internal_set_channel_type(::DOTAChatChannelType_t value);
  public:

  // optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAJoinChatChannelResponse_Result result() const;
  void set_result(::CMsgDOTAJoinChatChannelResponse_Result value);
  private:
  ::CMsgDOTAJoinChatChannelResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgDOTAJoinChatChannelResponse_Result value);
  public:

  // optional bool gc_initiated_join = 8;
  bool has_gc_initiated_join() const;
  private:
  bool _internal_has_gc_initiated_join() const;
  public:
  void clear_gc_initiated_join();
  bool gc_initiated_join() const;
  void set_gc_initiated_join(bool value);
  private:
  bool _internal_gc_initiated_join() const;
  void _internal_set_gc_initiated_join(bool value);
  public:

  // optional uint32 channel_user_id = 9;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
  bool has_special_privileges() const;
  private:
  bool _internal_has_special_privileges() const;
  public:
  void clear_special_privileges();
  ::EChatSpecialPrivileges special_privileges() const;
  void set_special_privileges(::EChatSpecialPrivileges value);
  private:
  ::EChatSpecialPrivileges _internal_special_privileges() const;
  void _internal_set_special_privileges(::EChatSpecialPrivileges value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAJoinChatChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatMember > members_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr welcome_message_;
    uint32_t response_;
    uint32_t max_members_;
    uint64_t channel_id_;
    int channel_type_;
    int result_;
    bool gc_initiated_join_;
    uint32_t channel_user_id_;
    int special_privileges_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherJoinedChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAOtherJoinedChatChannel) */ {
 public:
  inline CMsgDOTAOtherJoinedChatChannel() : CMsgDOTAOtherJoinedChatChannel(nullptr) {}
  ~CMsgDOTAOtherJoinedChatChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAOtherJoinedChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from);
  CMsgDOTAOtherJoinedChatChannel(CMsgDOTAOtherJoinedChatChannel&& from) noexcept
    : CMsgDOTAOtherJoinedChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherJoinedChatChannel& operator=(const CMsgDOTAOtherJoinedChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAOtherJoinedChatChannel& operator=(CMsgDOTAOtherJoinedChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAOtherJoinedChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAOtherJoinedChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherJoinedChatChannel*>(
               &_CMsgDOTAOtherJoinedChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgDOTAOtherJoinedChatChannel& a, CMsgDOTAOtherJoinedChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAOtherJoinedChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAOtherJoinedChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAOtherJoinedChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAOtherJoinedChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAOtherJoinedChatChannel& from) {
    CMsgDOTAOtherJoinedChatChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAOtherJoinedChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAOtherJoinedChatChannel";
  }
  protected:
  explicit CMsgDOTAOtherJoinedChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kChannelIdFieldNumber = 1,
    kSteamIdFieldNumber = 3,
    kChannelUserIdFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional fixed64 steam_id = 3;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 4;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // optional uint32 status = 5;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherJoinedChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    uint64_t channel_id_;
    uint64_t steam_id_;
    uint32_t channel_user_id_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAOtherLeftChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAOtherLeftChatChannel) */ {
 public:
  inline CMsgDOTAOtherLeftChatChannel() : CMsgDOTAOtherLeftChatChannel(nullptr) {}
  ~CMsgDOTAOtherLeftChatChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAOtherLeftChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from);
  CMsgDOTAOtherLeftChatChannel(CMsgDOTAOtherLeftChatChannel&& from) noexcept
    : CMsgDOTAOtherLeftChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAOtherLeftChatChannel& operator=(const CMsgDOTAOtherLeftChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAOtherLeftChatChannel& operator=(CMsgDOTAOtherLeftChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAOtherLeftChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAOtherLeftChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAOtherLeftChatChannel*>(
               &_CMsgDOTAOtherLeftChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgDOTAOtherLeftChatChannel& a, CMsgDOTAOtherLeftChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAOtherLeftChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAOtherLeftChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAOtherLeftChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAOtherLeftChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAOtherLeftChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAOtherLeftChatChannel& from) {
    CMsgDOTAOtherLeftChatChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAOtherLeftChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAOtherLeftChatChannel";
  }
  protected:
  explicit CMsgDOTAOtherLeftChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kSteamIdFieldNumber = 2,
    kChannelUserIdFieldNumber = 3,
  };
  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // optional fixed64 steam_id = 2;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAOtherLeftChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint64_t channel_id_;
    uint64_t steam_id_;
    uint32_t channel_user_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelList final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelList) */ {
 public:
  inline CMsgDOTARequestChatChannelList() : CMsgDOTARequestChatChannelList(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from);
  CMsgDOTARequestChatChannelList(CMsgDOTARequestChatChannelList&& from) noexcept
    : CMsgDOTARequestChatChannelList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelList& operator=(const CMsgDOTARequestChatChannelList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARequestChatChannelList& operator=(CMsgDOTARequestChatChannelList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARequestChatChannelList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARequestChatChannelList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelList*>(
               &_CMsgDOTARequestChatChannelList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgDOTARequestChatChannelList& a, CMsgDOTARequestChatChannelList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARequestChatChannelList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARequestChatChannelList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CMsgDOTARequestChatChannelList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CMsgDOTARequestChatChannelList& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARequestChatChannelList";
  }
  protected:
  explicit CMsgDOTARequestChatChannelList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse_ChatChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelListResponse.ChatChannel) */ {
 public:
  inline CMsgDOTARequestChatChannelListResponse_ChatChannel() : CMsgDOTARequestChatChannelListResponse_ChatChannel(nullptr) {}
  ~CMsgDOTARequestChatChannelListResponse_ChatChannel() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponse_ChatChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  CMsgDOTARequestChatChannelListResponse_ChatChannel(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse_ChatChannel() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARequestChatChannelListResponse_ChatChannel& operator=(CMsgDOTARequestChatChannelListResponse_ChatChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARequestChatChannelListResponse_ChatChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARequestChatChannelListResponse_ChatChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse_ChatChannel*>(
               &_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgDOTARequestChatChannelListResponse_ChatChannel& a, CMsgDOTARequestChatChannelListResponse_ChatChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelListResponse_ChatChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse_ChatChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
    CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARequestChatChannelListResponse.ChatChannel";
  }
  protected:
  explicit CMsgDOTARequestChatChannelListResponse_ChatChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kNumMembersFieldNumber = 2,
    kChannelTypeFieldNumber = 3,
  };
  // optional string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional uint32 num_members = 2;
  bool has_num_members() const;
  private:
  bool _internal_has_num_members() const;
  public:
  void clear_num_members();
  uint32_t num_members() const;
  void set_num_members(uint32_t value);
  private:
  uint32_t _internal_num_members() const;
  void _internal_set_num_members(uint32_t value);
  public:

  // optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);
  private:
  ::DOTAChatChannelType_t _internal_channel_type() const;
  void _internal_set_channel_type(::DOTAChatChannelType_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse.ChatChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    uint32_t num_members_;
    int channel_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTARequestChatChannelListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTARequestChatChannelListResponse) */ {
 public:
  inline CMsgDOTARequestChatChannelListResponse() : CMsgDOTARequestChatChannelListResponse(nullptr) {}
  ~CMsgDOTARequestChatChannelListResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTARequestChatChannelListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from);
  CMsgDOTARequestChatChannelListResponse(CMsgDOTARequestChatChannelListResponse&& from) noexcept
    : CMsgDOTARequestChatChannelListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTARequestChatChannelListResponse& operator=(const CMsgDOTARequestChatChannelListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTARequestChatChannelListResponse& operator=(CMsgDOTARequestChatChannelListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTARequestChatChannelListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTARequestChatChannelListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTARequestChatChannelListResponse*>(
               &_CMsgDOTARequestChatChannelListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgDOTARequestChatChannelListResponse& a, CMsgDOTARequestChatChannelListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTARequestChatChannelListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTARequestChatChannelListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTARequestChatChannelListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTARequestChatChannelListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTARequestChatChannelListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTARequestChatChannelListResponse& from) {
    CMsgDOTARequestChatChannelListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTARequestChatChannelListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTARequestChatChannelListResponse";
  }
  protected:
  explicit CMsgDOTARequestChatChannelListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTARequestChatChannelListResponse_ChatChannel ChatChannel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
      mutable_channels();
  private:
  const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& _internal_channels(int index) const;
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* _internal_add_channels();
  public:
  const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& channels(int index) const;
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTARequestChatChannelListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel > channels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse_Member final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatGetUserListResponse.Member) */ {
 public:
  inline CMsgDOTAChatGetUserListResponse_Member() : CMsgDOTAChatGetUserListResponse_Member(nullptr) {}
  ~CMsgDOTAChatGetUserListResponse_Member() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponse_Member(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from);
  CMsgDOTAChatGetUserListResponse_Member(CMsgDOTAChatGetUserListResponse_Member&& from) noexcept
    : CMsgDOTAChatGetUserListResponse_Member() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetUserListResponse_Member& operator=(const CMsgDOTAChatGetUserListResponse_Member& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatGetUserListResponse_Member& operator=(CMsgDOTAChatGetUserListResponse_Member&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatGetUserListResponse_Member& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatGetUserListResponse_Member* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetUserListResponse_Member*>(
               &_CMsgDOTAChatGetUserListResponse_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgDOTAChatGetUserListResponse_Member& a, CMsgDOTAChatGetUserListResponse_Member& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatGetUserListResponse_Member* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatGetUserListResponse_Member* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetUserListResponse_Member* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse_Member>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatGetUserListResponse_Member& from) {
    CMsgDOTAChatGetUserListResponse_Member::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatGetUserListResponse.Member";
  }
  protected:
  explicit CMsgDOTAChatGetUserListResponse_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonaNameFieldNumber = 2,
    kSteamIdFieldNumber = 1,
    kChannelUserIdFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // optional string persona_name = 2;
  bool has_persona_name() const;
  private:
  bool _internal_has_persona_name() const;
  public:
  void clear_persona_name();
  const std::string& persona_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_persona_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_persona_name();
  PROTOBUF_NODISCARD std::string* release_persona_name();
  void set_allocated_persona_name(std::string* persona_name);
  private:
  const std::string& _internal_persona_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_persona_name(const std::string& value);
  std::string* _internal_mutable_persona_name();
  public:

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  uint64_t steam_id() const;
  void set_steam_id(uint64_t value);
  private:
  uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(uint64_t value);
  public:

  // optional uint32 channel_user_id = 3;
  bool has_channel_user_id() const;
  private:
  bool _internal_has_channel_user_id() const;
  public:
  void clear_channel_user_id();
  uint32_t channel_user_id() const;
  void set_channel_user_id(uint32_t value);
  private:
  uint32_t _internal_channel_user_id() const;
  void _internal_set_channel_user_id(uint32_t value);
  public:

  // optional uint32 status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  uint32_t status() const;
  void set_status(uint32_t value);
  private:
  uint32_t _internal_status() const;
  void _internal_set_status(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetUserListResponse.Member)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr persona_name_;
    uint64_t steam_id_;
    uint32_t channel_user_id_;
    uint32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetUserListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatGetUserListResponse) */ {
 public:
  inline CMsgDOTAChatGetUserListResponse() : CMsgDOTAChatGetUserListResponse(nullptr) {}
  ~CMsgDOTAChatGetUserListResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatGetUserListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from);
  CMsgDOTAChatGetUserListResponse(CMsgDOTAChatGetUserListResponse&& from) noexcept
    : CMsgDOTAChatGetUserListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetUserListResponse& operator=(const CMsgDOTAChatGetUserListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatGetUserListResponse& operator=(CMsgDOTAChatGetUserListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatGetUserListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatGetUserListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetUserListResponse*>(
               &_CMsgDOTAChatGetUserListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgDOTAChatGetUserListResponse& a, CMsgDOTAChatGetUserListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatGetUserListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatGetUserListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetUserListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetUserListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatGetUserListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatGetUserListResponse& from) {
    CMsgDOTAChatGetUserListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetUserListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatGetUserListResponse";
  }
  protected:
  explicit CMsgDOTAChatGetUserListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatGetUserListResponse_Member Member;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kChannelIdFieldNumber = 1,
  };
  // repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CMsgDOTAChatGetUserListResponse_Member* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >*
      mutable_members();
  private:
  const ::CMsgDOTAChatGetUserListResponse_Member& _internal_members(int index) const;
  ::CMsgDOTAChatGetUserListResponse_Member* _internal_add_members();
  public:
  const ::CMsgDOTAChatGetUserListResponse_Member& members(int index) const;
  ::CMsgDOTAChatGetUserListResponse_Member* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >&
      members() const;

  // optional fixed64 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  uint64_t channel_id() const;
  void set_channel_id(uint64_t value);
  private:
  uint64_t _internal_channel_id() const;
  void _internal_set_channel_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetUserListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member > members_;
    uint64_t channel_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatGetMemberCount) */ {
 public:
  inline CMsgDOTAChatGetMemberCount() : CMsgDOTAChatGetMemberCount(nullptr) {}
  ~CMsgDOTAChatGetMemberCount() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from);
  CMsgDOTAChatGetMemberCount(CMsgDOTAChatGetMemberCount&& from) noexcept
    : CMsgDOTAChatGetMemberCount() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetMemberCount& operator=(const CMsgDOTAChatGetMemberCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatGetMemberCount& operator=(CMsgDOTAChatGetMemberCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatGetMemberCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatGetMemberCount* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetMemberCount*>(
               &_CMsgDOTAChatGetMemberCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgDOTAChatGetMemberCount& a, CMsgDOTAChatGetMemberCount& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatGetMemberCount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatGetMemberCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetMemberCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatGetMemberCount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatGetMemberCount& from) {
    CMsgDOTAChatGetMemberCount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetMemberCount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatGetMemberCount";
  }
  protected:
  explicit CMsgDOTAChatGetMemberCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kChannelTypeFieldNumber = 2,
  };
  // optional string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);
  private:
  ::DOTAChatChannelType_t _internal_channel_type() const;
  void _internal_set_channel_type(::DOTAChatChannelType_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetMemberCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    int channel_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatGetMemberCountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatGetMemberCountResponse) */ {
 public:
  inline CMsgDOTAChatGetMemberCountResponse() : CMsgDOTAChatGetMemberCountResponse(nullptr) {}
  ~CMsgDOTAChatGetMemberCountResponse() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatGetMemberCountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from);
  CMsgDOTAChatGetMemberCountResponse(CMsgDOTAChatGetMemberCountResponse&& from) noexcept
    : CMsgDOTAChatGetMemberCountResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatGetMemberCountResponse& operator=(const CMsgDOTAChatGetMemberCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatGetMemberCountResponse& operator=(CMsgDOTAChatGetMemberCountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatGetMemberCountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatGetMemberCountResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatGetMemberCountResponse*>(
               &_CMsgDOTAChatGetMemberCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgDOTAChatGetMemberCountResponse& a, CMsgDOTAChatGetMemberCountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatGetMemberCountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatGetMemberCountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatGetMemberCountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatGetMemberCountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatGetMemberCountResponse& from) {
    CMsgDOTAChatGetMemberCountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatGetMemberCountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatGetMemberCountResponse";
  }
  protected:
  explicit CMsgDOTAChatGetMemberCountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kChannelTypeFieldNumber = 2,
    kMemberCountFieldNumber = 3,
  };
  // optional string channel_name = 1;
  bool has_channel_name() const;
  private:
  bool _internal_has_channel_name() const;
  public:
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_NODISCARD std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  bool has_channel_type() const;
  private:
  bool _internal_has_channel_type() const;
  public:
  void clear_channel_type();
  ::DOTAChatChannelType_t channel_type() const;
  void set_channel_type(::DOTAChatChannelType_t value);
  private:
  ::DOTAChatChannelType_t _internal_channel_type() const;
  void _internal_set_channel_type(::DOTAChatChannelType_t value);
  public:

  // optional uint32 member_count = 3;
  bool has_member_count() const;
  private:
  bool _internal_has_member_count() const;
  public:
  void clear_member_count();
  uint32_t member_count() const;
  void set_member_count(uint32_t value);
  private:
  uint32_t _internal_member_count() const;
  void _internal_set_member_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatGetMemberCountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
    int channel_type_;
    uint32_t member_count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled_Region final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatRegionsEnabled.Region) */ {
 public:
  inline CMsgDOTAChatRegionsEnabled_Region() : CMsgDOTAChatRegionsEnabled_Region(nullptr) {}
  ~CMsgDOTAChatRegionsEnabled_Region() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabled_Region(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from);
  CMsgDOTAChatRegionsEnabled_Region(CMsgDOTAChatRegionsEnabled_Region&& from) noexcept
    : CMsgDOTAChatRegionsEnabled_Region() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatRegionsEnabled_Region& operator=(const CMsgDOTAChatRegionsEnabled_Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatRegionsEnabled_Region& operator=(CMsgDOTAChatRegionsEnabled_Region&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatRegionsEnabled_Region& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatRegionsEnabled_Region* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatRegionsEnabled_Region*>(
               &_CMsgDOTAChatRegionsEnabled_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgDOTAChatRegionsEnabled_Region& a, CMsgDOTAChatRegionsEnabled_Region& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatRegionsEnabled_Region* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatRegionsEnabled_Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatRegionsEnabled_Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled_Region>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatRegionsEnabled_Region& from) {
    CMsgDOTAChatRegionsEnabled_Region::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatRegionsEnabled.Region";
  }
  protected:
  explicit CMsgDOTAChatRegionsEnabled_Region(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinLatitudeFieldNumber = 1,
    kMaxLatitudeFieldNumber = 2,
    kMinLongitudeFieldNumber = 3,
    kMaxLongitudeFieldNumber = 4,
  };
  // optional float min_latitude = 1;
  bool has_min_latitude() const;
  private:
  bool _internal_has_min_latitude() const;
  public:
  void clear_min_latitude();
  float min_latitude() const;
  void set_min_latitude(float value);
  private:
  float _internal_min_latitude() const;
  void _internal_set_min_latitude(float value);
  public:

  // optional float max_latitude = 2;
  bool has_max_latitude() const;
  private:
  bool _internal_has_max_latitude() const;
  public:
  void clear_max_latitude();
  float max_latitude() const;
  void set_max_latitude(float value);
  private:
  float _internal_max_latitude() const;
  void _internal_set_max_latitude(float value);
  public:

  // optional float min_longitude = 3;
  bool has_min_longitude() const;
  private:
  bool _internal_has_min_longitude() const;
  public:
  void clear_min_longitude();
  float min_longitude() const;
  void set_min_longitude(float value);
  private:
  float _internal_min_longitude() const;
  void _internal_set_min_longitude(float value);
  public:

  // optional float max_longitude = 4;
  bool has_max_longitude() const;
  private:
  bool _internal_has_max_longitude() const;
  public:
  void clear_max_longitude();
  float max_longitude() const;
  void set_max_longitude(float value);
  private:
  float _internal_max_longitude() const;
  void _internal_set_max_longitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatRegionsEnabled.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float min_latitude_;
    float max_latitude_;
    float min_longitude_;
    float max_longitude_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAChatRegionsEnabled final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAChatRegionsEnabled) */ {
 public:
  inline CMsgDOTAChatRegionsEnabled() : CMsgDOTAChatRegionsEnabled(nullptr) {}
  ~CMsgDOTAChatRegionsEnabled() override;
  explicit PROTOBUF_CONSTEXPR CMsgDOTAChatRegionsEnabled(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from);
  CMsgDOTAChatRegionsEnabled(CMsgDOTAChatRegionsEnabled&& from) noexcept
    : CMsgDOTAChatRegionsEnabled() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAChatRegionsEnabled& operator=(const CMsgDOTAChatRegionsEnabled& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAChatRegionsEnabled& operator=(CMsgDOTAChatRegionsEnabled&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgDOTAChatRegionsEnabled& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAChatRegionsEnabled* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAChatRegionsEnabled*>(
               &_CMsgDOTAChatRegionsEnabled_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgDOTAChatRegionsEnabled& a, CMsgDOTAChatRegionsEnabled& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAChatRegionsEnabled* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAChatRegionsEnabled* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgDOTAChatRegionsEnabled* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CMsgDOTAChatRegionsEnabled>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CMsgDOTAChatRegionsEnabled& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CMsgDOTAChatRegionsEnabled& from) {
    CMsgDOTAChatRegionsEnabled::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAChatRegionsEnabled* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAChatRegionsEnabled";
  }
  protected:
  explicit CMsgDOTAChatRegionsEnabled(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAChatRegionsEnabled_Region Region;

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledRegionsFieldNumber = 2,
    kEnableAllRegionsFieldNumber = 1,
  };
  // repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  int enabled_regions_size() const;
  private:
  int _internal_enabled_regions_size() const;
  public:
  void clear_enabled_regions();
  ::CMsgDOTAChatRegionsEnabled_Region* mutable_enabled_regions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >*
      mutable_enabled_regions();
  private:
  const ::CMsgDOTAChatRegionsEnabled_Region& _internal_enabled_regions(int index) const;
  ::CMsgDOTAChatRegionsEnabled_Region* _internal_add_enabled_regions();
  public:
  const ::CMsgDOTAChatRegionsEnabled_Region& enabled_regions(int index) const;
  ::CMsgDOTAChatRegionsEnabled_Region* add_enabled_regions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >&
      enabled_regions() const;

  // optional bool enable_all_regions = 1;
  bool has_enable_all_regions() const;
  private:
  bool _internal_has_enable_all_regions() const;
  public:
  void clear_enable_all_regions();
  bool enable_all_regions() const;
  void set_enable_all_regions(bool value);
  private:
  bool _internal_enable_all_regions() const;
  void _internal_set_enable_all_regions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAChatRegionsEnabled)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region > enabled_regions_;
    bool enable_all_regions_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgClientToGCPrivateChatInvite

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatInvite::_internal_has_private_chat_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatInvite::has_private_chat_channel_name() const {
  return _internal_has_private_chat_channel_name();
}
inline void CMsgClientToGCPrivateChatInvite::clear_private_chat_channel_name() {
  _impl_.private_chat_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCPrivateChatInvite::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return _internal_private_chat_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.private_chat_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
inline std::string* CMsgClientToGCPrivateChatInvite::mutable_private_chat_channel_name() {
  std::string* _s = _internal_mutable_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return _s;
}
inline const std::string& CMsgClientToGCPrivateChatInvite::_internal_private_chat_channel_name() const {
  return _impl_.private_chat_channel_name_.Get();
}
inline void CMsgClientToGCPrivateChatInvite::_internal_set_private_chat_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_chat_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatInvite::_internal_mutable_private_chat_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_chat_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatInvite::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  if (!_internal_has_private_chat_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.private_chat_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCPrivateChatInvite::set_allocated_private_chat_channel_name(std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_chat_channel_name_.SetAllocated(private_chat_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}

// optional uint32 invited_account_id = 2;
inline bool CMsgClientToGCPrivateChatInvite::_internal_has_invited_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatInvite::has_invited_account_id() const {
  return _internal_has_invited_account_id();
}
inline void CMsgClientToGCPrivateChatInvite::clear_invited_account_id() {
  _impl_.invited_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCPrivateChatInvite::_internal_invited_account_id() const {
  return _impl_.invited_account_id_;
}
inline uint32_t CMsgClientToGCPrivateChatInvite::invited_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatInvite.invited_account_id)
  return _internal_invited_account_id();
}
inline void CMsgClientToGCPrivateChatInvite::_internal_set_invited_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.invited_account_id_ = value;
}
inline void CMsgClientToGCPrivateChatInvite::set_invited_account_id(uint32_t value) {
  _internal_set_invited_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatInvite.invited_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatKick

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatKick::_internal_has_private_chat_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatKick::has_private_chat_channel_name() const {
  return _internal_has_private_chat_channel_name();
}
inline void CMsgClientToGCPrivateChatKick::clear_private_chat_channel_name() {
  _impl_.private_chat_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCPrivateChatKick::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return _internal_private_chat_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.private_chat_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
inline std::string* CMsgClientToGCPrivateChatKick::mutable_private_chat_channel_name() {
  std::string* _s = _internal_mutable_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return _s;
}
inline const std::string& CMsgClientToGCPrivateChatKick::_internal_private_chat_channel_name() const {
  return _impl_.private_chat_channel_name_.Get();
}
inline void CMsgClientToGCPrivateChatKick::_internal_set_private_chat_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_chat_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatKick::_internal_mutable_private_chat_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_chat_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatKick::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  if (!_internal_has_private_chat_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.private_chat_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCPrivateChatKick::set_allocated_private_chat_channel_name(std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_chat_channel_name_.SetAllocated(private_chat_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}

// optional uint32 kick_account_id = 2;
inline bool CMsgClientToGCPrivateChatKick::_internal_has_kick_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatKick::has_kick_account_id() const {
  return _internal_has_kick_account_id();
}
inline void CMsgClientToGCPrivateChatKick::clear_kick_account_id() {
  _impl_.kick_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCPrivateChatKick::_internal_kick_account_id() const {
  return _impl_.kick_account_id_;
}
inline uint32_t CMsgClientToGCPrivateChatKick::kick_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatKick.kick_account_id)
  return _internal_kick_account_id();
}
inline void CMsgClientToGCPrivateChatKick::_internal_set_kick_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.kick_account_id_ = value;
}
inline void CMsgClientToGCPrivateChatKick::set_kick_account_id(uint32_t value) {
  _internal_set_kick_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatKick.kick_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatPromote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatPromote::_internal_has_private_chat_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatPromote::has_private_chat_channel_name() const {
  return _internal_has_private_chat_channel_name();
}
inline void CMsgClientToGCPrivateChatPromote::clear_private_chat_channel_name() {
  _impl_.private_chat_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCPrivateChatPromote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return _internal_private_chat_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.private_chat_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
inline std::string* CMsgClientToGCPrivateChatPromote::mutable_private_chat_channel_name() {
  std::string* _s = _internal_mutable_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return _s;
}
inline const std::string& CMsgClientToGCPrivateChatPromote::_internal_private_chat_channel_name() const {
  return _impl_.private_chat_channel_name_.Get();
}
inline void CMsgClientToGCPrivateChatPromote::_internal_set_private_chat_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_chat_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatPromote::_internal_mutable_private_chat_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_chat_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatPromote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  if (!_internal_has_private_chat_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.private_chat_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCPrivateChatPromote::set_allocated_private_chat_channel_name(std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_chat_channel_name_.SetAllocated(private_chat_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}

// optional uint32 promote_account_id = 2;
inline bool CMsgClientToGCPrivateChatPromote::_internal_has_promote_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatPromote::has_promote_account_id() const {
  return _internal_has_promote_account_id();
}
inline void CMsgClientToGCPrivateChatPromote::clear_promote_account_id() {
  _impl_.promote_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCPrivateChatPromote::_internal_promote_account_id() const {
  return _impl_.promote_account_id_;
}
inline uint32_t CMsgClientToGCPrivateChatPromote::promote_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatPromote.promote_account_id)
  return _internal_promote_account_id();
}
inline void CMsgClientToGCPrivateChatPromote::_internal_set_promote_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.promote_account_id_ = value;
}
inline void CMsgClientToGCPrivateChatPromote::set_promote_account_id(uint32_t value) {
  _internal_set_promote_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatPromote.promote_account_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCPrivateChatDemote

// optional string private_chat_channel_name = 1;
inline bool CMsgClientToGCPrivateChatDemote::_internal_has_private_chat_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatDemote::has_private_chat_channel_name() const {
  return _internal_has_private_chat_channel_name();
}
inline void CMsgClientToGCPrivateChatDemote::clear_private_chat_channel_name() {
  _impl_.private_chat_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCPrivateChatDemote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return _internal_private_chat_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.private_chat_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
inline std::string* CMsgClientToGCPrivateChatDemote::mutable_private_chat_channel_name() {
  std::string* _s = _internal_mutable_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return _s;
}
inline const std::string& CMsgClientToGCPrivateChatDemote::_internal_private_chat_channel_name() const {
  return _impl_.private_chat_channel_name_.Get();
}
inline void CMsgClientToGCPrivateChatDemote::_internal_set_private_chat_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_chat_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatDemote::_internal_mutable_private_chat_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_chat_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgClientToGCPrivateChatDemote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  if (!_internal_has_private_chat_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.private_chat_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgClientToGCPrivateChatDemote::set_allocated_private_chat_channel_name(std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_chat_channel_name_.SetAllocated(private_chat_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}

// optional uint32 demote_account_id = 2;
inline bool CMsgClientToGCPrivateChatDemote::_internal_has_demote_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCPrivateChatDemote::has_demote_account_id() const {
  return _internal_has_demote_account_id();
}
inline void CMsgClientToGCPrivateChatDemote::clear_demote_account_id() {
  _impl_.demote_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgClientToGCPrivateChatDemote::_internal_demote_account_id() const {
  return _impl_.demote_account_id_;
}
inline uint32_t CMsgClientToGCPrivateChatDemote::demote_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCPrivateChatDemote.demote_account_id)
  return _internal_demote_account_id();
}
inline void CMsgClientToGCPrivateChatDemote::_internal_set_demote_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.demote_account_id_ = value;
}
inline void CMsgClientToGCPrivateChatDemote::set_demote_account_id(uint32_t value) {
  _internal_set_demote_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCPrivateChatDemote.demote_account_id)
}

// -------------------------------------------------------------------

// CMsgGCToClientPrivateChatResponse

// optional string private_chat_channel_name = 1;
inline bool CMsgGCToClientPrivateChatResponse::_internal_has_private_chat_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientPrivateChatResponse::has_private_chat_channel_name() const {
  return _internal_has_private_chat_channel_name();
}
inline void CMsgGCToClientPrivateChatResponse::clear_private_chat_channel_name() {
  _impl_.private_chat_channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCToClientPrivateChatResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return _internal_private_chat_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.private_chat_channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
inline std::string* CMsgGCToClientPrivateChatResponse::mutable_private_chat_channel_name() {
  std::string* _s = _internal_mutable_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return _s;
}
inline const std::string& CMsgGCToClientPrivateChatResponse::_internal_private_chat_channel_name() const {
  return _impl_.private_chat_channel_name_.Get();
}
inline void CMsgGCToClientPrivateChatResponse::_internal_set_private_chat_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_chat_channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCToClientPrivateChatResponse::_internal_mutable_private_chat_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_chat_channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCToClientPrivateChatResponse::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  if (!_internal_has_private_chat_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.private_chat_channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_private_chat_channel_name(std::string* private_chat_channel_name) {
  if (private_chat_channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_chat_channel_name_.SetAllocated(private_chat_channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.private_chat_channel_name_.IsDefault()) {
    _impl_.private_chat_channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}

// optional .CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
inline bool CMsgGCToClientPrivateChatResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToClientPrivateChatResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgGCToClientPrivateChatResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::_internal_result() const {
  return static_cast< ::CMsgGCToClientPrivateChatResponse_Result >(_impl_.result_);
}
inline ::CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.result)
  return _internal_result();
}
inline void CMsgGCToClientPrivateChatResponse::_internal_set_result(::CMsgGCToClientPrivateChatResponse_Result value) {
  assert(::CMsgGCToClientPrivateChatResponse_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_ = value;
}
inline void CMsgGCToClientPrivateChatResponse::set_result(::CMsgGCToClientPrivateChatResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.result)
}

// optional string username = 3;
inline bool CMsgGCToClientPrivateChatResponse::_internal_has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientPrivateChatResponse::has_username() const {
  return _internal_has_username();
}
inline void CMsgGCToClientPrivateChatResponse::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCToClientPrivateChatResponse::username() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientPrivateChatResponse.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgGCToClientPrivateChatResponse::set_username(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgGCToClientPrivateChatResponse.username)
}
inline std::string* CMsgGCToClientPrivateChatResponse::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientPrivateChatResponse.username)
  return _s;
}
inline const std::string& CMsgGCToClientPrivateChatResponse::_internal_username() const {
  return _impl_.username_.Get();
}
inline void CMsgGCToClientPrivateChatResponse::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgGCToClientPrivateChatResponse::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgGCToClientPrivateChatResponse::release_username() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientPrivateChatResponse.username)
  if (!_internal_has_username()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.username_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgGCToClientPrivateChatResponse::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientPrivateChatResponse.username)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannel

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannel::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannel::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CMsgDOTAJoinChatChannel::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAJoinChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAJoinChatChannel::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_name)
}
inline std::string* CMsgDOTAJoinChatChannel::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannel.channel_name)
  return _s;
}
inline const std::string& CMsgDOTAJoinChatChannel::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void CMsgDOTAJoinChatChannel::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannel::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAJoinChatChannel.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAJoinChatChannel::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannel.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannel::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannel::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CMsgDOTAJoinChatChannel::clear_channel_type() {
  _impl_.channel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::_internal_channel_type() const {
  return static_cast< ::DOTAChatChannelType_t >(_impl_.channel_type_);
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.channel_type)
  return _internal_channel_type();
}
inline void CMsgDOTAJoinChatChannel::_internal_set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_type_ = value;
}
inline void CMsgDOTAJoinChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.channel_type)
}

// optional bool silent_rejection = 5;
inline bool CMsgDOTAJoinChatChannel::_internal_has_silent_rejection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannel::has_silent_rejection() const {
  return _internal_has_silent_rejection();
}
inline void CMsgDOTAJoinChatChannel::clear_silent_rejection() {
  _impl_.silent_rejection_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgDOTAJoinChatChannel::_internal_silent_rejection() const {
  return _impl_.silent_rejection_;
}
inline bool CMsgDOTAJoinChatChannel::silent_rejection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannel.silent_rejection)
  return _internal_silent_rejection();
}
inline void CMsgDOTAJoinChatChannel::_internal_set_silent_rejection(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.silent_rejection_ = value;
}
inline void CMsgDOTAJoinChatChannel::set_silent_rejection(bool value) {
  _internal_set_silent_rejection(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannel.silent_rejection)
}

// -------------------------------------------------------------------

// CMsgDOTALeaveChatChannel

// optional uint64 channel_id = 1;
inline bool CMsgDOTALeaveChatChannel::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALeaveChatChannel::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTALeaveChatChannel::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTALeaveChatChannel::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTALeaveChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaveChatChannel.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTALeaveChatChannel::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTALeaveChatChannel::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaveChatChannel.channel_id)
}

// -------------------------------------------------------------------

// CMsgGCChatReportPublicSpam

// optional uint64 channel_id = 1;
inline bool CMsgGCChatReportPublicSpam::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCChatReportPublicSpam::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgGCChatReportPublicSpam::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgGCChatReportPublicSpam::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgGCChatReportPublicSpam::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChatReportPublicSpam.channel_id)
  return _internal_channel_id();
}
inline void CMsgGCChatReportPublicSpam::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void CMsgGCChatReportPublicSpam::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCChatReportPublicSpam.channel_id)
}

// optional uint32 channel_user_id = 2;
inline bool CMsgGCChatReportPublicSpam::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCChatReportPublicSpam::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgGCChatReportPublicSpam::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgGCChatReportPublicSpam::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgGCChatReportPublicSpam::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCChatReportPublicSpam.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgGCChatReportPublicSpam::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgGCChatReportPublicSpam::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCChatReportPublicSpam.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatModeratorBan

// optional uint64 channel_id = 1;
inline bool CMsgDOTAChatModeratorBan::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatModeratorBan::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAChatModeratorBan::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAChatModeratorBan::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAChatModeratorBan::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatModeratorBan.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAChatModeratorBan::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAChatModeratorBan::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatModeratorBan.channel_id)
}

// optional uint32 account_id = 2;
inline bool CMsgDOTAChatModeratorBan::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatModeratorBan::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAChatModeratorBan::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAChatModeratorBan::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAChatModeratorBan::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatModeratorBan.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAChatModeratorBan::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAChatModeratorBan::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatModeratorBan.account_id)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAChatModeratorBan::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatModeratorBan::has_duration() const {
  return _internal_has_duration();
}
inline void CMsgDOTAChatModeratorBan::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatModeratorBan::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t CMsgDOTAChatModeratorBan::duration() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatModeratorBan.duration)
  return _internal_duration();
}
inline void CMsgDOTAChatModeratorBan::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void CMsgDOTAChatModeratorBan::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatModeratorBan.duration)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_DiceRoll

// optional int32 roll_min = 1;
inline bool CMsgDOTAChatMessage_DiceRoll::_internal_has_roll_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_min() const {
  return _internal_has_roll_min();
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_min() {
  _impl_.roll_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::_internal_roll_min() const {
  return _impl_.roll_min_;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::roll_min() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.roll_min)
  return _internal_roll_min();
}
inline void CMsgDOTAChatMessage_DiceRoll::_internal_set_roll_min(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.roll_min_ = value;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_min(int32_t value) {
  _internal_set_roll_min(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.roll_min)
}

// optional int32 roll_max = 2;
inline bool CMsgDOTAChatMessage_DiceRoll::_internal_has_roll_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_DiceRoll::has_roll_max() const {
  return _internal_has_roll_max();
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_roll_max() {
  _impl_.roll_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::_internal_roll_max() const {
  return _impl_.roll_max_;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::roll_max() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.roll_max)
  return _internal_roll_max();
}
inline void CMsgDOTAChatMessage_DiceRoll::_internal_set_roll_max(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.roll_max_ = value;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_roll_max(int32_t value) {
  _internal_set_roll_max(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.roll_max)
}

// optional int32 result = 3;
inline bool CMsgDOTAChatMessage_DiceRoll::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_DiceRoll::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAChatMessage_DiceRoll::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::_internal_result() const {
  return _impl_.result_;
}
inline int32_t CMsgDOTAChatMessage_DiceRoll::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.DiceRoll.result)
  return _internal_result();
}
inline void CMsgDOTAChatMessage_DiceRoll::_internal_set_result(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.result_ = value;
}
inline void CMsgDOTAChatMessage_DiceRoll::set_result(int32_t value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.DiceRoll.result)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_TriviaAnswered

// optional uint32 question_id = 1;
inline bool CMsgDOTAChatMessage_TriviaAnswered::_internal_has_question_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_question_id() const {
  return _internal_has_question_id();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_question_id() {
  _impl_.question_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::_internal_question_id() const {
  return _impl_.question_id_;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::question_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.TriviaAnswered.question_id)
  return _internal_question_id();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::_internal_set_question_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.question_id_ = value;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_question_id(uint32_t value) {
  _internal_set_question_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.TriviaAnswered.question_id)
}

// optional uint32 answer_index = 2;
inline bool CMsgDOTAChatMessage_TriviaAnswered::_internal_has_answer_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_answer_index() const {
  return _internal_has_answer_index();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_answer_index() {
  _impl_.answer_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::_internal_answer_index() const {
  return _impl_.answer_index_;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::answer_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.TriviaAnswered.answer_index)
  return _internal_answer_index();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::_internal_set_answer_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.answer_index_ = value;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_answer_index(uint32_t value) {
  _internal_set_answer_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.TriviaAnswered.answer_index)
}

// optional uint32 party_questions_correct = 3;
inline bool CMsgDOTAChatMessage_TriviaAnswered::_internal_has_party_questions_correct() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_correct() const {
  return _internal_has_party_questions_correct();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_correct() {
  _impl_.party_questions_correct_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::_internal_party_questions_correct() const {
  return _impl_.party_questions_correct_;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::party_questions_correct() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
  return _internal_party_questions_correct();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::_internal_set_party_questions_correct(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.party_questions_correct_ = value;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_correct(uint32_t value) {
  _internal_set_party_questions_correct(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
}

// optional uint32 party_questions_viewed = 4;
inline bool CMsgDOTAChatMessage_TriviaAnswered::_internal_has_party_questions_viewed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_viewed() const {
  return _internal_has_party_questions_viewed();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_viewed() {
  _impl_.party_questions_viewed_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::_internal_party_questions_viewed() const {
  return _impl_.party_questions_viewed_;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::party_questions_viewed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
  return _internal_party_questions_viewed();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::_internal_set_party_questions_viewed(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.party_questions_viewed_ = value;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_viewed(uint32_t value) {
  _internal_set_party_questions_viewed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
}

// optional uint32 party_trivia_points = 5;
inline bool CMsgDOTAChatMessage_TriviaAnswered::_internal_has_party_trivia_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_TriviaAnswered::has_party_trivia_points() const {
  return _internal_has_party_trivia_points();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::clear_party_trivia_points() {
  _impl_.party_trivia_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::_internal_party_trivia_points() const {
  return _impl_.party_trivia_points_;
}
inline uint32_t CMsgDOTAChatMessage_TriviaAnswered::party_trivia_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
  return _internal_party_trivia_points();
}
inline void CMsgDOTAChatMessage_TriviaAnswered::_internal_set_party_trivia_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.party_trivia_points_ = value;
}
inline void CMsgDOTAChatMessage_TriviaAnswered::set_party_trivia_points(uint32_t value) {
  _internal_set_party_trivia_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_PlayerDraftPick

// optional int32 player_id = 1 [default = -1];
inline bool CMsgDOTAChatMessage_PlayerDraftPick::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_PlayerDraftPick::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CMsgDOTAChatMessage_PlayerDraftPick::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgDOTAChatMessage_PlayerDraftPick::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.PlayerDraftPick.player_id)
  return _internal_player_id();
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.player_id_ = value;
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.PlayerDraftPick.player_id)
}

// optional int32 team = 2;
inline bool CMsgDOTAChatMessage_PlayerDraftPick::_internal_has_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_PlayerDraftPick::has_team() const {
  return _internal_has_team();
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::clear_team() {
  _impl_.team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CMsgDOTAChatMessage_PlayerDraftPick::_internal_team() const {
  return _impl_.team_;
}
inline int32_t CMsgDOTAChatMessage_PlayerDraftPick::team() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.PlayerDraftPick.team)
  return _internal_team();
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::_internal_set_team(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.team_ = value;
}
inline void CMsgDOTAChatMessage_PlayerDraftPick::set_team(int32_t value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.PlayerDraftPick.team)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage_ChatWheelMessage

// optional uint32 message_id = 1 [default = 4294967295];
inline bool CMsgDOTAChatMessage_ChatWheelMessage::_internal_has_message_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_ChatWheelMessage::has_message_id() const {
  return _internal_has_message_id();
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::clear_message_id() {
  _impl_.message_id_ = 4294967295u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTAChatMessage_ChatWheelMessage::_internal_message_id() const {
  return _impl_.message_id_;
}
inline uint32_t CMsgDOTAChatMessage_ChatWheelMessage::message_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.ChatWheelMessage.message_id)
  return _internal_message_id();
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::_internal_set_message_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.message_id_ = value;
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::set_message_id(uint32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.ChatWheelMessage.message_id)
}

// optional uint32 emoticon_id = 2;
inline bool CMsgDOTAChatMessage_ChatWheelMessage::_internal_has_emoticon_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage_ChatWheelMessage::has_emoticon_id() const {
  return _internal_has_emoticon_id();
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::clear_emoticon_id() {
  _impl_.emoticon_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAChatMessage_ChatWheelMessage::_internal_emoticon_id() const {
  return _impl_.emoticon_id_;
}
inline uint32_t CMsgDOTAChatMessage_ChatWheelMessage::emoticon_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.ChatWheelMessage.emoticon_id)
  return _internal_emoticon_id();
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::_internal_set_emoticon_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.emoticon_id_ = value;
}
inline void CMsgDOTAChatMessage_ChatWheelMessage::set_emoticon_id(uint32_t value) {
  _internal_set_emoticon_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.ChatWheelMessage.emoticon_id)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMessage

// optional uint32 account_id = 1;
inline bool CMsgDOTAChatMessage::_internal_has_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAChatMessage::clear_account_id() {
  _impl_.account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_account_id() const {
  return _impl_.account_id_;
}
inline uint32_t CMsgDOTAChatMessage::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAChatMessage::_internal_set_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.account_id_ = value;
}
inline void CMsgDOTAChatMessage::set_account_id(uint32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.account_id)
}

// optional uint64 channel_id = 2;
inline bool CMsgDOTAChatMessage::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAChatMessage::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t CMsgDOTAChatMessage::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAChatMessage::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAChatMessage::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.channel_id)
}

// optional string persona_name = 3;
inline bool CMsgDOTAChatMessage::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgDOTAChatMessage::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAChatMessage::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMessage::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.persona_name)
}
inline std::string* CMsgDOTAChatMessage::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.persona_name)
  return _s;
}
inline const std::string& CMsgDOTAChatMessage::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CMsgDOTAChatMessage::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMessage::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.persona_name)
}

// optional string text = 4;
inline bool CMsgDOTAChatMessage::_internal_has_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_text() const {
  return _internal_has_text();
}
inline void CMsgDOTAChatMessage::clear_text() {
  _impl_.text_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAChatMessage::text() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMessage::set_text(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.text)
}
inline std::string* CMsgDOTAChatMessage::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.text)
  return _s;
}
inline const std::string& CMsgDOTAChatMessage::_internal_text() const {
  return _impl_.text_.Get();
}
inline void CMsgDOTAChatMessage::_internal_set_text(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::_internal_mutable_text() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.text)
}

// optional uint32 timestamp = 5;
inline bool CMsgDOTAChatMessage::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAChatMessage::clear_timestamp() {
  _impl_.timestamp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline uint32_t CMsgDOTAChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAChatMessage::_internal_set_timestamp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.timestamp_ = value;
}
inline void CMsgDOTAChatMessage::set_timestamp(uint32_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.timestamp)
}

// optional uint32 suggest_invite_account_id = 6;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_invite_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_invite_account_id() const {
  return _internal_has_suggest_invite_account_id();
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_account_id() {
  _impl_.suggest_invite_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_suggest_invite_account_id() const {
  return _impl_.suggest_invite_account_id_;
}
inline uint32_t CMsgDOTAChatMessage::suggest_invite_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_account_id)
  return _internal_suggest_invite_account_id();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_invite_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.suggest_invite_account_id_ = value;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_account_id(uint32_t value) {
  _internal_set_suggest_invite_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_account_id)
}

// optional string suggest_invite_name = 7;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_invite_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_invite_name() const {
  return _internal_has_suggest_invite_name();
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_name() {
  _impl_.suggest_invite_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAChatMessage::suggest_invite_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_name)
  return _internal_suggest_invite_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMessage::set_suggest_invite_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.suggest_invite_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_name)
}
inline std::string* CMsgDOTAChatMessage::mutable_suggest_invite_name() {
  std::string* _s = _internal_mutable_suggest_invite_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.suggest_invite_name)
  return _s;
}
inline const std::string& CMsgDOTAChatMessage::_internal_suggest_invite_name() const {
  return _impl_.suggest_invite_name_.Get();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_invite_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.suggest_invite_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::_internal_mutable_suggest_invite_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.suggest_invite_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::release_suggest_invite_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.suggest_invite_name)
  if (!_internal_has_suggest_invite_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.suggest_invite_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.suggest_invite_name_.IsDefault()) {
    _impl_.suggest_invite_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_invite_name(std::string* suggest_invite_name) {
  if (suggest_invite_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.suggest_invite_name_.SetAllocated(suggest_invite_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.suggest_invite_name_.IsDefault()) {
    _impl_.suggest_invite_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.suggest_invite_name)
}

// optional uint32 fantasy_draft_owner_account_id = 8;
inline bool CMsgDOTAChatMessage::_internal_has_fantasy_draft_owner_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_fantasy_draft_owner_account_id() const {
  return _internal_has_fantasy_draft_owner_account_id();
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_owner_account_id() {
  _impl_.fantasy_draft_owner_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_fantasy_draft_owner_account_id() const {
  return _impl_.fantasy_draft_owner_account_id_;
}
inline uint32_t CMsgDOTAChatMessage::fantasy_draft_owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
  return _internal_fantasy_draft_owner_account_id();
}
inline void CMsgDOTAChatMessage::_internal_set_fantasy_draft_owner_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.fantasy_draft_owner_account_id_ = value;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_owner_account_id(uint32_t value) {
  _internal_set_fantasy_draft_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
}

// optional uint32 fantasy_draft_player_account_id = 9;
inline bool CMsgDOTAChatMessage::_internal_has_fantasy_draft_player_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_fantasy_draft_player_account_id() const {
  return _internal_has_fantasy_draft_player_account_id();
}
inline void CMsgDOTAChatMessage::clear_fantasy_draft_player_account_id() {
  _impl_.fantasy_draft_player_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_fantasy_draft_player_account_id() const {
  return _impl_.fantasy_draft_player_account_id_;
}
inline uint32_t CMsgDOTAChatMessage::fantasy_draft_player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.fantasy_draft_player_account_id)
  return _internal_fantasy_draft_player_account_id();
}
inline void CMsgDOTAChatMessage::_internal_set_fantasy_draft_player_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.fantasy_draft_player_account_id_ = value;
}
inline void CMsgDOTAChatMessage::set_fantasy_draft_player_account_id(uint32_t value) {
  _internal_set_fantasy_draft_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.fantasy_draft_player_account_id)
}

// optional uint32 event_id = 10;
inline bool CMsgDOTAChatMessage::_internal_has_event_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgDOTAChatMessage::clear_event_id() {
  _impl_.event_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_event_id() const {
  return _impl_.event_id_;
}
inline uint32_t CMsgDOTAChatMessage::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.event_id)
  return _internal_event_id();
}
inline void CMsgDOTAChatMessage::_internal_set_event_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.event_id_ = value;
}
inline void CMsgDOTAChatMessage::set_event_id(uint32_t value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.event_id)
}

// optional bool suggest_invite_to_lobby = 11;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_invite_to_lobby() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_invite_to_lobby() const {
  return _internal_has_suggest_invite_to_lobby();
}
inline void CMsgDOTAChatMessage::clear_suggest_invite_to_lobby() {
  _impl_.suggest_invite_to_lobby_ = false;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline bool CMsgDOTAChatMessage::_internal_suggest_invite_to_lobby() const {
  return _impl_.suggest_invite_to_lobby_;
}
inline bool CMsgDOTAChatMessage::suggest_invite_to_lobby() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_invite_to_lobby)
  return _internal_suggest_invite_to_lobby();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_invite_to_lobby(bool value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.suggest_invite_to_lobby_ = value;
}
inline void CMsgDOTAChatMessage::set_suggest_invite_to_lobby(bool value) {
  _internal_set_suggest_invite_to_lobby(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_invite_to_lobby)
}

// optional uint32 event_points = 12;
inline bool CMsgDOTAChatMessage::_internal_has_event_points() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_event_points() const {
  return _internal_has_event_points();
}
inline void CMsgDOTAChatMessage::clear_event_points() {
  _impl_.event_points_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_event_points() const {
  return _impl_.event_points_;
}
inline uint32_t CMsgDOTAChatMessage::event_points() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.event_points)
  return _internal_event_points();
}
inline void CMsgDOTAChatMessage::_internal_set_event_points(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.event_points_ = value;
}
inline void CMsgDOTAChatMessage::set_event_points(uint32_t value) {
  _internal_set_event_points(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.event_points)
}

// optional bool coin_flip = 13;
inline bool CMsgDOTAChatMessage::_internal_has_coin_flip() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_coin_flip() const {
  return _internal_has_coin_flip();
}
inline void CMsgDOTAChatMessage::clear_coin_flip() {
  _impl_.coin_flip_ = false;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline bool CMsgDOTAChatMessage::_internal_coin_flip() const {
  return _impl_.coin_flip_;
}
inline bool CMsgDOTAChatMessage::coin_flip() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.coin_flip)
  return _internal_coin_flip();
}
inline void CMsgDOTAChatMessage::_internal_set_coin_flip(bool value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.coin_flip_ = value;
}
inline void CMsgDOTAChatMessage::set_coin_flip(bool value) {
  _internal_set_coin_flip(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.coin_flip)
}

// optional int32 player_id = 14 [default = -1];
inline bool CMsgDOTAChatMessage::_internal_has_player_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_player_id() const {
  return _internal_has_player_id();
}
inline void CMsgDOTAChatMessage::clear_player_id() {
  _impl_.player_id_ = -1;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline int32_t CMsgDOTAChatMessage::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int32_t CMsgDOTAChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.player_id)
  return _internal_player_id();
}
inline void CMsgDOTAChatMessage::_internal_set_player_id(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000020u;
  _impl_.player_id_ = value;
}
inline void CMsgDOTAChatMessage::set_player_id(int32_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.player_id)
}

// optional uint32 share_profile_account_id = 15;
inline bool CMsgDOTAChatMessage::_internal_has_share_profile_account_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_share_profile_account_id() const {
  return _internal_has_share_profile_account_id();
}
inline void CMsgDOTAChatMessage::clear_share_profile_account_id() {
  _impl_.share_profile_account_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_share_profile_account_id() const {
  return _impl_.share_profile_account_id_;
}
inline uint32_t CMsgDOTAChatMessage::share_profile_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_profile_account_id)
  return _internal_share_profile_account_id();
}
inline void CMsgDOTAChatMessage::_internal_set_share_profile_account_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.share_profile_account_id_ = value;
}
inline void CMsgDOTAChatMessage::set_share_profile_account_id(uint32_t value) {
  _internal_set_share_profile_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_profile_account_id)
}

// optional uint32 channel_user_id = 16;
inline bool CMsgDOTAChatMessage::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAChatMessage::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAChatMessage::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAChatMessage::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAChatMessage::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.channel_user_id)
}

// optional .CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
inline bool CMsgDOTAChatMessage::_internal_has_dice_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dice_roll_ != nullptr);
  return value;
}
inline bool CMsgDOTAChatMessage::has_dice_roll() const {
  return _internal_has_dice_roll();
}
inline void CMsgDOTAChatMessage::clear_dice_roll() {
  if (_impl_.dice_roll_ != nullptr) _impl_.dice_roll_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage::_internal_dice_roll() const {
  const ::CMsgDOTAChatMessage_DiceRoll* p = _impl_.dice_roll_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAChatMessage_DiceRoll&>(
      ::_CMsgDOTAChatMessage_DiceRoll_default_instance_);
}
inline const ::CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage::dice_roll() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.dice_roll)
  return _internal_dice_roll();
}
inline void CMsgDOTAChatMessage::unsafe_arena_set_allocated_dice_roll(
    ::CMsgDOTAChatMessage_DiceRoll* dice_roll) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dice_roll_);
  }
  _impl_.dice_roll_ = dice_roll;
  if (dice_roll) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAChatMessage.dice_roll)
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::release_dice_roll() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAChatMessage_DiceRoll* temp = _impl_.dice_roll_;
  _impl_.dice_roll_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::unsafe_arena_release_dice_roll() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.dice_roll)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgDOTAChatMessage_DiceRoll* temp = _impl_.dice_roll_;
  _impl_.dice_roll_ = nullptr;
  return temp;
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::_internal_mutable_dice_roll() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.dice_roll_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAChatMessage_DiceRoll>(GetArenaForAllocation());
    _impl_.dice_roll_ = p;
  }
  return _impl_.dice_roll_;
}
inline ::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::mutable_dice_roll() {
  ::CMsgDOTAChatMessage_DiceRoll* _msg = _internal_mutable_dice_roll();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.dice_roll)
  return _msg;
}
inline void CMsgDOTAChatMessage::set_allocated_dice_roll(::CMsgDOTAChatMessage_DiceRoll* dice_roll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dice_roll_;
  }
  if (dice_roll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dice_roll);
    if (message_arena != submessage_arena) {
      dice_roll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dice_roll, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.dice_roll_ = dice_roll;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.dice_roll)
}

// optional uint64 share_party_id = 18;
inline bool CMsgDOTAChatMessage::_internal_has_share_party_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_share_party_id() const {
  return _internal_has_share_party_id();
}
inline void CMsgDOTAChatMessage::clear_share_party_id() {
  _impl_.share_party_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline uint64_t CMsgDOTAChatMessage::_internal_share_party_id() const {
  return _impl_.share_party_id_;
}
inline uint64_t CMsgDOTAChatMessage::share_party_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_party_id)
  return _internal_share_party_id();
}
inline void CMsgDOTAChatMessage::_internal_set_share_party_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.share_party_id_ = value;
}
inline void CMsgDOTAChatMessage::set_share_party_id(uint64_t value) {
  _internal_set_share_party_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_party_id)
}

// optional uint64 share_lobby_id = 19;
inline bool CMsgDOTAChatMessage::_internal_has_share_lobby_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_share_lobby_id() const {
  return _internal_has_share_lobby_id();
}
inline void CMsgDOTAChatMessage::clear_share_lobby_id() {
  _impl_.share_lobby_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline uint64_t CMsgDOTAChatMessage::_internal_share_lobby_id() const {
  return _impl_.share_lobby_id_;
}
inline uint64_t CMsgDOTAChatMessage::share_lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_id)
  return _internal_share_lobby_id();
}
inline void CMsgDOTAChatMessage::_internal_set_share_lobby_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.share_lobby_id_ = value;
}
inline void CMsgDOTAChatMessage::set_share_lobby_id(uint64_t value) {
  _internal_set_share_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_id)
}

// optional uint64 share_lobby_custom_game_id = 20;
inline bool CMsgDOTAChatMessage::_internal_has_share_lobby_custom_game_id() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_share_lobby_custom_game_id() const {
  return _internal_has_share_lobby_custom_game_id();
}
inline void CMsgDOTAChatMessage::clear_share_lobby_custom_game_id() {
  _impl_.share_lobby_custom_game_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline uint64_t CMsgDOTAChatMessage::_internal_share_lobby_custom_game_id() const {
  return _impl_.share_lobby_custom_game_id_;
}
inline uint64_t CMsgDOTAChatMessage::share_lobby_custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_custom_game_id)
  return _internal_share_lobby_custom_game_id();
}
inline void CMsgDOTAChatMessage::_internal_set_share_lobby_custom_game_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.share_lobby_custom_game_id_ = value;
}
inline void CMsgDOTAChatMessage::set_share_lobby_custom_game_id(uint64_t value) {
  _internal_set_share_lobby_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_custom_game_id)
}

// optional string share_lobby_passkey = 21;
inline bool CMsgDOTAChatMessage::_internal_has_share_lobby_passkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_share_lobby_passkey() const {
  return _internal_has_share_lobby_passkey();
}
inline void CMsgDOTAChatMessage::clear_share_lobby_passkey() {
  _impl_.share_lobby_passkey_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgDOTAChatMessage::share_lobby_passkey() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.share_lobby_passkey)
  return _internal_share_lobby_passkey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMessage::set_share_lobby_passkey(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.share_lobby_passkey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.share_lobby_passkey)
}
inline std::string* CMsgDOTAChatMessage::mutable_share_lobby_passkey() {
  std::string* _s = _internal_mutable_share_lobby_passkey();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.share_lobby_passkey)
  return _s;
}
inline const std::string& CMsgDOTAChatMessage::_internal_share_lobby_passkey() const {
  return _impl_.share_lobby_passkey_.Get();
}
inline void CMsgDOTAChatMessage::_internal_set_share_lobby_passkey(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.share_lobby_passkey_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::_internal_mutable_share_lobby_passkey() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.share_lobby_passkey_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::release_share_lobby_passkey() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.share_lobby_passkey)
  if (!_internal_has_share_lobby_passkey()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.share_lobby_passkey_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_lobby_passkey_.IsDefault()) {
    _impl_.share_lobby_passkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMessage::set_allocated_share_lobby_passkey(std::string* share_lobby_passkey) {
  if (share_lobby_passkey != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.share_lobby_passkey_.SetAllocated(share_lobby_passkey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.share_lobby_passkey_.IsDefault()) {
    _impl_.share_lobby_passkey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.share_lobby_passkey)
}

// optional uint32 private_chat_channel_id = 22;
inline bool CMsgDOTAChatMessage::_internal_has_private_chat_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_private_chat_channel_id() const {
  return _internal_has_private_chat_channel_id();
}
inline void CMsgDOTAChatMessage::clear_private_chat_channel_id() {
  _impl_.private_chat_channel_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_private_chat_channel_id() const {
  return _impl_.private_chat_channel_id_;
}
inline uint32_t CMsgDOTAChatMessage::private_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.private_chat_channel_id)
  return _internal_private_chat_channel_id();
}
inline void CMsgDOTAChatMessage::_internal_set_private_chat_channel_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.private_chat_channel_id_ = value;
}
inline void CMsgDOTAChatMessage::set_private_chat_channel_id(uint32_t value) {
  _internal_set_private_chat_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.private_chat_channel_id)
}

// optional uint32 status = 23;
inline bool CMsgDOTAChatMessage::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAChatMessage::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgDOTAChatMessage::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.status)
  return _internal_status();
}
inline void CMsgDOTAChatMessage::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.status_ = value;
}
inline void CMsgDOTAChatMessage::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.status)
}

// optional bool legacy_battle_cup_victory = 24;
inline bool CMsgDOTAChatMessage::_internal_has_legacy_battle_cup_victory() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_legacy_battle_cup_victory() const {
  return _internal_has_legacy_battle_cup_victory();
}
inline void CMsgDOTAChatMessage::clear_legacy_battle_cup_victory() {
  _impl_.legacy_battle_cup_victory_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool CMsgDOTAChatMessage::_internal_legacy_battle_cup_victory() const {
  return _impl_.legacy_battle_cup_victory_;
}
inline bool CMsgDOTAChatMessage::legacy_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.legacy_battle_cup_victory)
  return _internal_legacy_battle_cup_victory();
}
inline void CMsgDOTAChatMessage::_internal_set_legacy_battle_cup_victory(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.legacy_battle_cup_victory_ = value;
}
inline void CMsgDOTAChatMessage::set_legacy_battle_cup_victory(bool value) {
  _internal_set_legacy_battle_cup_victory(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.legacy_battle_cup_victory)
}

// optional uint32 battle_cup_streak = 29;
inline bool CMsgDOTAChatMessage::_internal_has_battle_cup_streak() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_battle_cup_streak() const {
  return _internal_has_battle_cup_streak();
}
inline void CMsgDOTAChatMessage::clear_battle_cup_streak() {
  _impl_.battle_cup_streak_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_battle_cup_streak() const {
  return _impl_.battle_cup_streak_;
}
inline uint32_t CMsgDOTAChatMessage::battle_cup_streak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.battle_cup_streak)
  return _internal_battle_cup_streak();
}
inline void CMsgDOTAChatMessage::_internal_set_battle_cup_streak(uint32_t value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.battle_cup_streak_ = value;
}
inline void CMsgDOTAChatMessage::set_battle_cup_streak(uint32_t value) {
  _internal_set_battle_cup_streak(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.battle_cup_streak)
}

// optional uint32 badge_level = 25;
inline bool CMsgDOTAChatMessage::_internal_has_badge_level() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_badge_level() const {
  return _internal_has_badge_level();
}
inline void CMsgDOTAChatMessage::clear_badge_level() {
  _impl_.badge_level_ = 0u;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_badge_level() const {
  return _impl_.badge_level_;
}
inline uint32_t CMsgDOTAChatMessage::badge_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.badge_level)
  return _internal_badge_level();
}
inline void CMsgDOTAChatMessage::_internal_set_badge_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.badge_level_ = value;
}
inline void CMsgDOTAChatMessage::set_badge_level(uint32_t value) {
  _internal_set_badge_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.badge_level)
}

// optional uint32 suggest_pick_hero_id = 26;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_pick_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_id() const {
  return _internal_has_suggest_pick_hero_id();
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_id() {
  _impl_.suggest_pick_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_suggest_pick_hero_id() const {
  return _impl_.suggest_pick_hero_id_;
}
inline uint32_t CMsgDOTAChatMessage::suggest_pick_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_pick_hero_id)
  return _internal_suggest_pick_hero_id();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_pick_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.suggest_pick_hero_id_ = value;
}
inline void CMsgDOTAChatMessage::set_suggest_pick_hero_id(uint32_t value) {
  _internal_set_suggest_pick_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_pick_hero_id)
}

// optional string suggest_pick_hero_role = 27;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_pick_hero_role() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_pick_hero_role() const {
  return _internal_has_suggest_pick_hero_role();
}
inline void CMsgDOTAChatMessage::clear_suggest_pick_hero_role() {
  _impl_.suggest_pick_hero_role_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgDOTAChatMessage::suggest_pick_hero_role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_pick_hero_role)
  return _internal_suggest_pick_hero_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMessage::set_suggest_pick_hero_role(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000010u;
 _impl_.suggest_pick_hero_role_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_pick_hero_role)
}
inline std::string* CMsgDOTAChatMessage::mutable_suggest_pick_hero_role() {
  std::string* _s = _internal_mutable_suggest_pick_hero_role();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.suggest_pick_hero_role)
  return _s;
}
inline const std::string& CMsgDOTAChatMessage::_internal_suggest_pick_hero_role() const {
  return _impl_.suggest_pick_hero_role_.Get();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_pick_hero_role(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.suggest_pick_hero_role_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::_internal_mutable_suggest_pick_hero_role() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.suggest_pick_hero_role_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMessage::release_suggest_pick_hero_role() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.suggest_pick_hero_role)
  if (!_internal_has_suggest_pick_hero_role()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* p = _impl_.suggest_pick_hero_role_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.suggest_pick_hero_role_.IsDefault()) {
    _impl_.suggest_pick_hero_role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMessage::set_allocated_suggest_pick_hero_role(std::string* suggest_pick_hero_role) {
  if (suggest_pick_hero_role != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.suggest_pick_hero_role_.SetAllocated(suggest_pick_hero_role, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.suggest_pick_hero_role_.IsDefault()) {
    _impl_.suggest_pick_hero_role_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.suggest_pick_hero_role)
}

// optional uint32 suggest_ban_hero_id = 30;
inline bool CMsgDOTAChatMessage::_internal_has_suggest_ban_hero_id() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_ban_hero_id() const {
  return _internal_has_suggest_ban_hero_id();
}
inline void CMsgDOTAChatMessage::clear_suggest_ban_hero_id() {
  _impl_.suggest_ban_hero_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_suggest_ban_hero_id() const {
  return _impl_.suggest_ban_hero_id_;
}
inline uint32_t CMsgDOTAChatMessage::suggest_ban_hero_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_ban_hero_id)
  return _internal_suggest_ban_hero_id();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_ban_hero_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.suggest_ban_hero_id_ = value;
}
inline void CMsgDOTAChatMessage::set_suggest_ban_hero_id(uint32_t value) {
  _internal_set_suggest_ban_hero_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_ban_hero_id)
}

// optional .CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
inline bool CMsgDOTAChatMessage::_internal_has_trivia_answer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trivia_answer_ != nullptr);
  return value;
}
inline bool CMsgDOTAChatMessage::has_trivia_answer() const {
  return _internal_has_trivia_answer();
}
inline void CMsgDOTAChatMessage::clear_trivia_answer() {
  if (_impl_.trivia_answer_ != nullptr) _impl_.trivia_answer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage::_internal_trivia_answer() const {
  const ::CMsgDOTAChatMessage_TriviaAnswered* p = _impl_.trivia_answer_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAChatMessage_TriviaAnswered&>(
      ::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_);
}
inline const ::CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage::trivia_answer() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.trivia_answer)
  return _internal_trivia_answer();
}
inline void CMsgDOTAChatMessage::unsafe_arena_set_allocated_trivia_answer(
    ::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trivia_answer_);
  }
  _impl_.trivia_answer_ = trivia_answer;
  if (trivia_answer) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAChatMessage.trivia_answer)
}
inline ::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::release_trivia_answer() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgDOTAChatMessage_TriviaAnswered* temp = _impl_.trivia_answer_;
  _impl_.trivia_answer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::unsafe_arena_release_trivia_answer() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.trivia_answer)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgDOTAChatMessage_TriviaAnswered* temp = _impl_.trivia_answer_;
  _impl_.trivia_answer_ = nullptr;
  return temp;
}
inline ::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::_internal_mutable_trivia_answer() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.trivia_answer_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAChatMessage_TriviaAnswered>(GetArenaForAllocation());
    _impl_.trivia_answer_ = p;
  }
  return _impl_.trivia_answer_;
}
inline ::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::mutable_trivia_answer() {
  ::CMsgDOTAChatMessage_TriviaAnswered* _msg = _internal_mutable_trivia_answer();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.trivia_answer)
  return _msg;
}
inline void CMsgDOTAChatMessage::set_allocated_trivia_answer(::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trivia_answer_;
  }
  if (trivia_answer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trivia_answer);
    if (message_arena != submessage_arena) {
      trivia_answer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trivia_answer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.trivia_answer_ = trivia_answer;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.trivia_answer)
}

// optional int32 requested_ability_id = 33 [default = -1];
inline bool CMsgDOTAChatMessage::_internal_has_requested_ability_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_requested_ability_id() const {
  return _internal_has_requested_ability_id();
}
inline void CMsgDOTAChatMessage::clear_requested_ability_id() {
  _impl_.requested_ability_id_ = -1;
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline int32_t CMsgDOTAChatMessage::_internal_requested_ability_id() const {
  return _impl_.requested_ability_id_;
}
inline int32_t CMsgDOTAChatMessage::requested_ability_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.requested_ability_id)
  return _internal_requested_ability_id();
}
inline void CMsgDOTAChatMessage::_internal_set_requested_ability_id(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000040u;
  _impl_.requested_ability_id_ = value;
}
inline void CMsgDOTAChatMessage::set_requested_ability_id(int32_t value) {
  _internal_set_requested_ability_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.requested_ability_id)
}

// optional uint32 chat_flags = 34;
inline bool CMsgDOTAChatMessage::_internal_has_chat_flags() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_chat_flags() const {
  return _internal_has_chat_flags();
}
inline void CMsgDOTAChatMessage::clear_chat_flags() {
  _impl_.chat_flags_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_chat_flags() const {
  return _impl_.chat_flags_;
}
inline uint32_t CMsgDOTAChatMessage::chat_flags() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.chat_flags)
  return _internal_chat_flags();
}
inline void CMsgDOTAChatMessage::_internal_set_chat_flags(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.chat_flags_ = value;
}
inline void CMsgDOTAChatMessage::set_chat_flags(uint32_t value) {
  _internal_set_chat_flags(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.chat_flags)
}

// optional bool started_finding_match = 35;
inline bool CMsgDOTAChatMessage::_internal_has_started_finding_match() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_started_finding_match() const {
  return _internal_has_started_finding_match();
}
inline void CMsgDOTAChatMessage::clear_started_finding_match() {
  _impl_.started_finding_match_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool CMsgDOTAChatMessage::_internal_started_finding_match() const {
  return _impl_.started_finding_match_;
}
inline bool CMsgDOTAChatMessage::started_finding_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.started_finding_match)
  return _internal_started_finding_match();
}
inline void CMsgDOTAChatMessage::_internal_set_started_finding_match(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.started_finding_match_ = value;
}
inline void CMsgDOTAChatMessage::set_started_finding_match(bool value) {
  _internal_set_started_finding_match(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.started_finding_match)
}

// optional bool ctrl_is_down = 36;
inline bool CMsgDOTAChatMessage::_internal_has_ctrl_is_down() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_ctrl_is_down() const {
  return _internal_has_ctrl_is_down();
}
inline void CMsgDOTAChatMessage::clear_ctrl_is_down() {
  _impl_.ctrl_is_down_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool CMsgDOTAChatMessage::_internal_ctrl_is_down() const {
  return _impl_.ctrl_is_down_;
}
inline bool CMsgDOTAChatMessage::ctrl_is_down() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.ctrl_is_down)
  return _internal_ctrl_is_down();
}
inline void CMsgDOTAChatMessage::_internal_set_ctrl_is_down(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.ctrl_is_down_ = value;
}
inline void CMsgDOTAChatMessage::set_ctrl_is_down(bool value) {
  _internal_set_ctrl_is_down(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.ctrl_is_down)
}

// optional uint32 favorite_team_id = 37;
inline bool CMsgDOTAChatMessage::_internal_has_favorite_team_id() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_favorite_team_id() const {
  return _internal_has_favorite_team_id();
}
inline void CMsgDOTAChatMessage::clear_favorite_team_id() {
  _impl_.favorite_team_id_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_favorite_team_id() const {
  return _impl_.favorite_team_id_;
}
inline uint32_t CMsgDOTAChatMessage::favorite_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.favorite_team_id)
  return _internal_favorite_team_id();
}
inline void CMsgDOTAChatMessage::_internal_set_favorite_team_id(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.favorite_team_id_ = value;
}
inline void CMsgDOTAChatMessage::set_favorite_team_id(uint32_t value) {
  _internal_set_favorite_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.favorite_team_id)
}

// optional uint32 favorite_team_quality = 38;
inline bool CMsgDOTAChatMessage::_internal_has_favorite_team_quality() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_favorite_team_quality() const {
  return _internal_has_favorite_team_quality();
}
inline void CMsgDOTAChatMessage::clear_favorite_team_quality() {
  _impl_.favorite_team_quality_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAChatMessage::_internal_favorite_team_quality() const {
  return _impl_.favorite_team_quality_;
}
inline uint32_t CMsgDOTAChatMessage::favorite_team_quality() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.favorite_team_quality)
  return _internal_favorite_team_quality();
}
inline void CMsgDOTAChatMessage::_internal_set_favorite_team_quality(uint32_t value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.favorite_team_quality_ = value;
}
inline void CMsgDOTAChatMessage::set_favorite_team_quality(uint32_t value) {
  _internal_set_favorite_team_quality(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.favorite_team_quality)
}

// optional int32 suggest_player_draft_pick = 39 [default = -1];
inline bool CMsgDOTAChatMessage::_internal_has_suggest_player_draft_pick() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAChatMessage::has_suggest_player_draft_pick() const {
  return _internal_has_suggest_player_draft_pick();
}
inline void CMsgDOTAChatMessage::clear_suggest_player_draft_pick() {
  _impl_.suggest_player_draft_pick_ = -1;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline int32_t CMsgDOTAChatMessage::_internal_suggest_player_draft_pick() const {
  return _impl_.suggest_player_draft_pick_;
}
inline int32_t CMsgDOTAChatMessage::suggest_player_draft_pick() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.suggest_player_draft_pick)
  return _internal_suggest_player_draft_pick();
}
inline void CMsgDOTAChatMessage::_internal_set_suggest_player_draft_pick(int32_t value) {
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.suggest_player_draft_pick_ = value;
}
inline void CMsgDOTAChatMessage::set_suggest_player_draft_pick(int32_t value) {
  _internal_set_suggest_player_draft_pick(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMessage.suggest_player_draft_pick)
}

// optional .CMsgDOTAChatMessage.PlayerDraftPick player_draft_pick = 40;
inline bool CMsgDOTAChatMessage::_internal_has_player_draft_pick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_draft_pick_ != nullptr);
  return value;
}
inline bool CMsgDOTAChatMessage::has_player_draft_pick() const {
  return _internal_has_player_draft_pick();
}
inline void CMsgDOTAChatMessage::clear_player_draft_pick() {
  if (_impl_.player_draft_pick_ != nullptr) _impl_.player_draft_pick_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgDOTAChatMessage_PlayerDraftPick& CMsgDOTAChatMessage::_internal_player_draft_pick() const {
  const ::CMsgDOTAChatMessage_PlayerDraftPick* p = _impl_.player_draft_pick_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAChatMessage_PlayerDraftPick&>(
      ::_CMsgDOTAChatMessage_PlayerDraftPick_default_instance_);
}
inline const ::CMsgDOTAChatMessage_PlayerDraftPick& CMsgDOTAChatMessage::player_draft_pick() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.player_draft_pick)
  return _internal_player_draft_pick();
}
inline void CMsgDOTAChatMessage::unsafe_arena_set_allocated_player_draft_pick(
    ::CMsgDOTAChatMessage_PlayerDraftPick* player_draft_pick) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_draft_pick_);
  }
  _impl_.player_draft_pick_ = player_draft_pick;
  if (player_draft_pick) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAChatMessage.player_draft_pick)
}
inline ::CMsgDOTAChatMessage_PlayerDraftPick* CMsgDOTAChatMessage::release_player_draft_pick() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgDOTAChatMessage_PlayerDraftPick* temp = _impl_.player_draft_pick_;
  _impl_.player_draft_pick_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAChatMessage_PlayerDraftPick* CMsgDOTAChatMessage::unsafe_arena_release_player_draft_pick() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.player_draft_pick)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgDOTAChatMessage_PlayerDraftPick* temp = _impl_.player_draft_pick_;
  _impl_.player_draft_pick_ = nullptr;
  return temp;
}
inline ::CMsgDOTAChatMessage_PlayerDraftPick* CMsgDOTAChatMessage::_internal_mutable_player_draft_pick() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.player_draft_pick_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAChatMessage_PlayerDraftPick>(GetArenaForAllocation());
    _impl_.player_draft_pick_ = p;
  }
  return _impl_.player_draft_pick_;
}
inline ::CMsgDOTAChatMessage_PlayerDraftPick* CMsgDOTAChatMessage::mutable_player_draft_pick() {
  ::CMsgDOTAChatMessage_PlayerDraftPick* _msg = _internal_mutable_player_draft_pick();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.player_draft_pick)
  return _msg;
}
inline void CMsgDOTAChatMessage::set_allocated_player_draft_pick(::CMsgDOTAChatMessage_PlayerDraftPick* player_draft_pick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_draft_pick_;
  }
  if (player_draft_pick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_draft_pick);
    if (message_arena != submessage_arena) {
      player_draft_pick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_draft_pick, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.player_draft_pick_ = player_draft_pick;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.player_draft_pick)
}

// optional .CMsgDOTAChatMessage.ChatWheelMessage chat_wheel_message = 41;
inline bool CMsgDOTAChatMessage::_internal_has_chat_wheel_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chat_wheel_message_ != nullptr);
  return value;
}
inline bool CMsgDOTAChatMessage::has_chat_wheel_message() const {
  return _internal_has_chat_wheel_message();
}
inline void CMsgDOTAChatMessage::clear_chat_wheel_message() {
  if (_impl_.chat_wheel_message_ != nullptr) _impl_.chat_wheel_message_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgDOTAChatMessage_ChatWheelMessage& CMsgDOTAChatMessage::_internal_chat_wheel_message() const {
  const ::CMsgDOTAChatMessage_ChatWheelMessage* p = _impl_.chat_wheel_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAChatMessage_ChatWheelMessage&>(
      ::_CMsgDOTAChatMessage_ChatWheelMessage_default_instance_);
}
inline const ::CMsgDOTAChatMessage_ChatWheelMessage& CMsgDOTAChatMessage::chat_wheel_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMessage.chat_wheel_message)
  return _internal_chat_wheel_message();
}
inline void CMsgDOTAChatMessage::unsafe_arena_set_allocated_chat_wheel_message(
    ::CMsgDOTAChatMessage_ChatWheelMessage* chat_wheel_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_wheel_message_);
  }
  _impl_.chat_wheel_message_ = chat_wheel_message;
  if (chat_wheel_message) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAChatMessage.chat_wheel_message)
}
inline ::CMsgDOTAChatMessage_ChatWheelMessage* CMsgDOTAChatMessage::release_chat_wheel_message() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgDOTAChatMessage_ChatWheelMessage* temp = _impl_.chat_wheel_message_;
  _impl_.chat_wheel_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::CMsgDOTAChatMessage_ChatWheelMessage* CMsgDOTAChatMessage::unsafe_arena_release_chat_wheel_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMessage.chat_wheel_message)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgDOTAChatMessage_ChatWheelMessage* temp = _impl_.chat_wheel_message_;
  _impl_.chat_wheel_message_ = nullptr;
  return temp;
}
inline ::CMsgDOTAChatMessage_ChatWheelMessage* CMsgDOTAChatMessage::_internal_mutable_chat_wheel_message() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.chat_wheel_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAChatMessage_ChatWheelMessage>(GetArenaForAllocation());
    _impl_.chat_wheel_message_ = p;
  }
  return _impl_.chat_wheel_message_;
}
inline ::CMsgDOTAChatMessage_ChatWheelMessage* CMsgDOTAChatMessage::mutable_chat_wheel_message() {
  ::CMsgDOTAChatMessage_ChatWheelMessage* _msg = _internal_mutable_chat_wheel_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMessage.chat_wheel_message)
  return _msg;
}
inline void CMsgDOTAChatMessage::set_allocated_chat_wheel_message(::CMsgDOTAChatMessage_ChatWheelMessage* chat_wheel_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chat_wheel_message_;
  }
  if (chat_wheel_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chat_wheel_message);
    if (message_arena != submessage_arena) {
      chat_wheel_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_wheel_message, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.chat_wheel_message_ = chat_wheel_message;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMessage.chat_wheel_message)
}

// -------------------------------------------------------------------

// CMsgDOTAChatMember

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatMember::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatMember::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAChatMember::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAChatMember::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgDOTAChatMember::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAChatMember::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CMsgDOTAChatMember::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatMember::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatMember::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgDOTAChatMember::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAChatMember::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatMember::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.persona_name)
}
inline std::string* CMsgDOTAChatMember::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatMember.persona_name)
  return _s;
}
inline const std::string& CMsgDOTAChatMember::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CMsgDOTAChatMember::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMember::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatMember.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatMember::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatMember.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatMember::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatMember::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAChatMember::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatMember::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAChatMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAChatMember::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAChatMember::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatMember::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatMember::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAChatMember::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAChatMember::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgDOTAChatMember::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatMember.status)
  return _internal_status();
}
inline void CMsgDOTAChatMember::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.status_ = value;
}
inline void CMsgDOTAChatMember::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatMember.status)
}

// -------------------------------------------------------------------

// CMsgDOTAJoinChatChannelResponse

// optional uint32 response = 1;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_response() const {
  return _internal_has_response();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_response() {
  _impl_.response_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::_internal_response() const {
  return _impl_.response_;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::response() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.response)
  return _internal_response();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_response(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.response_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_response(uint32_t value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.response)
}

// optional string channel_name = 2;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAJoinChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAJoinChatChannelResponse::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_name)
}
inline std::string* CMsgDOTAJoinChatChannelResponse::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.channel_name)
  return _s;
}
inline const std::string& CMsgDOTAJoinChatChannelResponse::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannelResponse::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannelResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAJoinChatChannelResponse.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannelResponse.channel_name)
}

// optional fixed64 channel_id = 3;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t CMsgDOTAJoinChatChannelResponse::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAJoinChatChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_id)
}

// optional uint32 max_members = 4;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_max_members() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_max_members() const {
  return _internal_has_max_members();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_max_members() {
  _impl_.max_members_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::_internal_max_members() const {
  return _impl_.max_members_;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::max_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.max_members)
  return _internal_max_members();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_max_members(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_members_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_max_members(uint32_t value) {
  _internal_set_max_members(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.max_members)
}

// repeated .CMsgDOTAChatMember members = 5;
inline int CMsgDOTAJoinChatChannelResponse::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CMsgDOTAJoinChatChannelResponse::members_size() const {
  return _internal_members_size();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_members() {
  _impl_.members_.Clear();
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatMember >*
CMsgDOTAJoinChatChannelResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAJoinChatChannelResponse.members)
  return &_impl_.members_;
}
inline const ::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.members)
  return _internal_members(index);
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::add_members() {
  ::CMsgDOTAChatMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CMsgDOTAJoinChatChannelResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatMember >&
CMsgDOTAJoinChatChannelResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAJoinChatChannelResponse.members)
  return _impl_.members_;
}

// optional .DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_type() {
  _impl_.channel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannelResponse::_internal_channel_type() const {
  return static_cast< ::DOTAChatChannelType_t >(_impl_.channel_type_);
}
inline ::DOTAChatChannelType_t CMsgDOTAJoinChatChannelResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_type)
  return _internal_channel_type();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.channel_type_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_type(::DOTAChatChannelType_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_type)
}

// optional .CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_result() {
  _impl_.result_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAJoinChatChannelResponse_Result >(_impl_.result_);
}
inline ::CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.result)
  return _internal_result();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_result(::CMsgDOTAJoinChatChannelResponse_Result value) {
  assert(::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.result_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_result(::CMsgDOTAJoinChatChannelResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.result)
}

// optional bool gc_initiated_join = 8;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_gc_initiated_join() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_gc_initiated_join() const {
  return _internal_has_gc_initiated_join();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_gc_initiated_join() {
  _impl_.gc_initiated_join_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTAJoinChatChannelResponse::_internal_gc_initiated_join() const {
  return _impl_.gc_initiated_join_;
}
inline bool CMsgDOTAJoinChatChannelResponse::gc_initiated_join() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
  return _internal_gc_initiated_join();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_gc_initiated_join(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.gc_initiated_join_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_gc_initiated_join(bool value) {
  _internal_set_gc_initiated_join(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
}

// optional uint32 channel_user_id = 9;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAJoinChatChannelResponse::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.channel_user_id)
}

// optional string welcome_message = 10;
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_welcome_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_welcome_message() const {
  return _internal_has_welcome_message();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_welcome_message() {
  _impl_.welcome_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAJoinChatChannelResponse::welcome_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.welcome_message)
  return _internal_welcome_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAJoinChatChannelResponse::set_welcome_message(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.welcome_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.welcome_message)
}
inline std::string* CMsgDOTAJoinChatChannelResponse::mutable_welcome_message() {
  std::string* _s = _internal_mutable_welcome_message();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAJoinChatChannelResponse.welcome_message)
  return _s;
}
inline const std::string& CMsgDOTAJoinChatChannelResponse::_internal_welcome_message() const {
  return _impl_.welcome_message_.Get();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_welcome_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.welcome_message_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannelResponse::_internal_mutable_welcome_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.welcome_message_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAJoinChatChannelResponse::release_welcome_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAJoinChatChannelResponse.welcome_message)
  if (!_internal_has_welcome_message()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.welcome_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.welcome_message_.IsDefault()) {
    _impl_.welcome_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAJoinChatChannelResponse::set_allocated_welcome_message(std::string* welcome_message) {
  if (welcome_message != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.welcome_message_.SetAllocated(welcome_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.welcome_message_.IsDefault()) {
    _impl_.welcome_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAJoinChatChannelResponse.welcome_message)
}

// optional .EChatSpecialPrivileges special_privileges = 11 [default = k_EChatSpecialPrivileges_None];
inline bool CMsgDOTAJoinChatChannelResponse::_internal_has_special_privileges() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAJoinChatChannelResponse::has_special_privileges() const {
  return _internal_has_special_privileges();
}
inline void CMsgDOTAJoinChatChannelResponse::clear_special_privileges() {
  _impl_.special_privileges_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::EChatSpecialPrivileges CMsgDOTAJoinChatChannelResponse::_internal_special_privileges() const {
  return static_cast< ::EChatSpecialPrivileges >(_impl_.special_privileges_);
}
inline ::EChatSpecialPrivileges CMsgDOTAJoinChatChannelResponse::special_privileges() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAJoinChatChannelResponse.special_privileges)
  return _internal_special_privileges();
}
inline void CMsgDOTAJoinChatChannelResponse::_internal_set_special_privileges(::EChatSpecialPrivileges value) {
  assert(::EChatSpecialPrivileges_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.special_privileges_ = value;
}
inline void CMsgDOTAJoinChatChannelResponse::set_special_privileges(::EChatSpecialPrivileges value) {
  _internal_set_special_privileges(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAJoinChatChannelResponse.special_privileges)
}

// -------------------------------------------------------------------

// CMsgDOTAOtherJoinedChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherJoinedChatChannel::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAOtherJoinedChatChannel::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAOtherJoinedChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.channel_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAOtherJoinedChatChannel::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAOtherJoinedChatChannel::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAOtherJoinedChatChannel::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAOtherJoinedChatChannel::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.persona_name)
}
inline std::string* CMsgDOTAOtherJoinedChatChannel::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAOtherJoinedChatChannel.persona_name)
  return _s;
}
inline const std::string& CMsgDOTAOtherJoinedChatChannel::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CMsgDOTAOtherJoinedChatChannel::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAOtherJoinedChatChannel::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAOtherJoinedChatChannel::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAOtherJoinedChatChannel.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAOtherJoinedChatChannel.persona_name)
}

// optional fixed64 steam_id = 3;
inline bool CMsgDOTAOtherJoinedChatChannel::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAOtherJoinedChatChannel::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint64_t CMsgDOTAOtherJoinedChatChannel::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgDOTAOtherJoinedChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.steam_id_ = value;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.steam_id)
}

// optional uint32 channel_user_id = 4;
inline bool CMsgDOTAOtherJoinedChatChannel::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAOtherJoinedChatChannel::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAOtherJoinedChatChannel::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAOtherJoinedChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAOtherJoinedChatChannel::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.channel_user_id)
}

// optional uint32 status = 5;
inline bool CMsgDOTAOtherJoinedChatChannel::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAOtherJoinedChatChannel::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAOtherJoinedChatChannel::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CMsgDOTAOtherJoinedChatChannel::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgDOTAOtherJoinedChatChannel::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherJoinedChatChannel.status)
  return _internal_status();
}
inline void CMsgDOTAOtherJoinedChatChannel::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}
inline void CMsgDOTAOtherJoinedChatChannel::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherJoinedChatChannel.status)
}

// -------------------------------------------------------------------

// CMsgDOTAOtherLeftChatChannel

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAOtherLeftChatChannel::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAOtherLeftChatChannel::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAOtherLeftChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAOtherLeftChatChannel::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.channel_id)
}

// optional fixed64 steam_id = 2;
inline bool CMsgDOTAOtherLeftChatChannel::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAOtherLeftChatChannel::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAOtherLeftChatChannel::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAOtherLeftChatChannel::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgDOTAOtherLeftChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAOtherLeftChatChannel::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CMsgDOTAOtherLeftChatChannel::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.steam_id)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAOtherLeftChatChannel::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAOtherLeftChatChannel::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAOtherLeftChatChannel::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAOtherLeftChatChannel::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAOtherLeftChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAOtherLeftChatChannel.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAOtherLeftChatChannel::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAOtherLeftChatChannel::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAOtherLeftChatChannel.channel_user_id)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelList

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse_ChatChannel

// optional string channel_name = 1;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
inline std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return _s;
}
inline const std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}

// optional uint32 num_members = 2;
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_has_num_members() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_num_members() const {
  return _internal_has_num_members();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_num_members() {
  _impl_.num_members_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_num_members() const {
  return _impl_.num_members_;
}
inline uint32_t CMsgDOTARequestChatChannelListResponse_ChatChannel::num_members() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
  return _internal_num_members();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_set_num_members(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_members_ = value;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_num_members(uint32_t value) {
  _internal_set_num_members(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
}

// optional .DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_type() {
  _impl_.channel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_channel_type() const {
  return static_cast< ::DOTAChatChannelType_t >(_impl_.channel_type_);
}
inline ::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
  return _internal_channel_type();
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::_internal_set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_type_ = value;
}
inline void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_type(::DOTAChatChannelType_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTARequestChatChannelListResponse

// repeated .CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
inline int CMsgDOTARequestChatChannelListResponse::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int CMsgDOTARequestChatChannelListResponse::channels_size() const {
  return _internal_channels_size();
}
inline void CMsgDOTARequestChatChannelListResponse::clear_channels() {
  _impl_.channels_.Clear();
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTARequestChatChannelListResponse.channels)
  return _impl_.channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
CMsgDOTARequestChatChannelListResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTARequestChatChannelListResponse.channels)
  return &_impl_.channels_;
}
inline const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::_internal_channels(int index) const {
  return _impl_.channels_.Get(index);
}
inline const ::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTARequestChatChannelListResponse.channels)
  return _internal_channels(index);
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::_internal_add_channels() {
  return _impl_.channels_.Add();
}
inline ::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::add_channels() {
  ::CMsgDOTARequestChatChannelListResponse_ChatChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:CMsgDOTARequestChatChannelListResponse.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
CMsgDOTARequestChatChannelListResponse::channels() const {
  // @@protoc_insertion_point(field_list:CMsgDOTARequestChatChannelListResponse.channels)
  return _impl_.channels_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse_Member

// optional fixed64 steam_id = 1;
inline bool CMsgDOTAChatGetUserListResponse_Member::_internal_has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetUserListResponse_Member::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_steam_id() {
  _impl_.steam_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CMsgDOTAChatGetUserListResponse_Member::_internal_steam_id() const {
  return _impl_.steam_id_;
}
inline uint64_t CMsgDOTAChatGetUserListResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAChatGetUserListResponse_Member::_internal_set_steam_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.steam_id_ = value;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_steam_id(uint64_t value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.steam_id)
}

// optional string persona_name = 2;
inline bool CMsgDOTAChatGetUserListResponse_Member::_internal_has_persona_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetUserListResponse_Member::has_persona_name() const {
  return _internal_has_persona_name();
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_persona_name() {
  _impl_.persona_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAChatGetUserListResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return _internal_persona_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.persona_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
inline std::string* CMsgDOTAChatGetUserListResponse_Member::mutable_persona_name() {
  std::string* _s = _internal_mutable_persona_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return _s;
}
inline const std::string& CMsgDOTAChatGetUserListResponse_Member::_internal_persona_name() const {
  return _impl_.persona_name_.Get();
}
inline void CMsgDOTAChatGetUserListResponse_Member::_internal_set_persona_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.persona_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetUserListResponse_Member::_internal_mutable_persona_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.persona_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetUserListResponse_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatGetUserListResponse.Member.persona_name)
  if (!_internal_has_persona_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.persona_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_allocated_persona_name(std::string* persona_name) {
  if (persona_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.persona_name_.SetAllocated(persona_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.persona_name_.IsDefault()) {
    _impl_.persona_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetUserListResponse.Member.persona_name)
}

// optional uint32 channel_user_id = 3;
inline bool CMsgDOTAChatGetUserListResponse_Member::_internal_has_channel_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetUserListResponse_Member::has_channel_user_id() const {
  return _internal_has_channel_user_id();
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_channel_user_id() {
  _impl_.channel_user_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatGetUserListResponse_Member::_internal_channel_user_id() const {
  return _impl_.channel_user_id_;
}
inline uint32_t CMsgDOTAChatGetUserListResponse_Member::channel_user_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
  return _internal_channel_user_id();
}
inline void CMsgDOTAChatGetUserListResponse_Member::_internal_set_channel_user_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.channel_user_id_ = value;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_channel_user_id(uint32_t value) {
  _internal_set_channel_user_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
}

// optional uint32 status = 4;
inline bool CMsgDOTAChatGetUserListResponse_Member::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetUserListResponse_Member::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAChatGetUserListResponse_Member::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CMsgDOTAChatGetUserListResponse_Member::_internal_status() const {
  return _impl_.status_;
}
inline uint32_t CMsgDOTAChatGetUserListResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.Member.status)
  return _internal_status();
}
inline void CMsgDOTAChatGetUserListResponse_Member::_internal_set_status(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.status_ = value;
}
inline void CMsgDOTAChatGetUserListResponse_Member::set_status(uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.Member.status)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetUserListResponse

// optional fixed64 channel_id = 1;
inline bool CMsgDOTAChatGetUserListResponse::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetUserListResponse::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void CMsgDOTAChatGetUserListResponse::clear_channel_id() {
  _impl_.channel_id_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint64_t CMsgDOTAChatGetUserListResponse::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline uint64_t CMsgDOTAChatGetUserListResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.channel_id)
  return _internal_channel_id();
}
inline void CMsgDOTAChatGetUserListResponse::_internal_set_channel_id(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void CMsgDOTAChatGetUserListResponse::set_channel_id(uint64_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetUserListResponse.channel_id)
}

// repeated .CMsgDOTAChatGetUserListResponse.Member members = 2;
inline int CMsgDOTAChatGetUserListResponse::_internal_members_size() const {
  return _impl_.members_.size();
}
inline int CMsgDOTAChatGetUserListResponse::members_size() const {
  return _internal_members_size();
}
inline void CMsgDOTAChatGetUserListResponse::clear_members() {
  _impl_.members_.Clear();
}
inline ::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetUserListResponse.members)
  return _impl_.members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >*
CMsgDOTAChatGetUserListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatGetUserListResponse.members)
  return &_impl_.members_;
}
inline const ::CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse::_internal_members(int index) const {
  return _impl_.members_.Get(index);
}
inline const ::CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetUserListResponse.members)
  return _internal_members(index);
}
inline ::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::_internal_add_members() {
  return _impl_.members_.Add();
}
inline ::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::add_members() {
  ::CMsgDOTAChatGetUserListResponse_Member* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:CMsgDOTAChatGetUserListResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatGetUserListResponse_Member >&
CMsgDOTAChatGetUserListResponse::members() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatGetUserListResponse.members)
  return _impl_.members_;
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCount

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCount::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetMemberCount::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAChatGetMemberCount::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCount.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatGetMemberCount::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCount.channel_name)
}
inline std::string* CMsgDOTAChatGetMemberCount::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetMemberCount.channel_name)
  return _s;
}
inline const std::string& CMsgDOTAChatGetMemberCount::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void CMsgDOTAChatGetMemberCount::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetMemberCount::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetMemberCount::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatGetMemberCount.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatGetMemberCount::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetMemberCount.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCount::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetMemberCount::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CMsgDOTAChatGetMemberCount::clear_channel_type() {
  _impl_.channel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCount::_internal_channel_type() const {
  return static_cast< ::DOTAChatChannelType_t >(_impl_.channel_type_);
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCount::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCount.channel_type)
  return _internal_channel_type();
}
inline void CMsgDOTAChatGetMemberCount::_internal_set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_type_ = value;
}
inline void CMsgDOTAChatGetMemberCount::set_channel_type(::DOTAChatChannelType_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCount.channel_type)
}

// -------------------------------------------------------------------

// CMsgDOTAChatGetMemberCountResponse

// optional string channel_name = 1;
inline bool CMsgDOTAChatGetMemberCountResponse::_internal_has_channel_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_name() const {
  return _internal_has_channel_name();
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_name() {
  _impl_.channel_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAChatGetMemberCountResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CMsgDOTAChatGetMemberCountResponse::set_channel_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.channel_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.channel_name)
}
inline std::string* CMsgDOTAChatGetMemberCountResponse::mutable_channel_name() {
  std::string* _s = _internal_mutable_channel_name();
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatGetMemberCountResponse.channel_name)
  return _s;
}
inline const std::string& CMsgDOTAChatGetMemberCountResponse::_internal_channel_name() const {
  return _impl_.channel_name_.Get();
}
inline void CMsgDOTAChatGetMemberCountResponse::_internal_set_channel_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetMemberCountResponse::_internal_mutable_channel_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.channel_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CMsgDOTAChatGetMemberCountResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAChatGetMemberCountResponse.channel_name)
  if (!_internal_has_channel_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.channel_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_name_.SetAllocated(channel_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.channel_name_.IsDefault()) {
    _impl_.channel_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAChatGetMemberCountResponse.channel_name)
}

// optional .DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
inline bool CMsgDOTAChatGetMemberCountResponse::_internal_has_channel_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetMemberCountResponse::has_channel_type() const {
  return _internal_has_channel_type();
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_channel_type() {
  _impl_.channel_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCountResponse::_internal_channel_type() const {
  return static_cast< ::DOTAChatChannelType_t >(_impl_.channel_type_);
}
inline ::DOTAChatChannelType_t CMsgDOTAChatGetMemberCountResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.channel_type)
  return _internal_channel_type();
}
inline void CMsgDOTAChatGetMemberCountResponse::_internal_set_channel_type(::DOTAChatChannelType_t value) {
  assert(::DOTAChatChannelType_t_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.channel_type_ = value;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_channel_type(::DOTAChatChannelType_t value) {
  _internal_set_channel_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.channel_type)
}

// optional uint32 member_count = 3;
inline bool CMsgDOTAChatGetMemberCountResponse::_internal_has_member_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatGetMemberCountResponse::has_member_count() const {
  return _internal_has_member_count();
}
inline void CMsgDOTAChatGetMemberCountResponse::clear_member_count() {
  _impl_.member_count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t CMsgDOTAChatGetMemberCountResponse::_internal_member_count() const {
  return _impl_.member_count_;
}
inline uint32_t CMsgDOTAChatGetMemberCountResponse::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatGetMemberCountResponse.member_count)
  return _internal_member_count();
}
inline void CMsgDOTAChatGetMemberCountResponse::_internal_set_member_count(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.member_count_ = value;
}
inline void CMsgDOTAChatGetMemberCountResponse::set_member_count(uint32_t value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatGetMemberCountResponse.member_count)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled_Region

// optional float min_latitude = 1;
inline bool CMsgDOTAChatRegionsEnabled_Region::_internal_has_min_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_latitude() const {
  return _internal_has_min_latitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_latitude() {
  _impl_.min_latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::_internal_min_latitude() const {
  return _impl_.min_latitude_;
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_latitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.min_latitude)
  return _internal_min_latitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::_internal_set_min_latitude(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.min_latitude_ = value;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_latitude(float value) {
  _internal_set_min_latitude(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.min_latitude)
}

// optional float max_latitude = 2;
inline bool CMsgDOTAChatRegionsEnabled_Region::_internal_has_max_latitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_latitude() const {
  return _internal_has_max_latitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_latitude() {
  _impl_.max_latitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::_internal_max_latitude() const {
  return _impl_.max_latitude_;
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_latitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.max_latitude)
  return _internal_max_latitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::_internal_set_max_latitude(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.max_latitude_ = value;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_latitude(float value) {
  _internal_set_max_latitude(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.max_latitude)
}

// optional float min_longitude = 3;
inline bool CMsgDOTAChatRegionsEnabled_Region::_internal_has_min_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAChatRegionsEnabled_Region::has_min_longitude() const {
  return _internal_has_min_longitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_min_longitude() {
  _impl_.min_longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::_internal_min_longitude() const {
  return _impl_.min_longitude_;
}
inline float CMsgDOTAChatRegionsEnabled_Region::min_longitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.min_longitude)
  return _internal_min_longitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::_internal_set_min_longitude(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.min_longitude_ = value;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_min_longitude(float value) {
  _internal_set_min_longitude(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.min_longitude)
}

// optional float max_longitude = 4;
inline bool CMsgDOTAChatRegionsEnabled_Region::_internal_has_max_longitude() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAChatRegionsEnabled_Region::has_max_longitude() const {
  return _internal_has_max_longitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::clear_max_longitude() {
  _impl_.max_longitude_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTAChatRegionsEnabled_Region::_internal_max_longitude() const {
  return _impl_.max_longitude_;
}
inline float CMsgDOTAChatRegionsEnabled_Region::max_longitude() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.Region.max_longitude)
  return _internal_max_longitude();
}
inline void CMsgDOTAChatRegionsEnabled_Region::_internal_set_max_longitude(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_longitude_ = value;
}
inline void CMsgDOTAChatRegionsEnabled_Region::set_max_longitude(float value) {
  _internal_set_max_longitude(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.Region.max_longitude)
}

// -------------------------------------------------------------------

// CMsgDOTAChatRegionsEnabled

// optional bool enable_all_regions = 1;
inline bool CMsgDOTAChatRegionsEnabled::_internal_has_enable_all_regions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAChatRegionsEnabled::has_enable_all_regions() const {
  return _internal_has_enable_all_regions();
}
inline void CMsgDOTAChatRegionsEnabled::clear_enable_all_regions() {
  _impl_.enable_all_regions_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAChatRegionsEnabled::_internal_enable_all_regions() const {
  return _impl_.enable_all_regions_;
}
inline bool CMsgDOTAChatRegionsEnabled::enable_all_regions() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.enable_all_regions)
  return _internal_enable_all_regions();
}
inline void CMsgDOTAChatRegionsEnabled::_internal_set_enable_all_regions(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_all_regions_ = value;
}
inline void CMsgDOTAChatRegionsEnabled::set_enable_all_regions(bool value) {
  _internal_set_enable_all_regions(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAChatRegionsEnabled.enable_all_regions)
}

// repeated .CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
inline int CMsgDOTAChatRegionsEnabled::_internal_enabled_regions_size() const {
  return _impl_.enabled_regions_.size();
}
inline int CMsgDOTAChatRegionsEnabled::enabled_regions_size() const {
  return _internal_enabled_regions_size();
}
inline void CMsgDOTAChatRegionsEnabled::clear_enabled_regions() {
  _impl_.enabled_regions_.Clear();
}
inline ::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::mutable_enabled_regions(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return _impl_.enabled_regions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >*
CMsgDOTAChatRegionsEnabled::mutable_enabled_regions() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return &_impl_.enabled_regions_;
}
inline const ::CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled::_internal_enabled_regions(int index) const {
  return _impl_.enabled_regions_.Get(index);
}
inline const ::CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled::enabled_regions(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return _internal_enabled_regions(index);
}
inline ::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::_internal_add_enabled_regions() {
  return _impl_.enabled_regions_.Add();
}
inline ::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::add_enabled_regions() {
  ::CMsgDOTAChatRegionsEnabled_Region* _add = _internal_add_enabled_regions();
  // @@protoc_insertion_point(field_add:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAChatRegionsEnabled_Region >&
CMsgDOTAChatRegionsEnabled::enabled_regions() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAChatRegionsEnabled.enabled_regions)
  return _impl_.enabled_regions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgGCToClientPrivateChatResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgGCToClientPrivateChatResponse_Result>() {
  return ::CMsgGCToClientPrivateChatResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAJoinChatChannelResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAJoinChatChannelResponse_Result>() {
  return ::CMsgDOTAJoinChatChannelResponse_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fchat_2eproto
