// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_server.proto

#include "dota_gcmessages_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.disconnect_reason_)*/0
  , /*decltype(_impl_.num_bad_intervals_)*/0u
  , /*decltype(_impl_.peak_loss_pct_)*/0u} {}
struct CMsgPoorNetworkConditions_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPoorNetworkConditions_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPoorNetworkConditions_PlayerDefaultTypeInternal() {}
  union {
    CMsgPoorNetworkConditions_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPoorNetworkConditions_PlayerDefaultTypeInternal _CMsgPoorNetworkConditions_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.detection_type_)*/0} {}
struct CMsgPoorNetworkConditionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPoorNetworkConditionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPoorNetworkConditionsDefaultTypeInternal() {}
  union {
    CMsgPoorNetworkConditions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPoorNetworkConditionsDefaultTypeInternal _CMsgPoorNetworkConditions_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameserverCrash::CMsgGameserverCrash(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_state_)*/0
  , /*decltype(_impl_.sentinel_save_time_)*/0u
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_public_ip_addr_)*/0u
  , /*decltype(_impl_.server_port_)*/0u
  , /*decltype(_impl_.server_cluster_)*/0u
  , /*decltype(_impl_.pid_)*/0u
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.engine_)*/0u
  , /*decltype(_impl_.tournament_id_)*/0u} {}
struct CMsgGameserverCrashDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameserverCrashDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameserverCrashDefaultTypeInternal() {}
  union {
    CMsgGameserverCrash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameserverCrashDefaultTypeInternal _CMsgGameserverCrash_default_instance_;
PROTOBUF_CONSTEXPR CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.leaver_state_)*/nullptr
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.disconnect_reason_)*/0} {}
struct CMsgConnectedPlayers_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgConnectedPlayers_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgConnectedPlayers_PlayerDefaultTypeInternal() {}
  union {
    CMsgConnectedPlayers_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgConnectedPlayers_PlayerDefaultTypeInternal _CMsgConnectedPlayers_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgConnectedPlayers_PlayerDraft::CMsgConnectedPlayers_PlayerDraft(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.team_slot_)*/0} {}
struct CMsgConnectedPlayers_PlayerDraftDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgConnectedPlayers_PlayerDraftDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgConnectedPlayers_PlayerDraftDefaultTypeInternal() {}
  union {
    CMsgConnectedPlayers_PlayerDraft _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgConnectedPlayers_PlayerDraftDefaultTypeInternal _CMsgConnectedPlayers_PlayerDraft_default_instance_;
PROTOBUF_CONSTEXPR CMsgConnectedPlayers::CMsgConnectedPlayers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connected_players_)*/{}
  , /*decltype(_impl_.disconnected_players_)*/{}
  , /*decltype(_impl_.player_draft_)*/{}
  , /*decltype(_impl_.poor_network_conditions_)*/nullptr
  , /*decltype(_impl_.game_state_)*/0
  , /*decltype(_impl_.first_blood_happened_)*/false
  , /*decltype(_impl_.send_reason_)*/0
  , /*decltype(_impl_.radiant_kills_)*/0u
  , /*decltype(_impl_.dire_kills_)*/0u
  , /*decltype(_impl_.radiant_lead_)*/0
  , /*decltype(_impl_.building_state_)*/0u} {}
struct CMsgConnectedPlayersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgConnectedPlayersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgConnectedPlayersDefaultTypeInternal() {}
  union {
    CMsgConnectedPlayers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgConnectedPlayersDefaultTypeInternal _CMsgConnectedPlayers_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerInfo::CMsgGameServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legacy_server_steamdatagram_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_public_ip_addr_)*/0u
  , /*decltype(_impl_.server_private_ip_addr_)*/0u
  , /*decltype(_impl_.server_port_)*/0u
  , /*decltype(_impl_.server_tv_port_)*/0u
  , /*decltype(_impl_.server_type_)*/0
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.server_loadavg_)*/0
  , /*decltype(_impl_.server_tv_broadcast_time_)*/0
  , /*decltype(_impl_.server_relay_connected_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_game_time_)*/0
  , /*decltype(_impl_.relay_slots_max_)*/0u
  , /*decltype(_impl_.relays_connected_)*/0
  , /*decltype(_impl_.relay_clients_connected_)*/0
  , /*decltype(_impl_.relayed_game_server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.tv_secret_code_)*/uint64_t{0u}
  , /*decltype(_impl_.parent_relay_count_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.server_cluster_)*/0u
  , /*decltype(_impl_.server_hibernation_)*/false
  , /*decltype(_impl_.dev_force_server_type_)*/false
  , /*decltype(_impl_.is_recording_match_training_data_)*/false
  , /*decltype(_impl_.assigned_server_tv_port_)*/0u
  , /*decltype(_impl_.allow_custom_games_)*/0
  , /*decltype(_impl_.build_version_)*/0u
  , /*decltype(_impl_.tf_server_count_)*/0u
  , /*decltype(_impl_.srcds_instance_)*/0u} {}
struct CMsgGameServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerInfoDefaultTypeInternal() {}
  union {
    CMsgGameServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerInfoDefaultTypeInternal _CMsgGameServerInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgLeaverDetected::CMsgLeaverDetected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.leaver_state_)*/nullptr
  , /*decltype(_impl_.poor_network_conditions_)*/nullptr
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.leaver_status_)*/0
  , /*decltype(_impl_.server_cluster_)*/0u
  , /*decltype(_impl_.disconnect_reason_)*/0} {}
struct CMsgLeaverDetectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLeaverDetectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLeaverDetectedDefaultTypeInternal() {}
  union {
    CMsgLeaverDetected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLeaverDetectedDefaultTypeInternal _CMsgLeaverDetected_default_instance_;
PROTOBUF_CONSTEXPR CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0u} {}
struct CMsgLeaverDetectedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLeaverDetectedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLeaverDetectedResponseDefaultTypeInternal() {}
  union {
    CMsgLeaverDetectedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLeaverDetectedResponseDefaultTypeInternal _CMsgLeaverDetectedResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyFinalPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAFantasyFinalPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyFinalPlayerStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyLivePlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAFantasyLivePlayerStatsDefaultTypeInternal _CMsgDOTAFantasyLivePlayerStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delayed_)*/nullptr} {}
struct CMsgServerToGCRealtimeStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRealtimeStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRealtimeStatsDefaultTypeInternal() {}
  union {
    CMsgServerToGCRealtimeStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRealtimeStatsDefaultTypeInternal _CMsgServerToGCRealtimeStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.delayed_)*/false} {}
struct CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal() {}
  union {
    CMsgGCToServerRealtimeStatsStartStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerRealtimeStatsStartStopDefaultTypeInternal _CMsgGCToServerRealtimeStatsStartStop_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_)*/false} {}
struct CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal() {}
  union {
    CMsgGCToServerUpdateSteamBroadcasting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerUpdateSteamBroadcastingDefaultTypeInternal _CMsgGCToServerUpdateSteamBroadcasting_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timed_player_stats_)*/{}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats_CPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGameplayStats_CPlayerDefaultTypeInternal _CMsgSignOutGameplayStats_CPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timed_team_stats_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.is_winning_team_)*/false
  , /*decltype(_impl_.is_radiant_team_)*/false} {}
struct CMsgSignOutGameplayStats_CTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats_CTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStats_CTeamDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats_CTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGameplayStats_CTeamDefaultTypeInternal _CMsgSignOutGameplayStats_CTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSignOutGameplayStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGameplayStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGameplayStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutGameplayStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGameplayStatsDefaultTypeInternal _CMsgSignOutGameplayStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dota_team_)*/0u
  , /*decltype(_impl_.winner_)*/false} {}
struct CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pre_reduction_)*/0u
  , /*decltype(_impl_.post_reduction_)*/0u
  , /*decltype(_impl_.damage_type_)*/0} {}
struct CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceivedDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.ability_upgrades_)*/{}
  , /*decltype(_impl_.additional_units_inventory_)*/{}
  , /*decltype(_impl_.permanent_buffs_)*/{}
  , /*decltype(_impl_.talent_ability_ids_)*/{}
  , /*decltype(_impl_.hero_damage_received_)*/{}
  , /*decltype(_impl_.item_purchase_times_)*/{}
  , /*decltype(_impl_.hero_damage_dealt_)*/{}
  , /*decltype(_impl_.ability_draft_abilities_)*/{}
  , /*decltype(_impl_.player_tracked_stats_)*/{}
  , /*decltype(_impl_.custom_game_data_)*/nullptr
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.leaver_status_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.gold_per_min_)*/0u
  , /*decltype(_impl_.xp_per_minute_)*/0u
  , /*decltype(_impl_.gold_spent_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.scaled_hero_damage_)*/0u
  , /*decltype(_impl_.scaled_tower_damage_)*/0u
  , /*decltype(_impl_.scaled_hero_healing_)*/0u
  , /*decltype(_impl_.time_last_seen_)*/0u
  , /*decltype(_impl_.party_id_)*/uint64_t{0u}
  , /*decltype(_impl_.support_ability_value_)*/0u
  , /*decltype(_impl_.claimed_farm_gold_)*/0u
  , /*decltype(_impl_.support_gold_)*/0u
  , /*decltype(_impl_.claimed_denies_)*/0u
  , /*decltype(_impl_.claimed_misses_)*/0u
  , /*decltype(_impl_.misses_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.match_player_flags_)*/0u
  , /*decltype(_impl_.hero_damage_)*/0u
  , /*decltype(_impl_.tower_damage_)*/0u
  , /*decltype(_impl_.hero_healing_)*/0u
  , /*decltype(_impl_.hero_pick_order_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.hero_was_randomed_)*/false
  , /*decltype(_impl_.hero_was_dota_plus_suggestion_)*/false
  , /*decltype(_impl_.is_using_plus_guide_)*/false
  , /*decltype(_impl_.seconds_dead_)*/0u
  , /*decltype(_impl_.gold_lost_to_death_)*/0u
  , /*decltype(_impl_.command_count_)*/0u
  , /*decltype(_impl_.mouse_click_cast_command_count_)*/0u
  , /*decltype(_impl_.teleports_used_)*/0u
  , /*decltype(_impl_.bounty_runes_)*/0u
  , /*decltype(_impl_.outposts_captured_)*/0u
  , /*decltype(_impl_.dewards_)*/0u
  , /*decltype(_impl_.wards_placed_)*/0u
  , /*decltype(_impl_.camps_stacked_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.predicted_position_)*/0u
  , /*decltype(_impl_.friendly_t1_destroyed_time_)*/0u
  , /*decltype(_impl_.enemy_t1_destroyed_time_)*/0u
  , /*decltype(_impl_.friendly_roshan_kills_)*/0u
  , /*decltype(_impl_.enemy_roshan_kills_)*/0u
  , /*decltype(_impl_.power_runes_)*/0u
  , /*decltype(_impl_.water_runes_)*/0u
  , /*decltype(_impl_.stun_duration_)*/0
  , /*decltype(_impl_.team_number_)*/0
  , /*decltype(_impl_.team_slot_)*/0u
  , /*decltype(_impl_.time_purchased_shard_)*/0u
  , /*decltype(_impl_.time_purchased_aghs_)*/0u
  , /*decltype(_impl_.cavern_crawl_preferred_map_variant_)*/255u
  , /*decltype(_impl_.lane_outcomes_)*/255u} {}
struct CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam_CPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CTeam_CPlayerDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.team_tracked_stats_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGameMatchSignOut_CTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CTeamDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CTeamDefaultTypeInternal _CMsgGameMatchSignOut_CTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contents_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CAdditionalSignoutMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CAdditionalSignoutMsgDefaultTypeInternal _CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.event_type_)*/0u
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.replay_time_)*/0u} {}
struct CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CSocialFeedMatchEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CSocialFeedMatchEventDefaultTypeInternal _CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.publish_timestamp_)*/0u} {}
struct CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_CCustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_CCustomGameDataDefaultTypeInternal _CMsgGameMatchSignOut_CCustomGameData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_suffix_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_.extra_data_1_)*/0u
  , /*decltype(_impl_.extra_data_2_)*/0u
  , /*decltype(_impl_.extra_data_3_)*/0u
  , /*decltype(_impl_.extra_data_4_)*/0u
  , /*decltype(_impl_.extra_data_5_)*/0u} {}
struct CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_EventGameLeaderboardEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_EventGameLeaderboardEntryDefaultTypeInternal _CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.placed_time_)*/0u
  , /*decltype(_impl_.building_state_)*/0u
  , /*decltype(_impl_.creep_state_)*/0u
  , /*decltype(_impl_.roshan_alive_)*/false
  , /*decltype(_impl_.position_x_)*/0u
  , /*decltype(_impl_.position_y_)*/0u
  , /*decltype(_impl_.player_id_)*/-1} {}
struct CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut_WardPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOut_WardPlacementDefaultTypeInternal _CMsgGameMatchSignOut_WardPlacement_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOut::CMsgGameMatchSignOut(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.teams_)*/{}
  , /*decltype(_impl_.tower_status_)*/{}
  , /*decltype(_impl_.barracks_status_)*/{}
  , /*decltype(_impl_.picks_bans_)*/{}
  , /*decltype(_impl_.player_strange_count_adjustments_)*/{}
  , /*decltype(_impl_.additional_msgs_)*/{}
  , /*decltype(_impl_.social_feed_events_)*/{}
  , /*decltype(_impl_.team_scores_)*/{}
  , /*decltype(_impl_.fantasy_stats_)*/{}
  , /*decltype(_impl_.event_game_leaderboard_entries_)*/{}
  , /*decltype(_impl_.ward_placements_)*/{}
  , /*decltype(_impl_.extra_messages_)*/{}
  , /*decltype(_impl_.match_tracked_stats_)*/{}
  , /*decltype(_impl_.server_addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.poor_network_conditions_)*/nullptr
  , /*decltype(_impl_.custom_game_data_)*/nullptr
  , /*decltype(_impl_.gameplay_stats_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.date_)*/0u
  , /*decltype(_impl_.cluster_)*/0u
  , /*decltype(_impl_.first_blood_time_)*/0u
  , /*decltype(_impl_.event_score_)*/0u
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.average_networth_delta_)*/0
  , /*decltype(_impl_.good_guys_win_)*/false
  , /*decltype(_impl_.automatic_surrender_)*/false
  , /*decltype(_impl_.training_data_recorded_)*/false
  , /*decltype(_impl_.match_flags_)*/0u
  , /*decltype(_impl_.pre_game_duration_)*/0u
  , /*decltype(_impl_.winning_team_)*/0
  , /*decltype(_impl_.normalized_win_probability_diff_)*/0} {}
struct CMsgGameMatchSignOutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutDefaultTypeInternal _CMsgGameMatchSignOut_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.picks_bans_)*/{}
  , /*decltype(_impl_.radiant_captain_account_id_)*/0u
  , /*decltype(_impl_.dire_captain_account_id_)*/0u} {}
struct CMsgSignOutDraftInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutDraftInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutDraftInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutDraftInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutDraftInfoDefaultTypeInternal _CMsgSignOutDraftInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutBotInfo::CMsgSignOutBotInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bot_difficulty_radiant_)*/0
  , /*decltype(_impl_.allow_cheats_)*/false
  , /*decltype(_impl_.created_lobby_)*/false
  , /*decltype(_impl_.bot_difficulty_dire_)*/0} {}
struct CMsgSignOutBotInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutBotInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutBotInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutBotInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutBotInfoDefaultTypeInternal _CMsgSignOutBotInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chat_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/0u
  , /*decltype(_impl_.caused_text_mute_)*/false} {}
struct CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal() {}
  union {
    CMsgSignOutTextMuteInfo_TextMuteMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutTextMuteInfo_TextMuteMessageDefaultTypeInternal _CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_mute_messages_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSignOutTextMuteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutTextMuteInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutTextMuteInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutTextMuteInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutTextMuteInfoDefaultTypeInternal _CMsgSignOutTextMuteInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.rampages_)*/0u
  , /*decltype(_impl_.triple_kills_)*/0u
  , /*decltype(_impl_.first_blood_claimed_)*/0u
  , /*decltype(_impl_.first_blood_given_)*/0u
  , /*decltype(_impl_.couriers_killed_)*/0u
  , /*decltype(_impl_.aegises_snatched_)*/0u
  , /*decltype(_impl_.cheeses_eaten_)*/0u
  , /*decltype(_impl_.creeps_stacked_)*/0u
  , /*decltype(_impl_.fight_score_)*/0
  , /*decltype(_impl_.farm_score_)*/0
  , /*decltype(_impl_.support_score_)*/0
  , /*decltype(_impl_.push_score_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.gpm_)*/0
  , /*decltype(_impl_.xppm_)*/0
  , /*decltype(_impl_.net_worth_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.heals_)*/0
  , /*decltype(_impl_.rapiers_purchased_)*/0u
  , /*decltype(_impl_.observer_wards_placed_)*/0u
  , /*decltype(_impl_.wards_destroyed_)*/0u
  , /*decltype(_impl_.lobby_type_)*/0u} {}
struct CMsgSignOutPlayerStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutPlayerStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutPlayerStatsDefaultTypeInternal _CMsgSignOutPlayerStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.count_)*/0u
  , /*decltype(_impl_.type_)*/4294967295u} {}
struct CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetailDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ping_details_)*/{}
  , /*decltype(_impl_.chat_log_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.pings_)*/0u
  , /*decltype(_impl_.max_pings_per_interval_)*/0u
  , /*decltype(_impl_.teammate_pings_)*/0u
  , /*decltype(_impl_.max_teammate_pings_per_interval_)*/0u
  , /*decltype(_impl_.team_chat_messages_)*/0u
  , /*decltype(_impl_.all_chat_messages_)*/0u
  , /*decltype(_impl_.chat_wheel_messages_)*/0u
  , /*decltype(_impl_.pauses_)*/0u
  , /*decltype(_impl_.unpauses_)*/0u
  , /*decltype(_impl_.lines_drawn_)*/0u
  , /*decltype(_impl_.voice_chat_seconds_)*/0u
  , /*decltype(_impl_.chat_mutes_)*/0u
  , /*decltype(_impl_.voice_mutes_)*/0u
  , /*decltype(_impl_.comms_blocks_solo_)*/0u
  , /*decltype(_impl_.comms_blocks_mass_)*/0u} {}
struct CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary_PlayerCommunication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutCommunicationSummary_PlayerCommunicationDefaultTypeInternal _CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSignOutCommunicationSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutCommunicationSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutCommunicationSummaryDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunicationSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutCommunicationSummaryDefaultTypeInternal _CMsgSignOutCommunicationSummary_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.avg_kills_x16_)*/0u
  , /*decltype(_impl_.avg_deaths_x16_)*/0u
  , /*decltype(_impl_.avg_assists_x16_)*/0u
  , /*decltype(_impl_.avg_gpm_x16_)*/0u
  , /*decltype(_impl_.avg_xpm_x16_)*/0u
  , /*decltype(_impl_.best_kills_x16_)*/0u
  , /*decltype(_impl_.best_assists_x16_)*/0u
  , /*decltype(_impl_.best_gpm_x16_)*/0u
  , /*decltype(_impl_.best_xpm_x16_)*/0u
  , /*decltype(_impl_.win_streak_)*/0u
  , /*decltype(_impl_.best_win_streak_)*/0u
  , /*decltype(_impl_.games_played_)*/0u} {}
struct CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignoutResponse_PlayerMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignoutResponse_PlayerMetadataDefaultTypeInternal _CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timed_reward_details_)*/{}
  , /*decltype(_impl_.xp_reward_details_)*/{}
  , /*decltype(_impl_.players_metadata_)*/{}
  , /*decltype(_impl_.match_details_)*/nullptr
  , /*decltype(_impl_.mvp_data_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.replay_salt_)*/0u
  , /*decltype(_impl_.leagueid_)*/0u
  , /*decltype(_impl_.metadata_private_key_)*/0u
  , /*decltype(_impl_.ow_salt_)*/0u
  , /*decltype(_impl_.ow_private_key_)*/uint64_t{0u}
  , /*decltype(_impl_.ow_replay_id_)*/uint64_t{0u}} {}
struct CMsgGameMatchSignoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignoutResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignoutResponseDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignoutResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignoutResponseDefaultTypeInternal _CMsgGameMatchSignoutResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgTimedRewardContainer::CMsgTimedRewardContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timed_reward_details_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgTimedRewardContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTimedRewardContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTimedRewardContainerDefaultTypeInternal() {}
  union {
    CMsgTimedRewardContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTimedRewardContainerDefaultTypeInternal _CMsgTimedRewardContainer_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_version_)*/0u
  , /*decltype(_impl_.local_attempt_)*/0u
  , /*decltype(_impl_.total_attempt_)*/0u
  , /*decltype(_impl_.seconds_waited_)*/0u} {}
struct CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPermissionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutPermissionRequestDefaultTypeInternal _CMsgGameMatchSignOutPermissionRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.permission_granted_)*/false
  , /*decltype(_impl_.abandon_signout_)*/false
  , /*decltype(_impl_.retry_delay_seconds_)*/0u} {}
struct CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPermissionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutPermissionResponseDefaultTypeInternal _CMsgGameMatchSignOutPermissionResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_game_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.start_time_)*/0u} {}
struct CMsgGameMatchSignOutEventGameDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutEventGameDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutEventGameDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutEventGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutEventGameDataDefaultTypeInternal _CMsgGameMatchSignOutEventGameData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_frame_time_)*/{}
  , /*decltype(_impl_.max_frame_time_)*/{}
  , /*decltype(_impl_.average_compute_time_)*/{}
  , /*decltype(_impl_.max_compute_time_)*/{}
  , /*decltype(_impl_.average_client_tick_time_)*/{}
  , /*decltype(_impl_.max_client_tick_time_)*/{}
  , /*decltype(_impl_.average_client_simulate_time_)*/{}
  , /*decltype(_impl_.max_client_simulate_time_)*/{}
  , /*decltype(_impl_.average_output_time_)*/{}
  , /*decltype(_impl_.max_output_time_)*/{}
  , /*decltype(_impl_.average_wait_for_rendering_to_complete_time_)*/{}
  , /*decltype(_impl_.max_wait_for_rendering_to_complete_time_)*/{}
  , /*decltype(_impl_.average_swap_time_)*/{}
  , /*decltype(_impl_.max_swap_time_)*/{}
  , /*decltype(_impl_.average_frame_update_time_)*/{}
  , /*decltype(_impl_.max_frame_update_time_)*/{}
  , /*decltype(_impl_.average_idle_time_)*/{}
  , /*decltype(_impl_.max_idle_time_)*/{}
  , /*decltype(_impl_.average_input_processing_time_)*/{}
  , /*decltype(_impl_.max_input_processing_time_)*/{}
  , /*decltype(_impl_.server_average_frame_time_)*/0
  , /*decltype(_impl_.server_max_frame_time_)*/0} {}
struct CMsgGameMatchSignOutPerfDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutPerfDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutPerfDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutPerfData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutPerfDataDefaultTypeInternal _CMsgGameMatchSignOutPerfData_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hero_bans_)*/{}
  , /*decltype(_impl_.hero_ban_votes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGameMatchSignOutBanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameMatchSignOutBanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameMatchSignOutBanDataDefaultTypeInternal() {}
  union {
    CMsgGameMatchSignOutBanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameMatchSignOutBanDataDefaultTypeInternal _CMsgGameMatchSignOutBanData_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ability_level_)*/0u
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbilityDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hero_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.last_hits_)*/0u
  , /*decltype(_impl_.denies_)*/0u
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.gold_per_min_)*/0
  , /*decltype(_impl_.xp_per_min_)*/0
  , /*decltype(_impl_.ultimate_state_)*/0
  , /*decltype(_impl_.ultimate_cooldown_)*/0
  , /*decltype(_impl_.respawn_timer_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.item0_)*/-1
  , /*decltype(_impl_.item1_)*/-1
  , /*decltype(_impl_.item2_)*/-1
  , /*decltype(_impl_.item3_)*/-1
  , /*decltype(_impl_.item4_)*/-1
  , /*decltype(_impl_.item5_)*/-1} {}
struct CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALiveScoreboardUpdate_Team_PlayerDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.hero_picks_)*/{}
  , /*decltype(_impl_.hero_bans_)*/{}
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_.tower_state_)*/0u
  , /*decltype(_impl_.barracks_state_)*/0u} {}
struct CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALiveScoreboardUpdate_TeamDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_Team_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_good_)*/nullptr
  , /*decltype(_impl_.team_bad_)*/nullptr
  , /*decltype(_impl_.tournament_id_)*/0u
  , /*decltype(_impl_.tournament_game_id_)*/0u
  , /*decltype(_impl_.duration_)*/0
  , /*decltype(_impl_.hltv_delay_)*/0
  , /*decltype(_impl_.roshan_respawn_timer_)*/0u
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgDOTALiveScoreboardUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTALiveScoreboardUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTALiveScoreboardUpdateDefaultTypeInternal() {}
  union {
    CMsgDOTALiveScoreboardUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTALiveScoreboardUpdateDefaultTypeInternal _CMsgDOTALiveScoreboardUpdate_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_._account_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.rank_types_)*/{}
  , /*decltype(_impl_._rank_types_cached_byte_size_)*/{0}
  , /*decltype(_impl_.lobby_type_)*/0} {}
struct CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResources _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRequestBatchPlayerResourcesDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResources_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.rank_calibrated_)*/false
  , /*decltype(_impl_.low_priority_)*/false
  , /*decltype(_impl_.is_new_player_)*/false
  , /*decltype(_impl_.is_guide_player_)*/false
  , /*decltype(_impl_.comm_level_)*/0
  , /*decltype(_impl_.behavior_level_)*/0} {}
struct CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResourcesResponse_Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRequestBatchPlayerResourcesResponse_ResultDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestBatchPlayerResourcesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRequestBatchPlayerResourcesResponseDefaultTypeInternal _CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.failed_loaders_)*/{}
  , /*decltype(_impl_.abandoned_loaders_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTAPlayerFailedToConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPlayerFailedToConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPlayerFailedToConnectDefaultTypeInternal() {}
  union {
    CMsgDOTAPlayerFailedToConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPlayerFailedToConnectDefaultTypeInternal _CMsgDOTAPlayerFailedToConnect_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToRelayConnect::CMsgGCToRelayConnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_tv_public_addr_)*/0u
  , /*decltype(_impl_.source_tv_private_addr_)*/0u
  , /*decltype(_impl_.game_server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.source_tv_port_)*/0u
  , /*decltype(_impl_.parent_count_)*/0u
  , /*decltype(_impl_.tv_unique_secret_code_)*/uint64_t{0u}
  , /*decltype(_impl_.source_tv_steamid_)*/uint64_t{0u}} {}
struct CMsgGCToRelayConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToRelayConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToRelayConnectDefaultTypeInternal() {}
  union {
    CMsgGCToRelayConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToRelayConnectDefaultTypeInternal _CMsgGCToRelayConnect_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relay_steamid_)*/uint64_t{0u}} {}
struct CMsgGCGCToLANServerRelayConnectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCGCToLANServerRelayConnectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCGCToLANServerRelayConnectDefaultTypeInternal() {}
  union {
    CMsgGCGCToLANServerRelayConnect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCGCToLANServerRelayConnectDefaultTypeInternal _CMsgGCGCToLANServerRelayConnect_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgGCBanStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCBanStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCBanStatusRequestDefaultTypeInternal() {}
  union {
    CMsgGCBanStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCBanStatusRequestDefaultTypeInternal _CMsgGCBanStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0u
  , /*decltype(_impl_.low_priority_)*/false
  , /*decltype(_impl_.text_chat_banned_)*/false
  , /*decltype(_impl_.voice_chat_banned_)*/false} {}
struct CMsgGCBanStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCBanStatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCBanStatusResponseDefaultTypeInternal() {}
  union {
    CMsgGCBanStatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCBanStatusResponseDefaultTypeInternal _CMsgGCBanStatusResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgTournamentItemEvent::CMsgTournamentItemEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_statues_)*/{}
  , /*decltype(_impl_.loot_list_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.killer_account_id_)*/0u
  , /*decltype(_impl_.victim_account_id_)*/0u
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.tv_delay_)*/0
  , /*decltype(_impl_.dota_time_)*/0
  , /*decltype(_impl_.replay_time_)*/0
  , /*decltype(_impl_.event_team_)*/0u
  , /*decltype(_impl_.multi_kill_count_)*/0u
  , /*decltype(_impl_.winner_score_)*/0u
  , /*decltype(_impl_.loser_score_)*/0u} {}
struct CMsgTournamentItemEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTournamentItemEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTournamentItemEventDefaultTypeInternal() {}
  union {
    CMsgTournamentItemEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTournamentItemEventDefaultTypeInternal _CMsgTournamentItemEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_type_)*/0
  , /*decltype(_impl_.viewers_granted_)*/0u} {}
struct CMsgTournamentItemEventResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTournamentItemEventResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTournamentItemEventResponseDefaultTypeInternal() {}
  union {
    CMsgTournamentItemEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTournamentItemEventResponseDefaultTypeInternal _CMsgTournamentItemEventResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgTeamFanfare::CMsgTeamFanfare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgTeamFanfareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTeamFanfareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTeamFanfareDefaultTypeInternal() {}
  union {
    CMsgTeamFanfare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTeamFanfareDefaultTypeInternal _CMsgTeamFanfare_default_instance_;
PROTOBUF_CONSTEXPR CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fanfare_goodguys_)*/0u
  , /*decltype(_impl_.fanfare_badguys_)*/0u} {}
struct CMsgResponseTeamFanfareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgResponseTeamFanfareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgResponseTeamFanfareDefaultTypeInternal() {}
  union {
    CMsgResponseTeamFanfare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgResponseTeamFanfareDefaultTypeInternal _CMsgResponseTeamFanfare_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_steam_ids_)*/{}
  , /*decltype(_impl_.save_game_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_time_)*/0u} {}
struct CMsgGameServerUploadSaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerUploadSaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerUploadSaveGameDefaultTypeInternal() {}
  union {
    CMsgGameServerUploadSaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerUploadSaveGameDefaultTypeInternal _CMsgGameServerUploadSaveGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgGameServerSaveGameResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerSaveGameResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerSaveGameResultDefaultTypeInternal() {}
  union {
    CMsgGameServerSaveGameResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerSaveGameResultDefaultTypeInternal _CMsgGameServerSaveGameResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.save_id_)*/0u} {}
struct CMsgGameServerGetLoadGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerGetLoadGameDefaultTypeInternal() {}
  union {
    CMsgGameServerGetLoadGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerGetLoadGameDefaultTypeInternal _CMsgGameServerGetLoadGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.save_game_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgGameServerGetLoadGameResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGameServerGetLoadGameResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGameServerGetLoadGameResultDefaultTypeInternal() {}
  union {
    CMsgGameServerGetLoadGameResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGameServerGetLoadGameResultDefaultTypeInternal _CMsgGameServerGetLoadGameResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.points_)*/0
  , /*decltype(_impl_.premium_points_)*/0
  , /*decltype(_impl_.trade_ban_time_)*/0u
  , /*decltype(_impl_.eligible_for_periodic_adjustment_)*/false
  , /*decltype(_impl_.point_cap_periodic_resource_id_)*/0u} {}
struct CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal() {}
  union {
    CMsgDOTAAwardEventPoints_AwardPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAAwardEventPoints_AwardPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_AwardPoints_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.award_points_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.audit_action_)*/0u} {}
struct CMsgDOTAAwardEventPointsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAAwardEventPointsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAAwardEventPointsDefaultTypeInternal() {}
  union {
    CMsgDOTAAwardEventPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAAwardEventPointsDefaultTypeInternal _CMsgDOTAAwardEventPoints_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_.request_time_)*/uint64_t{0u}} {}
struct CMsgGCToServerPingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerPingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerPingRequestDefaultTypeInternal() {}
  union {
    CMsgGCToServerPingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerPingRequestDefaultTypeInternal _CMsgGCToServerPingRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/uint64_t{0u}
  , /*decltype(_impl_.request_time_)*/uint64_t{0u}
  , /*decltype(_impl_.cluster_)*/0u} {}
struct CMsgGCToServerPingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerPingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerPingResponseDefaultTypeInternal() {}
  union {
    CMsgGCToServerPingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerPingResponseDefaultTypeInternal _CMsgGCToServerPingResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.ip_)*/0u
  , /*decltype(_impl_.avg_ping_ms_)*/0u
  , /*decltype(_impl_.packet_loss_)*/0
  , /*decltype(_impl_.ping_deviation_)*/0
  , /*decltype(_impl_.full_resends_)*/0u} {}
struct CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchConnectionStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchConnectionStats_PlayerDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.region_id_)*/0u
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.cluster_id_)*/0u} {}
struct CMsgServerToGCMatchConnectionStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchConnectionStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchConnectionStatsDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchConnectionStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchConnectionStatsDefaultTypeInternal _CMsgServerToGCMatchConnectionStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spectator_count_)*/0u} {}
struct CMsgServerGCUpdateSpectatorCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerGCUpdateSpectatorCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerGCUpdateSpectatorCountDefaultTypeInternal() {}
  union {
    CMsgServerGCUpdateSpectatorCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerGCUpdateSpectatorCountDefaultTypeInternal _CMsgServerGCUpdateSpectatorCount_default_instance_;
PROTOBUF_CONSTEXPR CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0u} {}
struct CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal() {}
  union {
    CSerializedCombatLog_Dictionary_DictString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSerializedCombatLog_Dictionary_DictStringDefaultTypeInternal _CSerializedCombatLog_Dictionary_DictString_default_instance_;
PROTOBUF_CONSTEXPR CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.strings_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CSerializedCombatLog_DictionaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSerializedCombatLog_DictionaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSerializedCombatLog_DictionaryDefaultTypeInternal() {}
  union {
    CSerializedCombatLog_Dictionary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSerializedCombatLog_DictionaryDefaultTypeInternal _CSerializedCombatLog_Dictionary_default_instance_;
PROTOBUF_CONSTEXPR CSerializedCombatLog::CSerializedCombatLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_.dictionary_)*/nullptr
  , /*decltype(_impl_.version_)*/0u} {}
struct CSerializedCombatLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSerializedCombatLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSerializedCombatLogDefaultTypeInternal() {}
  union {
    CSerializedCombatLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSerializedCombatLogDefaultTypeInternal _CSerializedCombatLog_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal() {}
  union {
    CMsgServerToGCVictoryPredictions_Record _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCVictoryPredictions_RecordDefaultTypeInternal _CMsgServerToGCVictoryPredictions_Record_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.records_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCVictoryPredictionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCVictoryPredictionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCVictoryPredictionsDefaultTypeInternal() {}
  union {
    CMsgServerToGCVictoryPredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCVictoryPredictionsDefaultTypeInternal _CMsgServerToGCVictoryPredictions_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(
    ::_pbi::ConstantInitialized) {}
struct CMsgServerToGCRequestStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestStatusDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRequestStatusDefaultTypeInternal _CMsgServerToGCRequestStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.response_)*/0u} {}
struct CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestStatus_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRequestStatus_ResponseDefaultTypeInternal _CMsgServerToGCRequestStatus_Response_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerEvaluateToxicChat::CMsgGCToServerEvaluateToxicChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.reporter_account_id_)*/0u} {}
struct CMsgGCToServerEvaluateToxicChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerEvaluateToxicChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerEvaluateToxicChatDefaultTypeInternal() {}
  union {
    CMsgGCToServerEvaluateToxicChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerEvaluateToxicChatDefaultTypeInternal _CMsgGCToServerEvaluateToxicChat_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCEvaluateToxicChat::CMsgServerToGCEvaluateToxicChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timestamp_)*/{}
  , /*decltype(_impl_.line_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.reporter_account_id_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgServerToGCEvaluateToxicChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCEvaluateToxicChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCEvaluateToxicChatDefaultTypeInternal() {}
  union {
    CMsgServerToGCEvaluateToxicChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCEvaluateToxicChatDefaultTypeInternal _CMsgServerToGCEvaluateToxicChat_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCEvaluateToxicChatResponse::CMsgServerToGCEvaluateToxicChatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_account_id_)*/0u
  , /*decltype(_impl_.reporter_account_id_)*/0u
  , /*decltype(_impl_.ban_reason_)*/0u
  , /*decltype(_impl_.ban_duration_)*/0u} {}
struct CMsgServerToGCEvaluateToxicChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCEvaluateToxicChatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCEvaluateToxicChatResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCEvaluateToxicChatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCEvaluateToxicChatResponseDefaultTypeInternal _CMsgServerToGCEvaluateToxicChatResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.winning_players_)*/{}
  , /*decltype(_impl_.losing_players_)*/{}
  , /*decltype(_impl_.arcana_owners_)*/{}
  , /*decltype(_impl_.target_hero_id_)*/0u
  , /*decltype(_impl_.assassin_won_)*/false
  , /*decltype(_impl_.contract_completed_)*/false
  , /*decltype(_impl_.pa_is_radiant_)*/false
  , /*decltype(_impl_.contract_complete_time_)*/0} {}
struct CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal() {}
  union {
    CMsgSignOutAssassinMiniGameInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutAssassinMiniGameInfoDefaultTypeInternal _CMsgSignOutAssassinMiniGameInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.killer_hero_id_)*/0u
  , /*decltype(_impl_.victim_hero_id_)*/0u
  , /*decltype(_impl_.kill_count_)*/0u} {}
struct CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal() {}
  union {
    CMsgServerToGCKillSummaries_KillSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCKillSummaries_KillSummaryDefaultTypeInternal _CMsgServerToGCKillSummaries_KillSummary_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.summaries_)*/{}
  , /*decltype(_impl_.ingameevent_id_)*/0u} {}
struct CMsgServerToGCKillSummariesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCKillSummariesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCKillSummariesDefaultTypeInternal() {}
  union {
    CMsgServerToGCKillSummaries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCKillSummariesDefaultTypeInternal _CMsgServerToGCKillSummaries_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.granted_item_defs_)*/{}
  , /*decltype(_impl_.item_def_)*/0u
  , /*decltype(_impl_.num_correct_)*/0u
  , /*decltype(_impl_.num_fails_)*/0u
  , /*decltype(_impl_.result_)*/1} {}
struct CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal() {}
  union {
    CMsgGCToServerPredictionResult_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerPredictionResult_PredictionDefaultTypeInternal _CMsgGCToServerPredictionResult_Prediction_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predictions_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.correct_)*/false} {}
struct CMsgGCToServerPredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerPredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerPredictionResultDefaultTypeInternal() {}
  union {
    CMsgGCToServerPredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerPredictionResultDefaultTypeInternal _CMsgGCToServerPredictionResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerToGCLockCharmTradingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCLockCharmTradingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCLockCharmTradingDefaultTypeInternal() {}
  union {
    CMsgServerToGCLockCharmTrading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCLockCharmTradingDefaultTypeInternal _CMsgServerToGCLockCharmTrading_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.slot_id_)*/0u
  , /*decltype(_impl_.sequence_id_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.challenge_rank_)*/0u} {}
struct CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal() {}
  union {
    CMsgSignOutUpdatePlayerChallenge_Challenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutUpdatePlayerChallenge_ChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.completed_)*/{}
  , /*decltype(_impl_.rerolled_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgSignOutUpdatePlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutUpdatePlayerChallengeDefaultTypeInternal _CMsgSignOutUpdatePlayerChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reroll_msg_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgServerToGCRerollPlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCRerollPlayerChallengeDefaultTypeInternal _CMsgServerToGCRerollPlayerChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpendWager_Player::CMsgSpendWager_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.wager_)*/0u
  , /*decltype(_impl_.wager_token_item_id_)*/uint64_t{0u}} {}
struct CMsgSpendWager_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpendWager_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpendWager_PlayerDefaultTypeInternal() {}
  union {
    CMsgSpendWager_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpendWager_PlayerDefaultTypeInternal _CMsgSpendWager_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpendWager::CMsgSpendWager(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0u
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}} {}
struct CMsgSpendWagerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpendWagerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpendWagerDefaultTypeInternal() {}
  union {
    CMsgSpendWager _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpendWagerDefaultTypeInternal _CMsgSpendWager_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.xp_gained_)*/0u
  , /*decltype(_impl_.wager_token_item_id_)*/uint64_t{0u}
  , /*decltype(_impl_.coins_spent_)*/0u
  , /*decltype(_impl_.rank_wager_)*/0u
  , /*decltype(_impl_.wager_streak_)*/0u} {}
struct CMsgSignOutXPCoins_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutXPCoins_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutXPCoins_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutXPCoins_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutXPCoins_PlayerDefaultTypeInternal _CMsgSignOutXPCoins_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutXPCoins::CMsgSignOutXPCoins(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CMsgSignOutXPCoinsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutXPCoinsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutXPCoinsDefaultTypeInternal() {}
  union {
    CMsgSignOutXPCoins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutXPCoinsDefaultTypeInternal _CMsgSignOutXPCoins_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.issuer_account_id_)*/0u
  , /*decltype(_impl_.completer_account_id_)*/0u
  , /*decltype(_impl_.target_account_id_)*/0u} {}
struct CMsgSignOutBounties_BountyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutBounties_BountyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutBounties_BountyDefaultTypeInternal() {}
  union {
    CMsgSignOutBounties_Bounty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutBounties_BountyDefaultTypeInternal _CMsgSignOutBounties_Bounty_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutBounties::CMsgSignOutBounties(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bounties_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.event_id_)*/0
  , /*decltype(_impl_.timestamp_)*/0u} {}
struct CMsgSignOutBountiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutBountiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutBountiesDefaultTypeInternal() {}
  union {
    CMsgSignOutBounties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutBountiesDefaultTypeInternal _CMsgSignOutBounties_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_goal_id_)*/0u
  , /*decltype(_impl_.increment_amount_)*/0u} {}
struct CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunityGoalProgress_EventGoalIncrement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutCommunityGoalProgress_EventGoalIncrementDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_increments_)*/{}
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgSignOutCommunityGoalProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutCommunityGoalProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutCommunityGoalProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutCommunityGoalProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutCommunityGoalProgressDefaultTypeInternal _CMsgSignOutCommunityGoalProgress_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.hltv_delay_)*/0u
  , /*decltype(_impl_.league_id_)*/0u} {}
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal() {}
  union {
    CMsgServerToGCCloseCompendiumInGamePredictionVoting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCloseCompendiumInGamePredictionVotingDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/false} {}
struct CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCloseCompendiumInGamePredictionVotingResponseDefaultTypeInternal _CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prediction_id_)*/0u
  , /*decltype(_impl_.prediction_value_)*/0u
  , /*decltype(_impl_.prediction_value_is_mask_)*/false} {}
struct CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCompendiumInGamePredictionResults_PredictionResultDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.league_node_id_)*/0u} {}
struct CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumInGamePredictionResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgServerToGCCompendiumInGamePredictionResults_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prediction_id_)*/0u} {}
struct CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumChosenInGamePredictions_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCompendiumChosenInGamePredictions_PredictionDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.predictions_chosen_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.league_id_)*/0u} {}
struct CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCompendiumChosenInGamePredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCompendiumChosenInGamePredictionsDefaultTypeInternal _CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.results_)*/nullptr} {}
struct CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal() {}
  union {
    CMsgGCToGCCompendiumInGamePredictionResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToGCCompendiumInGamePredictionResultsDefaultTypeInternal _CMsgGCToGCCompendiumInGamePredictionResults_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inventory_items_)*/{}
  , /*decltype(_impl_.talents_skilled_)*/{}
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.game_time_)*/0u
  , /*decltype(_impl_.item_)*/-1} {}
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchaseDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.item_purchases_)*/{}
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.is_winner_)*/false} {}
struct CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerItemPurchaseHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.mmr_)*/0u} {}
struct CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerItemPurchaseHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerItemPurchaseHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inventory_items_)*/{}
  , /*decltype(_impl_.talents_skilled_)*/{}
  , /*decltype(_impl_.available_neutral_items_)*/{}
  , /*decltype(_impl_.game_time_)*/0u
  , /*decltype(_impl_.item_)*/-1} {}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquipDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.item_equips_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.is_winner_)*/false} {}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerNeutralItemEquipHistory_PlayerDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}} {}
struct CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchPlayerNeutralItemEquipHistoryDefaultTypeInternal _CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.respawn_time_)*/0u
  , /*decltype(_impl_.has_buyback_)*/false
  , /*decltype(_impl_.has_aegis_)*/false
  , /*decltype(_impl_.has_rapier_)*/false
  , /*decltype(_impl_.distance_)*/0u} {}
struct CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_PlayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchStateHistory_PlayerStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_PlayerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_states_)*/{}
  , /*decltype(_impl_.tower_health_pct_)*/{}
  , /*decltype(_impl_.barracks_health_pct_)*/{}
  , /*decltype(_impl_.team_)*/0u
  , /*decltype(_impl_.ancient_health_pct_)*/0u
  , /*decltype(_impl_.glyph_cooldown_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.creep_distance_safe_)*/0u
  , /*decltype(_impl_.creep_distance_mid_)*/0u
  , /*decltype(_impl_.creep_distance_off_)*/0u} {}
struct CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_TeamState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchStateHistory_TeamStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_TeamState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radiant_state_)*/nullptr
  , /*decltype(_impl_.dire_state_)*/nullptr
  , /*decltype(_impl_.game_time_)*/0u} {}
struct CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory_MatchState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchStateHistory_MatchStateDefaultTypeInternal _CMsgServerToGCMatchStateHistory_MatchState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_states_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.radiant_won_)*/false
  , /*decltype(_impl_.mmr_)*/0u} {}
struct CMsgServerToGCMatchStateHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCMatchStateHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCMatchStateHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCMatchStateHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCMatchStateHistoryDefaultTypeInternal _CMsgServerToGCMatchStateHistory_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.match_state_)*/nullptr
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.radiant_won_)*/false} {}
struct CMsgMatchStateSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchStateSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchStateSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgMatchStateSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchStateSteamMLEntryDefaultTypeInternal _CMsgMatchStateSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hero_ids_)*/{}
  , /*decltype(_impl_.lanes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgLaneSelectionSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLaneSelectionSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLaneSelectionSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgLaneSelectionSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLaneSelectionSteamMLEntryDefaultTypeInternal _CMsgLaneSelectionSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.abilities_)*/{}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.selected_ability_)*/-1} {}
struct CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgAbilitySelectionSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAbilitySelectionSteamMLEntryDefaultTypeInternal _CMsgAbilitySelectionSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.balance_)*/0
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchasePregameSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemPurchasePregameSteamMLEntryDefaultTypeInternal _CMsgItemPurchasePregameSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.items_to_be_purchased_)*/{}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u} {}
struct CMsgItemPurchaseSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemPurchaseSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemPurchaseSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchaseSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemPurchaseSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.mmr_)*/0u
  , /*decltype(_impl_.lane_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.item_to_be_purchased_)*/-1} {}
struct CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal() {}
  union {
    CMsgItemPurchaseSequenceSteamMLEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgItemPurchaseSequenceSteamMLEntryDefaultTypeInternal _CMsgItemPurchaseSequenceSteamMLEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.turbo_mode_)*/false
  , /*decltype(_impl_.preferred_map_variant_)*/255u} {}
struct CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCavernCrawlIsHeroActiveDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActive_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.challenge_type_)*/0
  , /*decltype(_impl_.challenge_id1_)*/0u
  , /*decltype(_impl_.challenge_id2_)*/0u
  , /*decltype(_impl_.progress_value_start_)*/0u
  , /*decltype(_impl_.progress_value_end_)*/0u
  , /*decltype(_impl_.audit_data_)*/uint64_t{0u}
  , /*decltype(_impl_.team_won_)*/false
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.rank_completed_)*/0u} {}
struct CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgServerToGCPlayerChallengeHistory_PlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCPlayerChallengeHistory_PlayerChallengeDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.challenge_records_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.average_rank_)*/0u} {}
struct CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal() {}
  union {
    CMsgServerToGCPlayerChallengeHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCPlayerChallengeHistoryDefaultTypeInternal _CMsgServerToGCPlayerChallengeHistory_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_id_completed_)*/255u
  , /*decltype(_impl_.room_id_claimed_)*/255u} {}
struct CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResultsDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.map_results_)*/{}
  , /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_.potential_winnings_)*/0u
  , /*decltype(_impl_.potential_plus_shard_winnings_)*/0u
  , /*decltype(_impl_.map_variant_)*/255u} {}
struct CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCCavernCrawlIsHeroActiveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCCavernCrawlIsHeroActiveResponseDefaultTypeInternal _CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_instance_)*/0u} {}
struct CMsgGCtoServerTensorflowInstanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCtoServerTensorflowInstanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCtoServerTensorflowInstanceDefaultTypeInternal() {}
  union {
    CMsgGCtoServerTensorflowInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCtoServerTensorflowInstanceDefaultTypeInternal _CMsgGCtoServerTensorflowInstance_default_instance_;
PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.total_earned_gold_)*/0u
  , /*decltype(_impl_.total_networth_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.total_dps_)*/0u
  , /*decltype(_impl_.average_dps_)*/0u
  , /*decltype(_impl_.ability_damage_output_)*/0u
  , /*decltype(_impl_.base_health_)*/0u
  , /*decltype(_impl_.total_health_)*/0u
  , /*decltype(_impl_.total_mana_)*/0u
  , /*decltype(_impl_.base_physical_damage_reduction_pct_)*/0
  , /*decltype(_impl_.total_physical_damage_reduction_pct_)*/0
  , /*decltype(_impl_.base_ability_damage_reduction_pct_)*/0
  , /*decltype(_impl_.total_ability_damage_reduction_pct_)*/0
  , /*decltype(_impl_.ability_damage_block_)*/0
  , /*decltype(_impl_.physical_damage_block_)*/0
  , /*decltype(_impl_.mana_regen_)*/0u
  , /*decltype(_impl_.health_regen_)*/0u
  , /*decltype(_impl_.physical_magic_dmg_pct_)*/0
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.assists_)*/0u
  , /*decltype(_impl_.gold_from_kills_)*/0u
  , /*decltype(_impl_.gold_from_creeps_)*/0u
  , /*decltype(_impl_.gold_shared_)*/0u
  , /*decltype(_impl_.xp_from_kills_)*/0u
  , /*decltype(_impl_.xp_from_creeps_)*/0u
  , /*decltype(_impl_.total_xp_)*/0u
  , /*decltype(_impl_.ability_casts_)*/0u
  , /*decltype(_impl_.item_casts_)*/0u
  , /*decltype(_impl_.total_time_stunned_)*/0
  , /*decltype(_impl_.item_count_)*/0u} {}
struct CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_PlayerStatEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDetailedGameStats_PlayerStatEntryDefaultTypeInternal _CMsgDetailedGameStats_PlayerStatEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tower_death_time_t1_)*/0u
  , /*decltype(_impl_.tower_death_time_t2_)*/0u
  , /*decltype(_impl_.tower_death_time_t3_)*/0u} {}
struct CMsgDetailedGameStats_GameStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDetailedGameStats_GameStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_GameStatsDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_GameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDetailedGameStats_GameStatsDefaultTypeInternal _CMsgDetailedGameStats_GameStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.minute_)*/0u} {}
struct CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_MinuteEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDetailedGameStats_MinuteEntryDefaultTypeInternal _CMsgDetailedGameStats_MinuteEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.player_slot_)*/0u} {}
struct CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats_PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDetailedGameStats_PlayerInfoDefaultTypeInternal _CMsgDetailedGameStats_PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgDetailedGameStats::CMsgDetailedGameStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.minutes_)*/{}
  , /*decltype(_impl_.player_info_)*/{}
  , /*decltype(_impl_.game_stats_)*/nullptr} {}
struct CMsgDetailedGameStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDetailedGameStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDetailedGameStatsDefaultTypeInternal() {}
  union {
    CMsgDetailedGameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDetailedGameStatsDefaultTypeInternal _CMsgDetailedGameStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_dropped_)*/0u
  , /*decltype(_impl_.team_)*/0u
  , /*decltype(_impl_.time_last_equipped_)*/0u
  , /*decltype(_impl_.time_last_unequipped_)*/0u
  , /*decltype(_impl_.duration_equipped_)*/0u
  , /*decltype(_impl_.item_id_)*/-1} {}
struct CMsgNeutralItemStats_NeutralItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgNeutralItemStats_NeutralItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgNeutralItemStats_NeutralItemDefaultTypeInternal() {}
  union {
    CMsgNeutralItemStats_NeutralItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgNeutralItemStats_NeutralItemDefaultTypeInternal _CMsgNeutralItemStats_NeutralItem_default_instance_;
PROTOBUF_CONSTEXPR CMsgNeutralItemStats::CMsgNeutralItemStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.neutral_items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgNeutralItemStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgNeutralItemStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgNeutralItemStatsDefaultTypeInternal() {}
  union {
    CMsgNeutralItemStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgNeutralItemStatsDefaultTypeInternal _CMsgNeutralItemStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.ban_count_)*/0u
  , /*decltype(_impl_.pick_count_)*/0u} {}
struct CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal() {}
  union {
    CMsgGCToServerLobbyHeroBanRates_HeroBanEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerLobbyHeroBanRates_HeroBanEntryDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ban_data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal() {}
  union {
    CMsgGCToServerLobbyHeroBanRates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerLobbyHeroBanRatesDefaultTypeInternal _CMsgGCToServerLobbyHeroBanRates_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contracts_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0u} {}
struct CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress_CompletedGuildEventContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGuildContractProgress_CompletedGuildEventContractsDefaultTypeInternal _CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.completed_contracts_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress_PlayerContract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGuildContractProgress_PlayerContractDefaultTypeInternal _CMsgSignOutGuildContractProgress_PlayerContract_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_contracts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSignOutGuildContractProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGuildContractProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGuildContractProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildContractProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGuildContractProgressDefaultTypeInternal _CMsgSignOutGuildContractProgress_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0u
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_instance_timestamp_)*/0u
  , /*decltype(_impl_.challenge_period_serial_)*/0u
  , /*decltype(_impl_.progress_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u} {}
struct CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildChallengeProgress_ChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGuildChallengeProgress_ChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.guild_challenges_progresses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSignOutGuildChallengeProgressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutGuildChallengeProgressDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutGuildChallengeProgressDefaultTypeInternal() {}
  union {
    CMsgSignOutGuildChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutGuildChallengeProgressDefaultTypeInternal _CMsgSignOutGuildChallengeProgress_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_type_)*/0u
  , /*decltype(_impl_.amount_)*/0u} {}
struct CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats_Player_KillEaterEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMVPStats_Player_KillEaterEventDefaultTypeInternal _CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kill_eater_events_)*/{}
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.team_networth_rank_)*/0u
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.role_)*/0u
  , /*decltype(_impl_.kills_)*/0
  , /*decltype(_impl_.deaths_)*/0
  , /*decltype(_impl_.assists_)*/0
  , /*decltype(_impl_.xp_)*/0
  , /*decltype(_impl_.net_worth_)*/0
  , /*decltype(_impl_.support_gold_spent_)*/0
  , /*decltype(_impl_.wards_placed_)*/0
  , /*decltype(_impl_.wards_spotted_for_dewarding_)*/0
  , /*decltype(_impl_.camps_stacked_)*/0
  , /*decltype(_impl_.last_hits_)*/0
  , /*decltype(_impl_.denies_)*/0
  , /*decltype(_impl_.building_damage_)*/0
  , /*decltype(_impl_.other_damage_)*/0
  , /*decltype(_impl_.triple_kills_)*/0
  , /*decltype(_impl_.rampages_)*/0
  , /*decltype(_impl_.first_blood_)*/0
  , /*decltype(_impl_.player_slot_)*/0u
  , /*decltype(_impl_.rank_)*/0u
  , /*decltype(_impl_.highest_killstreak_)*/0u} {}
struct CMsgSignOutMVPStats_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMVPStats_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMVPStats_PlayerDefaultTypeInternal _CMsgSignOutMVPStats_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMVPStats::CMsgSignOutMVPStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.winning_team_)*/0u
  , /*decltype(_impl_.game_time_)*/0} {}
struct CMsgSignOutMVPStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMVPStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMVPStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutMVPStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMVPStatsDefaultTypeInternal _CMsgSignOutMVPStats_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_)*/false} {}
struct CMsgGCToServerRecordTrainingDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerRecordTrainingDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerRecordTrainingDataDefaultTypeInternal() {}
  union {
    CMsgGCToServerRecordTrainingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerRecordTrainingDataDefaultTypeInternal _CMsgGCToServerRecordTrainingData_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCGetGuildContractsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContracts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetGuildContractsDefaultTypeInternal _CMsgServerToGCGetGuildContracts_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contract_id_)*/uint64_t{0u}
  , /*decltype(_impl_.challenge_instance_id_)*/0u
  , /*decltype(_impl_.challenge_parameter_)*/0u
  , /*decltype(_impl_.contract_stars_)*/0u
  , /*decltype(_impl_.contract_slot_)*/0u} {}
struct CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse_ContractDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetGuildContractsResponse_ContractDetailsDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.contracts_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.guild_id_)*/0u
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetGuildContractsResponse_PlayerDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_contracts_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetGuildContractsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetGuildContractsResponseDefaultTypeInternal _CMsgServerToGCGetGuildContractsResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.amount_)*/0u
  , /*decltype(_impl_.audit_)*/0u} {}
struct CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy_CandyDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchDiretideCandy_CandyDetailsDefaultTypeInternal _CMsgMatchDiretideCandy_CandyDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.candy_breakdown_)*/{}
  , /*decltype(_impl_.account_id_)*/0u
  , /*decltype(_impl_.candy_amount_)*/0u
  , /*decltype(_impl_.consumes_periodic_resource_)*/false} {}
struct CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy_PlayerCandy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchDiretideCandy_PlayerCandyDefaultTypeInternal _CMsgMatchDiretideCandy_PlayerCandy_default_instance_;
PROTOBUF_CONSTEXPR CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_candy_data_)*/{}
  , /*decltype(_impl_.event_id_)*/0} {}
struct CMsgMatchDiretideCandyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgMatchDiretideCandyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgMatchDiretideCandyDefaultTypeInternal() {}
  union {
    CMsgMatchDiretideCandy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgMatchDiretideCandyDefaultTypeInternal _CMsgMatchDiretideCandy_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_type_)*/0u
  , /*decltype(_impl_.cheer_count_)*/0u} {}
struct CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerData_CheerTypeCount _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerCheerData_CheerTypeCountDefaultTypeInternal _CMsgGCToServerCheerData_CheerTypeCount_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerCheerData::CMsgGCToServerCheerData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cheer_types_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToServerCheerDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerCheerDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerDataDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerCheerDataDefaultTypeInternal _CMsgGCToServerCheerData_default_instance_;
PROTOBUF_CONSTEXPR CMsgCheerConfig::CMsgCheerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheers_enabled_)*/false
  , /*decltype(_impl_.is_valid_league_id_)*/false
  , /*decltype(_impl_.window_duration_)*/0
  , /*decltype(_impl_.window_bucket_count_)*/0u
  , /*decltype(_impl_.crowd_level_push_time_)*/0
  , /*decltype(_impl_.crowd_level_low_)*/0u
  , /*decltype(_impl_.crowd_level_medium_)*/0u
  , /*decltype(_impl_.crowd_level_high_)*/0u
  , /*decltype(_impl_.cheer_scale_start_)*/0
  , /*decltype(_impl_.cheer_scale_speed_)*/0
  , /*decltype(_impl_.cheer_scale_push_mark_)*/0u
  , /*decltype(_impl_.cheer_scale_pull_mark_)*/0u
  , /*decltype(_impl_.cheer_scale_pct_of_max_cps_clamp_)*/0
  , /*decltype(_impl_.cheer_factor_bronze_)*/0
  , /*decltype(_impl_.cheer_factor_silver_)*/0
  , /*decltype(_impl_.cheer_factor_gold_)*/0
  , /*decltype(_impl_.cheer_scale_dampener_value_)*/0
  , /*decltype(_impl_.cheer_scale_dampener_lerp_time_)*/0u} {}
struct CMsgCheerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCheerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCheerConfigDefaultTypeInternal() {}
  union {
    CMsgCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCheerConfigDefaultTypeInternal _CMsgCheerConfig_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_config_)*/nullptr} {}
struct CMsgGCToServerCheerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerCheerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerConfigDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerCheerConfigDefaultTypeInternal _CMsgGCToServerCheerConfig_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.league_id_)*/0u} {}
struct CMsgServerToGCGetCheerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetCheerConfigDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetCheerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetCheerConfigDefaultTypeInternal _CMsgServerToGCGetCheerConfig_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_config_)*/nullptr} {}
struct CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetCheerConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetCheerConfigResponseDefaultTypeInternal _CMsgServerToGCGetCheerConfigResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scales_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgGCToServerCheerScalesOverrideDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerCheerScalesOverrideDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerCheerScalesOverrideDefaultTypeInternal() {}
  union {
    CMsgGCToServerCheerScalesOverride _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerCheerScalesOverrideDefaultTypeInternal _CMsgGCToServerCheerScalesOverride_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToServerGetCheerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerGetCheerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerGetCheerStateDefaultTypeInternal() {}
  union {
    CMsgGCToServerGetCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerGetCheerStateDefaultTypeInternal _CMsgGCToServerGetCheerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgCheerTypeState::CMsgCheerTypeState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_counts_)*/{}
  , /*decltype(_impl_.max_per_second_)*/0
  , /*decltype(_impl_.cheer_scale_)*/0
  , /*decltype(_impl_.override_scale_)*/0} {}
struct CMsgCheerTypeStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCheerTypeStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCheerTypeStateDefaultTypeInternal() {}
  union {
    CMsgCheerTypeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCheerTypeStateDefaultTypeInternal _CMsgCheerTypeState_default_instance_;
PROTOBUF_CONSTEXPR CMsgCheerState::CMsgCheerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_types_)*/{}
  , /*decltype(_impl_.radiant_crowd_level_)*/0u
  , /*decltype(_impl_.dire_crowd_level_)*/0u} {}
struct CMsgCheerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCheerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCheerStateDefaultTypeInternal() {}
  union {
    CMsgCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCheerStateDefaultTypeInternal _CMsgCheerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cheer_config_)*/nullptr
  , /*decltype(_impl_.cheer_state_)*/nullptr} {}
struct CMsgServerToGCReportCheerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCReportCheerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCReportCheerStateDefaultTypeInternal() {}
  union {
    CMsgServerToGCReportCheerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCReportCheerStateDefaultTypeInternal _CMsgServerToGCReportCheerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroes::CMsgServerToGCGetStickerHeroes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_ids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCGetStickerHeroesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetStickerHeroesDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetStickerHeroes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetStickerHeroesDefaultTypeInternal _CMsgServerToGCGetStickerHeroes_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponse_Player::CMsgServerToGCGetStickerHeroesResponse_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stickers_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetStickerHeroesResponse_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetStickerHeroesResponse_PlayerDefaultTypeInternal _CMsgServerToGCGetStickerHeroesResponse_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponse::CMsgServerToGCGetStickerHeroesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCGetStickerHeroesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgServerToGCGetStickerHeroesResponseDefaultTypeInternal _CMsgServerToGCGetStickerHeroesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnInferencing::CMsgGCToServerSetSteamLearnInferencing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_)*/false} {}
struct CMsgGCToServerSetSteamLearnInferencingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnInferencingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerSetSteamLearnInferencingDefaultTypeInternal() {}
  union {
    CMsgGCToServerSetSteamLearnInferencing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerSetSteamLearnInferencingDefaultTypeInternal _CMsgGCToServerSetSteamLearnInferencing_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnKeysChanged::CMsgGCToServerSetSteamLearnKeysChanged(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.keys_)*/nullptr} {}
struct CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal() {}
  union {
    CMsgGCToServerSetSteamLearnKeysChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToServerSetSteamLearnKeysChangedDefaultTypeInternal _CMsgGCToServerSetSteamLearnKeysChanged_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchInfo::CMsgSteamLearnMatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_mmr_)*/0u
  , /*decltype(_impl_.radiant_won_)*/false
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.lobby_type_)*/0u} {}
struct CMsgSteamLearnMatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchInfoDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchInfoDefaultTypeInternal _CMsgSteamLearnMatchInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchInfoPlayer::CMsgSteamLearnMatchInfoPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.average_mmr_)*/0u
  , /*decltype(_impl_.team_won_)*/false
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.lobby_type_)*/0u} {}
struct CMsgSteamLearnMatchInfoPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchInfoPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchInfoPlayerDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchInfoPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchInfoPlayerDefaultTypeInternal _CMsgSteamLearnMatchInfoPlayer_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHeroes::CMsgSteamLearnMatchHeroes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.radiant_hero_ids_)*/{}
  , /*decltype(_impl_.dire_hero_ids_)*/{}
  , /*decltype(_impl_.radiant_lanes_)*/{}
  , /*decltype(_impl_.dire_lanes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSteamLearnMatchHeroesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHeroesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchHeroesDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchHeroes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchHeroesDefaultTypeInternal _CMsgSteamLearnMatchHeroes_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHero::CMsgSteamLearnMatchHero(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.allied_hero_ids_)*/{}
  , /*decltype(_impl_.enemy_hero_ids_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.lane_)*/0u} {}
struct CMsgSteamLearnMatchHeroDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchHeroDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchHeroDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchHeroDefaultTypeInternal _CMsgSteamLearnMatchHero_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_PlayerState::CMsgSteamLearnMatchState_PlayerState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hero_id_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.deaths_)*/0u
  , /*decltype(_impl_.respawn_time_)*/0u
  , /*decltype(_impl_.has_buyback_)*/false
  , /*decltype(_impl_.has_aegis_)*/false
  , /*decltype(_impl_.has_rapier_)*/false
  , /*decltype(_impl_.distance_)*/0u} {}
struct CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchState_PlayerState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchState_PlayerStateDefaultTypeInternal _CMsgSteamLearnMatchState_PlayerState_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_TeamState::CMsgSteamLearnMatchState_TeamState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_states_)*/{}
  , /*decltype(_impl_.tower_health_pct_)*/{}
  , /*decltype(_impl_.barracks_health_pct_)*/{}
  , /*decltype(_impl_.team_)*/0u
  , /*decltype(_impl_.ancient_health_pct_)*/0u
  , /*decltype(_impl_.glyph_cooldown_)*/0u
  , /*decltype(_impl_.kills_)*/0u
  , /*decltype(_impl_.creep_distance_safe_)*/0u
  , /*decltype(_impl_.creep_distance_mid_)*/0u
  , /*decltype(_impl_.creep_distance_off_)*/0u} {}
struct CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchState_TeamState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchState_TeamStateDefaultTypeInternal _CMsgSteamLearnMatchState_TeamState_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnMatchState::CMsgSteamLearnMatchState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.radiant_state_)*/nullptr
  , /*decltype(_impl_.dire_state_)*/nullptr
  , /*decltype(_impl_.game_time_)*/0} {}
struct CMsgSteamLearnMatchStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnMatchStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnMatchStateDefaultTypeInternal() {}
  union {
    CMsgSteamLearnMatchState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnMatchStateDefaultTypeInternal _CMsgSteamLearnMatchState_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnItemPurchase::CMsgSteamLearnItemPurchase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.inventory_items_)*/{}
  , /*decltype(_impl_.purchase_history_)*/{}
  , /*decltype(_impl_.gold_)*/0u
  , /*decltype(_impl_.net_worth_)*/0u
  , /*decltype(_impl_.is_radiant_team_)*/0u
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.is_using_dota_plus_)*/false
  , /*decltype(_impl_.item_id_)*/-1} {}
struct CMsgSteamLearnItemPurchaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnItemPurchaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnItemPurchaseDefaultTypeInternal() {}
  union {
    CMsgSteamLearnItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnItemPurchaseDefaultTypeInternal _CMsgSteamLearnItemPurchase_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnPreGameItemPurchases::CMsgSteamLearnPreGameItemPurchases(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.item_ids_)*/{}
  , /*decltype(_impl_.is_radiant_team_)*/0u
  , /*decltype(_impl_.is_using_dota_plus_)*/false} {}
struct CMsgSteamLearnPreGameItemPurchasesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnPreGameItemPurchasesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnPreGameItemPurchasesDefaultTypeInternal() {}
  union {
    CMsgSteamLearnPreGameItemPurchases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnPreGameItemPurchasesDefaultTypeInternal _CMsgSteamLearnPreGameItemPurchases_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnNeutralItemPurchase::CMsgSteamLearnNeutralItemPurchase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tier_)*/0u
  , /*decltype(_impl_.is_radiant_team_)*/0u
  , /*decltype(_impl_.is_using_dota_plus_)*/false
  , /*decltype(_impl_.item_id_)*/-1} {}
struct CMsgSteamLearnNeutralItemPurchaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnNeutralItemPurchaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnNeutralItemPurchaseDefaultTypeInternal() {}
  union {
    CMsgSteamLearnNeutralItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnNeutralItemPurchaseDefaultTypeInternal _CMsgSteamLearnNeutralItemPurchase_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnAbilitySkill::CMsgSteamLearnAbilitySkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.skilled_abilities_)*/{}
  , /*decltype(_impl_.game_time_)*/0
  , /*decltype(_impl_.is_using_dota_plus_)*/false
  , /*decltype(_impl_.ability_id_)*/-1} {}
struct CMsgSteamLearnAbilitySkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnAbilitySkillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnAbilitySkillDefaultTypeInternal() {}
  union {
    CMsgSteamLearnAbilitySkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnAbilitySkillDefaultTypeInternal _CMsgSteamLearnAbilitySkill_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnWardPlacement_Location::CMsgSteamLearnWardPlacement_Location(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct CMsgSteamLearnWardPlacement_LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnWardPlacement_LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnWardPlacement_LocationDefaultTypeInternal() {}
  union {
    CMsgSteamLearnWardPlacement_Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnWardPlacement_LocationDefaultTypeInternal _CMsgSteamLearnWardPlacement_Location_default_instance_;
PROTOBUF_CONSTEXPR CMsgSteamLearnWardPlacement::CMsgSteamLearnWardPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.existing_ward_locs_)*/{}
  , /*decltype(_impl_.ward_loc_)*/nullptr
  , /*decltype(_impl_.team_)*/0u} {}
struct CMsgSteamLearnWardPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamLearnWardPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamLearnWardPlacementDefaultTypeInternal() {}
  union {
    CMsgSteamLearnWardPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamLearnWardPlacementDefaultTypeInternal _CMsgSteamLearnWardPlacement_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMuertaMinigame::CMsgSignOutMuertaMinigame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.event_game_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgSignOutMuertaMinigameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMuertaMinigameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMuertaMinigameDefaultTypeInternal() {}
  union {
    CMsgSignOutMuertaMinigame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMuertaMinigameDefaultTypeInternal _CMsgSignOutMuertaMinigame_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMapStats_Player::CMsgSignOutMapStats_Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.personal_stats_)*/nullptr
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgSignOutMapStats_PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMapStats_PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMapStats_PlayerDefaultTypeInternal() {}
  union {
    CMsgSignOutMapStats_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMapStats_PlayerDefaultTypeInternal _CMsgSignOutMapStats_Player_default_instance_;
PROTOBUF_CONSTEXPR CMsgSignOutMapStats::CMsgSignOutMapStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.global_stats_)*/nullptr} {}
struct CMsgSignOutMapStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSignOutMapStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSignOutMapStatsDefaultTypeInternal() {}
  union {
    CMsgSignOutMapStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSignOutMapStatsDefaultTypeInternal _CMsgSignOutMapStats_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fserver_2eproto[183];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _impl_.disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _impl_.num_bad_intervals_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions_Player, _impl_.peak_loss_pct_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _impl_.detection_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPoorNetworkConditions, _impl_.players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.sentinel_save_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.pid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameserverCrash, _impl_.engine_),
  0,
  1,
  2,
  3,
  9,
  11,
  4,
  5,
  6,
  7,
  8,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _impl_.leaver_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_Player, _impl_.disconnect_reason_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_PlayerDraft, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_PlayerDraft, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_PlayerDraft, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_PlayerDraft, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers_PlayerDraft, _impl_.team_slot_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.connected_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.disconnected_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.first_blood_happened_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.send_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.radiant_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.dire_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.building_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgConnectedPlayers, _impl_.player_draft_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_public_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_private_ip_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.assigned_server_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.legacy_server_steamdatagram_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_hibernation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_loadavg_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_tv_broadcast_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_relay_connected_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.relay_slots_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.relays_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.relay_clients_connected_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.relayed_game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.parent_relay_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.tv_secret_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.allow_custom_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.build_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.tf_server_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.srcds_instance_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.dev_force_server_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerInfo, _impl_.is_recording_match_training_data_),
  2,
  3,
  4,
  5,
  23,
  1,
  0,
  20,
  6,
  7,
  8,
  9,
  11,
  10,
  12,
  13,
  14,
  15,
  17,
  16,
  18,
  19,
  24,
  25,
  26,
  27,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.leaver_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.server_cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.disconnect_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetected, _impl_.poor_network_conditions_),
  2,
  3,
  0,
  4,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLeaverDetectedResponse, _impl_.result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyFinalPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyFinalPlayerStats, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLivePlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyLivePlayerStats, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRealtimeStats, _impl_.delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRealtimeStatsStartStop, _impl_.delayed_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerUpdateSteamBroadcasting, _impl_.active_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CPlayer, _impl_.timed_player_stats_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _impl_.is_winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _impl_.is_radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _impl_.timed_team_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats_CTeam, _impl_.players_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGameplayStats, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _impl_.dota_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _impl_.winner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_.pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_.post_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_.damage_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.item_purchase_times_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.xp_per_minute_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.scaled_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.scaled_tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.scaled_hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.time_last_seen_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.support_ability_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.claimed_farm_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.support_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.claimed_denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.claimed_misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.additional_units_inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.permanent_buffs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.match_player_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.talent_ability_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_pick_order_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_was_randomed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_was_dota_plus_suggestion_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.is_using_plus_guide_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_damage_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.hero_damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.gold_lost_to_death_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.command_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.mouse_click_cast_command_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.teleports_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.cavern_crawl_preferred_map_variant_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.outposts_captured_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.dewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.predicted_position_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.lane_outcomes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.friendly_t1_destroyed_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.enemy_t1_destroyed_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.friendly_roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.enemy_roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.power_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.water_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.team_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.team_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.time_purchased_shard_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.time_purchased_aghs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.ability_draft_abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.player_tracked_stats_),
  1,
  2,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  19,
  18,
  20,
  21,
  22,
  23,
  24,
  25,
  27,
  28,
  29,
  ~0u,
  ~0u,
  ~0u,
  0,
  26,
  ~0u,
  30,
  32,
  33,
  31,
  34,
  ~0u,
  ~0u,
  35,
  36,
  37,
  38,
  39,
  58,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  59,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CTeam, _impl_.team_tracked_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CAdditionalSignoutMsg, _impl_.contents_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.replay_time_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_CCustomGameData, _impl_.publish_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.name_suffix_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_4_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.placed_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.building_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.creep_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.roshan_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut_WardPlacement, _impl_.position_y_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.good_guys_win_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.tower_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.barracks_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.first_blood_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.event_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.picks_bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.fantasy_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.player_strange_count_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.automatic_surrender_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.poor_network_conditions_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.additional_msgs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.social_feed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.average_networth_delta_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.match_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.team_scores_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.pre_game_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.event_game_leaderboard_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.ward_placements_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.gameplay_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.extra_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.training_data_recorded_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.normalized_win_probability_diff_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOut, _impl_.match_tracked_stats_),
  4,
  5,
  12,
  6,
  ~0u,
  ~0u,
  ~0u,
  7,
  0,
  8,
  9,
  ~0u,
  ~0u,
  ~0u,
  13,
  10,
  1,
  ~0u,
  ~0u,
  11,
  2,
  15,
  ~0u,
  16,
  ~0u,
  ~0u,
  3,
  ~0u,
  14,
  17,
  18,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _impl_.radiant_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _impl_.dire_captain_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutDraftInfo, _impl_.picks_bans_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _impl_.allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _impl_.bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _impl_.created_lobby_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBotInfo, _impl_.bot_difficulty_dire_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_.caused_text_mute_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_.chat_message_),
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutTextMuteInfo, _impl_.text_mute_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.rampages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.first_blood_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.first_blood_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.aegises_snatched_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.cheeses_eaten_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.creeps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.fight_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.farm_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.support_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.push_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.xppm_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.heals_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.wards_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutPlayerStats, _impl_.lobby_type_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail, _impl_.count_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.max_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.teammate_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.max_teammate_pings_per_interval_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.team_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.all_chat_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.chat_wheel_messages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.pauses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.unpauses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.lines_drawn_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.voice_chat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.chat_mutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.voice_mutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.ping_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.comms_blocks_solo_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.comms_blocks_mass_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.chat_log_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  ~0u,
  14,
  15,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunicationSummary, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.win_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.games_played_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.replay_salt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.xp_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.leagueid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.metadata_private_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.match_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.players_metadata_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.mvp_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.ow_private_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.ow_salt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignoutResponse, _impl_.ow_replay_id_),
  2,
  3,
  ~0u,
  ~0u,
  4,
  5,
  0,
  ~0u,
  1,
  7,
  6,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgTimedRewardContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTimedRewardContainer, _impl_.timed_reward_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _impl_.server_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _impl_.local_attempt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _impl_.total_attempt_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionRequest, _impl_.seconds_waited_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _impl_.permission_granted_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _impl_.abandon_signout_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPermissionResponse, _impl_.retry_delay_seconds_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_.map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_.event_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutEventGameData, _impl_.start_time_),
  3,
  0,
  1,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.server_average_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.server_max_frame_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_compute_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_client_tick_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_client_simulate_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_output_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_wait_for_rendering_to_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_swap_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_frame_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_idle_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.average_input_processing_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutPerfData, _impl_.max_input_processing_time_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, _impl_.hero_bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameMatchSignOutBanData, _impl_.hero_ban_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility, _impl_.ability_level_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.hero_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.ultimate_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.ultimate_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item0_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item4_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.item5_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.abilities_),
  2,
  0,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  20,
  21,
  22,
  23,
  24,
  25,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.tower_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.barracks_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.hero_picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate_Team, _impl_.hero_bans_),
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.tournament_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.hltv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.team_good_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.team_bad_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.roshan_respawn_timer_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALiveScoreboardUpdate, _impl_.match_id_),
  2,
  3,
  4,
  5,
  0,
  1,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _impl_.rank_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResources, _impl_.lobby_type_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.rank_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.low_priority_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.is_new_player_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.is_guide_player_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.comm_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.behavior_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestBatchPlayerResourcesResponse, _impl_.results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, _impl_.failed_loaders_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPlayerFailedToConnect, _impl_.abandoned_loaders_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.game_server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.parent_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.tv_unique_secret_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToRelayConnect, _impl_.source_tv_steamid_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGCToLANServerRelayConnect, _impl_.relay_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusRequest, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _impl_.low_priority_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _impl_.text_chat_banned_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCBanStatusResponse, _impl_.voice_chat_banned_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.victim_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.dota_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.replay_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.loot_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.event_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.multi_kill_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.winner_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.loser_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEvent, _impl_.hero_statues_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgTournamentItemEventResponse, _impl_.viewers_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgTeamFanfare, _impl_.match_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _impl_.fanfare_goodguys_),
  PROTOBUF_FIELD_OFFSET(::CMsgResponseTeamFanfare, _impl_.fanfare_badguys_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _impl_.save_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerUploadSaveGame, _impl_.player_steam_ids_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerSaveGameResult, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGame, _impl_.save_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGameServerGetLoadGameResult, _impl_.save_game_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.premium_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.trade_ban_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.eligible_for_periodic_adjustment_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints_AwardPoints, _impl_.point_cap_periodic_resource_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_.award_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAAwardEventPoints, _impl_.audit_action_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingRequest, _impl_.request_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _impl_.request_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _impl_.request_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPingResponse, _impl_.cluster_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.avg_ping_ms_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.packet_loss_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.ping_deviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats_Player, _impl_.full_resends_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_.region_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchConnectionStats, _impl_.cluster_id_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerGCUpdateSpectatorCount, _impl_.spectator_count_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary_DictString, _impl_.value_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog_Dictionary, _impl_.strings_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _impl_.dictionary_),
  PROTOBUF_FIELD_OFFSET(::CSerializedCombatLog, _impl_.entries_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions_Record, _impl_.item_ids_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCVictoryPredictions, _impl_.records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestStatus_Response, _impl_.response_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerEvaluateToxicChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerEvaluateToxicChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerEvaluateToxicChat, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerEvaluateToxicChat, _impl_.reporter_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_.reporter_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChat, _impl_.line_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _impl_.target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _impl_.reporter_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _impl_.ban_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCEvaluateToxicChatResponse, _impl_.ban_duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.winning_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.losing_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.arcana_owners_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.assassin_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.target_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.contract_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.contract_complete_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutAssassinMiniGameInfo, _impl_.pa_is_radiant_),
  ~0u,
  ~0u,
  ~0u,
  1,
  0,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _impl_.killer_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _impl_.victim_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries_KillSummary, _impl_.kill_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _impl_.ingameevent_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCKillSummaries, _impl_.summaries_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_.item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_.num_correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_.num_fails_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult_Prediction, _impl_.granted_item_defs_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _impl_.correct_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerPredictionResult, _impl_.predictions_),
  1,
  0,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCLockCharmTrading, _impl_.item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.sequence_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.challenge_rank_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_.completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_.rerolled_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutUpdatePlayerChallenge, _impl_.hero_id_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRerollPlayerChallenge, _impl_.reroll_msg_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _impl_.wager_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager_Player, _impl_.wager_token_item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpendWager, _impl_.server_steam_id_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.xp_gained_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.coins_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.wager_token_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.rank_wager_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins_Player, _impl_.wager_streak_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutXPCoins, _impl_.timestamp_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _impl_.issuer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _impl_.completer_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties_Bounty, _impl_.target_account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _impl_.bounties_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutBounties, _impl_.timestamp_),
  ~0u,
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _impl_.event_goal_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _impl_.increment_amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutCommunityGoalProgress, _impl_.event_increments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_.hltv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_.league_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_.prediction_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_.prediction_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_.prediction_value_is_mask_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumInGamePredictionResults, _impl_.league_node_id_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction, _impl_.prediction_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _impl_.predictions_chosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCompendiumChosenInGamePredictions, _impl_.league_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCCompendiumInGamePredictionResults, _impl_.results_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.inventory_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.talents_skilled_),
  3,
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.item_purchases_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.is_winner_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_.players_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_.inventory_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_.talents_skilled_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip, _impl_.available_neutral_items_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.item_equips_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.is_winner_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory, _impl_.players_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.has_buyback_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.has_aegis_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.has_rapier_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_PlayerState, _impl_.distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.player_states_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.tower_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.barracks_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.ancient_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.creep_distance_safe_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.creep_distance_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_TeamState, _impl_.creep_distance_off_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _impl_.radiant_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory_MatchState, _impl_.dire_state_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _impl_.radiant_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCMatchStateHistory, _impl_.match_states_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _impl_.match_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchStateSteamMLEntry, _impl_.radiant_won_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, _impl_.hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgLaneSelectionSteamMLEntry, _impl_.lanes_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgAbilitySelectionSteamMLEntry, _impl_.selected_ability_),
  0,
  1,
  ~0u,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchasePregameSteamMLEntry, _impl_.items_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSteamMLEntry, _impl_.items_to_be_purchased_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.enemy_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::CMsgItemPurchaseSequenceSteamMLEntry, _impl_.item_to_be_purchased_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_.preferred_map_variant_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActive, _impl_.turbo_mode_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.challenge_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.challenge_id1_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.challenge_id2_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.progress_value_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.progress_value_end_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.team_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.audit_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.rank_completed_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _impl_.average_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCPlayerChallengeHistory, _impl_.challenge_records_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _impl_.path_id_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults, _impl_.room_id_claimed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.map_variant_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.potential_winnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.map_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.potential_plus_shard_winnings_),
  0,
  3,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoServerTensorflowInstance, _impl_.server_instance_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_earned_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_networth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_dps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.average_dps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.ability_damage_output_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.base_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_mana_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.base_physical_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_physical_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.base_ability_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_ability_damage_reduction_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.ability_damage_block_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.physical_damage_block_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.mana_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.health_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.physical_magic_dmg_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.gold_from_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.gold_from_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.gold_shared_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.xp_from_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.xp_from_creeps_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.ability_casts_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.item_casts_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_time_stunned_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerStatEntry, _impl_.item_count_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _impl_.tower_death_time_t1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _impl_.tower_death_time_t2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_GameStats, _impl_.tower_death_time_t3_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _impl_.minute_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_MinuteEntry, _impl_.stats_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats_PlayerInfo, _impl_.player_slot_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _impl_.minutes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _impl_.player_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgDetailedGameStats, _impl_.game_stats_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.time_dropped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.time_last_equipped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.time_last_unequipped_),
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats_NeutralItem, _impl_.duration_equipped_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNeutralItemStats, _impl_.neutral_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_.ban_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_.pick_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerLobbyHeroBanRates, _impl_.ban_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_.contracts_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress_PlayerContract, _impl_.completed_contracts_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildContractProgress, _impl_.player_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.challenge_instance_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.challenge_period_serial_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.progress_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.challenge_parameter_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutGuildChallengeProgress, _impl_.guild_challenges_progresses_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _impl_.event_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player_KillEaterEvent, _impl_.amount_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.team_networth_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.role_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.wards_spotted_for_dewarding_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.building_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.other_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.rampages_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.first_blood_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.kill_eater_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats_Player, _impl_.highest_killstreak_),
  0,
  1,
  2,
  21,
  22,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  ~0u,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_.winning_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMVPStats, _impl_.players_),
  0,
  1,
  2,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerRecordTrainingData, _impl_.enable_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContracts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContracts, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.contract_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.contract_stars_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.contract_slot_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _impl_.guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _impl_.event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse_Player, _impl_.contracts_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetGuildContractsResponse, _impl_.player_contracts_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _impl_.amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_CandyDetails, _impl_.audit_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _impl_.candy_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _impl_.consumes_periodic_resource_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy_PlayerCandy, _impl_.candy_breakdown_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _impl_.player_candy_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchDiretideCandy, _impl_.event_id_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _impl_.cheer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData_CheerTypeCount, _impl_.cheer_count_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerData, _impl_.cheer_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheers_enabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.is_valid_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.window_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.window_bucket_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.crowd_level_push_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.crowd_level_low_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.crowd_level_medium_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.crowd_level_high_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_push_mark_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_pull_mark_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_pct_of_max_cps_clamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_dampener_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_scale_dampener_lerp_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_factor_bronze_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_factor_silver_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerConfig, _impl_.cheer_factor_gold_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  16,
  17,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerConfig, _impl_.cheer_config_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfig, _impl_.league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetCheerConfigResponse, _impl_.cheer_config_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerScalesOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerCheerScalesOverride, _impl_.scales_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerGetCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _impl_.cheer_counts_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _impl_.max_per_second_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _impl_.cheer_scale_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerTypeState, _impl_.override_scale_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _impl_.cheer_types_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _impl_.radiant_crowd_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgCheerState, _impl_.dire_crowd_level_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _impl_.cheer_config_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCReportCheerState, _impl_.cheer_state_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroes, _impl_.account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse_Player, _impl_.stickers_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCGetStickerHeroesResponse, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnInferencing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnInferencing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnInferencing, _impl_.enable_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnKeysChanged, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnKeysChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToServerSetSteamLearnKeysChanged, _impl_.keys_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_.average_mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_.radiant_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfo, _impl_.lobby_type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_.average_mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_.team_won_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchInfoPlayer, _impl_.lobby_type_),
  0,
  1,
  2,
  3,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHeroes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHeroes, _impl_.radiant_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHeroes, _impl_.dire_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHeroes, _impl_.radiant_lanes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHeroes, _impl_.dire_lanes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _impl_.lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _impl_.allied_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchHero, _impl_.enemy_hero_ids_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.has_buyback_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.has_aegis_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.has_rapier_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_PlayerState, _impl_.distance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.player_states_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.tower_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.barracks_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.ancient_health_pct_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.creep_distance_safe_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.creep_distance_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState_TeamState, _impl_.creep_distance_off_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState, _impl_.radiant_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnMatchState, _impl_.dire_state_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.inventory_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.purchase_history_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.is_radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnItemPurchase, _impl_.is_using_dota_plus_),
  5,
  ~0u,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnPreGameItemPurchases, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnPreGameItemPurchases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnPreGameItemPurchases, _impl_.item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnPreGameItemPurchases, _impl_.is_radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnPreGameItemPurchases, _impl_.is_using_dota_plus_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _impl_.tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _impl_.is_radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnNeutralItemPurchase, _impl_.is_using_dota_plus_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _impl_.skilled_abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _impl_.game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnAbilitySkill, _impl_.is_using_dota_plus_),
  2,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement_Location, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement_Location, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement_Location, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement, _impl_.ward_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement, _impl_.existing_ward_locs_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamLearnWardPlacement, _impl_.team_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMuertaMinigame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMuertaMinigame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMuertaMinigame, _impl_.event_game_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats_Player, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats_Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats_Player, _impl_.personal_stats_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgSignOutMapStats, _impl_.global_stats_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::CMsgPoorNetworkConditions_Player)},
  { 14, 22, -1, sizeof(::CMsgPoorNetworkConditions)},
  { 24, 42, -1, sizeof(::CMsgGameserverCrash)},
  { 54, 64, -1, sizeof(::CMsgConnectedPlayers_Player)},
  { 68, 77, -1, sizeof(::CMsgConnectedPlayers_PlayerDraft)},
  { 80, 97, -1, sizeof(::CMsgConnectedPlayers)},
  { 108, 142, -1, sizeof(::CMsgGameServerInfo)},
  { 170, 182, -1, sizeof(::CMsgLeaverDetected)},
  { 188, 195, -1, sizeof(::CMsgLeaverDetectedResponse)},
  { 196, -1, -1, sizeof(::CMsgDOTAFantasyFinalPlayerStats)},
  { 203, -1, -1, sizeof(::CMsgDOTAFantasyLivePlayerStats)},
  { 210, 217, -1, sizeof(::CMsgServerToGCRealtimeStats)},
  { 218, 225, -1, sizeof(::CMsgGCToServerRealtimeStatsStartStop)},
  { 226, 233, -1, sizeof(::CMsgGCToServerUpdateSteamBroadcasting)},
  { 234, 244, -1, sizeof(::CMsgSignOutGameplayStats_CPlayer)},
  { 248, 258, -1, sizeof(::CMsgSignOutGameplayStats_CTeam)},
  { 262, -1, -1, sizeof(::CMsgSignOutGameplayStats)},
  { 269, 277, -1, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData)},
  { 279, 288, -1, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived)},
  { 291, 367, -1, sizeof(::CMsgGameMatchSignOut_CTeam_CPlayer)},
  { 437, -1, -1, sizeof(::CMsgGameMatchSignOut_CTeam)},
  { 445, 453, -1, sizeof(::CMsgGameMatchSignOut_CAdditionalSignoutMsg)},
  { 455, 466, -1, sizeof(::CMsgGameMatchSignOut_CSocialFeedMatchEvent)},
  { 471, 478, -1, sizeof(::CMsgGameMatchSignOut_CCustomGameData)},
  { 479, 492, -1, sizeof(::CMsgGameMatchSignOut_EventGameLeaderboardEntry)},
  { 499, 513, -1, sizeof(::CMsgGameMatchSignOut_WardPlacement)},
  { 521, 559, -1, sizeof(::CMsgGameMatchSignOut)},
  { 591, 600, -1, sizeof(::CMsgSignOutDraftInfo)},
  { 603, 613, -1, sizeof(::CMsgSignOutBotInfo)},
  { 617, 626, -1, sizeof(::CMsgSignOutTextMuteInfo_TextMuteMessage)},
  { 629, -1, -1, sizeof(::CMsgSignOutTextMuteInfo)},
  { 636, 672, -1, sizeof(::CMsgSignOutPlayerStats)},
  { 702, 710, -1, sizeof(::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail)},
  { 712, 736, -1, sizeof(::CMsgSignOutCommunicationSummary_PlayerCommunication)},
  { 754, -1, -1, sizeof(::CMsgSignOutCommunicationSummary)},
  { 761, 780, -1, sizeof(::CMsgGameMatchSignoutResponse_PlayerMetadata)},
  { 793, 811, -1, sizeof(::CMsgGameMatchSignoutResponse)},
  { 823, -1, -1, sizeof(::CMsgTimedRewardContainer)},
  { 830, 840, -1, sizeof(::CMsgGameMatchSignOutPermissionRequest)},
  { 844, 853, -1, sizeof(::CMsgGameMatchSignOutPermissionResponse)},
  { 856, 867, -1, sizeof(::CMsgGameMatchSignOutEventGameData)},
  { 872, 900, -1, sizeof(::CMsgGameMatchSignOutPerfData)},
  { 922, -1, -1, sizeof(::CMsgGameMatchSignOutBanData)},
  { 930, 938, -1, sizeof(::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility)},
  { 940, 973, -1, sizeof(::CMsgDOTALiveScoreboardUpdate_Team_Player)},
  { 1000, 1012, -1, sizeof(::CMsgDOTALiveScoreboardUpdate_Team)},
  { 1018, 1033, -1, sizeof(::CMsgDOTALiveScoreboardUpdate)},
  { 1042, 1051, -1, sizeof(::CMsgServerToGCRequestBatchPlayerResources)},
  { 1054, 1068, -1, sizeof(::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result)},
  { 1076, -1, -1, sizeof(::CMsgServerToGCRequestBatchPlayerResourcesResponse)},
  { 1083, -1, -1, sizeof(::CMsgDOTAPlayerFailedToConnect)},
  { 1091, 1104, -1, sizeof(::CMsgGCToRelayConnect)},
  { 1111, 1118, -1, sizeof(::CMsgGCGCToLANServerRelayConnect)},
  { 1119, 1126, -1, sizeof(::CMsgGCBanStatusRequest)},
  { 1127, 1137, -1, sizeof(::CMsgGCBanStatusResponse)},
  { 1141, 1159, -1, sizeof(::CMsgTournamentItemEvent)},
  { 1171, 1179, -1, sizeof(::CMsgTournamentItemEventResponse)},
  { 1181, 1188, -1, sizeof(::CMsgTeamFanfare)},
  { 1189, 1197, -1, sizeof(::CMsgResponseTeamFanfare)},
  { 1199, 1209, -1, sizeof(::CMsgGameServerUploadSaveGame)},
  { 1213, 1220, -1, sizeof(::CMsgGameServerSaveGameResult)},
  { 1221, 1228, -1, sizeof(::CMsgGameServerGetLoadGame)},
  { 1229, 1236, -1, sizeof(::CMsgGameServerGetLoadGameResult)},
  { 1237, 1249, -1, sizeof(::CMsgDOTAAwardEventPoints_AwardPoints)},
  { 1255, 1266, -1, sizeof(::CMsgDOTAAwardEventPoints)},
  { 1271, 1279, -1, sizeof(::CMsgGCToServerPingRequest)},
  { 1281, 1290, -1, sizeof(::CMsgGCToServerPingResponse)},
  { 1293, 1305, -1, sizeof(::CMsgServerToGCMatchConnectionStats_Player)},
  { 1311, 1322, -1, sizeof(::CMsgServerToGCMatchConnectionStats)},
  { 1327, 1334, -1, sizeof(::CMsgServerGCUpdateSpectatorCount)},
  { 1335, 1343, -1, sizeof(::CSerializedCombatLog_Dictionary_DictString)},
  { 1345, -1, -1, sizeof(::CSerializedCombatLog_Dictionary)},
  { 1352, 1361, -1, sizeof(::CSerializedCombatLog)},
  { 1364, 1373, -1, sizeof(::CMsgServerToGCVictoryPredictions_Record)},
  { 1376, -1, -1, sizeof(::CMsgServerToGCVictoryPredictions)},
  { 1383, -1, -1, sizeof(::CMsgServerToGCRequestStatus)},
  { 1389, 1396, -1, sizeof(::CMsgServerToGCRequestStatus_Response)},
  { 1397, 1405, -1, sizeof(::CMsgGCToServerEvaluateToxicChat)},
  { 1407, 1418, -1, sizeof(::CMsgServerToGCEvaluateToxicChat)},
  { 1423, 1433, -1, sizeof(::CMsgServerToGCEvaluateToxicChatResponse)},
  { 1437, 1451, -1, sizeof(::CMsgSignOutAssassinMiniGameInfo)},
  { 1459, 1468, -1, sizeof(::CMsgServerToGCKillSummaries_KillSummary)},
  { 1471, 1479, -1, sizeof(::CMsgServerToGCKillSummaries)},
  { 1481, 1492, -1, sizeof(::CMsgGCToServerPredictionResult_Prediction)},
  { 1497, 1507, -1, sizeof(::CMsgGCToServerPredictionResult)},
  { 1511, 1519, -1, sizeof(::CMsgServerToGCLockCharmTrading)},
  { 1521, 1532, -1, sizeof(::CMsgSignOutUpdatePlayerChallenge_Challenge)},
  { 1537, 1548, -1, sizeof(::CMsgSignOutUpdatePlayerChallenge)},
  { 1553, 1561, -1, sizeof(::CMsgServerToGCRerollPlayerChallenge)},
  { 1563, 1572, -1, sizeof(::CMsgSpendWager_Player)},
  { 1575, 1586, -1, sizeof(::CMsgSpendWager)},
  { 1591, 1603, -1, sizeof(::CMsgSignOutXPCoins_Player)},
  { 1609, 1619, -1, sizeof(::CMsgSignOutXPCoins)},
  { 1623, 1632, -1, sizeof(::CMsgSignOutBounties_Bounty)},
  { 1635, 1645, -1, sizeof(::CMsgSignOutBounties)},
  { 1649, 1657, -1, sizeof(::CMsgSignOutCommunityGoalProgress_EventGoalIncrement)},
  { 1659, 1667, -1, sizeof(::CMsgSignOutCommunityGoalProgress)},
  { 1669, 1678, -1, sizeof(::CMsgServerToGCCloseCompendiumInGamePredictionVoting)},
  { 1681, 1688, -1, sizeof(::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)},
  { 1689, 1698, -1, sizeof(::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult)},
  { 1701, 1711, -1, sizeof(::CMsgServerToGCCompendiumInGamePredictionResults)},
  { 1715, 1722, -1, sizeof(::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction)},
  { 1723, 1732, -1, sizeof(::CMsgServerToGCCompendiumChosenInGamePredictions)},
  { 1735, 1742, -1, sizeof(::CMsgGCToGCCompendiumInGamePredictionResults)},
  { 1743, 1755, -1, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase)},
  { 1761, 1775, -1, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player)},
  { 1783, 1792, -1, sizeof(::CMsgServerToGCMatchPlayerItemPurchaseHistory)},
  { 1795, 1806, -1, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip)},
  { 1811, 1822, -1, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player)},
  { 1827, 1835, -1, sizeof(::CMsgServerToGCMatchPlayerNeutralItemEquipHistory)},
  { 1837, 1852, -1, sizeof(::CMsgServerToGCMatchStateHistory_PlayerState)},
  { 1861, 1877, -1, sizeof(::CMsgServerToGCMatchStateHistory_TeamState)},
  { 1887, 1896, -1, sizeof(::CMsgServerToGCMatchStateHistory_MatchState)},
  { 1899, 1909, -1, sizeof(::CMsgServerToGCMatchStateHistory)},
  { 1913, 1922, -1, sizeof(::CMsgMatchStateSteamMLEntry)},
  { 1925, -1, -1, sizeof(::CMsgLaneSelectionSteamMLEntry)},
  { 1933, 1945, -1, sizeof(::CMsgAbilitySelectionSteamMLEntry)},
  { 1951, 1964, -1, sizeof(::CMsgItemPurchasePregameSteamMLEntry)},
  { 1971, 1984, -1, sizeof(::CMsgItemPurchaseSteamMLEntry)},
  { 1991, 2004, -1, sizeof(::CMsgItemPurchaseSequenceSteamMLEntry)},
  { 2011, 2022, -1, sizeof(::CMsgServerToGCCavernCrawlIsHeroActive)},
  { 2027, 2043, -1, sizeof(::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge)},
  { 2053, 2062, -1, sizeof(::CMsgServerToGCPlayerChallengeHistory)},
  { 2065, 2073, -1, sizeof(::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults)},
  { 2075, 2086, -1, sizeof(::CMsgServerToGCCavernCrawlIsHeroActiveResponse)},
  { 2091, 2098, -1, sizeof(::CMsgGCtoServerTensorflowInstance)},
  { 2099, 2136, -1, sizeof(::CMsgDetailedGameStats_PlayerStatEntry)},
  { 2167, 2176, -1, sizeof(::CMsgDetailedGameStats_GameStats)},
  { 2179, 2187, -1, sizeof(::CMsgDetailedGameStats_MinuteEntry)},
  { 2189, 2198, -1, sizeof(::CMsgDetailedGameStats_PlayerInfo)},
  { 2201, 2210, -1, sizeof(::CMsgDetailedGameStats)},
  { 2213, 2225, -1, sizeof(::CMsgNeutralItemStats_NeutralItem)},
  { 2231, -1, -1, sizeof(::CMsgNeutralItemStats)},
  { 2238, 2247, -1, sizeof(::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry)},
  { 2250, -1, -1, sizeof(::CMsgGCToServerLobbyHeroBanRates)},
  { 2257, 2266, -1, sizeof(::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts)},
  { 2269, 2277, -1, sizeof(::CMsgSignOutGuildContractProgress_PlayerContract)},
  { 2279, -1, -1, sizeof(::CMsgSignOutGuildContractProgress)},
  { 2286, 2299, -1, sizeof(::CMsgSignOutGuildChallengeProgress_ChallengeProgress)},
  { 2306, -1, -1, sizeof(::CMsgSignOutGuildChallengeProgress)},
  { 2313, 2321, -1, sizeof(::CMsgSignOutMVPStats_Player_KillEaterEvent)},
  { 2323, 2354, -1, sizeof(::CMsgSignOutMVPStats_Player)},
  { 2379, 2390, -1, sizeof(::CMsgSignOutMVPStats)},
  { 2395, 2402, -1, sizeof(::CMsgGCToServerRecordTrainingData)},
  { 2403, -1, -1, sizeof(::CMsgServerToGCGetGuildContracts)},
  { 2410, 2421, -1, sizeof(::CMsgServerToGCGetGuildContractsResponse_ContractDetails)},
  { 2426, 2436, -1, sizeof(::CMsgServerToGCGetGuildContractsResponse_Player)},
  { 2440, -1, -1, sizeof(::CMsgServerToGCGetGuildContractsResponse)},
  { 2447, 2455, -1, sizeof(::CMsgMatchDiretideCandy_CandyDetails)},
  { 2457, 2467, -1, sizeof(::CMsgMatchDiretideCandy_PlayerCandy)},
  { 2471, 2479, -1, sizeof(::CMsgMatchDiretideCandy)},
  { 2481, 2489, -1, sizeof(::CMsgGCToServerCheerData_CheerTypeCount)},
  { 2491, -1, -1, sizeof(::CMsgGCToServerCheerData)},
  { 2498, 2522, -1, sizeof(::CMsgCheerConfig)},
  { 2540, 2547, -1, sizeof(::CMsgGCToServerCheerConfig)},
  { 2548, 2555, -1, sizeof(::CMsgServerToGCGetCheerConfig)},
  { 2556, 2563, -1, sizeof(::CMsgServerToGCGetCheerConfigResponse)},
  { 2564, -1, -1, sizeof(::CMsgGCToServerCheerScalesOverride)},
  { 2571, -1, -1, sizeof(::CMsgGCToServerGetCheerState)},
  { 2577, 2587, -1, sizeof(::CMsgCheerTypeState)},
  { 2591, 2600, -1, sizeof(::CMsgCheerState)},
  { 2603, 2611, -1, sizeof(::CMsgServerToGCReportCheerState)},
  { 2613, -1, -1, sizeof(::CMsgServerToGCGetStickerHeroes)},
  { 2620, 2628, -1, sizeof(::CMsgServerToGCGetStickerHeroesResponse_Player)},
  { 2630, -1, -1, sizeof(::CMsgServerToGCGetStickerHeroesResponse)},
  { 2637, 2644, -1, sizeof(::CMsgGCToServerSetSteamLearnInferencing)},
  { 2645, 2652, -1, sizeof(::CMsgGCToServerSetSteamLearnKeysChanged)},
  { 2653, 2664, -1, sizeof(::CMsgSteamLearnMatchInfo)},
  { 2669, 2680, -1, sizeof(::CMsgSteamLearnMatchInfoPlayer)},
  { 2685, -1, -1, sizeof(::CMsgSteamLearnMatchHeroes)},
  { 2695, 2705, -1, sizeof(::CMsgSteamLearnMatchHero)},
  { 2709, 2724, -1, sizeof(::CMsgSteamLearnMatchState_PlayerState)},
  { 2733, 2749, -1, sizeof(::CMsgSteamLearnMatchState_TeamState)},
  { 2759, 2768, -1, sizeof(::CMsgSteamLearnMatchState)},
  { 2771, 2785, -1, sizeof(::CMsgSteamLearnItemPurchase)},
  { 2793, 2802, -1, sizeof(::CMsgSteamLearnPreGameItemPurchases)},
  { 2805, 2815, -1, sizeof(::CMsgSteamLearnNeutralItemPurchase)},
  { 2819, 2829, -1, sizeof(::CMsgSteamLearnAbilitySkill)},
  { 2833, 2841, -1, sizeof(::CMsgSteamLearnWardPlacement_Location)},
  { 2843, 2852, -1, sizeof(::CMsgSteamLearnWardPlacement)},
  { 2855, 2862, -1, sizeof(::CMsgSignOutMuertaMinigame)},
  { 2863, 2871, -1, sizeof(::CMsgSignOutMapStats_Player)},
  { 2873, 2881, -1, sizeof(::CMsgSignOutMapStats)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgPoorNetworkConditions_Player_default_instance_._instance,
  &::_CMsgPoorNetworkConditions_default_instance_._instance,
  &::_CMsgGameserverCrash_default_instance_._instance,
  &::_CMsgConnectedPlayers_Player_default_instance_._instance,
  &::_CMsgConnectedPlayers_PlayerDraft_default_instance_._instance,
  &::_CMsgConnectedPlayers_default_instance_._instance,
  &::_CMsgGameServerInfo_default_instance_._instance,
  &::_CMsgLeaverDetected_default_instance_._instance,
  &::_CMsgLeaverDetectedResponse_default_instance_._instance,
  &::_CMsgDOTAFantasyFinalPlayerStats_default_instance_._instance,
  &::_CMsgDOTAFantasyLivePlayerStats_default_instance_._instance,
  &::_CMsgServerToGCRealtimeStats_default_instance_._instance,
  &::_CMsgGCToServerRealtimeStatsStartStop_default_instance_._instance,
  &::_CMsgGCToServerUpdateSteamBroadcasting_default_instance_._instance,
  &::_CMsgSignOutGameplayStats_CPlayer_default_instance_._instance,
  &::_CMsgSignOutGameplayStats_CTeam_default_instance_._instance,
  &::_CMsgSignOutGameplayStats_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CTeam_CPlayer_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CTeam_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CAdditionalSignoutMsg_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CSocialFeedMatchEvent_default_instance_._instance,
  &::_CMsgGameMatchSignOut_CCustomGameData_default_instance_._instance,
  &::_CMsgGameMatchSignOut_EventGameLeaderboardEntry_default_instance_._instance,
  &::_CMsgGameMatchSignOut_WardPlacement_default_instance_._instance,
  &::_CMsgGameMatchSignOut_default_instance_._instance,
  &::_CMsgSignOutDraftInfo_default_instance_._instance,
  &::_CMsgSignOutBotInfo_default_instance_._instance,
  &::_CMsgSignOutTextMuteInfo_TextMuteMessage_default_instance_._instance,
  &::_CMsgSignOutTextMuteInfo_default_instance_._instance,
  &::_CMsgSignOutPlayerStats_default_instance_._instance,
  &::_CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail_default_instance_._instance,
  &::_CMsgSignOutCommunicationSummary_PlayerCommunication_default_instance_._instance,
  &::_CMsgSignOutCommunicationSummary_default_instance_._instance,
  &::_CMsgGameMatchSignoutResponse_PlayerMetadata_default_instance_._instance,
  &::_CMsgGameMatchSignoutResponse_default_instance_._instance,
  &::_CMsgTimedRewardContainer_default_instance_._instance,
  &::_CMsgGameMatchSignOutPermissionRequest_default_instance_._instance,
  &::_CMsgGameMatchSignOutPermissionResponse_default_instance_._instance,
  &::_CMsgGameMatchSignOutEventGameData_default_instance_._instance,
  &::_CMsgGameMatchSignOutPerfData_default_instance_._instance,
  &::_CMsgGameMatchSignOutBanData_default_instance_._instance,
  &::_CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility_default_instance_._instance,
  &::_CMsgDOTALiveScoreboardUpdate_Team_Player_default_instance_._instance,
  &::_CMsgDOTALiveScoreboardUpdate_Team_default_instance_._instance,
  &::_CMsgDOTALiveScoreboardUpdate_default_instance_._instance,
  &::_CMsgServerToGCRequestBatchPlayerResources_default_instance_._instance,
  &::_CMsgServerToGCRequestBatchPlayerResourcesResponse_Result_default_instance_._instance,
  &::_CMsgServerToGCRequestBatchPlayerResourcesResponse_default_instance_._instance,
  &::_CMsgDOTAPlayerFailedToConnect_default_instance_._instance,
  &::_CMsgGCToRelayConnect_default_instance_._instance,
  &::_CMsgGCGCToLANServerRelayConnect_default_instance_._instance,
  &::_CMsgGCBanStatusRequest_default_instance_._instance,
  &::_CMsgGCBanStatusResponse_default_instance_._instance,
  &::_CMsgTournamentItemEvent_default_instance_._instance,
  &::_CMsgTournamentItemEventResponse_default_instance_._instance,
  &::_CMsgTeamFanfare_default_instance_._instance,
  &::_CMsgResponseTeamFanfare_default_instance_._instance,
  &::_CMsgGameServerUploadSaveGame_default_instance_._instance,
  &::_CMsgGameServerSaveGameResult_default_instance_._instance,
  &::_CMsgGameServerGetLoadGame_default_instance_._instance,
  &::_CMsgGameServerGetLoadGameResult_default_instance_._instance,
  &::_CMsgDOTAAwardEventPoints_AwardPoints_default_instance_._instance,
  &::_CMsgDOTAAwardEventPoints_default_instance_._instance,
  &::_CMsgGCToServerPingRequest_default_instance_._instance,
  &::_CMsgGCToServerPingResponse_default_instance_._instance,
  &::_CMsgServerToGCMatchConnectionStats_Player_default_instance_._instance,
  &::_CMsgServerToGCMatchConnectionStats_default_instance_._instance,
  &::_CMsgServerGCUpdateSpectatorCount_default_instance_._instance,
  &::_CSerializedCombatLog_Dictionary_DictString_default_instance_._instance,
  &::_CSerializedCombatLog_Dictionary_default_instance_._instance,
  &::_CSerializedCombatLog_default_instance_._instance,
  &::_CMsgServerToGCVictoryPredictions_Record_default_instance_._instance,
  &::_CMsgServerToGCVictoryPredictions_default_instance_._instance,
  &::_CMsgServerToGCRequestStatus_default_instance_._instance,
  &::_CMsgServerToGCRequestStatus_Response_default_instance_._instance,
  &::_CMsgGCToServerEvaluateToxicChat_default_instance_._instance,
  &::_CMsgServerToGCEvaluateToxicChat_default_instance_._instance,
  &::_CMsgServerToGCEvaluateToxicChatResponse_default_instance_._instance,
  &::_CMsgSignOutAssassinMiniGameInfo_default_instance_._instance,
  &::_CMsgServerToGCKillSummaries_KillSummary_default_instance_._instance,
  &::_CMsgServerToGCKillSummaries_default_instance_._instance,
  &::_CMsgGCToServerPredictionResult_Prediction_default_instance_._instance,
  &::_CMsgGCToServerPredictionResult_default_instance_._instance,
  &::_CMsgServerToGCLockCharmTrading_default_instance_._instance,
  &::_CMsgSignOutUpdatePlayerChallenge_Challenge_default_instance_._instance,
  &::_CMsgSignOutUpdatePlayerChallenge_default_instance_._instance,
  &::_CMsgServerToGCRerollPlayerChallenge_default_instance_._instance,
  &::_CMsgSpendWager_Player_default_instance_._instance,
  &::_CMsgSpendWager_default_instance_._instance,
  &::_CMsgSignOutXPCoins_Player_default_instance_._instance,
  &::_CMsgSignOutXPCoins_default_instance_._instance,
  &::_CMsgSignOutBounties_Bounty_default_instance_._instance,
  &::_CMsgSignOutBounties_default_instance_._instance,
  &::_CMsgSignOutCommunityGoalProgress_EventGoalIncrement_default_instance_._instance,
  &::_CMsgSignOutCommunityGoalProgress_default_instance_._instance,
  &::_CMsgServerToGCCloseCompendiumInGamePredictionVoting_default_instance_._instance,
  &::_CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse_default_instance_._instance,
  &::_CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult_default_instance_._instance,
  &::_CMsgServerToGCCompendiumInGamePredictionResults_default_instance_._instance,
  &::_CMsgServerToGCCompendiumChosenInGamePredictions_Prediction_default_instance_._instance,
  &::_CMsgServerToGCCompendiumChosenInGamePredictions_default_instance_._instance,
  &::_CMsgGCToGCCompendiumInGamePredictionResults_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerItemPurchaseHistory_Player_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerItemPurchaseHistory_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player_default_instance_._instance,
  &::_CMsgServerToGCMatchPlayerNeutralItemEquipHistory_default_instance_._instance,
  &::_CMsgServerToGCMatchStateHistory_PlayerState_default_instance_._instance,
  &::_CMsgServerToGCMatchStateHistory_TeamState_default_instance_._instance,
  &::_CMsgServerToGCMatchStateHistory_MatchState_default_instance_._instance,
  &::_CMsgServerToGCMatchStateHistory_default_instance_._instance,
  &::_CMsgMatchStateSteamMLEntry_default_instance_._instance,
  &::_CMsgLaneSelectionSteamMLEntry_default_instance_._instance,
  &::_CMsgAbilitySelectionSteamMLEntry_default_instance_._instance,
  &::_CMsgItemPurchasePregameSteamMLEntry_default_instance_._instance,
  &::_CMsgItemPurchaseSteamMLEntry_default_instance_._instance,
  &::_CMsgItemPurchaseSequenceSteamMLEntry_default_instance_._instance,
  &::_CMsgServerToGCCavernCrawlIsHeroActive_default_instance_._instance,
  &::_CMsgServerToGCPlayerChallengeHistory_PlayerChallenge_default_instance_._instance,
  &::_CMsgServerToGCPlayerChallengeHistory_default_instance_._instance,
  &::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults_default_instance_._instance,
  &::_CMsgServerToGCCavernCrawlIsHeroActiveResponse_default_instance_._instance,
  &::_CMsgGCtoServerTensorflowInstance_default_instance_._instance,
  &::_CMsgDetailedGameStats_PlayerStatEntry_default_instance_._instance,
  &::_CMsgDetailedGameStats_GameStats_default_instance_._instance,
  &::_CMsgDetailedGameStats_MinuteEntry_default_instance_._instance,
  &::_CMsgDetailedGameStats_PlayerInfo_default_instance_._instance,
  &::_CMsgDetailedGameStats_default_instance_._instance,
  &::_CMsgNeutralItemStats_NeutralItem_default_instance_._instance,
  &::_CMsgNeutralItemStats_default_instance_._instance,
  &::_CMsgGCToServerLobbyHeroBanRates_HeroBanEntry_default_instance_._instance,
  &::_CMsgGCToServerLobbyHeroBanRates_default_instance_._instance,
  &::_CMsgSignOutGuildContractProgress_CompletedGuildEventContracts_default_instance_._instance,
  &::_CMsgSignOutGuildContractProgress_PlayerContract_default_instance_._instance,
  &::_CMsgSignOutGuildContractProgress_default_instance_._instance,
  &::_CMsgSignOutGuildChallengeProgress_ChallengeProgress_default_instance_._instance,
  &::_CMsgSignOutGuildChallengeProgress_default_instance_._instance,
  &::_CMsgSignOutMVPStats_Player_KillEaterEvent_default_instance_._instance,
  &::_CMsgSignOutMVPStats_Player_default_instance_._instance,
  &::_CMsgSignOutMVPStats_default_instance_._instance,
  &::_CMsgGCToServerRecordTrainingData_default_instance_._instance,
  &::_CMsgServerToGCGetGuildContracts_default_instance_._instance,
  &::_CMsgServerToGCGetGuildContractsResponse_ContractDetails_default_instance_._instance,
  &::_CMsgServerToGCGetGuildContractsResponse_Player_default_instance_._instance,
  &::_CMsgServerToGCGetGuildContractsResponse_default_instance_._instance,
  &::_CMsgMatchDiretideCandy_CandyDetails_default_instance_._instance,
  &::_CMsgMatchDiretideCandy_PlayerCandy_default_instance_._instance,
  &::_CMsgMatchDiretideCandy_default_instance_._instance,
  &::_CMsgGCToServerCheerData_CheerTypeCount_default_instance_._instance,
  &::_CMsgGCToServerCheerData_default_instance_._instance,
  &::_CMsgCheerConfig_default_instance_._instance,
  &::_CMsgGCToServerCheerConfig_default_instance_._instance,
  &::_CMsgServerToGCGetCheerConfig_default_instance_._instance,
  &::_CMsgServerToGCGetCheerConfigResponse_default_instance_._instance,
  &::_CMsgGCToServerCheerScalesOverride_default_instance_._instance,
  &::_CMsgGCToServerGetCheerState_default_instance_._instance,
  &::_CMsgCheerTypeState_default_instance_._instance,
  &::_CMsgCheerState_default_instance_._instance,
  &::_CMsgServerToGCReportCheerState_default_instance_._instance,
  &::_CMsgServerToGCGetStickerHeroes_default_instance_._instance,
  &::_CMsgServerToGCGetStickerHeroesResponse_Player_default_instance_._instance,
  &::_CMsgServerToGCGetStickerHeroesResponse_default_instance_._instance,
  &::_CMsgGCToServerSetSteamLearnInferencing_default_instance_._instance,
  &::_CMsgGCToServerSetSteamLearnKeysChanged_default_instance_._instance,
  &::_CMsgSteamLearnMatchInfo_default_instance_._instance,
  &::_CMsgSteamLearnMatchInfoPlayer_default_instance_._instance,
  &::_CMsgSteamLearnMatchHeroes_default_instance_._instance,
  &::_CMsgSteamLearnMatchHero_default_instance_._instance,
  &::_CMsgSteamLearnMatchState_PlayerState_default_instance_._instance,
  &::_CMsgSteamLearnMatchState_TeamState_default_instance_._instance,
  &::_CMsgSteamLearnMatchState_default_instance_._instance,
  &::_CMsgSteamLearnItemPurchase_default_instance_._instance,
  &::_CMsgSteamLearnPreGameItemPurchases_default_instance_._instance,
  &::_CMsgSteamLearnNeutralItemPurchase_default_instance_._instance,
  &::_CMsgSteamLearnAbilitySkill_default_instance_._instance,
  &::_CMsgSteamLearnWardPlacement_Location_default_instance_._instance,
  &::_CMsgSteamLearnWardPlacement_default_instance_._instance,
  &::_CMsgSignOutMuertaMinigame_default_instance_._instance,
  &::_CMsgSignOutMapStats_Player_default_instance_._instance,
  &::_CMsgSignOutMapStats_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034dota_gcmessages_server.proto\032\023steammes"
  "sages.proto\032\025valveextensions.proto\032\027dota"
  "_shared_enums.proto\032\034dota_gcmessages_com"
  "mon.proto\032\025econ_gcmessages.proto\032\030networ"
  "k_connection.proto\032\"dota_gcmessages_comm"
  "on_lobby.proto\032-dota_gcmessages_common_m"
  "atch_management.proto\032\026gcsdk_gcmessages."
  "proto\032,steammessages_steamlearn.steamwor"
  "kssdk.proto\"\311\002\n\031CMsgPoorNetworkCondition"
  "s\022R\n\016detection_type\030\001 \001(\0162\033.EPoorNetwork"
  "ConditionsType:\035k_EPoorNetworkConditions"
  "_None\0222\n\007players\030\002 \003(\0132!.CMsgPoorNetwork"
  "Conditions.Player\032\243\001\n\006Player\022\022\n\naccount_"
  "id\030\001 \001(\r\022S\n\021disconnect_reason\030\002 \001(\0162\034.EN"
  "etworkDisconnectionReason:\032NETWORK_DISCO"
  "NNECT_INVALID\022\031\n\021num_bad_intervals\030\003 \001(\r"
  "\022\025\n\rpeak_loss_pct\030\004 \001(\r\"\306\002\n\023CMsgGameserv"
  "erCrash\022\020\n\010match_id\030\001 \001(\004\022\020\n\010lobby_id\030\002 "
  "\001(\006\022>\n\ngame_state\030\003 \001(\0162\017.DOTA_GameState"
  ":\031DOTA_GAMERULES_STATE_INIT\022\032\n\022sentinel_"
  "save_time\030\004 \001(\007\022\026\n\016custom_game_id\030\013 \001(\006\022"
  "\025\n\rtournament_id\030\014 \001(\r\022\027\n\017server_steam_i"
  "d\030\005 \001(\006\022\035\n\025server_public_ip_addr\030\006 \001(\007\022\023"
  "\n\013server_port\030\007 \001(\r\022\026\n\016server_cluster\030\010 "
  "\001(\r\022\013\n\003pid\030\t \001(\r\022\016\n\006engine\030\n \001(\r\"\230\010\n\024CMs"
  "gConnectedPlayers\0227\n\021connected_players\030\001"
  " \003(\0132\034.CMsgConnectedPlayers.Player\022:\n\024di"
  "sconnected_players\030\007 \003(\0132\034.CMsgConnected"
  "Players.Player\022>\n\ngame_state\030\002 \001(\0162\017.DOT"
  "A_GameState:\031DOTA_GAMERULES_STATE_INIT\022\034"
  "\n\024first_blood_happened\030\006 \001(\010\022;\n\027poor_net"
  "work_conditions\030\n \001(\0132\032.CMsgPoorNetworkC"
  "onditions\022>\n\013send_reason\030\010 \001(\0162 .CMsgCon"
  "nectedPlayers.SendReason:\007INVALID\022\025\n\rrad"
  "iant_kills\030\013 \001(\r\022\022\n\ndire_kills\030\014 \001(\r\022\024\n\014"
  "radiant_lead\030\016 \001(\005\022\026\n\016building_state\030\017 \001"
  "(\r\0227\n\014player_draft\030\020 \003(\0132!.CMsgConnected"
  "Players.PlayerDraft\032\250\001\n\006Player\022\020\n\010steam_"
  "id\030\001 \001(\006\022\017\n\007hero_id\030\002 \001(\r\022&\n\014leaver_stat"
  "e\030\003 \001(\0132\020.CMsgLeaverState\022S\n\021disconnect_"
  "reason\030\004 \001(\0162\034.ENetworkDisconnectionReas"
  "on:\032NETWORK_DISCONNECT_INVALID\032g\n\013Player"
  "Draft\022\020\n\010steam_id\030\001 \001(\006\0223\n\004team\030\002 \001(\0162\r."
  "DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n\t"
  "team_slot\030\003 \001(\005\"\211\002\n\nSendReason\022\013\n\007INVALI"
  "D\020\000\022\r\n\tHEARTBEAT\020\001\022\016\n\nGAME_STATE\020\002\022\017\n\013FI"
  "RST_BLOOD\020\003\022\024\n\020PLAYER_CONNECTED\020\004\022\017\n\013PLA"
  "YER_HERO\020\005\022$\n PLAYER_DISCONNECTED_CONSEQ"
  "UENCES\020\006\022&\n\"PLAYER_DISCONNECTED_NOCONSEQ"
  "UENCES\020\007\022\025\n\021GAMESTATE_TIMEOUT\020\n\022\023\n\017MASS_"
  "DISCONNECT\020\013\022\t\n\005KILLS\020\r\022\022\n\016BUILDING_STAT"
  "E\020\016\"\274\010\n\022CMsgGameServerInfo\022\035\n\025server_pub"
  "lic_ip_addr\030\001 \001(\007\022\036\n\026server_private_ip_a"
  "ddr\030\002 \001(\007\022\023\n\013server_port\030\003 \001(\r\022\026\n\016server"
  "_tv_port\030\004 \001(\r\022\037\n\027assigned_server_tv_por"
  "t\030\026 \001(\r\022+\n#legacy_server_steamdatagram_a"
  "ddress\030\033 \001(\014\022\022\n\nserver_key\030\005 \001(\t\022\032\n\022serv"
  "er_hibernation\030\006 \001(\010\022@\n\013server_type\030\007 \001("
  "\0162\036.CMsgGameServerInfo.ServerType:\013UNSPE"
  "CIFIED\022\025\n\rserver_region\030\010 \001(\r\022\026\n\016server_"
  "loadavg\030\t \001(\002\022 \n\030server_tv_broadcast_tim"
  "e\030\n \001(\002\022\030\n\020server_game_time\030\013 \001(\002\022\'\n\037ser"
  "ver_relay_connected_steam_id\030\014 \001(\006\022\027\n\017re"
  "lay_slots_max\030\r \001(\r\022\030\n\020relays_connected\030"
  "\016 \001(\005\022\037\n\027relay_clients_connected\030\017 \001(\005\022$"
  "\n\034relayed_game_server_steam_id\030\020 \001(\006\022\032\n\022"
  "parent_relay_count\030\021 \001(\r\022\026\n\016tv_secret_co"
  "de\030\022 \001(\006\022\026\n\016server_version\030\023 \001(\r\022\026\n\016serv"
  "er_cluster\030\024 \001(\r\022A\n\022allow_custom_games\030\027"
  " \001(\0162\037.CMsgGameServerInfo.CustomGames:\004B"
  "OTH\022\025\n\rbuild_version\030\030 \001(\r\022\027\n\017tf_server_"
  "count\030\031 \001(\r\022\026\n\016srcds_instance\030\032 \001(\r\022\035\n\025d"
  "ev_force_server_type\030\034 \001(\010\022(\n is_recordi"
  "ng_match_training_data\030\035 \001(\010\"|\n\nServerTy"
  "pe\022\017\n\013UNSPECIFIED\020\000\022\010\n\004GAME\020\001\022\t\n\005PROXY\020\002"
  "\022\016\n\nTENSORFLOW\020\003\022\r\n\tDOTA_ONLY\020\004\022\024\n\020CUSTO"
  "M_GAME_ONLY\020\005\022\023\n\017EVENT_GAME_ONLY\020\006\"6\n\013Cu"
  "stomGames\022\010\n\004BOTH\020\000\022\010\n\004NONE\020\001\022\010\n\004ONLY\020\002\022"
  "\t\n\005EVENT\020\003\"\266\002\n\022CMsgLeaverDetected\022\020\n\010ste"
  "am_id\030\001 \001(\006\022<\n\rleaver_status\030\002 \001(\0162\023.DOT"
  "ALeaverStatus_t:\020DOTA_LEAVER_NONE\022&\n\014lea"
  "ver_state\030\004 \001(\0132\020.CMsgLeaverState\022\026\n\016ser"
  "ver_cluster\030\005 \001(\r\022S\n\021disconnect_reason\030\006"
  " \001(\0162\034.ENetworkDisconnectionReason:\032NETW"
  "ORK_DISCONNECT_INVALID\022;\n\027poor_network_c"
  "onditions\030\007 \001(\0132\032.CMsgPoorNetworkConditi"
  "ons\",\n\032CMsgLeaverDetectedResponse\022\016\n\006res"
  "ult\030\001 \001(\r\"M\n\037CMsgDOTAFantasyFinalPlayerS"
  "tats\022*\n\005stats\030\002 \003(\0132\033.CMsgDOTAFantasyPla"
  "yerStats\"L\n\036CMsgDOTAFantasyLivePlayerSta"
  "ts\022*\n\005stats\030\002 \003(\0132\033.CMsgDOTAFantasyPlaye"
  "rStats\"O\n\033CMsgServerToGCRealtimeStats\0220\n"
  "\007delayed\030\001 \001(\0132\037.CMsgDOTARealtimeGameSta"
  "tsTerse\"7\n$CMsgGCToServerRealtimeStatsSt"
  "artStop\022\017\n\007delayed\030\001 \001(\010\"7\n%CMsgGCToServ"
  "erUpdateSteamBroadcasting\022\016\n\006active\030\001 \001("
  "\010\"\343\002\n\030CMsgSignOutGameplayStats\022.\n\005teams\030"
  "\001 \003(\0132\037.CMsgSignOutGameplayStats.CTeam\032v"
  "\n\007CPlayer\022\020\n\010steam_id\030\001 \001(\006\022\023\n\013player_sl"
  "ot\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\0223\n\022timed_playe"
  "r_stats\030\004 \003(\0132\027.CMatchPlayerTimedStats\032\236"
  "\001\n\005CTeam\022\027\n\017is_winning_team\030\001 \001(\010\022\027\n\017is_"
  "radiant_team\030\002 \001(\010\022/\n\020timed_team_stats\030\003"
  " \003(\0132\025.CMatchTeamTimedStats\0222\n\007players\030\004"
  " \003(\0132!.CMsgSignOutGameplayStats.CPlayer\""
  "\203\"\n\024CMsgGameMatchSignOut\022\026\n\010match_id\030\001 \001"
  "(\004B\004\200\246\035\001\022\020\n\010duration\030\002 \001(\r\022\025\n\rgood_guys_"
  "win\030\003 \001(\010\022\014\n\004date\030\004 \001(\007\022*\n\005teams\030\006 \003(\0132\033"
  ".CMsgGameMatchSignOut.CTeam\022\024\n\014tower_sta"
  "tus\030\010 \003(\r\022\027\n\017barracks_status\030\t \003(\r\022\017\n\007cl"
  "uster\030\n \001(\r\022\023\n\013server_addr\030\013 \001(\t\022\030\n\020firs"
  "t_blood_time\030\014 \001(\r\022\023\n\013event_score\030\016 \001(\r\022"
  "*\n\npicks_bans\030\017 \003(\0132\026.CMatchHeroSelectEv"
  "ent\0222\n\rfantasy_stats\030) \003(\0132\033.CMsgDOTAFan"
  "tasyPlayerStats\022O\n player_strange_count_"
  "adjustments\030\021 \003(\0132%.CMsgEconPlayerStrang"
  "eCountAdjustment\022\033\n\023automatic_surrender\030"
  "\022 \001(\010\022\026\n\016server_version\030\023 \001(\r\022;\n\027poor_ne"
  "twork_conditions\030# \001(\0132\032.CMsgPoorNetwork"
  "Conditions\022D\n\017additional_msgs\030\024 \003(\0132+.CM"
  "sgGameMatchSignOut.CAdditionalSignoutMsg"
  "\022G\n\022social_feed_events\030$ \003(\0132+.CMsgGameM"
  "atchSignOut.CSocialFeedMatchEvent\022\036\n\026ave"
  "rage_networth_delta\030\026 \001(\021\022\?\n\020custom_game"
  "_data\030% \001(\0132%.CMsgGameMatchSignOut.CCust"
  "omGameData\022\023\n\013match_flags\030& \001(\r\022\023\n\013team_"
  "scores\030\' \003(\r\022\031\n\021pre_game_duration\030( \001(\r\022"
  "W\n\036event_game_leaderboard_entries\030* \003(\0132"
  "/.CMsgGameMatchSignOut.EventGameLeaderbo"
  "ardEntry\022<\n\017ward_placements\030+ \003(\0132#.CMsg"
  "GameMatchSignOut.WardPlacement\0221\n\016gamepl"
  "ay_stats\030, \001(\0132\031.CMsgSignOutGameplayStat"
  "s\022\'\n\016extra_messages\0306 \003(\0132\017.CExtraMsgBlo"
  "ck\022\036\n\026training_data_recorded\0307 \001(\010\022;\n\014wi"
  "nning_team\0308 \001(\0162\r.DOTA_GC_TEAM:\026DOTA_GC"
  "_TEAM_GOOD_GUYS\022\'\n\037normalized_win_probab"
  "ility_diff\0309 \001(\002\022-\n\023match_tracked_stats\030"
  ": \003(\0132\020.CMsgTrackedStat\032\240\023\n\005CTeam\0224\n\007pla"
  "yers\030\001 \003(\0132#.CMsgGameMatchSignOut.CTeam."
  "CPlayer\022,\n\022team_tracked_stats\030\002 \003(\0132\020.CM"
  "sgTrackedStat\032\262\022\n\007CPlayer\022\020\n\010steam_id\030\001 "
  "\001(\006\022\017\n\007hero_id\030\003 \001(\r\022\r\n\005items\030\004 \003(\005\022\033\n\023i"
  "tem_purchase_times\030\? \003(\r\022\014\n\004gold\030\005 \001(\r\022\r"
  "\n\005kills\030\006 \001(\r\022\016\n\006deaths\030\007 \001(\r\022\017\n\007assists"
  "\030\010 \001(\r\022\025\n\rleaver_status\030\t \001(\r\022\021\n\tlast_hi"
  "ts\030\n \001(\r\022\016\n\006denies\030\013 \001(\r\022\024\n\014gold_per_min"
  "\030\014 \001(\r\022\025\n\rxp_per_minute\030\r \001(\r\022\022\n\ngold_sp"
  "ent\030\016 \001(\r\022\r\n\005level\030\017 \001(\r\022\032\n\022scaled_hero_"
  "damage\030\020 \001(\r\022\033\n\023scaled_tower_damage\030\021 \001("
  "\r\022\033\n\023scaled_hero_healing\030\022 \001(\r\022\026\n\016time_l"
  "ast_seen\030\023 \001(\r\022\035\n\025support_ability_value\030"
  "\024 \001(\r\022\020\n\010party_id\030\025 \001(\004\022\031\n\021claimed_farm_"
  "gold\030\033 \001(\r\022\024\n\014support_gold\030\034 \001(\r\022\026\n\016clai"
  "med_denies\030\035 \001(\r\022\026\n\016claimed_misses\030\036 \001(\r"
  "\022\016\n\006misses\030\037 \001(\r\022\021\n\tnet_worth\030\" \001(\r\022\023\n\013h"
  "ero_damage\030% \001(\r\022\024\n\014tower_damage\030& \001(\r\022\024"
  "\n\014hero_healing\030\' \001(\r\0225\n\020ability_upgrades"
  "\030  \003(\0132\033.CMatchPlayerAbilityUpgrade\022B\n\032a"
  "dditional_units_inventory\030! \003(\0132\036.CMatch"
  "AdditionalUnitInventory\0223\n\017permanent_buf"
  "fs\030( \003(\0132\032.CMatchPlayerPermanentBuff\022M\n\020"
  "custom_game_data\030# \001(\01323.CMsgGameMatchSi"
  "gnOut.CTeam.CPlayer.CCustomGameData\022\032\n\022m"
  "atch_player_flags\030$ \001(\r\022\032\n\022talent_abilit"
  "y_ids\030) \003(\005\022\027\n\017hero_pick_order\030* \001(\r\022\031\n\021"
  "hero_was_randomed\030+ \001(\010\022%\n\035hero_was_dota"
  "_plus_suggestion\0302 \001(\010\022\014\n\004lane\030- \001(\r\022\033\n\023"
  "is_using_plus_guide\030/ \001(\010\022T\n\024hero_damage"
  "_received\0300 \003(\01326.CMsgGameMatchSignOut.C"
  "Team.CPlayer.HeroDamageReceived\022Q\n\021hero_"
  "damage_dealt\030@ \003(\01326.CMsgGameMatchSignOu"
  "t.CTeam.CPlayer.HeroDamageReceived\022\024\n\014se"
  "conds_dead\0303 \001(\r\022\032\n\022gold_lost_to_death\0304"
  " \001(\r\022\025\n\rcommand_count\0305 \001(\r\022&\n\036mouse_cli"
  "ck_cast_command_count\0306 \001(\r\022\026\n\016teleports"
  "_used\0307 \001(\r\022/\n\"cavern_crawl_preferred_ma"
  "p_variant\0308 \001(\r:\003255\022\024\n\014bounty_runes\0309 \001"
  "(\r\022\031\n\021outposts_captured\030: \001(\r\022\017\n\007dewards"
  "\030; \001(\r\022\024\n\014wards_placed\030< \001(\r\022\025\n\rcamps_st"
  "acked\030= \001(\r\022\023\n\013player_slot\030> \001(\r\022\032\n\022pred"
  "icted_position\030B \001(\r\022\032\n\rlane_outcomes\030C "
  "\001(\r:\003255\022\"\n\032friendly_t1_destroyed_time\030D"
  " \001(\r\022\037\n\027enemy_t1_destroyed_time\030E \001(\r\022\035\n"
  "\025friendly_roshan_kills\030F \001(\r\022\032\n\022enemy_ro"
  "shan_kills\030G \001(\r\022\023\n\013power_runes\030H \001(\r\022\023\n"
  "\013water_runes\030I \001(\r\022\025\n\rstun_duration\030J \001("
  "\002\022:\n\013team_number\030K \001(\0162\r.DOTA_GC_TEAM:\026D"
  "OTA_GC_TEAM_GOOD_GUYS\022\021\n\tteam_slot\030L \001(\r"
  "\022\034\n\024time_purchased_shard\030M \001(\r\022\033\n\023time_p"
  "urchased_aghs\030N \001(\r\022\037\n\027ability_draft_abi"
  "lities\030O \003(\005\022.\n\024player_tracked_stats\030P \003"
  "(\0132\020.CMsgTrackedStat\0324\n\017CCustomGameData\022"
  "\021\n\tdota_team\030\001 \001(\r\022\016\n\006winner\030\002 \001(\010\032\242\001\n\022H"
  "eroDamageReceived\022\025\n\rpre_reduction\030\001 \001(\r"
  "\022\026\n\016post_reduction\030\002 \001(\r\022]\n\013damage_type\030"
  "\003 \001(\01622.CMsgGameMatchSignOut.CTeam.CPlay"
  "er.HeroDamageType:\024HERO_DAMAGE_PHYSICAL\""
  "Y\n\016HeroDamageType\022\030\n\024HERO_DAMAGE_PHYSICA"
  "L\020\000\022\027\n\023HERO_DAMAGE_MAGICAL\020\001\022\024\n\020HERO_DAM"
  "AGE_PURE\020\002\0325\n\025CAdditionalSignoutMsg\022\n\n\002i"
  "d\030\001 \001(\r\022\020\n\010contents\030\002 \001(\014\032z\n\025CSocialFeed"
  "MatchEvent\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttimest"
  "amp\030\002 \001(\r\022\022\n\nevent_type\030\003 \001(\r\022\021\n\tgame_ti"
  "me\030\004 \001(\005\022\023\n\013replay_time\030\005 \001(\r\032,\n\017CCustom"
  "GameData\022\031\n\021publish_timestamp\030\001 \001(\r\032\255\001\n\031"
  "EventGameLeaderboardEntry\022\023\n\013name_suffix"
  "\030\001 \001(\t\022\r\n\005score\030\002 \001(\005\022\024\n\014extra_data_1\030\003 "
  "\001(\r\022\024\n\014extra_data_2\030\004 \001(\r\022\024\n\014extra_data_"
  "3\030\005 \001(\r\022\024\n\014extra_data_4\030\006 \001(\r\022\024\n\014extra_d"
  "ata_5\030\007 \001(\r\032\267\001\n\rWardPlacement\022\025\n\tplayer_"
  "id\030\001 \001(\005:\002-1\022\017\n\007team_id\030\002 \001(\r\022\023\n\013placed_"
  "time\030\003 \001(\r\022\026\n\016building_state\030\004 \001(\r\022\023\n\013cr"
  "eep_state\030\005 \001(\r\022\024\n\014roshan_alive\030\006 \001(\010\022\022\n"
  "\nposition_x\030\007 \001(\r\022\022\n\nposition_y\030\010 \001(\r\"\207\001"
  "\n\024CMsgSignOutDraftInfo\022\"\n\032radiant_captai"
  "n_account_id\030\001 \001(\r\022\037\n\027dire_captain_accou"
  "nt_id\030\002 \001(\r\022*\n\npicks_bans\030\003 \003(\0132\026.CMatch"
  "HeroSelectEvent\"\326\001\n\022CMsgSignOutBotInfo\022\024"
  "\n\014allow_cheats\030\001 \001(\010\022J\n\026bot_difficulty_r"
  "adiant\030\002 \001(\0162\022.DOTABotDifficulty:\026BOT_DI"
  "FFICULTY_PASSIVE\022\025\n\rcreated_lobby\030\003 \001(\010\022"
  "G\n\023bot_difficulty_dire\030\005 \001(\0162\022.DOTABotDi"
  "fficulty:\026BOT_DIFFICULTY_PASSIVE\"\262\001\n\027CMs"
  "gSignOutTextMuteInfo\022D\n\022text_mute_messag"
  "es\030\001 \003(\0132(.CMsgSignOutTextMuteInfo.TextM"
  "uteMessage\032Q\n\017TextMuteMessage\022\016\n\006region\030"
  "\001 \001(\r\022\030\n\020caused_text_mute\030\002 \001(\010\022\024\n\014chat_"
  "message\030\003 \001(\t\"\372\004\n\026CMsgSignOutPlayerStats"
  "\022\022\n\naccount_id\030\001 \001(\005\022\020\n\010match_id\030\002 \001(\004\022\014"
  "\n\004rank\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r\022\020\n\010rampage"
  "s\030\005 \001(\r\022\024\n\014triple_kills\030\006 \001(\r\022\033\n\023first_b"
  "lood_claimed\030\007 \001(\r\022\031\n\021first_blood_given\030"
  "\010 \001(\r\022\027\n\017couriers_killed\030\t \001(\r\022\030\n\020aegise"
  "s_snatched\030\n \001(\r\022\025\n\rcheeses_eaten\030\013 \001(\r\022"
  "\026\n\016creeps_stacked\030\014 \001(\r\022\023\n\013fight_score\030\r"
  " \001(\002\022\022\n\nfarm_score\030\016 \001(\002\022\025\n\rsupport_scor"
  "e\030\017 \001(\002\022\022\n\npush_score\030\020 \001(\002\022\r\n\005kills\030\021 \001"
  "(\r\022\016\n\006deaths\030\022 \001(\r\022\017\n\007assists\030\023 \001(\r\022\021\n\tl"
  "ast_hits\030\024 \001(\r\022\016\n\006denies\030\025 \001(\r\022\013\n\003gpm\030\026 "
  "\001(\002\022\014\n\004xppm\030\027 \001(\002\022\021\n\tnet_worth\030\030 \001(\002\022\016\n\006"
  "damage\030\031 \001(\002\022\r\n\005heals\030\032 \001(\002\022\031\n\021rapiers_p"
  "urchased\030\033 \001(\r\022\035\n\025observer_wards_placed\030"
  "\034 \001(\r\022\027\n\017wards_destroyed\030\035 \001(\r\022\022\n\nlobby_"
  "type\030\036 \001(\r\"\252\005\n\037CMsgSignOutCommunicationS"
  "ummary\022E\n\007players\030\001 \003(\01324.CMsgSignOutCom"
  "municationSummary.PlayerCommunication\032\277\004"
  "\n\023PlayerCommunication\022\022\n\naccount_id\030\001 \001("
  "\r\022\r\n\005pings\030\002 \001(\r\022\036\n\026max_pings_per_interv"
  "al\030\003 \001(\r\022\026\n\016teammate_pings\030\004 \001(\r\022\'\n\037max_"
  "teammate_pings_per_interval\030\005 \001(\r\022\032\n\022tea"
  "m_chat_messages\030\006 \001(\r\022\031\n\021all_chat_messag"
  "es\030\007 \001(\r\022\033\n\023chat_wheel_messages\030\010 \001(\r\022\016\n"
  "\006pauses\030\t \001(\r\022\020\n\010unpauses\030\n \001(\r\022\023\n\013lines"
  "_drawn\030\013 \001(\r\022\032\n\022voice_chat_seconds\030\014 \001(\r"
  "\022\022\n\nchat_mutes\030\r \001(\r\022\023\n\013voice_mutes\030\016 \001("
  "\r\022U\n\014ping_details\030\017 \003(\0132\?.CMsgSignOutCom"
  "municationSummary.PlayerCommunication.Pi"
  "ngDetail\022\031\n\021comms_blocks_solo\030\020 \001(\r\022\031\n\021c"
  "omms_blocks_mass\030\021 \001(\r\022\020\n\010chat_log\030\022 \003(\t"
  "\0325\n\nPingDetail\022\030\n\004type\030\001 \001(\r:\n4294967295"
  "\022\r\n\005count\030\002 \001(\r\"\340\005\n\034CMsgGameMatchSignout"
  "Response\022\020\n\010match_id\030\001 \001(\004\022\023\n\013replay_sal"
  "t\030\002 \001(\007\0227\n\024timed_reward_details\030\003 \003(\0132\031."
  "CLobbyTimedRewardDetails\022.\n\021xp_reward_de"
  "tails\030\004 \003(\0132\023.CSODOTALobbyMember\022\020\n\010leag"
  "ueid\030\005 \001(\r\022\034\n\024metadata_private_key\030\007 \001(\007"
  "\022%\n\rmatch_details\030\010 \001(\0132\016.CMsgDOTAMatch\022"
  "F\n\020players_metadata\030\t \003(\0132,.CMsgGameMatc"
  "hSignoutResponse.PlayerMetadata\022\033\n\010mvp_d"
  "ata\030\n \001(\0132\t.CMvpData\022\026\n\016ow_private_key\030\013"
  " \001(\006\022\017\n\007ow_salt\030\014 \001(\007\022\024\n\014ow_replay_id\030\r "
  "\001(\004\032\264\002\n\016PlayerMetadata\022\017\n\007hero_id\030\001 \001(\r\022"
  "\025\n\ravg_kills_x16\030\002 \001(\r\022\026\n\016avg_deaths_x16"
  "\030\003 \001(\r\022\027\n\017avg_assists_x16\030\004 \001(\r\022\023\n\013avg_g"
  "pm_x16\030\005 \001(\r\022\023\n\013avg_xpm_x16\030\006 \001(\r\022\026\n\016bes"
  "t_kills_x16\030\007 \001(\r\022\030\n\020best_assists_x16\030\010 "
  "\001(\r\022\024\n\014best_gpm_x16\030\t \001(\r\022\024\n\014best_xpm_x1"
  "6\030\n \001(\r\022\022\n\nwin_streak\030\013 \001(\r\022\027\n\017best_win_"
  "streak\030\014 \001(\r\022\024\n\014games_played\030\r \001(\r\"S\n\030CM"
  "sgTimedRewardContainer\0227\n\024timed_reward_d"
  "etails\030\001 \003(\0132\031.CLobbyTimedRewardDetails\""
  "\205\001\n%CMsgGameMatchSignOutPermissionReques"
  "t\022\026\n\016server_version\030\001 \001(\r\022\025\n\rlocal_attem"
  "pt\030\002 \001(\r\022\025\n\rtotal_attempt\030\003 \001(\r\022\026\n\016secon"
  "ds_waited\030\004 \001(\r\"\213\001\n&CMsgGameMatchSignOut"
  "PermissionResponse\022!\n\022permission_granted"
  "\030\001 \001(\010:\005false\022\036\n\017abandon_signout\030\002 \001(\010:\005"
  "false\022\036\n\023retry_delay_seconds\030\003 \001(\r:\0010\"\237\001"
  "\n!CMsgGameMatchSignOutEventGameData\022(\n\010e"
  "vent_id\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\021\n"
  "\tgame_name\030\002 \001(\t\022\020\n\010map_name\030\003 \001(\t\022\027\n\017ev"
  "ent_game_data\030\004 \001(\014\022\022\n\nstart_time\030\005 \001(\r\""
  "\340\005\n\034CMsgGameMatchSignOutPerfData\022\032\n\022aver"
  "age_frame_time\030\001 \003(\002\022\026\n\016max_frame_time\030\002"
  " \003(\002\022!\n\031server_average_frame_time\030\003 \001(\002\022"
  "\035\n\025server_max_frame_time\030\004 \001(\002\022\034\n\024averag"
  "e_compute_time\030\005 \003(\002\022\030\n\020max_compute_time"
  "\030\006 \003(\002\022 \n\030average_client_tick_time\030\007 \003(\002"
  "\022\034\n\024max_client_tick_time\030\010 \003(\002\022$\n\034averag"
  "e_client_simulate_time\030\t \003(\002\022 \n\030max_clie"
  "nt_simulate_time\030\n \003(\002\022\033\n\023average_output"
  "_time\030\013 \003(\002\022\027\n\017max_output_time\030\014 \003(\002\0223\n+"
  "average_wait_for_rendering_to_complete_t"
  "ime\030\r \003(\002\022/\n\'max_wait_for_rendering_to_c"
  "omplete_time\030\016 \003(\002\022\031\n\021average_swap_time\030"
  "\017 \003(\002\022\025\n\rmax_swap_time\030\020 \003(\002\022!\n\031average_"
  "frame_update_time\030\021 \003(\002\022\035\n\025max_frame_upd"
  "ate_time\030\022 \003(\002\022\031\n\021average_idle_time\030\023 \003("
  "\002\022\025\n\rmax_idle_time\030\024 \003(\002\022%\n\035average_inpu"
  "t_processing_time\030\025 \003(\002\022!\n\031max_input_pro"
  "cessing_time\030\026 \003(\002\"H\n\033CMsgGameMatchSignO"
  "utBanData\022\021\n\thero_bans\030\001 \003(\r\022\026\n\016hero_ban"
  "_votes\030\002 \003(\r\"\320\n\n\034CMsgDOTALiveScoreboardU"
  "pdate\022\025\n\rtournament_id\030\001 \001(\r\022\032\n\022tourname"
  "nt_game_id\030\002 \001(\r\022\020\n\010duration\030\003 \001(\002\022\022\n\nhl"
  "tv_delay\030\004 \001(\005\0225\n\tteam_good\030\005 \001(\0132\".CMsg"
  "DOTALiveScoreboardUpdate.Team\0224\n\010team_ba"
  "d\030\006 \001(\0132\".CMsgDOTALiveScoreboardUpdate.T"
  "eam\022\034\n\024roshan_respawn_timer\030\007 \001(\r\022\021\n\tlea"
  "gue_id\030\010 \001(\r\022\020\n\010match_id\030\t \001(\004\032\246\010\n\004Team\022"
  ":\n\007players\030\001 \003(\0132).CMsgDOTALiveScoreboar"
  "dUpdate.Team.Player\022\r\n\005score\030\002 \001(\r\022\023\n\013to"
  "wer_state\030\003 \001(\r\022\026\n\016barracks_state\030\004 \001(\r\022"
  "\022\n\nhero_picks\030\005 \003(\r\022\021\n\thero_bans\030\006 \003(\r\032\376"
  "\006\n\006Player\022\023\n\013player_slot\030\001 \001(\r\022\023\n\013player"
  "_name\030\002 \001(\t\022\021\n\thero_name\030\003 \001(\t\022\017\n\007hero_i"
  "d\030\004 \001(\r\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001(\r\022\017"
  "\n\007assists\030\007 \001(\r\022\021\n\tlast_hits\030\010 \001(\r\022\016\n\006de"
  "nies\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\r\n\005level\030\013 \001(\r\022"
  "\024\n\014gold_per_min\030\014 \001(\002\022\022\n\nxp_per_min\030\r \001("
  "\002\022s\n\016ultimate_state\030\016 \001(\0162;.CMsgDOTALive"
  "ScoreboardUpdate.Team.Player.DOTAUltimat"
  "eState:\036k_EDOTAUltimateStateNotLearned\022\031"
  "\n\021ultimate_cooldown\030\017 \001(\002\022\021\n\005item0\030\020 \001(\005"
  ":\002-1\022\021\n\005item1\030\021 \001(\005:\002-1\022\021\n\005item2\030\022 \001(\005:\002"
  "-1\022\021\n\005item3\030\023 \001(\005:\002-1\022\021\n\005item4\030\024 \001(\005:\002-1"
  "\022\021\n\005item5\030\025 \001(\005:\002-1\022\025\n\rrespawn_timer\030\026 \001"
  "(\r\022\022\n\naccount_id\030\027 \001(\r\022\022\n\nposition_x\030\030 \001"
  "(\002\022\022\n\nposition_y\030\031 \001(\002\022\021\n\tnet_worth\030\032 \001("
  "\r\022H\n\tabilities\030\033 \003(\01325.CMsgDOTALiveScore"
  "boardUpdate.Team.Player.HeroAbility\032<\n\013H"
  "eroAbility\022\026\n\nability_id\030\001 \001(\005:\002-1\022\025\n\rab"
  "ility_level\030\002 \001(\r\"\233\001\n\021DOTAUltimateState\022"
  "\"\n\036k_EDOTAUltimateStateNotLearned\020\000\022 \n\034k"
  "_EDOTAUltimateStateCooldown\020\001\022!\n\035k_EDOTA"
  "UltimateStateNeedsMana\020\002\022\035\n\031k_EDOTAUltim"
  "ateStateReady\020\003\"p\n)CMsgServerToGCRequest"
  "BatchPlayerResources\022\027\n\013account_ids\030\001 \003("
  "\rB\002\020\001\022\026\n\nrank_types\030\004 \003(\rB\002\020\001\022\022\n\nlobby_t"
  "ype\030\005 \001(\005\"\267\002\n1CMsgServerToGCRequestBatch"
  "PlayerResourcesResponse\022J\n\007results\030\006 \003(\013"
  "29.CMsgServerToGCRequestBatchPlayerResou"
  "rcesResponse.Result\032\265\001\n\006Result\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\014\n\004rank\030\004 \001(\r\022\027\n\017rank_calibra"
  "ted\030\005 \001(\010\022\024\n\014low_priority\030\006 \001(\010\022\025\n\ris_ne"
  "w_player\030\007 \001(\010\022\027\n\017is_guide_player\030\010 \001(\010\022"
  "\022\n\ncomm_level\030\t \001(\005\022\026\n\016behavior_level\030\n "
  "\001(\005\"R\n\035CMsgDOTAPlayerFailedToConnect\022\026\n\016"
  "failed_loaders\030\001 \003(\006\022\031\n\021abandoned_loader"
  "s\030\002 \003(\006\"\333\001\n\024CMsgGCToRelayConnect\022\035\n\025sour"
  "ce_tv_public_addr\030\001 \001(\r\022\036\n\026source_tv_pri"
  "vate_addr\030\002 \001(\r\022\026\n\016source_tv_port\030\003 \001(\r\022"
  "\034\n\024game_server_steam_id\030\004 \001(\004\022\024\n\014parent_"
  "count\030\005 \001(\r\022\035\n\025tv_unique_secret_code\030\006 \001"
  "(\006\022\031\n\021source_tv_steamid\030\007 \001(\006\"8\n\037CMsgGCG"
  "CToLANServerRelayConnect\022\025\n\rrelay_steami"
  "d\030\001 \001(\006\",\n\026CMsgGCBanStatusRequest\022\022\n\nacc"
  "ount_id\030\001 \001(\r\"t\n\027CMsgGCBanStatusResponse"
  "\022\016\n\006result\030\001 \001(\r\022\024\n\014low_priority\030\002 \001(\010\022\030"
  "\n\020text_chat_banned\030\003 \001(\010\022\031\n\021voice_chat_b"
  "anned\030\004 \001(\010\"\336\002\n\027CMsgTournamentItemEvent\022"
  "\031\n\021killer_account_id\030\001 \001(\007\022\031\n\021victim_acc"
  "ount_id\030\002 \001(\007\022:\n\nevent_type\030\003 \001(\0162\026.DOTA"
  "_TournamentEvents:\016TE_FIRST_BLOOD\022\020\n\010tv_"
  "delay\030\004 \001(\005\022\021\n\tdota_time\030\005 \001(\005\022\023\n\013replay"
  "_time\030\006 \001(\002\022\021\n\tloot_list\030\007 \001(\t\022\022\n\nevent_"
  "team\030\010 \001(\r\022\030\n\020multi_kill_count\030\t \001(\r\022\024\n\014"
  "winner_score\030\n \001(\r\022\023\n\013loser_score\030\013 \001(\r\022"
  "+\n\014hero_statues\030\014 \003(\0132\025.CProtoItemHeroSt"
  "atue\"v\n\037CMsgTournamentItemEventResponse\022"
  ":\n\nevent_type\030\001 \001(\0162\026.DOTA_TournamentEve"
  "nts:\016TE_FIRST_BLOOD\022\027\n\017viewers_granted\030\006"
  " \001(\r\"#\n\017CMsgTeamFanfare\022\020\n\010match_id\030\001 \001("
  "\004\"L\n\027CMsgResponseTeamFanfare\022\030\n\020fanfare_"
  "goodguys\030\001 \001(\r\022\027\n\017fanfare_badguys\030\002 \001(\r\""
  "u\n\034CMsgGameServerUploadSaveGame\022\021\n\tgame_"
  "time\030\001 \001(\r\022\026\n\016save_game_data\030\002 \001(\014\022\020\n\010lo"
  "bby_id\030\003 \001(\004\022\030\n\020player_steam_ids\030\004 \003(\004\"\266"
  "\001\n\034CMsgGameServerSaveGameResult\022D\n\006resul"
  "t\030\001 \001(\0162$.CMsgGameServerSaveGameResult.R"
  "esult:\016SaveSuccessful\"P\n\006Result\022\022\n\016SaveS"
  "uccessful\020\000\022\023\n\017SessionNotFound\020\001\022\021\n\rData"
  "baseError\020\002\022\n\n\006TooBig\020\003\",\n\031CMsgGameServe"
  "rGetLoadGame\022\017\n\007save_id\030\001 \001(\r\"9\n\037CMsgGam"
  "eServerGetLoadGameResult\022\026\n\016save_game_da"
  "ta\030\001 \001(\014\"\371\002\n\030CMsgDOTAAwardEventPoints\022;\n"
  "\014award_points\030\001 \003(\0132%.CMsgDOTAAwardEvent"
  "Points.AwardPoints\022\020\n\010match_id\030\002 \001(\004\022(\n\010"
  "event_id\030\004 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\021"
  "\n\ttimestamp\030\005 \001(\r\022\024\n\014audit_action\030\006 \001(\r\032"
  "\272\001\n\013AwardPoints\022\022\n\naccount_id\030\001 \001(\r\022\016\n\006p"
  "oints\030\002 \001(\005\022\026\n\016premium_points\030\003 \001(\005\022\026\n\016t"
  "rade_ban_time\030\005 \001(\r\022/\n eligible_for_peri"
  "odic_adjustment\030\006 \001(\010:\005false\022&\n\036point_ca"
  "p_periodic_resource_id\030\007 \001(\r\"E\n\031CMsgGCTo"
  "ServerPingRequest\022\022\n\nrequest_id\030\001 \001(\006\022\024\n"
  "\014request_time\030\002 \001(\004\"W\n\032CMsgGCToServerPin"
  "gResponse\022\022\n\nrequest_id\030\001 \001(\006\022\024\n\014request"
  "_time\030\002 \001(\004\022\017\n\007cluster\030\003 \001(\r\"\260\002\n\"CMsgSer"
  "verToGCMatchConnectionStats\022\020\n\010match_id\030"
  "\001 \001(\004\022\021\n\tregion_id\030\002 \001(\r\022\021\n\tleague_id\030\003 "
  "\001(\r\022;\n\007players\030\004 \003(\0132*.CMsgServerToGCMat"
  "chConnectionStats.Player\022\022\n\ncluster_id\030\005"
  " \001(\r\032\200\001\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\n\n\002i"
  "p\030\002 \001(\007\022\023\n\013avg_ping_ms\030\003 \001(\r\022\023\n\013packet_l"
  "oss\030\005 \001(\002\022\026\n\016ping_deviation\030\006 \001(\002\022\024\n\014ful"
  "l_resends\030\007 \001(\r\";\n CMsgServerGCUpdateSpe"
  "ctatorCount\022\027\n\017spectator_count\030\001 \001(\r\"\374\001\n"
  "\024CSerializedCombatLog\022\017\n\007version\030\001 \001(\r\0224"
  "\n\ndictionary\030\002 \001(\0132 .CSerializedCombatLo"
  "g.Dictionary\022(\n\007entries\030\003 \003(\0132\027.CMsgDOTA"
  "CombatLogEntry\032s\n\nDictionary\022<\n\007strings\030"
  "\001 \003(\0132+.CSerializedCombatLog.Dictionary."
  "DictString\032\'\n\nDictString\022\n\n\002id\030\001 \002(\r\022\r\n\005"
  "value\030\002 \002(\t\"\236\001\n CMsgServerToGCVictoryPre"
  "dictions\0229\n\007records\030\001 \003(\0132(.CMsgServerTo"
  "GCVictoryPredictions.Record\032\?\n\006Record\022\022\n"
  "\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\022\020\n\010it"
  "em_ids\030\005 \003(\004\"\035\n\033CMsgServerToGCRequestSta"
  "tus\"8\n$CMsgServerToGCRequestStatus_Respo"
  "nse\022\020\n\010response\030\001 \001(\r\"Y\n\037CMsgGCToServerE"
  "valuateToxicChat\022\031\n\021target_account_id\030\001 "
  "\001(\r\022\033\n\023reporter_account_id\030\002 \001(\r\"\214\001\n\037CMs"
  "gServerToGCEvaluateToxicChat\022\031\n\021target_a"
  "ccount_id\030\001 \001(\r\022\033\n\023reporter_account_id\030\002"
  " \001(\r\022\020\n\010match_id\030\003 \001(\006\022\021\n\ttimestamp\030\004 \003("
  "\r\022\014\n\004line\030\005 \003(\t\"\213\001\n\'CMsgServerToGCEvalua"
  "teToxicChatResponse\022\031\n\021target_account_id"
  "\030\001 \001(\r\022\033\n\023reporter_account_id\030\002 \001(\r\022\022\n\nb"
  "an_reason\030\003 \001(\r\022\024\n\014ban_duration\030\004 \001(\r\"\352\001"
  "\n\037CMsgSignOutAssassinMiniGameInfo\022\027\n\017win"
  "ning_players\030\001 \003(\006\022\026\n\016losing_players\030\002 \003"
  "(\006\022\025\n\rarcana_owners\030\003 \003(\006\022\024\n\014assassin_wo"
  "n\030\004 \001(\010\022\026\n\016target_hero_id\030\005 \001(\r\022\032\n\022contr"
  "act_completed\030\006 \001(\010\022\036\n\026contract_complete"
  "_time\030\007 \001(\002\022\025\n\rpa_is_radiant\030\010 \001(\010\"\305\001\n\033C"
  "MsgServerToGCKillSummaries\022\026\n\016ingameeven"
  "t_id\030\001 \001(\r\022;\n\tsummaries\030\002 \003(\0132(.CMsgServ"
  "erToGCKillSummaries.KillSummary\032Q\n\013KillS"
  "ummary\022\026\n\016killer_hero_id\030\001 \001(\r\022\026\n\016victim"
  "_hero_id\030\002 \001(\r\022\022\n\nkill_count\030\003 \001(\r\"\226\003\n\036C"
  "MsgGCToServerPredictionResult\022\022\n\naccount"
  "_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\017\n\007correct\030\003"
  " \001(\010\022\?\n\013predictions\030\004 \003(\0132*.CMsgGCToServ"
  "erPredictionResult.Prediction\032\373\001\n\nPredic"
  "tion\022\020\n\010item_def\030\001 \001(\r\022\023\n\013num_correct\030\002 "
  "\001(\r\022\021\n\tnum_fails\030\003 \001(\r\022Y\n\006result\030\004 \001(\01622"
  ".CMsgGCToServerPredictionResult.Predicti"
  "on.EResult:\025k_eResult_ItemGranted\022\031\n\021gra"
  "nted_item_defs\030\006 \003(\r\"=\n\007EResult\022\031\n\025k_eRe"
  "sult_ItemGranted\020\001\022\027\n\023k_eResult_Destroye"
  "d\020\002\"E\n\036CMsgServerToGCLockCharmTrading\022\022\n"
  "\naccount_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\"\340\002\n C"
  "MsgSignOutUpdatePlayerChallenge\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022>\n\tcompleted\030\002 \003(\0132+.CMsgSig"
  "nOutUpdatePlayerChallenge.Challenge\022=\n\010r"
  "erolled\030\003 \003(\0132+.CMsgSignOutUpdatePlayerC"
  "hallenge.Challenge\022\020\n\010match_id\030\004 \001(\004\022\017\n\007"
  "hero_id\030\005 \001(\r\032\205\001\n\tChallenge\022(\n\010event_id\030"
  "\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022\017\n\007slot_id"
  "\030\002 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\022\020\n\010progress\030"
  "\004 \001(\r\022\026\n\016challenge_rank\030\005 \001(\r\"s\n#CMsgSer"
  "verToGCRerollPlayerChallenge\022\022\n\naccount_"
  "id\030\001 \001(\r\0228\n\nreroll_msg\030\002 \001(\0132$.CMsgClien"
  "tToGCRerollPlayerChallenge\"\353\001\n\016CMsgSpend"
  "Wager\022\'\n\007players\030\001 \003(\0132\026.CMsgSpendWager."
  "Player\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT"
  "_ID_NONE\022\021\n\ttimestamp\030\003 \001(\r\022\020\n\010match_id\030"
  "\004 \001(\004\022\027\n\017server_steam_id\030\005 \001(\004\032H\n\006Player"
  "\022\022\n\naccount_id\030\001 \001(\r\022\r\n\005wager\030\002 \001(\r\022\033\n\023w"
  "ager_token_item_id\030\003 \001(\004\"\236\002\n\022CMsgSignOut"
  "XPCoins\022+\n\007players\030\001 \003(\0132\032.CMsgSignOutXP"
  "Coins.Player\022(\n\010event_id\030\002 \001(\0162\007.EEvent:"
  "\rEVENT_ID_NONE\022\020\n\010match_id\030\003 \001(\004\022\021\n\ttime"
  "stamp\030\004 \001(\r\032\213\001\n\006Player\022\022\n\naccount_id\030\001 \001"
  "(\r\022\021\n\txp_gained\030\002 \001(\r\022\023\n\013coins_spent\030\003 \001"
  "(\r\022\033\n\023wager_token_item_id\030\004 \001(\004\022\022\n\nrank_"
  "wager\030\005 \001(\r\022\024\n\014wager_streak\030\006 \001(\r\"\361\001\n\023CM"
  "sgSignOutBounties\022-\n\010bounties\030\001 \003(\0132\033.CM"
  "sgSignOutBounties.Bounty\022(\n\010event_id\030\002 \001"
  "(\0162\007.EEvent:\rEVENT_ID_NONE\022\020\n\010match_id\030\003"
  " \001(\004\022\021\n\ttimestamp\030\004 \001(\r\032\\\n\006Bounty\022\031\n\021iss"
  "uer_account_id\030\001 \001(\r\022\034\n\024completer_accoun"
  "t_id\030\002 \001(\r\022\031\n\021target_account_id\030\003 \001(\r\"\343\001"
  "\n CMsgSignOutCommunityGoalProgress\022(\n\010ev"
  "ent_id\030\001 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022N\n\020"
  "event_increments\030\002 \003(\01324.CMsgSignOutComm"
  "unityGoalProgress.EventGoalIncrement\032E\n\022"
  "EventGoalIncrement\022\025\n\revent_goal_id\030\001 \001("
  "\r\022\030\n\020increment_amount\030\002 \001(\r\"n\n3CMsgServe"
  "rToGCCloseCompendiumInGamePredictionVoti"
  "ng\022\020\n\010match_id\030\001 \001(\004\022\022\n\nhltv_delay\030\002 \001(\r"
  "\022\021\n\tleague_id\030\003 \001(\r\"M\n;CMsgServerToGCClo"
  "seCompendiumInGamePredictionVotingRespon"
  "se\022\016\n\006result\030\001 \001(\010\"\251\002\n/CMsgServerToGCCom"
  "pendiumInGamePredictionResults\022\020\n\010match_"
  "id\030\001 \001(\004\022R\n\007results\030\002 \003(\0132A.CMsgServerTo"
  "GCCompendiumInGamePredictionResults.Pred"
  "ictionResult\022\021\n\tleague_id\030\003 \001(\r\022\026\n\016leagu"
  "e_node_id\030\004 \001(\r\032e\n\020PredictionResult\022\025\n\rp"
  "rediction_id\030\001 \001(\r\022\030\n\020prediction_value\030\002"
  " \001(\r\022 \n\030prediction_value_is_mask\030\003 \001(\010\"\324"
  "\001\n/CMsgServerToGCCompendiumChosenInGameP"
  "redictions\022\020\n\010match_id\030\001 \001(\004\022W\n\022predicti"
  "ons_chosen\030\002 \003(\0132;.CMsgServerToGCCompend"
  "iumChosenInGamePredictions.Prediction\022\021\n"
  "\tleague_id\030\003 \001(\r\032#\n\nPrediction\022\025\n\rpredic"
  "tion_id\030\001 \001(\r\"p\n+CMsgGCToGCCompendiumInG"
  "amePredictionResults\022A\n\007results\030\001 \001(\01320."
  "CMsgServerToGCCompendiumInGamePrediction"
  "Results\"\210\004\n,CMsgServerToGCMatchPlayerIte"
  "mPurchaseHistory\022\020\n\010match_id\030\001 \001(\004\022\013\n\003mm"
  "r\030\002 \001(\r\022E\n\007players\030\003 \003(\01324.CMsgServerToG"
  "CMatchPlayerItemPurchaseHistory.Player\032\206"
  "\001\n\014ItemPurchase\022\020\n\004item\030\001 \001(\005:\002-1\022\014\n\004gol"
  "d\030\002 \001(\r\022\021\n\tnet_worth\030\003 \001(\r\022\021\n\tgame_time\030"
  "\004 \001(\r\022\027\n\017inventory_items\030\005 \003(\005\022\027\n\017talent"
  "s_skilled\030\007 \003(\010\032\350\001\n\006Player\022\023\n\013player_slo"
  "t\030\001 \001(\r\022\022\n\naccount_id\030\002 \001(\r\022\017\n\007hero_id\030\003"
  " \001(\r\022\027\n\017allied_hero_ids\030\004 \003(\r\022\026\n\016enemy_h"
  "ero_ids\030\005 \003(\r\022R\n\016item_purchases\030\006 \003(\0132:."
  "CMsgServerToGCMatchPlayerItemPurchaseHis"
  "tory.ItemPurchase\022\014\n\004lane\030\007 \001(\r\022\021\n\tis_wi"
  "nner\030\010 \001(\010\"\312\003\n0CMsgServerToGCMatchPlayer"
  "NeutralItemEquipHistory\022\020\n\010match_id\030\001 \001("
  "\004\022I\n\007players\030\002 \003(\01328.CMsgServerToGCMatch"
  "PlayerNeutralItemEquipHistory.Player\032\203\001\n"
  "\tItemEquip\022\020\n\004item\030\001 \001(\005:\002-1\022\021\n\tgame_tim"
  "e\030\002 \001(\r\022\027\n\017inventory_items\030\003 \003(\005\022\027\n\017tale"
  "nts_skilled\030\004 \003(\010\022\037\n\027available_neutral_i"
  "tems\030\005 \003(\005\032\262\001\n\006Player\022\022\n\naccount_id\030\001 \001("
  "\r\022\027\n\017allied_hero_ids\030\002 \003(\r\022\026\n\016enemy_hero"
  "_ids\030\003 \003(\r\022P\n\013item_equips\030\004 \003(\0132;.CMsgSe"
  "rverToGCMatchPlayerNeutralItemEquipHisto"
  "ry.ItemEquip\022\021\n\tis_winner\030\005 \001(\010\"\266\006\n\037CMsg"
  "ServerToGCMatchStateHistory\022\020\n\010match_id\030"
  "\001 \001(\004\022\023\n\013radiant_won\030\002 \001(\010\022\013\n\003mmr\030\003 \001(\r\022"
  "A\n\014match_states\030\004 \003(\0132+.CMsgServerToGCMa"
  "tchStateHistory.MatchState\032\264\001\n\013PlayerSta"
  "te\022\017\n\007hero_id\030\001 \001(\r\022\021\n\tnet_worth\030\002 \001(\r\022\r"
  "\n\005level\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\024\n\014respawn"
  "_time\030\005 \001(\r\022\023\n\013has_buyback\030\006 \001(\010\022\021\n\thas_"
  "aegis\030\007 \001(\010\022\022\n\nhas_rapier\030\010 \001(\010\022\020\n\010dista"
  "nce\030\t \001(\r\032\277\002\n\tTeamState\022\014\n\004team\030\001 \001(\r\022I\n"
  "\rplayer_states\030\002 \003(\0132,.CMsgServerToGCMat"
  "chStateHistory.PlayerStateB\004\340\344\035\005\022\036\n\020towe"
  "r_health_pct\030\003 \003(\rB\004\340\344\035\013\022!\n\023barracks_hea"
  "lth_pct\030\004 \003(\rB\004\340\344\035\003\022\032\n\022ancient_health_pc"
  "t\030\005 \001(\r\022\026\n\016glyph_cooldown\030\006 \001(\r\022\r\n\005kills"
  "\030\007 \001(\r\022\033\n\023creep_distance_safe\030\010 \001(\r\022\032\n\022c"
  "reep_distance_mid\030\t \001(\r\022\032\n\022creep_distanc"
  "e_off\030\n \001(\r\032\242\001\n\nMatchState\022\021\n\tgame_time\030"
  "\001 \001(\r\022A\n\rradiant_state\030\002 \001(\0132*.CMsgServe"
  "rToGCMatchStateHistory.TeamState\022>\n\ndire"
  "_state\030\003 \001(\0132*.CMsgServerToGCMatchStateH"
  "istory.TeamState\"\200\001\n\032CMsgMatchStateSteam"
  "MLEntry\022@\n\013match_state\030\001 \001(\0132+.CMsgServe"
  "rToGCMatchStateHistory.MatchState\022\013\n\003mmr"
  "\030\002 \001(\r\022\023\n\013radiant_won\030\003 \001(\010\"L\n\035CMsgLaneS"
  "electionSteamMLEntry\022\026\n\010hero_ids\030\001 \003(\rB\004"
  "\340\344\035\n\022\023\n\005lanes\030\002 \003(\rB\004\340\344\035\006\"\243\001\n CMsgAbilit"
  "ySelectionSteamMLEntry\022\013\n\003mmr\030\001 \001(\r\022\017\n\007h"
  "ero_id\030\002 \001(\r\022\034\n\016enemy_hero_ids\030\003 \003(\rB\004\340\344"
  "\035\004\022\014\n\004lane\030\004 \001(\r\022\027\n\tabilities\030\005 \003(\005B\004\340\344\035"
  "\031\022\034\n\020selected_ability\030\006 \001(\005:\002-1\"\264\001\n#CMsg"
  "ItemPurchasePregameSteamMLEntry\022\013\n\003mmr\030\001"
  " \001(\r\022\014\n\004lane\030\002 \001(\r\022\017\n\007balance\030\003 \001(\002\022\017\n\007h"
  "ero_id\030\004 \001(\r\022\035\n\017allied_hero_ids\030\005 \003(\rB\004\340"
  "\344\035\004\022\034\n\016enemy_hero_ids\030\006 \003(\rB\004\340\344\035\005\022\023\n\005ite"
  "ms\030\007 \003(\005B\004\340\344\035\t\"\301\001\n\034CMsgItemPurchaseSteam"
  "MLEntry\022\013\n\003mmr\030\001 \001(\r\022\014\n\004lane\030\002 \001(\r\022\017\n\007he"
  "ro_id\030\003 \001(\r\022\035\n\017allied_hero_ids\030\004 \003(\rB\004\340\344"
  "\035\004\022\034\n\016enemy_hero_ids\030\005 \003(\rB\004\340\344\035\005\022\023\n\005item"
  "s\030\006 \003(\005B\004\340\344\035\024\022#\n\025items_to_be_purchased\030\007"
  " \003(\005B\004\340\344\035\024\"\306\001\n$CMsgItemPurchaseSequenceS"
  "teamMLEntry\022\013\n\003mmr\030\001 \001(\r\022\014\n\004lane\030\002 \001(\r\022\017"
  "\n\007hero_id\030\003 \001(\r\022\035\n\017allied_hero_ids\030\004 \003(\r"
  "B\004\340\344\035\004\022\034\n\016enemy_hero_ids\030\005 \003(\rB\004\340\344\035\005\022\023\n\005"
  "items\030\006 \003(\005B\004\340\344\035\024\022 \n\024item_to_be_purchase"
  "d\030\007 \001(\005:\002-1\"\226\001\n%CMsgServerToGCCavernCraw"
  "lIsHeroActive\022\020\n\010event_id\030\001 \001(\r\022\022\n\naccou"
  "nt_id\030\002 \001(\r\022\"\n\025preferred_map_variant\030\003 \001"
  "(\r:\003255\022\017\n\007hero_id\030\004 \001(\r\022\022\n\nturbo_mode\030\005"
  " \001(\010\"\334\003\n$CMsgServerToGCPlayerChallengeHi"
  "story\022\020\n\010match_id\030\001 \001(\004\022\024\n\014average_rank\030"
  "\002 \001(\r\022P\n\021challenge_records\030\003 \003(\01325.CMsgS"
  "erverToGCPlayerChallengeHistory.PlayerCh"
  "allenge\032\271\002\n\017PlayerChallenge\022\022\n\naccount_i"
  "d\030\001 \001(\r\022[\n\016challenge_type\030\002 \001(\0162\034.EPlaye"
  "rChallengeHistoryType:%k_EPlayerChalleng"
  "eHistoryType_Invalid\022\025\n\rchallenge_id1\030\003 "
  "\001(\r\022\025\n\rchallenge_id2\030\004 \001(\r\022\034\n\024progress_v"
  "alue_start\030\005 \001(\r\022\032\n\022progress_value_end\030\006"
  " \001(\r\022\020\n\010team_won\030\007 \001(\010\022\022\n\naudit_data\030\010 \001"
  "(\004\022\017\n\007hero_id\030\t \001(\r\022\026\n\016rank_completed\030\n "
  "\001(\r\"\270\002\n-CMsgServerToGCCavernCrawlIsHeroA"
  "ctiveResponse\022\016\n\006result\030\001 \001(\010\022\030\n\013map_var"
  "iant\030\005 \001(\r:\003255\022\032\n\022potential_winnings\030\002 "
  "\001(\r\022N\n\013map_results\030\003 \003(\01329.CMsgServerToG"
  "CCavernCrawlIsHeroActiveResponse.MapResu"
  "lts\022%\n\035potential_plus_shard_winnings\030\004 \001"
  "(\r\032J\n\nMapResults\022\036\n\021path_id_completed\030\001 "
  "\001(\r:\003255\022\034\n\017room_id_claimed\030\002 \001(\r:\003255\";"
  "\n CMsgGCtoServerTensorflowInstance\022\027\n\017se"
  "rver_instance\030\001 \001(\r\"\343\t\n\025CMsgDetailedGame"
  "Stats\0223\n\007minutes\030\001 \003(\0132\".CMsgDetailedGam"
  "eStats.MinuteEntry\0226\n\013player_info\030\002 \003(\0132"
  "!.CMsgDetailedGameStats.PlayerInfo\0224\n\nga"
  "me_stats\030\003 \001(\0132 .CMsgDetailedGameStats.G"
  "ameStats\032\244\006\n\017PlayerStatEntry\022\031\n\021total_ea"
  "rned_gold\030\001 \001(\r\022\026\n\016total_networth\030\002 \001(\r\022"
  "\r\n\005level\030\003 \001(\r\022\021\n\ttotal_dps\030\004 \001(\r\022\023\n\013ave"
  "rage_dps\030\005 \001(\r\022\035\n\025ability_damage_output\030"
  "\006 \001(\r\022\023\n\013base_health\030\007 \001(\r\022\024\n\014total_heal"
  "th\030\010 \001(\r\022\022\n\ntotal_mana\030\t \001(\r\022*\n\"base_phy"
  "sical_damage_reduction_pct\030\n \001(\002\022+\n#tota"
  "l_physical_damage_reduction_pct\030\013 \001(\002\022)\n"
  "!base_ability_damage_reduction_pct\030\014 \001(\002"
  "\022*\n\"total_ability_damage_reduction_pct\030\r"
  " \001(\002\022\034\n\024ability_damage_block\030\016 \001(\002\022\035\n\025ph"
  "ysical_damage_block\030\017 \001(\002\022\022\n\nmana_regen\030"
  "\020 \001(\r\022\024\n\014health_regen\030\021 \001(\r\022\036\n\026physical_"
  "magic_dmg_pct\030\022 \001(\002\022\r\n\005kills\030\023 \001(\r\022\016\n\006de"
  "aths\030\024 \001(\r\022\017\n\007assists\030\025 \001(\r\022\027\n\017gold_from"
  "_kills\030\026 \001(\r\022\030\n\020gold_from_creeps\030\027 \001(\r\022\023"
  "\n\013gold_shared\030\030 \001(\r\022\025\n\rxp_from_kills\030\031 \001"
  "(\r\022\026\n\016xp_from_creeps\030\032 \001(\r\022\020\n\010total_xp\030\033"
  " \001(\r\022\025\n\rability_casts\030\034 \001(\r\022\022\n\nitem_cast"
  "s\030\035 \001(\r\022\032\n\022total_time_stunned\030\036 \001(\002\022\022\n\ni"
  "tem_count\030\037 \001(\r\032b\n\tGameStats\022\033\n\023tower_de"
  "ath_time_t1\030\001 \001(\r\022\033\n\023tower_death_time_t2"
  "\030\002 \001(\r\022\033\n\023tower_death_time_t3\030\003 \001(\r\032T\n\013M"
  "inuteEntry\022\016\n\006minute\030\001 \001(\r\0225\n\005stats\030\002 \003("
  "\0132&.CMsgDetailedGameStats.PlayerStatEntr"
  "y\032F\n\nPlayerInfo\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007h"
  "ero_id\030\002 \001(\r\022\023\n\013player_slot\030\003 \001(\r\"\356\001\n\024CM"
  "sgNeutralItemStats\0228\n\rneutral_items\030\001 \003("
  "\0132!.CMsgNeutralItemStats.NeutralItem\032\233\001\n"
  "\013NeutralItem\022\023\n\007item_id\030\001 \001(\005:\002-1\022\024\n\014tim"
  "e_dropped\030\002 \001(\r\022\014\n\004team\030\003 \001(\r\022\032\n\022time_la"
  "st_equipped\030\004 \001(\r\022\034\n\024time_last_unequippe"
  "d\030\005 \001(\r\022\031\n\021duration_equipped\030\006 \001(\r\"\252\001\n\037C"
  "MsgGCToServerLobbyHeroBanRates\022\?\n\010ban_da"
  "ta\030\001 \003(\0132-.CMsgGCToServerLobbyHeroBanRat"
  "es.HeroBanEntry\032F\n\014HeroBanEntry\022\017\n\007hero_"
  "id\030\001 \001(\r\022\021\n\tban_count\030\002 \001(\r\022\022\n\npick_coun"
  "t\030\003 \001(\r\"\311\002\n CMsgSignOutGuildContractProg"
  "ress\022J\n\020player_contracts\030\001 \003(\01320.CMsgSig"
  "nOutGuildContractProgress.PlayerContract"
  "\032U\n\034CompletedGuildEventContracts\022\020\n\010guil"
  "d_id\030\001 \001(\r\022\020\n\010event_id\030\002 \001(\r\022\021\n\tcontract"
  "s\030\003 \003(\004\032\201\001\n\016PlayerContract\022\022\n\naccount_id"
  "\030\001 \001(\r\022[\n\023completed_contracts\030\002 \003(\0132>.CM"
  "sgSignOutGuildContractProgress.Completed"
  "GuildEventContracts\"\315\002\n!CMsgSignOutGuild"
  "ChallengeProgress\022Y\n\033guild_challenges_pr"
  "ogresses\030\001 \003(\01324.CMsgSignOutGuildChallen"
  "geProgress.ChallengeProgress\032\314\001\n\021Challen"
  "geProgress\022\020\n\010guild_id\030\001 \001(\r\022\020\n\010event_id"
  "\030\002 \001(\r\022\035\n\025challenge_instance_id\030\003 \001(\r\022$\n"
  "\034challenge_instance_timestamp\030\004 \001(\r\022\037\n\027c"
  "hallenge_period_serial\030\005 \001(\r\022\020\n\010progress"
  "\030\006 \001(\r\022\033\n\023challenge_parameter\030\007 \001(\r\"\204\006\n\023"
  "CMsgSignOutMVPStats\022\020\n\010match_id\030\001 \001(\004\022\021\n"
  "\tgame_mode\030\002 \001(\r\022\024\n\014winning_team\030\003 \001(\r\022\021"
  "\n\tgame_time\030\004 \001(\002\022,\n\007players\030\005 \003(\0132\033.CMs"
  "gSignOutMVPStats.Player\032\360\004\n\006Player\022\017\n\007te"
  "am_id\030\001 \001(\r\022\032\n\022team_networth_rank\030\002 \001(\r\022"
  "\022\n\naccount_id\030\003 \001(\r\022\023\n\013player_slot\030  \001(\r"
  "\022\014\n\004rank\030! \001(\r\022\017\n\007hero_id\030\004 \001(\r\022\014\n\004role\030"
  "\005 \001(\r\022\r\n\005kills\030\006 \001(\005\022\016\n\006deaths\030\007 \001(\005\022\017\n\007"
  "assists\030\010 \001(\005\022\n\n\002xp\030\t \001(\005\022\021\n\tnet_worth\030\n"
  " \001(\005\022\032\n\022support_gold_spent\030\014 \001(\005\022\024\n\014ward"
  "s_placed\030\r \001(\005\022#\n\033wards_spotted_for_dewa"
  "rding\030\016 \001(\005\022\025\n\rcamps_stacked\030\017 \001(\005\022\021\n\tla"
  "st_hits\030\020 \001(\005\022\016\n\006denies\030\021 \001(\005\022\027\n\017buildin"
  "g_damage\030\023 \001(\005\022\024\n\014other_damage\030\024 \001(\005\022\024\n\014"
  "triple_kills\030\032 \001(\005\022\020\n\010rampages\030\034 \001(\005\022\023\n\013"
  "first_blood\030\037 \001(\005\022E\n\021kill_eater_events\030\""
  " \003(\0132*.CMsgSignOutMVPStats.Player.KillEa"
  "terEvent\022\032\n\022highest_killstreak\030# \001(\r\0324\n\016"
  "KillEaterEvent\022\022\n\nevent_type\030\001 \002(\r\022\016\n\006am"
  "ount\030\002 \002(\r\"2\n CMsgGCToServerRecordTraini"
  "ngData\022\016\n\006enable\030\001 \001(\010\"6\n\037CMsgServerToGC"
  "GetGuildContracts\022\023\n\013account_ids\030\001 \003(\r\"\260"
  "\003\n\'CMsgServerToGCGetGuildContractsRespon"
  "se\022I\n\020player_contracts\030\001 \003(\0132/.CMsgServe"
  "rToGCGetGuildContractsResponse.Player\032\221\001"
  "\n\017ContractDetails\022\023\n\013contract_id\030\001 \001(\004\022\035"
  "\n\025challenge_instance_id\030\002 \001(\r\022\033\n\023challen"
  "ge_parameter\030\003 \001(\r\022\026\n\016contract_stars\030\004 \001"
  "(\r\022\025\n\rcontract_slot\030\005 \001(\r\032\245\001\n\006Player\022\022\n\n"
  "account_id\030\001 \001(\r\022\020\n\010guild_id\030\002 \001(\r\022(\n\010ev"
  "ent_id\030\003 \001(\0162\007.EEvent:\rEVENT_ID_NONE\022K\n\t"
  "contracts\030\004 \003(\01328.CMsgServerToGCGetGuild"
  "ContractsResponse.ContractDetails\"\316\002\n\026CM"
  "sgMatchDiretideCandy\022>\n\021player_candy_dat"
  "a\030\001 \003(\0132#.CMsgMatchDiretideCandy.PlayerC"
  "andy\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVENT_I"
  "D_NONE\032-\n\014CandyDetails\022\016\n\006amount\030\001 \001(\r\022\r"
  "\n\005audit\030\002 \001(\r\032\232\001\n\013PlayerCandy\022\022\n\naccount"
  "_id\030\001 \001(\r\022\024\n\014candy_amount\030\003 \001(\r\022\"\n\032consu"
  "mes_periodic_resource\030\004 \001(\010\022=\n\017candy_bre"
  "akdown\030\005 \003(\0132$.CMsgMatchDiretideCandy.Ca"
  "ndyDetails\"\222\001\n\027CMsgGCToServerCheerData\022<"
  "\n\013cheer_types\030\001 \003(\0132\'.CMsgGCToServerChee"
  "rData.CheerTypeCount\0329\n\016CheerTypeCount\022\022"
  "\n\ncheer_type\030\001 \001(\r\022\023\n\013cheer_count\030\002 \001(\r\""
  "\250\004\n\017CMsgCheerConfig\022\026\n\016cheers_enabled\030\001 "
  "\001(\010\022\032\n\022is_valid_league_id\030\002 \001(\010\022\027\n\017windo"
  "w_duration\030\003 \001(\002\022\033\n\023window_bucket_count\030"
  "\004 \001(\r\022\035\n\025crowd_level_push_time\030\006 \001(\002\022\027\n\017"
  "crowd_level_low\030\n \001(\r\022\032\n\022crowd_level_med"
  "ium\030\013 \001(\r\022\030\n\020crowd_level_high\030\014 \001(\r\022\031\n\021c"
  "heer_scale_start\030\r \001(\002\022\031\n\021cheer_scale_sp"
  "eed\030\016 \001(\002\022\035\n\025cheer_scale_push_mark\030\017 \001(\r"
  "\022\035\n\025cheer_scale_pull_mark\030\020 \001(\r\022(\n cheer"
  "_scale_pct_of_max_cps_clamp\030\021 \001(\002\022\"\n\032che"
  "er_scale_dampener_value\030\025 \001(\002\022&\n\036cheer_s"
  "cale_dampener_lerp_time\030\026 \001(\r\022\033\n\023cheer_f"
  "actor_bronze\030\022 \001(\002\022\033\n\023cheer_factor_silve"
  "r\030\023 \001(\002\022\031\n\021cheer_factor_gold\030\024 \001(\002\"C\n\031CM"
  "sgGCToServerCheerConfig\022&\n\014cheer_config\030"
  "\001 \001(\0132\020.CMsgCheerConfig\"1\n\034CMsgServerToG"
  "CGetCheerConfig\022\021\n\tleague_id\030\001 \001(\r\"N\n$CM"
  "sgServerToGCGetCheerConfigResponse\022&\n\014ch"
  "eer_config\030\002 \001(\0132\020.CMsgCheerConfig\"3\n!CM"
  "sgGCToServerCheerScalesOverride\022\016\n\006scale"
  "s\030\001 \003(\002\"\035\n\033CMsgGCToServerGetCheerState\"o"
  "\n\022CMsgCheerTypeState\022\024\n\014cheer_counts\030\001 \003"
  "(\r\022\026\n\016max_per_second\030\002 \001(\002\022\023\n\013cheer_scal"
  "e\030\003 \001(\002\022\026\n\016override_scale\030\004 \001(\002\"q\n\016CMsgC"
  "heerState\022(\n\013cheer_types\030\001 \003(\0132\023.CMsgChe"
  "erTypeState\022\033\n\023radiant_crowd_level\030\002 \001(\r"
  "\022\030\n\020dire_crowd_level\030\003 \001(\r\"n\n\036CMsgServer"
  "ToGCReportCheerState\022&\n\014cheer_config\030\001 \001"
  "(\0132\020.CMsgCheerConfig\022$\n\013cheer_state\030\002 \001("
  "\0132\017.CMsgCheerState\"5\n\036CMsgServerToGCGetS"
  "tickerHeroes\022\023\n\013account_ids\030\001 \003(\r\"\255\001\n&CM"
  "sgServerToGCGetStickerHeroesResponse\022\?\n\007"
  "players\030\001 \003(\0132..CMsgServerToGCGetSticker"
  "HeroesResponse.Player\032B\n\006Player\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022$\n\010stickers\030\002 \001(\0132\022.CMsgStic"
  "kerHeroes\"8\n&CMsgGCToServerSetSteamLearn"
  "Inferencing\022\016\n\006enable\030\001 \001(\010\"O\n&CMsgGCToS"
  "erverSetSteamLearnKeysChanged\022%\n\004keys\030\001 "
  "\001(\0132\027.CMsgSteamLearnHMACKeys\"|\n\027CMsgStea"
  "mLearnMatchInfo\022\023\n\013average_mmr\030\001 \001(\r\022\023\n\013"
  "radiant_won\030\002 \001(\010\022\020\n\010duration\030\003 \001(\r\022\021\n\tg"
  "ame_mode\030\004 \001(\r\022\022\n\nlobby_type\030\005 \001(\r\"\177\n\035CM"
  "sgSteamLearnMatchInfoPlayer\022\023\n\013average_m"
  "mr\030\001 \001(\r\022\020\n\010team_won\030\002 \001(\010\022\020\n\010duration\030\003"
  " \001(\r\022\021\n\tgame_mode\030\004 \001(\r\022\022\n\nlobby_type\030\005 "
  "\001(\r\"\217\001\n\031CMsgSteamLearnMatchHeroes\022\036\n\020rad"
  "iant_hero_ids\030\001 \003(\rB\004\360\344\035\005\022\033\n\rdire_hero_i"
  "ds\030\002 \003(\rB\004\360\344\035\005\022\033\n\rradiant_lanes\030\003 \003(\rB\004\360"
  "\344\035\005\022\030\n\ndire_lanes\030\004 \003(\rB\004\360\344\035\005\"u\n\027CMsgSte"
  "amLearnMatchHero\022\017\n\007hero_id\030\001 \001(\r\022\014\n\004lan"
  "e\030\002 \001(\r\022\035\n\017allied_hero_ids\030\003 \003(\rB\004\360\344\035\004\022\034"
  "\n\016enemy_hero_ids\030\004 \003(\rB\004\360\344\035\005\"\224\005\n\030CMsgSte"
  "amLearnMatchState\022\021\n\tgame_time\030\001 \001(\002\022:\n\r"
  "radiant_state\030\002 \001(\0132#.CMsgSteamLearnMatc"
  "hState.TeamState\0227\n\ndire_state\030\003 \001(\0132#.C"
  "MsgSteamLearnMatchState.TeamState\032\264\001\n\013Pl"
  "ayerState\022\017\n\007hero_id\030\001 \001(\r\022\021\n\tnet_worth\030"
  "\002 \001(\r\022\r\n\005level\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\024\n\014"
  "respawn_time\030\005 \001(\r\022\023\n\013has_buyback\030\006 \001(\010\022"
  "\021\n\thas_aegis\030\007 \001(\010\022\022\n\nhas_rapier\030\010 \001(\010\022\020"
  "\n\010distance\030\t \001(\r\032\270\002\n\tTeamState\022\014\n\004team\030\001"
  " \001(\r\022B\n\rplayer_states\030\002 \003(\0132%.CMsgSteamL"
  "earnMatchState.PlayerStateB\004\360\344\035\005\022\036\n\020towe"
  "r_health_pct\030\003 \003(\rB\004\360\344\035\013\022!\n\023barracks_hea"
  "lth_pct\030\004 \003(\rB\004\360\344\035\006\022\032\n\022ancient_health_pc"
  "t\030\005 \001(\r\022\026\n\016glyph_cooldown\030\006 \001(\r\022\r\n\005kills"
  "\030\007 \001(\r\022\033\n\023creep_distance_safe\030\010 \001(\r\022\032\n\022c"
  "reep_distance_mid\030\t \001(\r\022\032\n\022creep_distanc"
  "e_off\030\n \001(\r\"\331\001\n\032CMsgSteamLearnItemPurcha"
  "se\022\023\n\007item_id\030\001 \001(\005:\002-1\022\035\n\017inventory_ite"
  "ms\030\002 \003(\005B\004\360\344\035\024\022\036\n\020purchase_history\030\003 \003(\005"
  "B\004\360\344\035\024\022\014\n\004gold\030\004 \001(\r\022\021\n\tnet_worth\030\005 \001(\r\022"
  "\027\n\017is_radiant_team\030\006 \001(\r\022\021\n\tgame_time\030\007 "
  "\001(\002\022\032\n\022is_using_dota_plus\030\010 \001(\010\"q\n\"CMsgS"
  "teamLearnPreGameItemPurchases\022\026\n\010item_id"
  "s\030\001 \003(\005B\004\360\344\035\n\022\027\n\017is_radiant_team\030\002 \001(\r\022\032"
  "\n\022is_using_dota_plus\030\003 \001(\010\"{\n!CMsgSteamL"
  "earnNeutralItemPurchase\022\023\n\007item_id\030\001 \001(\005"
  ":\002-1\022\014\n\004tier\030\002 \001(\r\022\027\n\017is_radiant_team\030\003 "
  "\001(\r\022\032\n\022is_using_dota_plus\030\004 \001(\010\"\204\001\n\032CMsg"
  "SteamLearnAbilitySkill\022\026\n\nability_id\030\001 \001"
  "(\005:\002-1\022\037\n\021skilled_abilities\030\002 \003(\005B\004\360\344\035\036\022"
  "\021\n\tgame_time\030\003 \001(\002\022\032\n\022is_using_dota_plus"
  "\030\004 \001(\010\"\317\001\n\033CMsgSteamLearnWardPlacement\0227"
  "\n\010ward_loc\030\001 \001(\0132%.CMsgSteamLearnWardPla"
  "cement.Location\022G\n\022existing_ward_locs\030\002 "
  "\003(\0132%.CMsgSteamLearnWardPlacement.Locati"
  "onB\004\360\344\035\006\022\014\n\004team\030\003 \001(\r\032 \n\010Location\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\"4\n\031CMsgSignOutMuertaMin"
  "igame\022\027\n\017event_game_data\030\001 \001(\014\"\275\001\n\023CMsgS"
  "ignOutMapStats\022,\n\007players\030\001 \003(\0132\033.CMsgSi"
  "gnOutMapStats.Player\022+\n\014global_stats\030\002 \001"
  "(\0132\025.CMsgMapStatsSnapshot\032K\n\006Player\022\022\n\na"
  "ccount_id\030\001 \001(\r\022-\n\016personal_stats\030\002 \001(\0132"
  "\025.CMsgMapStatsSnapshot*\306\001\n\032EPoorNetworkC"
  "onditionsType\022!\n\035k_EPoorNetworkCondition"
  "s_None\020\000\022$\n k_EPoorNetworkConditions_Unk"
  "nown\020\001\022+\n\'k_EPoorNetworkConditions_MassD"
  "isconnect\020\002\0222\n.k_EPoorNetworkConditions_"
  "ExcessBadQosIntervals\020\003"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fserver_2eproto_deps[10] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_econ_5fgcmessages_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_network_5fconnection_2eproto,
  &::descriptor_table_steammessages_2eproto,
  &::descriptor_table_steammessages_5fsteamlearn_2esteamworkssdk_2eproto,
  &::descriptor_table_valveextensions_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fserver_2eproto = {
    false, false, 32703, descriptor_table_protodef_dota_5fgcmessages_5fserver_2eproto,
    "dota_gcmessages_server.proto",
    &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once, descriptor_table_dota_5fgcmessages_5fserver_2eproto_deps, 10, 183,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fserver_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fserver_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fserver_2eproto(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgConnectedPlayers_SendReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[0];
}
bool CMsgConnectedPlayers_SendReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::INVALID;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::HEARTBEAT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAME_STATE;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::FIRST_BLOOD;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_CONNECTED;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_HERO;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_CONSEQUENCES;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::PLAYER_DISCONNECTED_NOCONSEQUENCES;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::GAMESTATE_TIMEOUT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::MASS_DISCONNECT;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::KILLS;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::BUILDING_STATE;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MIN;
constexpr CMsgConnectedPlayers_SendReason CMsgConnectedPlayers::SendReason_MAX;
constexpr int CMsgConnectedPlayers::SendReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[1];
}
bool CMsgGameServerInfo_ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::UNSPECIFIED;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::GAME;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::PROXY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::TENSORFLOW;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::DOTA_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::CUSTOM_GAME_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::EVENT_GAME_ONLY;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MIN;
constexpr CMsgGameServerInfo_ServerType CMsgGameServerInfo::ServerType_MAX;
constexpr int CMsgGameServerInfo::ServerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerInfo_CustomGames_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[2];
}
bool CMsgGameServerInfo_CustomGames_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::BOTH;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::NONE;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::ONLY;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::EVENT;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MIN;
constexpr CMsgGameServerInfo_CustomGames CMsgGameServerInfo::CustomGames_MAX;
constexpr int CMsgGameServerInfo::CustomGames_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[3];
}
bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_PHYSICAL;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_MAGICAL;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HERO_DAMAGE_PURE;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_MIN;
constexpr CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_MAX;
constexpr int CMsgGameMatchSignOut_CTeam_CPlayer::HeroDamageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[4];
}
bool CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNotLearned;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateCooldown;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateNeedsMana;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::k_EDOTAUltimateStateReady;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MIN;
constexpr CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_MAX;
constexpr int CMsgDOTALiveScoreboardUpdate_Team_Player::DOTAUltimateState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGameServerSaveGameResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[5];
}
bool CMsgGameServerSaveGameResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SaveSuccessful;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::SessionNotFound;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::DatabaseError;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::TooBig;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MIN;
constexpr CMsgGameServerSaveGameResult_Result CMsgGameServerSaveGameResult::Result_MAX;
constexpr int CMsgGameServerSaveGameResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCToServerPredictionResult_Prediction_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[6];
}
bool CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_ItemGranted;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::k_eResult_Destroyed;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MIN;
constexpr CMsgGCToServerPredictionResult_Prediction_EResult CMsgGCToServerPredictionResult_Prediction::EResult_MAX;
constexpr int CMsgGCToServerPredictionResult_Prediction::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPoorNetworkConditionsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fserver_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fserver_2eproto[7];
}
bool EPoorNetworkConditionsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgPoorNetworkConditions_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPoorNetworkConditions_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_bad_intervals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_peak_loss_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPoorNetworkConditions.Player)
}
CMsgPoorNetworkConditions_Player::CMsgPoorNetworkConditions_Player(const CMsgPoorNetworkConditions_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPoorNetworkConditions_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.disconnect_reason_){}
    , decltype(_impl_.num_bad_intervals_){}
    , decltype(_impl_.peak_loss_pct_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.peak_loss_pct_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.peak_loss_pct_));
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions.Player)
}

inline void CMsgPoorNetworkConditions_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.disconnect_reason_){0}
    , decltype(_impl_.num_bad_intervals_){0u}
    , decltype(_impl_.peak_loss_pct_){0u}
  };
}

CMsgPoorNetworkConditions_Player::~CMsgPoorNetworkConditions_Player() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPoorNetworkConditions_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPoorNetworkConditions_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPoorNetworkConditions_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPoorNetworkConditions.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.peak_loss_pct_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.peak_loss_pct_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPoorNetworkConditions_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_bad_intervals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_bad_intervals(&has_bits);
          _impl_.num_bad_intervals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 peak_loss_pct = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_peak_loss_pct(&has_bits);
          _impl_.peak_loss_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPoorNetworkConditions_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_disconnect_reason(), target);
  }

  // optional uint32 num_bad_intervals = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_bad_intervals(), target);
  }

  // optional uint32 peak_loss_pct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_peak_loss_pct(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions.Player)
  return target;
}

size_t CMsgPoorNetworkConditions_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPoorNetworkConditions.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 2 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

    // optional uint32 num_bad_intervals = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_bad_intervals());
    }

    // optional uint32 peak_loss_pct = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_peak_loss_pct());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPoorNetworkConditions_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPoorNetworkConditions_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPoorNetworkConditions_Player::GetClassData() const { return &_class_data_; }


void CMsgPoorNetworkConditions_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPoorNetworkConditions_Player*>(&to_msg);
  auto& from = static_cast<const CMsgPoorNetworkConditions_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPoorNetworkConditions.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_bad_intervals_ = from._impl_.num_bad_intervals_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.peak_loss_pct_ = from._impl_.peak_loss_pct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPoorNetworkConditions_Player::CopyFrom(const CMsgPoorNetworkConditions_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPoorNetworkConditions.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions_Player::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions_Player::InternalSwap(CMsgPoorNetworkConditions_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _impl_.peak_loss_pct_)
      + sizeof(CMsgPoorNetworkConditions_Player::_impl_.peak_loss_pct_)
      - PROTOBUF_FIELD_OFFSET(CMsgPoorNetworkConditions_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPoorNetworkConditions_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[0]);
}

// ===================================================================

class CMsgPoorNetworkConditions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPoorNetworkConditions>()._impl_._has_bits_);
  static void set_has_detection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPoorNetworkConditions)
}
CMsgPoorNetworkConditions::CMsgPoorNetworkConditions(const CMsgPoorNetworkConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPoorNetworkConditions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.detection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.detection_type_ = from._impl_.detection_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgPoorNetworkConditions)
}

inline void CMsgPoorNetworkConditions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.detection_type_){0}
  };
}

CMsgPoorNetworkConditions::~CMsgPoorNetworkConditions() {
  // @@protoc_insertion_point(destructor:CMsgPoorNetworkConditions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPoorNetworkConditions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgPoorNetworkConditions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPoorNetworkConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPoorNetworkConditions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.detection_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPoorNetworkConditions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPoorNetworkConditionsType_IsValid(val))) {
            _internal_set_detection_type(static_cast<::EPoorNetworkConditionsType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgPoorNetworkConditions.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPoorNetworkConditions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPoorNetworkConditions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_detection_type(), target);
  }

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPoorNetworkConditions)
  return target;
}

size_t CMsgPoorNetworkConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPoorNetworkConditions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPoorNetworkConditions.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EPoorNetworkConditionsType detection_type = 1 [default = k_EPoorNetworkConditions_None];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_detection_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPoorNetworkConditions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPoorNetworkConditions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPoorNetworkConditions::GetClassData() const { return &_class_data_; }


void CMsgPoorNetworkConditions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPoorNetworkConditions*>(&to_msg);
  auto& from = static_cast<const CMsgPoorNetworkConditions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPoorNetworkConditions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_detection_type()) {
    _this->_internal_set_detection_type(from._internal_detection_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPoorNetworkConditions::CopyFrom(const CMsgPoorNetworkConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPoorNetworkConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPoorNetworkConditions::IsInitialized() const {
  return true;
}

void CMsgPoorNetworkConditions::InternalSwap(CMsgPoorNetworkConditions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.detection_type_, other->_impl_.detection_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPoorNetworkConditions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[1]);
}

// ===================================================================

class CMsgGameserverCrash::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameserverCrash>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sentinel_save_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgGameserverCrash::CMsgGameserverCrash(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameserverCrash)
}
CMsgGameserverCrash::CMsgGameserverCrash(const CMsgGameserverCrash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameserverCrash* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.game_state_){}
    , decltype(_impl_.sentinel_save_time_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.server_public_ip_addr_){}
    , decltype(_impl_.server_port_){}
    , decltype(_impl_.server_cluster_){}
    , decltype(_impl_.pid_){}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.tournament_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tournament_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.tournament_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameserverCrash)
}

inline void CMsgGameserverCrash::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.game_state_){0}
    , decltype(_impl_.sentinel_save_time_){0u}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.server_public_ip_addr_){0u}
    , decltype(_impl_.server_port_){0u}
    , decltype(_impl_.server_cluster_){0u}
    , decltype(_impl_.pid_){0u}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.engine_){0u}
    , decltype(_impl_.tournament_id_){0u}
  };
}

CMsgGameserverCrash::~CMsgGameserverCrash() {
  // @@protoc_insertion_point(destructor:CMsgGameserverCrash)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameserverCrash::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameserverCrash::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameserverCrash::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameserverCrash)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_cluster_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.server_cluster_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.pid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tournament_id_) -
        reinterpret_cast<char*>(&_impl_.pid_)) + sizeof(_impl_.tournament_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameserverCrash::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 sentinel_save_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_sentinel_save_time(&has_bits);
          _impl_.sentinel_save_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 server_public_ip_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          _impl_.server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_server_cluster(&has_bits);
          _impl_.server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pid(&has_bits);
          _impl_.pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 engine = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_engine(&has_bits);
          _impl_.engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tournament_id(&has_bits);
          _impl_.tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameserverCrash::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameserverCrash)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_lobby_id(), target);
  }

  // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_game_state(), target);
  }

  // optional fixed32 sentinel_save_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_sentinel_save_time(), target);
  }

  // optional fixed64 server_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_server_steam_id(), target);
  }

  // optional fixed32 server_public_ip_addr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(6, this->_internal_server_public_ip_addr(), target);
  }

  // optional uint32 server_port = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_server_port(), target);
  }

  // optional uint32 server_cluster = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_cluster(), target);
  }

  // optional uint32 pid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pid(), target);
  }

  // optional uint32 engine = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_engine(), target);
  }

  // optional fixed64 custom_game_id = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_custom_game_id(), target);
  }

  // optional uint32 tournament_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tournament_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameserverCrash)
  return target;
}

size_t CMsgGameserverCrash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameserverCrash)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .DOTA_GameState game_state = 3 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional fixed32 sentinel_save_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_steam_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_public_ip_addr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 server_cluster = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_cluster());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint32 pid = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pid());
    }

    // optional fixed64 custom_game_id = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 engine = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_engine());
    }

    // optional uint32 tournament_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameserverCrash::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameserverCrash::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameserverCrash::GetClassData() const { return &_class_data_; }


void CMsgGameserverCrash::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameserverCrash*>(&to_msg);
  auto& from = static_cast<const CMsgGameserverCrash&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameserverCrash)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_state_ = from._impl_.game_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.sentinel_save_time_ = from._impl_.sentinel_save_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_public_ip_addr_ = from._impl_.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_cluster_ = from._impl_.server_cluster_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pid_ = from._impl_.pid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.engine_ = from._impl_.engine_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tournament_id_ = from._impl_.tournament_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameserverCrash::CopyFrom(const CMsgGameserverCrash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameserverCrash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameserverCrash::IsInitialized() const {
  return true;
}

void CMsgGameserverCrash::InternalSwap(CMsgGameserverCrash* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameserverCrash, _impl_.tournament_id_)
      + sizeof(CMsgGameserverCrash::_impl_.tournament_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameserverCrash, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameserverCrash::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[2]);
}

// ===================================================================

class CMsgConnectedPlayers_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectedPlayers_Player>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgLeaverState& leaver_state(const CMsgConnectedPlayers_Player* msg);
  static void set_has_leaver_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgLeaverState&
CMsgConnectedPlayers_Player::_Internal::leaver_state(const CMsgConnectedPlayers_Player* msg) {
  return *msg->_impl_.leaver_state_;
}
void CMsgConnectedPlayers_Player::clear_leaver_state() {
  if (_impl_.leaver_state_ != nullptr) _impl_.leaver_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectedPlayers.Player)
}
CMsgConnectedPlayers_Player::CMsgConnectedPlayers_Player(const CMsgConnectedPlayers_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgConnectedPlayers_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaver_state_){nullptr}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.disconnect_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaver_state()) {
    _this->_impl_.leaver_state_ = new ::CMsgLeaverState(*from._impl_.leaver_state_);
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers.Player)
}

inline void CMsgConnectedPlayers_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaver_state_){nullptr}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.disconnect_reason_){0}
  };
}

CMsgConnectedPlayers_Player::~CMsgConnectedPlayers_Player() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgConnectedPlayers_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.leaver_state_;
}

void CMsgConnectedPlayers_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgConnectedPlayers_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectedPlayers.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.leaver_state_ != nullptr);
    _impl_.leaver_state_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.disconnect_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectedPlayers_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLeaverState leaver_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaver_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgConnectedPlayers_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional .CMsgLeaverState leaver_state = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::leaver_state(this),
        _Internal::leaver_state(this).GetCachedSize(), target, stream);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_disconnect_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers.Player)
  return target;
}

size_t CMsgConnectedPlayers_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectedPlayers.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgLeaverState leaver_state = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.leaver_state_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 4 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgConnectedPlayers_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgConnectedPlayers_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgConnectedPlayers_Player::GetClassData() const { return &_class_data_; }


void CMsgConnectedPlayers_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgConnectedPlayers_Player*>(&to_msg);
  auto& from = static_cast<const CMsgConnectedPlayers_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectedPlayers.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_leaver_state()->::CMsgLeaverState::MergeFrom(
          from._internal_leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgConnectedPlayers_Player::CopyFrom(const CMsgConnectedPlayers_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectedPlayers.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_Player::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers_Player::InternalSwap(CMsgConnectedPlayers_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_Player, _impl_.disconnect_reason_)
      + sizeof(CMsgConnectedPlayers_Player::_impl_.disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_Player, _impl_.leaver_state_)>(
          reinterpret_cast<char*>(&_impl_.leaver_state_),
          reinterpret_cast<char*>(&other->_impl_.leaver_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectedPlayers_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[3]);
}

// ===================================================================

class CMsgConnectedPlayers_PlayerDraft::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectedPlayers_PlayerDraft>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgConnectedPlayers_PlayerDraft::CMsgConnectedPlayers_PlayerDraft(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectedPlayers.PlayerDraft)
}
CMsgConnectedPlayers_PlayerDraft::CMsgConnectedPlayers_PlayerDraft(const CMsgConnectedPlayers_PlayerDraft& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgConnectedPlayers_PlayerDraft* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.team_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_slot_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.team_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers.PlayerDraft)
}

inline void CMsgConnectedPlayers_PlayerDraft::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.team_slot_){0}
  };
}

CMsgConnectedPlayers_PlayerDraft::~CMsgConnectedPlayers_PlayerDraft() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers.PlayerDraft)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgConnectedPlayers_PlayerDraft::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgConnectedPlayers_PlayerDraft::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgConnectedPlayers_PlayerDraft::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectedPlayers.PlayerDraft)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_slot_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.team_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectedPlayers_PlayerDraft::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team = 2 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 team_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team_slot(&has_bits);
          _impl_.team_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgConnectedPlayers_PlayerDraft::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers.PlayerDraft)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional .DOTA_GC_TEAM team = 2 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_team(), target);
  }

  // optional int32 team_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers.PlayerDraft)
  return target;
}

size_t CMsgConnectedPlayers_PlayerDraft::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectedPlayers.PlayerDraft)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .DOTA_GC_TEAM team = 2 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional int32 team_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_team_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgConnectedPlayers_PlayerDraft::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgConnectedPlayers_PlayerDraft::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgConnectedPlayers_PlayerDraft::GetClassData() const { return &_class_data_; }


void CMsgConnectedPlayers_PlayerDraft::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgConnectedPlayers_PlayerDraft*>(&to_msg);
  auto& from = static_cast<const CMsgConnectedPlayers_PlayerDraft&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectedPlayers.PlayerDraft)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_slot_ = from._impl_.team_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgConnectedPlayers_PlayerDraft::CopyFrom(const CMsgConnectedPlayers_PlayerDraft& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectedPlayers.PlayerDraft)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers_PlayerDraft::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers_PlayerDraft::InternalSwap(CMsgConnectedPlayers_PlayerDraft* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_PlayerDraft, _impl_.team_slot_)
      + sizeof(CMsgConnectedPlayers_PlayerDraft::_impl_.team_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers_PlayerDraft, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectedPlayers_PlayerDraft::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[4]);
}

// ===================================================================

class CMsgConnectedPlayers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConnectedPlayers>()._impl_._has_bits_);
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_first_blood_happened(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgConnectedPlayers* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_send_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_radiant_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dire_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radiant_lead(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgPoorNetworkConditions&
CMsgConnectedPlayers::_Internal::poor_network_conditions(const CMsgConnectedPlayers* msg) {
  return *msg->_impl_.poor_network_conditions_;
}
CMsgConnectedPlayers::CMsgConnectedPlayers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgConnectedPlayers)
}
CMsgConnectedPlayers::CMsgConnectedPlayers(const CMsgConnectedPlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgConnectedPlayers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connected_players_){from._impl_.connected_players_}
    , decltype(_impl_.disconnected_players_){from._impl_.disconnected_players_}
    , decltype(_impl_.player_draft_){from._impl_.player_draft_}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.game_state_){}
    , decltype(_impl_.first_blood_happened_){}
    , decltype(_impl_.send_reason_){}
    , decltype(_impl_.radiant_kills_){}
    , decltype(_impl_.dire_kills_){}
    , decltype(_impl_.radiant_lead_){}
    , decltype(_impl_.building_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_poor_network_conditions()) {
    _this->_impl_.poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from._impl_.poor_network_conditions_);
  }
  ::memcpy(&_impl_.game_state_, &from._impl_.game_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.building_state_) -
    reinterpret_cast<char*>(&_impl_.game_state_)) + sizeof(_impl_.building_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgConnectedPlayers)
}

inline void CMsgConnectedPlayers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connected_players_){arena}
    , decltype(_impl_.disconnected_players_){arena}
    , decltype(_impl_.player_draft_){arena}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.game_state_){0}
    , decltype(_impl_.first_blood_happened_){false}
    , decltype(_impl_.send_reason_){0}
    , decltype(_impl_.radiant_kills_){0u}
    , decltype(_impl_.dire_kills_){0u}
    , decltype(_impl_.radiant_lead_){0}
    , decltype(_impl_.building_state_){0u}
  };
}

CMsgConnectedPlayers::~CMsgConnectedPlayers() {
  // @@protoc_insertion_point(destructor:CMsgConnectedPlayers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgConnectedPlayers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connected_players_.~RepeatedPtrField();
  _impl_.disconnected_players_.~RepeatedPtrField();
  _impl_.player_draft_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.poor_network_conditions_;
}

void CMsgConnectedPlayers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgConnectedPlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConnectedPlayers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connected_players_.Clear();
  _impl_.disconnected_players_.Clear();
  _impl_.player_draft_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.poor_network_conditions_ != nullptr);
    _impl_.poor_network_conditions_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.game_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.building_state_) -
        reinterpret_cast<char*>(&_impl_.game_state_)) + sizeof(_impl_.building_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConnectedPlayers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgConnectedPlayers.Player connected_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connected_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameState_IsValid(val))) {
            _internal_set_game_state(static_cast<::DOTA_GameState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool first_blood_happened = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_first_blood_happened(&has_bits);
          _impl_.first_blood_happened_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_disconnected_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgConnectedPlayers_SendReason_IsValid(val))) {
            _internal_set_send_reason(static_cast<::CMsgConnectedPlayers_SendReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radiant_kills = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_radiant_kills(&has_bits);
          _impl_.radiant_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_kills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_dire_kills(&has_bits);
          _impl_.dire_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 radiant_lead = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_radiant_lead(&has_bits);
          _impl_.radiant_lead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 building_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_building_state(&has_bits);
          _impl_.building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgConnectedPlayers.PlayerDraft player_draft = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_draft(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgConnectedPlayers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConnectedPlayers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_connected_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_connected_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_state(), target);
  }

  // optional bool first_blood_happened = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_first_blood_happened(), target);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_disconnected_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_disconnected_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_send_reason(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::poor_network_conditions(this),
        _Internal::poor_network_conditions(this).GetCachedSize(), target, stream);
  }

  // optional uint32 radiant_kills = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_radiant_kills(), target);
  }

  // optional uint32 dire_kills = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_dire_kills(), target);
  }

  // optional int32 radiant_lead = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_radiant_lead(), target);
  }

  // optional uint32 building_state = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_building_state(), target);
  }

  // repeated .CMsgConnectedPlayers.PlayerDraft player_draft = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_draft_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_draft(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConnectedPlayers)
  return target;
}

size_t CMsgConnectedPlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConnectedPlayers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgConnectedPlayers.Player connected_players = 1;
  total_size += 1UL * this->_internal_connected_players_size();
  for (const auto& msg : this->_impl_.connected_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgConnectedPlayers.Player disconnected_players = 7;
  total_size += 1UL * this->_internal_disconnected_players_size();
  for (const auto& msg : this->_impl_.disconnected_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgConnectedPlayers.PlayerDraft player_draft = 16;
  total_size += 2UL * this->_internal_player_draft_size();
  for (const auto& msg : this->_impl_.player_draft_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgPoorNetworkConditions poor_network_conditions = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poor_network_conditions_);
    }

    // optional .DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
    }

    // optional bool first_blood_happened = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .CMsgConnectedPlayers.SendReason send_reason = 8 [default = INVALID];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_send_reason());
    }

    // optional uint32 radiant_kills = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radiant_kills());
    }

    // optional uint32 dire_kills = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dire_kills());
    }

    // optional int32 radiant_lead = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_radiant_lead());
    }

    // optional uint32 building_state = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_building_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgConnectedPlayers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgConnectedPlayers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgConnectedPlayers::GetClassData() const { return &_class_data_; }


void CMsgConnectedPlayers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgConnectedPlayers*>(&to_msg);
  auto& from = static_cast<const CMsgConnectedPlayers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgConnectedPlayers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.connected_players_.MergeFrom(from._impl_.connected_players_);
  _this->_impl_.disconnected_players_.MergeFrom(from._impl_.disconnected_players_);
  _this->_impl_.player_draft_.MergeFrom(from._impl_.player_draft_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(
          from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_state_ = from._impl_.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.first_blood_happened_ = from._impl_.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.send_reason_ = from._impl_.send_reason_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.radiant_kills_ = from._impl_.radiant_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dire_kills_ = from._impl_.dire_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.radiant_lead_ = from._impl_.radiant_lead_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.building_state_ = from._impl_.building_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgConnectedPlayers::CopyFrom(const CMsgConnectedPlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConnectedPlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConnectedPlayers::IsInitialized() const {
  return true;
}

void CMsgConnectedPlayers::InternalSwap(CMsgConnectedPlayers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.connected_players_.InternalSwap(&other->_impl_.connected_players_);
  _impl_.disconnected_players_.InternalSwap(&other->_impl_.disconnected_players_);
  _impl_.player_draft_.InternalSwap(&other->_impl_.player_draft_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers, _impl_.building_state_)
      + sizeof(CMsgConnectedPlayers::_impl_.building_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgConnectedPlayers, _impl_.poor_network_conditions_)>(
          reinterpret_cast<char*>(&_impl_.poor_network_conditions_),
          reinterpret_cast<char*>(&other->_impl_.poor_network_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConnectedPlayers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[5]);
}

// ===================================================================

class CMsgGameServerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerInfo>()._impl_._has_bits_);
  static void set_has_server_public_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_private_ip_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assigned_server_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_legacy_server_steamdatagram_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_server_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_hibernation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_server_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_loadavg(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_tv_broadcast_time(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_server_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_relay_connected_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_relay_slots_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_relays_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_relay_clients_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_relayed_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_parent_relay_count(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tv_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_allow_custom_games(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_build_version(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tf_server_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_srcds_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_dev_force_server_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_is_recording_match_training_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

CMsgGameServerInfo::CMsgGameServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerInfo)
}
CMsgGameServerInfo::CMsgGameServerInfo(const CMsgGameServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_key_){}
    , decltype(_impl_.legacy_server_steamdatagram_address_){}
    , decltype(_impl_.server_public_ip_addr_){}
    , decltype(_impl_.server_private_ip_addr_){}
    , decltype(_impl_.server_port_){}
    , decltype(_impl_.server_tv_port_){}
    , decltype(_impl_.server_type_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.server_loadavg_){}
    , decltype(_impl_.server_tv_broadcast_time_){}
    , decltype(_impl_.server_relay_connected_steam_id_){}
    , decltype(_impl_.server_game_time_){}
    , decltype(_impl_.relay_slots_max_){}
    , decltype(_impl_.relays_connected_){}
    , decltype(_impl_.relay_clients_connected_){}
    , decltype(_impl_.relayed_game_server_steam_id_){}
    , decltype(_impl_.tv_secret_code_){}
    , decltype(_impl_.parent_relay_count_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.server_cluster_){}
    , decltype(_impl_.server_hibernation_){}
    , decltype(_impl_.dev_force_server_type_){}
    , decltype(_impl_.is_recording_match_training_data_){}
    , decltype(_impl_.assigned_server_tv_port_){}
    , decltype(_impl_.allow_custom_games_){}
    , decltype(_impl_.build_version_){}
    , decltype(_impl_.tf_server_count_){}
    , decltype(_impl_.srcds_instance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_key()) {
    _this->_impl_.server_key_.Set(from._internal_server_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.legacy_server_steamdatagram_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legacy_server_steamdatagram_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_server_steamdatagram_address()) {
    _this->_impl_.legacy_server_steamdatagram_address_.Set(from._internal_legacy_server_steamdatagram_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.server_public_ip_addr_, &from._impl_.server_public_ip_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.srcds_instance_) -
    reinterpret_cast<char*>(&_impl_.server_public_ip_addr_)) + sizeof(_impl_.srcds_instance_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerInfo)
}

inline void CMsgGameServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_key_){}
    , decltype(_impl_.legacy_server_steamdatagram_address_){}
    , decltype(_impl_.server_public_ip_addr_){0u}
    , decltype(_impl_.server_private_ip_addr_){0u}
    , decltype(_impl_.server_port_){0u}
    , decltype(_impl_.server_tv_port_){0u}
    , decltype(_impl_.server_type_){0}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.server_loadavg_){0}
    , decltype(_impl_.server_tv_broadcast_time_){0}
    , decltype(_impl_.server_relay_connected_steam_id_){uint64_t{0u}}
    , decltype(_impl_.server_game_time_){0}
    , decltype(_impl_.relay_slots_max_){0u}
    , decltype(_impl_.relays_connected_){0}
    , decltype(_impl_.relay_clients_connected_){0}
    , decltype(_impl_.relayed_game_server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.tv_secret_code_){uint64_t{0u}}
    , decltype(_impl_.parent_relay_count_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.server_cluster_){0u}
    , decltype(_impl_.server_hibernation_){false}
    , decltype(_impl_.dev_force_server_type_){false}
    , decltype(_impl_.is_recording_match_training_data_){false}
    , decltype(_impl_.assigned_server_tv_port_){0u}
    , decltype(_impl_.allow_custom_games_){0}
    , decltype(_impl_.build_version_){0u}
    , decltype(_impl_.tf_server_count_){0u}
    , decltype(_impl_.srcds_instance_){0u}
  };
  _impl_.server_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.legacy_server_steamdatagram_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legacy_server_steamdatagram_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameServerInfo::~CMsgGameServerInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_key_.Destroy();
  _impl_.legacy_server_steamdatagram_address_.Destroy();
}

void CMsgGameServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.server_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.legacy_server_steamdatagram_address_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.server_public_ip_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_region_) -
        reinterpret_cast<char*>(&_impl_.server_public_ip_addr_)) + sizeof(_impl_.server_region_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.server_loadavg_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.relayed_game_server_steam_id_) -
        reinterpret_cast<char*>(&_impl_.server_loadavg_)) + sizeof(_impl_.relayed_game_server_steam_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tv_secret_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assigned_server_tv_port_) -
        reinterpret_cast<char*>(&_impl_.tv_secret_code_)) + sizeof(_impl_.assigned_server_tv_port_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.allow_custom_games_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.srcds_instance_) -
        reinterpret_cast<char*>(&_impl_.allow_custom_games_)) + sizeof(_impl_.srcds_instance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 server_public_ip_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_server_public_ip_addr(&has_bits);
          _impl_.server_public_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 server_private_ip_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_server_private_ip_addr(&has_bits);
          _impl_.server_private_ip_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_server_port(&has_bits);
          _impl_.server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_tv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_tv_port(&has_bits);
          _impl_.server_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_server_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGameServerInfo.server_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool server_hibernation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_hibernation(&has_bits);
          _impl_.server_hibernation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerInfo_ServerType_IsValid(val))) {
            _internal_set_server_type(static_cast<::CMsgGameServerInfo_ServerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float server_loadavg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_server_loadavg(&has_bits);
          _impl_.server_loadavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_tv_broadcast_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_server_tv_broadcast_time(&has_bits);
          _impl_.server_tv_broadcast_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_game_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_server_game_time(&has_bits);
          _impl_.server_game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_relay_connected_steam_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_server_relay_connected_steam_id(&has_bits);
          _impl_.server_relay_connected_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 relay_slots_max = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_relay_slots_max(&has_bits);
          _impl_.relay_slots_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relays_connected = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_relays_connected(&has_bits);
          _impl_.relays_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relay_clients_connected = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_relay_clients_connected(&has_bits);
          _impl_.relay_clients_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 relayed_game_server_steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_relayed_game_server_steam_id(&has_bits);
          _impl_.relayed_game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_relay_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_parent_relay_count(&has_bits);
          _impl_.parent_relay_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 tv_secret_code = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _Internal::set_has_tv_secret_code(&has_bits);
          _impl_.tv_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_server_cluster(&has_bits);
          _impl_.server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assigned_server_tv_port = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_assigned_server_tv_port(&has_bits);
          _impl_.assigned_server_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerInfo_CustomGames_IsValid(val))) {
            _internal_set_allow_custom_games(static_cast<::CMsgGameServerInfo_CustomGames>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 build_version = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_build_version(&has_bits);
          _impl_.build_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tf_server_count = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tf_server_count(&has_bits);
          _impl_.tf_server_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 srcds_instance = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_srcds_instance(&has_bits);
          _impl_.srcds_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes legacy_server_steamdatagram_address = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_legacy_server_steamdatagram_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool dev_force_server_type = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_dev_force_server_type(&has_bits);
          _impl_.dev_force_server_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_recording_match_training_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_is_recording_match_training_data(&has_bits);
          _impl_.is_recording_match_training_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 server_public_ip_addr = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_server_public_ip_addr(), target);
  }

  // optional fixed32 server_private_ip_addr = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_server_private_ip_addr(), target);
  }

  // optional uint32 server_port = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_server_port(), target);
  }

  // optional uint32 server_tv_port = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_tv_port(), target);
  }

  // optional string server_key = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_key().data(), static_cast<int>(this->_internal_server_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameServerInfo.server_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_server_key(), target);
  }

  // optional bool server_hibernation = 6;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_server_hibernation(), target);
  }

  // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_server_type(), target);
  }

  // optional uint32 server_region = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_server_region(), target);
  }

  // optional float server_loadavg = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_server_loadavg(), target);
  }

  // optional float server_tv_broadcast_time = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_server_tv_broadcast_time(), target);
  }

  // optional float server_game_time = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_server_game_time(), target);
  }

  // optional fixed64 server_relay_connected_steam_id = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(12, this->_internal_server_relay_connected_steam_id(), target);
  }

  // optional uint32 relay_slots_max = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_relay_slots_max(), target);
  }

  // optional int32 relays_connected = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_relays_connected(), target);
  }

  // optional int32 relay_clients_connected = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_relay_clients_connected(), target);
  }

  // optional fixed64 relayed_game_server_steam_id = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(16, this->_internal_relayed_game_server_steam_id(), target);
  }

  // optional uint32 parent_relay_count = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_parent_relay_count(), target);
  }

  // optional fixed64 tv_secret_code = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(18, this->_internal_tv_secret_code(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_server_version(), target);
  }

  // optional uint32 server_cluster = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_server_cluster(), target);
  }

  // optional uint32 assigned_server_tv_port = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_assigned_server_tv_port(), target);
  }

  // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      23, this->_internal_allow_custom_games(), target);
  }

  // optional uint32 build_version = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_build_version(), target);
  }

  // optional uint32 tf_server_count = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tf_server_count(), target);
  }

  // optional uint32 srcds_instance = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_srcds_instance(), target);
  }

  // optional bytes legacy_server_steamdatagram_address = 27;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        27, this->_internal_legacy_server_steamdatagram_address(), target);
  }

  // optional bool dev_force_server_type = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_dev_force_server_type(), target);
  }

  // optional bool is_recording_match_training_data = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_is_recording_match_training_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerInfo)
  return target;
}

size_t CMsgGameServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_key = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_key());
    }

    // optional bytes legacy_server_steamdatagram_address = 27;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_server_steamdatagram_address());
    }

    // optional fixed32 server_public_ip_addr = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_private_ip_addr = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 server_tv_port = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_tv_port());
    }

    // optional .CMsgGameServerInfo.ServerType server_type = 7 [default = UNSPECIFIED];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_server_type());
    }

    // optional uint32 server_region = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float server_loadavg = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float server_tv_broadcast_time = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional fixed64 server_relay_connected_steam_id = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional float server_game_time = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 relay_slots_max = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_relay_slots_max());
    }

    // optional int32 relays_connected = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relays_connected());
    }

    // optional int32 relay_clients_connected = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relay_clients_connected());
    }

    // optional fixed64 relayed_game_server_steam_id = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 tv_secret_code = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional uint32 parent_relay_count = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_parent_relay_count());
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional uint32 server_cluster = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_server_cluster());
    }

    // optional bool server_hibernation = 6;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 1;
    }

    // optional bool dev_force_server_type = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_recording_match_training_data = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional uint32 assigned_server_tv_port = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assigned_server_tv_port());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional .CMsgGameServerInfo.CustomGames allow_custom_games = 23 [default = BOTH];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_allow_custom_games());
    }

    // optional uint32 build_version = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_build_version());
    }

    // optional uint32 tf_server_count = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tf_server_count());
    }

    // optional uint32 srcds_instance = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_srcds_instance());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerInfo::GetClassData() const { return &_class_data_; }


void CMsgGameServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_server_key(from._internal_server_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_legacy_server_steamdatagram_address(from._internal_legacy_server_steamdatagram_address());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.server_public_ip_addr_ = from._impl_.server_public_ip_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_private_ip_addr_ = from._impl_.server_private_ip_addr_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_port_ = from._impl_.server_port_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_tv_port_ = from._impl_.server_tv_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.server_type_ = from._impl_.server_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.server_loadavg_ = from._impl_.server_loadavg_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.server_tv_broadcast_time_ = from._impl_.server_tv_broadcast_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.server_relay_connected_steam_id_ = from._impl_.server_relay_connected_steam_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.server_game_time_ = from._impl_.server_game_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.relay_slots_max_ = from._impl_.relay_slots_max_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.relays_connected_ = from._impl_.relays_connected_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.relay_clients_connected_ = from._impl_.relay_clients_connected_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.relayed_game_server_steam_id_ = from._impl_.relayed_game_server_steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tv_secret_code_ = from._impl_.tv_secret_code_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.parent_relay_count_ = from._impl_.parent_relay_count_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.server_cluster_ = from._impl_.server_cluster_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.server_hibernation_ = from._impl_.server_hibernation_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.dev_force_server_type_ = from._impl_.dev_force_server_type_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.is_recording_match_training_data_ = from._impl_.is_recording_match_training_data_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.assigned_server_tv_port_ = from._impl_.assigned_server_tv_port_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.allow_custom_games_ = from._impl_.allow_custom_games_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.build_version_ = from._impl_.build_version_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tf_server_count_ = from._impl_.tf_server_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.srcds_instance_ = from._impl_.srcds_instance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerInfo::CopyFrom(const CMsgGameServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerInfo::IsInitialized() const {
  return true;
}

void CMsgGameServerInfo::InternalSwap(CMsgGameServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_key_, lhs_arena,
      &other->_impl_.server_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legacy_server_steamdatagram_address_, lhs_arena,
      &other->_impl_.legacy_server_steamdatagram_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, _impl_.srcds_instance_)
      + sizeof(CMsgGameServerInfo::_impl_.srcds_instance_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerInfo, _impl_.server_public_ip_addr_)>(
          reinterpret_cast<char*>(&_impl_.server_public_ip_addr_),
          reinterpret_cast<char*>(&other->_impl_.server_public_ip_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[6]);
}

// ===================================================================

class CMsgLeaverDetected::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverDetected>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgLeaverState& leaver_state(const CMsgLeaverDetected* msg);
  static void set_has_leaver_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_disconnect_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgLeaverDetected* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgLeaverState&
CMsgLeaverDetected::_Internal::leaver_state(const CMsgLeaverDetected* msg) {
  return *msg->_impl_.leaver_state_;
}
const ::CMsgPoorNetworkConditions&
CMsgLeaverDetected::_Internal::poor_network_conditions(const CMsgLeaverDetected* msg) {
  return *msg->_impl_.poor_network_conditions_;
}
void CMsgLeaverDetected::clear_leaver_state() {
  if (_impl_.leaver_state_ != nullptr) _impl_.leaver_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgLeaverDetected::CMsgLeaverDetected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverDetected)
}
CMsgLeaverDetected::CMsgLeaverDetected(const CMsgLeaverDetected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLeaverDetected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaver_state_){nullptr}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.leaver_status_){}
    , decltype(_impl_.server_cluster_){}
    , decltype(_impl_.disconnect_reason_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_leaver_state()) {
    _this->_impl_.leaver_state_ = new ::CMsgLeaverState(*from._impl_.leaver_state_);
  }
  if (from._internal_has_poor_network_conditions()) {
    _this->_impl_.poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from._impl_.poor_network_conditions_);
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.disconnect_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetected)
}

inline void CMsgLeaverDetected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.leaver_state_){nullptr}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.leaver_status_){0}
    , decltype(_impl_.server_cluster_){0u}
    , decltype(_impl_.disconnect_reason_){0}
  };
}

CMsgLeaverDetected::~CMsgLeaverDetected() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLeaverDetected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.leaver_state_;
  if (this != internal_default_instance()) delete _impl_.poor_network_conditions_;
}

void CMsgLeaverDetected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLeaverDetected::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverDetected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.leaver_state_ != nullptr);
      _impl_.leaver_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.poor_network_conditions_ != nullptr);
      _impl_.poor_network_conditions_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.disconnect_reason_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.disconnect_reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverDetected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALeaverStatus_t_IsValid(val))) {
            _internal_set_leaver_status(static_cast<::DOTALeaverStatus_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLeaverState leaver_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leaver_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_cluster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_cluster(&has_bits);
          _impl_.server_cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ENetworkDisconnectionReason_IsValid(val))) {
            _internal_set_disconnect_reason(static_cast<::ENetworkDisconnectionReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLeaverDetected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_leaver_status(), target);
  }

  // optional .CMsgLeaverState leaver_state = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::leaver_state(this),
        _Internal::leaver_state(this).GetCachedSize(), target, stream);
  }

  // optional uint32 server_cluster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_cluster(), target);
  }

  // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_disconnect_reason(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::poor_network_conditions(this),
        _Internal::poor_network_conditions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetected)
  return target;
}

size_t CMsgLeaverDetected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverDetected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgLeaverState leaver_state = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.leaver_state_);
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poor_network_conditions_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .DOTALeaverStatus_t leaver_status = 2 [default = DOTA_LEAVER_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_leaver_status());
    }

    // optional uint32 server_cluster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_cluster());
    }

    // optional .ENetworkDisconnectionReason disconnect_reason = 6 [default = NETWORK_DISCONNECT_INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_disconnect_reason());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLeaverDetected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLeaverDetected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLeaverDetected::GetClassData() const { return &_class_data_; }


void CMsgLeaverDetected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLeaverDetected*>(&to_msg);
  auto& from = static_cast<const CMsgLeaverDetected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverDetected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_leaver_state()->::CMsgLeaverState::MergeFrom(
          from._internal_leaver_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(
          from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.leaver_status_ = from._impl_.leaver_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.server_cluster_ = from._impl_.server_cluster_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.disconnect_reason_ = from._impl_.disconnect_reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLeaverDetected::CopyFrom(const CMsgLeaverDetected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverDetected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetected::IsInitialized() const {
  return true;
}

void CMsgLeaverDetected::InternalSwap(CMsgLeaverDetected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLeaverDetected, _impl_.disconnect_reason_)
      + sizeof(CMsgLeaverDetected::_impl_.disconnect_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgLeaverDetected, _impl_.leaver_state_)>(
          reinterpret_cast<char*>(&_impl_.leaver_state_),
          reinterpret_cast<char*>(&other->_impl_.leaver_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverDetected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[7]);
}

// ===================================================================

class CMsgLeaverDetectedResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeaverDetectedResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLeaverDetectedResponse)
}
CMsgLeaverDetectedResponse::CMsgLeaverDetectedResponse(const CMsgLeaverDetectedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLeaverDetectedResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeaverDetectedResponse)
}

inline void CMsgLeaverDetectedResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0u}
  };
}

CMsgLeaverDetectedResponse::~CMsgLeaverDetectedResponse() {
  // @@protoc_insertion_point(destructor:CMsgLeaverDetectedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLeaverDetectedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLeaverDetectedResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLeaverDetectedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeaverDetectedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeaverDetectedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLeaverDetectedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeaverDetectedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeaverDetectedResponse)
  return target;
}

size_t CMsgLeaverDetectedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeaverDetectedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLeaverDetectedResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLeaverDetectedResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLeaverDetectedResponse::GetClassData() const { return &_class_data_; }


void CMsgLeaverDetectedResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLeaverDetectedResponse*>(&to_msg);
  auto& from = static_cast<const CMsgLeaverDetectedResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeaverDetectedResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLeaverDetectedResponse::CopyFrom(const CMsgLeaverDetectedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeaverDetectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverDetectedResponse::IsInitialized() const {
  return true;
}

void CMsgLeaverDetectedResponse::InternalSwap(CMsgLeaverDetectedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeaverDetectedResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[8]);
}

// ===================================================================

class CMsgDOTAFantasyFinalPlayerStats::_Internal {
 public:
};

void CMsgDOTAFantasyFinalPlayerStats::clear_stats() {
  _impl_.stats_.Clear();
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyFinalPlayerStats)
}
CMsgDOTAFantasyFinalPlayerStats::CMsgDOTAFantasyFinalPlayerStats(const CMsgDOTAFantasyFinalPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAFantasyFinalPlayerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyFinalPlayerStats)
}

inline void CMsgDOTAFantasyFinalPlayerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAFantasyFinalPlayerStats::~CMsgDOTAFantasyFinalPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyFinalPlayerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAFantasyFinalPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CMsgDOTAFantasyFinalPlayerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAFantasyFinalPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyFinalPlayerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyFinalPlayerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAFantasyFinalPlayerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyFinalPlayerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyFinalPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyFinalPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyFinalPlayerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAFantasyFinalPlayerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAFantasyFinalPlayerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAFantasyFinalPlayerStats::GetClassData() const { return &_class_data_; }


void CMsgDOTAFantasyFinalPlayerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAFantasyFinalPlayerStats*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAFantasyFinalPlayerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyFinalPlayerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAFantasyFinalPlayerStats::CopyFrom(const CMsgDOTAFantasyFinalPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyFinalPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyFinalPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyFinalPlayerStats::InternalSwap(CMsgDOTAFantasyFinalPlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyFinalPlayerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[9]);
}

// ===================================================================

class CMsgDOTAFantasyLivePlayerStats::_Internal {
 public:
};

void CMsgDOTAFantasyLivePlayerStats::clear_stats() {
  _impl_.stats_.Clear();
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyLivePlayerStats)
}
CMsgDOTAFantasyLivePlayerStats::CMsgDOTAFantasyLivePlayerStats(const CMsgDOTAFantasyLivePlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAFantasyLivePlayerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyLivePlayerStats)
}

inline void CMsgDOTAFantasyLivePlayerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAFantasyLivePlayerStats::~CMsgDOTAFantasyLivePlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyLivePlayerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAFantasyLivePlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CMsgDOTAFantasyLivePlayerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAFantasyLivePlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyLivePlayerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyLivePlayerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAFantasyLivePlayerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyLivePlayerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyLivePlayerStats)
  return target;
}

size_t CMsgDOTAFantasyLivePlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyLivePlayerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAFantasyLivePlayerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAFantasyLivePlayerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAFantasyLivePlayerStats::GetClassData() const { return &_class_data_; }


void CMsgDOTAFantasyLivePlayerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAFantasyLivePlayerStats*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAFantasyLivePlayerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyLivePlayerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAFantasyLivePlayerStats::CopyFrom(const CMsgDOTAFantasyLivePlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyLivePlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyLivePlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyLivePlayerStats::InternalSwap(CMsgDOTAFantasyLivePlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyLivePlayerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[10]);
}

// ===================================================================

class CMsgServerToGCRealtimeStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRealtimeStats>()._impl_._has_bits_);
  static const ::CMsgDOTARealtimeGameStatsTerse& delayed(const CMsgServerToGCRealtimeStats* msg);
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTARealtimeGameStatsTerse&
CMsgServerToGCRealtimeStats::_Internal::delayed(const CMsgServerToGCRealtimeStats* msg) {
  return *msg->_impl_.delayed_;
}
void CMsgServerToGCRealtimeStats::clear_delayed() {
  if (_impl_.delayed_ != nullptr) _impl_.delayed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRealtimeStats)
}
CMsgServerToGCRealtimeStats::CMsgServerToGCRealtimeStats(const CMsgServerToGCRealtimeStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRealtimeStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delayed_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_delayed()) {
    _this->_impl_.delayed_ = new ::CMsgDOTARealtimeGameStatsTerse(*from._impl_.delayed_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRealtimeStats)
}

inline void CMsgServerToGCRealtimeStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delayed_){nullptr}
  };
}

CMsgServerToGCRealtimeStats::~CMsgServerToGCRealtimeStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRealtimeStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRealtimeStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.delayed_;
}

void CMsgServerToGCRealtimeStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRealtimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRealtimeStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.delayed_ != nullptr);
    _impl_.delayed_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRealtimeStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delayed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRealtimeStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRealtimeStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::delayed(this),
        _Internal::delayed(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRealtimeStats)
  return target;
}

size_t CMsgServerToGCRealtimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRealtimeStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTARealtimeGameStatsTerse delayed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delayed_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRealtimeStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRealtimeStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRealtimeStats::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRealtimeStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRealtimeStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRealtimeStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRealtimeStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delayed()) {
    _this->_internal_mutable_delayed()->::CMsgDOTARealtimeGameStatsTerse::MergeFrom(
        from._internal_delayed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRealtimeStats::CopyFrom(const CMsgServerToGCRealtimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRealtimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRealtimeStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCRealtimeStats::InternalSwap(CMsgServerToGCRealtimeStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.delayed_, other->_impl_.delayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRealtimeStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[11]);
}

// ===================================================================

class CMsgGCToServerRealtimeStatsStartStop::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerRealtimeStatsStartStop>()._impl_._has_bits_);
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerRealtimeStatsStartStop)
}
CMsgGCToServerRealtimeStatsStartStop::CMsgGCToServerRealtimeStatsStartStop(const CMsgGCToServerRealtimeStatsStartStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerRealtimeStatsStartStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delayed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.delayed_ = from._impl_.delayed_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRealtimeStatsStartStop)
}

inline void CMsgGCToServerRealtimeStatsStartStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.delayed_){false}
  };
}

CMsgGCToServerRealtimeStatsStartStop::~CMsgGCToServerRealtimeStatsStartStop() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerRealtimeStatsStartStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerRealtimeStatsStartStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerRealtimeStatsStartStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerRealtimeStatsStartStop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerRealtimeStatsStartStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delayed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerRealtimeStatsStartStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool delayed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_delayed(&has_bits);
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerRealtimeStatsStartStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerRealtimeStatsStartStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool delayed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerRealtimeStatsStartStop)
  return target;
}

size_t CMsgGCToServerRealtimeStatsStartStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerRealtimeStatsStartStop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool delayed = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerRealtimeStatsStartStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerRealtimeStatsStartStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerRealtimeStatsStartStop::GetClassData() const { return &_class_data_; }


void CMsgGCToServerRealtimeStatsStartStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerRealtimeStatsStartStop*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerRealtimeStatsStartStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerRealtimeStatsStartStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delayed()) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerRealtimeStatsStartStop::CopyFrom(const CMsgGCToServerRealtimeStatsStartStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerRealtimeStatsStartStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRealtimeStatsStartStop::IsInitialized() const {
  return true;
}

void CMsgGCToServerRealtimeStatsStartStop::InternalSwap(CMsgGCToServerRealtimeStatsStartStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.delayed_, other->_impl_.delayed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerRealtimeStatsStartStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[12]);
}

// ===================================================================

class CMsgGCToServerUpdateSteamBroadcasting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerUpdateSteamBroadcasting>()._impl_._has_bits_);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerUpdateSteamBroadcasting)
}
CMsgGCToServerUpdateSteamBroadcasting::CMsgGCToServerUpdateSteamBroadcasting(const CMsgGCToServerUpdateSteamBroadcasting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerUpdateSteamBroadcasting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.active_ = from._impl_.active_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerUpdateSteamBroadcasting)
}

inline void CMsgGCToServerUpdateSteamBroadcasting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_){false}
  };
}

CMsgGCToServerUpdateSteamBroadcasting::~CMsgGCToServerUpdateSteamBroadcasting() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerUpdateSteamBroadcasting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerUpdateSteamBroadcasting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerUpdateSteamBroadcasting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerUpdateSteamBroadcasting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerUpdateSteamBroadcasting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerUpdateSteamBroadcasting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_active(&has_bits);
          _impl_.active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerUpdateSteamBroadcasting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerUpdateSteamBroadcasting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool active = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerUpdateSteamBroadcasting)
  return target;
}

size_t CMsgGCToServerUpdateSteamBroadcasting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerUpdateSteamBroadcasting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool active = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerUpdateSteamBroadcasting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerUpdateSteamBroadcasting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerUpdateSteamBroadcasting::GetClassData() const { return &_class_data_; }


void CMsgGCToServerUpdateSteamBroadcasting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerUpdateSteamBroadcasting*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerUpdateSteamBroadcasting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_active()) {
    _this->_internal_set_active(from._internal_active());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerUpdateSteamBroadcasting::CopyFrom(const CMsgGCToServerUpdateSteamBroadcasting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerUpdateSteamBroadcasting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerUpdateSteamBroadcasting::IsInitialized() const {
  return true;
}

void CMsgGCToServerUpdateSteamBroadcasting::InternalSwap(CMsgGCToServerUpdateSteamBroadcasting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.active_, other->_impl_.active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerUpdateSteamBroadcasting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[13]);
}

// ===================================================================

class CMsgSignOutGameplayStats_CPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGameplayStats_CPlayer>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void CMsgSignOutGameplayStats_CPlayer::clear_timed_player_stats() {
  _impl_.timed_player_stats_.Clear();
}
CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats.CPlayer)
}
CMsgSignOutGameplayStats_CPlayer::CMsgSignOutGameplayStats_CPlayer(const CMsgSignOutGameplayStats_CPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGameplayStats_CPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_player_stats_){from._impl_.timed_player_stats_}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats.CPlayer)
}

inline void CMsgSignOutGameplayStats_CPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_player_stats_){arena}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgSignOutGameplayStats_CPlayer::~CMsgSignOutGameplayStats_CPlayer() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats.CPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGameplayStats_CPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timed_player_stats_.~RepeatedPtrField();
}

void CMsgSignOutGameplayStats_CPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGameplayStats_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats.CPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timed_player_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats_CPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_player_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGameplayStats_CPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats.CPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timed_player_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_timed_player_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats.CPlayer)
  return target;
}

size_t CMsgSignOutGameplayStats_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats.CPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchPlayerTimedStats timed_player_stats = 4;
  total_size += 1UL * this->_internal_timed_player_stats_size();
  for (const auto& msg : this->_impl_.timed_player_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGameplayStats_CPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGameplayStats_CPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGameplayStats_CPlayer::GetClassData() const { return &_class_data_; }


void CMsgSignOutGameplayStats_CPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGameplayStats_CPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGameplayStats_CPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats.CPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timed_player_stats_.MergeFrom(from._impl_.timed_player_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGameplayStats_CPlayer::CopyFrom(const CMsgSignOutGameplayStats_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats_CPlayer::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats_CPlayer::InternalSwap(CMsgSignOutGameplayStats_CPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.timed_player_stats_.InternalSwap(&other->_impl_.timed_player_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CPlayer, _impl_.hero_id_)
      + sizeof(CMsgSignOutGameplayStats_CPlayer::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CPlayer, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats_CPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[14]);
}

// ===================================================================

class CMsgSignOutGameplayStats_CTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGameplayStats_CTeam>()._impl_._has_bits_);
  static void set_has_is_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CMsgSignOutGameplayStats_CTeam::clear_timed_team_stats() {
  _impl_.timed_team_stats_.Clear();
}
CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats.CTeam)
}
CMsgSignOutGameplayStats_CTeam::CMsgSignOutGameplayStats_CTeam(const CMsgSignOutGameplayStats_CTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGameplayStats_CTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_team_stats_){from._impl_.timed_team_stats_}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.is_winning_team_){}
    , decltype(_impl_.is_radiant_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_winning_team_, &from._impl_.is_winning_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_radiant_team_) -
    reinterpret_cast<char*>(&_impl_.is_winning_team_)) + sizeof(_impl_.is_radiant_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats.CTeam)
}

inline void CMsgSignOutGameplayStats_CTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_team_stats_){arena}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.is_winning_team_){false}
    , decltype(_impl_.is_radiant_team_){false}
  };
}

CMsgSignOutGameplayStats_CTeam::~CMsgSignOutGameplayStats_CTeam() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats.CTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGameplayStats_CTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timed_team_stats_.~RepeatedPtrField();
  _impl_.players_.~RepeatedPtrField();
}

void CMsgSignOutGameplayStats_CTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGameplayStats_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats.CTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timed_team_stats_.Clear();
  _impl_.players_.Clear();
  ::memset(&_impl_.is_winning_team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_radiant_team_) -
      reinterpret_cast<char*>(&_impl_.is_winning_team_)) + sizeof(_impl_.is_radiant_team_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats_CTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool is_winning_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_winning_team(&has_bits);
          _impl_.is_winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_radiant_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_radiant_team(&has_bits);
          _impl_.is_radiant_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchTeamTimedStats timed_team_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_team_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGameplayStats_CTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats.CTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool is_winning_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_winning_team(), target);
  }

  // optional bool is_radiant_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_radiant_team(), target);
  }

  // repeated .CMatchTeamTimedStats timed_team_stats = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timed_team_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_timed_team_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats.CTeam)
  return target;
}

size_t CMsgSignOutGameplayStats_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats.CTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchTeamTimedStats timed_team_stats = 3;
  total_size += 1UL * this->_internal_timed_team_stats_size();
  for (const auto& msg : this->_impl_.timed_team_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSignOutGameplayStats.CPlayer players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is_winning_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_radiant_team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGameplayStats_CTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGameplayStats_CTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGameplayStats_CTeam::GetClassData() const { return &_class_data_; }


void CMsgSignOutGameplayStats_CTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGameplayStats_CTeam*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGameplayStats_CTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats.CTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timed_team_stats_.MergeFrom(from._impl_.timed_team_stats_);
  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_winning_team_ = from._impl_.is_winning_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_radiant_team_ = from._impl_.is_radiant_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGameplayStats_CTeam::CopyFrom(const CMsgSignOutGameplayStats_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats_CTeam::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats_CTeam::InternalSwap(CMsgSignOutGameplayStats_CTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.timed_team_stats_.InternalSwap(&other->_impl_.timed_team_stats_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CTeam, _impl_.is_radiant_team_)
      + sizeof(CMsgSignOutGameplayStats_CTeam::_impl_.is_radiant_team_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGameplayStats_CTeam, _impl_.is_winning_team_)>(
          reinterpret_cast<char*>(&_impl_.is_winning_team_),
          reinterpret_cast<char*>(&other->_impl_.is_winning_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats_CTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[15]);
}

// ===================================================================

class CMsgSignOutGameplayStats::_Internal {
 public:
};

CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGameplayStats)
}
CMsgSignOutGameplayStats::CMsgSignOutGameplayStats(const CMsgSignOutGameplayStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGameplayStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){from._impl_.teams_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGameplayStats)
}

inline void CMsgSignOutGameplayStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.teams_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSignOutGameplayStats::~CMsgSignOutGameplayStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGameplayStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGameplayStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
}

void CMsgSignOutGameplayStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGameplayStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGameplayStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGameplayStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGameplayStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGameplayStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGameplayStats)
  return target;
}

size_t CMsgSignOutGameplayStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGameplayStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGameplayStats.CTeam teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGameplayStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGameplayStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGameplayStats::GetClassData() const { return &_class_data_; }


void CMsgSignOutGameplayStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGameplayStats*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGameplayStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGameplayStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGameplayStats::CopyFrom(const CMsgSignOutGameplayStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGameplayStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGameplayStats::IsInitialized() const {
  return true;
}

void CMsgSignOutGameplayStats::InternalSwap(CMsgSignOutGameplayStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGameplayStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[16]);
}

// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData>()._impl_._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}
CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dota_team_){}
    , decltype(_impl_.winner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.dota_team_, &from._impl_.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.winner_) -
    reinterpret_cast<char*>(&_impl_.dota_team_)) + sizeof(_impl_.winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dota_team_){0u}
    , decltype(_impl_.winner_){false}
  };
}

CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::~CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.winner_) -
        reinterpret_cast<char*>(&_impl_.dota_team_)) + sizeof(_impl_.winner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          _impl_.dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_winner(&has_bits);
          _impl_.winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dota_team());
    }

    // optional bool winner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.dota_team_ = from._impl_.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.winner_ = from._impl_.winner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _impl_.winner_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::_impl_.winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData, _impl_.dota_team_)>(
          reinterpret_cast<char*>(&_impl_.dota_team_),
          reinterpret_cast<char*>(&other->_impl_.dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[17]);
}

// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived>()._impl_._has_bits_);
  static void set_has_pre_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_post_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
}
CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pre_reduction_){}
    , decltype(_impl_.post_reduction_){}
    , decltype(_impl_.damage_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pre_reduction_, &from._impl_.pre_reduction_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damage_type_) -
    reinterpret_cast<char*>(&_impl_.pre_reduction_)) + sizeof(_impl_.damage_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pre_reduction_){0u}
    , decltype(_impl_.post_reduction_){0u}
    , decltype(_impl_.damage_type_){0}
  };
}

CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::~CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.pre_reduction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damage_type_) -
        reinterpret_cast<char*>(&_impl_.pre_reduction_)) + sizeof(_impl_.damage_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pre_reduction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pre_reduction(&has_bits);
          _impl_.pre_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 post_reduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_post_reduction(&has_bits);
          _impl_.post_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType_IsValid(val))) {
            _internal_set_damage_type(static_cast<::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 pre_reduction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pre_reduction(), target);
  }

  // optional uint32 post_reduction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_post_reduction(), target);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_damage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pre_reduction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pre_reduction());
    }

    // optional uint32 post_reduction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_post_reduction());
    }

    // optional .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_damage_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.pre_reduction_ = from._impl_.pre_reduction_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.post_reduction_ = from._impl_.post_reduction_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damage_type_ = from._impl_.damage_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_.damage_type_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::_impl_.damage_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived, _impl_.pre_reduction_)>(
          reinterpret_cast<char*>(&_impl_.pre_reduction_),
          reinterpret_cast<char*>(&other->_impl_.pre_reduction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[18]);
}

// ===================================================================

class CMsgGameMatchSignOut_CTeam_CPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CTeam_CPlayer>()._impl_._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_xp_per_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_scaled_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_scaled_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_scaled_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_time_last_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_support_ability_value(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_claimed_farm_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_claimed_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_claimed_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_player_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_hero_pick_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hero_was_randomed(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_hero_was_dota_plus_suggestion(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_is_using_plus_guide(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_seconds_dead(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_gold_lost_to_death(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_command_count(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_mouse_click_cast_command_count(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_teleports_used(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_cavern_crawl_preferred_map_variant(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_outposts_captured(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_dewards(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_predicted_position(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_lane_outcomes(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_friendly_t1_destroyed_time(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_enemy_t1_destroyed_time(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_friendly_roshan_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_enemy_roshan_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_power_runes(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_water_runes(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_team_slot(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_time_purchased_shard(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_time_purchased_aghs(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
};

const ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData&
CMsgGameMatchSignOut_CTeam_CPlayer::_Internal::custom_game_data(const CMsgGameMatchSignOut_CTeam_CPlayer* msg) {
  return *msg->_impl_.custom_game_data_;
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_ability_upgrades() {
  _impl_.ability_upgrades_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_additional_units_inventory() {
  _impl_.additional_units_inventory_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_permanent_buffs() {
  _impl_.permanent_buffs_.Clear();
}
void CMsgGameMatchSignOut_CTeam_CPlayer::clear_player_tracked_stats() {
  _impl_.player_tracked_stats_.Clear();
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}
CMsgGameMatchSignOut_CTeam_CPlayer::CMsgGameMatchSignOut_CTeam_CPlayer(const CMsgGameMatchSignOut_CTeam_CPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CTeam_CPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.ability_upgrades_){from._impl_.ability_upgrades_}
    , decltype(_impl_.additional_units_inventory_){from._impl_.additional_units_inventory_}
    , decltype(_impl_.permanent_buffs_){from._impl_.permanent_buffs_}
    , decltype(_impl_.talent_ability_ids_){from._impl_.talent_ability_ids_}
    , decltype(_impl_.hero_damage_received_){from._impl_.hero_damage_received_}
    , decltype(_impl_.item_purchase_times_){from._impl_.item_purchase_times_}
    , decltype(_impl_.hero_damage_dealt_){from._impl_.hero_damage_dealt_}
    , decltype(_impl_.ability_draft_abilities_){from._impl_.ability_draft_abilities_}
    , decltype(_impl_.player_tracked_stats_){from._impl_.player_tracked_stats_}
    , decltype(_impl_.custom_game_data_){nullptr}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.leaver_status_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.gold_per_min_){}
    , decltype(_impl_.xp_per_minute_){}
    , decltype(_impl_.gold_spent_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.scaled_hero_damage_){}
    , decltype(_impl_.scaled_tower_damage_){}
    , decltype(_impl_.scaled_hero_healing_){}
    , decltype(_impl_.time_last_seen_){}
    , decltype(_impl_.party_id_){}
    , decltype(_impl_.support_ability_value_){}
    , decltype(_impl_.claimed_farm_gold_){}
    , decltype(_impl_.support_gold_){}
    , decltype(_impl_.claimed_denies_){}
    , decltype(_impl_.claimed_misses_){}
    , decltype(_impl_.misses_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.match_player_flags_){}
    , decltype(_impl_.hero_damage_){}
    , decltype(_impl_.tower_damage_){}
    , decltype(_impl_.hero_healing_){}
    , decltype(_impl_.hero_pick_order_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.hero_was_randomed_){}
    , decltype(_impl_.hero_was_dota_plus_suggestion_){}
    , decltype(_impl_.is_using_plus_guide_){}
    , decltype(_impl_.seconds_dead_){}
    , decltype(_impl_.gold_lost_to_death_){}
    , decltype(_impl_.command_count_){}
    , decltype(_impl_.mouse_click_cast_command_count_){}
    , decltype(_impl_.teleports_used_){}
    , decltype(_impl_.bounty_runes_){}
    , decltype(_impl_.outposts_captured_){}
    , decltype(_impl_.dewards_){}
    , decltype(_impl_.wards_placed_){}
    , decltype(_impl_.camps_stacked_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.predicted_position_){}
    , decltype(_impl_.friendly_t1_destroyed_time_){}
    , decltype(_impl_.enemy_t1_destroyed_time_){}
    , decltype(_impl_.friendly_roshan_kills_){}
    , decltype(_impl_.enemy_roshan_kills_){}
    , decltype(_impl_.power_runes_){}
    , decltype(_impl_.water_runes_){}
    , decltype(_impl_.stun_duration_){}
    , decltype(_impl_.team_number_){}
    , decltype(_impl_.team_slot_){}
    , decltype(_impl_.time_purchased_shard_){}
    , decltype(_impl_.time_purchased_aghs_){}
    , decltype(_impl_.cavern_crawl_preferred_map_variant_){}
    , decltype(_impl_.lane_outcomes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_game_data()) {
    _this->_impl_.custom_game_data_ = new ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData(*from._impl_.custom_game_data_);
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_outcomes_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.lane_outcomes_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam.CPlayer)
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.ability_upgrades_){arena}
    , decltype(_impl_.additional_units_inventory_){arena}
    , decltype(_impl_.permanent_buffs_){arena}
    , decltype(_impl_.talent_ability_ids_){arena}
    , decltype(_impl_.hero_damage_received_){arena}
    , decltype(_impl_.item_purchase_times_){arena}
    , decltype(_impl_.hero_damage_dealt_){arena}
    , decltype(_impl_.ability_draft_abilities_){arena}
    , decltype(_impl_.player_tracked_stats_){arena}
    , decltype(_impl_.custom_game_data_){nullptr}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.leaver_status_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.gold_per_min_){0u}
    , decltype(_impl_.xp_per_minute_){0u}
    , decltype(_impl_.gold_spent_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.scaled_hero_damage_){0u}
    , decltype(_impl_.scaled_tower_damage_){0u}
    , decltype(_impl_.scaled_hero_healing_){0u}
    , decltype(_impl_.time_last_seen_){0u}
    , decltype(_impl_.party_id_){uint64_t{0u}}
    , decltype(_impl_.support_ability_value_){0u}
    , decltype(_impl_.claimed_farm_gold_){0u}
    , decltype(_impl_.support_gold_){0u}
    , decltype(_impl_.claimed_denies_){0u}
    , decltype(_impl_.claimed_misses_){0u}
    , decltype(_impl_.misses_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.match_player_flags_){0u}
    , decltype(_impl_.hero_damage_){0u}
    , decltype(_impl_.tower_damage_){0u}
    , decltype(_impl_.hero_healing_){0u}
    , decltype(_impl_.hero_pick_order_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.hero_was_randomed_){false}
    , decltype(_impl_.hero_was_dota_plus_suggestion_){false}
    , decltype(_impl_.is_using_plus_guide_){false}
    , decltype(_impl_.seconds_dead_){0u}
    , decltype(_impl_.gold_lost_to_death_){0u}
    , decltype(_impl_.command_count_){0u}
    , decltype(_impl_.mouse_click_cast_command_count_){0u}
    , decltype(_impl_.teleports_used_){0u}
    , decltype(_impl_.bounty_runes_){0u}
    , decltype(_impl_.outposts_captured_){0u}
    , decltype(_impl_.dewards_){0u}
    , decltype(_impl_.wards_placed_){0u}
    , decltype(_impl_.camps_stacked_){0u}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.predicted_position_){0u}
    , decltype(_impl_.friendly_t1_destroyed_time_){0u}
    , decltype(_impl_.enemy_t1_destroyed_time_){0u}
    , decltype(_impl_.friendly_roshan_kills_){0u}
    , decltype(_impl_.enemy_roshan_kills_){0u}
    , decltype(_impl_.power_runes_){0u}
    , decltype(_impl_.water_runes_){0u}
    , decltype(_impl_.stun_duration_){0}
    , decltype(_impl_.team_number_){0}
    , decltype(_impl_.team_slot_){0u}
    , decltype(_impl_.time_purchased_shard_){0u}
    , decltype(_impl_.time_purchased_aghs_){0u}
    , decltype(_impl_.cavern_crawl_preferred_map_variant_){255u}
    , decltype(_impl_.lane_outcomes_){255u}
  };
}

CMsgGameMatchSignOut_CTeam_CPlayer::~CMsgGameMatchSignOut_CTeam_CPlayer() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam.CPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CTeam_CPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedField();
  _impl_.ability_upgrades_.~RepeatedPtrField();
  _impl_.additional_units_inventory_.~RepeatedPtrField();
  _impl_.permanent_buffs_.~RepeatedPtrField();
  _impl_.talent_ability_ids_.~RepeatedField();
  _impl_.hero_damage_received_.~RepeatedPtrField();
  _impl_.item_purchase_times_.~RepeatedField();
  _impl_.hero_damage_dealt_.~RepeatedPtrField();
  _impl_.ability_draft_abilities_.~RepeatedField();
  _impl_.player_tracked_stats_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.custom_game_data_;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.ability_upgrades_.Clear();
  _impl_.additional_units_inventory_.Clear();
  _impl_.permanent_buffs_.Clear();
  _impl_.talent_ability_ids_.Clear();
  _impl_.hero_damage_received_.Clear();
  _impl_.item_purchase_times_.Clear();
  _impl_.hero_damage_dealt_.Clear();
  _impl_.ability_draft_abilities_.Clear();
  _impl_.player_tracked_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.custom_game_data_ != nullptr);
    _impl_.custom_game_data_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.leaver_status_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.leaver_status_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.last_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scaled_tower_damage_) -
        reinterpret_cast<char*>(&_impl_.last_hits_)) + sizeof(_impl_.scaled_tower_damage_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.scaled_hero_healing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.claimed_misses_) -
        reinterpret_cast<char*>(&_impl_.scaled_hero_healing_)) + sizeof(_impl_.claimed_misses_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.misses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_) -
        reinterpret_cast<char*>(&_impl_.misses_)) + sizeof(_impl_.lane_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_was_randomed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.teleports_used_) -
        reinterpret_cast<char*>(&_impl_.hero_was_randomed_)) + sizeof(_impl_.teleports_used_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.bounty_runes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.friendly_t1_destroyed_time_) -
        reinterpret_cast<char*>(&_impl_.bounty_runes_)) + sizeof(_impl_.friendly_t1_destroyed_time_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.enemy_t1_destroyed_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_slot_) -
        reinterpret_cast<char*>(&_impl_.enemy_t1_destroyed_time_)) + sizeof(_impl_.team_slot_));
  }
  if (cached_has_bits & 0x0f000000u) {
    ::memset(&_impl_.time_purchased_shard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_purchased_aghs_) -
        reinterpret_cast<char*>(&_impl_.time_purchased_shard_)) + sizeof(_impl_.time_purchased_aghs_));
    _impl_.cavern_crawl_preferred_map_variant_ = 255u;
    _impl_.lane_outcomes_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam_CPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&_impl_._has_bits_);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&_impl_._has_bits_);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_gold(&_impl_._has_bits_);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kills(&_impl_._has_bits_);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deaths(&_impl_._has_bits_);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_assists(&_impl_._has_bits_);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leaver_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_leaver_status(&_impl_._has_bits_);
          _impl_.leaver_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_last_hits(&_impl_._has_bits_);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_denies(&_impl_._has_bits_);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_per_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_gold_per_min(&_impl_._has_bits_);
          _impl_.gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_per_minute = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_xp_per_minute(&_impl_._has_bits_);
          _impl_.xp_per_minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_spent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_gold_spent(&_impl_._has_bits_);
          _impl_.gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_level(&_impl_._has_bits_);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_damage = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_scaled_hero_damage(&_impl_._has_bits_);
          _impl_.scaled_hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scaled_tower_damage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_scaled_tower_damage(&_impl_._has_bits_);
          _impl_.scaled_tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_healing = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_scaled_hero_healing(&_impl_._has_bits_);
          _impl_.scaled_hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_seen = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_time_last_seen(&_impl_._has_bits_);
          _impl_.time_last_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 support_ability_value = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_support_ability_value(&_impl_._has_bits_);
          _impl_.support_ability_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 party_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_party_id(&_impl_._has_bits_);
          _impl_.party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_farm_gold = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_claimed_farm_gold(&_impl_._has_bits_);
          _impl_.claimed_farm_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 support_gold = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_support_gold(&_impl_._has_bits_);
          _impl_.support_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_denies = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_claimed_denies(&_impl_._has_bits_);
          _impl_.claimed_denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 claimed_misses = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_claimed_misses(&_impl_._has_bits_);
          _impl_.claimed_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 misses = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_misses(&_impl_._has_bits_);
          _impl_.misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_upgrades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_units_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_net_worth(&_impl_._has_bits_);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_player_flags = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_player_flags(&_impl_._has_bits_);
          _impl_.match_player_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_damage(&_impl_._has_bits_);
          _impl_.hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tower_damage(&_impl_._has_bits_);
          _impl_.tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_healing = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_hero_healing(&_impl_._has_bits_);
          _impl_.hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_permanent_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 talent_ability_ids = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_talent_ability_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<328>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_talent_ability_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_pick_order = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_hero_pick_order(&_impl_._has_bits_);
          _impl_.hero_pick_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hero_was_randomed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_hero_was_randomed(&_impl_._has_bits_);
          _impl_.hero_was_randomed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_lane(&_impl_._has_bits_);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_plus_guide = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_using_plus_guide(&_impl_._has_bits_);
          _impl_.is_using_plus_guide_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool hero_was_dota_plus_suggestion = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_hero_was_dota_plus_suggestion(&_impl_._has_bits_);
          _impl_.hero_was_dota_plus_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_dead = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_seconds_dead(&_impl_._has_bits_);
          _impl_.seconds_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_lost_to_death = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_gold_lost_to_death(&_impl_._has_bits_);
          _impl_.gold_lost_to_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 command_count = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_command_count(&_impl_._has_bits_);
          _impl_.command_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mouse_click_cast_command_count = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_mouse_click_cast_command_count(&_impl_._has_bits_);
          _impl_.mouse_click_cast_command_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teleports_used = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_teleports_used(&_impl_._has_bits_);
          _impl_.teleports_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cavern_crawl_preferred_map_variant = 56 [default = 255];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_cavern_crawl_preferred_map_variant(&_impl_._has_bits_);
          _impl_.cavern_crawl_preferred_map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_bounty_runes(&_impl_._has_bits_);
          _impl_.bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 outposts_captured = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_outposts_captured(&_impl_._has_bits_);
          _impl_.outposts_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dewards = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_dewards(&_impl_._has_bits_);
          _impl_.dewards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_wards_placed(&_impl_._has_bits_);
          _impl_.wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_camps_stacked(&_impl_._has_bits_);
          _impl_.camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_player_slot(&_impl_._has_bits_);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 item_purchase_times = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_item_purchase_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<504>(ptr));
        } else if (static_cast<uint8_t>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_purchase_times(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_dealt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<514>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 predicted_position = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_predicted_position(&_impl_._has_bits_);
          _impl_.predicted_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_outcomes = 67 [default = 255];
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lane_outcomes(&_impl_._has_bits_);
          _impl_.lane_outcomes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friendly_t1_destroyed_time = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_friendly_t1_destroyed_time(&_impl_._has_bits_);
          _impl_.friendly_t1_destroyed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_t1_destroyed_time = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_enemy_t1_destroyed_time(&_impl_._has_bits_);
          _impl_.enemy_t1_destroyed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friendly_roshan_kills = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_friendly_roshan_kills(&_impl_._has_bits_);
          _impl_.friendly_roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 enemy_roshan_kills = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_enemy_roshan_kills(&_impl_._has_bits_);
          _impl_.enemy_roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 power_runes = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_power_runes(&_impl_._has_bits_);
          _impl_.power_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 water_runes = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_water_runes(&_impl_._has_bits_);
          _impl_.water_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stun_duration = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_stun_duration(&_impl_._has_bits_);
          _impl_.stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team_number = 75 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team_number(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(75, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_slot = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_team_slot(&_impl_._has_bits_);
          _impl_.team_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_purchased_shard = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_time_purchased_shard(&_impl_._has_bits_);
          _impl_.time_purchased_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_purchased_aghs = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_time_purchased_aghs(&_impl_._has_bits_);
          _impl_.time_purchased_aghs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ability_draft_abilities = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_ability_draft_abilities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<632>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ability_draft_abilities(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgTrackedStat player_tracked_stats = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_tracked_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<642>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CTeam_CPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated int32 items = 4;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_items(i), target);
  }

  // optional uint32 gold = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gold(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assists(), target);
  }

  // optional uint32 leaver_status = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_leaver_status(), target);
  }

  // optional uint32 last_hits = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_denies(), target);
  }

  // optional uint32 gold_per_min = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gold_per_min(), target);
  }

  // optional uint32 xp_per_minute = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_xp_per_minute(), target);
  }

  // optional uint32 gold_spent = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_gold_spent(), target);
  }

  // optional uint32 level = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_level(), target);
  }

  // optional uint32 scaled_hero_damage = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_scaled_hero_healing(), target);
  }

  // optional uint32 time_last_seen = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_time_last_seen(), target);
  }

  // optional uint32 support_ability_value = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_support_ability_value(), target);
  }

  // optional uint64 party_id = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(21, this->_internal_party_id(), target);
  }

  // optional uint32 claimed_farm_gold = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_support_gold(), target);
  }

  // optional uint32 claimed_denies = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_claimed_misses(), target);
  }

  // optional uint32 misses = 31;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_misses(), target);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ability_upgrades_size()); i < n; i++) {
    const auto& repfield = this->_internal_ability_upgrades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_units_inventory_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_units_inventory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 net_worth = 34;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_net_worth(), target);
  }

  // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::custom_game_data(this),
        _Internal::custom_game_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 match_player_flags = 36;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_match_player_flags(), target);
  }

  // optional uint32 hero_damage = 37;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 38;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_tower_damage(), target);
  }

  // optional uint32 hero_healing = 39;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_hero_healing(), target);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_permanent_buffs_size()); i < n; i++) {
    const auto& repfield = this->_internal_permanent_buffs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(40, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int32 talent_ability_ids = 41;
  for (int i = 0, n = this->_internal_talent_ability_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_talent_ability_ids(i), target);
  }

  // optional uint32 hero_pick_order = 42;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(42, this->_internal_hero_pick_order(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool hero_was_randomed = 43;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_hero_was_randomed(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lane = 45;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(45, this->_internal_lane(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool is_using_plus_guide = 47;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_is_using_plus_guide(), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_damage_received_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_damage_received(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(48, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool hero_was_dota_plus_suggestion = 50;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_hero_was_dota_plus_suggestion(), target);
  }

  // optional uint32 seconds_dead = 51;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(51, this->_internal_seconds_dead(), target);
  }

  // optional uint32 gold_lost_to_death = 52;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(52, this->_internal_gold_lost_to_death(), target);
  }

  // optional uint32 command_count = 53;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(53, this->_internal_command_count(), target);
  }

  // optional uint32 mouse_click_cast_command_count = 54;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(54, this->_internal_mouse_click_cast_command_count(), target);
  }

  // optional uint32 teleports_used = 55;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(55, this->_internal_teleports_used(), target);
  }

  // optional uint32 cavern_crawl_preferred_map_variant = 56 [default = 255];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(56, this->_internal_cavern_crawl_preferred_map_variant(), target);
  }

  // optional uint32 bounty_runes = 57;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(57, this->_internal_bounty_runes(), target);
  }

  // optional uint32 outposts_captured = 58;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(58, this->_internal_outposts_captured(), target);
  }

  // optional uint32 dewards = 59;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(59, this->_internal_dewards(), target);
  }

  // optional uint32 wards_placed = 60;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(60, this->_internal_wards_placed(), target);
  }

  // optional uint32 camps_stacked = 61;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(61, this->_internal_camps_stacked(), target);
  }

  // optional uint32 player_slot = 62;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(62, this->_internal_player_slot(), target);
  }

  // repeated uint32 item_purchase_times = 63;
  for (int i = 0, n = this->_internal_item_purchase_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(63, this->_internal_item_purchase_times(i), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_damage_dealt_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_damage_dealt(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(64, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 predicted_position = 66;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(66, this->_internal_predicted_position(), target);
  }

  // optional uint32 lane_outcomes = 67 [default = 255];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(67, this->_internal_lane_outcomes(), target);
  }

  // optional uint32 friendly_t1_destroyed_time = 68;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(68, this->_internal_friendly_t1_destroyed_time(), target);
  }

  // optional uint32 enemy_t1_destroyed_time = 69;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(69, this->_internal_enemy_t1_destroyed_time(), target);
  }

  // optional uint32 friendly_roshan_kills = 70;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(70, this->_internal_friendly_roshan_kills(), target);
  }

  // optional uint32 enemy_roshan_kills = 71;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(71, this->_internal_enemy_roshan_kills(), target);
  }

  // optional uint32 power_runes = 72;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(72, this->_internal_power_runes(), target);
  }

  // optional uint32 water_runes = 73;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(73, this->_internal_water_runes(), target);
  }

  // optional float stun_duration = 74;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(74, this->_internal_stun_duration(), target);
  }

  // optional .DOTA_GC_TEAM team_number = 75 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      75, this->_internal_team_number(), target);
  }

  // optional uint32 team_slot = 76;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(76, this->_internal_team_slot(), target);
  }

  // optional uint32 time_purchased_shard = 77;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(77, this->_internal_time_purchased_shard(), target);
  }

  // optional uint32 time_purchased_aghs = 78;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(78, this->_internal_time_purchased_aghs(), target);
  }

  // repeated int32 ability_draft_abilities = 79;
  for (int i = 0, n = this->_internal_ability_draft_abilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(79, this->_internal_ability_draft_abilities(i), target);
  }

  // repeated .CMsgTrackedStat player_tracked_stats = 80;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_tracked_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_tracked_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(80, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam.CPlayer)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam_CPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 items = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 32;
  total_size += 2UL * this->_internal_ability_upgrades_size();
  for (const auto& msg : this->_impl_.ability_upgrades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 33;
  total_size += 2UL * this->_internal_additional_units_inventory_size();
  for (const auto& msg : this->_impl_.additional_units_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 40;
  total_size += 2UL * this->_internal_permanent_buffs_size();
  for (const auto& msg : this->_impl_.permanent_buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 talent_ability_ids = 41;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.talent_ability_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_talent_ability_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_received = 48;
  total_size += 2UL * this->_internal_hero_damage_received_size();
  for (const auto& msg : this->_impl_.hero_damage_received_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 item_purchase_times = 63;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.item_purchase_times_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_item_purchase_times_size());
    total_size += data_size;
  }

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer.HeroDamageReceived hero_damage_dealt = 64;
  total_size += 2UL * this->_internal_hero_damage_dealt_size();
  for (const auto& msg : this->_impl_.hero_damage_dealt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 ability_draft_abilities = 79;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ability_draft_abilities_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_ability_draft_abilities_size());
    total_size += data_size;
  }

  // repeated .CMsgTrackedStat player_tracked_stats = 80;
  total_size += 2UL * this->_internal_player_tracked_stats_size();
  for (const auto& msg : this->_impl_.player_tracked_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgGameMatchSignOut.CTeam.CPlayer.CCustomGameData custom_game_data = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_game_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 gold = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 leaver_status = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leaver_status());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 last_hits = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_hits());
    }

    // optional uint32 denies = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_denies());
    }

    // optional uint32 gold_per_min = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_per_min());
    }

    // optional uint32 xp_per_minute = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_per_minute());
    }

    // optional uint32 gold_spent = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold_spent());
    }

    // optional uint32 level = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 scaled_hero_damage = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_scaled_tower_damage());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 scaled_hero_healing = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_healing());
    }

    // optional uint32 time_last_seen = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_last_seen());
    }

    // optional uint64 party_id = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_party_id());
    }

    // optional uint32 support_ability_value = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_support_ability_value());
    }

    // optional uint32 claimed_farm_gold = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_claimed_farm_gold());
    }

    // optional uint32 support_gold = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_support_gold());
    }

    // optional uint32 claimed_denies = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_claimed_denies());
    }

    // optional uint32 claimed_misses = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_claimed_misses());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 misses = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_misses());
    }

    // optional uint32 net_worth = 34;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 match_player_flags = 36;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_match_player_flags());
    }

    // optional uint32 hero_damage = 37;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

    // optional uint32 tower_damage = 38;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

    // optional uint32 hero_healing = 39;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_healing());
    }

    // optional uint32 hero_pick_order = 42;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_hero_pick_order());
    }

    // optional uint32 lane = 45;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool hero_was_randomed = 43;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_dota_plus_suggestion = 50;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool is_using_plus_guide = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional uint32 seconds_dead = 51;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_seconds_dead());
    }

    // optional uint32 gold_lost_to_death = 52;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gold_lost_to_death());
    }

    // optional uint32 command_count = 53;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_command_count());
    }

    // optional uint32 mouse_click_cast_command_count = 54;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_mouse_click_cast_command_count());
    }

    // optional uint32 teleports_used = 55;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_teleports_used());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bounty_runes = 57;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bounty_runes());
    }

    // optional uint32 outposts_captured = 58;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_outposts_captured());
    }

    // optional uint32 dewards = 59;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dewards());
    }

    // optional uint32 wards_placed = 60;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wards_placed());
    }

    // optional uint32 camps_stacked = 61;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 player_slot = 62;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 predicted_position = 66;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_predicted_position());
    }

    // optional uint32 friendly_t1_destroyed_time = 68;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_friendly_t1_destroyed_time());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 enemy_t1_destroyed_time = 69;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_t1_destroyed_time());
    }

    // optional uint32 friendly_roshan_kills = 70;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_friendly_roshan_kills());
    }

    // optional uint32 enemy_roshan_kills = 71;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_enemy_roshan_kills());
    }

    // optional uint32 power_runes = 72;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_power_runes());
    }

    // optional uint32 water_runes = 73;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_water_runes());
    }

    // optional float stun_duration = 74;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional .DOTA_GC_TEAM team_number = 75 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team_number());
    }

    // optional uint32 team_slot = 76;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_team_slot());
    }

  }
  if (cached_has_bits & 0x0f000000u) {
    // optional uint32 time_purchased_shard = 77;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_purchased_shard());
    }

    // optional uint32 time_purchased_aghs = 78;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_time_purchased_aghs());
    }

    // optional uint32 cavern_crawl_preferred_map_variant = 56 [default = 255];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cavern_crawl_preferred_map_variant());
    }

    // optional uint32 lane_outcomes = 67 [default = 255];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lane_outcomes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CTeam_CPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CTeam_CPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CTeam_CPlayer::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CTeam_CPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CTeam_CPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CTeam_CPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.ability_upgrades_.MergeFrom(from._impl_.ability_upgrades_);
  _this->_impl_.additional_units_inventory_.MergeFrom(from._impl_.additional_units_inventory_);
  _this->_impl_.permanent_buffs_.MergeFrom(from._impl_.permanent_buffs_);
  _this->_impl_.talent_ability_ids_.MergeFrom(from._impl_.talent_ability_ids_);
  _this->_impl_.hero_damage_received_.MergeFrom(from._impl_.hero_damage_received_);
  _this->_impl_.item_purchase_times_.MergeFrom(from._impl_.item_purchase_times_);
  _this->_impl_.hero_damage_dealt_.MergeFrom(from._impl_.hero_damage_dealt_);
  _this->_impl_.ability_draft_abilities_.MergeFrom(from._impl_.ability_draft_abilities_);
  _this->_impl_.player_tracked_stats_.MergeFrom(from._impl_.player_tracked_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_custom_game_data()->::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData::MergeFrom(
          from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.leaver_status_ = from._impl_.leaver_status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.gold_per_min_ = from._impl_.gold_per_min_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.xp_per_minute_ = from._impl_.xp_per_minute_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.gold_spent_ = from._impl_.gold_spent_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.scaled_hero_damage_ = from._impl_.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.scaled_tower_damage_ = from._impl_.scaled_tower_damage_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.scaled_hero_healing_ = from._impl_.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.time_last_seen_ = from._impl_.time_last_seen_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.party_id_ = from._impl_.party_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.support_ability_value_ = from._impl_.support_ability_value_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.claimed_farm_gold_ = from._impl_.claimed_farm_gold_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.support_gold_ = from._impl_.support_gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.claimed_denies_ = from._impl_.claimed_denies_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.claimed_misses_ = from._impl_.claimed_misses_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.misses_ = from._impl_.misses_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.match_player_flags_ = from._impl_.match_player_flags_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.hero_damage_ = from._impl_.hero_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tower_damage_ = from._impl_.tower_damage_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.hero_healing_ = from._impl_.hero_healing_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.hero_pick_order_ = from._impl_.hero_pick_order_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_was_randomed_ = from._impl_.hero_was_randomed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_was_dota_plus_suggestion_ = from._impl_.hero_was_dota_plus_suggestion_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_using_plus_guide_ = from._impl_.is_using_plus_guide_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_dead_ = from._impl_.seconds_dead_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.gold_lost_to_death_ = from._impl_.gold_lost_to_death_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.command_count_ = from._impl_.command_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mouse_click_cast_command_count_ = from._impl_.mouse_click_cast_command_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.teleports_used_ = from._impl_.teleports_used_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.bounty_runes_ = from._impl_.bounty_runes_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.outposts_captured_ = from._impl_.outposts_captured_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.dewards_ = from._impl_.dewards_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.wards_placed_ = from._impl_.wards_placed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.camps_stacked_ = from._impl_.camps_stacked_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.predicted_position_ = from._impl_.predicted_position_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.friendly_t1_destroyed_time_ = from._impl_.friendly_t1_destroyed_time_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.enemy_t1_destroyed_time_ = from._impl_.enemy_t1_destroyed_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.friendly_roshan_kills_ = from._impl_.friendly_roshan_kills_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.enemy_roshan_kills_ = from._impl_.enemy_roshan_kills_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.power_runes_ = from._impl_.power_runes_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.water_runes_ = from._impl_.water_runes_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.stun_duration_ = from._impl_.stun_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.team_number_ = from._impl_.team_number_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.team_slot_ = from._impl_.team_slot_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.time_purchased_shard_ = from._impl_.time_purchased_shard_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.time_purchased_aghs_ = from._impl_.time_purchased_aghs_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.cavern_crawl_preferred_map_variant_ = from._impl_.cavern_crawl_preferred_map_variant_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.lane_outcomes_ = from._impl_.lane_outcomes_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CTeam_CPlayer::CopyFrom(const CMsgGameMatchSignOut_CTeam_CPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam.CPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam_CPlayer::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam_CPlayer::InternalSwap(CMsgGameMatchSignOut_CTeam_CPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.ability_upgrades_.InternalSwap(&other->_impl_.ability_upgrades_);
  _impl_.additional_units_inventory_.InternalSwap(&other->_impl_.additional_units_inventory_);
  _impl_.permanent_buffs_.InternalSwap(&other->_impl_.permanent_buffs_);
  _impl_.talent_ability_ids_.InternalSwap(&other->_impl_.talent_ability_ids_);
  _impl_.hero_damage_received_.InternalSwap(&other->_impl_.hero_damage_received_);
  _impl_.item_purchase_times_.InternalSwap(&other->_impl_.item_purchase_times_);
  _impl_.hero_damage_dealt_.InternalSwap(&other->_impl_.hero_damage_dealt_);
  _impl_.ability_draft_abilities_.InternalSwap(&other->_impl_.ability_draft_abilities_);
  _impl_.player_tracked_stats_.InternalSwap(&other->_impl_.player_tracked_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.time_purchased_aghs_)
      + sizeof(CMsgGameMatchSignOut_CTeam_CPlayer::_impl_.time_purchased_aghs_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CTeam_CPlayer, _impl_.custom_game_data_)>(
          reinterpret_cast<char*>(&_impl_.custom_game_data_),
          reinterpret_cast<char*>(&other->_impl_.custom_game_data_));
  swap(_impl_.cavern_crawl_preferred_map_variant_, other->_impl_.cavern_crawl_preferred_map_variant_);
  swap(_impl_.lane_outcomes_, other->_impl_.lane_outcomes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam_CPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[19]);
}

// ===================================================================

class CMsgGameMatchSignOut_CTeam::_Internal {
 public:
};

void CMsgGameMatchSignOut_CTeam::clear_team_tracked_stats() {
  _impl_.team_tracked_stats_.Clear();
}
CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CTeam)
}
CMsgGameMatchSignOut_CTeam::CMsgGameMatchSignOut_CTeam(const CMsgGameMatchSignOut_CTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.team_tracked_stats_){from._impl_.team_tracked_stats_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CTeam)
}

inline void CMsgGameMatchSignOut_CTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.team_tracked_stats_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGameMatchSignOut_CTeam::~CMsgGameMatchSignOut_CTeam() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.team_tracked_stats_.~RepeatedPtrField();
}

void CMsgGameMatchSignOut_CTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.team_tracked_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgTrackedStat team_tracked_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_tracked_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgTrackedStat team_tracked_stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_team_tracked_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_team_tracked_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CTeam)
  return target;
}

size_t CMsgGameMatchSignOut_CTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameMatchSignOut.CTeam.CPlayer players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgTrackedStat team_tracked_stats = 2;
  total_size += 1UL * this->_internal_team_tracked_stats_size();
  for (const auto& msg : this->_impl_.team_tracked_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CTeam::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CTeam*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.team_tracked_stats_.MergeFrom(from._impl_.team_tracked_stats_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CTeam::CopyFrom(const CMsgGameMatchSignOut_CTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CTeam::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CTeam::InternalSwap(CMsgGameMatchSignOut_CTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.team_tracked_stats_.InternalSwap(&other->_impl_.team_tracked_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[20]);
}

// ===================================================================

class CMsgGameMatchSignOut_CAdditionalSignoutMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CAdditionalSignoutMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}
CMsgGameMatchSignOut_CAdditionalSignoutMsg::CMsgGameMatchSignOut_CAdditionalSignoutMsg(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CAdditionalSignoutMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contents_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_contents()) {
    _this->_impl_.contents_.Set(from._internal_contents(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
}

inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contents_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.contents_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contents_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameMatchSignOut_CAdditionalSignoutMsg::~CMsgGameMatchSignOut_CAdditionalSignoutMsg() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contents_.Destroy();
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.contents_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes contents = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contents();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CAdditionalSignoutMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  return target;
}

size_t CMsgGameMatchSignOut_CAdditionalSignoutMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes contents = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_contents());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CAdditionalSignoutMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CAdditionalSignoutMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CAdditionalSignoutMsg*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CAdditionalSignoutMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_contents(from._internal_contents());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::CopyFrom(const CMsgGameMatchSignOut_CAdditionalSignoutMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CAdditionalSignoutMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CAdditionalSignoutMsg::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CAdditionalSignoutMsg::InternalSwap(CMsgGameMatchSignOut_CAdditionalSignoutMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contents_, lhs_arena,
      &other->_impl_.contents_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CAdditionalSignoutMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[21]);
}

// ===================================================================

class CMsgGameMatchSignOut_CSocialFeedMatchEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CSocialFeedMatchEvent>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_replay_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}
CMsgGameMatchSignOut_CSocialFeedMatchEvent::CMsgGameMatchSignOut_CSocialFeedMatchEvent(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CSocialFeedMatchEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.replay_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.replay_time_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.replay_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
}

inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.event_type_){0u}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.replay_time_){0u}
  };
}

CMsgGameMatchSignOut_CSocialFeedMatchEvent::~CMsgGameMatchSignOut_CSocialFeedMatchEvent() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.replay_time_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.replay_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 replay_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_replay_time(&has_bits);
          _impl_.replay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CSocialFeedMatchEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 event_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_event_type(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_time(), target);
  }

  // optional uint32 replay_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_replay_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  return target;
}

size_t CMsgGameMatchSignOut_CSocialFeedMatchEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 event_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
    }

    // optional int32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
    }

    // optional uint32 replay_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_replay_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CSocialFeedMatchEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CSocialFeedMatchEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CSocialFeedMatchEvent*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CSocialFeedMatchEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.replay_time_ = from._impl_.replay_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::CopyFrom(const CMsgGameMatchSignOut_CSocialFeedMatchEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CSocialFeedMatchEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CSocialFeedMatchEvent::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CSocialFeedMatchEvent::InternalSwap(CMsgGameMatchSignOut_CSocialFeedMatchEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.replay_time_)
      + sizeof(CMsgGameMatchSignOut_CSocialFeedMatchEvent::_impl_.replay_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_CSocialFeedMatchEvent, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CSocialFeedMatchEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[22]);
}

// ===================================================================

class CMsgGameMatchSignOut_CCustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_CCustomGameData>()._impl_._has_bits_);
  static void set_has_publish_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.CCustomGameData)
}
CMsgGameMatchSignOut_CCustomGameData::CMsgGameMatchSignOut_CCustomGameData(const CMsgGameMatchSignOut_CCustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_CCustomGameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publish_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.publish_timestamp_ = from._impl_.publish_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.CCustomGameData)
}

inline void CMsgGameMatchSignOut_CCustomGameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.publish_timestamp_){0u}
  };
}

CMsgGameMatchSignOut_CCustomGameData::~CMsgGameMatchSignOut_CCustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.CCustomGameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_CCustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOut_CCustomGameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_CCustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.CCustomGameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.publish_timestamp_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_CCustomGameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 publish_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_publish_timestamp(&has_bits);
          _impl_.publish_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_CCustomGameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.CCustomGameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 publish_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_publish_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.CCustomGameData)
  return target;
}

size_t CMsgGameMatchSignOut_CCustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.CCustomGameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 publish_timestamp = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_publish_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_CCustomGameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_CCustomGameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_CCustomGameData::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_CCustomGameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_CCustomGameData*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_CCustomGameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.CCustomGameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_publish_timestamp()) {
    _this->_internal_set_publish_timestamp(from._internal_publish_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_CCustomGameData::CopyFrom(const CMsgGameMatchSignOut_CCustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.CCustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_CCustomGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_CCustomGameData::InternalSwap(CMsgGameMatchSignOut_CCustomGameData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.publish_timestamp_, other->_impl_.publish_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_CCustomGameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[23]);
}

// ===================================================================

class CMsgGameMatchSignOut_EventGameLeaderboardEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_EventGameLeaderboardEntry>()._impl_._has_bits_);
  static void set_has_name_suffix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_data_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extra_data_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extra_data_3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extra_data_4(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_extra_data_5(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}
CMsgGameMatchSignOut_EventGameLeaderboardEntry::CMsgGameMatchSignOut_EventGameLeaderboardEntry(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_EventGameLeaderboardEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_suffix_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.extra_data_1_){}
    , decltype(_impl_.extra_data_2_){}
    , decltype(_impl_.extra_data_3_){}
    , decltype(_impl_.extra_data_4_){}
    , decltype(_impl_.extra_data_5_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name_suffix()) {
    _this->_impl_.name_suffix_.Set(from._internal_name_suffix(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extra_data_5_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.extra_data_5_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
}

inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_suffix_){}
    , decltype(_impl_.score_){0}
    , decltype(_impl_.extra_data_1_){0u}
    , decltype(_impl_.extra_data_2_){0u}
    , decltype(_impl_.extra_data_3_){0u}
    , decltype(_impl_.extra_data_4_){0u}
    , decltype(_impl_.extra_data_5_){0u}
  };
  _impl_.name_suffix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_suffix_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameMatchSignOut_EventGameLeaderboardEntry::~CMsgGameMatchSignOut_EventGameLeaderboardEntry() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_suffix_.Destroy();
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_suffix_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.extra_data_5_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.extra_data_5_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name_suffix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name_suffix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extra_data_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_extra_data_1(&has_bits);
          _impl_.extra_data_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extra_data_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_extra_data_2(&has_bits);
          _impl_.extra_data_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extra_data_3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_extra_data_3(&has_bits);
          _impl_.extra_data_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extra_data_4 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_extra_data_4(&has_bits);
          _impl_.extra_data_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extra_data_5 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_extra_data_5(&has_bits);
          _impl_.extra_data_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_EventGameLeaderboardEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name_suffix = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_suffix().data(), static_cast<int>(this->_internal_name_suffix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOut.EventGameLeaderboardEntry.name_suffix");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_suffix(), target);
  }

  // optional int32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 extra_data_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_extra_data_1(), target);
  }

  // optional uint32 extra_data_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_extra_data_2(), target);
  }

  // optional uint32 extra_data_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_extra_data_3(), target);
  }

  // optional uint32 extra_data_4 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_extra_data_4(), target);
  }

  // optional uint32 extra_data_5 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_extra_data_5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  return target;
}

size_t CMsgGameMatchSignOut_EventGameLeaderboardEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name_suffix = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_suffix());
    }

    // optional int32 score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
    }

    // optional uint32 extra_data_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_data_1());
    }

    // optional uint32 extra_data_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_data_2());
    }

    // optional uint32 extra_data_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_data_3());
    }

    // optional uint32 extra_data_4 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_data_4());
    }

    // optional uint32 extra_data_5 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extra_data_5());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_EventGameLeaderboardEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_EventGameLeaderboardEntry::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_EventGameLeaderboardEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_EventGameLeaderboardEntry*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_EventGameLeaderboardEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name_suffix(from._internal_name_suffix());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extra_data_1_ = from._impl_.extra_data_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.extra_data_2_ = from._impl_.extra_data_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.extra_data_3_ = from._impl_.extra_data_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.extra_data_4_ = from._impl_.extra_data_4_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.extra_data_5_ = from._impl_.extra_data_5_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::CopyFrom(const CMsgGameMatchSignOut_EventGameLeaderboardEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.EventGameLeaderboardEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_EventGameLeaderboardEntry::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_EventGameLeaderboardEntry::InternalSwap(CMsgGameMatchSignOut_EventGameLeaderboardEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_suffix_, lhs_arena,
      &other->_impl_.name_suffix_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.extra_data_5_)
      + sizeof(CMsgGameMatchSignOut_EventGameLeaderboardEntry::_impl_.extra_data_5_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_EventGameLeaderboardEntry, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_EventGameLeaderboardEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[24]);
}

// ===================================================================

class CMsgGameMatchSignOut_WardPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut_WardPlacement>()._impl_._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_placed_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_creep_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_roshan_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut.WardPlacement)
}
CMsgGameMatchSignOut_WardPlacement::CMsgGameMatchSignOut_WardPlacement(const CMsgGameMatchSignOut_WardPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut_WardPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.placed_time_){}
    , decltype(_impl_.building_state_){}
    , decltype(_impl_.creep_state_){}
    , decltype(_impl_.roshan_alive_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.player_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut.WardPlacement)
}

inline void CMsgGameMatchSignOut_WardPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.placed_time_){0u}
    , decltype(_impl_.building_state_){0u}
    , decltype(_impl_.creep_state_){0u}
    , decltype(_impl_.roshan_alive_){false}
    , decltype(_impl_.position_x_){0u}
    , decltype(_impl_.position_y_){0u}
    , decltype(_impl_.player_id_){-1}
  };
}

CMsgGameMatchSignOut_WardPlacement::~CMsgGameMatchSignOut_WardPlacement() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut.WardPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut_WardPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOut_WardPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut_WardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut.WardPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.position_y_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.position_y_));
    _impl_.player_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut_WardPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 placed_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_placed_time(&has_bits);
          _impl_.placed_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 building_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_building_state(&has_bits);
          _impl_.building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_creep_state(&has_bits);
          _impl_.creep_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool roshan_alive = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_roshan_alive(&has_bits);
          _impl_.roshan_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 position_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut_WardPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut.WardPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional uint32 placed_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_placed_time(), target);
  }

  // optional uint32 building_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_building_state(), target);
  }

  // optional uint32 creep_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_creep_state(), target);
  }

  // optional bool roshan_alive = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_roshan_alive(), target);
  }

  // optional uint32 position_x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_position_x(), target);
  }

  // optional uint32 position_y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_position_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut.WardPlacement)
  return target;
}

size_t CMsgGameMatchSignOut_WardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut.WardPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 placed_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_placed_time());
    }

    // optional uint32 building_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_building_state());
    }

    // optional uint32 creep_state = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_state());
    }

    // optional bool roshan_alive = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 position_x = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_x());
    }

    // optional uint32 position_y = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_position_y());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut_WardPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut_WardPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut_WardPlacement::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut_WardPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut_WardPlacement*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut_WardPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut.WardPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.placed_time_ = from._impl_.placed_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.building_state_ = from._impl_.building_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.creep_state_ = from._impl_.creep_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.roshan_alive_ = from._impl_.roshan_alive_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.player_id_ = from._impl_.player_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut_WardPlacement::CopyFrom(const CMsgGameMatchSignOut_WardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut.WardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut_WardPlacement::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut_WardPlacement::InternalSwap(CMsgGameMatchSignOut_WardPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_WardPlacement, _impl_.position_y_)
      + sizeof(CMsgGameMatchSignOut_WardPlacement::_impl_.position_y_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut_WardPlacement, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut_WardPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[25]);
}

// ===================================================================

class CMsgGameMatchSignOut::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOut>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_good_guys_win(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_first_blood_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_event_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_automatic_surrender(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgPoorNetworkConditions& poor_network_conditions(const CMsgGameMatchSignOut* msg);
  static void set_has_poor_network_conditions(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_average_networth_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgGameMatchSignOut_CCustomGameData& custom_game_data(const CMsgGameMatchSignOut* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_match_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pre_game_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::CMsgSignOutGameplayStats& gameplay_stats(const CMsgGameMatchSignOut* msg);
  static void set_has_gameplay_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_training_data_recorded(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_normalized_win_probability_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::CMsgPoorNetworkConditions&
CMsgGameMatchSignOut::_Internal::poor_network_conditions(const CMsgGameMatchSignOut* msg) {
  return *msg->_impl_.poor_network_conditions_;
}
const ::CMsgGameMatchSignOut_CCustomGameData&
CMsgGameMatchSignOut::_Internal::custom_game_data(const CMsgGameMatchSignOut* msg) {
  return *msg->_impl_.custom_game_data_;
}
const ::CMsgSignOutGameplayStats&
CMsgGameMatchSignOut::_Internal::gameplay_stats(const CMsgGameMatchSignOut* msg) {
  return *msg->_impl_.gameplay_stats_;
}
void CMsgGameMatchSignOut::clear_picks_bans() {
  _impl_.picks_bans_.Clear();
}
void CMsgGameMatchSignOut::clear_fantasy_stats() {
  _impl_.fantasy_stats_.Clear();
}
void CMsgGameMatchSignOut::clear_player_strange_count_adjustments() {
  _impl_.player_strange_count_adjustments_.Clear();
}
void CMsgGameMatchSignOut::clear_extra_messages() {
  _impl_.extra_messages_.Clear();
}
void CMsgGameMatchSignOut::clear_match_tracked_stats() {
  _impl_.match_tracked_stats_.Clear();
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOut)
}
CMsgGameMatchSignOut::CMsgGameMatchSignOut(const CMsgGameMatchSignOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOut* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){from._impl_.teams_}
    , decltype(_impl_.tower_status_){from._impl_.tower_status_}
    , decltype(_impl_.barracks_status_){from._impl_.barracks_status_}
    , decltype(_impl_.picks_bans_){from._impl_.picks_bans_}
    , decltype(_impl_.player_strange_count_adjustments_){from._impl_.player_strange_count_adjustments_}
    , decltype(_impl_.additional_msgs_){from._impl_.additional_msgs_}
    , decltype(_impl_.social_feed_events_){from._impl_.social_feed_events_}
    , decltype(_impl_.team_scores_){from._impl_.team_scores_}
    , decltype(_impl_.fantasy_stats_){from._impl_.fantasy_stats_}
    , decltype(_impl_.event_game_leaderboard_entries_){from._impl_.event_game_leaderboard_entries_}
    , decltype(_impl_.ward_placements_){from._impl_.ward_placements_}
    , decltype(_impl_.extra_messages_){from._impl_.extra_messages_}
    , decltype(_impl_.match_tracked_stats_){from._impl_.match_tracked_stats_}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.custom_game_data_){nullptr}
    , decltype(_impl_.gameplay_stats_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.date_){}
    , decltype(_impl_.cluster_){}
    , decltype(_impl_.first_blood_time_){}
    , decltype(_impl_.event_score_){}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.average_networth_delta_){}
    , decltype(_impl_.good_guys_win_){}
    , decltype(_impl_.automatic_surrender_){}
    , decltype(_impl_.training_data_recorded_){}
    , decltype(_impl_.match_flags_){}
    , decltype(_impl_.pre_game_duration_){}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.normalized_win_probability_diff_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_server_addr()) {
    _this->_impl_.server_addr_.Set(from._internal_server_addr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_poor_network_conditions()) {
    _this->_impl_.poor_network_conditions_ = new ::CMsgPoorNetworkConditions(*from._impl_.poor_network_conditions_);
  }
  if (from._internal_has_custom_game_data()) {
    _this->_impl_.custom_game_data_ = new ::CMsgGameMatchSignOut_CCustomGameData(*from._impl_.custom_game_data_);
  }
  if (from._internal_has_gameplay_stats()) {
    _this->_impl_.gameplay_stats_ = new ::CMsgSignOutGameplayStats(*from._impl_.gameplay_stats_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.normalized_win_probability_diff_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.normalized_win_probability_diff_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOut)
}

inline void CMsgGameMatchSignOut::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.teams_){arena}
    , decltype(_impl_.tower_status_){arena}
    , decltype(_impl_.barracks_status_){arena}
    , decltype(_impl_.picks_bans_){arena}
    , decltype(_impl_.player_strange_count_adjustments_){arena}
    , decltype(_impl_.additional_msgs_){arena}
    , decltype(_impl_.social_feed_events_){arena}
    , decltype(_impl_.team_scores_){arena}
    , decltype(_impl_.fantasy_stats_){arena}
    , decltype(_impl_.event_game_leaderboard_entries_){arena}
    , decltype(_impl_.ward_placements_){arena}
    , decltype(_impl_.extra_messages_){arena}
    , decltype(_impl_.match_tracked_stats_){arena}
    , decltype(_impl_.server_addr_){}
    , decltype(_impl_.poor_network_conditions_){nullptr}
    , decltype(_impl_.custom_game_data_){nullptr}
    , decltype(_impl_.gameplay_stats_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.date_){0u}
    , decltype(_impl_.cluster_){0u}
    , decltype(_impl_.first_blood_time_){0u}
    , decltype(_impl_.event_score_){0u}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.average_networth_delta_){0}
    , decltype(_impl_.good_guys_win_){false}
    , decltype(_impl_.automatic_surrender_){false}
    , decltype(_impl_.training_data_recorded_){false}
    , decltype(_impl_.match_flags_){0u}
    , decltype(_impl_.pre_game_duration_){0u}
    , decltype(_impl_.winning_team_){0}
    , decltype(_impl_.normalized_win_probability_diff_){0}
  };
  _impl_.server_addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameMatchSignOut::~CMsgGameMatchSignOut() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOut)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOut::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.teams_.~RepeatedPtrField();
  _impl_.tower_status_.~RepeatedField();
  _impl_.barracks_status_.~RepeatedField();
  _impl_.picks_bans_.~RepeatedPtrField();
  _impl_.player_strange_count_adjustments_.~RepeatedPtrField();
  _impl_.additional_msgs_.~RepeatedPtrField();
  _impl_.social_feed_events_.~RepeatedPtrField();
  _impl_.team_scores_.~RepeatedField();
  _impl_.fantasy_stats_.~RepeatedPtrField();
  _impl_.event_game_leaderboard_entries_.~RepeatedPtrField();
  _impl_.ward_placements_.~RepeatedPtrField();
  _impl_.extra_messages_.~RepeatedPtrField();
  _impl_.match_tracked_stats_.~RepeatedPtrField();
  _impl_.server_addr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.poor_network_conditions_;
  if (this != internal_default_instance()) delete _impl_.custom_game_data_;
  if (this != internal_default_instance()) delete _impl_.gameplay_stats_;
}

void CMsgGameMatchSignOut::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOut::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOut)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.teams_.Clear();
  _impl_.tower_status_.Clear();
  _impl_.barracks_status_.Clear();
  _impl_.picks_bans_.Clear();
  _impl_.player_strange_count_adjustments_.Clear();
  _impl_.additional_msgs_.Clear();
  _impl_.social_feed_events_.Clear();
  _impl_.team_scores_.Clear();
  _impl_.fantasy_stats_.Clear();
  _impl_.event_game_leaderboard_entries_.Clear();
  _impl_.ward_placements_.Clear();
  _impl_.extra_messages_.Clear();
  _impl_.match_tracked_stats_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.server_addr_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.poor_network_conditions_ != nullptr);
      _impl_.poor_network_conditions_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.custom_game_data_ != nullptr);
      _impl_.custom_game_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.gameplay_stats_ != nullptr);
      _impl_.gameplay_stats_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cluster_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cluster_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.first_blood_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_flags_) -
        reinterpret_cast<char*>(&_impl_.first_blood_time_)) + sizeof(_impl_.match_flags_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.pre_game_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.normalized_win_probability_diff_) -
        reinterpret_cast<char*>(&_impl_.pre_game_duration_)) + sizeof(_impl_.normalized_win_probability_diff_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOut::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool good_guys_win = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_good_guys_win(&has_bits);
          _impl_.good_guys_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_date(&has_bits);
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tower_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_status(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 barracks_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_status(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_cluster(&has_bits);
          _impl_.cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string server_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_server_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGameMatchSignOut.server_addr");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_blood_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_first_blood_time(&has_bits);
          _impl_.first_blood_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_event_score(&has_bits);
          _impl_.event_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchHeroSelectEvent picks_bans = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_player_strange_count_adjustments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic_surrender = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_automatic_surrender(&has_bits);
          _impl_.automatic_surrender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_version = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_msgs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional sint32 average_networth_delta = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_average_networth_delta(&has_bits);
          _impl_.average_networth_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_poor_network_conditions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_social_feed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 match_flags = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_match_flags(&has_bits);
          _impl_.match_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 team_scores = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_team_scores(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<312>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_team_scores(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pre_game_duration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pre_game_duration(&has_bits);
          _impl_.pre_game_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fantasy_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_game_leaderboard_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<338>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ward_placements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gameplay_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CExtraMsgBlock extra_messages = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_extra_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<434>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool training_data_recorded = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_training_data_recorded(&has_bits);
          _impl_.training_data_recorded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM winning_team = 56 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_winning_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(56, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float normalized_win_probability_diff = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_normalized_win_probability_diff(&has_bits);
          _impl_.normalized_win_probability_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgTrackedStat match_tracked_stats = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_match_tracked_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<466>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOut::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOut)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional bool good_guys_win = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_good_guys_win(), target);
  }

  // optional fixed32 date = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_date(), target);
  }

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_teams_size()); i < n; i++) {
    const auto& repfield = this->_internal_teams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->_internal_tower_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tower_status(i), target);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->_internal_barracks_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_barracks_status(i), target);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cluster(), target);
  }

  // optional string server_addr = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_server_addr().data(), static_cast<int>(this->_internal_server_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOut.server_addr");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_server_addr(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_first_blood_time(), target);
  }

  // optional uint32 event_score = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_event_score(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_picks_bans_size()); i < n; i++) {
    const auto& repfield = this->_internal_picks_bans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_strange_count_adjustments_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_strange_count_adjustments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool automatic_surrender = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_automatic_surrender(), target);
  }

  // optional uint32 server_version = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_server_version(), target);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_msgs_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_msgs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional sint32 average_networth_delta = 22;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(22, this->_internal_average_networth_delta(), target);
  }

  // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::poor_network_conditions(this),
        _Internal::poor_network_conditions(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_social_feed_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_social_feed_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::custom_game_data(this),
        _Internal::custom_game_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 match_flags = 38;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(38, this->_internal_match_flags(), target);
  }

  // repeated uint32 team_scores = 39;
  for (int i = 0, n = this->_internal_team_scores_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(39, this->_internal_team_scores(i), target);
  }

  // optional uint32 pre_game_duration = 40;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(40, this->_internal_pre_game_duration(), target);
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fantasy_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_fantasy_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(41, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_game_leaderboard_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_game_leaderboard_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ward_placements_size()); i < n; i++) {
    const auto& repfield = this->_internal_ward_placements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::gameplay_stats(this),
        _Internal::gameplay_stats(this).GetCachedSize(), target, stream);
  }

  // repeated .CExtraMsgBlock extra_messages = 54;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extra_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_extra_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(54, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool training_data_recorded = 55;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(55, this->_internal_training_data_recorded(), target);
  }

  // optional .DOTA_GC_TEAM winning_team = 56 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      56, this->_internal_winning_team(), target);
  }

  // optional float normalized_win_probability_diff = 57;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_normalized_win_probability_diff(), target);
  }

  // repeated .CMsgTrackedStat match_tracked_stats = 58;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_match_tracked_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_match_tracked_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(58, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOut)
  return target;
}

size_t CMsgGameMatchSignOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOut)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameMatchSignOut.CTeam teams = 6;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->_impl_.teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tower_status_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.barracks_status_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_barracks_status_size());
    total_size += data_size;
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 15;
  total_size += 1UL * this->_internal_picks_bans_size();
  for (const auto& msg : this->_impl_.picks_bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgEconPlayerStrangeCountAdjustment player_strange_count_adjustments = 17;
  total_size += 2UL * this->_internal_player_strange_count_adjustments_size();
  for (const auto& msg : this->_impl_.player_strange_count_adjustments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.CAdditionalSignoutMsg additional_msgs = 20;
  total_size += 2UL * this->_internal_additional_msgs_size();
  for (const auto& msg : this->_impl_.additional_msgs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.CSocialFeedMatchEvent social_feed_events = 36;
  total_size += 2UL * this->_internal_social_feed_events_size();
  for (const auto& msg : this->_impl_.social_feed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 team_scores = 39;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.team_scores_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_team_scores_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTAFantasyPlayerStats fantasy_stats = 41;
  total_size += 2UL * this->_internal_fantasy_stats_size();
  for (const auto& msg : this->_impl_.fantasy_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.EventGameLeaderboardEntry event_game_leaderboard_entries = 42;
  total_size += 2UL * this->_internal_event_game_leaderboard_entries_size();
  for (const auto& msg : this->_impl_.event_game_leaderboard_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignOut.WardPlacement ward_placements = 43;
  total_size += 2UL * this->_internal_ward_placements_size();
  for (const auto& msg : this->_impl_.ward_placements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CExtraMsgBlock extra_messages = 54;
  total_size += 2UL * this->_internal_extra_messages_size();
  for (const auto& msg : this->_impl_.extra_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgTrackedStat match_tracked_stats = 58;
  total_size += 2UL * this->_internal_match_tracked_stats_size();
  for (const auto& msg : this->_impl_.match_tracked_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string server_addr = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_server_addr());
    }

    // optional .CMsgPoorNetworkConditions poor_network_conditions = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.poor_network_conditions_);
    }

    // optional .CMsgGameMatchSignOut.CCustomGameData custom_game_data = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.custom_game_data_);
    }

    // optional .CMsgSignOutGameplayStats gameplay_stats = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gameplay_stats_);
    }

    // optional uint64 match_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional fixed32 date = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 cluster = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 first_blood_time = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_blood_time());
    }

    // optional uint32 event_score = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_score());
    }

    // optional uint32 server_version = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_server_version());
    }

    // optional sint32 average_networth_delta = 22;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::SInt32Size(
          this->_internal_average_networth_delta());
    }

    // optional bool good_guys_win = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool automatic_surrender = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool training_data_recorded = 55;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 match_flags = 38;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_match_flags());
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional uint32 pre_game_duration = 40;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pre_game_duration());
    }

    // optional .DOTA_GC_TEAM winning_team = 56 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_winning_team());
    }

    // optional float normalized_win_probability_diff = 57;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOut::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOut::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOut::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOut::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOut*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOut&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOut)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.teams_.MergeFrom(from._impl_.teams_);
  _this->_impl_.tower_status_.MergeFrom(from._impl_.tower_status_);
  _this->_impl_.barracks_status_.MergeFrom(from._impl_.barracks_status_);
  _this->_impl_.picks_bans_.MergeFrom(from._impl_.picks_bans_);
  _this->_impl_.player_strange_count_adjustments_.MergeFrom(from._impl_.player_strange_count_adjustments_);
  _this->_impl_.additional_msgs_.MergeFrom(from._impl_.additional_msgs_);
  _this->_impl_.social_feed_events_.MergeFrom(from._impl_.social_feed_events_);
  _this->_impl_.team_scores_.MergeFrom(from._impl_.team_scores_);
  _this->_impl_.fantasy_stats_.MergeFrom(from._impl_.fantasy_stats_);
  _this->_impl_.event_game_leaderboard_entries_.MergeFrom(from._impl_.event_game_leaderboard_entries_);
  _this->_impl_.ward_placements_.MergeFrom(from._impl_.ward_placements_);
  _this->_impl_.extra_messages_.MergeFrom(from._impl_.extra_messages_);
  _this->_impl_.match_tracked_stats_.MergeFrom(from._impl_.match_tracked_stats_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_server_addr(from._internal_server_addr());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_poor_network_conditions()->::CMsgPoorNetworkConditions::MergeFrom(
          from._internal_poor_network_conditions());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_custom_game_data()->::CMsgGameMatchSignOut_CCustomGameData::MergeFrom(
          from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_gameplay_stats()->::CMsgSignOutGameplayStats::MergeFrom(
          from._internal_gameplay_stats());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.date_ = from._impl_.date_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.cluster_ = from._impl_.cluster_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.first_blood_time_ = from._impl_.first_blood_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.event_score_ = from._impl_.event_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.average_networth_delta_ = from._impl_.average_networth_delta_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.good_guys_win_ = from._impl_.good_guys_win_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.automatic_surrender_ = from._impl_.automatic_surrender_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.training_data_recorded_ = from._impl_.training_data_recorded_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.match_flags_ = from._impl_.match_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.pre_game_duration_ = from._impl_.pre_game_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.normalized_win_probability_diff_ = from._impl_.normalized_win_probability_diff_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOut::CopyFrom(const CMsgGameMatchSignOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOut::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOut::InternalSwap(CMsgGameMatchSignOut* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.teams_.InternalSwap(&other->_impl_.teams_);
  _impl_.tower_status_.InternalSwap(&other->_impl_.tower_status_);
  _impl_.barracks_status_.InternalSwap(&other->_impl_.barracks_status_);
  _impl_.picks_bans_.InternalSwap(&other->_impl_.picks_bans_);
  _impl_.player_strange_count_adjustments_.InternalSwap(&other->_impl_.player_strange_count_adjustments_);
  _impl_.additional_msgs_.InternalSwap(&other->_impl_.additional_msgs_);
  _impl_.social_feed_events_.InternalSwap(&other->_impl_.social_feed_events_);
  _impl_.team_scores_.InternalSwap(&other->_impl_.team_scores_);
  _impl_.fantasy_stats_.InternalSwap(&other->_impl_.fantasy_stats_);
  _impl_.event_game_leaderboard_entries_.InternalSwap(&other->_impl_.event_game_leaderboard_entries_);
  _impl_.ward_placements_.InternalSwap(&other->_impl_.ward_placements_);
  _impl_.extra_messages_.InternalSwap(&other->_impl_.extra_messages_);
  _impl_.match_tracked_stats_.InternalSwap(&other->_impl_.match_tracked_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_addr_, lhs_arena,
      &other->_impl_.server_addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut, _impl_.normalized_win_probability_diff_)
      + sizeof(CMsgGameMatchSignOut::_impl_.normalized_win_probability_diff_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOut, _impl_.poor_network_conditions_)>(
          reinterpret_cast<char*>(&_impl_.poor_network_conditions_),
          reinterpret_cast<char*>(&other->_impl_.poor_network_conditions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOut::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[26]);
}

// ===================================================================

class CMsgSignOutDraftInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutDraftInfo>()._impl_._has_bits_);
  static void set_has_radiant_captain_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_captain_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void CMsgSignOutDraftInfo::clear_picks_bans() {
  _impl_.picks_bans_.Clear();
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutDraftInfo)
}
CMsgSignOutDraftInfo::CMsgSignOutDraftInfo(const CMsgSignOutDraftInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutDraftInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.picks_bans_){from._impl_.picks_bans_}
    , decltype(_impl_.radiant_captain_account_id_){}
    , decltype(_impl_.dire_captain_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.radiant_captain_account_id_, &from._impl_.radiant_captain_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dire_captain_account_id_) -
    reinterpret_cast<char*>(&_impl_.radiant_captain_account_id_)) + sizeof(_impl_.dire_captain_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutDraftInfo)
}

inline void CMsgSignOutDraftInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.picks_bans_){arena}
    , decltype(_impl_.radiant_captain_account_id_){0u}
    , decltype(_impl_.dire_captain_account_id_){0u}
  };
}

CMsgSignOutDraftInfo::~CMsgSignOutDraftInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutDraftInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutDraftInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.picks_bans_.~RepeatedPtrField();
}

void CMsgSignOutDraftInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutDraftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutDraftInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.picks_bans_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.radiant_captain_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dire_captain_account_id_) -
        reinterpret_cast<char*>(&_impl_.radiant_captain_account_id_)) + sizeof(_impl_.dire_captain_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutDraftInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 radiant_captain_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_radiant_captain_account_id(&has_bits);
          _impl_.radiant_captain_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_captain_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_dire_captain_account_id(&has_bits);
          _impl_.dire_captain_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMatchHeroSelectEvent picks_bans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutDraftInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutDraftInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 radiant_captain_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_radiant_captain_account_id(), target);
  }

  // optional uint32 dire_captain_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dire_captain_account_id(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_picks_bans_size()); i < n; i++) {
    const auto& repfield = this->_internal_picks_bans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutDraftInfo)
  return target;
}

size_t CMsgSignOutDraftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutDraftInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchHeroSelectEvent picks_bans = 3;
  total_size += 1UL * this->_internal_picks_bans_size();
  for (const auto& msg : this->_impl_.picks_bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 radiant_captain_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radiant_captain_account_id());
    }

    // optional uint32 dire_captain_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dire_captain_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutDraftInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutDraftInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutDraftInfo::GetClassData() const { return &_class_data_; }


void CMsgSignOutDraftInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutDraftInfo*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutDraftInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutDraftInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.picks_bans_.MergeFrom(from._impl_.picks_bans_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.radiant_captain_account_id_ = from._impl_.radiant_captain_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dire_captain_account_id_ = from._impl_.dire_captain_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutDraftInfo::CopyFrom(const CMsgSignOutDraftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutDraftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutDraftInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutDraftInfo::InternalSwap(CMsgSignOutDraftInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.picks_bans_.InternalSwap(&other->_impl_.picks_bans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutDraftInfo, _impl_.dire_captain_account_id_)
      + sizeof(CMsgSignOutDraftInfo::_impl_.dire_captain_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutDraftInfo, _impl_.radiant_captain_account_id_)>(
          reinterpret_cast<char*>(&_impl_.radiant_captain_account_id_),
          reinterpret_cast<char*>(&other->_impl_.radiant_captain_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutDraftInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[27]);
}

// ===================================================================

class CMsgSignOutBotInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBotInfo>()._impl_._has_bits_);
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_created_lobby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutBotInfo::CMsgSignOutBotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBotInfo)
}
CMsgSignOutBotInfo::CMsgSignOutBotInfo(const CMsgSignOutBotInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutBotInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bot_difficulty_radiant_){}
    , decltype(_impl_.allow_cheats_){}
    , decltype(_impl_.created_lobby_){}
    , decltype(_impl_.bot_difficulty_dire_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bot_difficulty_radiant_, &from._impl_.bot_difficulty_radiant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_difficulty_dire_) -
    reinterpret_cast<char*>(&_impl_.bot_difficulty_radiant_)) + sizeof(_impl_.bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBotInfo)
}

inline void CMsgSignOutBotInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bot_difficulty_radiant_){0}
    , decltype(_impl_.allow_cheats_){false}
    , decltype(_impl_.created_lobby_){false}
    , decltype(_impl_.bot_difficulty_dire_){0}
  };
}

CMsgSignOutBotInfo::~CMsgSignOutBotInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBotInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutBotInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutBotInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutBotInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBotInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.bot_difficulty_radiant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_difficulty_dire_) -
        reinterpret_cast<char*>(&_impl_.bot_difficulty_radiant_)) + sizeof(_impl_.bot_difficulty_dire_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBotInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool allow_cheats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_allow_cheats(&has_bits);
          _impl_.allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool created_lobby = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_created_lobby(&has_bits);
          _impl_.created_lobby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutBotInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBotInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool allow_cheats = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_allow_cheats(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_bot_difficulty_radiant(), target);
  }

  // optional bool created_lobby = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_created_lobby(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_bot_difficulty_dire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBotInfo)
  return target;
}

size_t CMsgSignOutBotInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBotInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .DOTABotDifficulty bot_difficulty_radiant = 2 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool created_lobby = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 5 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutBotInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutBotInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutBotInfo::GetClassData() const { return &_class_data_; }


void CMsgSignOutBotInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutBotInfo*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutBotInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBotInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.bot_difficulty_radiant_ = from._impl_.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.allow_cheats_ = from._impl_.allow_cheats_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.created_lobby_ = from._impl_.created_lobby_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bot_difficulty_dire_ = from._impl_.bot_difficulty_dire_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutBotInfo::CopyFrom(const CMsgSignOutBotInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBotInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBotInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutBotInfo::InternalSwap(CMsgSignOutBotInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBotInfo, _impl_.bot_difficulty_dire_)
      + sizeof(CMsgSignOutBotInfo::_impl_.bot_difficulty_dire_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBotInfo, _impl_.bot_difficulty_radiant_)>(
          reinterpret_cast<char*>(&_impl_.bot_difficulty_radiant_),
          reinterpret_cast<char*>(&other->_impl_.bot_difficulty_radiant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBotInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[28]);
}

// ===================================================================

class CMsgSignOutTextMuteInfo_TextMuteMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutTextMuteInfo_TextMuteMessage>()._impl_._has_bits_);
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caused_text_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_chat_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
}
CMsgSignOutTextMuteInfo_TextMuteMessage::CMsgSignOutTextMuteInfo_TextMuteMessage(const CMsgSignOutTextMuteInfo_TextMuteMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutTextMuteInfo_TextMuteMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_message_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.caused_text_mute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chat_message()) {
    _this->_impl_.chat_message_.Set(from._internal_chat_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.region_, &from._impl_.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.caused_text_mute_) -
    reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.caused_text_mute_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
}

inline void CMsgSignOutTextMuteInfo_TextMuteMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chat_message_){}
    , decltype(_impl_.region_){0u}
    , decltype(_impl_.caused_text_mute_){false}
  };
  _impl_.chat_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSignOutTextMuteInfo_TextMuteMessage::~CMsgSignOutTextMuteInfo_TextMuteMessage() {
  // @@protoc_insertion_point(destructor:CMsgSignOutTextMuteInfo.TextMuteMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutTextMuteInfo_TextMuteMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_message_.Destroy();
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chat_message_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.caused_text_mute_) -
        reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.caused_text_mute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutTextMuteInfo_TextMuteMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_region(&has_bits);
          _impl_.region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool caused_text_mute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_caused_text_mute(&has_bits);
          _impl_.caused_text_mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string chat_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chat_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutTextMuteInfo_TextMuteMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_region(), target);
  }

  // optional bool caused_text_mute = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_caused_text_mute(), target);
  }

  // optional string chat_message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_chat_message().data(), static_cast<int>(this->_internal_chat_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSignOutTextMuteInfo.TextMuteMessage.chat_message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chat_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutTextMuteInfo.TextMuteMessage)
  return target;
}

size_t CMsgSignOutTextMuteInfo_TextMuteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chat_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_chat_message());
    }

    // optional uint32 region = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region());
    }

    // optional bool caused_text_mute = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutTextMuteInfo_TextMuteMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutTextMuteInfo_TextMuteMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutTextMuteInfo_TextMuteMessage::GetClassData() const { return &_class_data_; }


void CMsgSignOutTextMuteInfo_TextMuteMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutTextMuteInfo_TextMuteMessage*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutTextMuteInfo_TextMuteMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chat_message(from._internal_chat_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.region_ = from._impl_.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.caused_text_mute_ = from._impl_.caused_text_mute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::CopyFrom(const CMsgSignOutTextMuteInfo_TextMuteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutTextMuteInfo.TextMuteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutTextMuteInfo_TextMuteMessage::IsInitialized() const {
  return true;
}

void CMsgSignOutTextMuteInfo_TextMuteMessage::InternalSwap(CMsgSignOutTextMuteInfo_TextMuteMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_message_, lhs_arena,
      &other->_impl_.chat_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_.caused_text_mute_)
      + sizeof(CMsgSignOutTextMuteInfo_TextMuteMessage::_impl_.caused_text_mute_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutTextMuteInfo_TextMuteMessage, _impl_.region_)>(
          reinterpret_cast<char*>(&_impl_.region_),
          reinterpret_cast<char*>(&other->_impl_.region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutTextMuteInfo_TextMuteMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[29]);
}

// ===================================================================

class CMsgSignOutTextMuteInfo::_Internal {
 public:
};

CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutTextMuteInfo)
}
CMsgSignOutTextMuteInfo::CMsgSignOutTextMuteInfo(const CMsgSignOutTextMuteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutTextMuteInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_mute_messages_){from._impl_.text_mute_messages_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutTextMuteInfo)
}

inline void CMsgSignOutTextMuteInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_mute_messages_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSignOutTextMuteInfo::~CMsgSignOutTextMuteInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutTextMuteInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutTextMuteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_mute_messages_.~RepeatedPtrField();
}

void CMsgSignOutTextMuteInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutTextMuteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutTextMuteInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_mute_messages_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutTextMuteInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_text_mute_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutTextMuteInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutTextMuteInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_text_mute_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_text_mute_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutTextMuteInfo)
  return target;
}

size_t CMsgSignOutTextMuteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutTextMuteInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutTextMuteInfo.TextMuteMessage text_mute_messages = 1;
  total_size += 1UL * this->_internal_text_mute_messages_size();
  for (const auto& msg : this->_impl_.text_mute_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutTextMuteInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutTextMuteInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutTextMuteInfo::GetClassData() const { return &_class_data_; }


void CMsgSignOutTextMuteInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutTextMuteInfo*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutTextMuteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutTextMuteInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.text_mute_messages_.MergeFrom(from._impl_.text_mute_messages_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutTextMuteInfo::CopyFrom(const CMsgSignOutTextMuteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutTextMuteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutTextMuteInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutTextMuteInfo::InternalSwap(CMsgSignOutTextMuteInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.text_mute_messages_.InternalSwap(&other->_impl_.text_mute_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutTextMuteInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[30]);
}

// ===================================================================

class CMsgSignOutPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutPlayerStats>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_first_blood_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_first_blood_given(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_aegises_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cheeses_eaten(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_creeps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_xppm(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_heals(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_wards_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutPlayerStats)
}
CMsgSignOutPlayerStats::CMsgSignOutPlayerStats(const CMsgSignOutPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutPlayerStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.rampages_){}
    , decltype(_impl_.triple_kills_){}
    , decltype(_impl_.first_blood_claimed_){}
    , decltype(_impl_.first_blood_given_){}
    , decltype(_impl_.couriers_killed_){}
    , decltype(_impl_.aegises_snatched_){}
    , decltype(_impl_.cheeses_eaten_){}
    , decltype(_impl_.creeps_stacked_){}
    , decltype(_impl_.fight_score_){}
    , decltype(_impl_.farm_score_){}
    , decltype(_impl_.support_score_){}
    , decltype(_impl_.push_score_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.gpm_){}
    , decltype(_impl_.xppm_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.heals_){}
    , decltype(_impl_.rapiers_purchased_){}
    , decltype(_impl_.observer_wards_placed_){}
    , decltype(_impl_.wards_destroyed_){}
    , decltype(_impl_.lobby_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobby_type_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutPlayerStats)
}

inline void CMsgSignOutPlayerStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.rampages_){0u}
    , decltype(_impl_.triple_kills_){0u}
    , decltype(_impl_.first_blood_claimed_){0u}
    , decltype(_impl_.first_blood_given_){0u}
    , decltype(_impl_.couriers_killed_){0u}
    , decltype(_impl_.aegises_snatched_){0u}
    , decltype(_impl_.cheeses_eaten_){0u}
    , decltype(_impl_.creeps_stacked_){0u}
    , decltype(_impl_.fight_score_){0}
    , decltype(_impl_.farm_score_){0}
    , decltype(_impl_.support_score_){0}
    , decltype(_impl_.push_score_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.gpm_){0}
    , decltype(_impl_.xppm_){0}
    , decltype(_impl_.net_worth_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.heals_){0}
    , decltype(_impl_.rapiers_purchased_){0u}
    , decltype(_impl_.observer_wards_placed_){0u}
    , decltype(_impl_.wards_destroyed_){0u}
    , decltype(_impl_.lobby_type_){0u}
  };
}

CMsgSignOutPlayerStats::~CMsgSignOutPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutPlayerStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutPlayerStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutPlayerStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.first_blood_given_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.first_blood_given_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.couriers_killed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.push_score_) -
        reinterpret_cast<char*>(&_impl_.couriers_killed_)) + sizeof(_impl_.push_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.net_worth_) -
        reinterpret_cast<char*>(&_impl_.kills_)) + sizeof(_impl_.net_worth_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&_impl_.damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_type_) -
        reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.lobby_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutPlayerStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rampages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rampages(&has_bits);
          _impl_.rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_triple_kills(&has_bits);
          _impl_.triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_blood_claimed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_first_blood_claimed(&has_bits);
          _impl_.first_blood_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 first_blood_given = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_first_blood_given(&has_bits);
          _impl_.first_blood_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_couriers_killed(&has_bits);
          _impl_.couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 aegises_snatched = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_aegises_snatched(&has_bits);
          _impl_.aegises_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheeses_eaten = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cheeses_eaten(&has_bits);
          _impl_.cheeses_eaten_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creeps_stacked = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_creeps_stacked(&has_bits);
          _impl_.creeps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float fight_score = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_fight_score(&has_bits);
          _impl_.fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float farm_score = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_farm_score(&has_bits);
          _impl_.farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float support_score = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_support_score(&has_bits);
          _impl_.support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float push_score = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_push_score(&has_bits);
          _impl_.push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_last_hits(&has_bits);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_denies(&has_bits);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float gpm = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_gpm(&has_bits);
          _impl_.gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xppm = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_xppm(&has_bits);
          _impl_.xppm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float net_worth = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_damage(&has_bits);
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float heals = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_heals(&has_bits);
          _impl_.heals_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_rapiers_purchased(&has_bits);
          _impl_.rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_observer_wards_placed(&has_bits);
          _impl_.observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wards_destroyed = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_wards_destroyed(&has_bits);
          _impl_.wards_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutPlayerStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutPlayerStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional uint32 rank = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rank(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 rampages = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_triple_kills(), target);
  }

  // optional uint32 first_blood_claimed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_first_blood_claimed(), target);
  }

  // optional uint32 first_blood_given = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_first_blood_given(), target);
  }

  // optional uint32 couriers_killed = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_couriers_killed(), target);
  }

  // optional uint32 aegises_snatched = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aegises_snatched(), target);
  }

  // optional uint32 cheeses_eaten = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cheeses_eaten(), target);
  }

  // optional uint32 creeps_stacked = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_creeps_stacked(), target);
  }

  // optional float fight_score = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_farm_score(), target);
  }

  // optional float support_score = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_support_score(), target);
  }

  // optional float push_score = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_push_score(), target);
  }

  // optional uint32 kills = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_assists(), target);
  }

  // optional uint32 last_hits = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_denies(), target);
  }

  // optional float gpm = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_gpm(), target);
  }

  // optional float xppm = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_xppm(), target);
  }

  // optional float net_worth = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_net_worth(), target);
  }

  // optional float damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_damage(), target);
  }

  // optional float heals = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_heals(), target);
  }

  // optional uint32 rapiers_purchased = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 observer_wards_placed = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 wards_destroyed = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_wards_destroyed(), target);
  }

  // optional uint32 lobby_type = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_lobby_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutPlayerStats)
  return target;
}

size_t CMsgSignOutPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutPlayerStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional int32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rank = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 rampages = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rampages());
    }

    // optional uint32 triple_kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_triple_kills());
    }

    // optional uint32 first_blood_claimed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_blood_claimed());
    }

    // optional uint32 first_blood_given = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_first_blood_given());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 couriers_killed = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_couriers_killed());
    }

    // optional uint32 aegises_snatched = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aegises_snatched());
    }

    // optional uint32 cheeses_eaten = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheeses_eaten());
    }

    // optional uint32 creeps_stacked = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creeps_stacked());
    }

    // optional float fight_score = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float farm_score = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float support_score = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float push_score = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 kills = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 last_hits = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional float gpm = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float xppm = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float net_worth = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional float damage = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float heals = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 rapiers_purchased = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 observer_wards_placed = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 wards_destroyed = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_wards_destroyed());
    }

    // optional uint32 lobby_type = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutPlayerStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutPlayerStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutPlayerStats::GetClassData() const { return &_class_data_; }


void CMsgSignOutPlayerStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutPlayerStats*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutPlayerStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutPlayerStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rampages_ = from._impl_.rampages_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.triple_kills_ = from._impl_.triple_kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.first_blood_claimed_ = from._impl_.first_blood_claimed_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.first_blood_given_ = from._impl_.first_blood_given_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.couriers_killed_ = from._impl_.couriers_killed_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.aegises_snatched_ = from._impl_.aegises_snatched_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.cheeses_eaten_ = from._impl_.cheeses_eaten_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.creeps_stacked_ = from._impl_.creeps_stacked_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.fight_score_ = from._impl_.fight_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.farm_score_ = from._impl_.farm_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.support_score_ = from._impl_.support_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.push_score_ = from._impl_.push_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.gpm_ = from._impl_.gpm_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.xppm_ = from._impl_.xppm_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.damage_ = from._impl_.damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.heals_ = from._impl_.heals_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.rapiers_purchased_ = from._impl_.rapiers_purchased_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.observer_wards_placed_ = from._impl_.observer_wards_placed_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.wards_destroyed_ = from._impl_.wards_destroyed_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutPlayerStats::CopyFrom(const CMsgSignOutPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutPlayerStats::IsInitialized() const {
  return true;
}

void CMsgSignOutPlayerStats::InternalSwap(CMsgSignOutPlayerStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutPlayerStats, _impl_.lobby_type_)
      + sizeof(CMsgSignOutPlayerStats::_impl_.lobby_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutPlayerStats, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutPlayerStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[31]);
}

// ===================================================================

class CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
}
CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
}

inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.count_){0u}
    , decltype(_impl_.type_){4294967295u}
  };
}

CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::~CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.count_ = 0u;
    _impl_.type_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 type = 1 [default = 4294967295];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 type = 1 [default = 4294967295];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
    }

    // optional uint32 type = 1 [default = 4294967295];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::GetClassData() const { return &_class_data_; }


void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.count_, other->_impl_.count_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[32]);
}

// ===================================================================

class CMsgSignOutCommunicationSummary_PlayerCommunication::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunicationSummary_PlayerCommunication>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_pings_per_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teammate_pings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_teammate_pings_per_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_chat_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_all_chat_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_chat_wheel_messages(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pauses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unpauses(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lines_drawn(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_voice_chat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_chat_mutes(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_voice_mutes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_comms_blocks_solo(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_comms_blocks_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}
CMsgSignOutCommunicationSummary_PlayerCommunication::CMsgSignOutCommunicationSummary_PlayerCommunication(const CMsgSignOutCommunicationSummary_PlayerCommunication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutCommunicationSummary_PlayerCommunication* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_details_){from._impl_.ping_details_}
    , decltype(_impl_.chat_log_){from._impl_.chat_log_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.pings_){}
    , decltype(_impl_.max_pings_per_interval_){}
    , decltype(_impl_.teammate_pings_){}
    , decltype(_impl_.max_teammate_pings_per_interval_){}
    , decltype(_impl_.team_chat_messages_){}
    , decltype(_impl_.all_chat_messages_){}
    , decltype(_impl_.chat_wheel_messages_){}
    , decltype(_impl_.pauses_){}
    , decltype(_impl_.unpauses_){}
    , decltype(_impl_.lines_drawn_){}
    , decltype(_impl_.voice_chat_seconds_){}
    , decltype(_impl_.chat_mutes_){}
    , decltype(_impl_.voice_mutes_){}
    , decltype(_impl_.comms_blocks_solo_){}
    , decltype(_impl_.comms_blocks_mass_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.comms_blocks_mass_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.comms_blocks_mass_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
}

inline void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ping_details_){arena}
    , decltype(_impl_.chat_log_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.pings_){0u}
    , decltype(_impl_.max_pings_per_interval_){0u}
    , decltype(_impl_.teammate_pings_){0u}
    , decltype(_impl_.max_teammate_pings_per_interval_){0u}
    , decltype(_impl_.team_chat_messages_){0u}
    , decltype(_impl_.all_chat_messages_){0u}
    , decltype(_impl_.chat_wheel_messages_){0u}
    , decltype(_impl_.pauses_){0u}
    , decltype(_impl_.unpauses_){0u}
    , decltype(_impl_.lines_drawn_){0u}
    , decltype(_impl_.voice_chat_seconds_){0u}
    , decltype(_impl_.chat_mutes_){0u}
    , decltype(_impl_.voice_mutes_){0u}
    , decltype(_impl_.comms_blocks_solo_){0u}
    , decltype(_impl_.comms_blocks_mass_){0u}
  };
}

CMsgSignOutCommunicationSummary_PlayerCommunication::~CMsgSignOutCommunicationSummary_PlayerCommunication() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutCommunicationSummary_PlayerCommunication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ping_details_.~RepeatedPtrField();
  _impl_.chat_log_.~RepeatedPtrField();
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ping_details_.Clear();
  _impl_.chat_log_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chat_wheel_messages_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.chat_wheel_messages_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.pauses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.comms_blocks_mass_) -
        reinterpret_cast<char*>(&_impl_.pauses_)) + sizeof(_impl_.comms_blocks_mass_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_pings(&has_bits);
          _impl_.pings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_pings_per_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_max_pings_per_interval(&has_bits);
          _impl_.max_pings_per_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 teammate_pings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_teammate_pings(&has_bits);
          _impl_.teammate_pings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_teammate_pings_per_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_max_teammate_pings_per_interval(&has_bits);
          _impl_.max_teammate_pings_per_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_chat_messages = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_team_chat_messages(&has_bits);
          _impl_.team_chat_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 all_chat_messages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_all_chat_messages(&has_bits);
          _impl_.all_chat_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_wheel_messages = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_chat_wheel_messages(&has_bits);
          _impl_.chat_wheel_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pauses = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_pauses(&has_bits);
          _impl_.pauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 unpauses = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_unpauses(&has_bits);
          _impl_.unpauses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lines_drawn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_lines_drawn(&has_bits);
          _impl_.lines_drawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 voice_chat_seconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_voice_chat_seconds(&has_bits);
          _impl_.voice_chat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 chat_mutes = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_chat_mutes(&has_bits);
          _impl_.chat_mutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 voice_mutes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_voice_mutes(&has_bits);
          _impl_.voice_mutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ping_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 comms_blocks_solo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_comms_blocks_solo(&has_bits);
          _impl_.comms_blocks_solo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 comms_blocks_mass = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_comms_blocks_mass(&has_bits);
          _impl_.comms_blocks_mass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string chat_log = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_chat_log();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgSignOutCommunicationSummary.PlayerCommunication.chat_log");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutCommunicationSummary_PlayerCommunication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 pings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pings(), target);
  }

  // optional uint32 max_pings_per_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_pings_per_interval(), target);
  }

  // optional uint32 teammate_pings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teammate_pings(), target);
  }

  // optional uint32 max_teammate_pings_per_interval = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_teammate_pings_per_interval(), target);
  }

  // optional uint32 team_chat_messages = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_team_chat_messages(), target);
  }

  // optional uint32 all_chat_messages = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_all_chat_messages(), target);
  }

  // optional uint32 chat_wheel_messages = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_chat_wheel_messages(), target);
  }

  // optional uint32 pauses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pauses(), target);
  }

  // optional uint32 unpauses = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_unpauses(), target);
  }

  // optional uint32 lines_drawn = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_lines_drawn(), target);
  }

  // optional uint32 voice_chat_seconds = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_voice_chat_seconds(), target);
  }

  // optional uint32 chat_mutes = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_chat_mutes(), target);
  }

  // optional uint32 voice_mutes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_voice_mutes(), target);
  }

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ping_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_ping_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 comms_blocks_solo = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_comms_blocks_solo(), target);
  }

  // optional uint32 comms_blocks_mass = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_comms_blocks_mass(), target);
  }

  // repeated string chat_log = 18;
  for (int i = 0, n = this->_internal_chat_log_size(); i < n; i++) {
    const auto& s = this->_internal_chat_log(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSignOutCommunicationSummary.PlayerCommunication.chat_log");
    target = stream->WriteString(18, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary.PlayerCommunication)
  return target;
}

size_t CMsgSignOutCommunicationSummary_PlayerCommunication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication.PingDetail ping_details = 15;
  total_size += 1UL * this->_internal_ping_details_size();
  for (const auto& msg : this->_impl_.ping_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string chat_log = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.chat_log_.size());
  for (int i = 0, n = _impl_.chat_log_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.chat_log_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 pings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pings());
    }

    // optional uint32 max_pings_per_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_pings_per_interval());
    }

    // optional uint32 teammate_pings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_teammate_pings());
    }

    // optional uint32 max_teammate_pings_per_interval = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_teammate_pings_per_interval());
    }

    // optional uint32 team_chat_messages = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_chat_messages());
    }

    // optional uint32 all_chat_messages = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_all_chat_messages());
    }

    // optional uint32 chat_wheel_messages = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_wheel_messages());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 pauses = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pauses());
    }

    // optional uint32 unpauses = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_unpauses());
    }

    // optional uint32 lines_drawn = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lines_drawn());
    }

    // optional uint32 voice_chat_seconds = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voice_chat_seconds());
    }

    // optional uint32 chat_mutes = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_chat_mutes());
    }

    // optional uint32 voice_mutes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_voice_mutes());
    }

    // optional uint32 comms_blocks_solo = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_comms_blocks_solo());
    }

    // optional uint32 comms_blocks_mass = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_comms_blocks_mass());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutCommunicationSummary_PlayerCommunication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutCommunicationSummary_PlayerCommunication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutCommunicationSummary_PlayerCommunication::GetClassData() const { return &_class_data_; }


void CMsgSignOutCommunicationSummary_PlayerCommunication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutCommunicationSummary_PlayerCommunication*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutCommunicationSummary_PlayerCommunication&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ping_details_.MergeFrom(from._impl_.ping_details_);
  _this->_impl_.chat_log_.MergeFrom(from._impl_.chat_log_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.pings_ = from._impl_.pings_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.max_pings_per_interval_ = from._impl_.max_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.teammate_pings_ = from._impl_.teammate_pings_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_teammate_pings_per_interval_ = from._impl_.max_teammate_pings_per_interval_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.team_chat_messages_ = from._impl_.team_chat_messages_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.all_chat_messages_ = from._impl_.all_chat_messages_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.chat_wheel_messages_ = from._impl_.chat_wheel_messages_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.pauses_ = from._impl_.pauses_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.unpauses_ = from._impl_.unpauses_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lines_drawn_ = from._impl_.lines_drawn_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.voice_chat_seconds_ = from._impl_.voice_chat_seconds_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.chat_mutes_ = from._impl_.chat_mutes_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.voice_mutes_ = from._impl_.voice_mutes_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.comms_blocks_solo_ = from._impl_.comms_blocks_solo_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.comms_blocks_mass_ = from._impl_.comms_blocks_mass_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::CopyFrom(const CMsgSignOutCommunicationSummary_PlayerCommunication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary.PlayerCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary_PlayerCommunication::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary_PlayerCommunication::InternalSwap(CMsgSignOutCommunicationSummary_PlayerCommunication* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ping_details_.InternalSwap(&other->_impl_.ping_details_);
  _impl_.chat_log_.InternalSwap(&other->_impl_.chat_log_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.comms_blocks_mass_)
      + sizeof(CMsgSignOutCommunicationSummary_PlayerCommunication::_impl_.comms_blocks_mass_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunicationSummary_PlayerCommunication, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary_PlayerCommunication::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[33]);
}

// ===================================================================

class CMsgSignOutCommunicationSummary::_Internal {
 public:
};

CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunicationSummary)
}
CMsgSignOutCommunicationSummary::CMsgSignOutCommunicationSummary(const CMsgSignOutCommunicationSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutCommunicationSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunicationSummary)
}

inline void CMsgSignOutCommunicationSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSignOutCommunicationSummary::~CMsgSignOutCommunicationSummary() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunicationSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutCommunicationSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgSignOutCommunicationSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutCommunicationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunicationSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunicationSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutCommunicationSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunicationSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunicationSummary)
  return target;
}

size_t CMsgSignOutCommunicationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunicationSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunicationSummary.PlayerCommunication players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutCommunicationSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutCommunicationSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutCommunicationSummary::GetClassData() const { return &_class_data_; }


void CMsgSignOutCommunicationSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutCommunicationSummary*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutCommunicationSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunicationSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutCommunicationSummary::CopyFrom(const CMsgSignOutCommunicationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunicationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunicationSummary::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunicationSummary::InternalSwap(CMsgSignOutCommunicationSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunicationSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[34]);
}

// ===================================================================

class CMsgGameMatchSignoutResponse_PlayerMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignoutResponse_PlayerMetadata>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
}
CMsgGameMatchSignoutResponse_PlayerMetadata::CMsgGameMatchSignoutResponse_PlayerMetadata(const CMsgGameMatchSignoutResponse_PlayerMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignoutResponse_PlayerMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.avg_kills_x16_){}
    , decltype(_impl_.avg_deaths_x16_){}
    , decltype(_impl_.avg_assists_x16_){}
    , decltype(_impl_.avg_gpm_x16_){}
    , decltype(_impl_.avg_xpm_x16_){}
    , decltype(_impl_.best_kills_x16_){}
    , decltype(_impl_.best_assists_x16_){}
    , decltype(_impl_.best_gpm_x16_){}
    , decltype(_impl_.best_xpm_x16_){}
    , decltype(_impl_.win_streak_){}
    , decltype(_impl_.best_win_streak_){}
    , decltype(_impl_.games_played_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.games_played_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.games_played_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
}

inline void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.avg_kills_x16_){0u}
    , decltype(_impl_.avg_deaths_x16_){0u}
    , decltype(_impl_.avg_assists_x16_){0u}
    , decltype(_impl_.avg_gpm_x16_){0u}
    , decltype(_impl_.avg_xpm_x16_){0u}
    , decltype(_impl_.best_kills_x16_){0u}
    , decltype(_impl_.best_assists_x16_){0u}
    , decltype(_impl_.best_gpm_x16_){0u}
    , decltype(_impl_.best_xpm_x16_){0u}
    , decltype(_impl_.win_streak_){0u}
    , decltype(_impl_.best_win_streak_){0u}
    , decltype(_impl_.games_played_){0u}
  };
}

CMsgGameMatchSignoutResponse_PlayerMetadata::~CMsgGameMatchSignoutResponse_PlayerMetadata() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignoutResponse_PlayerMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.best_assists_x16_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.best_assists_x16_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.best_gpm_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.games_played_) -
        reinterpret_cast<char*>(&_impl_.best_gpm_x16_)) + sizeof(_impl_.games_played_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_avg_kills_x16(&has_bits);
          _impl_.avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_avg_deaths_x16(&has_bits);
          _impl_.avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_avg_assists_x16(&has_bits);
          _impl_.avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_avg_gpm_x16(&has_bits);
          _impl_.avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_avg_xpm_x16(&has_bits);
          _impl_.avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_best_kills_x16(&has_bits);
          _impl_.best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_best_assists_x16(&has_bits);
          _impl_.best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_best_gpm_x16(&has_bits);
          _impl_.best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_best_xpm_x16(&has_bits);
          _impl_.best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 win_streak = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_win_streak(&has_bits);
          _impl_.win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_best_win_streak(&has_bits);
          _impl_.best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 games_played = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_games_played(&has_bits);
          _impl_.games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignoutResponse_PlayerMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 avg_kills_x16 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_win_streak(), target);
  }

  // optional uint32 games_played = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_games_played(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse.PlayerMetadata)
  return target;
}

size_t CMsgGameMatchSignoutResponse_PlayerMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 avg_kills_x16 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_assists_x16());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 best_gpm_x16 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_best_win_streak());
    }

    // optional uint32 games_played = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_games_played());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignoutResponse_PlayerMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignoutResponse_PlayerMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignoutResponse_PlayerMetadata::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignoutResponse_PlayerMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignoutResponse_PlayerMetadata*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignoutResponse_PlayerMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.avg_kills_x16_ = from._impl_.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.avg_deaths_x16_ = from._impl_.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.avg_assists_x16_ = from._impl_.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.avg_gpm_x16_ = from._impl_.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.avg_xpm_x16_ = from._impl_.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.best_kills_x16_ = from._impl_.best_kills_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.best_assists_x16_ = from._impl_.best_assists_x16_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.best_gpm_x16_ = from._impl_.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.best_xpm_x16_ = from._impl_.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.win_streak_ = from._impl_.win_streak_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.best_win_streak_ = from._impl_.best_win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.games_played_ = from._impl_.games_played_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::CopyFrom(const CMsgGameMatchSignoutResponse_PlayerMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignoutResponse.PlayerMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse_PlayerMetadata::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse_PlayerMetadata::InternalSwap(CMsgGameMatchSignoutResponse_PlayerMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.games_played_)
      + sizeof(CMsgGameMatchSignoutResponse_PlayerMetadata::_impl_.games_played_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse_PlayerMetadata, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignoutResponse_PlayerMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[35]);
}

// ===================================================================

class CMsgGameMatchSignoutResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignoutResponse>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_replay_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_metadata_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTAMatch& match_details(const CMsgGameMatchSignoutResponse* msg);
  static void set_has_match_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMvpData& mvp_data(const CMsgGameMatchSignoutResponse* msg);
  static void set_has_mvp_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ow_private_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ow_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ow_replay_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDOTAMatch&
CMsgGameMatchSignoutResponse::_Internal::match_details(const CMsgGameMatchSignoutResponse* msg) {
  return *msg->_impl_.match_details_;
}
const ::CMvpData&
CMsgGameMatchSignoutResponse::_Internal::mvp_data(const CMsgGameMatchSignoutResponse* msg) {
  return *msg->_impl_.mvp_data_;
}
void CMsgGameMatchSignoutResponse::clear_timed_reward_details() {
  _impl_.timed_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_xp_reward_details() {
  _impl_.xp_reward_details_.Clear();
}
void CMsgGameMatchSignoutResponse::clear_match_details() {
  if (_impl_.match_details_ != nullptr) _impl_.match_details_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgGameMatchSignoutResponse::clear_mvp_data() {
  if (_impl_.mvp_data_ != nullptr) _impl_.mvp_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignoutResponse)
}
CMsgGameMatchSignoutResponse::CMsgGameMatchSignoutResponse(const CMsgGameMatchSignoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignoutResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_reward_details_){from._impl_.timed_reward_details_}
    , decltype(_impl_.xp_reward_details_){from._impl_.xp_reward_details_}
    , decltype(_impl_.players_metadata_){from._impl_.players_metadata_}
    , decltype(_impl_.match_details_){nullptr}
    , decltype(_impl_.mvp_data_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.replay_salt_){}
    , decltype(_impl_.leagueid_){}
    , decltype(_impl_.metadata_private_key_){}
    , decltype(_impl_.ow_salt_){}
    , decltype(_impl_.ow_private_key_){}
    , decltype(_impl_.ow_replay_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_details()) {
    _this->_impl_.match_details_ = new ::CMsgDOTAMatch(*from._impl_.match_details_);
  }
  if (from._internal_has_mvp_data()) {
    _this->_impl_.mvp_data_ = new ::CMvpData(*from._impl_.mvp_data_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ow_replay_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.ow_replay_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignoutResponse)
}

inline void CMsgGameMatchSignoutResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timed_reward_details_){arena}
    , decltype(_impl_.xp_reward_details_){arena}
    , decltype(_impl_.players_metadata_){arena}
    , decltype(_impl_.match_details_){nullptr}
    , decltype(_impl_.mvp_data_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.replay_salt_){0u}
    , decltype(_impl_.leagueid_){0u}
    , decltype(_impl_.metadata_private_key_){0u}
    , decltype(_impl_.ow_salt_){0u}
    , decltype(_impl_.ow_private_key_){uint64_t{0u}}
    , decltype(_impl_.ow_replay_id_){uint64_t{0u}}
  };
}

CMsgGameMatchSignoutResponse::~CMsgGameMatchSignoutResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignoutResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timed_reward_details_.~RepeatedPtrField();
  _impl_.xp_reward_details_.~RepeatedPtrField();
  _impl_.players_metadata_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.match_details_;
  if (this != internal_default_instance()) delete _impl_.mvp_data_;
}

void CMsgGameMatchSignoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignoutResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timed_reward_details_.Clear();
  _impl_.xp_reward_details_.Clear();
  _impl_.players_metadata_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.match_details_ != nullptr);
      _impl_.match_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.mvp_data_ != nullptr);
      _impl_.mvp_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ow_private_key_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.ow_private_key_));
  }
  _impl_.ow_replay_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 replay_salt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_replay_salt(&has_bits);
          _impl_.replay_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CSODOTALobbyMember xp_reward_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_xp_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leagueid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_leagueid(&has_bits);
          _impl_.leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 metadata_private_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_metadata_private_key(&has_bits);
          _impl_.metadata_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch match_details = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMvpData mvp_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvp_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ow_private_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_ow_private_key(&has_bits);
          _impl_.ow_private_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 ow_salt = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_ow_salt(&has_bits);
          _impl_.ow_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ow_replay_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_ow_replay_id(&has_bits);
          _impl_.ow_replay_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignoutResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignoutResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed32 replay_salt = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_replay_salt(), target);
  }

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timed_reward_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_timed_reward_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CSODOTALobbyMember xp_reward_details = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_xp_reward_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_xp_reward_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 leagueid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leagueid(), target);
  }

  // optional fixed32 metadata_private_key = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(7, this->_internal_metadata_private_key(), target);
  }

  // optional .CMsgDOTAMatch match_details = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::match_details(this),
        _Internal::match_details(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_players_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMvpData mvp_data = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::mvp_data(this),
        _Internal::mvp_data(this).GetCachedSize(), target, stream);
  }

  // optional fixed64 ow_private_key = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(11, this->_internal_ow_private_key(), target);
  }

  // optional fixed32 ow_salt = 12;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(12, this->_internal_ow_salt(), target);
  }

  // optional uint64 ow_replay_id = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(13, this->_internal_ow_replay_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignoutResponse)
  return target;
}

size_t CMsgGameMatchSignoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignoutResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 3;
  total_size += 1UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->_impl_.timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CSODOTALobbyMember xp_reward_details = 4;
  total_size += 1UL * this->_internal_xp_reward_details_size();
  for (const auto& msg : this->_impl_.xp_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameMatchSignoutResponse.PlayerMetadata players_metadata = 9;
  total_size += 1UL * this->_internal_players_metadata_size();
  for (const auto& msg : this->_impl_.players_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTAMatch match_details = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_details_);
    }

    // optional .CMvpData mvp_data = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.mvp_data_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional fixed32 replay_salt = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 leagueid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leagueid());
    }

    // optional fixed32 metadata_private_key = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 ow_salt = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional fixed64 ow_private_key = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  // optional uint64 ow_replay_id = 13;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ow_replay_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignoutResponse::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignoutResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignoutResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timed_reward_details_.MergeFrom(from._impl_.timed_reward_details_);
  _this->_impl_.xp_reward_details_.MergeFrom(from._impl_.xp_reward_details_);
  _this->_impl_.players_metadata_.MergeFrom(from._impl_.players_metadata_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match_details()->::CMsgDOTAMatch::MergeFrom(
          from._internal_match_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_mvp_data()->::CMvpData::MergeFrom(
          from._internal_mvp_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.replay_salt_ = from._impl_.replay_salt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.leagueid_ = from._impl_.leagueid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.metadata_private_key_ = from._impl_.metadata_private_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ow_salt_ = from._impl_.ow_salt_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ow_private_key_ = from._impl_.ow_private_key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_ow_replay_id(from._internal_ow_replay_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignoutResponse::CopyFrom(const CMsgGameMatchSignoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignoutResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignoutResponse::InternalSwap(CMsgGameMatchSignoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.timed_reward_details_.InternalSwap(&other->_impl_.timed_reward_details_);
  _impl_.xp_reward_details_.InternalSwap(&other->_impl_.xp_reward_details_);
  _impl_.players_metadata_.InternalSwap(&other->_impl_.players_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _impl_.ow_replay_id_)
      + sizeof(CMsgGameMatchSignoutResponse::_impl_.ow_replay_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignoutResponse, _impl_.match_details_)>(
          reinterpret_cast<char*>(&_impl_.match_details_),
          reinterpret_cast<char*>(&other->_impl_.match_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[36]);
}

// ===================================================================

class CMsgTimedRewardContainer::_Internal {
 public:
};

void CMsgTimedRewardContainer::clear_timed_reward_details() {
  _impl_.timed_reward_details_.Clear();
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgTimedRewardContainer)
}
CMsgTimedRewardContainer::CMsgTimedRewardContainer(const CMsgTimedRewardContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgTimedRewardContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timed_reward_details_){from._impl_.timed_reward_details_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgTimedRewardContainer)
}

inline void CMsgTimedRewardContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timed_reward_details_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgTimedRewardContainer::~CMsgTimedRewardContainer() {
  // @@protoc_insertion_point(destructor:CMsgTimedRewardContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgTimedRewardContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timed_reward_details_.~RepeatedPtrField();
}

void CMsgTimedRewardContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgTimedRewardContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTimedRewardContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timed_reward_details_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTimedRewardContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timed_reward_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTimedRewardContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTimedRewardContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timed_reward_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_timed_reward_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTimedRewardContainer)
  return target;
}

size_t CMsgTimedRewardContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTimedRewardContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTimedRewardDetails timed_reward_details = 1;
  total_size += 1UL * this->_internal_timed_reward_details_size();
  for (const auto& msg : this->_impl_.timed_reward_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTimedRewardContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgTimedRewardContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTimedRewardContainer::GetClassData() const { return &_class_data_; }


void CMsgTimedRewardContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgTimedRewardContainer*>(&to_msg);
  auto& from = static_cast<const CMsgTimedRewardContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTimedRewardContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timed_reward_details_.MergeFrom(from._impl_.timed_reward_details_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTimedRewardContainer::CopyFrom(const CMsgTimedRewardContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTimedRewardContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTimedRewardContainer::IsInitialized() const {
  return true;
}

void CMsgTimedRewardContainer::InternalSwap(CMsgTimedRewardContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.timed_reward_details_.InternalSwap(&other->_impl_.timed_reward_details_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTimedRewardContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[37]);
}

// ===================================================================

class CMsgGameMatchSignOutPermissionRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPermissionRequest>()._impl_._has_bits_);
  static void set_has_server_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_local_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_total_attempt(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_seconds_waited(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPermissionRequest)
}
CMsgGameMatchSignOutPermissionRequest::CMsgGameMatchSignOutPermissionRequest(const CMsgGameMatchSignOutPermissionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOutPermissionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){}
    , decltype(_impl_.local_attempt_){}
    , decltype(_impl_.total_attempt_){}
    , decltype(_impl_.seconds_waited_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_version_, &from._impl_.server_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.seconds_waited_) -
    reinterpret_cast<char*>(&_impl_.server_version_)) + sizeof(_impl_.seconds_waited_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionRequest)
}

inline void CMsgGameMatchSignOutPermissionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_version_){0u}
    , decltype(_impl_.local_attempt_){0u}
    , decltype(_impl_.total_attempt_){0u}
    , decltype(_impl_.seconds_waited_){0u}
  };
}

CMsgGameMatchSignOutPermissionRequest::~CMsgGameMatchSignOutPermissionRequest() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOutPermissionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOutPermissionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOutPermissionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPermissionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.server_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_waited_) -
        reinterpret_cast<char*>(&_impl_.server_version_)) + sizeof(_impl_.seconds_waited_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPermissionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_version(&has_bits);
          _impl_.server_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 local_attempt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_local_attempt(&has_bits);
          _impl_.local_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_attempt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_total_attempt(&has_bits);
          _impl_.total_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 seconds_waited = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_seconds_waited(&has_bits);
          _impl_.seconds_waited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOutPermissionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_version(), target);
  }

  // optional uint32 local_attempt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_local_attempt(), target);
  }

  // optional uint32 total_attempt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_total_attempt(), target);
  }

  // optional uint32 seconds_waited = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_seconds_waited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionRequest)
  return target;
}

size_t CMsgGameMatchSignOutPermissionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPermissionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 server_version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_version());
    }

    // optional uint32 local_attempt = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_local_attempt());
    }

    // optional uint32 total_attempt = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_attempt());
    }

    // optional uint32 seconds_waited = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seconds_waited());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOutPermissionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOutPermissionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOutPermissionRequest::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOutPermissionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOutPermissionRequest*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOutPermissionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPermissionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_version_ = from._impl_.server_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.local_attempt_ = from._impl_.local_attempt_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.total_attempt_ = from._impl_.total_attempt_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.seconds_waited_ = from._impl_.seconds_waited_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOutPermissionRequest::CopyFrom(const CMsgGameMatchSignOutPermissionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPermissionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionRequest::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionRequest::InternalSwap(CMsgGameMatchSignOutPermissionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _impl_.seconds_waited_)
      + sizeof(CMsgGameMatchSignOutPermissionRequest::_impl_.seconds_waited_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionRequest, _impl_.server_version_)>(
          reinterpret_cast<char*>(&_impl_.server_version_),
          reinterpret_cast<char*>(&other->_impl_.server_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPermissionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[38]);
}

// ===================================================================

class CMsgGameMatchSignOutPermissionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPermissionResponse>()._impl_._has_bits_);
  static void set_has_permission_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_abandon_signout(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_retry_delay_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPermissionResponse)
}
CMsgGameMatchSignOutPermissionResponse::CMsgGameMatchSignOutPermissionResponse(const CMsgGameMatchSignOutPermissionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOutPermissionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permission_granted_){}
    , decltype(_impl_.abandon_signout_){}
    , decltype(_impl_.retry_delay_seconds_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.permission_granted_, &from._impl_.permission_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.retry_delay_seconds_) -
    reinterpret_cast<char*>(&_impl_.permission_granted_)) + sizeof(_impl_.retry_delay_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPermissionResponse)
}

inline void CMsgGameMatchSignOutPermissionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.permission_granted_){false}
    , decltype(_impl_.abandon_signout_){false}
    , decltype(_impl_.retry_delay_seconds_){0u}
  };
}

CMsgGameMatchSignOutPermissionResponse::~CMsgGameMatchSignOutPermissionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPermissionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOutPermissionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameMatchSignOutPermissionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOutPermissionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPermissionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.permission_granted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.retry_delay_seconds_) -
        reinterpret_cast<char*>(&_impl_.permission_granted_)) + sizeof(_impl_.retry_delay_seconds_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPermissionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool permission_granted = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_permission_granted(&has_bits);
          _impl_.permission_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool abandon_signout = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_abandon_signout(&has_bits);
          _impl_.abandon_signout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 retry_delay_seconds = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_retry_delay_seconds(&has_bits);
          _impl_.retry_delay_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOutPermissionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPermissionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool permission_granted = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_permission_granted(), target);
  }

  // optional bool abandon_signout = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_abandon_signout(), target);
  }

  // optional uint32 retry_delay_seconds = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_retry_delay_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPermissionResponse)
  return target;
}

size_t CMsgGameMatchSignOutPermissionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPermissionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool permission_granted = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool abandon_signout = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 retry_delay_seconds = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_retry_delay_seconds());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOutPermissionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOutPermissionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOutPermissionResponse::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOutPermissionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOutPermissionResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOutPermissionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPermissionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.permission_granted_ = from._impl_.permission_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.abandon_signout_ = from._impl_.abandon_signout_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.retry_delay_seconds_ = from._impl_.retry_delay_seconds_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOutPermissionResponse::CopyFrom(const CMsgGameMatchSignOutPermissionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPermissionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPermissionResponse::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPermissionResponse::InternalSwap(CMsgGameMatchSignOutPermissionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _impl_.retry_delay_seconds_)
      + sizeof(CMsgGameMatchSignOutPermissionResponse::_impl_.retry_delay_seconds_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPermissionResponse, _impl_.permission_granted_)>(
          reinterpret_cast<char*>(&_impl_.permission_granted_),
          reinterpret_cast<char*>(&other->_impl_.permission_granted_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPermissionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[39]);
}

// ===================================================================

class CMsgGameMatchSignOutEventGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutEventGameData>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutEventGameData)
}
CMsgGameMatchSignOutEventGameData::CMsgGameMatchSignOutEventGameData(const CMsgGameMatchSignOutEventGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOutEventGameData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.event_game_data_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.start_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_map_name()) {
    _this->_impl_.map_name_.Set(from._internal_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.event_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_game_data()) {
    _this->_impl_.event_game_data_.Set(from._internal_event_game_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.start_time_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutEventGameData)
}

inline void CMsgGameMatchSignOutEventGameData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.map_name_){}
    , decltype(_impl_.event_game_data_){}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.start_time_){0u}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameMatchSignOutEventGameData::~CMsgGameMatchSignOutEventGameData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutEventGameData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOutEventGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_name_.Destroy();
  _impl_.map_name_.Destroy();
  _impl_.event_game_data_.Destroy();
}

void CMsgGameMatchSignOutEventGameData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOutEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutEventGameData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.event_game_data_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.start_time_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.start_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutEventGameData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGameMatchSignOutEventGameData.game_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgGameMatchSignOutEventGameData.map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bytes event_game_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_event_game_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_start_time(&has_bits);
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOutEventGameData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutEventGameData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOutEventGameData.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional string map_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameMatchSignOutEventGameData.map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_map_name(), target);
  }

  // optional bytes event_game_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_event_game_data(), target);
  }

  // optional uint32 start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutEventGameData)
  return target;
}

size_t CMsgGameMatchSignOutEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutEventGameData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string map_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional bytes event_game_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_data());
    }

    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_start_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOutEventGameData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOutEventGameData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOutEventGameData::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOutEventGameData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOutEventGameData*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOutEventGameData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutEventGameData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_event_game_data(from._internal_event_game_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOutEventGameData::CopyFrom(const CMsgGameMatchSignOutEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutEventGameData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutEventGameData::InternalSwap(CMsgGameMatchSignOutEventGameData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.map_name_, lhs_arena,
      &other->_impl_.map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_game_data_, lhs_arena,
      &other->_impl_.event_game_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, _impl_.start_time_)
      + sizeof(CMsgGameMatchSignOutEventGameData::_impl_.start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutEventGameData, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutEventGameData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[40]);
}

// ===================================================================

class CMsgGameMatchSignOutPerfData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameMatchSignOutPerfData>()._impl_._has_bits_);
  static void set_has_server_average_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_max_frame_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutPerfData)
}
CMsgGameMatchSignOutPerfData::CMsgGameMatchSignOutPerfData(const CMsgGameMatchSignOutPerfData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOutPerfData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){from._impl_.average_frame_time_}
    , decltype(_impl_.max_frame_time_){from._impl_.max_frame_time_}
    , decltype(_impl_.average_compute_time_){from._impl_.average_compute_time_}
    , decltype(_impl_.max_compute_time_){from._impl_.max_compute_time_}
    , decltype(_impl_.average_client_tick_time_){from._impl_.average_client_tick_time_}
    , decltype(_impl_.max_client_tick_time_){from._impl_.max_client_tick_time_}
    , decltype(_impl_.average_client_simulate_time_){from._impl_.average_client_simulate_time_}
    , decltype(_impl_.max_client_simulate_time_){from._impl_.max_client_simulate_time_}
    , decltype(_impl_.average_output_time_){from._impl_.average_output_time_}
    , decltype(_impl_.max_output_time_){from._impl_.max_output_time_}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){from._impl_.average_wait_for_rendering_to_complete_time_}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){from._impl_.max_wait_for_rendering_to_complete_time_}
    , decltype(_impl_.average_swap_time_){from._impl_.average_swap_time_}
    , decltype(_impl_.max_swap_time_){from._impl_.max_swap_time_}
    , decltype(_impl_.average_frame_update_time_){from._impl_.average_frame_update_time_}
    , decltype(_impl_.max_frame_update_time_){from._impl_.max_frame_update_time_}
    , decltype(_impl_.average_idle_time_){from._impl_.average_idle_time_}
    , decltype(_impl_.max_idle_time_){from._impl_.max_idle_time_}
    , decltype(_impl_.average_input_processing_time_){from._impl_.average_input_processing_time_}
    , decltype(_impl_.max_input_processing_time_){from._impl_.max_input_processing_time_}
    , decltype(_impl_.server_average_frame_time_){}
    , decltype(_impl_.server_max_frame_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_average_frame_time_, &from._impl_.server_average_frame_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_max_frame_time_) -
    reinterpret_cast<char*>(&_impl_.server_average_frame_time_)) + sizeof(_impl_.server_max_frame_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutPerfData)
}

inline void CMsgGameMatchSignOutPerfData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_frame_time_){arena}
    , decltype(_impl_.max_frame_time_){arena}
    , decltype(_impl_.average_compute_time_){arena}
    , decltype(_impl_.max_compute_time_){arena}
    , decltype(_impl_.average_client_tick_time_){arena}
    , decltype(_impl_.max_client_tick_time_){arena}
    , decltype(_impl_.average_client_simulate_time_){arena}
    , decltype(_impl_.max_client_simulate_time_){arena}
    , decltype(_impl_.average_output_time_){arena}
    , decltype(_impl_.max_output_time_){arena}
    , decltype(_impl_.average_wait_for_rendering_to_complete_time_){arena}
    , decltype(_impl_.max_wait_for_rendering_to_complete_time_){arena}
    , decltype(_impl_.average_swap_time_){arena}
    , decltype(_impl_.max_swap_time_){arena}
    , decltype(_impl_.average_frame_update_time_){arena}
    , decltype(_impl_.max_frame_update_time_){arena}
    , decltype(_impl_.average_idle_time_){arena}
    , decltype(_impl_.max_idle_time_){arena}
    , decltype(_impl_.average_input_processing_time_){arena}
    , decltype(_impl_.max_input_processing_time_){arena}
    , decltype(_impl_.server_average_frame_time_){0}
    , decltype(_impl_.server_max_frame_time_){0}
  };
}

CMsgGameMatchSignOutPerfData::~CMsgGameMatchSignOutPerfData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutPerfData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOutPerfData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.average_frame_time_.~RepeatedField();
  _impl_.max_frame_time_.~RepeatedField();
  _impl_.average_compute_time_.~RepeatedField();
  _impl_.max_compute_time_.~RepeatedField();
  _impl_.average_client_tick_time_.~RepeatedField();
  _impl_.max_client_tick_time_.~RepeatedField();
  _impl_.average_client_simulate_time_.~RepeatedField();
  _impl_.max_client_simulate_time_.~RepeatedField();
  _impl_.average_output_time_.~RepeatedField();
  _impl_.max_output_time_.~RepeatedField();
  _impl_.average_wait_for_rendering_to_complete_time_.~RepeatedField();
  _impl_.max_wait_for_rendering_to_complete_time_.~RepeatedField();
  _impl_.average_swap_time_.~RepeatedField();
  _impl_.max_swap_time_.~RepeatedField();
  _impl_.average_frame_update_time_.~RepeatedField();
  _impl_.max_frame_update_time_.~RepeatedField();
  _impl_.average_idle_time_.~RepeatedField();
  _impl_.max_idle_time_.~RepeatedField();
  _impl_.average_input_processing_time_.~RepeatedField();
  _impl_.max_input_processing_time_.~RepeatedField();
}

void CMsgGameMatchSignOutPerfData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOutPerfData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutPerfData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.average_frame_time_.Clear();
  _impl_.max_frame_time_.Clear();
  _impl_.average_compute_time_.Clear();
  _impl_.max_compute_time_.Clear();
  _impl_.average_client_tick_time_.Clear();
  _impl_.max_client_tick_time_.Clear();
  _impl_.average_client_simulate_time_.Clear();
  _impl_.max_client_simulate_time_.Clear();
  _impl_.average_output_time_.Clear();
  _impl_.max_output_time_.Clear();
  _impl_.average_wait_for_rendering_to_complete_time_.Clear();
  _impl_.max_wait_for_rendering_to_complete_time_.Clear();
  _impl_.average_swap_time_.Clear();
  _impl_.max_swap_time_.Clear();
  _impl_.average_frame_update_time_.Clear();
  _impl_.max_frame_update_time_.Clear();
  _impl_.average_idle_time_.Clear();
  _impl_.max_idle_time_.Clear();
  _impl_.average_input_processing_time_.Clear();
  _impl_.max_input_processing_time_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.server_average_frame_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_max_frame_time_) -
        reinterpret_cast<char*>(&_impl_.server_average_frame_time_)) + sizeof(_impl_.server_max_frame_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutPerfData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float average_frame_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_frame_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_frame_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float server_average_frame_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_server_average_frame_time(&has_bits);
          _impl_.server_average_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float server_max_frame_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_server_max_frame_time(&has_bits);
          _impl_.server_max_frame_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_compute_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_compute_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_compute_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_compute_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_client_tick_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_client_tick_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_tick_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_tick_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_client_simulate_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_client_simulate_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_client_simulate_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_client_simulate_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_output_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<uint8_t>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_output_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_output_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_output_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<101>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_output_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_wait_for_rendering_to_complete_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<109>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_wait_for_rendering_to_complete_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max_wait_for_rendering_to_complete_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<117>(ptr));
        } else if (static_cast<uint8_t>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_wait_for_rendering_to_complete_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_swap_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_average_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_swap_time = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_swap_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<133>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_swap_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_frame_update_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<141>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_frame_update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_frame_update_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<149>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_frame_update_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_idle_time = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<157>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_idle_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_idle_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<165>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_idle_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float average_input_processing_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_average_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<173>(ptr));
        } else if (static_cast<uint8_t>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_average_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float max_input_processing_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_max_input_processing_time(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<181>(ptr));
        } else if (static_cast<uint8_t>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_max_input_processing_time(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOutPerfData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutPerfData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  for (int i = 0, n = this->_internal_average_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_average_frame_time(i), target);
  }

  // repeated float max_frame_time = 2;
  for (int i = 0, n = this->_internal_max_frame_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_frame_time(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float server_average_frame_time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_server_average_frame_time(), target);
  }

  // optional float server_max_frame_time = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_server_max_frame_time(), target);
  }

  // repeated float average_compute_time = 5;
  for (int i = 0, n = this->_internal_average_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_average_compute_time(i), target);
  }

  // repeated float max_compute_time = 6;
  for (int i = 0, n = this->_internal_max_compute_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_max_compute_time(i), target);
  }

  // repeated float average_client_tick_time = 7;
  for (int i = 0, n = this->_internal_average_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_average_client_tick_time(i), target);
  }

  // repeated float max_client_tick_time = 8;
  for (int i = 0, n = this->_internal_max_client_tick_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_max_client_tick_time(i), target);
  }

  // repeated float average_client_simulate_time = 9;
  for (int i = 0, n = this->_internal_average_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_average_client_simulate_time(i), target);
  }

  // repeated float max_client_simulate_time = 10;
  for (int i = 0, n = this->_internal_max_client_simulate_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_max_client_simulate_time(i), target);
  }

  // repeated float average_output_time = 11;
  for (int i = 0, n = this->_internal_average_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_average_output_time(i), target);
  }

  // repeated float max_output_time = 12;
  for (int i = 0, n = this->_internal_max_output_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_max_output_time(i), target);
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  for (int i = 0, n = this->_internal_average_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_average_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  for (int i = 0, n = this->_internal_max_wait_for_rendering_to_complete_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_max_wait_for_rendering_to_complete_time(i), target);
  }

  // repeated float average_swap_time = 15;
  for (int i = 0, n = this->_internal_average_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_average_swap_time(i), target);
  }

  // repeated float max_swap_time = 16;
  for (int i = 0, n = this->_internal_max_swap_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_max_swap_time(i), target);
  }

  // repeated float average_frame_update_time = 17;
  for (int i = 0, n = this->_internal_average_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_average_frame_update_time(i), target);
  }

  // repeated float max_frame_update_time = 18;
  for (int i = 0, n = this->_internal_max_frame_update_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_max_frame_update_time(i), target);
  }

  // repeated float average_idle_time = 19;
  for (int i = 0, n = this->_internal_average_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_average_idle_time(i), target);
  }

  // repeated float max_idle_time = 20;
  for (int i = 0, n = this->_internal_max_idle_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_max_idle_time(i), target);
  }

  // repeated float average_input_processing_time = 21;
  for (int i = 0, n = this->_internal_average_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_average_input_processing_time(i), target);
  }

  // repeated float max_input_processing_time = 22;
  for (int i = 0, n = this->_internal_max_input_processing_time_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_max_input_processing_time(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutPerfData)
  return target;
}

size_t CMsgGameMatchSignOutPerfData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutPerfData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float average_frame_time = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_frame_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_time = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_frame_time_size());
    total_size += data_size;
  }

  // repeated float average_compute_time = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_compute_time_size());
    total_size += data_size;
  }

  // repeated float max_compute_time = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_compute_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_compute_time_size());
    total_size += data_size;
  }

  // repeated float average_client_tick_time = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float max_client_tick_time = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_tick_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_client_tick_time_size());
    total_size += data_size;
  }

  // repeated float average_client_simulate_time = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float max_client_simulate_time = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_client_simulate_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_client_simulate_time_size());
    total_size += data_size;
  }

  // repeated float average_output_time = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_output_time_size());
    total_size += data_size;
  }

  // repeated float max_output_time = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_output_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_output_time_size());
    total_size += data_size;
  }

  // repeated float average_wait_for_rendering_to_complete_time = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float max_wait_for_rendering_to_complete_time = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_wait_for_rendering_to_complete_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_wait_for_rendering_to_complete_time_size());
    total_size += data_size;
  }

  // repeated float average_swap_time = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_average_swap_time_size());
    total_size += data_size;
  }

  // repeated float max_swap_time = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_swap_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_swap_time_size());
    total_size += data_size;
  }

  // repeated float average_frame_update_time = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float max_frame_update_time = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_frame_update_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_frame_update_time_size());
    total_size += data_size;
  }

  // repeated float average_idle_time = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_idle_time_size());
    total_size += data_size;
  }

  // repeated float max_idle_time = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_idle_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_idle_time_size());
    total_size += data_size;
  }

  // repeated float average_input_processing_time = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_average_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_average_input_processing_time_size());
    total_size += data_size;
  }

  // repeated float max_input_processing_time = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_max_input_processing_time_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_max_input_processing_time_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float server_average_frame_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float server_max_frame_time = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOutPerfData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOutPerfData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOutPerfData::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOutPerfData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOutPerfData*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOutPerfData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutPerfData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.average_frame_time_.MergeFrom(from._impl_.average_frame_time_);
  _this->_impl_.max_frame_time_.MergeFrom(from._impl_.max_frame_time_);
  _this->_impl_.average_compute_time_.MergeFrom(from._impl_.average_compute_time_);
  _this->_impl_.max_compute_time_.MergeFrom(from._impl_.max_compute_time_);
  _this->_impl_.average_client_tick_time_.MergeFrom(from._impl_.average_client_tick_time_);
  _this->_impl_.max_client_tick_time_.MergeFrom(from._impl_.max_client_tick_time_);
  _this->_impl_.average_client_simulate_time_.MergeFrom(from._impl_.average_client_simulate_time_);
  _this->_impl_.max_client_simulate_time_.MergeFrom(from._impl_.max_client_simulate_time_);
  _this->_impl_.average_output_time_.MergeFrom(from._impl_.average_output_time_);
  _this->_impl_.max_output_time_.MergeFrom(from._impl_.max_output_time_);
  _this->_impl_.average_wait_for_rendering_to_complete_time_.MergeFrom(from._impl_.average_wait_for_rendering_to_complete_time_);
  _this->_impl_.max_wait_for_rendering_to_complete_time_.MergeFrom(from._impl_.max_wait_for_rendering_to_complete_time_);
  _this->_impl_.average_swap_time_.MergeFrom(from._impl_.average_swap_time_);
  _this->_impl_.max_swap_time_.MergeFrom(from._impl_.max_swap_time_);
  _this->_impl_.average_frame_update_time_.MergeFrom(from._impl_.average_frame_update_time_);
  _this->_impl_.max_frame_update_time_.MergeFrom(from._impl_.max_frame_update_time_);
  _this->_impl_.average_idle_time_.MergeFrom(from._impl_.average_idle_time_);
  _this->_impl_.max_idle_time_.MergeFrom(from._impl_.max_idle_time_);
  _this->_impl_.average_input_processing_time_.MergeFrom(from._impl_.average_input_processing_time_);
  _this->_impl_.max_input_processing_time_.MergeFrom(from._impl_.max_input_processing_time_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_average_frame_time_ = from._impl_.server_average_frame_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_max_frame_time_ = from._impl_.server_max_frame_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOutPerfData::CopyFrom(const CMsgGameMatchSignOutPerfData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutPerfData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutPerfData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutPerfData::InternalSwap(CMsgGameMatchSignOutPerfData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.average_frame_time_.InternalSwap(&other->_impl_.average_frame_time_);
  _impl_.max_frame_time_.InternalSwap(&other->_impl_.max_frame_time_);
  _impl_.average_compute_time_.InternalSwap(&other->_impl_.average_compute_time_);
  _impl_.max_compute_time_.InternalSwap(&other->_impl_.max_compute_time_);
  _impl_.average_client_tick_time_.InternalSwap(&other->_impl_.average_client_tick_time_);
  _impl_.max_client_tick_time_.InternalSwap(&other->_impl_.max_client_tick_time_);
  _impl_.average_client_simulate_time_.InternalSwap(&other->_impl_.average_client_simulate_time_);
  _impl_.max_client_simulate_time_.InternalSwap(&other->_impl_.max_client_simulate_time_);
  _impl_.average_output_time_.InternalSwap(&other->_impl_.average_output_time_);
  _impl_.max_output_time_.InternalSwap(&other->_impl_.max_output_time_);
  _impl_.average_wait_for_rendering_to_complete_time_.InternalSwap(&other->_impl_.average_wait_for_rendering_to_complete_time_);
  _impl_.max_wait_for_rendering_to_complete_time_.InternalSwap(&other->_impl_.max_wait_for_rendering_to_complete_time_);
  _impl_.average_swap_time_.InternalSwap(&other->_impl_.average_swap_time_);
  _impl_.max_swap_time_.InternalSwap(&other->_impl_.max_swap_time_);
  _impl_.average_frame_update_time_.InternalSwap(&other->_impl_.average_frame_update_time_);
  _impl_.max_frame_update_time_.InternalSwap(&other->_impl_.max_frame_update_time_);
  _impl_.average_idle_time_.InternalSwap(&other->_impl_.average_idle_time_);
  _impl_.max_idle_time_.InternalSwap(&other->_impl_.max_idle_time_);
  _impl_.average_input_processing_time_.InternalSwap(&other->_impl_.average_input_processing_time_);
  _impl_.max_input_processing_time_.InternalSwap(&other->_impl_.max_input_processing_time_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPerfData, _impl_.server_max_frame_time_)
      + sizeof(CMsgGameMatchSignOutPerfData::_impl_.server_max_frame_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameMatchSignOutPerfData, _impl_.server_average_frame_time_)>(
          reinterpret_cast<char*>(&_impl_.server_average_frame_time_),
          reinterpret_cast<char*>(&other->_impl_.server_average_frame_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutPerfData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[41]);
}

// ===================================================================

class CMsgGameMatchSignOutBanData::_Internal {
 public:
};

CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameMatchSignOutBanData)
}
CMsgGameMatchSignOutBanData::CMsgGameMatchSignOutBanData(const CMsgGameMatchSignOutBanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameMatchSignOutBanData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_bans_){from._impl_.hero_bans_}
    , decltype(_impl_.hero_ban_votes_){from._impl_.hero_ban_votes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameMatchSignOutBanData)
}

inline void CMsgGameMatchSignOutBanData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_bans_){arena}
    , decltype(_impl_.hero_ban_votes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGameMatchSignOutBanData::~CMsgGameMatchSignOutBanData() {
  // @@protoc_insertion_point(destructor:CMsgGameMatchSignOutBanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameMatchSignOutBanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_bans_.~RepeatedField();
  _impl_.hero_ban_votes_.~RepeatedField();
}

void CMsgGameMatchSignOutBanData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameMatchSignOutBanData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameMatchSignOutBanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_bans_.Clear();
  _impl_.hero_ban_votes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameMatchSignOutBanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 hero_bans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_bans(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hero_ban_votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_ban_votes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_ban_votes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameMatchSignOutBanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameMatchSignOutBanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hero_bans = 1;
  for (int i = 0, n = this->_internal_hero_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_bans(i), target);
  }

  // repeated uint32 hero_ban_votes = 2;
  for (int i = 0, n = this->_internal_hero_ban_votes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_ban_votes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameMatchSignOutBanData)
  return target;
}

size_t CMsgGameMatchSignOutBanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameMatchSignOutBanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hero_bans = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hero_bans_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hero_bans_size());
    total_size += data_size;
  }

  // repeated uint32 hero_ban_votes = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hero_ban_votes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hero_ban_votes_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameMatchSignOutBanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameMatchSignOutBanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameMatchSignOutBanData::GetClassData() const { return &_class_data_; }


void CMsgGameMatchSignOutBanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameMatchSignOutBanData*>(&to_msg);
  auto& from = static_cast<const CMsgGameMatchSignOutBanData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameMatchSignOutBanData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_bans_.MergeFrom(from._impl_.hero_bans_);
  _this->_impl_.hero_ban_votes_.MergeFrom(from._impl_.hero_ban_votes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameMatchSignOutBanData::CopyFrom(const CMsgGameMatchSignOutBanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameMatchSignOutBanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameMatchSignOutBanData::IsInitialized() const {
  return true;
}

void CMsgGameMatchSignOutBanData::InternalSwap(CMsgGameMatchSignOutBanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hero_bans_.InternalSwap(&other->_impl_.hero_bans_);
  _impl_.hero_ban_votes_.InternalSwap(&other->_impl_.hero_ban_votes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameMatchSignOutBanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[42]);
}

// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}
CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_level_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ability_level_, &from._impl_.ability_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.ability_level_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
}

inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ability_level_){0u}
    , decltype(_impl_.ability_id_){-1}
  };
}

CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::~CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.ability_level_ = 0u;
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ability_level(&has_bits);
          _impl_.ability_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional uint32 ability_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_level());
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetClassData() const { return &_class_data_; }


void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ability_level_ = from._impl_.ability_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.ability_level_, other->_impl_.ability_level_);
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[43]);
}

// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_xp_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ultimate_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ultimate_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_item0(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_item1(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_item2(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_item3(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_item4(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_item5(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_respawn_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_position_x(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_position_y(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}
CMsgDOTALiveScoreboardUpdate_Team_Player::CMsgDOTALiveScoreboardUpdate_Team_Player(const CMsgDOTALiveScoreboardUpdate_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALiveScoreboardUpdate_Team_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.gold_per_min_){}
    , decltype(_impl_.xp_per_min_){}
    , decltype(_impl_.ultimate_state_){}
    , decltype(_impl_.ultimate_cooldown_){}
    , decltype(_impl_.respawn_timer_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.item0_){}
    , decltype(_impl_.item1_){}
    , decltype(_impl_.item2_){}
    , decltype(_impl_.item3_){}
    , decltype(_impl_.item4_){}
    , decltype(_impl_.item5_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hero_name()) {
    _this->_impl_.hero_name_.Set(from._internal_hero_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item5_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.item5_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
}

inline void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.hero_name_){}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.last_hits_){0u}
    , decltype(_impl_.denies_){0u}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.gold_per_min_){0}
    , decltype(_impl_.xp_per_min_){0}
    , decltype(_impl_.ultimate_state_){0}
    , decltype(_impl_.ultimate_cooldown_){0}
    , decltype(_impl_.respawn_timer_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.item0_){-1}
    , decltype(_impl_.item1_){-1}
    , decltype(_impl_.item2_){-1}
    , decltype(_impl_.item3_){-1}
    , decltype(_impl_.item4_){-1}
    , decltype(_impl_.item5_){-1}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hero_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hero_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgDOTALiveScoreboardUpdate_Team_Player::~CMsgDOTALiveScoreboardUpdate_Team_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALiveScoreboardUpdate_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.abilities_.~RepeatedPtrField();
  _impl_.player_name_.Destroy();
  _impl_.hero_name_.Destroy();
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.abilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hero_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_hits_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.last_hits_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.denies_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.respawn_timer_) -
        reinterpret_cast<char*>(&_impl_.denies_)) + sizeof(_impl_.respawn_timer_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.net_worth_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.net_worth_));
    _impl_.item0_ = -1;
    _impl_.item1_ = -1;
    _impl_.item2_ = -1;
    _impl_.item3_ = -1;
  }
  if (cached_has_bits & 0x03000000u) {
    _impl_.item4_ = -1;
    _impl_.item5_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string hero_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hero_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_hits = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_hits(&has_bits);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 denies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_denies(&has_bits);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float gold_per_min = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_gold_per_min(&has_bits);
          _impl_.gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float xp_per_min = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_xp_per_min(&has_bits);
          _impl_.xp_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState_IsValid(val))) {
            _internal_set_ultimate_state(static_cast<::CMsgDOTALiveScoreboardUpdate_Team_Player_DOTAUltimateState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float ultimate_cooldown = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_ultimate_cooldown(&has_bits);
          _impl_.ultimate_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item0 = 16 [default = -1];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_item0(&has_bits);
          _impl_.item0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item1 = 17 [default = -1];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_item1(&has_bits);
          _impl_.item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item2 = 18 [default = -1];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_item2(&has_bits);
          _impl_.item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item3 = 19 [default = -1];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_item3(&has_bits);
          _impl_.item3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item4 = 20 [default = -1];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_item4(&has_bits);
          _impl_.item4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item5 = 21 [default = -1];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_item5(&has_bits);
          _impl_.item5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 respawn_timer = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_respawn_timer(&has_bits);
          _impl_.respawn_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float position_x = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_position_x(&has_bits);
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float position_y = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_position_y(&has_bits);
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALiveScoreboardUpdate_Team_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALiveScoreboardUpdate.Team.Player.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  // optional string hero_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero_name().data(), static_cast<int>(this->_internal_hero_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTALiveScoreboardUpdate.Team.Player.hero_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hero_name(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_assists(), target);
  }

  // optional uint32 last_hits = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_denies(), target);
  }

  // optional uint32 gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_gold(), target);
  }

  // optional uint32 level = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_level(), target);
  }

  // optional float gold_per_min = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_gold_per_min(), target);
  }

  // optional float xp_per_min = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_xp_per_min(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      14, this->_internal_ultimate_state(), target);
  }

  // optional float ultimate_cooldown = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_ultimate_cooldown(), target);
  }

  // optional int32 item0 = 16 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_item0(), target);
  }

  // optional int32 item1 = 17 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_item1(), target);
  }

  // optional int32 item2 = 18 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_item2(), target);
  }

  // optional int32 item3 = 19 [default = -1];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_item3(), target);
  }

  // optional int32 item4 = 20 [default = -1];
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_item4(), target);
  }

  // optional int32 item5 = 21 [default = -1];
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_item5(), target);
  }

  // optional uint32 respawn_timer = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_respawn_timer(), target);
  }

  // optional uint32 account_id = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_account_id(), target);
  }

  // optional float position_x = 24;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_position_x(), target);
  }

  // optional float position_y = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_position_y(), target);
  }

  // optional uint32 net_worth = 26;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_net_worth(), target);
  }

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilities_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilities(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team.Player)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player.HeroAbility abilities = 27;
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->_impl_.abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string hero_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero_name());
    }

    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 deaths = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 assists = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_assists());
    }

    // optional uint32 last_hits = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_hits());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 denies = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_denies());
    }

    // optional uint32 gold = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional uint32 level = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional float gold_per_min = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float xp_per_min = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team.Player.DOTAUltimateState ultimate_state = 14 [default = k_EDOTAUltimateStateNotLearned];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_ultimate_state());
    }

    // optional float ultimate_cooldown = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 respawn_timer = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_respawn_timer());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 account_id = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional float position_x = 24;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float position_y = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 net_worth = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional int32 item0 = 16 [default = -1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item0());
    }

    // optional int32 item1 = 17 [default = -1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item1());
    }

    // optional int32 item2 = 18 [default = -1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item2());
    }

    // optional int32 item3 = 19 [default = -1];
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item3());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int32 item4 = 20 [default = -1];
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item4());
    }

    // optional int32 item5 = 21 [default = -1];
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_item5());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALiveScoreboardUpdate_Team_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALiveScoreboardUpdate_Team_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALiveScoreboardUpdate_Team_Player::GetClassData() const { return &_class_data_; }


void CMsgDOTALiveScoreboardUpdate_Team_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALiveScoreboardUpdate_Team_Player*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALiveScoreboardUpdate_Team_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hero_name(from._internal_hero_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.gold_per_min_ = from._impl_.gold_per_min_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.xp_per_min_ = from._impl_.xp_per_min_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ultimate_state_ = from._impl_.ultimate_state_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ultimate_cooldown_ = from._impl_.ultimate_cooldown_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.respawn_timer_ = from._impl_.respawn_timer_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.position_x_ = from._impl_.position_x_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.position_y_ = from._impl_.position_y_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.item0_ = from._impl_.item0_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.item1_ = from._impl_.item1_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.item2_ = from._impl_.item2_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.item3_ = from._impl_.item3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.item4_ = from._impl_.item4_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.item5_ = from._impl_.item5_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team_Player::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team_Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hero_name_, lhs_arena,
      &other->_impl_.hero_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.net_worth_)
      + sizeof(CMsgDOTALiveScoreboardUpdate_Team_Player::_impl_.net_worth_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team_Player, _impl_.player_slot_)>(
          reinterpret_cast<char*>(&_impl_.player_slot_),
          reinterpret_cast<char*>(&other->_impl_.player_slot_));
  swap(_impl_.item0_, other->_impl_.item0_);
  swap(_impl_.item1_, other->_impl_.item1_);
  swap(_impl_.item2_, other->_impl_.item2_);
  swap(_impl_.item3_, other->_impl_.item3_);
  swap(_impl_.item4_, other->_impl_.item4_);
  swap(_impl_.item5_, other->_impl_.item5_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[44]);
}

// ===================================================================

class CMsgDOTALiveScoreboardUpdate_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate_Team>()._impl_._has_bits_);
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tower_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_barracks_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate.Team)
}
CMsgDOTALiveScoreboardUpdate_Team::CMsgDOTALiveScoreboardUpdate_Team(const CMsgDOTALiveScoreboardUpdate_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALiveScoreboardUpdate_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.hero_picks_){from._impl_.hero_picks_}
    , decltype(_impl_.hero_bans_){from._impl_.hero_bans_}
    , decltype(_impl_.score_){}
    , decltype(_impl_.tower_state_){}
    , decltype(_impl_.barracks_state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.barracks_state_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.barracks_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate.Team)
}

inline void CMsgDOTALiveScoreboardUpdate_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.hero_picks_){arena}
    , decltype(_impl_.hero_bans_){arena}
    , decltype(_impl_.score_){0u}
    , decltype(_impl_.tower_state_){0u}
    , decltype(_impl_.barracks_state_){0u}
  };
}

CMsgDOTALiveScoreboardUpdate_Team::~CMsgDOTALiveScoreboardUpdate_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALiveScoreboardUpdate_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.hero_picks_.~RepeatedField();
  _impl_.hero_bans_.~RepeatedField();
}

void CMsgDOTALiveScoreboardUpdate_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.hero_picks_.Clear();
  _impl_.hero_bans_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.barracks_state_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.barracks_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tower_state(&has_bits);
          _impl_.tower_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 barracks_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_barracks_state(&has_bits);
          _impl_.barracks_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hero_picks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_picks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_picks(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 hero_bans = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_bans(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALiveScoreboardUpdate_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // optional uint32 tower_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_state(), target);
  }

  // optional uint32 barracks_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_barracks_state(), target);
  }

  // repeated uint32 hero_picks = 5;
  for (int i = 0, n = this->_internal_hero_picks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_picks(i), target);
  }

  // repeated uint32 hero_bans = 6;
  for (int i = 0, n = this->_internal_hero_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_hero_bans(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate.Team)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTALiveScoreboardUpdate.Team.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 hero_picks = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hero_picks_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hero_picks_size());
    total_size += data_size;
  }

  // repeated uint32 hero_bans = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hero_bans_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hero_bans_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
    }

    // optional uint32 tower_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_state());
    }

    // optional uint32 barracks_state = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_barracks_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALiveScoreboardUpdate_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALiveScoreboardUpdate_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALiveScoreboardUpdate_Team::GetClassData() const { return &_class_data_; }


void CMsgDOTALiveScoreboardUpdate_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALiveScoreboardUpdate_Team*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALiveScoreboardUpdate_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_impl_.hero_picks_.MergeFrom(from._impl_.hero_picks_);
  _this->_impl_.hero_bans_.MergeFrom(from._impl_.hero_bans_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tower_state_ = from._impl_.tower_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.barracks_state_ = from._impl_.barracks_state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALiveScoreboardUpdate_Team::CopyFrom(const CMsgDOTALiveScoreboardUpdate_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate_Team::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate_Team::InternalSwap(CMsgDOTALiveScoreboardUpdate_Team* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.hero_picks_.InternalSwap(&other->_impl_.hero_picks_);
  _impl_.hero_bans_.InternalSwap(&other->_impl_.hero_bans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _impl_.barracks_state_)
      + sizeof(CMsgDOTALiveScoreboardUpdate_Team::_impl_.barracks_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate_Team, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[45]);
}

// ===================================================================

class CMsgDOTALiveScoreboardUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALiveScoreboardUpdate>()._impl_._has_bits_);
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tournament_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hltv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTALiveScoreboardUpdate_Team& team_good(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_good(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTALiveScoreboardUpdate_Team& team_bad(const CMsgDOTALiveScoreboardUpdate* msg);
  static void set_has_team_bad(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roshan_respawn_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::_Internal::team_good(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->_impl_.team_good_;
}
const ::CMsgDOTALiveScoreboardUpdate_Team&
CMsgDOTALiveScoreboardUpdate::_Internal::team_bad(const CMsgDOTALiveScoreboardUpdate* msg) {
  return *msg->_impl_.team_bad_;
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALiveScoreboardUpdate)
}
CMsgDOTALiveScoreboardUpdate::CMsgDOTALiveScoreboardUpdate(const CMsgDOTALiveScoreboardUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTALiveScoreboardUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_good_){nullptr}
    , decltype(_impl_.team_bad_){nullptr}
    , decltype(_impl_.tournament_id_){}
    , decltype(_impl_.tournament_game_id_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.hltv_delay_){}
    , decltype(_impl_.roshan_respawn_timer_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_good()) {
    _this->_impl_.team_good_ = new ::CMsgDOTALiveScoreboardUpdate_Team(*from._impl_.team_good_);
  }
  if (from._internal_has_team_bad()) {
    _this->_impl_.team_bad_ = new ::CMsgDOTALiveScoreboardUpdate_Team(*from._impl_.team_bad_);
  }
  ::memcpy(&_impl_.tournament_id_, &from._impl_.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_id_) -
    reinterpret_cast<char*>(&_impl_.tournament_id_)) + sizeof(_impl_.match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALiveScoreboardUpdate)
}

inline void CMsgDOTALiveScoreboardUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_good_){nullptr}
    , decltype(_impl_.team_bad_){nullptr}
    , decltype(_impl_.tournament_id_){0u}
    , decltype(_impl_.tournament_game_id_){0u}
    , decltype(_impl_.duration_){0}
    , decltype(_impl_.hltv_delay_){0}
    , decltype(_impl_.roshan_respawn_timer_){0u}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgDOTALiveScoreboardUpdate::~CMsgDOTALiveScoreboardUpdate() {
  // @@protoc_insertion_point(destructor:CMsgDOTALiveScoreboardUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTALiveScoreboardUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.team_good_;
  if (this != internal_default_instance()) delete _impl_.team_bad_;
}

void CMsgDOTALiveScoreboardUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTALiveScoreboardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALiveScoreboardUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.team_good_ != nullptr);
      _impl_.team_good_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.team_bad_ != nullptr);
      _impl_.team_bad_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_id_) -
        reinterpret_cast<char*>(&_impl_.tournament_id_)) + sizeof(_impl_.league_id_));
  }
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALiveScoreboardUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tournament_id(&has_bits);
          _impl_.tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tournament_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tournament_game_id(&has_bits);
          _impl_.tournament_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 hltv_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hltv_delay(&has_bits);
          _impl_.hltv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_good(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_bad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 roshan_respawn_timer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_roshan_respawn_timer(&has_bits);
          _impl_.roshan_respawn_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTALiveScoreboardUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALiveScoreboardUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tournament_game_id(), target);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  // optional int32 hltv_delay = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hltv_delay(), target);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::team_good(this),
        _Internal::team_good(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::team_bad(this),
        _Internal::team_bad(this).GetCachedSize(), target, stream);
  }

  // optional uint32 roshan_respawn_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_roshan_respawn_timer(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_league_id(), target);
  }

  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALiveScoreboardUpdate)
  return target;
}

size_t CMsgDOTALiveScoreboardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALiveScoreboardUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTALiveScoreboardUpdate.Team team_good = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_good_);
    }

    // optional .CMsgDOTALiveScoreboardUpdate.Team team_bad = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.team_bad_);
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_id());
    }

    // optional uint32 tournament_game_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tournament_game_id());
    }

    // optional float duration = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 hltv_delay = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hltv_delay());
    }

    // optional uint32 roshan_respawn_timer = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_roshan_respawn_timer());
    }

    // optional uint32 league_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

  }
  // optional uint64 match_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTALiveScoreboardUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTALiveScoreboardUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTALiveScoreboardUpdate::GetClassData() const { return &_class_data_; }


void CMsgDOTALiveScoreboardUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTALiveScoreboardUpdate*>(&to_msg);
  auto& from = static_cast<const CMsgDOTALiveScoreboardUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALiveScoreboardUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_team_good()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(
          from._internal_team_good());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_team_bad()->::CMsgDOTALiveScoreboardUpdate_Team::MergeFrom(
          from._internal_team_bad());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tournament_id_ = from._impl_.tournament_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tournament_game_id_ = from._impl_.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.hltv_delay_ = from._impl_.hltv_delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.roshan_respawn_timer_ = from._impl_.roshan_respawn_timer_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTALiveScoreboardUpdate::CopyFrom(const CMsgDOTALiveScoreboardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALiveScoreboardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALiveScoreboardUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTALiveScoreboardUpdate::InternalSwap(CMsgDOTALiveScoreboardUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _impl_.match_id_)
      + sizeof(CMsgDOTALiveScoreboardUpdate::_impl_.match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTALiveScoreboardUpdate, _impl_.team_good_)>(
          reinterpret_cast<char*>(&_impl_.team_good_),
          reinterpret_cast<char*>(&other->_impl_.team_good_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALiveScoreboardUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[46]);
}

// ===================================================================

class CMsgServerToGCRequestBatchPlayerResources::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestBatchPlayerResources>()._impl_._has_bits_);
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResources)
}
CMsgServerToGCRequestBatchPlayerResources::CMsgServerToGCRequestBatchPlayerResources(const CMsgServerToGCRequestBatchPlayerResources& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRequestBatchPlayerResources* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , /*decltype(_impl_._account_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_types_){from._impl_.rank_types_}
    , /*decltype(_impl_._rank_types_cached_byte_size_)*/{0}
    , decltype(_impl_.lobby_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResources)
}

inline void CMsgServerToGCRequestBatchPlayerResources::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_ids_){arena}
    , /*decltype(_impl_._account_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.rank_types_){arena}
    , /*decltype(_impl_._rank_types_cached_byte_size_)*/{0}
    , decltype(_impl_.lobby_type_){0}
  };
}

CMsgServerToGCRequestBatchPlayerResources::~CMsgServerToGCRequestBatchPlayerResources() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResources)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRequestBatchPlayerResources::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
  _impl_.rank_types_.~RepeatedField();
}

void CMsgServerToGCRequestBatchPlayerResources::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResources::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResources)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _impl_.rank_types_.Clear();
  _impl_.lobby_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResources::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 rank_types = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rank_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_rank_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRequestBatchPlayerResources::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResources)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    int byte_size = _impl_._account_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_account_ids(), byte_size, target);
    }
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    int byte_size = _impl_._rank_types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_rank_types(), byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 lobby_type = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResources)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResources::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResources)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._account_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 rank_types = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.rank_types_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._rank_types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional int32 lobby_type = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lobby_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRequestBatchPlayerResources::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRequestBatchPlayerResources::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRequestBatchPlayerResources::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRequestBatchPlayerResources::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRequestBatchPlayerResources*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRequestBatchPlayerResources&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResources)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_impl_.rank_types_.MergeFrom(from._impl_.rank_types_);
  if (from._internal_has_lobby_type()) {
    _this->_internal_set_lobby_type(from._internal_lobby_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRequestBatchPlayerResources::CopyFrom(const CMsgServerToGCRequestBatchPlayerResources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResources::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResources::InternalSwap(CMsgServerToGCRequestBatchPlayerResources* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
  _impl_.rank_types_.InternalSwap(&other->_impl_.rank_types_);
  swap(_impl_.lobby_type_, other->_impl_.lobby_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResources::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[47]);
}

// ===================================================================

class CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestBatchPlayerResourcesResponse_Result>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rank_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_new_player(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_guide_player(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_comm_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_behavior_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
}
CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.rank_calibrated_){}
    , decltype(_impl_.low_priority_){}
    , decltype(_impl_.is_new_player_){}
    , decltype(_impl_.is_guide_player_){}
    , decltype(_impl_.comm_level_){}
    , decltype(_impl_.behavior_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.behavior_level_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.behavior_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
}

inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.rank_calibrated_){false}
    , decltype(_impl_.low_priority_){false}
    , decltype(_impl_.is_new_player_){false}
    , decltype(_impl_.is_guide_player_){false}
    , decltype(_impl_.comm_level_){0}
    , decltype(_impl_.behavior_level_){0}
  };
}

CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::~CMsgServerToGCRequestBatchPlayerResourcesResponse_Result() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.behavior_level_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.behavior_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool rank_calibrated = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rank_calibrated(&has_bits);
          _impl_.rank_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_low_priority(&has_bits);
          _impl_.low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_new_player = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_new_player(&has_bits);
          _impl_.is_new_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_guide_player = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_guide_player(&has_bits);
          _impl_.is_guide_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 comm_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_comm_level(&has_bits);
          _impl_.comm_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 behavior_level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_behavior_level(&has_bits);
          _impl_.behavior_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 rank = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rank(), target);
  }

  // optional bool rank_calibrated = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_rank_calibrated(), target);
  }

  // optional bool low_priority = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_low_priority(), target);
  }

  // optional bool is_new_player = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_new_player(), target);
  }

  // optional bool is_guide_player = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_guide_player(), target);
  }

  // optional int32 comm_level = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_comm_level(), target);
  }

  // optional int32 behavior_level = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_behavior_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 rank = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank());
    }

    // optional bool rank_calibrated = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool low_priority = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_new_player = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_guide_player = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int32 comm_level = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_comm_level());
    }

    // optional int32 behavior_level = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_behavior_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRequestBatchPlayerResourcesResponse_Result*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.rank_calibrated_ = from._impl_.rank_calibrated_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.low_priority_ = from._impl_.low_priority_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_new_player_ = from._impl_.is_new_player_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_guide_player_ = from._impl_.is_guide_player_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.comm_level_ = from._impl_.comm_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.behavior_level_ = from._impl_.behavior_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.behavior_level_)
      + sizeof(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::_impl_.behavior_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestBatchPlayerResourcesResponse_Result, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResourcesResponse_Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[48]);
}

// ===================================================================

class CMsgServerToGCRequestBatchPlayerResourcesResponse::_Internal {
 public:
};

CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
}
CMsgServerToGCRequestBatchPlayerResourcesResponse::CMsgServerToGCRequestBatchPlayerResourcesResponse(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRequestBatchPlayerResourcesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
}

inline void CMsgServerToGCRequestBatchPlayerResourcesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCRequestBatchPlayerResourcesResponse::~CMsgServerToGCRequestBatchPlayerResourcesResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRequestBatchPlayerResourcesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestBatchPlayerResourcesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRequestBatchPlayerResourcesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  return target;
}

size_t CMsgServerToGCRequestBatchPlayerResourcesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCRequestBatchPlayerResourcesResponse.Result results = 6;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRequestBatchPlayerResourcesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRequestBatchPlayerResourcesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRequestBatchPlayerResourcesResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRequestBatchPlayerResourcesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRequestBatchPlayerResourcesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRequestBatchPlayerResourcesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::CopyFrom(const CMsgServerToGCRequestBatchPlayerResourcesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestBatchPlayerResourcesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestBatchPlayerResourcesResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestBatchPlayerResourcesResponse::InternalSwap(CMsgServerToGCRequestBatchPlayerResourcesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestBatchPlayerResourcesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[49]);
}

// ===================================================================

class CMsgDOTAPlayerFailedToConnect::_Internal {
 public:
};

CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPlayerFailedToConnect)
}
CMsgDOTAPlayerFailedToConnect::CMsgDOTAPlayerFailedToConnect(const CMsgDOTAPlayerFailedToConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPlayerFailedToConnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_loaders_){from._impl_.failed_loaders_}
    , decltype(_impl_.abandoned_loaders_){from._impl_.abandoned_loaders_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPlayerFailedToConnect)
}

inline void CMsgDOTAPlayerFailedToConnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.failed_loaders_){arena}
    , decltype(_impl_.abandoned_loaders_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTAPlayerFailedToConnect::~CMsgDOTAPlayerFailedToConnect() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPlayerFailedToConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPlayerFailedToConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.failed_loaders_.~RepeatedField();
  _impl_.abandoned_loaders_.~RepeatedField();
}

void CMsgDOTAPlayerFailedToConnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPlayerFailedToConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPlayerFailedToConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.failed_loaders_.Clear();
  _impl_.abandoned_loaders_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPlayerFailedToConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 failed_loaders = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failed_loaders(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_failed_loaders(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 abandoned_loaders = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_abandoned_loaders(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_abandoned_loaders(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPlayerFailedToConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPlayerFailedToConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  for (int i = 0, n = this->_internal_failed_loaders_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_failed_loaders(i), target);
  }

  // repeated fixed64 abandoned_loaders = 2;
  for (int i = 0, n = this->_internal_abandoned_loaders_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_abandoned_loaders(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPlayerFailedToConnect)
  return target;
}

size_t CMsgDOTAPlayerFailedToConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPlayerFailedToConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 failed_loaders = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_failed_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_failed_loaders_size());
    total_size += data_size;
  }

  // repeated fixed64 abandoned_loaders = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_abandoned_loaders_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_abandoned_loaders_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPlayerFailedToConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPlayerFailedToConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPlayerFailedToConnect::GetClassData() const { return &_class_data_; }


void CMsgDOTAPlayerFailedToConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPlayerFailedToConnect*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPlayerFailedToConnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPlayerFailedToConnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.failed_loaders_.MergeFrom(from._impl_.failed_loaders_);
  _this->_impl_.abandoned_loaders_.MergeFrom(from._impl_.abandoned_loaders_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPlayerFailedToConnect::CopyFrom(const CMsgDOTAPlayerFailedToConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPlayerFailedToConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPlayerFailedToConnect::IsInitialized() const {
  return true;
}

void CMsgDOTAPlayerFailedToConnect::InternalSwap(CMsgDOTAPlayerFailedToConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.failed_loaders_.InternalSwap(&other->_impl_.failed_loaders_);
  _impl_.abandoned_loaders_.InternalSwap(&other->_impl_.abandoned_loaders_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPlayerFailedToConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[50]);
}

// ===================================================================

class CMsgGCToRelayConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToRelayConnect>()._impl_._has_bits_);
  static void set_has_source_tv_public_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_tv_private_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_parent_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tv_unique_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_source_tv_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCToRelayConnect::CMsgGCToRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToRelayConnect)
}
CMsgGCToRelayConnect::CMsgGCToRelayConnect(const CMsgGCToRelayConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToRelayConnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_tv_public_addr_){}
    , decltype(_impl_.source_tv_private_addr_){}
    , decltype(_impl_.game_server_steam_id_){}
    , decltype(_impl_.source_tv_port_){}
    , decltype(_impl_.parent_count_){}
    , decltype(_impl_.tv_unique_secret_code_){}
    , decltype(_impl_.source_tv_steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.source_tv_public_addr_, &from._impl_.source_tv_public_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.source_tv_steamid_) -
    reinterpret_cast<char*>(&_impl_.source_tv_public_addr_)) + sizeof(_impl_.source_tv_steamid_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToRelayConnect)
}

inline void CMsgGCToRelayConnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_tv_public_addr_){0u}
    , decltype(_impl_.source_tv_private_addr_){0u}
    , decltype(_impl_.game_server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.source_tv_port_){0u}
    , decltype(_impl_.parent_count_){0u}
    , decltype(_impl_.tv_unique_secret_code_){uint64_t{0u}}
    , decltype(_impl_.source_tv_steamid_){uint64_t{0u}}
  };
}

CMsgGCToRelayConnect::~CMsgGCToRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCToRelayConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToRelayConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToRelayConnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToRelayConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.source_tv_public_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.source_tv_steamid_) -
        reinterpret_cast<char*>(&_impl_.source_tv_public_addr_)) + sizeof(_impl_.source_tv_steamid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToRelayConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_tv_public_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source_tv_public_addr(&has_bits);
          _impl_.source_tv_public_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_tv_private_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_source_tv_private_addr(&has_bits);
          _impl_.source_tv_private_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_tv_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_tv_port(&has_bits);
          _impl_.source_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 game_server_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_server_steam_id(&has_bits);
          _impl_.game_server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 parent_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_parent_count(&has_bits);
          _impl_.parent_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 tv_unique_secret_code = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_tv_unique_secret_code(&has_bits);
          _impl_.tv_unique_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 source_tv_steamid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_source_tv_steamid(&has_bits);
          _impl_.source_tv_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToRelayConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToRelayConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_tv_public_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_tv_port(), target);
  }

  // optional uint64 game_server_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_game_server_steam_id(), target);
  }

  // optional uint32 parent_count = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_parent_count(), target);
  }

  // optional fixed64 tv_unique_secret_code = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_tv_unique_secret_code(), target);
  }

  // optional fixed64 source_tv_steamid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_source_tv_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToRelayConnect)
  return target;
}

size_t CMsgGCToRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToRelayConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 source_tv_public_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_private_addr());
    }

    // optional uint64 game_server_steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_game_server_steam_id());
    }

    // optional uint32 source_tv_port = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_source_tv_port());
    }

    // optional uint32 parent_count = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_parent_count());
    }

    // optional fixed64 tv_unique_secret_code = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 source_tv_steamid = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToRelayConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToRelayConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToRelayConnect::GetClassData() const { return &_class_data_; }


void CMsgGCToRelayConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToRelayConnect*>(&to_msg);
  auto& from = static_cast<const CMsgGCToRelayConnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToRelayConnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_tv_public_addr_ = from._impl_.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.source_tv_private_addr_ = from._impl_.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_server_steam_id_ = from._impl_.game_server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.source_tv_port_ = from._impl_.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.parent_count_ = from._impl_.parent_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tv_unique_secret_code_ = from._impl_.tv_unique_secret_code_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.source_tv_steamid_ = from._impl_.source_tv_steamid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToRelayConnect::CopyFrom(const CMsgGCToRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCToRelayConnect::InternalSwap(CMsgGCToRelayConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToRelayConnect, _impl_.source_tv_steamid_)
      + sizeof(CMsgGCToRelayConnect::_impl_.source_tv_steamid_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToRelayConnect, _impl_.source_tv_public_addr_)>(
          reinterpret_cast<char*>(&_impl_.source_tv_public_addr_),
          reinterpret_cast<char*>(&other->_impl_.source_tv_public_addr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToRelayConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[51]);
}

// ===================================================================

class CMsgGCGCToLANServerRelayConnect::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGCToLANServerRelayConnect>()._impl_._has_bits_);
  static void set_has_relay_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGCToLANServerRelayConnect)
}
CMsgGCGCToLANServerRelayConnect::CMsgGCGCToLANServerRelayConnect(const CMsgGCGCToLANServerRelayConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCGCToLANServerRelayConnect* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relay_steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.relay_steamid_ = from._impl_.relay_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGCToLANServerRelayConnect)
}

inline void CMsgGCGCToLANServerRelayConnect::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relay_steamid_){uint64_t{0u}}
  };
}

CMsgGCGCToLANServerRelayConnect::~CMsgGCGCToLANServerRelayConnect() {
  // @@protoc_insertion_point(destructor:CMsgGCGCToLANServerRelayConnect)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCGCToLANServerRelayConnect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGCToLANServerRelayConnect::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCGCToLANServerRelayConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGCToLANServerRelayConnect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relay_steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGCToLANServerRelayConnect::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 relay_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_relay_steamid(&has_bits);
          _impl_.relay_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGCToLANServerRelayConnect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGCToLANServerRelayConnect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 relay_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_relay_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGCToLANServerRelayConnect)
  return target;
}

size_t CMsgGCGCToLANServerRelayConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGCToLANServerRelayConnect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 relay_steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGCToLANServerRelayConnect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCGCToLANServerRelayConnect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGCToLANServerRelayConnect::GetClassData() const { return &_class_data_; }


void CMsgGCGCToLANServerRelayConnect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCGCToLANServerRelayConnect*>(&to_msg);
  auto& from = static_cast<const CMsgGCGCToLANServerRelayConnect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGCToLANServerRelayConnect)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_relay_steamid()) {
    _this->_internal_set_relay_steamid(from._internal_relay_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGCToLANServerRelayConnect::CopyFrom(const CMsgGCGCToLANServerRelayConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGCToLANServerRelayConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGCToLANServerRelayConnect::IsInitialized() const {
  return true;
}

void CMsgGCGCToLANServerRelayConnect::InternalSwap(CMsgGCGCToLANServerRelayConnect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.relay_steamid_, other->_impl_.relay_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGCToLANServerRelayConnect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[52]);
}

// ===================================================================

class CMsgGCBanStatusRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBanStatusRequest>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCBanStatusRequest)
}
CMsgGCBanStatusRequest::CMsgGCBanStatusRequest(const CMsgGCBanStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCBanStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusRequest)
}

inline void CMsgGCBanStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgGCBanStatusRequest::~CMsgGCBanStatusRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCBanStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCBanStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCBanStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBanStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBanStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCBanStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusRequest)
  return target;
}

size_t CMsgGCBanStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBanStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCBanStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCBanStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCBanStatusRequest::GetClassData() const { return &_class_data_; }


void CMsgGCBanStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCBanStatusRequest*>(&to_msg);
  auto& from = static_cast<const CMsgGCBanStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBanStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCBanStatusRequest::CopyFrom(const CMsgGCBanStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBanStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusRequest::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusRequest::InternalSwap(CMsgGCBanStatusRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBanStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[53]);
}

// ===================================================================

class CMsgGCBanStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCBanStatusResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_priority(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text_chat_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_voice_chat_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCBanStatusResponse)
}
CMsgGCBanStatusResponse::CMsgGCBanStatusResponse(const CMsgGCBanStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCBanStatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}
    , decltype(_impl_.low_priority_){}
    , decltype(_impl_.text_chat_banned_){}
    , decltype(_impl_.voice_chat_banned_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.voice_chat_banned_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.voice_chat_banned_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCBanStatusResponse)
}

inline void CMsgGCBanStatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0u}
    , decltype(_impl_.low_priority_){false}
    , decltype(_impl_.text_chat_banned_){false}
    , decltype(_impl_.voice_chat_banned_){false}
  };
}

CMsgGCBanStatusResponse::~CMsgGCBanStatusResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCBanStatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCBanStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCBanStatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCBanStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCBanStatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.voice_chat_banned_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.voice_chat_banned_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCBanStatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool low_priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_low_priority(&has_bits);
          _impl_.low_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool text_chat_banned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_text_chat_banned(&has_bits);
          _impl_.text_chat_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool voice_chat_banned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_voice_chat_banned(&has_bits);
          _impl_.voice_chat_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCBanStatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCBanStatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_result(), target);
  }

  // optional bool low_priority = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_low_priority(), target);
  }

  // optional bool text_chat_banned = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_text_chat_banned(), target);
  }

  // optional bool voice_chat_banned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_voice_chat_banned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCBanStatusResponse)
  return target;
}

size_t CMsgGCBanStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCBanStatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
    }

    // optional bool low_priority = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool text_chat_banned = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool voice_chat_banned = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCBanStatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCBanStatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCBanStatusResponse::GetClassData() const { return &_class_data_; }


void CMsgGCBanStatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCBanStatusResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCBanStatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCBanStatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.low_priority_ = from._impl_.low_priority_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.text_chat_banned_ = from._impl_.text_chat_banned_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.voice_chat_banned_ = from._impl_.voice_chat_banned_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCBanStatusResponse::CopyFrom(const CMsgGCBanStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCBanStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCBanStatusResponse::IsInitialized() const {
  return true;
}

void CMsgGCBanStatusResponse::InternalSwap(CMsgGCBanStatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCBanStatusResponse, _impl_.voice_chat_banned_)
      + sizeof(CMsgGCBanStatusResponse::_impl_.voice_chat_banned_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCBanStatusResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCBanStatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[54]);
}

// ===================================================================

class CMsgTournamentItemEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTournamentItemEvent>()._impl_._has_bits_);
  static void set_has_killer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_victim_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dota_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_replay_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_loot_list(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_multi_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_winner_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_loser_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

void CMsgTournamentItemEvent::clear_hero_statues() {
  _impl_.hero_statues_.Clear();
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgTournamentItemEvent)
}
CMsgTournamentItemEvent::CMsgTournamentItemEvent(const CMsgTournamentItemEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgTournamentItemEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_statues_){from._impl_.hero_statues_}
    , decltype(_impl_.loot_list_){}
    , decltype(_impl_.killer_account_id_){}
    , decltype(_impl_.victim_account_id_){}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.tv_delay_){}
    , decltype(_impl_.dota_time_){}
    , decltype(_impl_.replay_time_){}
    , decltype(_impl_.event_team_){}
    , decltype(_impl_.multi_kill_count_){}
    , decltype(_impl_.winner_score_){}
    , decltype(_impl_.loser_score_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.loot_list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loot_list_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_loot_list()) {
    _this->_impl_.loot_list_.Set(from._internal_loot_list(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.killer_account_id_, &from._impl_.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.loser_score_) -
    reinterpret_cast<char*>(&_impl_.killer_account_id_)) + sizeof(_impl_.loser_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEvent)
}

inline void CMsgTournamentItemEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_statues_){arena}
    , decltype(_impl_.loot_list_){}
    , decltype(_impl_.killer_account_id_){0u}
    , decltype(_impl_.victim_account_id_){0u}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.tv_delay_){0}
    , decltype(_impl_.dota_time_){0}
    , decltype(_impl_.replay_time_){0}
    , decltype(_impl_.event_team_){0u}
    , decltype(_impl_.multi_kill_count_){0u}
    , decltype(_impl_.winner_score_){0u}
    , decltype(_impl_.loser_score_){0u}
  };
  _impl_.loot_list_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.loot_list_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgTournamentItemEvent::~CMsgTournamentItemEvent() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgTournamentItemEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_statues_.~RepeatedPtrField();
  _impl_.loot_list_.Destroy();
}

void CMsgTournamentItemEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgTournamentItemEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTournamentItemEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_statues_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.loot_list_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_team_) -
        reinterpret_cast<char*>(&_impl_.killer_account_id_)) + sizeof(_impl_.event_team_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.multi_kill_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.loser_score_) -
        reinterpret_cast<char*>(&_impl_.multi_kill_count_)) + sizeof(_impl_.loser_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTournamentItemEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 killer_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_killer_account_id(&has_bits);
          _impl_.killer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 victim_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_victim_account_id(&has_bits);
          _impl_.victim_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_TournamentEvents_IsValid(val))) {
            _internal_set_event_type(static_cast<::DOTA_TournamentEvents>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 tv_delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tv_delay(&has_bits);
          _impl_.tv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 dota_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_dota_time(&has_bits);
          _impl_.dota_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float replay_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_replay_time(&has_bits);
          _impl_.replay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string loot_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_loot_list();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgTournamentItemEvent.loot_list");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_event_team(&has_bits);
          _impl_.event_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 multi_kill_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_multi_kill_count(&has_bits);
          _impl_.multi_kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 winner_score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_winner_score(&has_bits);
          _impl_.winner_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 loser_score = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_loser_score(&has_bits);
          _impl_.loser_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CProtoItemHeroStatue hero_statues = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_statues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTournamentItemEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 killer_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_killer_account_id(), target);
  }

  // optional fixed32 victim_account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_victim_account_id(), target);
  }

  // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_type(), target);
  }

  // optional int32 tv_delay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tv_delay(), target);
  }

  // optional int32 dota_time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dota_time(), target);
  }

  // optional float replay_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_replay_time(), target);
  }

  // optional string loot_list = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_loot_list().data(), static_cast<int>(this->_internal_loot_list().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgTournamentItemEvent.loot_list");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_loot_list(), target);
  }

  // optional uint32 event_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_event_team(), target);
  }

  // optional uint32 multi_kill_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_multi_kill_count(), target);
  }

  // optional uint32 winner_score = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_winner_score(), target);
  }

  // optional uint32 loser_score = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_loser_score(), target);
  }

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hero_statues_size()); i < n; i++) {
    const auto& repfield = this->_internal_hero_statues(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEvent)
  return target;
}

size_t CMsgTournamentItemEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTournamentItemEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CProtoItemHeroStatue hero_statues = 12;
  total_size += 1UL * this->_internal_hero_statues_size();
  for (const auto& msg : this->_impl_.hero_statues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string loot_list = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_loot_list());
    }

    // optional fixed32 killer_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional fixed32 victim_account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .DOTA_TournamentEvents event_type = 3 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional int32 tv_delay = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tv_delay());
    }

    // optional int32 dota_time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dota_time());
    }

    // optional float replay_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 event_team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_team());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 multi_kill_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_multi_kill_count());
    }

    // optional uint32 winner_score = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winner_score());
    }

    // optional uint32 loser_score = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_loser_score());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTournamentItemEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgTournamentItemEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTournamentItemEvent::GetClassData() const { return &_class_data_; }


void CMsgTournamentItemEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgTournamentItemEvent*>(&to_msg);
  auto& from = static_cast<const CMsgTournamentItemEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTournamentItemEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_statues_.MergeFrom(from._impl_.hero_statues_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_loot_list(from._internal_loot_list());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.killer_account_id_ = from._impl_.killer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.victim_account_id_ = from._impl_.victim_account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tv_delay_ = from._impl_.tv_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.dota_time_ = from._impl_.dota_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.replay_time_ = from._impl_.replay_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.event_team_ = from._impl_.event_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.multi_kill_count_ = from._impl_.multi_kill_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.winner_score_ = from._impl_.winner_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.loser_score_ = from._impl_.loser_score_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTournamentItemEvent::CopyFrom(const CMsgTournamentItemEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTournamentItemEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEvent::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEvent::InternalSwap(CMsgTournamentItemEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hero_statues_.InternalSwap(&other->_impl_.hero_statues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.loot_list_, lhs_arena,
      &other->_impl_.loot_list_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEvent, _impl_.loser_score_)
      + sizeof(CMsgTournamentItemEvent::_impl_.loser_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEvent, _impl_.killer_account_id_)>(
          reinterpret_cast<char*>(&_impl_.killer_account_id_),
          reinterpret_cast<char*>(&other->_impl_.killer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTournamentItemEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[55]);
}

// ===================================================================

class CMsgTournamentItemEventResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTournamentItemEventResponse>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_viewers_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgTournamentItemEventResponse)
}
CMsgTournamentItemEventResponse::CMsgTournamentItemEventResponse(const CMsgTournamentItemEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgTournamentItemEventResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.viewers_granted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_type_, &from._impl_.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.viewers_granted_) -
    reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.viewers_granted_));
  // @@protoc_insertion_point(copy_constructor:CMsgTournamentItemEventResponse)
}

inline void CMsgTournamentItemEventResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){0}
    , decltype(_impl_.viewers_granted_){0u}
  };
}

CMsgTournamentItemEventResponse::~CMsgTournamentItemEventResponse() {
  // @@protoc_insertion_point(destructor:CMsgTournamentItemEventResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgTournamentItemEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTournamentItemEventResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgTournamentItemEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTournamentItemEventResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.viewers_granted_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.viewers_granted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTournamentItemEventResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_TournamentEvents_IsValid(val))) {
            _internal_set_event_type(static_cast<::DOTA_TournamentEvents>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 viewers_granted = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_viewers_granted(&has_bits);
          _impl_.viewers_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTournamentItemEventResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTournamentItemEventResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_type(), target);
  }

  // optional uint32 viewers_granted = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_viewers_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTournamentItemEventResponse)
  return target;
}

size_t CMsgTournamentItemEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTournamentItemEventResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .DOTA_TournamentEvents event_type = 1 [default = TE_FIRST_BLOOD];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_type());
    }

    // optional uint32 viewers_granted = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_viewers_granted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTournamentItemEventResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgTournamentItemEventResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTournamentItemEventResponse::GetClassData() const { return &_class_data_; }


void CMsgTournamentItemEventResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgTournamentItemEventResponse*>(&to_msg);
  auto& from = static_cast<const CMsgTournamentItemEventResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTournamentItemEventResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.viewers_granted_ = from._impl_.viewers_granted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTournamentItemEventResponse::CopyFrom(const CMsgTournamentItemEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTournamentItemEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTournamentItemEventResponse::IsInitialized() const {
  return true;
}

void CMsgTournamentItemEventResponse::InternalSwap(CMsgTournamentItemEventResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEventResponse, _impl_.viewers_granted_)
      + sizeof(CMsgTournamentItemEventResponse::_impl_.viewers_granted_)
      - PROTOBUF_FIELD_OFFSET(CMsgTournamentItemEventResponse, _impl_.event_type_)>(
          reinterpret_cast<char*>(&_impl_.event_type_),
          reinterpret_cast<char*>(&other->_impl_.event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTournamentItemEventResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[56]);
}

// ===================================================================

class CMsgTeamFanfare::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgTeamFanfare>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgTeamFanfare::CMsgTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgTeamFanfare)
}
CMsgTeamFanfare::CMsgTeamFanfare(const CMsgTeamFanfare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgTeamFanfare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgTeamFanfare)
}

inline void CMsgTeamFanfare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgTeamFanfare::~CMsgTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgTeamFanfare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgTeamFanfare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgTeamFanfare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTeamFanfare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgTeamFanfare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgTeamFanfare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTeamFanfare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTeamFanfare)
  return target;
}

size_t CMsgTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgTeamFanfare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 match_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgTeamFanfare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgTeamFanfare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgTeamFanfare::GetClassData() const { return &_class_data_; }


void CMsgTeamFanfare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgTeamFanfare*>(&to_msg);
  auto& from = static_cast<const CMsgTeamFanfare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTeamFanfare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_match_id()) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTeamFanfare::CopyFrom(const CMsgTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgTeamFanfare::InternalSwap(CMsgTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgTeamFanfare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[57]);
}

// ===================================================================

class CMsgResponseTeamFanfare::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgResponseTeamFanfare>()._impl_._has_bits_);
  static void set_has_fanfare_goodguys(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fanfare_badguys(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgResponseTeamFanfare)
}
CMsgResponseTeamFanfare::CMsgResponseTeamFanfare(const CMsgResponseTeamFanfare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgResponseTeamFanfare* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fanfare_goodguys_){}
    , decltype(_impl_.fanfare_badguys_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fanfare_goodguys_, &from._impl_.fanfare_goodguys_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fanfare_badguys_) -
    reinterpret_cast<char*>(&_impl_.fanfare_goodguys_)) + sizeof(_impl_.fanfare_badguys_));
  // @@protoc_insertion_point(copy_constructor:CMsgResponseTeamFanfare)
}

inline void CMsgResponseTeamFanfare::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fanfare_goodguys_){0u}
    , decltype(_impl_.fanfare_badguys_){0u}
  };
}

CMsgResponseTeamFanfare::~CMsgResponseTeamFanfare() {
  // @@protoc_insertion_point(destructor:CMsgResponseTeamFanfare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgResponseTeamFanfare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgResponseTeamFanfare::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgResponseTeamFanfare::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgResponseTeamFanfare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.fanfare_goodguys_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.fanfare_badguys_) -
        reinterpret_cast<char*>(&_impl_.fanfare_goodguys_)) + sizeof(_impl_.fanfare_badguys_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgResponseTeamFanfare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 fanfare_goodguys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_fanfare_goodguys(&has_bits);
          _impl_.fanfare_goodguys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fanfare_badguys = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fanfare_badguys(&has_bits);
          _impl_.fanfare_badguys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgResponseTeamFanfare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgResponseTeamFanfare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 fanfare_goodguys = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_fanfare_goodguys(), target);
  }

  // optional uint32 fanfare_badguys = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fanfare_badguys(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgResponseTeamFanfare)
  return target;
}

size_t CMsgResponseTeamFanfare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgResponseTeamFanfare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 fanfare_goodguys = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fanfare_goodguys());
    }

    // optional uint32 fanfare_badguys = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fanfare_badguys());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgResponseTeamFanfare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgResponseTeamFanfare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgResponseTeamFanfare::GetClassData() const { return &_class_data_; }


void CMsgResponseTeamFanfare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgResponseTeamFanfare*>(&to_msg);
  auto& from = static_cast<const CMsgResponseTeamFanfare&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgResponseTeamFanfare)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.fanfare_goodguys_ = from._impl_.fanfare_goodguys_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fanfare_badguys_ = from._impl_.fanfare_badguys_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgResponseTeamFanfare::CopyFrom(const CMsgResponseTeamFanfare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgResponseTeamFanfare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResponseTeamFanfare::IsInitialized() const {
  return true;
}

void CMsgResponseTeamFanfare::InternalSwap(CMsgResponseTeamFanfare* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgResponseTeamFanfare, _impl_.fanfare_badguys_)
      + sizeof(CMsgResponseTeamFanfare::_impl_.fanfare_badguys_)
      - PROTOBUF_FIELD_OFFSET(CMsgResponseTeamFanfare, _impl_.fanfare_goodguys_)>(
          reinterpret_cast<char*>(&_impl_.fanfare_goodguys_),
          reinterpret_cast<char*>(&other->_impl_.fanfare_goodguys_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgResponseTeamFanfare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[58]);
}

// ===================================================================

class CMsgGameServerUploadSaveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerUploadSaveGame>()._impl_._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_save_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerUploadSaveGame)
}
CMsgGameServerUploadSaveGame::CMsgGameServerUploadSaveGame(const CMsgGameServerUploadSaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerUploadSaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_steam_ids_){from._impl_.player_steam_ids_}
    , decltype(_impl_.save_game_data_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.game_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.save_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_save_game_data()) {
    _this->_impl_.save_game_data_.Set(from._internal_save_game_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_time_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerUploadSaveGame)
}

inline void CMsgGameServerUploadSaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_steam_ids_){arena}
    , decltype(_impl_.save_game_data_){}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.game_time_){0u}
  };
  _impl_.save_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameServerUploadSaveGame::~CMsgGameServerUploadSaveGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerUploadSaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerUploadSaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_steam_ids_.~RepeatedField();
  _impl_.save_game_data_.Destroy();
}

void CMsgGameServerUploadSaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerUploadSaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerUploadSaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_steam_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.save_game_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_time_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.game_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerUploadSaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes save_game_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_save_game_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 player_steam_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_steam_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_steam_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerUploadSaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerUploadSaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time(), target);
  }

  // optional bytes save_game_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_save_game_data(), target);
  }

  // optional uint64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_lobby_id(), target);
  }

  // repeated uint64 player_steam_ids = 4;
  for (int i = 0, n = this->_internal_player_steam_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_player_steam_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerUploadSaveGame)
  return target;
}

size_t CMsgGameServerUploadSaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerUploadSaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_steam_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.player_steam_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_player_steam_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes save_game_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_save_game_data());
    }

    // optional uint64 lobby_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerUploadSaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerUploadSaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerUploadSaveGame::GetClassData() const { return &_class_data_; }


void CMsgGameServerUploadSaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerUploadSaveGame*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerUploadSaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerUploadSaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_steam_ids_.MergeFrom(from._impl_.player_steam_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_save_game_data(from._internal_save_game_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerUploadSaveGame::CopyFrom(const CMsgGameServerUploadSaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerUploadSaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerUploadSaveGame::IsInitialized() const {
  return true;
}

void CMsgGameServerUploadSaveGame::InternalSwap(CMsgGameServerUploadSaveGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_steam_ids_.InternalSwap(&other->_impl_.player_steam_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_game_data_, lhs_arena,
      &other->_impl_.save_game_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _impl_.game_time_)
      + sizeof(CMsgGameServerUploadSaveGame::_impl_.game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameServerUploadSaveGame, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerUploadSaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[59]);
}

// ===================================================================

class CMsgGameServerSaveGameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerSaveGameResult>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerSaveGameResult)
}
CMsgGameServerSaveGameResult::CMsgGameServerSaveGameResult(const CMsgGameServerSaveGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerSaveGameResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerSaveGameResult)
}

inline void CMsgGameServerSaveGameResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgGameServerSaveGameResult::~CMsgGameServerSaveGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerSaveGameResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerSaveGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerSaveGameResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerSaveGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerSaveGameResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerSaveGameResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGameServerSaveGameResult_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGameServerSaveGameResult_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerSaveGameResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerSaveGameResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerSaveGameResult)
  return target;
}

size_t CMsgGameServerSaveGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerSaveGameResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGameServerSaveGameResult.Result result = 1 [default = SaveSuccessful];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerSaveGameResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerSaveGameResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerSaveGameResult::GetClassData() const { return &_class_data_; }


void CMsgGameServerSaveGameResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerSaveGameResult*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerSaveGameResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerSaveGameResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerSaveGameResult::CopyFrom(const CMsgGameServerSaveGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerSaveGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerSaveGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerSaveGameResult::InternalSwap(CMsgGameServerSaveGameResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerSaveGameResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[60]);
}

// ===================================================================

class CMsgGameServerGetLoadGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerGetLoadGame>()._impl_._has_bits_);
  static void set_has_save_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerGetLoadGame)
}
CMsgGameServerGetLoadGame::CMsgGameServerGetLoadGame(const CMsgGameServerGetLoadGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerGetLoadGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.save_id_ = from._impl_.save_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGame)
}

inline void CMsgGameServerGetLoadGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_id_){0u}
  };
}

CMsgGameServerGetLoadGame::~CMsgGameServerGetLoadGame() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerGetLoadGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGameServerGetLoadGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerGetLoadGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerGetLoadGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.save_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerGetLoadGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 save_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_save_id(&has_bits);
          _impl_.save_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerGetLoadGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 save_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_save_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGame)
  return target;
}

size_t CMsgGameServerGetLoadGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerGetLoadGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 save_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_save_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerGetLoadGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerGetLoadGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerGetLoadGame::GetClassData() const { return &_class_data_; }


void CMsgGameServerGetLoadGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerGetLoadGame*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerGetLoadGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerGetLoadGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_save_id()) {
    _this->_internal_set_save_id(from._internal_save_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerGetLoadGame::CopyFrom(const CMsgGameServerGetLoadGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerGetLoadGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGame::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGame::InternalSwap(CMsgGameServerGetLoadGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.save_id_, other->_impl_.save_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerGetLoadGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[61]);
}

// ===================================================================

class CMsgGameServerGetLoadGameResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameServerGetLoadGameResult>()._impl_._has_bits_);
  static void set_has_save_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGameServerGetLoadGameResult)
}
CMsgGameServerGetLoadGameResult::CMsgGameServerGetLoadGameResult(const CMsgGameServerGetLoadGameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGameServerGetLoadGameResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_game_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.save_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_save_game_data()) {
    _this->_impl_.save_game_data_.Set(from._internal_save_game_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGameServerGetLoadGameResult)
}

inline void CMsgGameServerGetLoadGameResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.save_game_data_){}
  };
  _impl_.save_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGameServerGetLoadGameResult::~CMsgGameServerGetLoadGameResult() {
  // @@protoc_insertion_point(destructor:CMsgGameServerGetLoadGameResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGameServerGetLoadGameResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.save_game_data_.Destroy();
}

void CMsgGameServerGetLoadGameResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGameServerGetLoadGameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameServerGetLoadGameResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.save_game_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameServerGetLoadGameResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes save_game_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_save_game_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGameServerGetLoadGameResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameServerGetLoadGameResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes save_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_save_game_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameServerGetLoadGameResult)
  return target;
}

size_t CMsgGameServerGetLoadGameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameServerGetLoadGameResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes save_game_data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_save_game_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGameServerGetLoadGameResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGameServerGetLoadGameResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGameServerGetLoadGameResult::GetClassData() const { return &_class_data_; }


void CMsgGameServerGetLoadGameResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGameServerGetLoadGameResult*>(&to_msg);
  auto& from = static_cast<const CMsgGameServerGetLoadGameResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameServerGetLoadGameResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_save_game_data()) {
    _this->_internal_set_save_game_data(from._internal_save_game_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGameServerGetLoadGameResult::CopyFrom(const CMsgGameServerGetLoadGameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameServerGetLoadGameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameServerGetLoadGameResult::IsInitialized() const {
  return true;
}

void CMsgGameServerGetLoadGameResult::InternalSwap(CMsgGameServerGetLoadGameResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_game_data_, lhs_arena,
      &other->_impl_.save_game_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameServerGetLoadGameResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[62]);
}

// ===================================================================

class CMsgDOTAAwardEventPoints_AwardPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAAwardEventPoints_AwardPoints>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_premium_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_trade_ban_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_eligible_for_periodic_adjustment(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_point_cap_periodic_resource_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}
CMsgDOTAAwardEventPoints_AwardPoints::CMsgDOTAAwardEventPoints_AwardPoints(const CMsgDOTAAwardEventPoints_AwardPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAAwardEventPoints_AwardPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.points_){}
    , decltype(_impl_.premium_points_){}
    , decltype(_impl_.trade_ban_time_){}
    , decltype(_impl_.eligible_for_periodic_adjustment_){}
    , decltype(_impl_.point_cap_periodic_resource_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.point_cap_periodic_resource_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.point_cap_periodic_resource_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints.AwardPoints)
}

inline void CMsgDOTAAwardEventPoints_AwardPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.points_){0}
    , decltype(_impl_.premium_points_){0}
    , decltype(_impl_.trade_ban_time_){0u}
    , decltype(_impl_.eligible_for_periodic_adjustment_){false}
    , decltype(_impl_.point_cap_periodic_resource_id_){0u}
  };
}

CMsgDOTAAwardEventPoints_AwardPoints::~CMsgDOTAAwardEventPoints_AwardPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints.AwardPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAAwardEventPoints_AwardPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAAwardEventPoints_AwardPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAAwardEventPoints_AwardPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAAwardEventPoints.AwardPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.point_cap_periodic_resource_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.point_cap_periodic_resource_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAAwardEventPoints_AwardPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_points(&has_bits);
          _impl_.points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 premium_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_premium_points(&has_bits);
          _impl_.premium_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trade_ban_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_trade_ban_time(&has_bits);
          _impl_.trade_ban_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool eligible_for_periodic_adjustment = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_eligible_for_periodic_adjustment(&has_bits);
          _impl_.eligible_for_periodic_adjustment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 point_cap_periodic_resource_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_point_cap_periodic_resource_id(&has_bits);
          _impl_.point_cap_periodic_resource_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAAwardEventPoints_AwardPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints.AwardPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_points(), target);
  }

  // optional int32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_premium_points(), target);
  }

  // optional uint32 trade_ban_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_trade_ban_time(), target);
  }

  // optional bool eligible_for_periodic_adjustment = 6 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_eligible_for_periodic_adjustment(), target);
  }

  // optional uint32 point_cap_periodic_resource_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_point_cap_periodic_resource_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints.AwardPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints_AwardPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAAwardEventPoints.AwardPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional int32 points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_points());
    }

    // optional int32 premium_points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_premium_points());
    }

    // optional uint32 trade_ban_time = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_trade_ban_time());
    }

    // optional bool eligible_for_periodic_adjustment = 6 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 point_cap_periodic_resource_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_point_cap_periodic_resource_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAAwardEventPoints_AwardPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAAwardEventPoints_AwardPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAAwardEventPoints_AwardPoints::GetClassData() const { return &_class_data_; }


void CMsgDOTAAwardEventPoints_AwardPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAAwardEventPoints_AwardPoints*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAAwardEventPoints_AwardPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.points_ = from._impl_.points_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.premium_points_ = from._impl_.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.trade_ban_time_ = from._impl_.trade_ban_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.eligible_for_periodic_adjustment_ = from._impl_.eligible_for_periodic_adjustment_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.point_cap_periodic_resource_id_ = from._impl_.point_cap_periodic_resource_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAAwardEventPoints_AwardPoints::CopyFrom(const CMsgDOTAAwardEventPoints_AwardPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAAwardEventPoints.AwardPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints_AwardPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints_AwardPoints::InternalSwap(CMsgDOTAAwardEventPoints_AwardPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _impl_.point_cap_periodic_resource_id_)
      + sizeof(CMsgDOTAAwardEventPoints_AwardPoints::_impl_.point_cap_periodic_resource_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints_AwardPoints, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAAwardEventPoints_AwardPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[63]);
}

// ===================================================================

class CMsgDOTAAwardEventPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAAwardEventPoints>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAAwardEventPoints)
}
CMsgDOTAAwardEventPoints::CMsgDOTAAwardEventPoints(const CMsgDOTAAwardEventPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAAwardEventPoints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.award_points_){from._impl_.award_points_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.audit_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audit_action_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.audit_action_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAAwardEventPoints)
}

inline void CMsgDOTAAwardEventPoints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.award_points_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.audit_action_){0u}
  };
}

CMsgDOTAAwardEventPoints::~CMsgDOTAAwardEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgDOTAAwardEventPoints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAAwardEventPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.award_points_.~RepeatedPtrField();
}

void CMsgDOTAAwardEventPoints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAAwardEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAAwardEventPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.award_points_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.audit_action_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.audit_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAAwardEventPoints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_award_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit_action = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_audit_action(&has_bits);
          _impl_.audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAAwardEventPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAAwardEventPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_award_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_award_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 audit_action = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_audit_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAAwardEventPoints)
  return target;
}

size_t CMsgDOTAAwardEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAAwardEventPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAAwardEventPoints.AwardPoints award_points = 1;
  total_size += 1UL * this->_internal_award_points_size();
  for (const auto& msg : this->_impl_.award_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint32 audit_action = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAAwardEventPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAAwardEventPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAAwardEventPoints::GetClassData() const { return &_class_data_; }


void CMsgDOTAAwardEventPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAAwardEventPoints*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAAwardEventPoints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAAwardEventPoints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.award_points_.MergeFrom(from._impl_.award_points_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.audit_action_ = from._impl_.audit_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAAwardEventPoints::CopyFrom(const CMsgDOTAAwardEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAAwardEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAwardEventPoints::IsInitialized() const {
  return true;
}

void CMsgDOTAAwardEventPoints::InternalSwap(CMsgDOTAAwardEventPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.award_points_.InternalSwap(&other->_impl_.award_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _impl_.audit_action_)
      + sizeof(CMsgDOTAAwardEventPoints::_impl_.audit_action_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAAwardEventPoints, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAAwardEventPoints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[64]);
}

// ===================================================================

class CMsgGCToServerPingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPingRequest>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPingRequest)
}
CMsgGCToServerPingRequest::CMsgGCToServerPingRequest(const CMsgGCToServerPingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerPingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.request_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_time_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.request_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingRequest)
}

inline void CMsgGCToServerPingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , decltype(_impl_.request_time_){uint64_t{0u}}
  };
}

CMsgGCToServerPingRequest::~CMsgGCToServerPingRequest() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerPingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerPingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerPingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.request_time_) -
        reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.request_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 request_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_time(&has_bits);
          _impl_.request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerPingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_request_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingRequest)
  return target;
}

size_t CMsgGCToServerPingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerPingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerPingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerPingRequest::GetClassData() const { return &_class_data_; }


void CMsgGCToServerPingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerPingRequest*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerPingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.request_time_ = from._impl_.request_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerPingRequest::CopyFrom(const CMsgGCToServerPingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingRequest::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingRequest::InternalSwap(CMsgGCToServerPingRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingRequest, _impl_.request_time_)
      + sizeof(CMsgGCToServerPingRequest::_impl_.request_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingRequest, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[65]);
}

// ===================================================================

class CMsgGCToServerPingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPingResponse>()._impl_._has_bits_);
  static void set_has_request_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPingResponse)
}
CMsgGCToServerPingResponse::CMsgGCToServerPingResponse(const CMsgGCToServerPingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerPingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.request_time_){}
    , decltype(_impl_.cluster_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cluster_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.cluster_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPingResponse)
}

inline void CMsgGCToServerPingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_){uint64_t{0u}}
    , decltype(_impl_.request_time_){uint64_t{0u}}
    , decltype(_impl_.cluster_){0u}
  };
}

CMsgGCToServerPingResponse::~CMsgGCToServerPingResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerPingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerPingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerPingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cluster_) -
        reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.cluster_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_request_id(&has_bits);
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 request_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_time(&has_bits);
          _impl_.request_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cluster(&has_bits);
          _impl_.cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerPingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 request_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_request_id(), target);
  }

  // optional uint64 request_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_request_time(), target);
  }

  // optional uint32 cluster = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cluster(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPingResponse)
  return target;
}

size_t CMsgGCToServerPingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 request_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 request_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_time());
    }

    // optional uint32 cluster = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerPingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerPingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerPingResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToServerPingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerPingResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerPingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.request_id_ = from._impl_.request_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.request_time_ = from._impl_.request_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cluster_ = from._impl_.cluster_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerPingResponse::CopyFrom(const CMsgGCToServerPingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPingResponse::IsInitialized() const {
  return true;
}

void CMsgGCToServerPingResponse::InternalSwap(CMsgGCToServerPingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingResponse, _impl_.cluster_)
      + sizeof(CMsgGCToServerPingResponse::_impl_.cluster_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPingResponse, _impl_.request_id_)>(
          reinterpret_cast<char*>(&_impl_.request_id_),
          reinterpret_cast<char*>(&other->_impl_.request_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[66]);
}

// ===================================================================

class CMsgServerToGCMatchConnectionStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchConnectionStats_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_avg_ping_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packet_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ping_deviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_full_resends(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchConnectionStats.Player)
}
CMsgServerToGCMatchConnectionStats_Player::CMsgServerToGCMatchConnectionStats_Player(const CMsgServerToGCMatchConnectionStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchConnectionStats_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.avg_ping_ms_){}
    , decltype(_impl_.packet_loss_){}
    , decltype(_impl_.ping_deviation_){}
    , decltype(_impl_.full_resends_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.full_resends_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.full_resends_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats.Player)
}

inline void CMsgServerToGCMatchConnectionStats_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.ip_){0u}
    , decltype(_impl_.avg_ping_ms_){0u}
    , decltype(_impl_.packet_loss_){0}
    , decltype(_impl_.ping_deviation_){0}
    , decltype(_impl_.full_resends_){0u}
  };
}

CMsgServerToGCMatchConnectionStats_Player::~CMsgServerToGCMatchConnectionStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchConnectionStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCMatchConnectionStats_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchConnectionStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchConnectionStats.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.full_resends_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.full_resends_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchConnectionStats_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_ip(&has_bits);
          _impl_.ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 avg_ping_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_avg_ping_ms(&has_bits);
          _impl_.avg_ping_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float packet_loss = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_packet_loss(&has_bits);
          _impl_.packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ping_deviation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_ping_deviation(&has_bits);
          _impl_.ping_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 full_resends = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_full_resends(&has_bits);
          _impl_.full_resends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchConnectionStats_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed32 ip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(2, this->_internal_ip(), target);
  }

  // optional uint32 avg_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_avg_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_packet_loss(), target);
  }

  // optional float ping_deviation = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_ping_deviation(), target);
  }

  // optional uint32 full_resends = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_full_resends(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats.Player)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchConnectionStats.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional fixed32 ip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 avg_ping_ms = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_avg_ping_ms());
    }

    // optional float packet_loss = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float ping_deviation = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 full_resends = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_full_resends());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchConnectionStats_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchConnectionStats_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchConnectionStats_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchConnectionStats_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchConnectionStats_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchConnectionStats_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchConnectionStats.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ip_ = from._impl_.ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.avg_ping_ms_ = from._impl_.avg_ping_ms_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.packet_loss_ = from._impl_.packet_loss_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ping_deviation_ = from._impl_.ping_deviation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.full_resends_ = from._impl_.full_resends_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchConnectionStats_Player::CopyFrom(const CMsgServerToGCMatchConnectionStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchConnectionStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats_Player::InternalSwap(CMsgServerToGCMatchConnectionStats_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _impl_.full_resends_)
      + sizeof(CMsgServerToGCMatchConnectionStats_Player::_impl_.full_resends_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchConnectionStats_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[67]);
}

// ===================================================================

class CMsgServerToGCMatchConnectionStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchConnectionStats>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cluster_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchConnectionStats)
}
CMsgServerToGCMatchConnectionStats::CMsgServerToGCMatchConnectionStats(const CMsgServerToGCMatchConnectionStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchConnectionStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.region_id_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.cluster_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cluster_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cluster_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchConnectionStats)
}

inline void CMsgServerToGCMatchConnectionStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.region_id_){0u}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.cluster_id_){0u}
  };
}

CMsgServerToGCMatchConnectionStats::~CMsgServerToGCMatchConnectionStats() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchConnectionStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchConnectionStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerToGCMatchConnectionStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchConnectionStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchConnectionStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cluster_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.cluster_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchConnectionStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_region_id(&has_bits);
          _impl_.region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cluster_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cluster_id(&has_bits);
          _impl_.cluster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchConnectionStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchConnectionStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 region_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_region_id(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 cluster_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cluster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchConnectionStats)
  return target;
}

size_t CMsgServerToGCMatchConnectionStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchConnectionStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchConnectionStats.Player players = 4;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 region_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 cluster_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cluster_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchConnectionStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchConnectionStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchConnectionStats::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchConnectionStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchConnectionStats*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchConnectionStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchConnectionStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.region_id_ = from._impl_.region_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cluster_id_ = from._impl_.cluster_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchConnectionStats::CopyFrom(const CMsgServerToGCMatchConnectionStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchConnectionStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchConnectionStats::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchConnectionStats::InternalSwap(CMsgServerToGCMatchConnectionStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _impl_.cluster_id_)
      + sizeof(CMsgServerToGCMatchConnectionStats::_impl_.cluster_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchConnectionStats, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchConnectionStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[68]);
}

// ===================================================================

class CMsgServerGCUpdateSpectatorCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerGCUpdateSpectatorCount>()._impl_._has_bits_);
  static void set_has_spectator_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerGCUpdateSpectatorCount)
}
CMsgServerGCUpdateSpectatorCount::CMsgServerGCUpdateSpectatorCount(const CMsgServerGCUpdateSpectatorCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerGCUpdateSpectatorCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spectator_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.spectator_count_ = from._impl_.spectator_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerGCUpdateSpectatorCount)
}

inline void CMsgServerGCUpdateSpectatorCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spectator_count_){0u}
  };
}

CMsgServerGCUpdateSpectatorCount::~CMsgServerGCUpdateSpectatorCount() {
  // @@protoc_insertion_point(destructor:CMsgServerGCUpdateSpectatorCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerGCUpdateSpectatorCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerGCUpdateSpectatorCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerGCUpdateSpectatorCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerGCUpdateSpectatorCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.spectator_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerGCUpdateSpectatorCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 spectator_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_spectator_count(&has_bits);
          _impl_.spectator_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerGCUpdateSpectatorCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerGCUpdateSpectatorCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 spectator_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spectator_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerGCUpdateSpectatorCount)
  return target;
}

size_t CMsgServerGCUpdateSpectatorCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerGCUpdateSpectatorCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 spectator_count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_spectator_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerGCUpdateSpectatorCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerGCUpdateSpectatorCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerGCUpdateSpectatorCount::GetClassData() const { return &_class_data_; }


void CMsgServerGCUpdateSpectatorCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerGCUpdateSpectatorCount*>(&to_msg);
  auto& from = static_cast<const CMsgServerGCUpdateSpectatorCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerGCUpdateSpectatorCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spectator_count()) {
    _this->_internal_set_spectator_count(from._internal_spectator_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerGCUpdateSpectatorCount::CopyFrom(const CMsgServerGCUpdateSpectatorCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerGCUpdateSpectatorCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerGCUpdateSpectatorCount::IsInitialized() const {
  return true;
}

void CMsgServerGCUpdateSpectatorCount::InternalSwap(CMsgServerGCUpdateSpectatorCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.spectator_count_, other->_impl_.spectator_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerGCUpdateSpectatorCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[69]);
}

// ===================================================================

class CSerializedCombatLog_Dictionary_DictString::_Internal {
 public:
  using HasBits = decltype(std::declval<CSerializedCombatLog_Dictionary_DictString>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog.Dictionary.DictString)
}
CSerializedCombatLog_Dictionary_DictString::CSerializedCombatLog_Dictionary_DictString(const CSerializedCombatLog_Dictionary_DictString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSerializedCombatLog_Dictionary_DictString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary.DictString)
}

inline void CSerializedCombatLog_Dictionary_DictString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.id_){0u}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CSerializedCombatLog_Dictionary_DictString::~CSerializedCombatLog_Dictionary_DictString() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary.DictString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSerializedCombatLog_Dictionary_DictString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void CSerializedCombatLog_Dictionary_DictString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSerializedCombatLog_Dictionary_DictString::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog.Dictionary.DictString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog_Dictionary_DictString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CSerializedCombatLog.Dictionary.DictString.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSerializedCombatLog_Dictionary_DictString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary.DictString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSerializedCombatLog.Dictionary.DictString.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary.DictString)
  return target;
}

size_t CSerializedCombatLog_Dictionary_DictString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_id()) {
    // required uint32 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return total_size;
}
size_t CSerializedCombatLog_Dictionary_DictString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog.Dictionary.DictString)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSerializedCombatLog_Dictionary_DictString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSerializedCombatLog_Dictionary_DictString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSerializedCombatLog_Dictionary_DictString::GetClassData() const { return &_class_data_; }


void CSerializedCombatLog_Dictionary_DictString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSerializedCombatLog_Dictionary_DictString*>(&to_msg);
  auto& from = static_cast<const CSerializedCombatLog_Dictionary_DictString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog.Dictionary.DictString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSerializedCombatLog_Dictionary_DictString::CopyFrom(const CSerializedCombatLog_Dictionary_DictString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog.Dictionary.DictString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary_DictString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CSerializedCombatLog_Dictionary_DictString::InternalSwap(CSerializedCombatLog_Dictionary_DictString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog_Dictionary_DictString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[70]);
}

// ===================================================================

class CSerializedCombatLog_Dictionary::_Internal {
 public:
};

CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog.Dictionary)
}
CSerializedCombatLog_Dictionary::CSerializedCombatLog_Dictionary(const CSerializedCombatLog_Dictionary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSerializedCombatLog_Dictionary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.strings_){from._impl_.strings_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog.Dictionary)
}

inline void CSerializedCombatLog_Dictionary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.strings_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CSerializedCombatLog_Dictionary::~CSerializedCombatLog_Dictionary() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog.Dictionary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSerializedCombatLog_Dictionary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strings_.~RepeatedPtrField();
}

void CSerializedCombatLog_Dictionary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSerializedCombatLog_Dictionary::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog.Dictionary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.strings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog_Dictionary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSerializedCombatLog_Dictionary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog.Dictionary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_strings_size()); i < n; i++) {
    const auto& repfield = this->_internal_strings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog.Dictionary)
  return target;
}

size_t CSerializedCombatLog_Dictionary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog.Dictionary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSerializedCombatLog.Dictionary.DictString strings = 1;
  total_size += 1UL * this->_internal_strings_size();
  for (const auto& msg : this->_impl_.strings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSerializedCombatLog_Dictionary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSerializedCombatLog_Dictionary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSerializedCombatLog_Dictionary::GetClassData() const { return &_class_data_; }


void CSerializedCombatLog_Dictionary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSerializedCombatLog_Dictionary*>(&to_msg);
  auto& from = static_cast<const CSerializedCombatLog_Dictionary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog.Dictionary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.strings_.MergeFrom(from._impl_.strings_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSerializedCombatLog_Dictionary::CopyFrom(const CSerializedCombatLog_Dictionary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog.Dictionary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog_Dictionary::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.strings_))
    return false;
  return true;
}

void CSerializedCombatLog_Dictionary::InternalSwap(CSerializedCombatLog_Dictionary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog_Dictionary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[71]);
}

// ===================================================================

class CSerializedCombatLog::_Internal {
 public:
  using HasBits = decltype(std::declval<CSerializedCombatLog>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CSerializedCombatLog_Dictionary& dictionary(const CSerializedCombatLog* msg);
  static void set_has_dictionary(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CSerializedCombatLog_Dictionary&
CSerializedCombatLog::_Internal::dictionary(const CSerializedCombatLog* msg) {
  return *msg->_impl_.dictionary_;
}
void CSerializedCombatLog::clear_entries() {
  _impl_.entries_.Clear();
}
CSerializedCombatLog::CSerializedCombatLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CSerializedCombatLog)
}
CSerializedCombatLog::CSerializedCombatLog(const CSerializedCombatLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CSerializedCombatLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){from._impl_.entries_}
    , decltype(_impl_.dictionary_){nullptr}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dictionary()) {
    _this->_impl_.dictionary_ = new ::CSerializedCombatLog_Dictionary(*from._impl_.dictionary_);
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CSerializedCombatLog)
}

inline void CSerializedCombatLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entries_){arena}
    , decltype(_impl_.dictionary_){nullptr}
    , decltype(_impl_.version_){0u}
  };
}

CSerializedCombatLog::~CSerializedCombatLog() {
  // @@protoc_insertion_point(destructor:CSerializedCombatLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CSerializedCombatLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.dictionary_;
}

void CSerializedCombatLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CSerializedCombatLog::Clear() {
// @@protoc_insertion_point(message_clear_start:CSerializedCombatLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dictionary_ != nullptr);
    _impl_.dictionary_->Clear();
  }
  _impl_.version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSerializedCombatLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CSerializedCombatLog.Dictionary dictionary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dictionary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDOTACombatLogEntry entries = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CSerializedCombatLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSerializedCombatLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional .CSerializedCombatLog.Dictionary dictionary = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dictionary(this),
        _Internal::dictionary(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSerializedCombatLog)
  return target;
}

size_t CSerializedCombatLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSerializedCombatLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTACombatLogEntry entries = 3;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CSerializedCombatLog.Dictionary dictionary = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dictionary_);
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CSerializedCombatLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CSerializedCombatLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CSerializedCombatLog::GetClassData() const { return &_class_data_; }


void CSerializedCombatLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CSerializedCombatLog*>(&to_msg);
  auto& from = static_cast<const CSerializedCombatLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSerializedCombatLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_dictionary()->::CSerializedCombatLog_Dictionary::MergeFrom(
          from._internal_dictionary());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CSerializedCombatLog::CopyFrom(const CSerializedCombatLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSerializedCombatLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSerializedCombatLog::IsInitialized() const {
  if (_internal_has_dictionary()) {
    if (!_impl_.dictionary_->IsInitialized()) return false;
  }
  return true;
}

void CSerializedCombatLog::InternalSwap(CSerializedCombatLog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSerializedCombatLog, _impl_.version_)
      + sizeof(CSerializedCombatLog::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CSerializedCombatLog, _impl_.dictionary_)>(
          reinterpret_cast<char*>(&_impl_.dictionary_),
          reinterpret_cast<char*>(&other->_impl_.dictionary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSerializedCombatLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[72]);
}

// ===================================================================

class CMsgServerToGCVictoryPredictions_Record::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCVictoryPredictions_Record>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCVictoryPredictions.Record)
}
CMsgServerToGCVictoryPredictions_Record::CMsgServerToGCVictoryPredictions_Record(const CMsgServerToGCVictoryPredictions_Record& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCVictoryPredictions_Record* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions.Record)
}

inline void CMsgServerToGCVictoryPredictions_Record::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerToGCVictoryPredictions_Record::~CMsgServerToGCVictoryPredictions_Record() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions.Record)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCVictoryPredictions_Record::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgServerToGCVictoryPredictions_Record::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCVictoryPredictions_Record::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCVictoryPredictions.Record)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCVictoryPredictions_Record::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 item_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCVictoryPredictions_Record::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions.Record)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  // repeated uint64 item_ids = 5;
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_item_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions.Record)
  return target;
}

size_t CMsgServerToGCVictoryPredictions_Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCVictoryPredictions.Record)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCVictoryPredictions_Record::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCVictoryPredictions_Record::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCVictoryPredictions_Record::GetClassData() const { return &_class_data_; }


void CMsgServerToGCVictoryPredictions_Record::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCVictoryPredictions_Record*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCVictoryPredictions_Record&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCVictoryPredictions.Record)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCVictoryPredictions_Record::CopyFrom(const CMsgServerToGCVictoryPredictions_Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCVictoryPredictions.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions_Record::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions_Record::InternalSwap(CMsgServerToGCVictoryPredictions_Record* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _impl_.account_id_)
      + sizeof(CMsgServerToGCVictoryPredictions_Record::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCVictoryPredictions_Record, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCVictoryPredictions_Record::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[73]);
}

// ===================================================================

class CMsgServerToGCVictoryPredictions::_Internal {
 public:
};

CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCVictoryPredictions)
}
CMsgServerToGCVictoryPredictions::CMsgServerToGCVictoryPredictions(const CMsgServerToGCVictoryPredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCVictoryPredictions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){from._impl_.records_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCVictoryPredictions)
}

inline void CMsgServerToGCVictoryPredictions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.records_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCVictoryPredictions::~CMsgServerToGCVictoryPredictions() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCVictoryPredictions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCVictoryPredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.records_.~RepeatedPtrField();
}

void CMsgServerToGCVictoryPredictions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCVictoryPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCVictoryPredictions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.records_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCVictoryPredictions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCVictoryPredictions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCVictoryPredictions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCVictoryPredictions)
  return target;
}

size_t CMsgServerToGCVictoryPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCVictoryPredictions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCVictoryPredictions.Record records = 1;
  total_size += 1UL * this->_internal_records_size();
  for (const auto& msg : this->_impl_.records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCVictoryPredictions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCVictoryPredictions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCVictoryPredictions::GetClassData() const { return &_class_data_; }


void CMsgServerToGCVictoryPredictions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCVictoryPredictions*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCVictoryPredictions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCVictoryPredictions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.records_.MergeFrom(from._impl_.records_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCVictoryPredictions::CopyFrom(const CMsgServerToGCVictoryPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCVictoryPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCVictoryPredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCVictoryPredictions::InternalSwap(CMsgServerToGCVictoryPredictions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.records_.InternalSwap(&other->_impl_.records_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCVictoryPredictions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[74]);
}

// ===================================================================

class CMsgServerToGCRequestStatus::_Internal {
 public:
};

CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestStatus)
}
CMsgServerToGCRequestStatus::CMsgServerToGCRequestStatus(const CMsgServerToGCRequestStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgServerToGCRequestStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRequestStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRequestStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[75]);
}

// ===================================================================

class CMsgServerToGCRequestStatus_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestStatus_Response>()._impl_._has_bits_);
  static void set_has_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestStatus_Response)
}
CMsgServerToGCRequestStatus_Response::CMsgServerToGCRequestStatus_Response(const CMsgServerToGCRequestStatus_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRequestStatus_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.response_ = from._impl_.response_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestStatus_Response)
}

inline void CMsgServerToGCRequestStatus_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.response_){0u}
  };
}

CMsgServerToGCRequestStatus_Response::~CMsgServerToGCRequestStatus_Response() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestStatus_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRequestStatus_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCRequestStatus_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRequestStatus_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestStatus_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.response_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestStatus_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_response(&has_bits);
          _impl_.response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRequestStatus_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestStatus_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestStatus_Response)
  return target;
}

size_t CMsgServerToGCRequestStatus_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestStatus_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 response = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRequestStatus_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRequestStatus_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRequestStatus_Response::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRequestStatus_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRequestStatus_Response*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRequestStatus_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestStatus_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_response()) {
    _this->_internal_set_response(from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRequestStatus_Response::CopyFrom(const CMsgServerToGCRequestStatus_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestStatus_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestStatus_Response::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestStatus_Response::InternalSwap(CMsgServerToGCRequestStatus_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestStatus_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[76]);
}

// ===================================================================

class CMsgGCToServerEvaluateToxicChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerEvaluateToxicChat>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reporter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerEvaluateToxicChat::CMsgGCToServerEvaluateToxicChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerEvaluateToxicChat)
}
CMsgGCToServerEvaluateToxicChat::CMsgGCToServerEvaluateToxicChat(const CMsgGCToServerEvaluateToxicChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerEvaluateToxicChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.reporter_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reporter_account_id_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.reporter_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerEvaluateToxicChat)
}

inline void CMsgGCToServerEvaluateToxicChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.reporter_account_id_){0u}
  };
}

CMsgGCToServerEvaluateToxicChat::~CMsgGCToServerEvaluateToxicChat() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerEvaluateToxicChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerEvaluateToxicChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerEvaluateToxicChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerEvaluateToxicChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerEvaluateToxicChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.reporter_account_id_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.reporter_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerEvaluateToxicChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reporter_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reporter_account_id(&has_bits);
          _impl_.reporter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerEvaluateToxicChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerEvaluateToxicChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional uint32 reporter_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reporter_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerEvaluateToxicChat)
  return target;
}

size_t CMsgGCToServerEvaluateToxicChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerEvaluateToxicChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional uint32 reporter_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reporter_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerEvaluateToxicChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerEvaluateToxicChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerEvaluateToxicChat::GetClassData() const { return &_class_data_; }


void CMsgGCToServerEvaluateToxicChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerEvaluateToxicChat*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerEvaluateToxicChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerEvaluateToxicChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reporter_account_id_ = from._impl_.reporter_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerEvaluateToxicChat::CopyFrom(const CMsgGCToServerEvaluateToxicChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerEvaluateToxicChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerEvaluateToxicChat::IsInitialized() const {
  return true;
}

void CMsgGCToServerEvaluateToxicChat::InternalSwap(CMsgGCToServerEvaluateToxicChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerEvaluateToxicChat, _impl_.reporter_account_id_)
      + sizeof(CMsgGCToServerEvaluateToxicChat::_impl_.reporter_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerEvaluateToxicChat, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerEvaluateToxicChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[77]);
}

// ===================================================================

class CMsgServerToGCEvaluateToxicChat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCEvaluateToxicChat>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reporter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCEvaluateToxicChat::CMsgServerToGCEvaluateToxicChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCEvaluateToxicChat)
}
CMsgServerToGCEvaluateToxicChat::CMsgServerToGCEvaluateToxicChat(const CMsgServerToGCEvaluateToxicChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCEvaluateToxicChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){from._impl_.timestamp_}
    , decltype(_impl_.line_){from._impl_.line_}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.reporter_account_id_){}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_id_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCEvaluateToxicChat)
}

inline void CMsgServerToGCEvaluateToxicChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timestamp_){arena}
    , decltype(_impl_.line_){arena}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.reporter_account_id_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgServerToGCEvaluateToxicChat::~CMsgServerToGCEvaluateToxicChat() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCEvaluateToxicChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCEvaluateToxicChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.timestamp_.~RepeatedField();
  _impl_.line_.~RepeatedPtrField();
}

void CMsgServerToGCEvaluateToxicChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCEvaluateToxicChat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCEvaluateToxicChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_.Clear();
  _impl_.line_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_id_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.match_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCEvaluateToxicChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reporter_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reporter_account_id(&has_bits);
          _impl_.reporter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_timestamp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_timestamp(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_line();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "CMsgServerToGCEvaluateToxicChat.line");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCEvaluateToxicChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCEvaluateToxicChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional uint32 reporter_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reporter_account_id(), target);
  }

  // optional fixed64 match_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_match_id(), target);
  }

  // repeated uint32 timestamp = 4;
  for (int i = 0, n = this->_internal_timestamp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(i), target);
  }

  // repeated string line = 5;
  for (int i = 0, n = this->_internal_line_size(); i < n; i++) {
    const auto& s = this->_internal_line(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgServerToGCEvaluateToxicChat.line");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCEvaluateToxicChat)
  return target;
}

size_t CMsgServerToGCEvaluateToxicChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCEvaluateToxicChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 timestamp = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.timestamp_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_timestamp_size());
    total_size += data_size;
  }

  // repeated string line = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.line_.size());
  for (int i = 0, n = _impl_.line_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.line_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional uint32 reporter_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reporter_account_id());
    }

    // optional fixed64 match_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCEvaluateToxicChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCEvaluateToxicChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCEvaluateToxicChat::GetClassData() const { return &_class_data_; }


void CMsgServerToGCEvaluateToxicChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCEvaluateToxicChat*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCEvaluateToxicChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCEvaluateToxicChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.timestamp_.MergeFrom(from._impl_.timestamp_);
  _this->_impl_.line_.MergeFrom(from._impl_.line_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reporter_account_id_ = from._impl_.reporter_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCEvaluateToxicChat::CopyFrom(const CMsgServerToGCEvaluateToxicChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCEvaluateToxicChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCEvaluateToxicChat::IsInitialized() const {
  return true;
}

void CMsgServerToGCEvaluateToxicChat::InternalSwap(CMsgServerToGCEvaluateToxicChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.timestamp_.InternalSwap(&other->_impl_.timestamp_);
  _impl_.line_.InternalSwap(&other->_impl_.line_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCEvaluateToxicChat, _impl_.match_id_)
      + sizeof(CMsgServerToGCEvaluateToxicChat::_impl_.match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCEvaluateToxicChat, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCEvaluateToxicChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[78]);
}

// ===================================================================

class CMsgServerToGCEvaluateToxicChatResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCEvaluateToxicChatResponse>()._impl_._has_bits_);
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reporter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ban_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ban_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCEvaluateToxicChatResponse::CMsgServerToGCEvaluateToxicChatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCEvaluateToxicChatResponse)
}
CMsgServerToGCEvaluateToxicChatResponse::CMsgServerToGCEvaluateToxicChatResponse(const CMsgServerToGCEvaluateToxicChatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCEvaluateToxicChatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){}
    , decltype(_impl_.reporter_account_id_){}
    , decltype(_impl_.ban_reason_){}
    , decltype(_impl_.ban_duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_account_id_, &from._impl_.target_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ban_duration_) -
    reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.ban_duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCEvaluateToxicChatResponse)
}

inline void CMsgServerToGCEvaluateToxicChatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_account_id_){0u}
    , decltype(_impl_.reporter_account_id_){0u}
    , decltype(_impl_.ban_reason_){0u}
    , decltype(_impl_.ban_duration_){0u}
  };
}

CMsgServerToGCEvaluateToxicChatResponse::~CMsgServerToGCEvaluateToxicChatResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCEvaluateToxicChatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCEvaluateToxicChatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCEvaluateToxicChatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCEvaluateToxicChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCEvaluateToxicChatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.target_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ban_duration_) -
        reinterpret_cast<char*>(&_impl_.target_account_id_)) + sizeof(_impl_.ban_duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCEvaluateToxicChatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 target_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 reporter_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_reporter_account_id(&has_bits);
          _impl_.reporter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ban_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ban_reason(&has_bits);
          _impl_.ban_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ban_duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_ban_duration(&has_bits);
          _impl_.ban_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCEvaluateToxicChatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCEvaluateToxicChatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 target_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_target_account_id(), target);
  }

  // optional uint32 reporter_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reporter_account_id(), target);
  }

  // optional uint32 ban_reason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ban_reason(), target);
  }

  // optional uint32 ban_duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ban_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCEvaluateToxicChatResponse)
  return target;
}

size_t CMsgServerToGCEvaluateToxicChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCEvaluateToxicChatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 target_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

    // optional uint32 reporter_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_reporter_account_id());
    }

    // optional uint32 ban_reason = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ban_reason());
    }

    // optional uint32 ban_duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ban_duration());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCEvaluateToxicChatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCEvaluateToxicChatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCEvaluateToxicChatResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCEvaluateToxicChatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCEvaluateToxicChatResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCEvaluateToxicChatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCEvaluateToxicChatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reporter_account_id_ = from._impl_.reporter_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ban_reason_ = from._impl_.ban_reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ban_duration_ = from._impl_.ban_duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCEvaluateToxicChatResponse::CopyFrom(const CMsgServerToGCEvaluateToxicChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCEvaluateToxicChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCEvaluateToxicChatResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCEvaluateToxicChatResponse::InternalSwap(CMsgServerToGCEvaluateToxicChatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCEvaluateToxicChatResponse, _impl_.ban_duration_)
      + sizeof(CMsgServerToGCEvaluateToxicChatResponse::_impl_.ban_duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCEvaluateToxicChatResponse, _impl_.target_account_id_)>(
          reinterpret_cast<char*>(&_impl_.target_account_id_),
          reinterpret_cast<char*>(&other->_impl_.target_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCEvaluateToxicChatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[79]);
}

// ===================================================================

class CMsgSignOutAssassinMiniGameInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutAssassinMiniGameInfo>()._impl_._has_bits_);
  static void set_has_assassin_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_contract_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_complete_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pa_is_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutAssassinMiniGameInfo)
}
CMsgSignOutAssassinMiniGameInfo::CMsgSignOutAssassinMiniGameInfo(const CMsgSignOutAssassinMiniGameInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutAssassinMiniGameInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winning_players_){from._impl_.winning_players_}
    , decltype(_impl_.losing_players_){from._impl_.losing_players_}
    , decltype(_impl_.arcana_owners_){from._impl_.arcana_owners_}
    , decltype(_impl_.target_hero_id_){}
    , decltype(_impl_.assassin_won_){}
    , decltype(_impl_.contract_completed_){}
    , decltype(_impl_.pa_is_radiant_){}
    , decltype(_impl_.contract_complete_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_hero_id_, &from._impl_.target_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contract_complete_time_) -
    reinterpret_cast<char*>(&_impl_.target_hero_id_)) + sizeof(_impl_.contract_complete_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutAssassinMiniGameInfo)
}

inline void CMsgSignOutAssassinMiniGameInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.winning_players_){arena}
    , decltype(_impl_.losing_players_){arena}
    , decltype(_impl_.arcana_owners_){arena}
    , decltype(_impl_.target_hero_id_){0u}
    , decltype(_impl_.assassin_won_){false}
    , decltype(_impl_.contract_completed_){false}
    , decltype(_impl_.pa_is_radiant_){false}
    , decltype(_impl_.contract_complete_time_){0}
  };
}

CMsgSignOutAssassinMiniGameInfo::~CMsgSignOutAssassinMiniGameInfo() {
  // @@protoc_insertion_point(destructor:CMsgSignOutAssassinMiniGameInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutAssassinMiniGameInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.winning_players_.~RepeatedField();
  _impl_.losing_players_.~RepeatedField();
  _impl_.arcana_owners_.~RepeatedField();
}

void CMsgSignOutAssassinMiniGameInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutAssassinMiniGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutAssassinMiniGameInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.winning_players_.Clear();
  _impl_.losing_players_.Clear();
  _impl_.arcana_owners_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.target_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contract_complete_time_) -
        reinterpret_cast<char*>(&_impl_.target_hero_id_)) + sizeof(_impl_.contract_complete_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutAssassinMiniGameInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 winning_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_winning_players(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_winning_players(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 losing_players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_losing_players(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_losing_players(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 arcana_owners = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_arcana_owners(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<25>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_arcana_owners(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool assassin_won = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_assassin_won(&has_bits);
          _impl_.assassin_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_target_hero_id(&has_bits);
          _impl_.target_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contract_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contract_completed(&has_bits);
          _impl_.contract_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float contract_complete_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_contract_complete_time(&has_bits);
          _impl_.contract_complete_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool pa_is_radiant = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_pa_is_radiant(&has_bits);
          _impl_.pa_is_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutAssassinMiniGameInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutAssassinMiniGameInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  for (int i = 0, n = this->_internal_winning_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_winning_players(i), target);
  }

  // repeated fixed64 losing_players = 2;
  for (int i = 0, n = this->_internal_losing_players_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_losing_players(i), target);
  }

  // repeated fixed64 arcana_owners = 3;
  for (int i = 0, n = this->_internal_arcana_owners_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_arcana_owners(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool assassin_won = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_assassin_won(), target);
  }

  // optional uint32 target_hero_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_hero_id(), target);
  }

  // optional bool contract_completed = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contract_completed(), target);
  }

  // optional float contract_complete_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_contract_complete_time(), target);
  }

  // optional bool pa_is_radiant = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_pa_is_radiant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutAssassinMiniGameInfo)
  return target;
}

size_t CMsgSignOutAssassinMiniGameInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutAssassinMiniGameInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 winning_players = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_winning_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_winning_players_size());
    total_size += data_size;
  }

  // repeated fixed64 losing_players = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_losing_players_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_losing_players_size());
    total_size += data_size;
  }

  // repeated fixed64 arcana_owners = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arcana_owners_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_arcana_owners_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 target_hero_id = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_hero_id());
    }

    // optional bool assassin_won = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool contract_completed = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool pa_is_radiant = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float contract_complete_time = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutAssassinMiniGameInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutAssassinMiniGameInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutAssassinMiniGameInfo::GetClassData() const { return &_class_data_; }


void CMsgSignOutAssassinMiniGameInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutAssassinMiniGameInfo*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutAssassinMiniGameInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutAssassinMiniGameInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.winning_players_.MergeFrom(from._impl_.winning_players_);
  _this->_impl_.losing_players_.MergeFrom(from._impl_.losing_players_);
  _this->_impl_.arcana_owners_.MergeFrom(from._impl_.arcana_owners_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.target_hero_id_ = from._impl_.target_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.assassin_won_ = from._impl_.assassin_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.contract_completed_ = from._impl_.contract_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pa_is_radiant_ = from._impl_.pa_is_radiant_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.contract_complete_time_ = from._impl_.contract_complete_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutAssassinMiniGameInfo::CopyFrom(const CMsgSignOutAssassinMiniGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutAssassinMiniGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutAssassinMiniGameInfo::IsInitialized() const {
  return true;
}

void CMsgSignOutAssassinMiniGameInfo::InternalSwap(CMsgSignOutAssassinMiniGameInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.winning_players_.InternalSwap(&other->_impl_.winning_players_);
  _impl_.losing_players_.InternalSwap(&other->_impl_.losing_players_);
  _impl_.arcana_owners_.InternalSwap(&other->_impl_.arcana_owners_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _impl_.contract_complete_time_)
      + sizeof(CMsgSignOutAssassinMiniGameInfo::_impl_.contract_complete_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutAssassinMiniGameInfo, _impl_.target_hero_id_)>(
          reinterpret_cast<char*>(&_impl_.target_hero_id_),
          reinterpret_cast<char*>(&other->_impl_.target_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutAssassinMiniGameInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[80]);
}

// ===================================================================

class CMsgServerToGCKillSummaries_KillSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCKillSummaries_KillSummary>()._impl_._has_bits_);
  static void set_has_killer_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCKillSummaries.KillSummary)
}
CMsgServerToGCKillSummaries_KillSummary::CMsgServerToGCKillSummaries_KillSummary(const CMsgServerToGCKillSummaries_KillSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCKillSummaries_KillSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.killer_hero_id_){}
    , decltype(_impl_.victim_hero_id_){}
    , decltype(_impl_.kill_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.killer_hero_id_, &from._impl_.killer_hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.kill_count_) -
    reinterpret_cast<char*>(&_impl_.killer_hero_id_)) + sizeof(_impl_.kill_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries.KillSummary)
}

inline void CMsgServerToGCKillSummaries_KillSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.killer_hero_id_){0u}
    , decltype(_impl_.victim_hero_id_){0u}
    , decltype(_impl_.kill_count_){0u}
  };
}

CMsgServerToGCKillSummaries_KillSummary::~CMsgServerToGCKillSummaries_KillSummary() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries.KillSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCKillSummaries_KillSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCKillSummaries_KillSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCKillSummaries_KillSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCKillSummaries.KillSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.killer_hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.kill_count_) -
        reinterpret_cast<char*>(&_impl_.killer_hero_id_)) + sizeof(_impl_.kill_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCKillSummaries_KillSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 killer_hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_killer_hero_id(&has_bits);
          _impl_.killer_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim_hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_victim_hero_id(&has_bits);
          _impl_.victim_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kill_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_kill_count(&has_bits);
          _impl_.kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCKillSummaries_KillSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries.KillSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 killer_hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_killer_hero_id(), target);
  }

  // optional uint32 victim_hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_victim_hero_id(), target);
  }

  // optional uint32 kill_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kill_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries.KillSummary)
  return target;
}

size_t CMsgServerToGCKillSummaries_KillSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCKillSummaries.KillSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 killer_hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_killer_hero_id());
    }

    // optional uint32 victim_hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim_hero_id());
    }

    // optional uint32 kill_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kill_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCKillSummaries_KillSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCKillSummaries_KillSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCKillSummaries_KillSummary::GetClassData() const { return &_class_data_; }


void CMsgServerToGCKillSummaries_KillSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCKillSummaries_KillSummary*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCKillSummaries_KillSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCKillSummaries.KillSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.killer_hero_id_ = from._impl_.killer_hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.victim_hero_id_ = from._impl_.victim_hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.kill_count_ = from._impl_.kill_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCKillSummaries_KillSummary::CopyFrom(const CMsgServerToGCKillSummaries_KillSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCKillSummaries.KillSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries_KillSummary::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries_KillSummary::InternalSwap(CMsgServerToGCKillSummaries_KillSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _impl_.kill_count_)
      + sizeof(CMsgServerToGCKillSummaries_KillSummary::_impl_.kill_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCKillSummaries_KillSummary, _impl_.killer_hero_id_)>(
          reinterpret_cast<char*>(&_impl_.killer_hero_id_),
          reinterpret_cast<char*>(&other->_impl_.killer_hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCKillSummaries_KillSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[81]);
}

// ===================================================================

class CMsgServerToGCKillSummaries::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCKillSummaries>()._impl_._has_bits_);
  static void set_has_ingameevent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCKillSummaries)
}
CMsgServerToGCKillSummaries::CMsgServerToGCKillSummaries(const CMsgServerToGCKillSummaries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCKillSummaries* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summaries_){from._impl_.summaries_}
    , decltype(_impl_.ingameevent_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ingameevent_id_ = from._impl_.ingameevent_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCKillSummaries)
}

inline void CMsgServerToGCKillSummaries::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summaries_){arena}
    , decltype(_impl_.ingameevent_id_){0u}
  };
}

CMsgServerToGCKillSummaries::~CMsgServerToGCKillSummaries() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCKillSummaries)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCKillSummaries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.summaries_.~RepeatedPtrField();
}

void CMsgServerToGCKillSummaries::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCKillSummaries::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCKillSummaries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.summaries_.Clear();
  _impl_.ingameevent_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCKillSummaries::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ingameevent_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ingameevent_id(&has_bits);
          _impl_.ingameevent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCKillSummaries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCKillSummaries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ingameevent_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ingameevent_id(), target);
  }

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_summaries_size()); i < n; i++) {
    const auto& repfield = this->_internal_summaries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCKillSummaries)
  return target;
}

size_t CMsgServerToGCKillSummaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCKillSummaries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCKillSummaries.KillSummary summaries = 2;
  total_size += 1UL * this->_internal_summaries_size();
  for (const auto& msg : this->_impl_.summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 ingameevent_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ingameevent_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCKillSummaries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCKillSummaries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCKillSummaries::GetClassData() const { return &_class_data_; }


void CMsgServerToGCKillSummaries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCKillSummaries*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCKillSummaries&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCKillSummaries)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.summaries_.MergeFrom(from._impl_.summaries_);
  if (from._internal_has_ingameevent_id()) {
    _this->_internal_set_ingameevent_id(from._internal_ingameevent_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCKillSummaries::CopyFrom(const CMsgServerToGCKillSummaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCKillSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCKillSummaries::IsInitialized() const {
  return true;
}

void CMsgServerToGCKillSummaries::InternalSwap(CMsgServerToGCKillSummaries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.summaries_.InternalSwap(&other->_impl_.summaries_);
  swap(_impl_.ingameevent_id_, other->_impl_.ingameevent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCKillSummaries::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[82]);
}

// ===================================================================

class CMsgGCToServerPredictionResult_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPredictionResult_Prediction>()._impl_._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_fails(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPredictionResult.Prediction)
}
CMsgGCToServerPredictionResult_Prediction::CMsgGCToServerPredictionResult_Prediction(const CMsgGCToServerPredictionResult_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerPredictionResult_Prediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_item_defs_){from._impl_.granted_item_defs_}
    , decltype(_impl_.item_def_){}
    , decltype(_impl_.num_correct_){}
    , decltype(_impl_.num_fails_){}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_def_, &from._impl_.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult.Prediction)
}

inline void CMsgGCToServerPredictionResult_Prediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.granted_item_defs_){arena}
    , decltype(_impl_.item_def_){0u}
    , decltype(_impl_.num_correct_){0u}
    , decltype(_impl_.num_fails_){0u}
    , decltype(_impl_.result_){1}
  };
}

CMsgGCToServerPredictionResult_Prediction::~CMsgGCToServerPredictionResult_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult.Prediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerPredictionResult_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.granted_item_defs_.~RepeatedField();
}

void CMsgGCToServerPredictionResult_Prediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerPredictionResult_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPredictionResult.Prediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.granted_item_defs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_fails_) -
        reinterpret_cast<char*>(&_impl_.item_def_)) + sizeof(_impl_.num_fails_));
    _impl_.result_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPredictionResult_Prediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          _impl_.item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_correct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_correct(&has_bits);
          _impl_.num_correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_fails = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_fails(&has_bits);
          _impl_.num_fails_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCToServerPredictionResult_Prediction_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCToServerPredictionResult_Prediction_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 granted_item_defs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_granted_item_defs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_granted_item_defs(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerPredictionResult_Prediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult.Prediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional uint32 num_correct = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_correct(), target);
  }

  // optional uint32 num_fails = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_fails(), target);
  }

  // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // repeated uint32 granted_item_defs = 6;
  for (int i = 0, n = this->_internal_granted_item_defs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_granted_item_defs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult.Prediction)
  return target;
}

size_t CMsgGCToServerPredictionResult_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPredictionResult.Prediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 granted_item_defs = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.granted_item_defs_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_granted_item_defs_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_def());
    }

    // optional uint32 num_correct = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_correct());
    }

    // optional uint32 num_fails = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_fails());
    }

    // optional .CMsgGCToServerPredictionResult.Prediction.EResult result = 4 [default = k_eResult_ItemGranted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerPredictionResult_Prediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerPredictionResult_Prediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerPredictionResult_Prediction::GetClassData() const { return &_class_data_; }


void CMsgGCToServerPredictionResult_Prediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerPredictionResult_Prediction*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerPredictionResult_Prediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPredictionResult.Prediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.granted_item_defs_.MergeFrom(from._impl_.granted_item_defs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_def_ = from._impl_.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_correct_ = from._impl_.num_correct_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_fails_ = from._impl_.num_fails_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerPredictionResult_Prediction::CopyFrom(const CMsgGCToServerPredictionResult_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPredictionResult.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult_Prediction::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult_Prediction::InternalSwap(CMsgGCToServerPredictionResult_Prediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.granted_item_defs_.InternalSwap(&other->_impl_.granted_item_defs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _impl_.num_fails_)
      + sizeof(CMsgGCToServerPredictionResult_Prediction::_impl_.num_fails_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult_Prediction, _impl_.item_def_)>(
          reinterpret_cast<char*>(&_impl_.item_def_),
          reinterpret_cast<char*>(&other->_impl_.item_def_));
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPredictionResult_Prediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[83]);
}

// ===================================================================

class CMsgGCToServerPredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerPredictionResult>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correct(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerPredictionResult)
}
CMsgGCToServerPredictionResult::CMsgGCToServerPredictionResult(const CMsgGCToServerPredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerPredictionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_){from._impl_.predictions_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.correct_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.correct_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.correct_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerPredictionResult)
}

inline void CMsgGCToServerPredictionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.correct_){false}
  };
}

CMsgGCToServerPredictionResult::~CMsgGCToServerPredictionResult() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerPredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerPredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predictions_.~RepeatedPtrField();
}

void CMsgGCToServerPredictionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerPredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerPredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predictions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.correct_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.correct_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerPredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool correct = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_correct(&has_bits);
          _impl_.correct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerPredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerPredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_correct(), target);
  }

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerPredictionResult)
  return target;
}

size_t CMsgGCToServerPredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerPredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerPredictionResult.Prediction predictions = 4;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->_impl_.predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerPredictionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerPredictionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerPredictionResult::GetClassData() const { return &_class_data_; }


void CMsgGCToServerPredictionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerPredictionResult*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerPredictionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerPredictionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.predictions_.MergeFrom(from._impl_.predictions_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.correct_ = from._impl_.correct_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerPredictionResult::CopyFrom(const CMsgGCToServerPredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerPredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerPredictionResult::IsInitialized() const {
  return true;
}

void CMsgGCToServerPredictionResult::InternalSwap(CMsgGCToServerPredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.predictions_.InternalSwap(&other->_impl_.predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult, _impl_.correct_)
      + sizeof(CMsgGCToServerPredictionResult::_impl_.correct_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerPredictionResult, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerPredictionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[84]);
}

// ===================================================================

class CMsgServerToGCLockCharmTrading::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCLockCharmTrading>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCLockCharmTrading)
}
CMsgServerToGCLockCharmTrading::CMsgServerToGCLockCharmTrading(const CMsgServerToGCLockCharmTrading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCLockCharmTrading* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCLockCharmTrading)
}

inline void CMsgServerToGCLockCharmTrading::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_id_){uint64_t{0u}}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerToGCLockCharmTrading::~CMsgServerToGCLockCharmTrading() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCLockCharmTrading)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCLockCharmTrading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCLockCharmTrading::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCLockCharmTrading::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCLockCharmTrading)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.account_id_) -
        reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCLockCharmTrading::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCLockCharmTrading::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCLockCharmTrading)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCLockCharmTrading)
  return target;
}

size_t CMsgServerToGCLockCharmTrading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCLockCharmTrading)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCLockCharmTrading::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCLockCharmTrading::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCLockCharmTrading::GetClassData() const { return &_class_data_; }


void CMsgServerToGCLockCharmTrading::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCLockCharmTrading*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCLockCharmTrading&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCLockCharmTrading)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCLockCharmTrading::CopyFrom(const CMsgServerToGCLockCharmTrading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCLockCharmTrading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCLockCharmTrading::IsInitialized() const {
  return true;
}

void CMsgServerToGCLockCharmTrading::InternalSwap(CMsgServerToGCLockCharmTrading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _impl_.account_id_)
      + sizeof(CMsgServerToGCLockCharmTrading::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCLockCharmTrading, _impl_.item_id_)>(
          reinterpret_cast<char*>(&_impl_.item_id_),
          reinterpret_cast<char*>(&other->_impl_.item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCLockCharmTrading::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[85]);
}

// ===================================================================

class CMsgSignOutUpdatePlayerChallenge_Challenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutUpdatePlayerChallenge_Challenge>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}
CMsgSignOutUpdatePlayerChallenge_Challenge::CMsgSignOutUpdatePlayerChallenge_Challenge(const CMsgSignOutUpdatePlayerChallenge_Challenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutUpdatePlayerChallenge_Challenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.slot_id_){}
    , decltype(_impl_.sequence_id_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.challenge_rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_rank_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.challenge_rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
}

inline void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.slot_id_){0u}
    , decltype(_impl_.sequence_id_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.challenge_rank_){0u}
  };
}

CMsgSignOutUpdatePlayerChallenge_Challenge::~CMsgSignOutUpdatePlayerChallenge_Challenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutUpdatePlayerChallenge_Challenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_rank_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.challenge_rank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          _impl_.slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          _impl_.sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_rank = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_rank(&has_bits);
          _impl_.challenge_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutUpdatePlayerChallenge_Challenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  // optional uint32 progress = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_progress(), target);
  }

  // optional uint32 challenge_rank = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge.Challenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge_Challenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sequence_id());
    }

    // optional uint32 progress = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional uint32 challenge_rank = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_rank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutUpdatePlayerChallenge_Challenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutUpdatePlayerChallenge_Challenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutUpdatePlayerChallenge_Challenge::GetClassData() const { return &_class_data_; }


void CMsgSignOutUpdatePlayerChallenge_Challenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutUpdatePlayerChallenge_Challenge*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutUpdatePlayerChallenge_Challenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_id_ = from._impl_.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sequence_id_ = from._impl_.sequence_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_rank_ = from._impl_.challenge_rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge_Challenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutUpdatePlayerChallenge.Challenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge_Challenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge_Challenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge_Challenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.challenge_rank_)
      + sizeof(CMsgSignOutUpdatePlayerChallenge_Challenge::_impl_.challenge_rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge_Challenge, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutUpdatePlayerChallenge_Challenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[86]);
}

// ===================================================================

class CMsgSignOutUpdatePlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutUpdatePlayerChallenge>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutUpdatePlayerChallenge)
}
CMsgSignOutUpdatePlayerChallenge::CMsgSignOutUpdatePlayerChallenge(const CMsgSignOutUpdatePlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutUpdatePlayerChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_){from._impl_.completed_}
    , decltype(_impl_.rerolled_){from._impl_.rerolled_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutUpdatePlayerChallenge)
}

inline void CMsgSignOutUpdatePlayerChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_){arena}
    , decltype(_impl_.rerolled_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgSignOutUpdatePlayerChallenge::~CMsgSignOutUpdatePlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgSignOutUpdatePlayerChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutUpdatePlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completed_.~RepeatedPtrField();
  _impl_.rerolled_.~RepeatedPtrField();
}

void CMsgSignOutUpdatePlayerChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutUpdatePlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutUpdatePlayerChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completed_.Clear();
  _impl_.rerolled_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.match_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutUpdatePlayerChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rerolled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutUpdatePlayerChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutUpdatePlayerChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_completed_size()); i < n; i++) {
    const auto& repfield = this->_internal_completed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rerolled_size()); i < n; i++) {
    const auto& repfield = this->_internal_rerolled(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutUpdatePlayerChallenge)
  return target;
}

size_t CMsgSignOutUpdatePlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutUpdatePlayerChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge completed = 2;
  total_size += 1UL * this->_internal_completed_size();
  for (const auto& msg : this->_impl_.completed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgSignOutUpdatePlayerChallenge.Challenge rerolled = 3;
  total_size += 1UL * this->_internal_rerolled_size();
  for (const auto& msg : this->_impl_.rerolled_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutUpdatePlayerChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutUpdatePlayerChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutUpdatePlayerChallenge::GetClassData() const { return &_class_data_; }


void CMsgSignOutUpdatePlayerChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutUpdatePlayerChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutUpdatePlayerChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutUpdatePlayerChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.completed_.MergeFrom(from._impl_.completed_);
  _this->_impl_.rerolled_.MergeFrom(from._impl_.rerolled_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutUpdatePlayerChallenge::CopyFrom(const CMsgSignOutUpdatePlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutUpdatePlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutUpdatePlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgSignOutUpdatePlayerChallenge::InternalSwap(CMsgSignOutUpdatePlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.completed_.InternalSwap(&other->_impl_.completed_);
  _impl_.rerolled_.InternalSwap(&other->_impl_.rerolled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _impl_.match_id_)
      + sizeof(CMsgSignOutUpdatePlayerChallenge::_impl_.match_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutUpdatePlayerChallenge, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutUpdatePlayerChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[87]);
}

// ===================================================================

class CMsgServerToGCRerollPlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRerollPlayerChallenge>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientToGCRerollPlayerChallenge& reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg);
  static void set_has_reroll_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgClientToGCRerollPlayerChallenge&
CMsgServerToGCRerollPlayerChallenge::_Internal::reroll_msg(const CMsgServerToGCRerollPlayerChallenge* msg) {
  return *msg->_impl_.reroll_msg_;
}
void CMsgServerToGCRerollPlayerChallenge::clear_reroll_msg() {
  if (_impl_.reroll_msg_ != nullptr) _impl_.reroll_msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRerollPlayerChallenge)
}
CMsgServerToGCRerollPlayerChallenge::CMsgServerToGCRerollPlayerChallenge(const CMsgServerToGCRerollPlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCRerollPlayerChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reroll_msg_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reroll_msg()) {
    _this->_impl_.reroll_msg_ = new ::CMsgClientToGCRerollPlayerChallenge(*from._impl_.reroll_msg_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRerollPlayerChallenge)
}

inline void CMsgServerToGCRerollPlayerChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reroll_msg_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerToGCRerollPlayerChallenge::~CMsgServerToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRerollPlayerChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCRerollPlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.reroll_msg_;
}

void CMsgServerToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRerollPlayerChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reroll_msg_ != nullptr);
    _impl_.reroll_msg_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRerollPlayerChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reroll_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCRerollPlayerChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRerollPlayerChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::reroll_msg(this),
        _Internal::reroll_msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgServerToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRerollPlayerChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgClientToGCRerollPlayerChallenge reroll_msg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.reroll_msg_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCRerollPlayerChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCRerollPlayerChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCRerollPlayerChallenge::GetClassData() const { return &_class_data_; }


void CMsgServerToGCRerollPlayerChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCRerollPlayerChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCRerollPlayerChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_reroll_msg()->::CMsgClientToGCRerollPlayerChallenge::MergeFrom(
          from._internal_reroll_msg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCRerollPlayerChallenge::CopyFrom(const CMsgServerToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCRerollPlayerChallenge::InternalSwap(CMsgServerToGCRerollPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _impl_.account_id_)
      + sizeof(CMsgServerToGCRerollPlayerChallenge::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRerollPlayerChallenge, _impl_.reroll_msg_)>(
          reinterpret_cast<char*>(&_impl_.reroll_msg_),
          reinterpret_cast<char*>(&other->_impl_.reroll_msg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRerollPlayerChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[88]);
}

// ===================================================================

class CMsgSpendWager_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpendWager_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wager_token_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSpendWager_Player::CMsgSpendWager_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpendWager.Player)
}
CMsgSpendWager_Player::CMsgSpendWager_Player(const CMsgSpendWager_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpendWager_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.wager_){}
    , decltype(_impl_.wager_token_item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wager_token_item_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.wager_token_item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpendWager.Player)
}

inline void CMsgSpendWager_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.wager_){0u}
    , decltype(_impl_.wager_token_item_id_){uint64_t{0u}}
  };
}

CMsgSpendWager_Player::~CMsgSpendWager_Player() {
  // @@protoc_insertion_point(destructor:CMsgSpendWager.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpendWager_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSpendWager_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpendWager_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpendWager.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wager_token_item_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.wager_token_item_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpendWager_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_wager(&has_bits);
          _impl_.wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 wager_token_item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wager_token_item_id(&has_bits);
          _impl_.wager_token_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpendWager_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpendWager.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 wager = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wager(), target);
  }

  // optional uint64 wager_token_item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_wager_token_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpendWager.Player)
  return target;
}

size_t CMsgSpendWager_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpendWager.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 wager = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wager());
    }

    // optional uint64 wager_token_item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_wager_token_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpendWager_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpendWager_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpendWager_Player::GetClassData() const { return &_class_data_; }


void CMsgSpendWager_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpendWager_Player*>(&to_msg);
  auto& from = static_cast<const CMsgSpendWager_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpendWager.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.wager_ = from._impl_.wager_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wager_token_item_id_ = from._impl_.wager_token_item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpendWager_Player::CopyFrom(const CMsgSpendWager_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpendWager.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager_Player::IsInitialized() const {
  return true;
}

void CMsgSpendWager_Player::InternalSwap(CMsgSpendWager_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpendWager_Player, _impl_.wager_token_item_id_)
      + sizeof(CMsgSpendWager_Player::_impl_.wager_token_item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpendWager_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpendWager_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[89]);
}

// ===================================================================

class CMsgSpendWager::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpendWager>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSpendWager::CMsgSpendWager(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpendWager)
}
CMsgSpendWager::CMsgSpendWager(const CMsgSpendWager& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpendWager* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.server_steam_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_steam_id_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.server_steam_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpendWager)
}

inline void CMsgSpendWager::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.timestamp_){0u}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
  };
}

CMsgSpendWager::~CMsgSpendWager() {
  // @@protoc_insertion_point(destructor:CMsgSpendWager)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpendWager::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgSpendWager::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpendWager::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpendWager)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_steam_id_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.server_steam_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpendWager::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSpendWager.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 server_steam_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpendWager::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpendWager)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSpendWager.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional uint64 match_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_match_id(), target);
  }

  // optional uint64 server_steam_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_server_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpendWager)
  return target;
}

size_t CMsgSpendWager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpendWager)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSpendWager.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

    // optional uint64 match_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint64 server_steam_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_server_steam_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpendWager::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpendWager::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpendWager::GetClassData() const { return &_class_data_; }


void CMsgSpendWager::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpendWager*>(&to_msg);
  auto& from = static_cast<const CMsgSpendWager&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpendWager)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpendWager::CopyFrom(const CMsgSpendWager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpendWager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpendWager::IsInitialized() const {
  return true;
}

void CMsgSpendWager::InternalSwap(CMsgSpendWager* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpendWager, _impl_.server_steam_id_)
      + sizeof(CMsgSpendWager::_impl_.server_steam_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpendWager, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpendWager::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[90]);
}

// ===================================================================

class CMsgSignOutXPCoins_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutXPCoins_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xp_gained(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coins_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wager_token_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rank_wager(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wager_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutXPCoins.Player)
}
CMsgSignOutXPCoins_Player::CMsgSignOutXPCoins_Player(const CMsgSignOutXPCoins_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutXPCoins_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.xp_gained_){}
    , decltype(_impl_.wager_token_item_id_){}
    , decltype(_impl_.coins_spent_){}
    , decltype(_impl_.rank_wager_){}
    , decltype(_impl_.wager_streak_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.wager_streak_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.wager_streak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutXPCoins.Player)
}

inline void CMsgSignOutXPCoins_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.xp_gained_){0u}
    , decltype(_impl_.wager_token_item_id_){uint64_t{0u}}
    , decltype(_impl_.coins_spent_){0u}
    , decltype(_impl_.rank_wager_){0u}
    , decltype(_impl_.wager_streak_){0u}
  };
}

CMsgSignOutXPCoins_Player::~CMsgSignOutXPCoins_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutXPCoins.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutXPCoins_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutXPCoins_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutXPCoins_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutXPCoins.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wager_streak_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.wager_streak_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutXPCoins_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_gained = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_xp_gained(&has_bits);
          _impl_.xp_gained_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 coins_spent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_coins_spent(&has_bits);
          _impl_.coins_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 wager_token_item_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_wager_token_item_id(&has_bits);
          _impl_.wager_token_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_wager = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_rank_wager(&has_bits);
          _impl_.rank_wager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 wager_streak = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_wager_streak(&has_bits);
          _impl_.wager_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutXPCoins_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutXPCoins.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 xp_gained = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_xp_gained(), target);
  }

  // optional uint32 coins_spent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_coins_spent(), target);
  }

  // optional uint64 wager_token_item_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_wager_token_item_id(), target);
  }

  // optional uint32 rank_wager = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rank_wager(), target);
  }

  // optional uint32 wager_streak = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_wager_streak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutXPCoins.Player)
  return target;
}

size_t CMsgSignOutXPCoins_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutXPCoins.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 xp_gained = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_xp_gained());
    }

    // optional uint64 wager_token_item_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_wager_token_item_id());
    }

    // optional uint32 coins_spent = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coins_spent());
    }

    // optional uint32 rank_wager = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_wager());
    }

    // optional uint32 wager_streak = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_wager_streak());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutXPCoins_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutXPCoins_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutXPCoins_Player::GetClassData() const { return &_class_data_; }


void CMsgSignOutXPCoins_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutXPCoins_Player*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutXPCoins_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutXPCoins.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.xp_gained_ = from._impl_.xp_gained_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.wager_token_item_id_ = from._impl_.wager_token_item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.coins_spent_ = from._impl_.coins_spent_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.rank_wager_ = from._impl_.rank_wager_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.wager_streak_ = from._impl_.wager_streak_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutXPCoins_Player::CopyFrom(const CMsgSignOutXPCoins_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutXPCoins.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins_Player::InternalSwap(CMsgSignOutXPCoins_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins_Player, _impl_.wager_streak_)
      + sizeof(CMsgSignOutXPCoins_Player::_impl_.wager_streak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutXPCoins_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[91]);
}

// ===================================================================

class CMsgSignOutXPCoins::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutXPCoins>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutXPCoins::CMsgSignOutXPCoins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutXPCoins)
}
CMsgSignOutXPCoins::CMsgSignOutXPCoins(const CMsgSignOutXPCoins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutXPCoins* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutXPCoins)
}

inline void CMsgSignOutXPCoins::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.timestamp_){0u}
  };
}

CMsgSignOutXPCoins::~CMsgSignOutXPCoins() {
  // @@protoc_insertion_point(destructor:CMsgSignOutXPCoins)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutXPCoins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgSignOutXPCoins::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutXPCoins::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutXPCoins)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutXPCoins::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutXPCoins.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutXPCoins::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutXPCoins)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutXPCoins.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutXPCoins)
  return target;
}

size_t CMsgSignOutXPCoins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutXPCoins)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutXPCoins.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutXPCoins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutXPCoins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutXPCoins::GetClassData() const { return &_class_data_; }


void CMsgSignOutXPCoins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutXPCoins*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutXPCoins&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutXPCoins)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutXPCoins::CopyFrom(const CMsgSignOutXPCoins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutXPCoins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutXPCoins::IsInitialized() const {
  return true;
}

void CMsgSignOutXPCoins::InternalSwap(CMsgSignOutXPCoins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins, _impl_.timestamp_)
      + sizeof(CMsgSignOutXPCoins::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutXPCoins, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutXPCoins::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[92]);
}

// ===================================================================

class CMsgSignOutBounties_Bounty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBounties_Bounty>()._impl_._has_bits_);
  static void set_has_issuer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_completer_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBounties.Bounty)
}
CMsgSignOutBounties_Bounty::CMsgSignOutBounties_Bounty(const CMsgSignOutBounties_Bounty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutBounties_Bounty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.issuer_account_id_){}
    , decltype(_impl_.completer_account_id_){}
    , decltype(_impl_.target_account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.issuer_account_id_, &from._impl_.issuer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_account_id_) -
    reinterpret_cast<char*>(&_impl_.issuer_account_id_)) + sizeof(_impl_.target_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBounties.Bounty)
}

inline void CMsgSignOutBounties_Bounty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.issuer_account_id_){0u}
    , decltype(_impl_.completer_account_id_){0u}
    , decltype(_impl_.target_account_id_){0u}
  };
}

CMsgSignOutBounties_Bounty::~CMsgSignOutBounties_Bounty() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBounties.Bounty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutBounties_Bounty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutBounties_Bounty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutBounties_Bounty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBounties.Bounty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.issuer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.target_account_id_) -
        reinterpret_cast<char*>(&_impl_.issuer_account_id_)) + sizeof(_impl_.target_account_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBounties_Bounty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 issuer_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_issuer_account_id(&has_bits);
          _impl_.issuer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 completer_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_completer_account_id(&has_bits);
          _impl_.completer_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 target_account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_target_account_id(&has_bits);
          _impl_.target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutBounties_Bounty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBounties.Bounty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 issuer_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_issuer_account_id(), target);
  }

  // optional uint32 completer_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_completer_account_id(), target);
  }

  // optional uint32 target_account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBounties.Bounty)
  return target;
}

size_t CMsgSignOutBounties_Bounty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBounties.Bounty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 issuer_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_issuer_account_id());
    }

    // optional uint32 completer_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_completer_account_id());
    }

    // optional uint32 target_account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_target_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutBounties_Bounty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutBounties_Bounty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutBounties_Bounty::GetClassData() const { return &_class_data_; }


void CMsgSignOutBounties_Bounty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutBounties_Bounty*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutBounties_Bounty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBounties.Bounty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.issuer_account_id_ = from._impl_.issuer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.completer_account_id_ = from._impl_.completer_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.target_account_id_ = from._impl_.target_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutBounties_Bounty::CopyFrom(const CMsgSignOutBounties_Bounty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBounties.Bounty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBounties_Bounty::IsInitialized() const {
  return true;
}

void CMsgSignOutBounties_Bounty::InternalSwap(CMsgSignOutBounties_Bounty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties_Bounty, _impl_.target_account_id_)
      + sizeof(CMsgSignOutBounties_Bounty::_impl_.target_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties_Bounty, _impl_.issuer_account_id_)>(
          reinterpret_cast<char*>(&_impl_.issuer_account_id_),
          reinterpret_cast<char*>(&other->_impl_.issuer_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBounties_Bounty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[93]);
}

// ===================================================================

class CMsgSignOutBounties::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutBounties>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSignOutBounties::CMsgSignOutBounties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutBounties)
}
CMsgSignOutBounties::CMsgSignOutBounties(const CMsgSignOutBounties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutBounties* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bounties_){from._impl_.bounties_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutBounties)
}

inline void CMsgSignOutBounties::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bounties_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.event_id_){0}
    , decltype(_impl_.timestamp_){0u}
  };
}

CMsgSignOutBounties::~CMsgSignOutBounties() {
  // @@protoc_insertion_point(destructor:CMsgSignOutBounties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutBounties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bounties_.~RepeatedPtrField();
}

void CMsgSignOutBounties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutBounties::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutBounties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bounties_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.timestamp_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutBounties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutBounties.Bounty bounties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bounties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutBounties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutBounties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutBounties.Bounty bounties = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bounties_size()); i < n; i++) {
    const auto& repfield = this->_internal_bounties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_match_id(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutBounties)
  return target;
}

size_t CMsgSignOutBounties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutBounties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutBounties.Bounty bounties = 1;
  total_size += 1UL * this->_internal_bounties_size();
  for (const auto& msg : this->_impl_.bounties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timestamp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutBounties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutBounties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutBounties::GetClassData() const { return &_class_data_; }


void CMsgSignOutBounties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutBounties*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutBounties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutBounties)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bounties_.MergeFrom(from._impl_.bounties_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutBounties::CopyFrom(const CMsgSignOutBounties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutBounties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutBounties::IsInitialized() const {
  return true;
}

void CMsgSignOutBounties::InternalSwap(CMsgSignOutBounties* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bounties_.InternalSwap(&other->_impl_.bounties_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties, _impl_.timestamp_)
      + sizeof(CMsgSignOutBounties::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutBounties, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutBounties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[94]);
}

// ===================================================================

class CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunityGoalProgress_EventGoalIncrement>()._impl_._has_bits_);
  static void set_has_event_goal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_increment_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}
CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CMsgSignOutCommunityGoalProgress_EventGoalIncrement(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutCommunityGoalProgress_EventGoalIncrement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_goal_id_){}
    , decltype(_impl_.increment_amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_goal_id_, &from._impl_.event_goal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.increment_amount_) -
    reinterpret_cast<char*>(&_impl_.event_goal_id_)) + sizeof(_impl_.increment_amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
}

inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_goal_id_){0u}
    , decltype(_impl_.increment_amount_){0u}
  };
}

CMsgSignOutCommunityGoalProgress_EventGoalIncrement::~CMsgSignOutCommunityGoalProgress_EventGoalIncrement() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.event_goal_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.increment_amount_) -
        reinterpret_cast<char*>(&_impl_.event_goal_id_)) + sizeof(_impl_.increment_amount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_goal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_goal_id(&has_bits);
          _impl_.event_goal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 increment_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_increment_amount(&has_bits);
          _impl_.increment_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_goal_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_goal_id(), target);
  }

  // optional uint32 increment_amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_increment_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress_EventGoalIncrement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 event_goal_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_goal_id());
    }

    // optional uint32 increment_amount = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_increment_amount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutCommunityGoalProgress_EventGoalIncrement::GetClassData() const { return &_class_data_; }


void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutCommunityGoalProgress_EventGoalIncrement*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutCommunityGoalProgress_EventGoalIncrement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_goal_id_ = from._impl_.event_goal_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.increment_amount_ = from._impl_.increment_amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::CopyFrom(const CMsgSignOutCommunityGoalProgress_EventGoalIncrement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunityGoalProgress.EventGoalIncrement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress_EventGoalIncrement::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress_EventGoalIncrement::InternalSwap(CMsgSignOutCommunityGoalProgress_EventGoalIncrement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _impl_.increment_amount_)
      + sizeof(CMsgSignOutCommunityGoalProgress_EventGoalIncrement::_impl_.increment_amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutCommunityGoalProgress_EventGoalIncrement, _impl_.event_goal_id_)>(
          reinterpret_cast<char*>(&_impl_.event_goal_id_),
          reinterpret_cast<char*>(&other->_impl_.event_goal_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunityGoalProgress_EventGoalIncrement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[95]);
}

// ===================================================================

class CMsgSignOutCommunityGoalProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutCommunityGoalProgress>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutCommunityGoalProgress)
}
CMsgSignOutCommunityGoalProgress::CMsgSignOutCommunityGoalProgress(const CMsgSignOutCommunityGoalProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutCommunityGoalProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_increments_){from._impl_.event_increments_}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutCommunityGoalProgress)
}

inline void CMsgSignOutCommunityGoalProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_increments_){arena}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgSignOutCommunityGoalProgress::~CMsgSignOutCommunityGoalProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutCommunityGoalProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutCommunityGoalProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_increments_.~RepeatedPtrField();
}

void CMsgSignOutCommunityGoalProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutCommunityGoalProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutCommunityGoalProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_increments_.Clear();
  _impl_.event_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutCommunityGoalProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_increments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutCommunityGoalProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutCommunityGoalProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_event_increments_size()); i < n; i++) {
    const auto& repfield = this->_internal_event_increments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutCommunityGoalProgress)
  return target;
}

size_t CMsgSignOutCommunityGoalProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutCommunityGoalProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutCommunityGoalProgress.EventGoalIncrement event_increments = 2;
  total_size += 1UL * this->_internal_event_increments_size();
  for (const auto& msg : this->_impl_.event_increments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutCommunityGoalProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutCommunityGoalProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutCommunityGoalProgress::GetClassData() const { return &_class_data_; }


void CMsgSignOutCommunityGoalProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutCommunityGoalProgress*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutCommunityGoalProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutCommunityGoalProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_increments_.MergeFrom(from._impl_.event_increments_);
  if (from._internal_has_event_id()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutCommunityGoalProgress::CopyFrom(const CMsgSignOutCommunityGoalProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutCommunityGoalProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutCommunityGoalProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutCommunityGoalProgress::InternalSwap(CMsgSignOutCommunityGoalProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.event_increments_.InternalSwap(&other->_impl_.event_increments_);
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutCommunityGoalProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[96]);
}

// ===================================================================

class CMsgServerToGCCloseCompendiumInGamePredictionVoting::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCloseCompendiumInGamePredictionVoting>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hltv_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}
CMsgServerToGCCloseCompendiumInGamePredictionVoting::CMsgServerToGCCloseCompendiumInGamePredictionVoting(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCloseCompendiumInGamePredictionVoting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.hltv_delay_){}
    , decltype(_impl_.league_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
}

inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.hltv_delay_){0u}
    , decltype(_impl_.league_id_){0u}
  };
}

CMsgServerToGCCloseCompendiumInGamePredictionVoting::~CMsgServerToGCCloseCompendiumInGamePredictionVoting() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCloseCompendiumInGamePredictionVoting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hltv_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hltv_delay(&has_bits);
          _impl_.hltv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCloseCompendiumInGamePredictionVoting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 hltv_delay = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hltv_delay(), target);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVoting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 hltv_delay = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hltv_delay());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCloseCompendiumInGamePredictionVoting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCloseCompendiumInGamePredictionVoting::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCloseCompendiumInGamePredictionVoting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCloseCompendiumInGamePredictionVoting*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCloseCompendiumInGamePredictionVoting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hltv_delay_ = from._impl_.hltv_delay_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVoting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVoting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVoting::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVoting::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVoting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_.league_id_)
      + sizeof(CMsgServerToGCCloseCompendiumInGamePredictionVoting::_impl_.league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCloseCompendiumInGamePredictionVoting, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVoting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[97]);
}

// ===================================================================

class CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}
CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
}

inline void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){false}
  };
}

CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::~CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  return target;
}

size_t CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool result = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::CopyFrom(const CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::InternalSwap(CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[98]);
}

// ===================================================================

class CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult>()._impl_._has_bits_);
  static void set_has_prediction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prediction_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prediction_value_is_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}
CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_id_){}
    , decltype(_impl_.prediction_value_){}
    , decltype(_impl_.prediction_value_is_mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.prediction_id_, &from._impl_.prediction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prediction_value_is_mask_) -
    reinterpret_cast<char*>(&_impl_.prediction_id_)) + sizeof(_impl_.prediction_value_is_mask_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
}

inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_id_){0u}
    , decltype(_impl_.prediction_value_){0u}
    , decltype(_impl_.prediction_value_is_mask_){false}
  };
}

CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::~CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.prediction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.prediction_value_is_mask_) -
        reinterpret_cast<char*>(&_impl_.prediction_id_)) + sizeof(_impl_.prediction_value_is_mask_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 prediction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_prediction_id(&has_bits);
          _impl_.prediction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prediction_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_prediction_value(&has_bits);
          _impl_.prediction_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prediction_value_is_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_prediction_value_is_mask(&has_bits);
          _impl_.prediction_value_is_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prediction_id(), target);
  }

  // optional uint32 prediction_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_prediction_value(), target);
  }

  // optional bool prediction_value_is_mask = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_prediction_value_is_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 prediction_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prediction_id());
    }

    // optional uint32 prediction_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prediction_value());
    }

    // optional bool prediction_value_is_mask = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.prediction_id_ = from._impl_.prediction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.prediction_value_ = from._impl_.prediction_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prediction_value_is_mask_ = from._impl_.prediction_value_is_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_.prediction_value_is_mask_)
      + sizeof(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::_impl_.prediction_value_is_mask_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult, _impl_.prediction_id_)>(
          reinterpret_cast<char*>(&_impl_.prediction_id_),
          reinterpret_cast<char*>(&other->_impl_.prediction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[99]);
}

// ===================================================================

class CMsgServerToGCCompendiumInGamePredictionResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumInGamePredictionResults>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumInGamePredictionResults)
}
CMsgServerToGCCompendiumInGamePredictionResults::CMsgServerToGCCompendiumInGamePredictionResults(const CMsgServerToGCCompendiumInGamePredictionResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCompendiumInGamePredictionResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.league_node_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_node_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_node_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumInGamePredictionResults)
}

inline void CMsgServerToGCCompendiumInGamePredictionResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.league_node_id_){0u}
  };
}

CMsgServerToGCCompendiumInGamePredictionResults::~CMsgServerToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumInGamePredictionResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCompendiumInGamePredictionResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
}

void CMsgServerToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumInGamePredictionResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_node_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_node_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumInGamePredictionResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_league_node_id(&has_bits);
          _impl_.league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCompendiumInGamePredictionResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumInGamePredictionResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  // optional uint32 league_node_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_league_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgServerToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCompendiumInGamePredictionResults.PredictionResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

    // optional uint32 league_node_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_node_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCompendiumInGamePredictionResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCompendiumInGamePredictionResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCompendiumInGamePredictionResults::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCompendiumInGamePredictionResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCompendiumInGamePredictionResults*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCompendiumInGamePredictionResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.league_node_id_ = from._impl_.league_node_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgServerToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumInGamePredictionResults::InternalSwap(CMsgServerToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, _impl_.league_node_id_)
      + sizeof(CMsgServerToGCCompendiumInGamePredictionResults::_impl_.league_node_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumInGamePredictionResults, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumInGamePredictionResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[100]);
}

// ===================================================================

class CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumChosenInGamePredictions_Prediction>()._impl_._has_bits_);
  static void set_has_prediction_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
}
CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.prediction_id_ = from._impl_.prediction_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
}

inline void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prediction_id_){0u}
  };
}

CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::~CMsgServerToGCCompendiumChosenInGamePredictions_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.prediction_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 prediction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_prediction_id(&has_bits);
          _impl_.prediction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 prediction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_prediction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  return target;
}

size_t CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 prediction_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_prediction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCompendiumChosenInGamePredictions_Prediction*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_prediction_id()) {
    _this->_internal_set_prediction_id(from._internal_prediction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions_Prediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.prediction_id_, other->_impl_.prediction_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumChosenInGamePredictions_Prediction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[101]);
}

// ===================================================================

class CMsgServerToGCCompendiumChosenInGamePredictions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCompendiumChosenInGamePredictions>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCompendiumChosenInGamePredictions)
}
CMsgServerToGCCompendiumChosenInGamePredictions::CMsgServerToGCCompendiumChosenInGamePredictions(const CMsgServerToGCCompendiumChosenInGamePredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCompendiumChosenInGamePredictions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_chosen_){from._impl_.predictions_chosen_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.league_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.league_id_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCompendiumChosenInGamePredictions)
}

inline void CMsgServerToGCCompendiumChosenInGamePredictions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.predictions_chosen_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.league_id_){0u}
  };
}

CMsgServerToGCCompendiumChosenInGamePredictions::~CMsgServerToGCCompendiumChosenInGamePredictions() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCompendiumChosenInGamePredictions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCompendiumChosenInGamePredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.predictions_chosen_.~RepeatedPtrField();
}

void CMsgServerToGCCompendiumChosenInGamePredictions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCompendiumChosenInGamePredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.predictions_chosen_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCompendiumChosenInGamePredictions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions_chosen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCompendiumChosenInGamePredictions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predictions_chosen_size()); i < n; i++) {
    const auto& repfield = this->_internal_predictions_chosen(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 league_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCompendiumChosenInGamePredictions)
  return target;
}

size_t CMsgServerToGCCompendiumChosenInGamePredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCompendiumChosenInGamePredictions.Prediction predictions_chosen = 2;
  total_size += 1UL * this->_internal_predictions_chosen_size();
  for (const auto& msg : this->_impl_.predictions_chosen_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 league_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCompendiumChosenInGamePredictions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCompendiumChosenInGamePredictions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCompendiumChosenInGamePredictions::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCompendiumChosenInGamePredictions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCompendiumChosenInGamePredictions*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCompendiumChosenInGamePredictions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.predictions_chosen_.MergeFrom(from._impl_.predictions_chosen_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCompendiumChosenInGamePredictions::CopyFrom(const CMsgServerToGCCompendiumChosenInGamePredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCompendiumChosenInGamePredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCompendiumChosenInGamePredictions::IsInitialized() const {
  return true;
}

void CMsgServerToGCCompendiumChosenInGamePredictions::InternalSwap(CMsgServerToGCCompendiumChosenInGamePredictions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.predictions_chosen_.InternalSwap(&other->_impl_.predictions_chosen_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumChosenInGamePredictions, _impl_.league_id_)
      + sizeof(CMsgServerToGCCompendiumChosenInGamePredictions::_impl_.league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCompendiumChosenInGamePredictions, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCompendiumChosenInGamePredictions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[102]);
}

// ===================================================================

class CMsgGCToGCCompendiumInGamePredictionResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCCompendiumInGamePredictionResults>()._impl_._has_bits_);
  static const ::CMsgServerToGCCompendiumInGamePredictionResults& results(const CMsgGCToGCCompendiumInGamePredictionResults* msg);
  static void set_has_results(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgServerToGCCompendiumInGamePredictionResults&
CMsgGCToGCCompendiumInGamePredictionResults::_Internal::results(const CMsgGCToGCCompendiumInGamePredictionResults* msg) {
  return *msg->_impl_.results_;
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCCompendiumInGamePredictionResults)
}
CMsgGCToGCCompendiumInGamePredictionResults::CMsgGCToGCCompendiumInGamePredictionResults(const CMsgGCToGCCompendiumInGamePredictionResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToGCCompendiumInGamePredictionResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_results()) {
    _this->_impl_.results_ = new ::CMsgServerToGCCompendiumInGamePredictionResults(*from._impl_.results_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCCompendiumInGamePredictionResults)
}

inline void CMsgGCToGCCompendiumInGamePredictionResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.results_){nullptr}
  };
}

CMsgGCToGCCompendiumInGamePredictionResults::~CMsgGCToGCCompendiumInGamePredictionResults() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCCompendiumInGamePredictionResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToGCCompendiumInGamePredictionResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.results_;
}

void CMsgGCToGCCompendiumInGamePredictionResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToGCCompendiumInGamePredictionResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCCompendiumInGamePredictionResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.results_ != nullptr);
    _impl_.results_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCCompendiumInGamePredictionResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_results(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToGCCompendiumInGamePredictionResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCCompendiumInGamePredictionResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::results(this),
        _Internal::results(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCCompendiumInGamePredictionResults)
  return target;
}

size_t CMsgGCToGCCompendiumInGamePredictionResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCCompendiumInGamePredictionResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgServerToGCCompendiumInGamePredictionResults results = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.results_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToGCCompendiumInGamePredictionResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToGCCompendiumInGamePredictionResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToGCCompendiumInGamePredictionResults::GetClassData() const { return &_class_data_; }


void CMsgGCToGCCompendiumInGamePredictionResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToGCCompendiumInGamePredictionResults*>(&to_msg);
  auto& from = static_cast<const CMsgGCToGCCompendiumInGamePredictionResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_results()) {
    _this->_internal_mutable_results()->::CMsgServerToGCCompendiumInGamePredictionResults::MergeFrom(
        from._internal_results());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToGCCompendiumInGamePredictionResults::CopyFrom(const CMsgGCToGCCompendiumInGamePredictionResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCCompendiumInGamePredictionResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCCompendiumInGamePredictionResults::IsInitialized() const {
  return true;
}

void CMsgGCToGCCompendiumInGamePredictionResults::InternalSwap(CMsgGCToGCCompendiumInGamePredictionResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.results_, other->_impl_.results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCCompendiumInGamePredictionResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[103]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase>()._impl_._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){from._impl_.inventory_items_}
    , decltype(_impl_.talents_skilled_){from._impl_.talents_skilled_}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.item_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.item_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){arena}
    , decltype(_impl_.talents_skilled_){arena}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.game_time_){0u}
    , decltype(_impl_.item_){-1}
  };
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::~CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inventory_items_.~RepeatedField();
  _impl_.talents_skilled_.~RepeatedField();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inventory_items_.Clear();
  _impl_.talents_skilled_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_time_) -
        reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.game_time_));
    _impl_.item_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          _impl_.item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 inventory_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inventory_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_inventory_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool talents_skilled = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_talents_skilled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_talents_skilled(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item(), target);
  }

  // optional uint32 gold = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gold(), target);
  }

  // optional uint32 net_worth = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_net_worth(), target);
  }

  // optional uint32 game_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_time(), target);
  }

  // repeated int32 inventory_items = 5;
  for (int i = 0, n = this->_internal_inventory_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_inventory_items(i), target);
  }

  // repeated bool talents_skilled = 7;
  for (int i = 0, n = this->_internal_talents_skilled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_talents_skilled(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 inventory_items = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.inventory_items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inventory_items_size());
    total_size += data_size;
  }

  // repeated bool talents_skilled = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_talents_skilled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_talents_skilled_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 gold = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional uint32 net_worth = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 game_time = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time());
    }

    // optional int32 item = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inventory_items_.MergeFrom(from._impl_.inventory_items_);
  _this->_impl_.talents_skilled_.MergeFrom(from._impl_.talents_skilled_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_ = from._impl_.item_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inventory_items_.InternalSwap(&other->_impl_.inventory_items_);
  _impl_.talents_skilled_.InternalSwap(&other->_impl_.talents_skilled_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.game_time_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::_impl_.game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[104]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player>()._impl_._has_bits_);
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.item_purchases_){from._impl_.item_purchases_}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.is_winner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_slot_, &from._impl_.player_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_winner_) -
    reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.is_winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.item_purchases_){arena}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.is_winner_){false}
  };
}

CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::~CMsgServerToGCMatchPlayerItemPurchaseHistory_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.item_purchases_.~RepeatedPtrField();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  _impl_.item_purchases_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.player_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_winner_) -
        reinterpret_cast<char*>(&_impl_.player_slot_)) + sizeof(_impl_.is_winner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 player_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_purchases(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_winner = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_winner(&has_bits);
          _impl_.is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 player_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_slot(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4;
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5;
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_purchases_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_purchases(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 lane = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lane(), target);
  }

  // optional bool is_winner = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.ItemPurchase item_purchases = 6;
  total_size += 1UL * this->_internal_item_purchases_size();
  for (const auto& msg : this->_impl_.item_purchases_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 player_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 lane = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

    // optional bool is_winner = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.item_purchases_.MergeFrom(from._impl_.item_purchases_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_winner_ = from._impl_.is_winner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.item_purchases_.InternalSwap(&other->_impl_.item_purchases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.is_winner_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::_impl_.is_winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory_Player, _impl_.player_slot_)>(
          reinterpret_cast<char*>(&_impl_.player_slot_),
          reinterpret_cast<char*>(&other->_impl_.player_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[105]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerItemPurchaseHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerItemPurchaseHistory>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
}
CMsgServerToGCMatchPlayerItemPurchaseHistory::CMsgServerToGCMatchPlayerItemPurchaseHistory(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerItemPurchaseHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.mmr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mmr_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.mmr_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.mmr_){0u}
  };
}

CMsgServerToGCMatchPlayerItemPurchaseHistory::~CMsgServerToGCMatchPlayerItemPurchaseHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerItemPurchaseHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mmr_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.mmr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerItemPurchaseHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerItemPurchaseHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerItemPurchaseHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchPlayerItemPurchaseHistory.Player players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerItemPurchaseHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerItemPurchaseHistory::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerItemPurchaseHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerItemPurchaseHistory*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerItemPurchaseHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::CopyFrom(const CMsgServerToGCMatchPlayerItemPurchaseHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerItemPurchaseHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerItemPurchaseHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerItemPurchaseHistory::InternalSwap(CMsgServerToGCMatchPlayerItemPurchaseHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_.mmr_)
      + sizeof(CMsgServerToGCMatchPlayerItemPurchaseHistory::_impl_.mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerItemPurchaseHistory, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerItemPurchaseHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[106]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip>()._impl_._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){from._impl_.inventory_items_}
    , decltype(_impl_.talents_skilled_){from._impl_.talents_skilled_}
    , decltype(_impl_.available_neutral_items_){from._impl_.available_neutral_items_}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.item_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_, &from._impl_.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_) -
    reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.item_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){arena}
    , decltype(_impl_.talents_skilled_){arena}
    , decltype(_impl_.available_neutral_items_){arena}
    , decltype(_impl_.game_time_){0u}
    , decltype(_impl_.item_){-1}
  };
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inventory_items_.~RepeatedField();
  _impl_.talents_skilled_.~RepeatedField();
  _impl_.available_neutral_items_.~RepeatedField();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inventory_items_.Clear();
  _impl_.talents_skilled_.Clear();
  _impl_.available_neutral_items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.game_time_ = 0u;
    _impl_.item_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          _impl_.item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 inventory_items = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inventory_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_inventory_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool talents_skilled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_talents_skilled(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_talents_skilled(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 available_neutral_items = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_available_neutral_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_available_neutral_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item = 1 [default = -1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item(), target);
  }

  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_time(), target);
  }

  // repeated int32 inventory_items = 3;
  for (int i = 0, n = this->_internal_inventory_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_inventory_items(i), target);
  }

  // repeated bool talents_skilled = 4;
  for (int i = 0, n = this->_internal_talents_skilled_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_talents_skilled(i), target);
  }

  // repeated int32 available_neutral_items = 5;
  for (int i = 0, n = this->_internal_available_neutral_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_available_neutral_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 inventory_items = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.inventory_items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inventory_items_size());
    total_size += data_size;
  }

  // repeated bool talents_skilled = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_talents_skilled_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_talents_skilled_size());
    total_size += data_size;
  }

  // repeated int32 available_neutral_items = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.available_neutral_items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_available_neutral_items_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time());
    }

    // optional int32 item = 1 [default = -1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inventory_items_.MergeFrom(from._impl_.inventory_items_);
  _this->_impl_.talents_skilled_.MergeFrom(from._impl_.talents_skilled_);
  _this->_impl_.available_neutral_items_.MergeFrom(from._impl_.available_neutral_items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.item_ = from._impl_.item_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inventory_items_.InternalSwap(&other->_impl_.inventory_items_);
  _impl_.talents_skilled_.InternalSwap(&other->_impl_.talents_skilled_);
  _impl_.available_neutral_items_.InternalSwap(&other->_impl_.available_neutral_items_);
  swap(_impl_.game_time_, other->_impl_.game_time_);
  swap(_impl_.item_, other->_impl_.item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[107]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.item_equips_){from._impl_.item_equips_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.is_winner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_winner_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.item_equips_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.is_winner_){false}
  };
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.item_equips_.~RepeatedPtrField();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  _impl_.item_equips_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_winner_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.is_winner_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_equips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool is_winner = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_winner(&has_bits);
          _impl_.is_winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 allied_hero_ids = 2;
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 3;
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_equips_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_equips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool is_winner = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.ItemEquip item_equips = 4;
  total_size += 1UL * this->_internal_item_equips_size();
  for (const auto& msg : this->_impl_.item_equips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional bool is_winner = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.item_equips_.MergeFrom(from._impl_.item_equips_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_winner_ = from._impl_.is_winner_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.item_equips_.InternalSwap(&other->_impl_.item_equips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.is_winner_)
      + sizeof(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::_impl_.is_winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[108]);
}

// ===================================================================

class CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchPlayerNeutralItemEquipHistory>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
}
CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CMsgServerToGCMatchPlayerNeutralItemEquipHistory(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchPlayerNeutralItemEquipHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.match_id_ = from._impl_.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
  };
}

CMsgServerToGCMatchPlayerNeutralItemEquipHistory::~CMsgServerToGCMatchPlayerNeutralItemEquipHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.match_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  return target;
}

size_t CMsgServerToGCMatchPlayerNeutralItemEquipHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchPlayerNeutralItemEquipHistory.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchPlayerNeutralItemEquipHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchPlayerNeutralItemEquipHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchPlayerNeutralItemEquipHistory::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchPlayerNeutralItemEquipHistory*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchPlayerNeutralItemEquipHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_match_id()) {
    _this->_internal_set_match_id(from._internal_match_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::CopyFrom(const CMsgServerToGCMatchPlayerNeutralItemEquipHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchPlayerNeutralItemEquipHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchPlayerNeutralItemEquipHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchPlayerNeutralItemEquipHistory::InternalSwap(CMsgServerToGCMatchPlayerNeutralItemEquipHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.match_id_, other->_impl_.match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchPlayerNeutralItemEquipHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[109]);
}

// ===================================================================

class CMsgServerToGCMatchStateHistory_PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_PlayerState>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_aegis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_rapier(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.PlayerState)
}
CMsgServerToGCMatchStateHistory_PlayerState::CMsgServerToGCMatchStateHistory_PlayerState(const CMsgServerToGCMatchStateHistory_PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchStateHistory_PlayerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.respawn_time_){}
    , decltype(_impl_.has_buyback_){}
    , decltype(_impl_.has_aegis_){}
    , decltype(_impl_.has_rapier_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.PlayerState)
}

inline void CMsgServerToGCMatchStateHistory_PlayerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.respawn_time_){0u}
    , decltype(_impl_.has_buyback_){false}
    , decltype(_impl_.has_aegis_){false}
    , decltype(_impl_.has_rapier_){false}
    , decltype(_impl_.distance_){0u}
  };
}

CMsgServerToGCMatchStateHistory_PlayerState::~CMsgServerToGCMatchStateHistory_PlayerState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.PlayerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchStateHistory_PlayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCMatchStateHistory_PlayerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.PlayerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_rapier_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.has_rapier_));
  }
  _impl_.distance_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_PlayerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 respawn_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_respawn_time(&has_bits);
          _impl_.respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_buyback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_buyback(&has_bits);
          _impl_.has_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_aegis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_aegis(&has_bits);
          _impl_.has_aegis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_rapier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_rapier(&has_bits);
          _impl_.has_rapier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchStateHistory_PlayerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.PlayerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_net_worth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 respawn_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_respawn_time(), target);
  }

  // optional bool has_buyback = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_buyback(), target);
  }

  // optional bool has_aegis = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_aegis(), target);
  }

  // optional bool has_rapier = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_rapier(), target);
  }

  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.PlayerState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.PlayerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 net_worth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 respawn_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_respawn_time());
    }

    // optional bool has_buyback = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_aegis = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_rapier = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchStateHistory_PlayerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchStateHistory_PlayerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchStateHistory_PlayerState::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchStateHistory_PlayerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchStateHistory_PlayerState*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchStateHistory_PlayerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.respawn_time_ = from._impl_.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_buyback_ = from._impl_.has_buyback_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.has_aegis_ = from._impl_.has_aegis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.has_rapier_ = from._impl_.has_rapier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchStateHistory_PlayerState::CopyFrom(const CMsgServerToGCMatchStateHistory_PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_PlayerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_PlayerState::InternalSwap(CMsgServerToGCMatchStateHistory_PlayerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_PlayerState, _impl_.distance_)
      + sizeof(CMsgServerToGCMatchStateHistory_PlayerState::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_PlayerState, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_PlayerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[110]);
}

// ===================================================================

class CMsgServerToGCMatchStateHistory_TeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_TeamState>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ancient_health_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_glyph_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creep_distance_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_distance_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_distance_off(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.TeamState)
}
CMsgServerToGCMatchStateHistory_TeamState::CMsgServerToGCMatchStateHistory_TeamState(const CMsgServerToGCMatchStateHistory_TeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchStateHistory_TeamState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_states_){from._impl_.player_states_}
    , decltype(_impl_.tower_health_pct_){from._impl_.tower_health_pct_}
    , decltype(_impl_.barracks_health_pct_){from._impl_.barracks_health_pct_}
    , decltype(_impl_.team_){}
    , decltype(_impl_.ancient_health_pct_){}
    , decltype(_impl_.glyph_cooldown_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.creep_distance_safe_){}
    , decltype(_impl_.creep_distance_mid_){}
    , decltype(_impl_.creep_distance_off_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creep_distance_off_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.creep_distance_off_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.TeamState)
}

inline void CMsgServerToGCMatchStateHistory_TeamState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_states_){arena}
    , decltype(_impl_.tower_health_pct_){arena}
    , decltype(_impl_.barracks_health_pct_){arena}
    , decltype(_impl_.team_){0u}
    , decltype(_impl_.ancient_health_pct_){0u}
    , decltype(_impl_.glyph_cooldown_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.creep_distance_safe_){0u}
    , decltype(_impl_.creep_distance_mid_){0u}
    , decltype(_impl_.creep_distance_off_){0u}
  };
}

CMsgServerToGCMatchStateHistory_TeamState::~CMsgServerToGCMatchStateHistory_TeamState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.TeamState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchStateHistory_TeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_states_.~RepeatedPtrField();
  _impl_.tower_health_pct_.~RepeatedField();
  _impl_.barracks_health_pct_.~RepeatedField();
}

void CMsgServerToGCMatchStateHistory_TeamState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.TeamState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_states_.Clear();
  _impl_.tower_health_pct_.Clear();
  _impl_.barracks_health_pct_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.creep_distance_off_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.creep_distance_off_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_TeamState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ancient_health_pct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ancient_health_pct(&has_bits);
          _impl_.ancient_health_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 glyph_cooldown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_glyph_cooldown(&has_bits);
          _impl_.glyph_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_safe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_creep_distance_safe(&has_bits);
          _impl_.creep_distance_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_mid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_creep_distance_mid(&has_bits);
          _impl_.creep_distance_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_creep_distance_off(&has_bits);
          _impl_.creep_distance_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchStateHistory_TeamState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.TeamState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
  for (int i = 0, n = this->_internal_tower_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_health_pct(i), target);
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
  for (int i = 0, n = this->_internal_barracks_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_barracks_health_pct(i), target);
  }

  // optional uint32 ancient_health_pct = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ancient_health_pct(), target);
  }

  // optional uint32 glyph_cooldown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_glyph_cooldown(), target);
  }

  // optional uint32 kills = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_kills(), target);
  }

  // optional uint32 creep_distance_safe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_creep_distance_safe(), target);
  }

  // optional uint32 creep_distance_mid = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_creep_distance_mid(), target);
  }

  // optional uint32 creep_distance_off = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_creep_distance_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.TeamState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.TeamState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchStateHistory.PlayerState player_states = 2 [(.steamml_max_entries) = 5];
  total_size += 1UL * this->_internal_player_states_size();
  for (const auto& msg : this->_impl_.player_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamml_max_entries) = 11];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tower_health_pct_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tower_health_pct_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamml_max_entries) = 3];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.barracks_health_pct_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_barracks_health_pct_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

    // optional uint32 ancient_health_pct = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ancient_health_pct());
    }

    // optional uint32 glyph_cooldown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_glyph_cooldown());
    }

    // optional uint32 kills = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 creep_distance_safe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_safe());
    }

    // optional uint32 creep_distance_mid = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_mid());
    }

    // optional uint32 creep_distance_off = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_off());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchStateHistory_TeamState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchStateHistory_TeamState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchStateHistory_TeamState::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchStateHistory_TeamState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchStateHistory_TeamState*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchStateHistory_TeamState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_states_.MergeFrom(from._impl_.player_states_);
  _this->_impl_.tower_health_pct_.MergeFrom(from._impl_.tower_health_pct_);
  _this->_impl_.barracks_health_pct_.MergeFrom(from._impl_.barracks_health_pct_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ancient_health_pct_ = from._impl_.ancient_health_pct_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.glyph_cooldown_ = from._impl_.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.creep_distance_safe_ = from._impl_.creep_distance_safe_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.creep_distance_mid_ = from._impl_.creep_distance_mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.creep_distance_off_ = from._impl_.creep_distance_off_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchStateHistory_TeamState::CopyFrom(const CMsgServerToGCMatchStateHistory_TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_TeamState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_TeamState::InternalSwap(CMsgServerToGCMatchStateHistory_TeamState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_states_.InternalSwap(&other->_impl_.player_states_);
  _impl_.tower_health_pct_.InternalSwap(&other->_impl_.tower_health_pct_);
  _impl_.barracks_health_pct_.InternalSwap(&other->_impl_.barracks_health_pct_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_TeamState, _impl_.creep_distance_off_)
      + sizeof(CMsgServerToGCMatchStateHistory_TeamState::_impl_.creep_distance_off_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_TeamState, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_TeamState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[111]);
}

// ===================================================================

class CMsgServerToGCMatchStateHistory_MatchState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory_MatchState>()._impl_._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgServerToGCMatchStateHistory_TeamState& radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_radiant_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgServerToGCMatchStateHistory_TeamState& dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg);
  static void set_has_dire_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::_Internal::radiant_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->_impl_.radiant_state_;
}
const ::CMsgServerToGCMatchStateHistory_TeamState&
CMsgServerToGCMatchStateHistory_MatchState::_Internal::dire_state(const CMsgServerToGCMatchStateHistory_MatchState* msg) {
  return *msg->_impl_.dire_state_;
}
CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory.MatchState)
}
CMsgServerToGCMatchStateHistory_MatchState::CMsgServerToGCMatchStateHistory_MatchState(const CMsgServerToGCMatchStateHistory_MatchState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchStateHistory_MatchState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_state_){nullptr}
    , decltype(_impl_.dire_state_){nullptr}
    , decltype(_impl_.game_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_radiant_state()) {
    _this->_impl_.radiant_state_ = new ::CMsgServerToGCMatchStateHistory_TeamState(*from._impl_.radiant_state_);
  }
  if (from._internal_has_dire_state()) {
    _this->_impl_.dire_state_ = new ::CMsgServerToGCMatchStateHistory_TeamState(*from._impl_.dire_state_);
  }
  _this->_impl_.game_time_ = from._impl_.game_time_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory.MatchState)
}

inline void CMsgServerToGCMatchStateHistory_MatchState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_state_){nullptr}
    , decltype(_impl_.dire_state_){nullptr}
    , decltype(_impl_.game_time_){0u}
  };
}

CMsgServerToGCMatchStateHistory_MatchState::~CMsgServerToGCMatchStateHistory_MatchState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory.MatchState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchStateHistory_MatchState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.radiant_state_;
  if (this != internal_default_instance()) delete _impl_.dire_state_;
}

void CMsgServerToGCMatchStateHistory_MatchState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory_MatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory.MatchState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.radiant_state_ != nullptr);
      _impl_.radiant_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dire_state_ != nullptr);
      _impl_.dire_state_->Clear();
    }
  }
  _impl_.game_time_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory_MatchState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchStateHistory_MatchState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory.MatchState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time(), target);
  }

  // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::radiant_state(this),
        _Internal::radiant_state(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dire_state(this),
        _Internal::dire_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory.MatchState)
  return target;
}

size_t CMsgServerToGCMatchStateHistory_MatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory.MatchState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgServerToGCMatchStateHistory.TeamState radiant_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radiant_state_);
    }

    // optional .CMsgServerToGCMatchStateHistory.TeamState dire_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dire_state_);
    }

    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchStateHistory_MatchState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchStateHistory_MatchState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchStateHistory_MatchState::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchStateHistory_MatchState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchStateHistory_MatchState*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchStateHistory_MatchState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_radiant_state()->::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(
          from._internal_radiant_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dire_state()->::CMsgServerToGCMatchStateHistory_TeamState::MergeFrom(
          from._internal_dire_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchStateHistory_MatchState::CopyFrom(const CMsgServerToGCMatchStateHistory_MatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory.MatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory_MatchState::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory_MatchState::InternalSwap(CMsgServerToGCMatchStateHistory_MatchState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_MatchState, _impl_.game_time_)
      + sizeof(CMsgServerToGCMatchStateHistory_MatchState::_impl_.game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory_MatchState, _impl_.radiant_state_)>(
          reinterpret_cast<char*>(&_impl_.radiant_state_),
          reinterpret_cast<char*>(&other->_impl_.radiant_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory_MatchState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[112]);
}

// ===================================================================

class CMsgServerToGCMatchStateHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCMatchStateHistory>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radiant_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCMatchStateHistory)
}
CMsgServerToGCMatchStateHistory::CMsgServerToGCMatchStateHistory(const CMsgServerToGCMatchStateHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCMatchStateHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_states_){from._impl_.match_states_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.radiant_won_){}
    , decltype(_impl_.mmr_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mmr_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.mmr_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCMatchStateHistory)
}

inline void CMsgServerToGCMatchStateHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_states_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.radiant_won_){false}
    , decltype(_impl_.mmr_){0u}
  };
}

CMsgServerToGCMatchStateHistory::~CMsgServerToGCMatchStateHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCMatchStateHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCMatchStateHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.match_states_.~RepeatedPtrField();
}

void CMsgServerToGCMatchStateHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCMatchStateHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCMatchStateHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.match_states_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mmr_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.mmr_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCMatchStateHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool radiant_won = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_radiant_won(&has_bits);
          _impl_.radiant_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mmr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCMatchStateHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCMatchStateHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional bool radiant_won = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_radiant_won(), target);
  }

  // optional uint32 mmr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mmr(), target);
  }

  // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_match_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_match_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCMatchStateHistory)
  return target;
}

size_t CMsgServerToGCMatchStateHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCMatchStateHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCMatchStateHistory.MatchState match_states = 4;
  total_size += 1UL * this->_internal_match_states_size();
  for (const auto& msg : this->_impl_.match_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional bool radiant_won = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 mmr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCMatchStateHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCMatchStateHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCMatchStateHistory::GetClassData() const { return &_class_data_; }


void CMsgServerToGCMatchStateHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCMatchStateHistory*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCMatchStateHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCMatchStateHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.match_states_.MergeFrom(from._impl_.match_states_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.radiant_won_ = from._impl_.radiant_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCMatchStateHistory::CopyFrom(const CMsgServerToGCMatchStateHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCMatchStateHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCMatchStateHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCMatchStateHistory::InternalSwap(CMsgServerToGCMatchStateHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.match_states_.InternalSwap(&other->_impl_.match_states_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory, _impl_.mmr_)
      + sizeof(CMsgServerToGCMatchStateHistory::_impl_.mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCMatchStateHistory, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCMatchStateHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[113]);
}

// ===================================================================

class CMsgMatchStateSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchStateSteamMLEntry>()._impl_._has_bits_);
  static const ::CMsgServerToGCMatchStateHistory_MatchState& match_state(const CMsgMatchStateSteamMLEntry* msg);
  static void set_has_match_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radiant_won(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgServerToGCMatchStateHistory_MatchState&
CMsgMatchStateSteamMLEntry::_Internal::match_state(const CMsgMatchStateSteamMLEntry* msg) {
  return *msg->_impl_.match_state_;
}
CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchStateSteamMLEntry)
}
CMsgMatchStateSteamMLEntry::CMsgMatchStateSteamMLEntry(const CMsgMatchStateSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchStateSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_state_){nullptr}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.radiant_won_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match_state()) {
    _this->_impl_.match_state_ = new ::CMsgServerToGCMatchStateHistory_MatchState(*from._impl_.match_state_);
  }
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radiant_won_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.radiant_won_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchStateSteamMLEntry)
}

inline void CMsgMatchStateSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.match_state_){nullptr}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.radiant_won_){false}
  };
}

CMsgMatchStateSteamMLEntry::~CMsgMatchStateSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgMatchStateSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchStateSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.match_state_;
}

void CMsgMatchStateSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchStateSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchStateSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.match_state_ != nullptr);
    _impl_.match_state_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.radiant_won_) -
        reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.radiant_won_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchStateSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mmr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool radiant_won = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_radiant_won(&has_bits);
          _impl_.radiant_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchStateSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchStateSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::match_state(this),
        _Internal::match_state(this).GetCachedSize(), target, stream);
  }

  // optional uint32 mmr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mmr(), target);
  }

  // optional bool radiant_won = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_radiant_won(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchStateSteamMLEntry)
  return target;
}

size_t CMsgMatchStateSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchStateSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgServerToGCMatchStateHistory.MatchState match_state = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.match_state_);
    }

    // optional uint32 mmr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

    // optional bool radiant_won = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchStateSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchStateSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchStateSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgMatchStateSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchStateSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgMatchStateSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchStateSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_match_state()->::CMsgServerToGCMatchStateHistory_MatchState::MergeFrom(
          from._internal_match_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radiant_won_ = from._impl_.radiant_won_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchStateSteamMLEntry::CopyFrom(const CMsgMatchStateSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchStateSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchStateSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgMatchStateSteamMLEntry::InternalSwap(CMsgMatchStateSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchStateSteamMLEntry, _impl_.radiant_won_)
      + sizeof(CMsgMatchStateSteamMLEntry::_impl_.radiant_won_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchStateSteamMLEntry, _impl_.match_state_)>(
          reinterpret_cast<char*>(&_impl_.match_state_),
          reinterpret_cast<char*>(&other->_impl_.match_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchStateSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[114]);
}

// ===================================================================

class CMsgLaneSelectionSteamMLEntry::_Internal {
 public:
};

CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLaneSelectionSteamMLEntry)
}
CMsgLaneSelectionSteamMLEntry::CMsgLaneSelectionSteamMLEntry(const CMsgLaneSelectionSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLaneSelectionSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_ids_){from._impl_.hero_ids_}
    , decltype(_impl_.lanes_){from._impl_.lanes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLaneSelectionSteamMLEntry)
}

inline void CMsgLaneSelectionSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hero_ids_){arena}
    , decltype(_impl_.lanes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgLaneSelectionSteamMLEntry::~CMsgLaneSelectionSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgLaneSelectionSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLaneSelectionSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hero_ids_.~RepeatedField();
  _impl_.lanes_.~RepeatedField();
}

void CMsgLaneSelectionSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLaneSelectionSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLaneSelectionSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hero_ids_.Clear();
  _impl_.lanes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLaneSelectionSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_lanes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLaneSelectionSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLaneSelectionSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
  for (int i = 0, n = this->_internal_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_ids(i), target);
  }

  // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
  for (int i = 0, n = this->_internal_lanes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lanes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLaneSelectionSteamMLEntry)
  return target;
}

size_t CMsgLaneSelectionSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLaneSelectionSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 hero_ids = 1 [(.steamml_max_entries) = 10];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 lanes = 2 [(.steamml_max_entries) = 6];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.lanes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_lanes_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLaneSelectionSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLaneSelectionSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLaneSelectionSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgLaneSelectionSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLaneSelectionSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgLaneSelectionSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLaneSelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hero_ids_.MergeFrom(from._impl_.hero_ids_);
  _this->_impl_.lanes_.MergeFrom(from._impl_.lanes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLaneSelectionSteamMLEntry::CopyFrom(const CMsgLaneSelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLaneSelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLaneSelectionSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgLaneSelectionSteamMLEntry::InternalSwap(CMsgLaneSelectionSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.hero_ids_.InternalSwap(&other->_impl_.hero_ids_);
  _impl_.lanes_.InternalSwap(&other->_impl_.lanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLaneSelectionSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[115]);
}

// ===================================================================

class CMsgAbilitySelectionSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAbilitySelectionSteamMLEntry>()._impl_._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_selected_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgAbilitySelectionSteamMLEntry)
}
CMsgAbilitySelectionSteamMLEntry::CMsgAbilitySelectionSteamMLEntry(const CMsgAbilitySelectionSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgAbilitySelectionSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.abilities_){from._impl_.abilities_}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.selected_ability_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.selected_ability_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.selected_ability_));
  // @@protoc_insertion_point(copy_constructor:CMsgAbilitySelectionSteamMLEntry)
}

inline void CMsgAbilitySelectionSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.abilities_){arena}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.selected_ability_){-1}
  };
}

CMsgAbilitySelectionSteamMLEntry::~CMsgAbilitySelectionSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgAbilitySelectionSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgAbilitySelectionSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.abilities_.~RepeatedField();
}

void CMsgAbilitySelectionSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgAbilitySelectionSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAbilitySelectionSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enemy_hero_ids_.Clear();
  _impl_.abilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_) -
        reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.lane_));
    _impl_.selected_ability_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAbilitySelectionSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 abilities = 5 [(.steamml_max_entries) = 25];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_abilities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_abilities(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 selected_ability = 6 [default = -1];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_selected_ability(&has_bits);
          _impl_.selected_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAbilitySelectionSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAbilitySelectionSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enemy_hero_ids(i), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane(), target);
  }

  // repeated int32 abilities = 5 [(.steamml_max_entries) = 25];
  for (int i = 0, n = this->_internal_abilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_abilities(i), target);
  }

  // optional int32 selected_ability = 6 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_selected_ability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAbilitySelectionSteamMLEntry)
  return target;
}

size_t CMsgAbilitySelectionSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAbilitySelectionSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 enemy_hero_ids = 3 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated int32 abilities = 5 [(.steamml_max_entries) = 25];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.abilities_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_abilities_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

    // optional int32 selected_ability = 6 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_selected_ability());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAbilitySelectionSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgAbilitySelectionSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAbilitySelectionSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgAbilitySelectionSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgAbilitySelectionSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgAbilitySelectionSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgAbilitySelectionSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.abilities_.MergeFrom(from._impl_.abilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.selected_ability_ = from._impl_.selected_ability_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAbilitySelectionSteamMLEntry::CopyFrom(const CMsgAbilitySelectionSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAbilitySelectionSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbilitySelectionSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgAbilitySelectionSteamMLEntry::InternalSwap(CMsgAbilitySelectionSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.abilities_.InternalSwap(&other->_impl_.abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAbilitySelectionSteamMLEntry, _impl_.lane_)
      + sizeof(CMsgAbilitySelectionSteamMLEntry::_impl_.lane_)
      - PROTOBUF_FIELD_OFFSET(CMsgAbilitySelectionSteamMLEntry, _impl_.mmr_)>(
          reinterpret_cast<char*>(&_impl_.mmr_),
          reinterpret_cast<char*>(&other->_impl_.mmr_));
  swap(_impl_.selected_ability_, other->_impl_.selected_ability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAbilitySelectionSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[116]);
}

// ===================================================================

class CMsgItemPurchasePregameSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchasePregameSteamMLEntry>()._impl_._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchasePregameSteamMLEntry)
}
CMsgItemPurchasePregameSteamMLEntry::CMsgItemPurchasePregameSteamMLEntry(const CMsgItemPurchasePregameSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemPurchasePregameSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.balance_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchasePregameSteamMLEntry)
}

inline void CMsgItemPurchasePregameSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.balance_){0}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgItemPurchasePregameSteamMLEntry::~CMsgItemPurchasePregameSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchasePregameSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemPurchasePregameSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.items_.~RepeatedField();
}

void CMsgItemPurchasePregameSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemPurchasePregameSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchasePregameSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchasePregameSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_balance(&has_bits);
          _impl_.balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 items = 7 [(.steamml_max_entries) = 9];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemPurchasePregameSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchasePregameSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional float balance = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_balance(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated int32 items = 7 [(.steamml_max_entries) = 9];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchasePregameSteamMLEntry)
  return target;
}

size_t CMsgItemPurchasePregameSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchasePregameSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 5 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 6 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated int32 items = 7 [(.steamml_max_entries) = 9];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

    // optional float balance = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemPurchasePregameSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemPurchasePregameSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemPurchasePregameSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgItemPurchasePregameSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemPurchasePregameSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgItemPurchasePregameSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchasePregameSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.balance_ = from._impl_.balance_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemPurchasePregameSteamMLEntry::CopyFrom(const CMsgItemPurchasePregameSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchasePregameSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchasePregameSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchasePregameSteamMLEntry::InternalSwap(CMsgItemPurchasePregameSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchasePregameSteamMLEntry, _impl_.hero_id_)
      + sizeof(CMsgItemPurchasePregameSteamMLEntry::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchasePregameSteamMLEntry, _impl_.mmr_)>(
          reinterpret_cast<char*>(&_impl_.mmr_),
          reinterpret_cast<char*>(&other->_impl_.mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchasePregameSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[117]);
}

// ===================================================================

class CMsgItemPurchaseSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchaseSteamMLEntry>()._impl_._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchaseSteamMLEntry)
}
CMsgItemPurchaseSteamMLEntry::CMsgItemPurchaseSteamMLEntry(const CMsgItemPurchaseSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemPurchaseSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.items_to_be_purchased_){from._impl_.items_to_be_purchased_}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.hero_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hero_id_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchaseSteamMLEntry)
}

inline void CMsgItemPurchaseSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.items_to_be_purchased_){arena}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.hero_id_){0u}
  };
}

CMsgItemPurchaseSteamMLEntry::~CMsgItemPurchaseSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchaseSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemPurchaseSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.items_.~RepeatedField();
  _impl_.items_to_be_purchased_.~RepeatedField();
}

void CMsgItemPurchaseSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemPurchaseSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchaseSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  _impl_.items_.Clear();
  _impl_.items_to_be_purchased_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.hero_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchaseSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 items = 6 [(.steamml_max_entries) = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items_to_be_purchased(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_items_to_be_purchased(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemPurchaseSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchaseSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_items(i), target);
  }

  // repeated int32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_to_be_purchased_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_items_to_be_purchased(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchaseSteamMLEntry)
  return target;
}

size_t CMsgItemPurchaseSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchaseSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  // repeated int32 items_to_be_purchased = 7 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.items_to_be_purchased_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_to_be_purchased_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemPurchaseSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemPurchaseSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemPurchaseSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgItemPurchaseSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemPurchaseSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgItemPurchaseSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchaseSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_impl_.items_to_be_purchased_.MergeFrom(from._impl_.items_to_be_purchased_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemPurchaseSteamMLEntry::CopyFrom(const CMsgItemPurchaseSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchaseSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchaseSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchaseSteamMLEntry::InternalSwap(CMsgItemPurchaseSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  _impl_.items_to_be_purchased_.InternalSwap(&other->_impl_.items_to_be_purchased_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSteamMLEntry, _impl_.hero_id_)
      + sizeof(CMsgItemPurchaseSteamMLEntry::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSteamMLEntry, _impl_.mmr_)>(
          reinterpret_cast<char*>(&_impl_.mmr_),
          reinterpret_cast<char*>(&other->_impl_.mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchaseSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[118]);
}

// ===================================================================

class CMsgItemPurchaseSequenceSteamMLEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgItemPurchaseSequenceSteamMLEntry>()._impl_._has_bits_);
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_to_be_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgItemPurchaseSequenceSteamMLEntry)
}
CMsgItemPurchaseSequenceSteamMLEntry::CMsgItemPurchaseSequenceSteamMLEntry(const CMsgItemPurchaseSequenceSteamMLEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgItemPurchaseSequenceSteamMLEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.mmr_){}
    , decltype(_impl_.lane_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.item_to_be_purchased_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.mmr_, &from._impl_.mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_to_be_purchased_) -
    reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.item_to_be_purchased_));
  // @@protoc_insertion_point(copy_constructor:CMsgItemPurchaseSequenceSteamMLEntry)
}

inline void CMsgItemPurchaseSequenceSteamMLEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.items_){arena}
    , decltype(_impl_.mmr_){0u}
    , decltype(_impl_.lane_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.item_to_be_purchased_){-1}
  };
}

CMsgItemPurchaseSequenceSteamMLEntry::~CMsgItemPurchaseSequenceSteamMLEntry() {
  // @@protoc_insertion_point(destructor:CMsgItemPurchaseSequenceSteamMLEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgItemPurchaseSequenceSteamMLEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
  _impl_.items_.~RepeatedField();
}

void CMsgItemPurchaseSequenceSteamMLEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgItemPurchaseSequenceSteamMLEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgItemPurchaseSequenceSteamMLEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hero_id_) -
        reinterpret_cast<char*>(&_impl_.mmr_)) + sizeof(_impl_.hero_id_));
    _impl_.item_to_be_purchased_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgItemPurchaseSequenceSteamMLEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_mmr(&has_bits);
          _impl_.mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 items = 6 [(.steamml_max_entries) = 20];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 item_to_be_purchased = 7 [default = -1];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_item_to_be_purchased(&has_bits);
          _impl_.item_to_be_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgItemPurchaseSequenceSteamMLEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgItemPurchaseSequenceSteamMLEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mmr(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_hero_ids(i), target);
  }

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_items(i), target);
  }

  // optional int32 item_to_be_purchased = 7 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_item_to_be_purchased(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgItemPurchaseSequenceSteamMLEntry)
  return target;
}

size_t CMsgItemPurchaseSequenceSteamMLEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgItemPurchaseSequenceSteamMLEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 4 [(.steamml_max_entries) = 4];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 5 [(.steamml_max_entries) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  // repeated int32 items = 6 [(.steamml_max_entries) = 20];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_mmr());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional int32 item_to_be_purchased = 7 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_to_be_purchased());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgItemPurchaseSequenceSteamMLEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgItemPurchaseSequenceSteamMLEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgItemPurchaseSequenceSteamMLEntry::GetClassData() const { return &_class_data_; }


void CMsgItemPurchaseSequenceSteamMLEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgItemPurchaseSequenceSteamMLEntry*>(&to_msg);
  auto& from = static_cast<const CMsgItemPurchaseSequenceSteamMLEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mmr_ = from._impl_.mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_to_be_purchased_ = from._impl_.item_to_be_purchased_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgItemPurchaseSequenceSteamMLEntry::CopyFrom(const CMsgItemPurchaseSequenceSteamMLEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgItemPurchaseSequenceSteamMLEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemPurchaseSequenceSteamMLEntry::IsInitialized() const {
  return true;
}

void CMsgItemPurchaseSequenceSteamMLEntry::InternalSwap(CMsgItemPurchaseSequenceSteamMLEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSequenceSteamMLEntry, _impl_.hero_id_)
      + sizeof(CMsgItemPurchaseSequenceSteamMLEntry::_impl_.hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgItemPurchaseSequenceSteamMLEntry, _impl_.mmr_)>(
          reinterpret_cast<char*>(&_impl_.mmr_),
          reinterpret_cast<char*>(&other->_impl_.mmr_));
  swap(_impl_.item_to_be_purchased_, other->_impl_.item_to_be_purchased_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgItemPurchaseSequenceSteamMLEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[119]);
}

// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActive::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActive>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_turbo_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActive)
}
CMsgServerToGCCavernCrawlIsHeroActive::CMsgServerToGCCavernCrawlIsHeroActive(const CMsgServerToGCCavernCrawlIsHeroActive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCavernCrawlIsHeroActive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.turbo_mode_){}
    , decltype(_impl_.preferred_map_variant_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_id_, &from._impl_.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preferred_map_variant_) -
    reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.preferred_map_variant_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActive)
}

inline void CMsgServerToGCCavernCrawlIsHeroActive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.turbo_mode_){false}
    , decltype(_impl_.preferred_map_variant_){255u}
  };
}

CMsgServerToGCCavernCrawlIsHeroActive::~CMsgServerToGCCavernCrawlIsHeroActive() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCavernCrawlIsHeroActive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCavernCrawlIsHeroActive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActive::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.turbo_mode_) -
        reinterpret_cast<char*>(&_impl_.event_id_)) + sizeof(_impl_.turbo_mode_));
    _impl_.preferred_map_variant_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 preferred_map_variant = 3 [default = 255];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_preferred_map_variant(&has_bits);
          _impl_.preferred_map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool turbo_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_turbo_mode(&has_bits);
          _impl_.turbo_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCavernCrawlIsHeroActive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 preferred_map_variant = 3 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_preferred_map_variant(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional bool turbo_mode = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_turbo_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActive)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional bool turbo_mode = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 preferred_map_variant = 3 [default = 255];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preferred_map_variant());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCavernCrawlIsHeroActive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCavernCrawlIsHeroActive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCavernCrawlIsHeroActive::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCavernCrawlIsHeroActive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCavernCrawlIsHeroActive*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCavernCrawlIsHeroActive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.turbo_mode_ = from._impl_.turbo_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preferred_map_variant_ = from._impl_.preferred_map_variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCavernCrawlIsHeroActive::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActive::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActive::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActive, _impl_.turbo_mode_)
      + sizeof(CMsgServerToGCCavernCrawlIsHeroActive::_impl_.turbo_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActive, _impl_.event_id_)>(
          reinterpret_cast<char*>(&_impl_.event_id_),
          reinterpret_cast<char*>(&other->_impl_.event_id_));
  swap(_impl_.preferred_map_variant_, other->_impl_.preferred_map_variant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[120]);
}

// ===================================================================

class CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPlayerChallengeHistory_PlayerChallenge>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_id1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_id2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_progress_value_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_progress_value_end(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_won(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
}
CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.challenge_type_){}
    , decltype(_impl_.challenge_id1_){}
    , decltype(_impl_.challenge_id2_){}
    , decltype(_impl_.progress_value_start_){}
    , decltype(_impl_.progress_value_end_){}
    , decltype(_impl_.audit_data_){}
    , decltype(_impl_.team_won_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.rank_completed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rank_completed_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.rank_completed_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
}

inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.challenge_type_){0}
    , decltype(_impl_.challenge_id1_){0u}
    , decltype(_impl_.challenge_id2_){0u}
    , decltype(_impl_.progress_value_start_){0u}
    , decltype(_impl_.progress_value_end_){0u}
    , decltype(_impl_.audit_data_){uint64_t{0u}}
    , decltype(_impl_.team_won_){false}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.rank_completed_){0u}
  };
}

CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::~CMsgServerToGCPlayerChallengeHistory_PlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_won_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_won_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.rank_completed_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.rank_completed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPlayerChallengeHistoryType_IsValid(val))) {
            _internal_set_challenge_type(static_cast<::EPlayerChallengeHistoryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_id1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_id1(&has_bits);
          _impl_.challenge_id1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_id2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_id2(&has_bits);
          _impl_.challenge_id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress_value_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_progress_value_start(&has_bits);
          _impl_.progress_value_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress_value_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_progress_value_end(&has_bits);
          _impl_.progress_value_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool team_won = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_team_won(&has_bits);
          _impl_.team_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 audit_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_audit_data(&has_bits);
          _impl_.audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank_completed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_rank_completed(&has_bits);
          _impl_.rank_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_challenge_type(), target);
  }

  // optional uint32 challenge_id1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_id1(), target);
  }

  // optional uint32 challenge_id2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_id2(), target);
  }

  // optional uint32 progress_value_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_progress_value_start(), target);
  }

  // optional uint32 progress_value_end = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress_value_end(), target);
  }

  // optional bool team_won = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_team_won(), target);
  }

  // optional uint64 audit_data = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_audit_data(), target);
  }

  // optional uint32 hero_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_hero_id(), target);
  }

  // optional uint32 rank_completed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rank_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  return target;
}

size_t CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional .EPlayerChallengeHistoryType challenge_type = 2 [default = k_EPlayerChallengeHistoryType_Invalid];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_challenge_type());
    }

    // optional uint32 challenge_id1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_id1());
    }

    // optional uint32 challenge_id2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_id2());
    }

    // optional uint32 progress_value_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress_value_start());
    }

    // optional uint32 progress_value_end = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress_value_end());
    }

    // optional uint64 audit_data = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_audit_data());
    }

    // optional bool team_won = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 hero_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 rank_completed = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rank_completed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::GetClassData() const { return &_class_data_; }


void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCPlayerChallengeHistory_PlayerChallenge*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_type_ = from._impl_.challenge_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_id1_ = from._impl_.challenge_id1_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_id2_ = from._impl_.challenge_id2_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.progress_value_start_ = from._impl_.progress_value_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.progress_value_end_ = from._impl_.progress_value_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.audit_data_ = from._impl_.audit_data_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.team_won_ = from._impl_.team_won_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.rank_completed_ = from._impl_.rank_completed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::CopyFrom(const CMsgServerToGCPlayerChallengeHistory_PlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPlayerChallengeHistory.PlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::InternalSwap(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.rank_completed_)
      + sizeof(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::_impl_.rank_completed_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory_PlayerChallenge, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPlayerChallengeHistory_PlayerChallenge::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[121]);
}

// ===================================================================

class CMsgServerToGCPlayerChallengeHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCPlayerChallengeHistory>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_average_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCPlayerChallengeHistory)
}
CMsgServerToGCPlayerChallengeHistory::CMsgServerToGCPlayerChallengeHistory(const CMsgServerToGCPlayerChallengeHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCPlayerChallengeHistory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_records_){from._impl_.challenge_records_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.average_rank_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.average_rank_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.average_rank_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCPlayerChallengeHistory)
}

inline void CMsgServerToGCPlayerChallengeHistory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.challenge_records_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.average_rank_){0u}
  };
}

CMsgServerToGCPlayerChallengeHistory::~CMsgServerToGCPlayerChallengeHistory() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCPlayerChallengeHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCPlayerChallengeHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.challenge_records_.~RepeatedPtrField();
}

void CMsgServerToGCPlayerChallengeHistory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCPlayerChallengeHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCPlayerChallengeHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.challenge_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.average_rank_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.average_rank_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCPlayerChallengeHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 average_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_average_rank(&has_bits);
          _impl_.average_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_challenge_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCPlayerChallengeHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCPlayerChallengeHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 average_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_average_rank(), target);
  }

  // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_challenge_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_challenge_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCPlayerChallengeHistory)
  return target;
}

size_t CMsgServerToGCPlayerChallengeHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCPlayerChallengeHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCPlayerChallengeHistory.PlayerChallenge challenge_records = 3;
  total_size += 1UL * this->_internal_challenge_records_size();
  for (const auto& msg : this->_impl_.challenge_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 average_rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_rank());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCPlayerChallengeHistory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCPlayerChallengeHistory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCPlayerChallengeHistory::GetClassData() const { return &_class_data_; }


void CMsgServerToGCPlayerChallengeHistory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCPlayerChallengeHistory*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCPlayerChallengeHistory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCPlayerChallengeHistory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.challenge_records_.MergeFrom(from._impl_.challenge_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.average_rank_ = from._impl_.average_rank_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCPlayerChallengeHistory::CopyFrom(const CMsgServerToGCPlayerChallengeHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCPlayerChallengeHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCPlayerChallengeHistory::IsInitialized() const {
  return true;
}

void CMsgServerToGCPlayerChallengeHistory::InternalSwap(CMsgServerToGCPlayerChallengeHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.challenge_records_.InternalSwap(&other->_impl_.challenge_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory, _impl_.average_rank_)
      + sizeof(CMsgServerToGCPlayerChallengeHistory::_impl_.average_rank_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCPlayerChallengeHistory, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCPlayerChallengeHistory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[122]);
}

// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults>()._impl_._has_bits_);
  static void set_has_path_id_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_room_id_claimed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
}
CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_completed_){}
    , decltype(_impl_.room_id_claimed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.path_id_completed_, &from._impl_.path_id_completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.room_id_claimed_) -
    reinterpret_cast<char*>(&_impl_.path_id_completed_)) + sizeof(_impl_.room_id_claimed_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
}

inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_id_completed_){255u}
    , decltype(_impl_.room_id_claimed_){255u}
  };
}

CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::~CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.path_id_completed_ = 255u;
    _impl_.room_id_claimed_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 path_id_completed = 1 [default = 255];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_path_id_completed(&has_bits);
          _impl_.path_id_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 room_id_claimed = 2 [default = 255];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_room_id_claimed(&has_bits);
          _impl_.room_id_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 path_id_completed = 1 [default = 255];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_path_id_completed(), target);
  }

  // optional uint32 room_id_claimed = 2 [default = 255];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_room_id_claimed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 path_id_completed = 1 [default = 255];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_path_id_completed());
    }

    // optional uint32 room_id_claimed = 2 [default = 255];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_room_id_claimed());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.path_id_completed_ = from._impl_.path_id_completed_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.room_id_claimed_ = from._impl_.room_id_claimed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.path_id_completed_, other->_impl_.path_id_completed_);
  swap(_impl_.room_id_claimed_, other->_impl_.room_id_claimed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[123]);
}

// ===================================================================

class CMsgServerToGCCavernCrawlIsHeroActiveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCCavernCrawlIsHeroActiveResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_potential_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_potential_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}
CMsgServerToGCCavernCrawlIsHeroActiveResponse::CMsgServerToGCCavernCrawlIsHeroActiveResponse(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCCavernCrawlIsHeroActiveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_results_){from._impl_.map_results_}
    , decltype(_impl_.result_){}
    , decltype(_impl_.potential_winnings_){}
    , decltype(_impl_.potential_plus_shard_winnings_){}
    , decltype(_impl_.map_variant_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_variant_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.map_variant_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
}

inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.map_results_){arena}
    , decltype(_impl_.result_){false}
    , decltype(_impl_.potential_winnings_){0u}
    , decltype(_impl_.potential_plus_shard_winnings_){0u}
    , decltype(_impl_.map_variant_){255u}
  };
}

CMsgServerToGCCavernCrawlIsHeroActiveResponse::~CMsgServerToGCCavernCrawlIsHeroActiveResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_results_.~RepeatedPtrField();
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_results_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.potential_plus_shard_winnings_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.potential_plus_shard_winnings_));
    _impl_.map_variant_ = 255u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_result(&has_bits);
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 potential_winnings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_potential_winnings(&has_bits);
          _impl_.potential_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 potential_plus_shard_winnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_potential_plus_shard_winnings(&has_bits);
          _impl_.potential_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 map_variant = 5 [default = 255];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_map_variant(&has_bits);
          _impl_.map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCCavernCrawlIsHeroActiveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  // optional uint32 potential_winnings = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_potential_winnings(), target);
  }

  // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 potential_plus_shard_winnings = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_potential_plus_shard_winnings(), target);
  }

  // optional uint32 map_variant = 5 [default = 255];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_map_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  return target;
}

size_t CMsgServerToGCCavernCrawlIsHeroActiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCCavernCrawlIsHeroActiveResponse.MapResults map_results = 3;
  total_size += 1UL * this->_internal_map_results_size();
  for (const auto& msg : this->_impl_.map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool result = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 potential_winnings = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_potential_winnings());
    }

    // optional uint32 potential_plus_shard_winnings = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_potential_plus_shard_winnings());
    }

    // optional uint32 map_variant = 5 [default = 255];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_map_variant());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCCavernCrawlIsHeroActiveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCCavernCrawlIsHeroActiveResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCCavernCrawlIsHeroActiveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCCavernCrawlIsHeroActiveResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCCavernCrawlIsHeroActiveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_results_.MergeFrom(from._impl_.map_results_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.potential_winnings_ = from._impl_.potential_winnings_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.potential_plus_shard_winnings_ = from._impl_.potential_plus_shard_winnings_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.map_variant_ = from._impl_.map_variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::CopyFrom(const CMsgServerToGCCavernCrawlIsHeroActiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCCavernCrawlIsHeroActiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCCavernCrawlIsHeroActiveResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCCavernCrawlIsHeroActiveResponse::InternalSwap(CMsgServerToGCCavernCrawlIsHeroActiveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.map_results_.InternalSwap(&other->_impl_.map_results_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.potential_plus_shard_winnings_)
      + sizeof(CMsgServerToGCCavernCrawlIsHeroActiveResponse::_impl_.potential_plus_shard_winnings_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCCavernCrawlIsHeroActiveResponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
  swap(_impl_.map_variant_, other->_impl_.map_variant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCCavernCrawlIsHeroActiveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[124]);
}

// ===================================================================

class CMsgGCtoServerTensorflowInstance::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCtoServerTensorflowInstance>()._impl_._has_bits_);
  static void set_has_server_instance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCtoServerTensorflowInstance)
}
CMsgGCtoServerTensorflowInstance::CMsgGCtoServerTensorflowInstance(const CMsgGCtoServerTensorflowInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCtoServerTensorflowInstance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_instance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_instance_ = from._impl_.server_instance_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCtoServerTensorflowInstance)
}

inline void CMsgGCtoServerTensorflowInstance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_instance_){0u}
  };
}

CMsgGCtoServerTensorflowInstance::~CMsgGCtoServerTensorflowInstance() {
  // @@protoc_insertion_point(destructor:CMsgGCtoServerTensorflowInstance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCtoServerTensorflowInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCtoServerTensorflowInstance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCtoServerTensorflowInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCtoServerTensorflowInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_instance_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCtoServerTensorflowInstance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_instance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_instance(&has_bits);
          _impl_.server_instance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCtoServerTensorflowInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCtoServerTensorflowInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_instance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_instance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCtoServerTensorflowInstance)
  return target;
}

size_t CMsgGCtoServerTensorflowInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCtoServerTensorflowInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_instance = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_instance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCtoServerTensorflowInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCtoServerTensorflowInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCtoServerTensorflowInstance::GetClassData() const { return &_class_data_; }


void CMsgGCtoServerTensorflowInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCtoServerTensorflowInstance*>(&to_msg);
  auto& from = static_cast<const CMsgGCtoServerTensorflowInstance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCtoServerTensorflowInstance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_instance()) {
    _this->_internal_set_server_instance(from._internal_server_instance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCtoServerTensorflowInstance::CopyFrom(const CMsgGCtoServerTensorflowInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCtoServerTensorflowInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoServerTensorflowInstance::IsInitialized() const {
  return true;
}

void CMsgGCtoServerTensorflowInstance::InternalSwap(CMsgGCtoServerTensorflowInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_instance_, other->_impl_.server_instance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCtoServerTensorflowInstance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[125]);
}

// ===================================================================

class CMsgDetailedGameStats_PlayerStatEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_PlayerStatEntry>()._impl_._has_bits_);
  static void set_has_total_earned_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_networth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_total_dps(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_average_dps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_damage_output(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_health(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_total_health(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_total_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_base_physical_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_physical_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_ability_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_ability_damage_reduction_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ability_damage_block(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_physical_damage_block(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_mana_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_health_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_physical_magic_dmg_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gold_from_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_gold_from_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_gold_shared(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_xp_from_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_xp_from_creeps(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_total_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ability_casts(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_item_casts(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_total_time_stunned(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_item_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.PlayerStatEntry)
}
CMsgDetailedGameStats_PlayerStatEntry::CMsgDetailedGameStats_PlayerStatEntry(const CMsgDetailedGameStats_PlayerStatEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDetailedGameStats_PlayerStatEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.total_earned_gold_){}
    , decltype(_impl_.total_networth_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.total_dps_){}
    , decltype(_impl_.average_dps_){}
    , decltype(_impl_.ability_damage_output_){}
    , decltype(_impl_.base_health_){}
    , decltype(_impl_.total_health_){}
    , decltype(_impl_.total_mana_){}
    , decltype(_impl_.base_physical_damage_reduction_pct_){}
    , decltype(_impl_.total_physical_damage_reduction_pct_){}
    , decltype(_impl_.base_ability_damage_reduction_pct_){}
    , decltype(_impl_.total_ability_damage_reduction_pct_){}
    , decltype(_impl_.ability_damage_block_){}
    , decltype(_impl_.physical_damage_block_){}
    , decltype(_impl_.mana_regen_){}
    , decltype(_impl_.health_regen_){}
    , decltype(_impl_.physical_magic_dmg_pct_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.gold_from_kills_){}
    , decltype(_impl_.gold_from_creeps_){}
    , decltype(_impl_.gold_shared_){}
    , decltype(_impl_.xp_from_kills_){}
    , decltype(_impl_.xp_from_creeps_){}
    , decltype(_impl_.total_xp_){}
    , decltype(_impl_.ability_casts_){}
    , decltype(_impl_.item_casts_){}
    , decltype(_impl_.total_time_stunned_){}
    , decltype(_impl_.item_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_earned_gold_, &from._impl_.total_earned_gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_count_) -
    reinterpret_cast<char*>(&_impl_.total_earned_gold_)) + sizeof(_impl_.item_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.PlayerStatEntry)
}

inline void CMsgDetailedGameStats_PlayerStatEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.total_earned_gold_){0u}
    , decltype(_impl_.total_networth_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.total_dps_){0u}
    , decltype(_impl_.average_dps_){0u}
    , decltype(_impl_.ability_damage_output_){0u}
    , decltype(_impl_.base_health_){0u}
    , decltype(_impl_.total_health_){0u}
    , decltype(_impl_.total_mana_){0u}
    , decltype(_impl_.base_physical_damage_reduction_pct_){0}
    , decltype(_impl_.total_physical_damage_reduction_pct_){0}
    , decltype(_impl_.base_ability_damage_reduction_pct_){0}
    , decltype(_impl_.total_ability_damage_reduction_pct_){0}
    , decltype(_impl_.ability_damage_block_){0}
    , decltype(_impl_.physical_damage_block_){0}
    , decltype(_impl_.mana_regen_){0u}
    , decltype(_impl_.health_regen_){0u}
    , decltype(_impl_.physical_magic_dmg_pct_){0}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.assists_){0u}
    , decltype(_impl_.gold_from_kills_){0u}
    , decltype(_impl_.gold_from_creeps_){0u}
    , decltype(_impl_.gold_shared_){0u}
    , decltype(_impl_.xp_from_kills_){0u}
    , decltype(_impl_.xp_from_creeps_){0u}
    , decltype(_impl_.total_xp_){0u}
    , decltype(_impl_.ability_casts_){0u}
    , decltype(_impl_.item_casts_){0u}
    , decltype(_impl_.total_time_stunned_){0}
    , decltype(_impl_.item_count_){0u}
  };
}

CMsgDetailedGameStats_PlayerStatEntry::~CMsgDetailedGameStats_PlayerStatEntry() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.PlayerStatEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDetailedGameStats_PlayerStatEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDetailedGameStats_PlayerStatEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDetailedGameStats_PlayerStatEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.PlayerStatEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.total_earned_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.total_health_) -
        reinterpret_cast<char*>(&_impl_.total_earned_gold_)) + sizeof(_impl_.total_health_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.total_mana_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.mana_regen_) -
        reinterpret_cast<char*>(&_impl_.total_mana_)) + sizeof(_impl_.mana_regen_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.health_regen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.gold_shared_) -
        reinterpret_cast<char*>(&_impl_.health_regen_)) + sizeof(_impl_.gold_shared_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&_impl_.xp_from_kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.item_count_) -
        reinterpret_cast<char*>(&_impl_.xp_from_kills_)) + sizeof(_impl_.item_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_PlayerStatEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 total_earned_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_total_earned_gold(&has_bits);
          _impl_.total_earned_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_networth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_total_networth(&has_bits);
          _impl_.total_networth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_dps = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_total_dps(&has_bits);
          _impl_.total_dps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 average_dps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_average_dps(&has_bits);
          _impl_.average_dps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_damage_output = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_ability_damage_output(&has_bits);
          _impl_.ability_damage_output_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_health = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_base_health(&has_bits);
          _impl_.base_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_health = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_total_health(&has_bits);
          _impl_.total_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_mana = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_total_mana(&has_bits);
          _impl_.total_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float base_physical_damage_reduction_pct = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_base_physical_damage_reduction_pct(&has_bits);
          _impl_.base_physical_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float total_physical_damage_reduction_pct = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_total_physical_damage_reduction_pct(&has_bits);
          _impl_.total_physical_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float base_ability_damage_reduction_pct = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_base_ability_damage_reduction_pct(&has_bits);
          _impl_.base_ability_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float total_ability_damage_reduction_pct = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_total_ability_damage_reduction_pct(&has_bits);
          _impl_.total_ability_damage_reduction_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ability_damage_block = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_ability_damage_block(&has_bits);
          _impl_.ability_damage_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float physical_damage_block = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_physical_damage_block(&has_bits);
          _impl_.physical_damage_block_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 mana_regen = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_mana_regen(&has_bits);
          _impl_.mana_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 health_regen = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_health_regen(&has_bits);
          _impl_.health_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float physical_magic_dmg_pct = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_physical_magic_dmg_pct(&has_bits);
          _impl_.physical_magic_dmg_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 assists = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_from_kills = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_gold_from_kills(&has_bits);
          _impl_.gold_from_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_from_creeps = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_gold_from_creeps(&has_bits);
          _impl_.gold_from_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold_shared = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_gold_shared(&has_bits);
          _impl_.gold_shared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_from_kills = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_xp_from_kills(&has_bits);
          _impl_.xp_from_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 xp_from_creeps = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_xp_from_creeps(&has_bits);
          _impl_.xp_from_creeps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 total_xp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_total_xp(&has_bits);
          _impl_.total_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ability_casts = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_ability_casts(&has_bits);
          _impl_.ability_casts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_casts = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_item_casts(&has_bits);
          _impl_.item_casts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float total_time_stunned = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _Internal::set_has_total_time_stunned(&has_bits);
          _impl_.total_time_stunned_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 item_count = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_item_count(&has_bits);
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDetailedGameStats_PlayerStatEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.PlayerStatEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 total_earned_gold = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_earned_gold(), target);
  }

  // optional uint32 total_networth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_total_networth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 total_dps = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_dps(), target);
  }

  // optional uint32 average_dps = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_average_dps(), target);
  }

  // optional uint32 ability_damage_output = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ability_damage_output(), target);
  }

  // optional uint32 base_health = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_base_health(), target);
  }

  // optional uint32 total_health = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_total_health(), target);
  }

  // optional uint32 total_mana = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_total_mana(), target);
  }

  // optional float base_physical_damage_reduction_pct = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_base_physical_damage_reduction_pct(), target);
  }

  // optional float total_physical_damage_reduction_pct = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_total_physical_damage_reduction_pct(), target);
  }

  // optional float base_ability_damage_reduction_pct = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_base_ability_damage_reduction_pct(), target);
  }

  // optional float total_ability_damage_reduction_pct = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_total_ability_damage_reduction_pct(), target);
  }

  // optional float ability_damage_block = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_ability_damage_block(), target);
  }

  // optional float physical_damage_block = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_physical_damage_block(), target);
  }

  // optional uint32 mana_regen = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_mana_regen(), target);
  }

  // optional uint32 health_regen = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_health_regen(), target);
  }

  // optional float physical_magic_dmg_pct = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_physical_magic_dmg_pct(), target);
  }

  // optional uint32 kills = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_assists(), target);
  }

  // optional uint32 gold_from_kills = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_gold_from_kills(), target);
  }

  // optional uint32 gold_from_creeps = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_gold_from_creeps(), target);
  }

  // optional uint32 gold_shared = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_gold_shared(), target);
  }

  // optional uint32 xp_from_kills = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_xp_from_kills(), target);
  }

  // optional uint32 xp_from_creeps = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(26, this->_internal_xp_from_creeps(), target);
  }

  // optional uint32 total_xp = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(27, this->_internal_total_xp(), target);
  }

  // optional uint32 ability_casts = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_ability_casts(), target);
  }

  // optional uint32 item_casts = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_item_casts(), target);
  }

  // optional float total_time_stunned = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_total_time_stunned(), target);
  }

  // optional uint32 item_count = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_item_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.PlayerStatEntry)
  return target;
}

size_t CMsgDetailedGameStats_PlayerStatEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.PlayerStatEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 total_earned_gold = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_earned_gold());
    }

    // optional uint32 total_networth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_networth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 total_dps = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_dps());
    }

    // optional uint32 average_dps = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_dps());
    }

    // optional uint32 ability_damage_output = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ability_damage_output());
    }

    // optional uint32 base_health = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_health());
    }

    // optional uint32 total_health = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_health());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 total_mana = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_total_mana());
    }

    // optional float base_physical_damage_reduction_pct = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float total_physical_damage_reduction_pct = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float base_ability_damage_reduction_pct = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float total_ability_damage_reduction_pct = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float ability_damage_block = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float physical_damage_block = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 mana_regen = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_mana_regen());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 health_regen = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_health_regen());
    }

    // optional float physical_magic_dmg_pct = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional uint32 kills = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 gold_from_kills = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gold_from_kills());
    }

    // optional uint32 gold_from_creeps = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gold_from_creeps());
    }

    // optional uint32 gold_shared = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_gold_shared());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional uint32 xp_from_kills = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_xp_from_kills());
    }

    // optional uint32 xp_from_creeps = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_xp_from_creeps());
    }

    // optional uint32 total_xp = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_total_xp());
    }

    // optional uint32 ability_casts = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ability_casts());
    }

    // optional uint32 item_casts = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_item_casts());
    }

    // optional float total_time_stunned = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 item_count = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_item_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDetailedGameStats_PlayerStatEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDetailedGameStats_PlayerStatEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDetailedGameStats_PlayerStatEntry::GetClassData() const { return &_class_data_; }


void CMsgDetailedGameStats_PlayerStatEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDetailedGameStats_PlayerStatEntry*>(&to_msg);
  auto& from = static_cast<const CMsgDetailedGameStats_PlayerStatEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.total_earned_gold_ = from._impl_.total_earned_gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.total_networth_ = from._impl_.total_networth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.total_dps_ = from._impl_.total_dps_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.average_dps_ = from._impl_.average_dps_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ability_damage_output_ = from._impl_.ability_damage_output_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_health_ = from._impl_.base_health_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.total_health_ = from._impl_.total_health_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.total_mana_ = from._impl_.total_mana_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.base_physical_damage_reduction_pct_ = from._impl_.base_physical_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.total_physical_damage_reduction_pct_ = from._impl_.total_physical_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.base_ability_damage_reduction_pct_ = from._impl_.base_ability_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.total_ability_damage_reduction_pct_ = from._impl_.total_ability_damage_reduction_pct_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.ability_damage_block_ = from._impl_.ability_damage_block_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.physical_damage_block_ = from._impl_.physical_damage_block_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.mana_regen_ = from._impl_.mana_regen_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.health_regen_ = from._impl_.health_regen_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.physical_magic_dmg_pct_ = from._impl_.physical_magic_dmg_pct_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.gold_from_kills_ = from._impl_.gold_from_kills_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.gold_from_creeps_ = from._impl_.gold_from_creeps_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.gold_shared_ = from._impl_.gold_shared_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.xp_from_kills_ = from._impl_.xp_from_kills_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.xp_from_creeps_ = from._impl_.xp_from_creeps_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.total_xp_ = from._impl_.total_xp_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.ability_casts_ = from._impl_.ability_casts_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.item_casts_ = from._impl_.item_casts_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.total_time_stunned_ = from._impl_.total_time_stunned_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.item_count_ = from._impl_.item_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDetailedGameStats_PlayerStatEntry::CopyFrom(const CMsgDetailedGameStats_PlayerStatEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.PlayerStatEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_PlayerStatEntry::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_PlayerStatEntry::InternalSwap(CMsgDetailedGameStats_PlayerStatEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerStatEntry, _impl_.item_count_)
      + sizeof(CMsgDetailedGameStats_PlayerStatEntry::_impl_.item_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerStatEntry, _impl_.total_earned_gold_)>(
          reinterpret_cast<char*>(&_impl_.total_earned_gold_),
          reinterpret_cast<char*>(&other->_impl_.total_earned_gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_PlayerStatEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[126]);
}

// ===================================================================

class CMsgDetailedGameStats_GameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_GameStats>()._impl_._has_bits_);
  static void set_has_tower_death_time_t1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tower_death_time_t2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tower_death_time_t3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.GameStats)
}
CMsgDetailedGameStats_GameStats::CMsgDetailedGameStats_GameStats(const CMsgDetailedGameStats_GameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDetailedGameStats_GameStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tower_death_time_t1_){}
    , decltype(_impl_.tower_death_time_t2_){}
    , decltype(_impl_.tower_death_time_t3_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tower_death_time_t1_, &from._impl_.tower_death_time_t1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tower_death_time_t3_) -
    reinterpret_cast<char*>(&_impl_.tower_death_time_t1_)) + sizeof(_impl_.tower_death_time_t3_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.GameStats)
}

inline void CMsgDetailedGameStats_GameStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tower_death_time_t1_){0u}
    , decltype(_impl_.tower_death_time_t2_){0u}
    , decltype(_impl_.tower_death_time_t3_){0u}
  };
}

CMsgDetailedGameStats_GameStats::~CMsgDetailedGameStats_GameStats() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.GameStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDetailedGameStats_GameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDetailedGameStats_GameStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDetailedGameStats_GameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.GameStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.tower_death_time_t1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tower_death_time_t3_) -
        reinterpret_cast<char*>(&_impl_.tower_death_time_t1_)) + sizeof(_impl_.tower_death_time_t3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_GameStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 tower_death_time_t1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tower_death_time_t1(&has_bits);
          _impl_.tower_death_time_t1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_death_time_t2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tower_death_time_t2(&has_bits);
          _impl_.tower_death_time_t2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tower_death_time_t3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tower_death_time_t3(&has_bits);
          _impl_.tower_death_time_t3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDetailedGameStats_GameStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.GameStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 tower_death_time_t1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tower_death_time_t1(), target);
  }

  // optional uint32 tower_death_time_t2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tower_death_time_t2(), target);
  }

  // optional uint32 tower_death_time_t3 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_death_time_t3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.GameStats)
  return target;
}

size_t CMsgDetailedGameStats_GameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.GameStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 tower_death_time_t1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_death_time_t1());
    }

    // optional uint32 tower_death_time_t2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_death_time_t2());
    }

    // optional uint32 tower_death_time_t3 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tower_death_time_t3());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDetailedGameStats_GameStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDetailedGameStats_GameStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDetailedGameStats_GameStats::GetClassData() const { return &_class_data_; }


void CMsgDetailedGameStats_GameStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDetailedGameStats_GameStats*>(&to_msg);
  auto& from = static_cast<const CMsgDetailedGameStats_GameStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.GameStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tower_death_time_t1_ = from._impl_.tower_death_time_t1_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tower_death_time_t2_ = from._impl_.tower_death_time_t2_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tower_death_time_t3_ = from._impl_.tower_death_time_t3_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDetailedGameStats_GameStats::CopyFrom(const CMsgDetailedGameStats_GameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.GameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_GameStats::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_GameStats::InternalSwap(CMsgDetailedGameStats_GameStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_GameStats, _impl_.tower_death_time_t3_)
      + sizeof(CMsgDetailedGameStats_GameStats::_impl_.tower_death_time_t3_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_GameStats, _impl_.tower_death_time_t1_)>(
          reinterpret_cast<char*>(&_impl_.tower_death_time_t1_),
          reinterpret_cast<char*>(&other->_impl_.tower_death_time_t1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_GameStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[127]);
}

// ===================================================================

class CMsgDetailedGameStats_MinuteEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_MinuteEntry>()._impl_._has_bits_);
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.MinuteEntry)
}
CMsgDetailedGameStats_MinuteEntry::CMsgDetailedGameStats_MinuteEntry(const CMsgDetailedGameStats_MinuteEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDetailedGameStats_MinuteEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.minute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.minute_ = from._impl_.minute_;
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.MinuteEntry)
}

inline void CMsgDetailedGameStats_MinuteEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.minute_){0u}
  };
}

CMsgDetailedGameStats_MinuteEntry::~CMsgDetailedGameStats_MinuteEntry() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.MinuteEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDetailedGameStats_MinuteEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
}

void CMsgDetailedGameStats_MinuteEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDetailedGameStats_MinuteEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.MinuteEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.minute_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_MinuteEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 minute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_minute(&has_bits);
          _impl_.minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDetailedGameStats_MinuteEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.MinuteEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 minute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_minute(), target);
  }

  // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.MinuteEntry)
  return target;
}

size_t CMsgDetailedGameStats_MinuteEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.MinuteEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.PlayerStatEntry stats = 2;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 minute = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_minute());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDetailedGameStats_MinuteEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDetailedGameStats_MinuteEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDetailedGameStats_MinuteEntry::GetClassData() const { return &_class_data_; }


void CMsgDetailedGameStats_MinuteEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDetailedGameStats_MinuteEntry*>(&to_msg);
  auto& from = static_cast<const CMsgDetailedGameStats_MinuteEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.MinuteEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_has_minute()) {
    _this->_internal_set_minute(from._internal_minute());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDetailedGameStats_MinuteEntry::CopyFrom(const CMsgDetailedGameStats_MinuteEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.MinuteEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_MinuteEntry::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_MinuteEntry::InternalSwap(CMsgDetailedGameStats_MinuteEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  swap(_impl_.minute_, other->_impl_.minute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_MinuteEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[128]);
}

// ===================================================================

class CMsgDetailedGameStats_PlayerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats_PlayerInfo>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats.PlayerInfo)
}
CMsgDetailedGameStats_PlayerInfo::CMsgDetailedGameStats_PlayerInfo(const CMsgDetailedGameStats_PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDetailedGameStats_PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.player_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_slot_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats.PlayerInfo)
}

inline void CMsgDetailedGameStats_PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.player_slot_){0u}
  };
}

CMsgDetailedGameStats_PlayerInfo::~CMsgDetailedGameStats_PlayerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDetailedGameStats_PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDetailedGameStats_PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDetailedGameStats_PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_slot_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.player_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats_PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDetailedGameStats_PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats.PlayerInfo)
  return target;
}

size_t CMsgDetailedGameStats_PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDetailedGameStats_PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDetailedGameStats_PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDetailedGameStats_PlayerInfo::GetClassData() const { return &_class_data_; }


void CMsgDetailedGameStats_PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDetailedGameStats_PlayerInfo*>(&to_msg);
  auto& from = static_cast<const CMsgDetailedGameStats_PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDetailedGameStats_PlayerInfo::CopyFrom(const CMsgDetailedGameStats_PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats_PlayerInfo::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats_PlayerInfo::InternalSwap(CMsgDetailedGameStats_PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerInfo, _impl_.player_slot_)
      + sizeof(CMsgDetailedGameStats_PlayerInfo::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgDetailedGameStats_PlayerInfo, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats_PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[129]);
}

// ===================================================================

class CMsgDetailedGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDetailedGameStats>()._impl_._has_bits_);
  static const ::CMsgDetailedGameStats_GameStats& game_stats(const CMsgDetailedGameStats* msg);
  static void set_has_game_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDetailedGameStats_GameStats&
CMsgDetailedGameStats::_Internal::game_stats(const CMsgDetailedGameStats* msg) {
  return *msg->_impl_.game_stats_;
}
CMsgDetailedGameStats::CMsgDetailedGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDetailedGameStats)
}
CMsgDetailedGameStats::CMsgDetailedGameStats(const CMsgDetailedGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDetailedGameStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minutes_){from._impl_.minutes_}
    , decltype(_impl_.player_info_){from._impl_.player_info_}
    , decltype(_impl_.game_stats_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_stats()) {
    _this->_impl_.game_stats_ = new ::CMsgDetailedGameStats_GameStats(*from._impl_.game_stats_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDetailedGameStats)
}

inline void CMsgDetailedGameStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.minutes_){arena}
    , decltype(_impl_.player_info_){arena}
    , decltype(_impl_.game_stats_){nullptr}
  };
}

CMsgDetailedGameStats::~CMsgDetailedGameStats() {
  // @@protoc_insertion_point(destructor:CMsgDetailedGameStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDetailedGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.minutes_.~RepeatedPtrField();
  _impl_.player_info_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.game_stats_;
}

void CMsgDetailedGameStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDetailedGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDetailedGameStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.minutes_.Clear();
  _impl_.player_info_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.game_stats_ != nullptr);
    _impl_.game_stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDetailedGameStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_minutes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDetailedGameStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDetailedGameStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_minutes_size()); i < n; i++) {
    const auto& repfield = this->_internal_minutes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_stats(this),
        _Internal::game_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDetailedGameStats)
  return target;
}

size_t CMsgDetailedGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDetailedGameStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDetailedGameStats.MinuteEntry minutes = 1;
  total_size += 1UL * this->_internal_minutes_size();
  for (const auto& msg : this->_impl_.minutes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDetailedGameStats.PlayerInfo player_info = 2;
  total_size += 1UL * this->_internal_player_info_size();
  for (const auto& msg : this->_impl_.player_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgDetailedGameStats.GameStats game_stats = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDetailedGameStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDetailedGameStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDetailedGameStats::GetClassData() const { return &_class_data_; }


void CMsgDetailedGameStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDetailedGameStats*>(&to_msg);
  auto& from = static_cast<const CMsgDetailedGameStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDetailedGameStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.minutes_.MergeFrom(from._impl_.minutes_);
  _this->_impl_.player_info_.MergeFrom(from._impl_.player_info_);
  if (from._internal_has_game_stats()) {
    _this->_internal_mutable_game_stats()->::CMsgDetailedGameStats_GameStats::MergeFrom(
        from._internal_game_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDetailedGameStats::CopyFrom(const CMsgDetailedGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDetailedGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDetailedGameStats::IsInitialized() const {
  return true;
}

void CMsgDetailedGameStats::InternalSwap(CMsgDetailedGameStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.minutes_.InternalSwap(&other->_impl_.minutes_);
  _impl_.player_info_.InternalSwap(&other->_impl_.player_info_);
  swap(_impl_.game_stats_, other->_impl_.game_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDetailedGameStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[130]);
}

// ===================================================================

class CMsgNeutralItemStats_NeutralItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNeutralItemStats_NeutralItem>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_last_equipped(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_last_unequipped(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration_equipped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgNeutralItemStats.NeutralItem)
}
CMsgNeutralItemStats_NeutralItem::CMsgNeutralItemStats_NeutralItem(const CMsgNeutralItemStats_NeutralItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgNeutralItemStats_NeutralItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_dropped_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.time_last_equipped_){}
    , decltype(_impl_.time_last_unequipped_){}
    , decltype(_impl_.duration_equipped_){}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_dropped_, &from._impl_.time_dropped_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.time_dropped_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgNeutralItemStats.NeutralItem)
}

inline void CMsgNeutralItemStats_NeutralItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_dropped_){0u}
    , decltype(_impl_.team_){0u}
    , decltype(_impl_.time_last_equipped_){0u}
    , decltype(_impl_.time_last_unequipped_){0u}
    , decltype(_impl_.duration_equipped_){0u}
    , decltype(_impl_.item_id_){-1}
  };
}

CMsgNeutralItemStats_NeutralItem::~CMsgNeutralItemStats_NeutralItem() {
  // @@protoc_insertion_point(destructor:CMsgNeutralItemStats.NeutralItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgNeutralItemStats_NeutralItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgNeutralItemStats_NeutralItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgNeutralItemStats_NeutralItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeutralItemStats.NeutralItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.time_dropped_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_equipped_) -
        reinterpret_cast<char*>(&_impl_.time_dropped_)) + sizeof(_impl_.duration_equipped_));
    _impl_.item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeutralItemStats_NeutralItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_dropped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_dropped(&has_bits);
          _impl_.time_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_equipped = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_last_equipped(&has_bits);
          _impl_.time_last_equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_last_unequipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time_last_unequipped(&has_bits);
          _impl_.time_last_unequipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_equipped = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_duration_equipped(&has_bits);
          _impl_.duration_equipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNeutralItemStats_NeutralItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeutralItemStats.NeutralItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_id = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 time_dropped = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_dropped(), target);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team(), target);
  }

  // optional uint32 time_last_equipped = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_last_equipped(), target);
  }

  // optional uint32 time_last_unequipped = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_last_unequipped(), target);
  }

  // optional uint32 duration_equipped = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duration_equipped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeutralItemStats.NeutralItem)
  return target;
}

size_t CMsgNeutralItemStats_NeutralItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeutralItemStats.NeutralItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 time_dropped = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_dropped());
    }

    // optional uint32 team = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

    // optional uint32 time_last_equipped = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_equipped());
    }

    // optional uint32 time_last_unequipped = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_time_last_unequipped());
    }

    // optional uint32 duration_equipped = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_equipped());
    }

    // optional int32 item_id = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNeutralItemStats_NeutralItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgNeutralItemStats_NeutralItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNeutralItemStats_NeutralItem::GetClassData() const { return &_class_data_; }


void CMsgNeutralItemStats_NeutralItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgNeutralItemStats_NeutralItem*>(&to_msg);
  auto& from = static_cast<const CMsgNeutralItemStats_NeutralItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeutralItemStats.NeutralItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_dropped_ = from._impl_.time_dropped_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_last_equipped_ = from._impl_.time_last_equipped_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.time_last_unequipped_ = from._impl_.time_last_unequipped_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.duration_equipped_ = from._impl_.duration_equipped_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNeutralItemStats_NeutralItem::CopyFrom(const CMsgNeutralItemStats_NeutralItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeutralItemStats.NeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeutralItemStats_NeutralItem::IsInitialized() const {
  return true;
}

void CMsgNeutralItemStats_NeutralItem::InternalSwap(CMsgNeutralItemStats_NeutralItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNeutralItemStats_NeutralItem, _impl_.duration_equipped_)
      + sizeof(CMsgNeutralItemStats_NeutralItem::_impl_.duration_equipped_)
      - PROTOBUF_FIELD_OFFSET(CMsgNeutralItemStats_NeutralItem, _impl_.time_dropped_)>(
          reinterpret_cast<char*>(&_impl_.time_dropped_),
          reinterpret_cast<char*>(&other->_impl_.time_dropped_));
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeutralItemStats_NeutralItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[131]);
}

// ===================================================================

class CMsgNeutralItemStats::_Internal {
 public:
};

CMsgNeutralItemStats::CMsgNeutralItemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgNeutralItemStats)
}
CMsgNeutralItemStats::CMsgNeutralItemStats(const CMsgNeutralItemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgNeutralItemStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.neutral_items_){from._impl_.neutral_items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgNeutralItemStats)
}

inline void CMsgNeutralItemStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.neutral_items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgNeutralItemStats::~CMsgNeutralItemStats() {
  // @@protoc_insertion_point(destructor:CMsgNeutralItemStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgNeutralItemStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.neutral_items_.~RepeatedPtrField();
}

void CMsgNeutralItemStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgNeutralItemStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNeutralItemStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.neutral_items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNeutralItemStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neutral_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNeutralItemStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNeutralItemStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_neutral_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_neutral_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNeutralItemStats)
  return target;
}

size_t CMsgNeutralItemStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNeutralItemStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgNeutralItemStats.NeutralItem neutral_items = 1;
  total_size += 1UL * this->_internal_neutral_items_size();
  for (const auto& msg : this->_impl_.neutral_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNeutralItemStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgNeutralItemStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNeutralItemStats::GetClassData() const { return &_class_data_; }


void CMsgNeutralItemStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgNeutralItemStats*>(&to_msg);
  auto& from = static_cast<const CMsgNeutralItemStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgNeutralItemStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.neutral_items_.MergeFrom(from._impl_.neutral_items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNeutralItemStats::CopyFrom(const CMsgNeutralItemStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNeutralItemStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNeutralItemStats::IsInitialized() const {
  return true;
}

void CMsgNeutralItemStats::InternalSwap(CMsgNeutralItemStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.neutral_items_.InternalSwap(&other->_impl_.neutral_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNeutralItemStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[132]);
}

// ===================================================================

class CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerLobbyHeroBanRates_HeroBanEntry>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ban_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pick_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
}
CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.ban_count_){}
    , decltype(_impl_.pick_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pick_count_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.pick_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
}

inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.ban_count_){0u}
    , decltype(_impl_.pick_count_){0u}
  };
}

CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::~CMsgGCToServerLobbyHeroBanRates_HeroBanEntry() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pick_count_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.pick_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ban_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ban_count(&has_bits);
          _impl_.ban_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pick_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_pick_count(&has_bits);
          _impl_.pick_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 ban_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ban_count(), target);
  }

  // optional uint32 pick_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pick_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  return target;
}

size_t CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 ban_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ban_count());
    }

    // optional uint32 pick_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pick_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::GetClassData() const { return &_class_data_; }


void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerLobbyHeroBanRates_HeroBanEntry*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ban_count_ = from._impl_.ban_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.pick_count_ = from._impl_.pick_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::CopyFrom(const CMsgGCToServerLobbyHeroBanRates_HeroBanEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerLobbyHeroBanRates.HeroBanEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::IsInitialized() const {
  return true;
}

void CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::InternalSwap(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_.pick_count_)
      + sizeof(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::_impl_.pick_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerLobbyHeroBanRates_HeroBanEntry, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerLobbyHeroBanRates_HeroBanEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[133]);
}

// ===================================================================

class CMsgGCToServerLobbyHeroBanRates::_Internal {
 public:
};

CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerLobbyHeroBanRates)
}
CMsgGCToServerLobbyHeroBanRates::CMsgGCToServerLobbyHeroBanRates(const CMsgGCToServerLobbyHeroBanRates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerLobbyHeroBanRates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ban_data_){from._impl_.ban_data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerLobbyHeroBanRates)
}

inline void CMsgGCToServerLobbyHeroBanRates::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ban_data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToServerLobbyHeroBanRates::~CMsgGCToServerLobbyHeroBanRates() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerLobbyHeroBanRates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerLobbyHeroBanRates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ban_data_.~RepeatedPtrField();
}

void CMsgGCToServerLobbyHeroBanRates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerLobbyHeroBanRates::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerLobbyHeroBanRates)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ban_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerLobbyHeroBanRates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ban_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerLobbyHeroBanRates::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerLobbyHeroBanRates)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ban_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_ban_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerLobbyHeroBanRates)
  return target;
}

size_t CMsgGCToServerLobbyHeroBanRates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerLobbyHeroBanRates)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerLobbyHeroBanRates.HeroBanEntry ban_data = 1;
  total_size += 1UL * this->_internal_ban_data_size();
  for (const auto& msg : this->_impl_.ban_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerLobbyHeroBanRates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerLobbyHeroBanRates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerLobbyHeroBanRates::GetClassData() const { return &_class_data_; }


void CMsgGCToServerLobbyHeroBanRates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerLobbyHeroBanRates*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerLobbyHeroBanRates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerLobbyHeroBanRates)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ban_data_.MergeFrom(from._impl_.ban_data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerLobbyHeroBanRates::CopyFrom(const CMsgGCToServerLobbyHeroBanRates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerLobbyHeroBanRates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerLobbyHeroBanRates::IsInitialized() const {
  return true;
}

void CMsgGCToServerLobbyHeroBanRates::InternalSwap(CMsgGCToServerLobbyHeroBanRates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ban_data_.InternalSwap(&other->_impl_.ban_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerLobbyHeroBanRates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[134]);
}

// ===================================================================

class CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildContractProgress_CompletedGuildEventContracts>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
}
CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){from._impl_.contracts_}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
}

inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){arena}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0u}
  };
}

CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::~CMsgSignOutGuildContractProgress_CompletedGuildEventContracts() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contracts_.~RepeatedField();
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contracts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 contracts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_contracts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_contracts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // repeated uint64 contracts = 3;
  for (int i = 0, n = this->_internal_contracts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_contracts(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  return target;
}

size_t CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 contracts = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.contracts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_contracts_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::GetClassData() const { return &_class_data_; }


void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGuildContractProgress_CompletedGuildEventContracts*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contracts_.MergeFrom(from._impl_.contracts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::CopyFrom(const CMsgSignOutGuildContractProgress_CompletedGuildEventContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress.CompletedGuildEventContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::InternalSwap(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contracts_.InternalSwap(&other->_impl_.contracts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_.event_id_)
      + sizeof(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildContractProgress_CompletedGuildEventContracts, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress_CompletedGuildEventContracts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[135]);
}

// ===================================================================

class CMsgSignOutGuildContractProgress_PlayerContract::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildContractProgress_PlayerContract>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress.PlayerContract)
}
CMsgSignOutGuildContractProgress_PlayerContract::CMsgSignOutGuildContractProgress_PlayerContract(const CMsgSignOutGuildContractProgress_PlayerContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGuildContractProgress_PlayerContract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_contracts_){from._impl_.completed_contracts_}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress.PlayerContract)
}

inline void CMsgSignOutGuildContractProgress_PlayerContract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.completed_contracts_){arena}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgSignOutGuildContractProgress_PlayerContract::~CMsgSignOutGuildContractProgress_PlayerContract() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress.PlayerContract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGuildContractProgress_PlayerContract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.completed_contracts_.~RepeatedPtrField();
}

void CMsgSignOutGuildContractProgress_PlayerContract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress_PlayerContract::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress.PlayerContract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.completed_contracts_.Clear();
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress_PlayerContract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_completed_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGuildContractProgress_PlayerContract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress.PlayerContract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_completed_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_completed_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress.PlayerContract)
  return target;
}

size_t CMsgSignOutGuildContractProgress_PlayerContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress.PlayerContract)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.CompletedGuildEventContracts completed_contracts = 2;
  total_size += 1UL * this->_internal_completed_contracts_size();
  for (const auto& msg : this->_impl_.completed_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGuildContractProgress_PlayerContract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGuildContractProgress_PlayerContract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGuildContractProgress_PlayerContract::GetClassData() const { return &_class_data_; }


void CMsgSignOutGuildContractProgress_PlayerContract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGuildContractProgress_PlayerContract*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGuildContractProgress_PlayerContract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.completed_contracts_.MergeFrom(from._impl_.completed_contracts_);
  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGuildContractProgress_PlayerContract::CopyFrom(const CMsgSignOutGuildContractProgress_PlayerContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress.PlayerContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress_PlayerContract::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress_PlayerContract::InternalSwap(CMsgSignOutGuildContractProgress_PlayerContract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.completed_contracts_.InternalSwap(&other->_impl_.completed_contracts_);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress_PlayerContract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[136]);
}

// ===================================================================

class CMsgSignOutGuildContractProgress::_Internal {
 public:
};

CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildContractProgress)
}
CMsgSignOutGuildContractProgress::CMsgSignOutGuildContractProgress(const CMsgSignOutGuildContractProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGuildContractProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_contracts_){from._impl_.player_contracts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildContractProgress)
}

inline void CMsgSignOutGuildContractProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_contracts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSignOutGuildContractProgress::~CMsgSignOutGuildContractProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildContractProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGuildContractProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_contracts_.~RepeatedPtrField();
}

void CMsgSignOutGuildContractProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGuildContractProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildContractProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_contracts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildContractProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGuildContractProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildContractProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildContractProgress)
  return target;
}

size_t CMsgSignOutGuildContractProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildContractProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildContractProgress.PlayerContract player_contracts = 1;
  total_size += 1UL * this->_internal_player_contracts_size();
  for (const auto& msg : this->_impl_.player_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGuildContractProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGuildContractProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGuildContractProgress::GetClassData() const { return &_class_data_; }


void CMsgSignOutGuildContractProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGuildContractProgress*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGuildContractProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildContractProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_contracts_.MergeFrom(from._impl_.player_contracts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGuildContractProgress::CopyFrom(const CMsgSignOutGuildContractProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildContractProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildContractProgress::InternalSwap(CMsgSignOutGuildContractProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_contracts_.InternalSwap(&other->_impl_.player_contracts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildContractProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[137]);
}

// ===================================================================

class CMsgSignOutGuildChallengeProgress_ChallengeProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutGuildChallengeProgress_ChallengeProgress>()._impl_._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_instance_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_period_serial(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
}
CMsgSignOutGuildChallengeProgress_ChallengeProgress::CMsgSignOutGuildChallengeProgress_ChallengeProgress(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGuildChallengeProgress_ChallengeProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_instance_timestamp_){}
    , decltype(_impl_.challenge_period_serial_){}
    , decltype(_impl_.progress_){}
    , decltype(_impl_.challenge_parameter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.guild_id_, &from._impl_.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.challenge_parameter_) -
    reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_parameter_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
}

inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0u}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_instance_timestamp_){0u}
    , decltype(_impl_.challenge_period_serial_){0u}
    , decltype(_impl_.progress_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
  };
}

CMsgSignOutGuildChallengeProgress_ChallengeProgress::~CMsgSignOutGuildChallengeProgress_ChallengeProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.challenge_parameter_) -
        reinterpret_cast<char*>(&_impl_.guild_id_)) + sizeof(_impl_.challenge_parameter_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildChallengeProgress_ChallengeProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          _impl_.event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_challenge_instance_timestamp(&has_bits);
          _impl_.challenge_instance_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_period_serial = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_challenge_period_serial(&has_bits);
          _impl_.challenge_period_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 progress = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_progress(&has_bits);
          _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGuildChallengeProgress_ChallengeProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_instance_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_instance_timestamp(), target);
  }

  // optional uint32 challenge_period_serial = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_period_serial(), target);
  }

  // optional uint32 progress = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_progress(), target);
  }

  // optional uint32 challenge_parameter = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_parameter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  return target;
}

size_t CMsgSignOutGuildChallengeProgress_ChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_instance_timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_timestamp());
    }

    // optional uint32 challenge_period_serial = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_period_serial());
    }

    // optional uint32 progress = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_progress());
    }

    // optional uint32 challenge_parameter = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGuildChallengeProgress_ChallengeProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGuildChallengeProgress_ChallengeProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGuildChallengeProgress_ChallengeProgress::GetClassData() const { return &_class_data_; }


void CMsgSignOutGuildChallengeProgress_ChallengeProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGuildChallengeProgress_ChallengeProgress*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGuildChallengeProgress_ChallengeProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.challenge_instance_timestamp_ = from._impl_.challenge_instance_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.challenge_period_serial_ = from._impl_.challenge_period_serial_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.progress_ = from._impl_.progress_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::CopyFrom(const CMsgSignOutGuildChallengeProgress_ChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildChallengeProgress.ChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildChallengeProgress_ChallengeProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildChallengeProgress_ChallengeProgress::InternalSwap(CMsgSignOutGuildChallengeProgress_ChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.challenge_parameter_)
      + sizeof(CMsgSignOutGuildChallengeProgress_ChallengeProgress::_impl_.challenge_parameter_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutGuildChallengeProgress_ChallengeProgress, _impl_.guild_id_)>(
          reinterpret_cast<char*>(&_impl_.guild_id_),
          reinterpret_cast<char*>(&other->_impl_.guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildChallengeProgress_ChallengeProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[138]);
}

// ===================================================================

class CMsgSignOutGuildChallengeProgress::_Internal {
 public:
};

CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutGuildChallengeProgress)
}
CMsgSignOutGuildChallengeProgress::CMsgSignOutGuildChallengeProgress(const CMsgSignOutGuildChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutGuildChallengeProgress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_challenges_progresses_){from._impl_.guild_challenges_progresses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutGuildChallengeProgress)
}

inline void CMsgSignOutGuildChallengeProgress::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.guild_challenges_progresses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSignOutGuildChallengeProgress::~CMsgSignOutGuildChallengeProgress() {
  // @@protoc_insertion_point(destructor:CMsgSignOutGuildChallengeProgress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutGuildChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.guild_challenges_progresses_.~RepeatedPtrField();
}

void CMsgSignOutGuildChallengeProgress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutGuildChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutGuildChallengeProgress)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.guild_challenges_progresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutGuildChallengeProgress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guild_challenges_progresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutGuildChallengeProgress::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutGuildChallengeProgress)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_guild_challenges_progresses_size()); i < n; i++) {
    const auto& repfield = this->_internal_guild_challenges_progresses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutGuildChallengeProgress)
  return target;
}

size_t CMsgSignOutGuildChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutGuildChallengeProgress)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutGuildChallengeProgress.ChallengeProgress guild_challenges_progresses = 1;
  total_size += 1UL * this->_internal_guild_challenges_progresses_size();
  for (const auto& msg : this->_impl_.guild_challenges_progresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutGuildChallengeProgress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutGuildChallengeProgress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutGuildChallengeProgress::GetClassData() const { return &_class_data_; }


void CMsgSignOutGuildChallengeProgress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutGuildChallengeProgress*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutGuildChallengeProgress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutGuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.guild_challenges_progresses_.MergeFrom(from._impl_.guild_challenges_progresses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutGuildChallengeProgress::CopyFrom(const CMsgSignOutGuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutGuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutGuildChallengeProgress::IsInitialized() const {
  return true;
}

void CMsgSignOutGuildChallengeProgress::InternalSwap(CMsgSignOutGuildChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.guild_challenges_progresses_.InternalSwap(&other->_impl_.guild_challenges_progresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutGuildChallengeProgress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[139]);
}

// ===================================================================

class CMsgSignOutMVPStats_Player_KillEaterEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats_Player_KillEaterEvent>()._impl_._has_bits_);
  static void set_has_event_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
}
CMsgSignOutMVPStats_Player_KillEaterEvent::CMsgSignOutMVPStats_Player_KillEaterEvent(const CMsgSignOutMVPStats_Player_KillEaterEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMVPStats_Player_KillEaterEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){}
    , decltype(_impl_.amount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.event_type_, &from._impl_.event_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.amount_) -
    reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.amount_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
}

inline void CMsgSignOutMVPStats_Player_KillEaterEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_type_){0u}
    , decltype(_impl_.amount_){0u}
  };
}

CMsgSignOutMVPStats_Player_KillEaterEvent::~CMsgSignOutMVPStats_Player_KillEaterEvent() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats.Player.KillEaterEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMVPStats_Player_KillEaterEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.event_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.amount_) -
        reinterpret_cast<char*>(&_impl_.event_type_)) + sizeof(_impl_.amount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats_Player_KillEaterEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 event_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_event_type(&has_bits);
          _impl_.event_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMVPStats_Player_KillEaterEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 event_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_type(), target);
  }

  // required uint32 amount = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats.Player.KillEaterEvent)
  return target;
}

size_t CMsgSignOutMVPStats_Player_KillEaterEvent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  size_t total_size = 0;

  if (_internal_has_event_type()) {
    // required uint32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());
  }

  if (_internal_has_amount()) {
    // required uint32 amount = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
  }

  return total_size;
}
size_t CMsgSignOutMVPStats_Player_KillEaterEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 event_type = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_event_type());

    // required uint32 amount = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMVPStats_Player_KillEaterEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMVPStats_Player_KillEaterEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMVPStats_Player_KillEaterEvent::GetClassData() const { return &_class_data_; }


void CMsgSignOutMVPStats_Player_KillEaterEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMVPStats_Player_KillEaterEvent*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMVPStats_Player_KillEaterEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.event_type_ = from._impl_.event_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::CopyFrom(const CMsgSignOutMVPStats_Player_KillEaterEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats.Player.KillEaterEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats_Player_KillEaterEvent::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CMsgSignOutMVPStats_Player_KillEaterEvent::InternalSwap(CMsgSignOutMVPStats_Player_KillEaterEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player_KillEaterEvent, _impl_.amount_)
      + sizeof(CMsgSignOutMVPStats_Player_KillEaterEvent::_impl_.amount_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player_KillEaterEvent, _impl_.event_type_)>(
          reinterpret_cast<char*>(&_impl_.event_type_),
          reinterpret_cast<char*>(&other->_impl_.event_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats_Player_KillEaterEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[140]);
}

// ===================================================================

class CMsgSignOutMVPStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats_Player>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_networth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wards_spotted_for_dewarding(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_building_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_other_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_first_blood(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_highest_killstreak(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats.Player)
}
CMsgSignOutMVPStats_Player::CMsgSignOutMVPStats_Player(const CMsgSignOutMVPStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMVPStats_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_eater_events_){from._impl_.kill_eater_events_}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.team_networth_rank_){}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.role_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.assists_){}
    , decltype(_impl_.xp_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.support_gold_spent_){}
    , decltype(_impl_.wards_placed_){}
    , decltype(_impl_.wards_spotted_for_dewarding_){}
    , decltype(_impl_.camps_stacked_){}
    , decltype(_impl_.last_hits_){}
    , decltype(_impl_.denies_){}
    , decltype(_impl_.building_damage_){}
    , decltype(_impl_.other_damage_){}
    , decltype(_impl_.triple_kills_){}
    , decltype(_impl_.rampages_){}
    , decltype(_impl_.first_blood_){}
    , decltype(_impl_.player_slot_){}
    , decltype(_impl_.rank_){}
    , decltype(_impl_.highest_killstreak_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_id_, &from._impl_.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.highest_killstreak_) -
    reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.highest_killstreak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats.Player)
}

inline void CMsgSignOutMVPStats_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kill_eater_events_){arena}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.team_networth_rank_){0u}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.role_){0u}
    , decltype(_impl_.kills_){0}
    , decltype(_impl_.deaths_){0}
    , decltype(_impl_.assists_){0}
    , decltype(_impl_.xp_){0}
    , decltype(_impl_.net_worth_){0}
    , decltype(_impl_.support_gold_spent_){0}
    , decltype(_impl_.wards_placed_){0}
    , decltype(_impl_.wards_spotted_for_dewarding_){0}
    , decltype(_impl_.camps_stacked_){0}
    , decltype(_impl_.last_hits_){0}
    , decltype(_impl_.denies_){0}
    , decltype(_impl_.building_damage_){0}
    , decltype(_impl_.other_damage_){0}
    , decltype(_impl_.triple_kills_){0}
    , decltype(_impl_.rampages_){0}
    , decltype(_impl_.first_blood_){0}
    , decltype(_impl_.player_slot_){0u}
    , decltype(_impl_.rank_){0u}
    , decltype(_impl_.highest_killstreak_){0u}
  };
}

CMsgSignOutMVPStats_Player::~CMsgSignOutMVPStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMVPStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kill_eater_events_.~RepeatedPtrField();
}

void CMsgSignOutMVPStats_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMVPStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kill_eater_events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.assists_) -
        reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.assists_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.xp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.denies_) -
        reinterpret_cast<char*>(&_impl_.xp_)) + sizeof(_impl_.denies_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.building_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.highest_killstreak_) -
        reinterpret_cast<char*>(&_impl_.building_damage_)) + sizeof(_impl_.highest_killstreak_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_networth_rank = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_networth_rank(&has_bits);
          _impl_.team_networth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_role(&has_bits);
          _impl_.role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_assists(&has_bits);
          _impl_.assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 xp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_xp(&has_bits);
          _impl_.xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 net_worth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 support_gold_spent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_support_gold_spent(&has_bits);
          _impl_.support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wards_placed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_wards_placed(&has_bits);
          _impl_.wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 wards_spotted_for_dewarding = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_wards_spotted_for_dewarding(&has_bits);
          _impl_.wards_spotted_for_dewarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 camps_stacked = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_camps_stacked(&has_bits);
          _impl_.camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 last_hits = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_last_hits(&has_bits);
          _impl_.last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 denies = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_denies(&has_bits);
          _impl_.denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 building_damage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_building_damage(&has_bits);
          _impl_.building_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 other_damage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_other_damage(&has_bits);
          _impl_.other_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 triple_kills = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_triple_kills(&has_bits);
          _impl_.triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 rampages = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_rampages(&has_bits);
          _impl_.rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 first_blood = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_first_blood(&has_bits);
          _impl_.first_blood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_slot = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_player_slot(&has_bits);
          _impl_.player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rank = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rank(&has_bits);
          _impl_.rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_kill_eater_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 highest_killstreak = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_highest_killstreak(&has_bits);
          _impl_.highest_killstreak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMVPStats_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 team_networth_rank = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_networth_rank(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  // optional uint32 role = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_role(), target);
  }

  // optional int32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional int32 deaths = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional int32 assists = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_assists(), target);
  }

  // optional int32 xp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_xp(), target);
  }

  // optional int32 net_worth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_net_worth(), target);
  }

  // optional int32 support_gold_spent = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_support_gold_spent(), target);
  }

  // optional int32 wards_placed = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_wards_placed(), target);
  }

  // optional int32 wards_spotted_for_dewarding = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_wards_spotted_for_dewarding(), target);
  }

  // optional int32 camps_stacked = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_camps_stacked(), target);
  }

  // optional int32 last_hits = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_last_hits(), target);
  }

  // optional int32 denies = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_denies(), target);
  }

  // optional int32 building_damage = 19;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_building_damage(), target);
  }

  // optional int32 other_damage = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_other_damage(), target);
  }

  // optional int32 triple_kills = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_triple_kills(), target);
  }

  // optional int32 rampages = 28;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_rampages(), target);
  }

  // optional int32 first_blood = 31;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_first_blood(), target);
  }

  // optional uint32 player_slot = 32;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(32, this->_internal_player_slot(), target);
  }

  // optional uint32 rank = 33;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_rank(), target);
  }

  // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kill_eater_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_kill_eater_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 highest_killstreak = 35;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(35, this->_internal_highest_killstreak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats.Player)
  return target;
}

size_t CMsgSignOutMVPStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutMVPStats.Player.KillEaterEvent kill_eater_events = 34;
  total_size += 2UL * this->_internal_kill_eater_events_size();
  for (const auto& msg : this->_impl_.kill_eater_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional uint32 team_networth_rank = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_networth_rank());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 role = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_role());
    }

    // optional int32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_kills());
    }

    // optional int32 deaths = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deaths());
    }

    // optional int32 assists = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_assists());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 xp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_xp());
    }

    // optional int32 net_worth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_net_worth());
    }

    // optional int32 support_gold_spent = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_support_gold_spent());
    }

    // optional int32 wards_placed = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wards_placed());
    }

    // optional int32 wards_spotted_for_dewarding = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_wards_spotted_for_dewarding());
    }

    // optional int32 camps_stacked = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camps_stacked());
    }

    // optional int32 last_hits = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_last_hits());
    }

    // optional int32 denies = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_denies());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 building_damage = 19;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_building_damage());
    }

    // optional int32 other_damage = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_other_damage());
    }

    // optional int32 triple_kills = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_triple_kills());
    }

    // optional int32 rampages = 28;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_rampages());
    }

    // optional int32 first_blood = 31;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_first_blood());
    }

    // optional uint32 player_slot = 32;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 rank = 33;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint32 highest_killstreak = 35;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_highest_killstreak());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMVPStats_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMVPStats_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMVPStats_Player::GetClassData() const { return &_class_data_; }


void CMsgSignOutMVPStats_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMVPStats_Player*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMVPStats_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kill_eater_events_.MergeFrom(from._impl_.kill_eater_events_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_networth_rank_ = from._impl_.team_networth_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.role_ = from._impl_.role_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.assists_ = from._impl_.assists_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.xp_ = from._impl_.xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.support_gold_spent_ = from._impl_.support_gold_spent_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.wards_placed_ = from._impl_.wards_placed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.wards_spotted_for_dewarding_ = from._impl_.wards_spotted_for_dewarding_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.camps_stacked_ = from._impl_.camps_stacked_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.last_hits_ = from._impl_.last_hits_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.denies_ = from._impl_.denies_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.building_damage_ = from._impl_.building_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.other_damage_ = from._impl_.other_damage_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.triple_kills_ = from._impl_.triple_kills_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.rampages_ = from._impl_.rampages_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.first_blood_ = from._impl_.first_blood_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.rank_ = from._impl_.rank_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.highest_killstreak_ = from._impl_.highest_killstreak_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMVPStats_Player::CopyFrom(const CMsgSignOutMVPStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats_Player::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.kill_eater_events_))
    return false;
  return true;
}

void CMsgSignOutMVPStats_Player::InternalSwap(CMsgSignOutMVPStats_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.kill_eater_events_.InternalSwap(&other->_impl_.kill_eater_events_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player, _impl_.highest_killstreak_)
      + sizeof(CMsgSignOutMVPStats_Player::_impl_.highest_killstreak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats_Player, _impl_.team_id_)>(
          reinterpret_cast<char*>(&_impl_.team_id_),
          reinterpret_cast<char*>(&other->_impl_.team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[141]);
}

// ===================================================================

class CMsgSignOutMVPStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMVPStats>()._impl_._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_winning_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgSignOutMVPStats::CMsgSignOutMVPStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMVPStats)
}
CMsgSignOutMVPStats::CMsgSignOutMVPStats(const CMsgSignOutMVPStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMVPStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.winning_team_){}
    , decltype(_impl_.game_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_time_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.game_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMVPStats)
}

inline void CMsgSignOutMVPStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.winning_team_){0u}
    , decltype(_impl_.game_time_){0}
  };
}

CMsgSignOutMVPStats::~CMsgSignOutMVPStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMVPStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMVPStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgSignOutMVPStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMVPStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMVPStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_time_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.game_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMVPStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 winning_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_winning_team(&has_bits);
          _impl_.winning_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSignOutMVPStats.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMVPStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMVPStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_mode(), target);
  }

  // optional uint32 winning_team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_winning_team(), target);
  }

  // optional float game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_game_time(), target);
  }

  // repeated .CMsgSignOutMVPStats.Player players = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMVPStats)
  return target;
}

size_t CMsgSignOutMVPStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMVPStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutMVPStats.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 game_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional uint32 winning_team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_winning_team());
    }

    // optional float game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMVPStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMVPStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMVPStats::GetClassData() const { return &_class_data_; }


void CMsgSignOutMVPStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMVPStats*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMVPStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMVPStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.winning_team_ = from._impl_.winning_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMVPStats::CopyFrom(const CMsgSignOutMVPStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMVPStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMVPStats::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.players_))
    return false;
  return true;
}

void CMsgSignOutMVPStats::InternalSwap(CMsgSignOutMVPStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats, _impl_.game_time_)
      + sizeof(CMsgSignOutMVPStats::_impl_.game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMVPStats, _impl_.match_id_)>(
          reinterpret_cast<char*>(&_impl_.match_id_),
          reinterpret_cast<char*>(&other->_impl_.match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMVPStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[142]);
}

// ===================================================================

class CMsgGCToServerRecordTrainingData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerRecordTrainingData>()._impl_._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerRecordTrainingData)
}
CMsgGCToServerRecordTrainingData::CMsgGCToServerRecordTrainingData(const CMsgGCToServerRecordTrainingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerRecordTrainingData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerRecordTrainingData)
}

inline void CMsgGCToServerRecordTrainingData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_){false}
  };
}

CMsgGCToServerRecordTrainingData::~CMsgGCToServerRecordTrainingData() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerRecordTrainingData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerRecordTrainingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerRecordTrainingData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerRecordTrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerRecordTrainingData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerRecordTrainingData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerRecordTrainingData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerRecordTrainingData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerRecordTrainingData)
  return target;
}

size_t CMsgGCToServerRecordTrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerRecordTrainingData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerRecordTrainingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerRecordTrainingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerRecordTrainingData::GetClassData() const { return &_class_data_; }


void CMsgGCToServerRecordTrainingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerRecordTrainingData*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerRecordTrainingData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerRecordTrainingData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerRecordTrainingData::CopyFrom(const CMsgGCToServerRecordTrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerRecordTrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerRecordTrainingData::IsInitialized() const {
  return true;
}

void CMsgGCToServerRecordTrainingData::InternalSwap(CMsgGCToServerRecordTrainingData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerRecordTrainingData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[143]);
}

// ===================================================================

class CMsgServerToGCGetGuildContracts::_Internal {
 public:
};

CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContracts)
}
CMsgServerToGCGetGuildContracts::CMsgServerToGCGetGuildContracts(const CMsgServerToGCGetGuildContracts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetGuildContracts* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContracts)
}

inline void CMsgServerToGCGetGuildContracts::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCGetGuildContracts::~CMsgServerToGCGetGuildContracts() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContracts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetGuildContracts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
}

void CMsgServerToGCGetGuildContracts::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContracts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContracts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContracts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetGuildContracts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContracts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContracts)
  return target;
}

size_t CMsgServerToGCGetGuildContracts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContracts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetGuildContracts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetGuildContracts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetGuildContracts::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetGuildContracts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetGuildContracts*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetGuildContracts&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContracts)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetGuildContracts::CopyFrom(const CMsgServerToGCGetGuildContracts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContracts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContracts::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContracts::InternalSwap(CMsgServerToGCGetGuildContracts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContracts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[144]);
}

// ===================================================================

class CMsgServerToGCGetGuildContractsResponse_ContractDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetGuildContractsResponse_ContractDetails>()._impl_._has_bits_);
  static void set_has_contract_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contract_stars(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
}
CMsgServerToGCGetGuildContractsResponse_ContractDetails::CMsgServerToGCGetGuildContractsResponse_ContractDetails(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetGuildContractsResponse_ContractDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_id_){}
    , decltype(_impl_.challenge_instance_id_){}
    , decltype(_impl_.challenge_parameter_){}
    , decltype(_impl_.contract_stars_){}
    , decltype(_impl_.contract_slot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.contract_id_, &from._impl_.contract_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contract_slot_) -
    reinterpret_cast<char*>(&_impl_.contract_id_)) + sizeof(_impl_.contract_slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
}

inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contract_id_){uint64_t{0u}}
    , decltype(_impl_.challenge_instance_id_){0u}
    , decltype(_impl_.challenge_parameter_){0u}
    , decltype(_impl_.contract_stars_){0u}
    , decltype(_impl_.contract_slot_){0u}
  };
}

CMsgServerToGCGetGuildContractsResponse_ContractDetails::~CMsgServerToGCGetGuildContractsResponse_ContractDetails() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.contract_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.contract_slot_) -
        reinterpret_cast<char*>(&_impl_.contract_id_)) + sizeof(_impl_.contract_slot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse_ContractDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 contract_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_contract_id(&has_bits);
          _impl_.contract_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          _impl_.challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          _impl_.challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_stars = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_contract_stars(&has_bits);
          _impl_.contract_stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_contract_slot(&has_bits);
          _impl_.contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetGuildContractsResponse_ContractDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 contract_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_contract_id(), target);
  }

  // optional uint32 challenge_instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 contract_stars = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_contract_stars(), target);
  }

  // optional uint32 contract_slot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_contract_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse_ContractDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint64 contract_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_contract_id());
    }

    // optional uint32 challenge_instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_challenge_parameter());
    }

    // optional uint32 contract_stars = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_stars());
    }

    // optional uint32 contract_slot = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_contract_slot());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetGuildContractsResponse_ContractDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetGuildContractsResponse_ContractDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetGuildContractsResponse_ContractDetails::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetGuildContractsResponse_ContractDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetGuildContractsResponse_ContractDetails*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetGuildContractsResponse_ContractDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.contract_id_ = from._impl_.contract_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.challenge_instance_id_ = from._impl_.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.challenge_parameter_ = from._impl_.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.contract_stars_ = from._impl_.contract_stars_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.contract_slot_ = from._impl_.contract_slot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::CopyFrom(const CMsgServerToGCGetGuildContractsResponse_ContractDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse.ContractDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse_ContractDetails::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse_ContractDetails::InternalSwap(CMsgServerToGCGetGuildContractsResponse_ContractDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.contract_slot_)
      + sizeof(CMsgServerToGCGetGuildContractsResponse_ContractDetails::_impl_.contract_slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_ContractDetails, _impl_.contract_id_)>(
          reinterpret_cast<char*>(&_impl_.contract_id_),
          reinterpret_cast<char*>(&other->_impl_.contract_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse_ContractDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[145]);
}

// ===================================================================

class CMsgServerToGCGetGuildContractsResponse_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetGuildContractsResponse_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse.Player)
}
CMsgServerToGCGetGuildContractsResponse_Player::CMsgServerToGCGetGuildContractsResponse_Player(const CMsgServerToGCGetGuildContractsResponse_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetGuildContractsResponse_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){from._impl_.contracts_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.guild_id_){}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.event_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse.Player)
}

inline void CMsgServerToGCGetGuildContractsResponse_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.contracts_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.guild_id_){0u}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgServerToGCGetGuildContractsResponse_Player::~CMsgServerToGCGetGuildContractsResponse_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetGuildContractsResponse_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.contracts_.~RepeatedPtrField();
}

void CMsgServerToGCGetGuildContractsResponse_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.contracts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.event_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.event_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 guild_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_guild_id(&has_bits);
          _impl_.guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetGuildContractsResponse_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_event_id(), target);
  }

  // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse.Player)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.ContractDetails contracts = 4;
  total_size += 1UL * this->_internal_contracts_size();
  for (const auto& msg : this->_impl_.contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 guild_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guild_id());
    }

    // optional .EEvent event_id = 3 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetGuildContractsResponse_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetGuildContractsResponse_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetGuildContractsResponse_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetGuildContractsResponse_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetGuildContractsResponse_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetGuildContractsResponse_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.contracts_.MergeFrom(from._impl_.contracts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.guild_id_ = from._impl_.guild_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.event_id_ = from._impl_.event_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetGuildContractsResponse_Player::CopyFrom(const CMsgServerToGCGetGuildContractsResponse_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse_Player::InternalSwap(CMsgServerToGCGetGuildContractsResponse_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.contracts_.InternalSwap(&other->_impl_.contracts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_Player, _impl_.event_id_)
      + sizeof(CMsgServerToGCGetGuildContractsResponse_Player::_impl_.event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetGuildContractsResponse_Player, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[146]);
}

// ===================================================================

class CMsgServerToGCGetGuildContractsResponse::_Internal {
 public:
};

CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetGuildContractsResponse)
}
CMsgServerToGCGetGuildContractsResponse::CMsgServerToGCGetGuildContractsResponse(const CMsgServerToGCGetGuildContractsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetGuildContractsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_contracts_){from._impl_.player_contracts_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetGuildContractsResponse)
}

inline void CMsgServerToGCGetGuildContractsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_contracts_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCGetGuildContractsResponse::~CMsgServerToGCGetGuildContractsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetGuildContractsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetGuildContractsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_contracts_.~RepeatedPtrField();
}

void CMsgServerToGCGetGuildContractsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetGuildContractsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetGuildContractsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_contracts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetGuildContractsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_contracts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetGuildContractsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetGuildContractsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_contracts_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_contracts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetGuildContractsResponse)
  return target;
}

size_t CMsgServerToGCGetGuildContractsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetGuildContractsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetGuildContractsResponse.Player player_contracts = 1;
  total_size += 1UL * this->_internal_player_contracts_size();
  for (const auto& msg : this->_impl_.player_contracts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetGuildContractsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetGuildContractsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetGuildContractsResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetGuildContractsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetGuildContractsResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetGuildContractsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetGuildContractsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_contracts_.MergeFrom(from._impl_.player_contracts_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetGuildContractsResponse::CopyFrom(const CMsgServerToGCGetGuildContractsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetGuildContractsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetGuildContractsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetGuildContractsResponse::InternalSwap(CMsgServerToGCGetGuildContractsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.player_contracts_.InternalSwap(&other->_impl_.player_contracts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetGuildContractsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[147]);
}

// ===================================================================

class CMsgMatchDiretideCandy_CandyDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy_CandyDetails>()._impl_._has_bits_);
  static void set_has_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy.CandyDetails)
}
CMsgMatchDiretideCandy_CandyDetails::CMsgMatchDiretideCandy_CandyDetails(const CMsgMatchDiretideCandy_CandyDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchDiretideCandy_CandyDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){}
    , decltype(_impl_.audit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.amount_, &from._impl_.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.audit_) -
    reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.audit_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy.CandyDetails)
}

inline void CMsgMatchDiretideCandy_CandyDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.amount_){0u}
    , decltype(_impl_.audit_){0u}
  };
}

CMsgMatchDiretideCandy_CandyDetails::~CMsgMatchDiretideCandy_CandyDetails() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy.CandyDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchDiretideCandy_CandyDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgMatchDiretideCandy_CandyDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchDiretideCandy_CandyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy.CandyDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.amount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.audit_) -
        reinterpret_cast<char*>(&_impl_.amount_)) + sizeof(_impl_.audit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy_CandyDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_amount(&has_bits);
          _impl_.amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 audit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_audit(&has_bits);
          _impl_.audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchDiretideCandy_CandyDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy.CandyDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 amount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_amount(), target);
  }

  // optional uint32 audit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_audit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy.CandyDetails)
  return target;
}

size_t CMsgMatchDiretideCandy_CandyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy.CandyDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 amount = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_amount());
    }

    // optional uint32 audit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_audit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchDiretideCandy_CandyDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchDiretideCandy_CandyDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchDiretideCandy_CandyDetails::GetClassData() const { return &_class_data_; }


void CMsgMatchDiretideCandy_CandyDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchDiretideCandy_CandyDetails*>(&to_msg);
  auto& from = static_cast<const CMsgMatchDiretideCandy_CandyDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy.CandyDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.amount_ = from._impl_.amount_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.audit_ = from._impl_.audit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchDiretideCandy_CandyDetails::CopyFrom(const CMsgMatchDiretideCandy_CandyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy.CandyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy_CandyDetails::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy_CandyDetails::InternalSwap(CMsgMatchDiretideCandy_CandyDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_CandyDetails, _impl_.audit_)
      + sizeof(CMsgMatchDiretideCandy_CandyDetails::_impl_.audit_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_CandyDetails, _impl_.amount_)>(
          reinterpret_cast<char*>(&_impl_.amount_),
          reinterpret_cast<char*>(&other->_impl_.amount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy_CandyDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[148]);
}

// ===================================================================

class CMsgMatchDiretideCandy_PlayerCandy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy_PlayerCandy>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_candy_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_consumes_periodic_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy.PlayerCandy)
}
CMsgMatchDiretideCandy_PlayerCandy::CMsgMatchDiretideCandy_PlayerCandy(const CMsgMatchDiretideCandy_PlayerCandy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchDiretideCandy_PlayerCandy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candy_breakdown_){from._impl_.candy_breakdown_}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.candy_amount_){}
    , decltype(_impl_.consumes_periodic_resource_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.consumes_periodic_resource_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.consumes_periodic_resource_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy.PlayerCandy)
}

inline void CMsgMatchDiretideCandy_PlayerCandy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candy_breakdown_){arena}
    , decltype(_impl_.account_id_){0u}
    , decltype(_impl_.candy_amount_){0u}
    , decltype(_impl_.consumes_periodic_resource_){false}
  };
}

CMsgMatchDiretideCandy_PlayerCandy::~CMsgMatchDiretideCandy_PlayerCandy() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy.PlayerCandy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchDiretideCandy_PlayerCandy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candy_breakdown_.~RepeatedPtrField();
}

void CMsgMatchDiretideCandy_PlayerCandy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchDiretideCandy_PlayerCandy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy.PlayerCandy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candy_breakdown_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.consumes_periodic_resource_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.consumes_periodic_resource_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy_PlayerCandy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 candy_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_candy_amount(&has_bits);
          _impl_.candy_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool consumes_periodic_resource = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_consumes_periodic_resource(&has_bits);
          _impl_.consumes_periodic_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_candy_breakdown(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchDiretideCandy_PlayerCandy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy.PlayerCandy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 candy_amount = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_candy_amount(), target);
  }

  // optional bool consumes_periodic_resource = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_consumes_periodic_resource(), target);
  }

  // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_candy_breakdown_size()); i < n; i++) {
    const auto& repfield = this->_internal_candy_breakdown(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy.PlayerCandy)
  return target;
}

size_t CMsgMatchDiretideCandy_PlayerCandy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy.PlayerCandy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.CandyDetails candy_breakdown = 5;
  total_size += 1UL * this->_internal_candy_breakdown_size();
  for (const auto& msg : this->_impl_.candy_breakdown_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 candy_amount = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_candy_amount());
    }

    // optional bool consumes_periodic_resource = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchDiretideCandy_PlayerCandy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchDiretideCandy_PlayerCandy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchDiretideCandy_PlayerCandy::GetClassData() const { return &_class_data_; }


void CMsgMatchDiretideCandy_PlayerCandy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchDiretideCandy_PlayerCandy*>(&to_msg);
  auto& from = static_cast<const CMsgMatchDiretideCandy_PlayerCandy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.candy_breakdown_.MergeFrom(from._impl_.candy_breakdown_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.candy_amount_ = from._impl_.candy_amount_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.consumes_periodic_resource_ = from._impl_.consumes_periodic_resource_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchDiretideCandy_PlayerCandy::CopyFrom(const CMsgMatchDiretideCandy_PlayerCandy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy.PlayerCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy_PlayerCandy::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy_PlayerCandy::InternalSwap(CMsgMatchDiretideCandy_PlayerCandy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.candy_breakdown_.InternalSwap(&other->_impl_.candy_breakdown_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_PlayerCandy, _impl_.consumes_periodic_resource_)
      + sizeof(CMsgMatchDiretideCandy_PlayerCandy::_impl_.consumes_periodic_resource_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchDiretideCandy_PlayerCandy, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy_PlayerCandy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[149]);
}

// ===================================================================

class CMsgMatchDiretideCandy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchDiretideCandy>()._impl_._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchDiretideCandy)
}
CMsgMatchDiretideCandy::CMsgMatchDiretideCandy(const CMsgMatchDiretideCandy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgMatchDiretideCandy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_candy_data_){from._impl_.player_candy_data_}
    , decltype(_impl_.event_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_id_ = from._impl_.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchDiretideCandy)
}

inline void CMsgMatchDiretideCandy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_candy_data_){arena}
    , decltype(_impl_.event_id_){0}
  };
}

CMsgMatchDiretideCandy::~CMsgMatchDiretideCandy() {
  // @@protoc_insertion_point(destructor:CMsgMatchDiretideCandy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgMatchDiretideCandy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_candy_data_.~RepeatedPtrField();
}

void CMsgMatchDiretideCandy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgMatchDiretideCandy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchDiretideCandy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_candy_data_.Clear();
  _impl_.event_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchDiretideCandy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_candy_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgMatchDiretideCandy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchDiretideCandy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_candy_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_candy_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchDiretideCandy)
  return target;
}

size_t CMsgMatchDiretideCandy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchDiretideCandy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchDiretideCandy.PlayerCandy player_candy_data = 1;
  total_size += 1UL * this->_internal_player_candy_data_size();
  for (const auto& msg : this->_impl_.player_candy_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_event_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgMatchDiretideCandy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgMatchDiretideCandy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgMatchDiretideCandy::GetClassData() const { return &_class_data_; }


void CMsgMatchDiretideCandy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgMatchDiretideCandy*>(&to_msg);
  auto& from = static_cast<const CMsgMatchDiretideCandy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchDiretideCandy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_candy_data_.MergeFrom(from._impl_.player_candy_data_);
  if (from._internal_has_event_id()) {
    _this->_internal_set_event_id(from._internal_event_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgMatchDiretideCandy::CopyFrom(const CMsgMatchDiretideCandy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchDiretideCandy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchDiretideCandy::IsInitialized() const {
  return true;
}

void CMsgMatchDiretideCandy::InternalSwap(CMsgMatchDiretideCandy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_candy_data_.InternalSwap(&other->_impl_.player_candy_data_);
  swap(_impl_.event_id_, other->_impl_.event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchDiretideCandy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[150]);
}

// ===================================================================

class CMsgGCToServerCheerData_CheerTypeCount::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCheerData_CheerTypeCount>()._impl_._has_bits_);
  static void set_has_cheer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerData.CheerTypeCount)
}
CMsgGCToServerCheerData_CheerTypeCount::CMsgGCToServerCheerData_CheerTypeCount(const CMsgGCToServerCheerData_CheerTypeCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerCheerData_CheerTypeCount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_type_){}
    , decltype(_impl_.cheer_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cheer_type_, &from._impl_.cheer_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cheer_count_) -
    reinterpret_cast<char*>(&_impl_.cheer_type_)) + sizeof(_impl_.cheer_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerData.CheerTypeCount)
}

inline void CMsgGCToServerCheerData_CheerTypeCount::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_type_){0u}
    , decltype(_impl_.cheer_count_){0u}
  };
}

CMsgGCToServerCheerData_CheerTypeCount::~CMsgGCToServerCheerData_CheerTypeCount() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerData.CheerTypeCount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerCheerData_CheerTypeCount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerCheerData_CheerTypeCount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerCheerData_CheerTypeCount::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerData.CheerTypeCount)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.cheer_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheer_count_) -
        reinterpret_cast<char*>(&_impl_.cheer_type_)) + sizeof(_impl_.cheer_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerData_CheerTypeCount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 cheer_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cheer_type(&has_bits);
          _impl_.cheer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheer_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cheer_count(&has_bits);
          _impl_.cheer_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerCheerData_CheerTypeCount::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerData.CheerTypeCount)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cheer_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_type(), target);
  }

  // optional uint32 cheer_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cheer_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerData.CheerTypeCount)
  return target;
}

size_t CMsgGCToServerCheerData_CheerTypeCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerData.CheerTypeCount)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 cheer_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheer_type());
    }

    // optional uint32 cheer_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheer_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerCheerData_CheerTypeCount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerCheerData_CheerTypeCount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerCheerData_CheerTypeCount::GetClassData() const { return &_class_data_; }


void CMsgGCToServerCheerData_CheerTypeCount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerCheerData_CheerTypeCount*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerCheerData_CheerTypeCount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cheer_type_ = from._impl_.cheer_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cheer_count_ = from._impl_.cheer_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerCheerData_CheerTypeCount::CopyFrom(const CMsgGCToServerCheerData_CheerTypeCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerData.CheerTypeCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerData_CheerTypeCount::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerData_CheerTypeCount::InternalSwap(CMsgGCToServerCheerData_CheerTypeCount* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData_CheerTypeCount, _impl_.cheer_count_)
      + sizeof(CMsgGCToServerCheerData_CheerTypeCount::_impl_.cheer_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToServerCheerData_CheerTypeCount, _impl_.cheer_type_)>(
          reinterpret_cast<char*>(&_impl_.cheer_type_),
          reinterpret_cast<char*>(&other->_impl_.cheer_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerData_CheerTypeCount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[151]);
}

// ===================================================================

class CMsgGCToServerCheerData::_Internal {
 public:
};

CMsgGCToServerCheerData::CMsgGCToServerCheerData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerData)
}
CMsgGCToServerCheerData::CMsgGCToServerCheerData(const CMsgGCToServerCheerData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerCheerData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cheer_types_){from._impl_.cheer_types_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerData)
}

inline void CMsgGCToServerCheerData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cheer_types_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToServerCheerData::~CMsgGCToServerCheerData() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerCheerData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_types_.~RepeatedPtrField();
}

void CMsgGCToServerCheerData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerCheerData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerCheerData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cheer_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_cheer_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerData)
  return target;
}

size_t CMsgGCToServerCheerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCToServerCheerData.CheerTypeCount cheer_types = 1;
  total_size += 1UL * this->_internal_cheer_types_size();
  for (const auto& msg : this->_impl_.cheer_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerCheerData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerCheerData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerCheerData::GetClassData() const { return &_class_data_; }


void CMsgGCToServerCheerData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerCheerData*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerCheerData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_types_.MergeFrom(from._impl_.cheer_types_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerCheerData::CopyFrom(const CMsgGCToServerCheerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerData::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerData::InternalSwap(CMsgGCToServerCheerData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cheer_types_.InternalSwap(&other->_impl_.cheer_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[152]);
}

// ===================================================================

class CMsgCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerConfig>()._impl_._has_bits_);
  static void set_has_cheers_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_valid_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_window_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_window_bucket_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_crowd_level_push_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crowd_level_low(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crowd_level_medium(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_crowd_level_high(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cheer_scale_start(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cheer_scale_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cheer_scale_push_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_cheer_scale_pull_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cheer_scale_pct_of_max_cps_clamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cheer_scale_dampener_value(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_cheer_scale_dampener_lerp_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_cheer_factor_bronze(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_cheer_factor_silver(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cheer_factor_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgCheerConfig::CMsgCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerConfig)
}
CMsgCheerConfig::CMsgCheerConfig(const CMsgCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCheerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheers_enabled_){}
    , decltype(_impl_.is_valid_league_id_){}
    , decltype(_impl_.window_duration_){}
    , decltype(_impl_.window_bucket_count_){}
    , decltype(_impl_.crowd_level_push_time_){}
    , decltype(_impl_.crowd_level_low_){}
    , decltype(_impl_.crowd_level_medium_){}
    , decltype(_impl_.crowd_level_high_){}
    , decltype(_impl_.cheer_scale_start_){}
    , decltype(_impl_.cheer_scale_speed_){}
    , decltype(_impl_.cheer_scale_push_mark_){}
    , decltype(_impl_.cheer_scale_pull_mark_){}
    , decltype(_impl_.cheer_scale_pct_of_max_cps_clamp_){}
    , decltype(_impl_.cheer_factor_bronze_){}
    , decltype(_impl_.cheer_factor_silver_){}
    , decltype(_impl_.cheer_factor_gold_){}
    , decltype(_impl_.cheer_scale_dampener_value_){}
    , decltype(_impl_.cheer_scale_dampener_lerp_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cheers_enabled_, &from._impl_.cheers_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cheer_scale_dampener_lerp_time_) -
    reinterpret_cast<char*>(&_impl_.cheers_enabled_)) + sizeof(_impl_.cheer_scale_dampener_lerp_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerConfig)
}

inline void CMsgCheerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheers_enabled_){false}
    , decltype(_impl_.is_valid_league_id_){false}
    , decltype(_impl_.window_duration_){0}
    , decltype(_impl_.window_bucket_count_){0u}
    , decltype(_impl_.crowd_level_push_time_){0}
    , decltype(_impl_.crowd_level_low_){0u}
    , decltype(_impl_.crowd_level_medium_){0u}
    , decltype(_impl_.crowd_level_high_){0u}
    , decltype(_impl_.cheer_scale_start_){0}
    , decltype(_impl_.cheer_scale_speed_){0}
    , decltype(_impl_.cheer_scale_push_mark_){0u}
    , decltype(_impl_.cheer_scale_pull_mark_){0u}
    , decltype(_impl_.cheer_scale_pct_of_max_cps_clamp_){0}
    , decltype(_impl_.cheer_factor_bronze_){0}
    , decltype(_impl_.cheer_factor_silver_){0}
    , decltype(_impl_.cheer_factor_gold_){0}
    , decltype(_impl_.cheer_scale_dampener_value_){0}
    , decltype(_impl_.cheer_scale_dampener_lerp_time_){0u}
  };
}

CMsgCheerConfig::~CMsgCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgCheerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgCheerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.cheers_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crowd_level_high_) -
        reinterpret_cast<char*>(&_impl_.cheers_enabled_)) + sizeof(_impl_.crowd_level_high_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.cheer_scale_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheer_factor_gold_) -
        reinterpret_cast<char*>(&_impl_.cheer_scale_start_)) + sizeof(_impl_.cheer_factor_gold_));
  }
  if (cached_has_bits & 0x00030000u) {
    ::memset(&_impl_.cheer_scale_dampener_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cheer_scale_dampener_lerp_time_) -
        reinterpret_cast<char*>(&_impl_.cheer_scale_dampener_value_)) + sizeof(_impl_.cheer_scale_dampener_lerp_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool cheers_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cheers_enabled(&has_bits);
          _impl_.cheers_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_valid_league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_valid_league_id(&has_bits);
          _impl_.is_valid_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float window_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_window_duration(&has_bits);
          _impl_.window_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 window_bucket_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_window_bucket_count(&has_bits);
          _impl_.window_bucket_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float crowd_level_push_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_crowd_level_push_time(&has_bits);
          _impl_.crowd_level_push_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crowd_level_low = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_crowd_level_low(&has_bits);
          _impl_.crowd_level_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crowd_level_medium = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_crowd_level_medium(&has_bits);
          _impl_.crowd_level_medium_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 crowd_level_high = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_crowd_level_high(&has_bits);
          _impl_.crowd_level_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_scale_start = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_cheer_scale_start(&has_bits);
          _impl_.cheer_scale_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_scale_speed = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_cheer_scale_speed(&has_bits);
          _impl_.cheer_scale_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_push_mark = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_cheer_scale_push_mark(&has_bits);
          _impl_.cheer_scale_push_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_pull_mark = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_cheer_scale_pull_mark(&has_bits);
          _impl_.cheer_scale_pull_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_scale_pct_of_max_cps_clamp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_cheer_scale_pct_of_max_cps_clamp(&has_bits);
          _impl_.cheer_scale_pct_of_max_cps_clamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_factor_bronze = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_cheer_factor_bronze(&has_bits);
          _impl_.cheer_factor_bronze_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_factor_silver = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_cheer_factor_silver(&has_bits);
          _impl_.cheer_factor_silver_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_factor_gold = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_cheer_factor_gold(&has_bits);
          _impl_.cheer_factor_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_scale_dampener_value = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_cheer_scale_dampener_value(&has_bits);
          _impl_.cheer_scale_dampener_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cheer_scale_dampener_lerp_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_cheer_scale_dampener_lerp_time(&has_bits);
          _impl_.cheer_scale_dampener_lerp_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCheerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool cheers_enabled = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_cheers_enabled(), target);
  }

  // optional bool is_valid_league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_valid_league_id(), target);
  }

  // optional float window_duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_window_duration(), target);
  }

  // optional uint32 window_bucket_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_window_bucket_count(), target);
  }

  // optional float crowd_level_push_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_crowd_level_push_time(), target);
  }

  // optional uint32 crowd_level_low = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_crowd_level_low(), target);
  }

  // optional uint32 crowd_level_medium = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crowd_level_medium(), target);
  }

  // optional uint32 crowd_level_high = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_crowd_level_high(), target);
  }

  // optional float cheer_scale_start = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_cheer_scale_start(), target);
  }

  // optional float cheer_scale_speed = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_cheer_scale_speed(), target);
  }

  // optional uint32 cheer_scale_push_mark = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_cheer_scale_push_mark(), target);
  }

  // optional uint32 cheer_scale_pull_mark = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_cheer_scale_pull_mark(), target);
  }

  // optional float cheer_scale_pct_of_max_cps_clamp = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_cheer_scale_pct_of_max_cps_clamp(), target);
  }

  // optional float cheer_factor_bronze = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_cheer_factor_bronze(), target);
  }

  // optional float cheer_factor_silver = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_cheer_factor_silver(), target);
  }

  // optional float cheer_factor_gold = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_cheer_factor_gold(), target);
  }

  // optional float cheer_scale_dampener_value = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_cheer_scale_dampener_value(), target);
  }

  // optional uint32 cheer_scale_dampener_lerp_time = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_cheer_scale_dampener_lerp_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerConfig)
  return target;
}

size_t CMsgCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool cheers_enabled = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool is_valid_league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional float window_duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 window_bucket_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_window_bucket_count());
    }

    // optional float crowd_level_push_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 crowd_level_low = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crowd_level_low());
    }

    // optional uint32 crowd_level_medium = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crowd_level_medium());
    }

    // optional uint32 crowd_level_high = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_crowd_level_high());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float cheer_scale_start = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float cheer_scale_speed = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional uint32 cheer_scale_push_mark = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cheer_scale_push_mark());
    }

    // optional uint32 cheer_scale_pull_mark = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cheer_scale_pull_mark());
    }

    // optional float cheer_scale_pct_of_max_cps_clamp = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_factor_bronze = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_factor_silver = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float cheer_factor_gold = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional float cheer_scale_dampener_value = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional uint32 cheer_scale_dampener_lerp_time = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_cheer_scale_dampener_lerp_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCheerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCheerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCheerConfig::GetClassData() const { return &_class_data_; }


void CMsgCheerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCheerConfig*>(&to_msg);
  auto& from = static_cast<const CMsgCheerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.cheers_enabled_ = from._impl_.cheers_enabled_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_valid_league_id_ = from._impl_.is_valid_league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.window_duration_ = from._impl_.window_duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.window_bucket_count_ = from._impl_.window_bucket_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crowd_level_push_time_ = from._impl_.crowd_level_push_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.crowd_level_low_ = from._impl_.crowd_level_low_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.crowd_level_medium_ = from._impl_.crowd_level_medium_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.crowd_level_high_ = from._impl_.crowd_level_high_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.cheer_scale_start_ = from._impl_.cheer_scale_start_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.cheer_scale_speed_ = from._impl_.cheer_scale_speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.cheer_scale_push_mark_ = from._impl_.cheer_scale_push_mark_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.cheer_scale_pull_mark_ = from._impl_.cheer_scale_pull_mark_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.cheer_scale_pct_of_max_cps_clamp_ = from._impl_.cheer_scale_pct_of_max_cps_clamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.cheer_factor_bronze_ = from._impl_.cheer_factor_bronze_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.cheer_factor_silver_ = from._impl_.cheer_factor_silver_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.cheer_factor_gold_ = from._impl_.cheer_factor_gold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.cheer_scale_dampener_value_ = from._impl_.cheer_scale_dampener_value_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.cheer_scale_dampener_lerp_time_ = from._impl_.cheer_scale_dampener_lerp_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCheerConfig::CopyFrom(const CMsgCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerConfig::IsInitialized() const {
  return true;
}

void CMsgCheerConfig::InternalSwap(CMsgCheerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerConfig, _impl_.cheer_scale_dampener_lerp_time_)
      + sizeof(CMsgCheerConfig::_impl_.cheer_scale_dampener_lerp_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerConfig, _impl_.cheers_enabled_)>(
          reinterpret_cast<char*>(&_impl_.cheers_enabled_),
          reinterpret_cast<char*>(&other->_impl_.cheers_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[153]);
}

// ===================================================================

class CMsgGCToServerCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerCheerConfig>()._impl_._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgGCToServerCheerConfig* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCheerConfig&
CMsgGCToServerCheerConfig::_Internal::cheer_config(const CMsgGCToServerCheerConfig* msg) {
  return *msg->_impl_.cheer_config_;
}
CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerConfig)
}
CMsgGCToServerCheerConfig::CMsgGCToServerCheerConfig(const CMsgGCToServerCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerCheerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    _this->_impl_.cheer_config_ = new ::CMsgCheerConfig(*from._impl_.cheer_config_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerConfig)
}

inline void CMsgGCToServerCheerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}
  };
}

CMsgGCToServerCheerConfig::~CMsgGCToServerCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cheer_config_;
}

void CMsgGCToServerCheerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cheer_config_ != nullptr);
    _impl_.cheer_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerCheerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cheer_config(this),
        _Internal::cheer_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerConfig)
  return target;
}

size_t CMsgGCToServerCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCheerConfig cheer_config = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cheer_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerCheerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerCheerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerCheerConfig::GetClassData() const { return &_class_data_; }


void CMsgGCToServerCheerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerCheerConfig*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerCheerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cheer_config()) {
    _this->_internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(
        from._internal_cheer_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerCheerConfig::CopyFrom(const CMsgGCToServerCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerConfig::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerConfig::InternalSwap(CMsgGCToServerCheerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cheer_config_, other->_impl_.cheer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[154]);
}

// ===================================================================

class CMsgServerToGCGetCheerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetCheerConfig>()._impl_._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetCheerConfig)
}
CMsgServerToGCGetCheerConfig::CMsgServerToGCGetCheerConfig(const CMsgServerToGCGetCheerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetCheerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.league_id_ = from._impl_.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetCheerConfig)
}

inline void CMsgServerToGCGetCheerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.league_id_){0u}
  };
}

CMsgServerToGCGetCheerConfig::~CMsgServerToGCGetCheerConfig() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetCheerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetCheerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgServerToGCGetCheerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetCheerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetCheerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.league_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetCheerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetCheerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetCheerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetCheerConfig)
  return target;
}

size_t CMsgServerToGCGetCheerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetCheerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 league_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetCheerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetCheerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetCheerConfig::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetCheerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetCheerConfig*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetCheerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetCheerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_league_id()) {
    _this->_internal_set_league_id(from._internal_league_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetCheerConfig::CopyFrom(const CMsgServerToGCGetCheerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetCheerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetCheerConfig::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetCheerConfig::InternalSwap(CMsgServerToGCGetCheerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.league_id_, other->_impl_.league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetCheerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[155]);
}

// ===================================================================

class CMsgServerToGCGetCheerConfigResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetCheerConfigResponse>()._impl_._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgServerToGCGetCheerConfigResponse* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgCheerConfig&
CMsgServerToGCGetCheerConfigResponse::_Internal::cheer_config(const CMsgServerToGCGetCheerConfigResponse* msg) {
  return *msg->_impl_.cheer_config_;
}
CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetCheerConfigResponse)
}
CMsgServerToGCGetCheerConfigResponse::CMsgServerToGCGetCheerConfigResponse(const CMsgServerToGCGetCheerConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetCheerConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    _this->_impl_.cheer_config_ = new ::CMsgCheerConfig(*from._impl_.cheer_config_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetCheerConfigResponse)
}

inline void CMsgServerToGCGetCheerConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}
  };
}

CMsgServerToGCGetCheerConfigResponse::~CMsgServerToGCGetCheerConfigResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetCheerConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetCheerConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cheer_config_;
}

void CMsgServerToGCGetCheerConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetCheerConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetCheerConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cheer_config_ != nullptr);
    _impl_.cheer_config_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetCheerConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetCheerConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetCheerConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cheer_config(this),
        _Internal::cheer_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetCheerConfigResponse)
  return target;
}

size_t CMsgServerToGCGetCheerConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetCheerConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgCheerConfig cheer_config = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cheer_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetCheerConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetCheerConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetCheerConfigResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetCheerConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetCheerConfigResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetCheerConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetCheerConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cheer_config()) {
    _this->_internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(
        from._internal_cheer_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetCheerConfigResponse::CopyFrom(const CMsgServerToGCGetCheerConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetCheerConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetCheerConfigResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetCheerConfigResponse::InternalSwap(CMsgServerToGCGetCheerConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cheer_config_, other->_impl_.cheer_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetCheerConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[156]);
}

// ===================================================================

class CMsgGCToServerCheerScalesOverride::_Internal {
 public:
};

CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerCheerScalesOverride)
}
CMsgGCToServerCheerScalesOverride::CMsgGCToServerCheerScalesOverride(const CMsgGCToServerCheerScalesOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerCheerScalesOverride* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scales_){from._impl_.scales_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerCheerScalesOverride)
}

inline void CMsgGCToServerCheerScalesOverride::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scales_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgGCToServerCheerScalesOverride::~CMsgGCToServerCheerScalesOverride() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerCheerScalesOverride)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerCheerScalesOverride::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scales_.~RepeatedField();
}

void CMsgGCToServerCheerScalesOverride::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerCheerScalesOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerCheerScalesOverride)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scales_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerCheerScalesOverride::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float scales = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_scales(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scales(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerCheerScalesOverride::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerCheerScalesOverride)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float scales = 1;
  for (int i = 0, n = this->_internal_scales_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_scales(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerCheerScalesOverride)
  return target;
}

size_t CMsgGCToServerCheerScalesOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerCheerScalesOverride)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float scales = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scales_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_scales_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerCheerScalesOverride::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerCheerScalesOverride::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerCheerScalesOverride::GetClassData() const { return &_class_data_; }


void CMsgGCToServerCheerScalesOverride::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerCheerScalesOverride*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerCheerScalesOverride&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerCheerScalesOverride)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.scales_.MergeFrom(from._impl_.scales_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerCheerScalesOverride::CopyFrom(const CMsgGCToServerCheerScalesOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerCheerScalesOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerCheerScalesOverride::IsInitialized() const {
  return true;
}

void CMsgGCToServerCheerScalesOverride::InternalSwap(CMsgGCToServerCheerScalesOverride* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.scales_.InternalSwap(&other->_impl_.scales_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerCheerScalesOverride::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[157]);
}

// ===================================================================

class CMsgGCToServerGetCheerState::_Internal {
 public:
};

CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerGetCheerState)
}
CMsgGCToServerGetCheerState::CMsgGCToServerGetCheerState(const CMsgGCToServerGetCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToServerGetCheerState* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerGetCheerState)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerGetCheerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerGetCheerState::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerGetCheerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[158]);
}

// ===================================================================

class CMsgCheerTypeState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerTypeState>()._impl_._has_bits_);
  static void set_has_max_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cheer_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_override_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgCheerTypeState::CMsgCheerTypeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerTypeState)
}
CMsgCheerTypeState::CMsgCheerTypeState(const CMsgCheerTypeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCheerTypeState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_counts_){from._impl_.cheer_counts_}
    , decltype(_impl_.max_per_second_){}
    , decltype(_impl_.cheer_scale_){}
    , decltype(_impl_.override_scale_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.max_per_second_, &from._impl_.max_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.override_scale_) -
    reinterpret_cast<char*>(&_impl_.max_per_second_)) + sizeof(_impl_.override_scale_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerTypeState)
}

inline void CMsgCheerTypeState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_counts_){arena}
    , decltype(_impl_.max_per_second_){0}
    , decltype(_impl_.cheer_scale_){0}
    , decltype(_impl_.override_scale_){0}
  };
}

CMsgCheerTypeState::~CMsgCheerTypeState() {
  // @@protoc_insertion_point(destructor:CMsgCheerTypeState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCheerTypeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_counts_.~RepeatedField();
}

void CMsgCheerTypeState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCheerTypeState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerTypeState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_counts_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.max_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.override_scale_) -
        reinterpret_cast<char*>(&_impl_.max_per_second_)) + sizeof(_impl_.override_scale_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerTypeState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 cheer_counts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cheer_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cheer_counts(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float max_per_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_max_per_second(&has_bits);
          _impl_.max_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float cheer_scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_cheer_scale(&has_bits);
          _impl_.cheer_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float override_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_override_scale(&has_bits);
          _impl_.override_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCheerTypeState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerTypeState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cheer_counts = 1;
  for (int i = 0, n = this->_internal_cheer_counts_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cheer_counts(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional float max_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_max_per_second(), target);
  }

  // optional float cheer_scale = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_cheer_scale(), target);
  }

  // optional float override_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_override_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerTypeState)
  return target;
}

size_t CMsgCheerTypeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerTypeState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cheer_counts = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.cheer_counts_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cheer_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float max_per_second = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float cheer_scale = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float override_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCheerTypeState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCheerTypeState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCheerTypeState::GetClassData() const { return &_class_data_; }


void CMsgCheerTypeState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCheerTypeState*>(&to_msg);
  auto& from = static_cast<const CMsgCheerTypeState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerTypeState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_counts_.MergeFrom(from._impl_.cheer_counts_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.max_per_second_ = from._impl_.max_per_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cheer_scale_ = from._impl_.cheer_scale_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.override_scale_ = from._impl_.override_scale_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCheerTypeState::CopyFrom(const CMsgCheerTypeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerTypeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerTypeState::IsInitialized() const {
  return true;
}

void CMsgCheerTypeState::InternalSwap(CMsgCheerTypeState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cheer_counts_.InternalSwap(&other->_impl_.cheer_counts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerTypeState, _impl_.override_scale_)
      + sizeof(CMsgCheerTypeState::_impl_.override_scale_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerTypeState, _impl_.max_per_second_)>(
          reinterpret_cast<char*>(&_impl_.max_per_second_),
          reinterpret_cast<char*>(&other->_impl_.max_per_second_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerTypeState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[159]);
}

// ===================================================================

class CMsgCheerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCheerState>()._impl_._has_bits_);
  static void set_has_radiant_crowd_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_crowd_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCheerState::CMsgCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCheerState)
}
CMsgCheerState::CMsgCheerState(const CMsgCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCheerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_){from._impl_.cheer_types_}
    , decltype(_impl_.radiant_crowd_level_){}
    , decltype(_impl_.dire_crowd_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.radiant_crowd_level_, &from._impl_.radiant_crowd_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dire_crowd_level_) -
    reinterpret_cast<char*>(&_impl_.radiant_crowd_level_)) + sizeof(_impl_.dire_crowd_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgCheerState)
}

inline void CMsgCheerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_types_){arena}
    , decltype(_impl_.radiant_crowd_level_){0u}
    , decltype(_impl_.dire_crowd_level_){0u}
  };
}

CMsgCheerState::~CMsgCheerState() {
  // @@protoc_insertion_point(destructor:CMsgCheerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCheerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cheer_types_.~RepeatedPtrField();
}

void CMsgCheerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCheerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCheerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cheer_types_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.radiant_crowd_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.dire_crowd_level_) -
        reinterpret_cast<char*>(&_impl_.radiant_crowd_level_)) + sizeof(_impl_.dire_crowd_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCheerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgCheerTypeState cheer_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cheer_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radiant_crowd_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_radiant_crowd_level(&has_bits);
          _impl_.radiant_crowd_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_crowd_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dire_crowd_level(&has_bits);
          _impl_.dire_crowd_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCheerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCheerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgCheerTypeState cheer_types = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cheer_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_cheer_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 radiant_crowd_level = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radiant_crowd_level(), target);
  }

  // optional uint32 dire_crowd_level = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dire_crowd_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCheerState)
  return target;
}

size_t CMsgCheerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCheerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCheerTypeState cheer_types = 1;
  total_size += 1UL * this->_internal_cheer_types_size();
  for (const auto& msg : this->_impl_.cheer_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 radiant_crowd_level = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_radiant_crowd_level());
    }

    // optional uint32 dire_crowd_level = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dire_crowd_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCheerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCheerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCheerState::GetClassData() const { return &_class_data_; }


void CMsgCheerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCheerState*>(&to_msg);
  auto& from = static_cast<const CMsgCheerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCheerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cheer_types_.MergeFrom(from._impl_.cheer_types_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.radiant_crowd_level_ = from._impl_.radiant_crowd_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.dire_crowd_level_ = from._impl_.dire_crowd_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCheerState::CopyFrom(const CMsgCheerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCheerState::IsInitialized() const {
  return true;
}

void CMsgCheerState::InternalSwap(CMsgCheerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cheer_types_.InternalSwap(&other->_impl_.cheer_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCheerState, _impl_.dire_crowd_level_)
      + sizeof(CMsgCheerState::_impl_.dire_crowd_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgCheerState, _impl_.radiant_crowd_level_)>(
          reinterpret_cast<char*>(&_impl_.radiant_crowd_level_),
          reinterpret_cast<char*>(&other->_impl_.radiant_crowd_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCheerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[160]);
}

// ===================================================================

class CMsgServerToGCReportCheerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCReportCheerState>()._impl_._has_bits_);
  static const ::CMsgCheerConfig& cheer_config(const CMsgServerToGCReportCheerState* msg);
  static void set_has_cheer_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgCheerState& cheer_state(const CMsgServerToGCReportCheerState* msg);
  static void set_has_cheer_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgCheerConfig&
CMsgServerToGCReportCheerState::_Internal::cheer_config(const CMsgServerToGCReportCheerState* msg) {
  return *msg->_impl_.cheer_config_;
}
const ::CMsgCheerState&
CMsgServerToGCReportCheerState::_Internal::cheer_state(const CMsgServerToGCReportCheerState* msg) {
  return *msg->_impl_.cheer_state_;
}
CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCReportCheerState)
}
CMsgServerToGCReportCheerState::CMsgServerToGCReportCheerState(const CMsgServerToGCReportCheerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCReportCheerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}
    , decltype(_impl_.cheer_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cheer_config()) {
    _this->_impl_.cheer_config_ = new ::CMsgCheerConfig(*from._impl_.cheer_config_);
  }
  if (from._internal_has_cheer_state()) {
    _this->_impl_.cheer_state_ = new ::CMsgCheerState(*from._impl_.cheer_state_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCReportCheerState)
}

inline void CMsgServerToGCReportCheerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cheer_config_){nullptr}
    , decltype(_impl_.cheer_state_){nullptr}
  };
}

CMsgServerToGCReportCheerState::~CMsgServerToGCReportCheerState() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCReportCheerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCReportCheerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cheer_config_;
  if (this != internal_default_instance()) delete _impl_.cheer_state_;
}

void CMsgServerToGCReportCheerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCReportCheerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCReportCheerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cheer_config_ != nullptr);
      _impl_.cheer_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cheer_state_ != nullptr);
      _impl_.cheer_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCReportCheerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgCheerConfig cheer_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgCheerState cheer_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cheer_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCReportCheerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCReportCheerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgCheerConfig cheer_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cheer_config(this),
        _Internal::cheer_config(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgCheerState cheer_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cheer_state(this),
        _Internal::cheer_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCReportCheerState)
  return target;
}

size_t CMsgServerToGCReportCheerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCReportCheerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgCheerConfig cheer_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cheer_config_);
    }

    // optional .CMsgCheerState cheer_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cheer_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCReportCheerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCReportCheerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCReportCheerState::GetClassData() const { return &_class_data_; }


void CMsgServerToGCReportCheerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCReportCheerState*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCReportCheerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCReportCheerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cheer_config()->::CMsgCheerConfig::MergeFrom(
          from._internal_cheer_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cheer_state()->::CMsgCheerState::MergeFrom(
          from._internal_cheer_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCReportCheerState::CopyFrom(const CMsgServerToGCReportCheerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCReportCheerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCReportCheerState::IsInitialized() const {
  return true;
}

void CMsgServerToGCReportCheerState::InternalSwap(CMsgServerToGCReportCheerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheerState, _impl_.cheer_state_)
      + sizeof(CMsgServerToGCReportCheerState::_impl_.cheer_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCReportCheerState, _impl_.cheer_config_)>(
          reinterpret_cast<char*>(&_impl_.cheer_config_),
          reinterpret_cast<char*>(&other->_impl_.cheer_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCReportCheerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[161]);
}

// ===================================================================

class CMsgServerToGCGetStickerHeroes::_Internal {
 public:
};

CMsgServerToGCGetStickerHeroes::CMsgServerToGCGetStickerHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetStickerHeroes)
}
CMsgServerToGCGetStickerHeroes::CMsgServerToGCGetStickerHeroes(const CMsgServerToGCGetStickerHeroes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetStickerHeroes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_ids_){from._impl_.account_ids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetStickerHeroes)
}

inline void CMsgServerToGCGetStickerHeroes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.account_ids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCGetStickerHeroes::~CMsgServerToGCGetStickerHeroes() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetStickerHeroes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetStickerHeroes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_ids_.~RepeatedField();
}

void CMsgServerToGCGetStickerHeroes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetStickerHeroes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetStickerHeroes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetStickerHeroes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetStickerHeroes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetStickerHeroes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetStickerHeroes)
  return target;
}

size_t CMsgServerToGCGetStickerHeroes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetStickerHeroes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.account_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetStickerHeroes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetStickerHeroes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetStickerHeroes::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetStickerHeroes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetStickerHeroes*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetStickerHeroes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetStickerHeroes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.account_ids_.MergeFrom(from._impl_.account_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetStickerHeroes::CopyFrom(const CMsgServerToGCGetStickerHeroes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetStickerHeroes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetStickerHeroes::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetStickerHeroes::InternalSwap(CMsgServerToGCGetStickerHeroes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.account_ids_.InternalSwap(&other->_impl_.account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetStickerHeroes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[162]);
}

// ===================================================================

class CMsgServerToGCGetStickerHeroesResponse_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCGetStickerHeroesResponse_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgStickerHeroes& stickers(const CMsgServerToGCGetStickerHeroesResponse_Player* msg);
  static void set_has_stickers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgStickerHeroes&
CMsgServerToGCGetStickerHeroesResponse_Player::_Internal::stickers(const CMsgServerToGCGetStickerHeroesResponse_Player* msg) {
  return *msg->_impl_.stickers_;
}
void CMsgServerToGCGetStickerHeroesResponse_Player::clear_stickers() {
  if (_impl_.stickers_ != nullptr) _impl_.stickers_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgServerToGCGetStickerHeroesResponse_Player::CMsgServerToGCGetStickerHeroesResponse_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetStickerHeroesResponse.Player)
}
CMsgServerToGCGetStickerHeroesResponse_Player::CMsgServerToGCGetStickerHeroesResponse_Player(const CMsgServerToGCGetStickerHeroesResponse_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetStickerHeroesResponse_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stickers_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stickers()) {
    _this->_impl_.stickers_ = new ::CMsgStickerHeroes(*from._impl_.stickers_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetStickerHeroesResponse.Player)
}

inline void CMsgServerToGCGetStickerHeroesResponse_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stickers_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgServerToGCGetStickerHeroesResponse_Player::~CMsgServerToGCGetStickerHeroesResponse_Player() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetStickerHeroesResponse.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetStickerHeroesResponse_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stickers_;
}

void CMsgServerToGCGetStickerHeroesResponse_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetStickerHeroesResponse_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetStickerHeroesResponse.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stickers_ != nullptr);
    _impl_.stickers_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetStickerHeroesResponse_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgStickerHeroes stickers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stickers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetStickerHeroesResponse_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetStickerHeroesResponse.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgStickerHeroes stickers = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stickers(this),
        _Internal::stickers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetStickerHeroesResponse.Player)
  return target;
}

size_t CMsgServerToGCGetStickerHeroesResponse_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetStickerHeroesResponse.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgStickerHeroes stickers = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stickers_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetStickerHeroesResponse_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetStickerHeroesResponse_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetStickerHeroesResponse_Player::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetStickerHeroesResponse_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetStickerHeroesResponse_Player*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetStickerHeroesResponse_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetStickerHeroesResponse.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stickers()->::CMsgStickerHeroes::MergeFrom(
          from._internal_stickers());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetStickerHeroesResponse_Player::CopyFrom(const CMsgServerToGCGetStickerHeroesResponse_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetStickerHeroesResponse.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetStickerHeroesResponse_Player::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetStickerHeroesResponse_Player::InternalSwap(CMsgServerToGCGetStickerHeroesResponse_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetStickerHeroesResponse_Player, _impl_.account_id_)
      + sizeof(CMsgServerToGCGetStickerHeroesResponse_Player::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCGetStickerHeroesResponse_Player, _impl_.stickers_)>(
          reinterpret_cast<char*>(&_impl_.stickers_),
          reinterpret_cast<char*>(&other->_impl_.stickers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetStickerHeroesResponse_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[163]);
}

// ===================================================================

class CMsgServerToGCGetStickerHeroesResponse::_Internal {
 public:
};

CMsgServerToGCGetStickerHeroesResponse::CMsgServerToGCGetStickerHeroesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCGetStickerHeroesResponse)
}
CMsgServerToGCGetStickerHeroesResponse::CMsgServerToGCGetStickerHeroesResponse(const CMsgServerToGCGetStickerHeroesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgServerToGCGetStickerHeroesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCGetStickerHeroesResponse)
}

inline void CMsgServerToGCGetStickerHeroesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgServerToGCGetStickerHeroesResponse::~CMsgServerToGCGetStickerHeroesResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCGetStickerHeroesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgServerToGCGetStickerHeroesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void CMsgServerToGCGetStickerHeroesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgServerToGCGetStickerHeroesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCGetStickerHeroesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCGetStickerHeroesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgServerToGCGetStickerHeroesResponse.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgServerToGCGetStickerHeroesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCGetStickerHeroesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetStickerHeroesResponse.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCGetStickerHeroesResponse)
  return target;
}

size_t CMsgServerToGCGetStickerHeroesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCGetStickerHeroesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgServerToGCGetStickerHeroesResponse.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgServerToGCGetStickerHeroesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgServerToGCGetStickerHeroesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgServerToGCGetStickerHeroesResponse::GetClassData() const { return &_class_data_; }


void CMsgServerToGCGetStickerHeroesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgServerToGCGetStickerHeroesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgServerToGCGetStickerHeroesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCGetStickerHeroesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgServerToGCGetStickerHeroesResponse::CopyFrom(const CMsgServerToGCGetStickerHeroesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCGetStickerHeroesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCGetStickerHeroesResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCGetStickerHeroesResponse::InternalSwap(CMsgServerToGCGetStickerHeroesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCGetStickerHeroesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[164]);
}

// ===================================================================

class CMsgGCToServerSetSteamLearnInferencing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerSetSteamLearnInferencing>()._impl_._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToServerSetSteamLearnInferencing::CMsgGCToServerSetSteamLearnInferencing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerSetSteamLearnInferencing)
}
CMsgGCToServerSetSteamLearnInferencing::CMsgGCToServerSetSteamLearnInferencing(const CMsgGCToServerSetSteamLearnInferencing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerSetSteamLearnInferencing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.enable_ = from._impl_.enable_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerSetSteamLearnInferencing)
}

inline void CMsgGCToServerSetSteamLearnInferencing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_){false}
  };
}

CMsgGCToServerSetSteamLearnInferencing::~CMsgGCToServerSetSteamLearnInferencing() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerSetSteamLearnInferencing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerSetSteamLearnInferencing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToServerSetSteamLearnInferencing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerSetSteamLearnInferencing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerSetSteamLearnInferencing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerSetSteamLearnInferencing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerSetSteamLearnInferencing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerSetSteamLearnInferencing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerSetSteamLearnInferencing)
  return target;
}

size_t CMsgGCToServerSetSteamLearnInferencing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerSetSteamLearnInferencing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerSetSteamLearnInferencing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerSetSteamLearnInferencing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerSetSteamLearnInferencing::GetClassData() const { return &_class_data_; }


void CMsgGCToServerSetSteamLearnInferencing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerSetSteamLearnInferencing*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerSetSteamLearnInferencing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerSetSteamLearnInferencing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enable()) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerSetSteamLearnInferencing::CopyFrom(const CMsgGCToServerSetSteamLearnInferencing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerSetSteamLearnInferencing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerSetSteamLearnInferencing::IsInitialized() const {
  return true;
}

void CMsgGCToServerSetSteamLearnInferencing::InternalSwap(CMsgGCToServerSetSteamLearnInferencing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.enable_, other->_impl_.enable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerSetSteamLearnInferencing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[165]);
}

// ===================================================================

class CMsgGCToServerSetSteamLearnKeysChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToServerSetSteamLearnKeysChanged>()._impl_._has_bits_);
  static const ::CMsgSteamLearnHMACKeys& keys(const CMsgGCToServerSetSteamLearnKeysChanged* msg);
  static void set_has_keys(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSteamLearnHMACKeys&
CMsgGCToServerSetSteamLearnKeysChanged::_Internal::keys(const CMsgGCToServerSetSteamLearnKeysChanged* msg) {
  return *msg->_impl_.keys_;
}
void CMsgGCToServerSetSteamLearnKeysChanged::clear_keys() {
  if (_impl_.keys_ != nullptr) _impl_.keys_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgGCToServerSetSteamLearnKeysChanged::CMsgGCToServerSetSteamLearnKeysChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToServerSetSteamLearnKeysChanged)
}
CMsgGCToServerSetSteamLearnKeysChanged::CMsgGCToServerSetSteamLearnKeysChanged(const CMsgGCToServerSetSteamLearnKeysChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToServerSetSteamLearnKeysChanged* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keys()) {
    _this->_impl_.keys_ = new ::CMsgSteamLearnHMACKeys(*from._impl_.keys_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCToServerSetSteamLearnKeysChanged)
}

inline void CMsgGCToServerSetSteamLearnKeysChanged::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.keys_){nullptr}
  };
}

CMsgGCToServerSetSteamLearnKeysChanged::~CMsgGCToServerSetSteamLearnKeysChanged() {
  // @@protoc_insertion_point(destructor:CMsgGCToServerSetSteamLearnKeysChanged)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToServerSetSteamLearnKeysChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.keys_;
}

void CMsgGCToServerSetSteamLearnKeysChanged::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToServerSetSteamLearnKeysChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToServerSetSteamLearnKeysChanged)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.keys_ != nullptr);
    _impl_.keys_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToServerSetSteamLearnKeysChanged::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSteamLearnHMACKeys keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keys(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToServerSetSteamLearnKeysChanged::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToServerSetSteamLearnKeysChanged)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamLearnHMACKeys keys = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::keys(this),
        _Internal::keys(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToServerSetSteamLearnKeysChanged)
  return target;
}

size_t CMsgGCToServerSetSteamLearnKeysChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToServerSetSteamLearnKeysChanged)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgSteamLearnHMACKeys keys = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keys_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToServerSetSteamLearnKeysChanged::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToServerSetSteamLearnKeysChanged::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToServerSetSteamLearnKeysChanged::GetClassData() const { return &_class_data_; }


void CMsgGCToServerSetSteamLearnKeysChanged::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToServerSetSteamLearnKeysChanged*>(&to_msg);
  auto& from = static_cast<const CMsgGCToServerSetSteamLearnKeysChanged&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToServerSetSteamLearnKeysChanged)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_keys()) {
    _this->_internal_mutable_keys()->::CMsgSteamLearnHMACKeys::MergeFrom(
        from._internal_keys());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToServerSetSteamLearnKeysChanged::CopyFrom(const CMsgGCToServerSetSteamLearnKeysChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToServerSetSteamLearnKeysChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToServerSetSteamLearnKeysChanged::IsInitialized() const {
  return true;
}

void CMsgGCToServerSetSteamLearnKeysChanged::InternalSwap(CMsgGCToServerSetSteamLearnKeysChanged* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.keys_, other->_impl_.keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToServerSetSteamLearnKeysChanged::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[166]);
}

// ===================================================================

class CMsgSteamLearnMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchInfo>()._impl_._has_bits_);
  static void set_has_average_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radiant_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamLearnMatchInfo::CMsgSteamLearnMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchInfo)
}
CMsgSteamLearnMatchInfo::CMsgSteamLearnMatchInfo(const CMsgSteamLearnMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_mmr_){}
    , decltype(_impl_.radiant_won_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.lobby_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.average_mmr_, &from._impl_.average_mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobby_type_) -
    reinterpret_cast<char*>(&_impl_.average_mmr_)) + sizeof(_impl_.lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchInfo)
}

inline void CMsgSteamLearnMatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_mmr_){0u}
    , decltype(_impl_.radiant_won_){false}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.lobby_type_){0u}
  };
}

CMsgSteamLearnMatchInfo::~CMsgSteamLearnMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSteamLearnMatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.average_mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_type_) -
        reinterpret_cast<char*>(&_impl_.average_mmr_)) + sizeof(_impl_.lobby_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 average_mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_average_mmr(&has_bits);
          _impl_.average_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool radiant_won = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_radiant_won(&has_bits);
          _impl_.radiant_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 average_mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_mmr(), target);
  }

  // optional bool radiant_won = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_radiant_won(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 game_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_mode(), target);
  }

  // optional uint32 lobby_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchInfo)
  return target;
}

size_t CMsgSteamLearnMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 average_mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_mmr());
    }

    // optional bool radiant_won = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 game_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional uint32 lobby_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchInfo::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchInfo*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.average_mmr_ = from._impl_.average_mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.radiant_won_ = from._impl_.radiant_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchInfo::CopyFrom(const CMsgSteamLearnMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchInfo::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchInfo::InternalSwap(CMsgSteamLearnMatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchInfo, _impl_.lobby_type_)
      + sizeof(CMsgSteamLearnMatchInfo::_impl_.lobby_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchInfo, _impl_.average_mmr_)>(
          reinterpret_cast<char*>(&_impl_.average_mmr_),
          reinterpret_cast<char*>(&other->_impl_.average_mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[167]);
}

// ===================================================================

class CMsgSteamLearnMatchInfoPlayer::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchInfoPlayer>()._impl_._has_bits_);
  static void set_has_average_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_won(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamLearnMatchInfoPlayer::CMsgSteamLearnMatchInfoPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchInfoPlayer)
}
CMsgSteamLearnMatchInfoPlayer::CMsgSteamLearnMatchInfoPlayer(const CMsgSteamLearnMatchInfoPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchInfoPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_mmr_){}
    , decltype(_impl_.team_won_){}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.lobby_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.average_mmr_, &from._impl_.average_mmr_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lobby_type_) -
    reinterpret_cast<char*>(&_impl_.average_mmr_)) + sizeof(_impl_.lobby_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchInfoPlayer)
}

inline void CMsgSteamLearnMatchInfoPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.average_mmr_){0u}
    , decltype(_impl_.team_won_){false}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.lobby_type_){0u}
  };
}

CMsgSteamLearnMatchInfoPlayer::~CMsgSteamLearnMatchInfoPlayer() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchInfoPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchInfoPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSteamLearnMatchInfoPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchInfoPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchInfoPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.average_mmr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lobby_type_) -
        reinterpret_cast<char*>(&_impl_.average_mmr_)) + sizeof(_impl_.lobby_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchInfoPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 average_mmr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_average_mmr(&has_bits);
          _impl_.average_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool team_won = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_team_won(&has_bits);
          _impl_.team_won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_lobby_type(&has_bits);
          _impl_.lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchInfoPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchInfoPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 average_mmr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_average_mmr(), target);
  }

  // optional bool team_won = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_team_won(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional uint32 game_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_mode(), target);
  }

  // optional uint32 lobby_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lobby_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchInfoPlayer)
  return target;
}

size_t CMsgSteamLearnMatchInfoPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchInfoPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 average_mmr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_average_mmr());
    }

    // optional bool team_won = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 game_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional uint32 lobby_type = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchInfoPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchInfoPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchInfoPlayer::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchInfoPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchInfoPlayer*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchInfoPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchInfoPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.average_mmr_ = from._impl_.average_mmr_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_won_ = from._impl_.team_won_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lobby_type_ = from._impl_.lobby_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchInfoPlayer::CopyFrom(const CMsgSteamLearnMatchInfoPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchInfoPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchInfoPlayer::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchInfoPlayer::InternalSwap(CMsgSteamLearnMatchInfoPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchInfoPlayer, _impl_.lobby_type_)
      + sizeof(CMsgSteamLearnMatchInfoPlayer::_impl_.lobby_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchInfoPlayer, _impl_.average_mmr_)>(
          reinterpret_cast<char*>(&_impl_.average_mmr_),
          reinterpret_cast<char*>(&other->_impl_.average_mmr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchInfoPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[168]);
}

// ===================================================================

class CMsgSteamLearnMatchHeroes::_Internal {
 public:
};

CMsgSteamLearnMatchHeroes::CMsgSteamLearnMatchHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchHeroes)
}
CMsgSteamLearnMatchHeroes::CMsgSteamLearnMatchHeroes(const CMsgSteamLearnMatchHeroes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchHeroes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.radiant_hero_ids_){from._impl_.radiant_hero_ids_}
    , decltype(_impl_.dire_hero_ids_){from._impl_.dire_hero_ids_}
    , decltype(_impl_.radiant_lanes_){from._impl_.radiant_lanes_}
    , decltype(_impl_.dire_lanes_){from._impl_.dire_lanes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchHeroes)
}

inline void CMsgSteamLearnMatchHeroes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.radiant_hero_ids_){arena}
    , decltype(_impl_.dire_hero_ids_){arena}
    , decltype(_impl_.radiant_lanes_){arena}
    , decltype(_impl_.dire_lanes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSteamLearnMatchHeroes::~CMsgSteamLearnMatchHeroes() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchHeroes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchHeroes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.radiant_hero_ids_.~RepeatedField();
  _impl_.dire_hero_ids_.~RepeatedField();
  _impl_.radiant_lanes_.~RepeatedField();
  _impl_.dire_lanes_.~RepeatedField();
}

void CMsgSteamLearnMatchHeroes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchHeroes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchHeroes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.radiant_hero_ids_.Clear();
  _impl_.dire_hero_ids_.Clear();
  _impl_.radiant_lanes_.Clear();
  _impl_.dire_lanes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchHeroes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 radiant_hero_ids = 1 [(.steamlearn_count) = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_radiant_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_radiant_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dire_hero_ids = 2 [(.steamlearn_count) = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dire_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dire_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 radiant_lanes = 3 [(.steamlearn_count) = 5];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_radiant_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_radiant_lanes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dire_lanes = 4 [(.steamlearn_count) = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dire_lanes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dire_lanes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchHeroes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchHeroes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 radiant_hero_ids = 1 [(.steamlearn_count) = 5];
  for (int i = 0, n = this->_internal_radiant_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_radiant_hero_ids(i), target);
  }

  // repeated uint32 dire_hero_ids = 2 [(.steamlearn_count) = 5];
  for (int i = 0, n = this->_internal_dire_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_dire_hero_ids(i), target);
  }

  // repeated uint32 radiant_lanes = 3 [(.steamlearn_count) = 5];
  for (int i = 0, n = this->_internal_radiant_lanes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_radiant_lanes(i), target);
  }

  // repeated uint32 dire_lanes = 4 [(.steamlearn_count) = 5];
  for (int i = 0, n = this->_internal_dire_lanes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dire_lanes(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchHeroes)
  return target;
}

size_t CMsgSteamLearnMatchHeroes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchHeroes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 radiant_hero_ids = 1 [(.steamlearn_count) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.radiant_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_radiant_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 dire_hero_ids = 2 [(.steamlearn_count) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dire_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dire_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 radiant_lanes = 3 [(.steamlearn_count) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.radiant_lanes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_radiant_lanes_size());
    total_size += data_size;
  }

  // repeated uint32 dire_lanes = 4 [(.steamlearn_count) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dire_lanes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dire_lanes_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchHeroes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchHeroes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchHeroes::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchHeroes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchHeroes*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchHeroes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchHeroes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.radiant_hero_ids_.MergeFrom(from._impl_.radiant_hero_ids_);
  _this->_impl_.dire_hero_ids_.MergeFrom(from._impl_.dire_hero_ids_);
  _this->_impl_.radiant_lanes_.MergeFrom(from._impl_.radiant_lanes_);
  _this->_impl_.dire_lanes_.MergeFrom(from._impl_.dire_lanes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchHeroes::CopyFrom(const CMsgSteamLearnMatchHeroes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchHeroes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchHeroes::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchHeroes::InternalSwap(CMsgSteamLearnMatchHeroes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.radiant_hero_ids_.InternalSwap(&other->_impl_.radiant_hero_ids_);
  _impl_.dire_hero_ids_.InternalSwap(&other->_impl_.dire_hero_ids_);
  _impl_.radiant_lanes_.InternalSwap(&other->_impl_.radiant_lanes_);
  _impl_.dire_lanes_.InternalSwap(&other->_impl_.dire_lanes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchHeroes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[169]);
}

// ===================================================================

class CMsgSteamLearnMatchHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchHero>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamLearnMatchHero::CMsgSteamLearnMatchHero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchHero)
}
CMsgSteamLearnMatchHero::CMsgSteamLearnMatchHero(const CMsgSteamLearnMatchHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchHero* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){from._impl_.allied_hero_ids_}
    , decltype(_impl_.enemy_hero_ids_){from._impl_.enemy_hero_ids_}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.lane_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lane_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.lane_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchHero)
}

inline void CMsgSteamLearnMatchHero::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.allied_hero_ids_){arena}
    , decltype(_impl_.enemy_hero_ids_){arena}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.lane_){0u}
  };
}

CMsgSteamLearnMatchHero::~CMsgSteamLearnMatchHero() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchHero)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchHero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allied_hero_ids_.~RepeatedField();
  _impl_.enemy_hero_ids_.~RepeatedField();
}

void CMsgSteamLearnMatchHero::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchHero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allied_hero_ids_.Clear();
  _impl_.enemy_hero_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lane_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.lane_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchHero::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lane(&has_bits);
          _impl_.lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 allied_hero_ids = 3 [(.steamlearn_count) = 4];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_allied_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allied_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 enemy_hero_ids = 4 [(.steamlearn_count) = 5];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_enemy_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_enemy_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchHero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchHero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 lane = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lane(), target);
  }

  // repeated uint32 allied_hero_ids = 3 [(.steamlearn_count) = 4];
  for (int i = 0, n = this->_internal_allied_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_allied_hero_ids(i), target);
  }

  // repeated uint32 enemy_hero_ids = 4 [(.steamlearn_count) = 5];
  for (int i = 0, n = this->_internal_enemy_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enemy_hero_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchHero)
  return target;
}

size_t CMsgSteamLearnMatchHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchHero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allied_hero_ids = 3 [(.steamlearn_count) = 4];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.allied_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_allied_hero_ids_size());
    total_size += data_size;
  }

  // repeated uint32 enemy_hero_ids = 4 [(.steamlearn_count) = 5];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.enemy_hero_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_enemy_hero_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 lane = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchHero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchHero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchHero::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchHero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchHero*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchHero&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchHero)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allied_hero_ids_.MergeFrom(from._impl_.allied_hero_ids_);
  _this->_impl_.enemy_hero_ids_.MergeFrom(from._impl_.enemy_hero_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lane_ = from._impl_.lane_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchHero::CopyFrom(const CMsgSteamLearnMatchHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchHero::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchHero::InternalSwap(CMsgSteamLearnMatchHero* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.allied_hero_ids_.InternalSwap(&other->_impl_.allied_hero_ids_);
  _impl_.enemy_hero_ids_.InternalSwap(&other->_impl_.enemy_hero_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchHero, _impl_.lane_)
      + sizeof(CMsgSteamLearnMatchHero::_impl_.lane_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchHero, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchHero::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[170]);
}

// ===================================================================

class CMsgSteamLearnMatchState_PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchState_PlayerState>()._impl_._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_buyback(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_has_aegis(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_has_rapier(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgSteamLearnMatchState_PlayerState::CMsgSteamLearnMatchState_PlayerState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchState.PlayerState)
}
CMsgSteamLearnMatchState_PlayerState::CMsgSteamLearnMatchState_PlayerState(const CMsgSteamLearnMatchState_PlayerState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchState_PlayerState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.deaths_){}
    , decltype(_impl_.respawn_time_){}
    , decltype(_impl_.has_buyback_){}
    , decltype(_impl_.has_aegis_){}
    , decltype(_impl_.has_rapier_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hero_id_, &from._impl_.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchState.PlayerState)
}

inline void CMsgSteamLearnMatchState_PlayerState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hero_id_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.deaths_){0u}
    , decltype(_impl_.respawn_time_){0u}
    , decltype(_impl_.has_buyback_){false}
    , decltype(_impl_.has_aegis_){false}
    , decltype(_impl_.has_rapier_){false}
    , decltype(_impl_.distance_){0u}
  };
}

CMsgSteamLearnMatchState_PlayerState::~CMsgSteamLearnMatchState_PlayerState() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchState.PlayerState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchState_PlayerState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSteamLearnMatchState_PlayerState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchState_PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchState.PlayerState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_rapier_) -
        reinterpret_cast<char*>(&_impl_.hero_id_)) + sizeof(_impl_.has_rapier_));
  }
  _impl_.distance_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchState_PlayerState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          _impl_.hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          _impl_.deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 respawn_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_respawn_time(&has_bits);
          _impl_.respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_buyback = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_buyback(&has_bits);
          _impl_.has_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_aegis = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_aegis(&has_bits);
          _impl_.has_aegis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_rapier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_has_rapier(&has_bits);
          _impl_.has_rapier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchState_PlayerState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchState.PlayerState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 net_worth = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_net_worth(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 respawn_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_respawn_time(), target);
  }

  // optional bool has_buyback = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_has_buyback(), target);
  }

  // optional bool has_aegis = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_aegis(), target);
  }

  // optional bool has_rapier = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_has_rapier(), target);
  }

  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchState.PlayerState)
  return target;
}

size_t CMsgSteamLearnMatchState_PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchState.PlayerState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hero_id());
    }

    // optional uint32 net_worth = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_deaths());
    }

    // optional uint32 respawn_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_respawn_time());
    }

    // optional bool has_buyback = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool has_aegis = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool has_rapier = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 distance = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchState_PlayerState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchState_PlayerState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchState_PlayerState::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchState_PlayerState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchState_PlayerState*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchState_PlayerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchState.PlayerState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.hero_id_ = from._impl_.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deaths_ = from._impl_.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.respawn_time_ = from._impl_.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_buyback_ = from._impl_.has_buyback_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.has_aegis_ = from._impl_.has_aegis_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.has_rapier_ = from._impl_.has_rapier_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchState_PlayerState::CopyFrom(const CMsgSteamLearnMatchState_PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchState.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchState_PlayerState::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchState_PlayerState::InternalSwap(CMsgSteamLearnMatchState_PlayerState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState_PlayerState, _impl_.distance_)
      + sizeof(CMsgSteamLearnMatchState_PlayerState::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState_PlayerState, _impl_.hero_id_)>(
          reinterpret_cast<char*>(&_impl_.hero_id_),
          reinterpret_cast<char*>(&other->_impl_.hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchState_PlayerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[171]);
}

// ===================================================================

class CMsgSteamLearnMatchState_TeamState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchState_TeamState>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ancient_health_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_glyph_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_creep_distance_safe(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_creep_distance_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_creep_distance_off(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgSteamLearnMatchState_TeamState::CMsgSteamLearnMatchState_TeamState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchState.TeamState)
}
CMsgSteamLearnMatchState_TeamState::CMsgSteamLearnMatchState_TeamState(const CMsgSteamLearnMatchState_TeamState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchState_TeamState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_states_){from._impl_.player_states_}
    , decltype(_impl_.tower_health_pct_){from._impl_.tower_health_pct_}
    , decltype(_impl_.barracks_health_pct_){from._impl_.barracks_health_pct_}
    , decltype(_impl_.team_){}
    , decltype(_impl_.ancient_health_pct_){}
    , decltype(_impl_.glyph_cooldown_){}
    , decltype(_impl_.kills_){}
    , decltype(_impl_.creep_distance_safe_){}
    , decltype(_impl_.creep_distance_mid_){}
    , decltype(_impl_.creep_distance_off_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.creep_distance_off_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.creep_distance_off_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchState.TeamState)
}

inline void CMsgSteamLearnMatchState_TeamState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_states_){arena}
    , decltype(_impl_.tower_health_pct_){arena}
    , decltype(_impl_.barracks_health_pct_){arena}
    , decltype(_impl_.team_){0u}
    , decltype(_impl_.ancient_health_pct_){0u}
    , decltype(_impl_.glyph_cooldown_){0u}
    , decltype(_impl_.kills_){0u}
    , decltype(_impl_.creep_distance_safe_){0u}
    , decltype(_impl_.creep_distance_mid_){0u}
    , decltype(_impl_.creep_distance_off_){0u}
  };
}

CMsgSteamLearnMatchState_TeamState::~CMsgSteamLearnMatchState_TeamState() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchState.TeamState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchState_TeamState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_states_.~RepeatedPtrField();
  _impl_.tower_health_pct_.~RepeatedField();
  _impl_.barracks_health_pct_.~RepeatedField();
}

void CMsgSteamLearnMatchState_TeamState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchState_TeamState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchState.TeamState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_states_.Clear();
  _impl_.tower_health_pct_.Clear();
  _impl_.barracks_health_pct_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.creep_distance_off_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.creep_distance_off_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchState_TeamState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSteamLearnMatchState.PlayerState player_states = 2 [(.steamlearn_count) = 5];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tower_health_pct = 3 [(.steamlearn_count) = 11];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 barracks_health_pct = 4 [(.steamlearn_count) = 6];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_health_pct(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_health_pct(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ancient_health_pct = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ancient_health_pct(&has_bits);
          _impl_.ancient_health_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 glyph_cooldown = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_glyph_cooldown(&has_bits);
          _impl_.glyph_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_kills(&has_bits);
          _impl_.kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_safe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_creep_distance_safe(&has_bits);
          _impl_.creep_distance_safe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_mid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_creep_distance_mid(&has_bits);
          _impl_.creep_distance_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 creep_distance_off = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_creep_distance_off(&has_bits);
          _impl_.creep_distance_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchState_TeamState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchState.TeamState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // repeated .CMsgSteamLearnMatchState.PlayerState player_states = 2 [(.steamlearn_count) = 5];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_player_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_player_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamlearn_count) = 11];
  for (int i = 0, n = this->_internal_tower_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tower_health_pct(i), target);
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamlearn_count) = 6];
  for (int i = 0, n = this->_internal_barracks_health_pct_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_barracks_health_pct(i), target);
  }

  // optional uint32 ancient_health_pct = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ancient_health_pct(), target);
  }

  // optional uint32 glyph_cooldown = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_glyph_cooldown(), target);
  }

  // optional uint32 kills = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_kills(), target);
  }

  // optional uint32 creep_distance_safe = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_creep_distance_safe(), target);
  }

  // optional uint32 creep_distance_mid = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_creep_distance_mid(), target);
  }

  // optional uint32 creep_distance_off = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_creep_distance_off(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchState.TeamState)
  return target;
}

size_t CMsgSteamLearnMatchState_TeamState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchState.TeamState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamLearnMatchState.PlayerState player_states = 2 [(.steamlearn_count) = 5];
  total_size += 1UL * this->_internal_player_states_size();
  for (const auto& msg : this->_impl_.player_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_health_pct = 3 [(.steamlearn_count) = 11];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.tower_health_pct_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_tower_health_pct_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_health_pct = 4 [(.steamlearn_count) = 6];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.barracks_health_pct_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_barracks_health_pct_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

    // optional uint32 ancient_health_pct = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ancient_health_pct());
    }

    // optional uint32 glyph_cooldown = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_glyph_cooldown());
    }

    // optional uint32 kills = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kills());
    }

    // optional uint32 creep_distance_safe = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_safe());
    }

    // optional uint32 creep_distance_mid = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_mid());
    }

    // optional uint32 creep_distance_off = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_creep_distance_off());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchState_TeamState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchState_TeamState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchState_TeamState::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchState_TeamState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchState_TeamState*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchState_TeamState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchState.TeamState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.player_states_.MergeFrom(from._impl_.player_states_);
  _this->_impl_.tower_health_pct_.MergeFrom(from._impl_.tower_health_pct_);
  _this->_impl_.barracks_health_pct_.MergeFrom(from._impl_.barracks_health_pct_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ancient_health_pct_ = from._impl_.ancient_health_pct_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.glyph_cooldown_ = from._impl_.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.kills_ = from._impl_.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.creep_distance_safe_ = from._impl_.creep_distance_safe_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.creep_distance_mid_ = from._impl_.creep_distance_mid_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.creep_distance_off_ = from._impl_.creep_distance_off_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchState_TeamState::CopyFrom(const CMsgSteamLearnMatchState_TeamState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchState.TeamState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchState_TeamState::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchState_TeamState::InternalSwap(CMsgSteamLearnMatchState_TeamState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.player_states_.InternalSwap(&other->_impl_.player_states_);
  _impl_.tower_health_pct_.InternalSwap(&other->_impl_.tower_health_pct_);
  _impl_.barracks_health_pct_.InternalSwap(&other->_impl_.barracks_health_pct_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState_TeamState, _impl_.creep_distance_off_)
      + sizeof(CMsgSteamLearnMatchState_TeamState::_impl_.creep_distance_off_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState_TeamState, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchState_TeamState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[172]);
}

// ===================================================================

class CMsgSteamLearnMatchState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnMatchState>()._impl_._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamLearnMatchState_TeamState& radiant_state(const CMsgSteamLearnMatchState* msg);
  static void set_has_radiant_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgSteamLearnMatchState_TeamState& dire_state(const CMsgSteamLearnMatchState* msg);
  static void set_has_dire_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamLearnMatchState_TeamState&
CMsgSteamLearnMatchState::_Internal::radiant_state(const CMsgSteamLearnMatchState* msg) {
  return *msg->_impl_.radiant_state_;
}
const ::CMsgSteamLearnMatchState_TeamState&
CMsgSteamLearnMatchState::_Internal::dire_state(const CMsgSteamLearnMatchState* msg) {
  return *msg->_impl_.dire_state_;
}
CMsgSteamLearnMatchState::CMsgSteamLearnMatchState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnMatchState)
}
CMsgSteamLearnMatchState::CMsgSteamLearnMatchState(const CMsgSteamLearnMatchState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnMatchState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_state_){nullptr}
    , decltype(_impl_.dire_state_){nullptr}
    , decltype(_impl_.game_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_radiant_state()) {
    _this->_impl_.radiant_state_ = new ::CMsgSteamLearnMatchState_TeamState(*from._impl_.radiant_state_);
  }
  if (from._internal_has_dire_state()) {
    _this->_impl_.dire_state_ = new ::CMsgSteamLearnMatchState_TeamState(*from._impl_.dire_state_);
  }
  _this->_impl_.game_time_ = from._impl_.game_time_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnMatchState)
}

inline void CMsgSteamLearnMatchState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.radiant_state_){nullptr}
    , decltype(_impl_.dire_state_){nullptr}
    , decltype(_impl_.game_time_){0}
  };
}

CMsgSteamLearnMatchState::~CMsgSteamLearnMatchState() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnMatchState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnMatchState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.radiant_state_;
  if (this != internal_default_instance()) delete _impl_.dire_state_;
}

void CMsgSteamLearnMatchState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnMatchState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.radiant_state_ != nullptr);
      _impl_.radiant_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dire_state_ != nullptr);
      _impl_.dire_state_->Clear();
    }
  }
  _impl_.game_time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnMatchState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSteamLearnMatchState.TeamState radiant_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSteamLearnMatchState.TeamState dire_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnMatchState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnMatchState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float game_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_game_time(), target);
  }

  // optional .CMsgSteamLearnMatchState.TeamState radiant_state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::radiant_state(this),
        _Internal::radiant_state(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSteamLearnMatchState.TeamState dire_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::dire_state(this),
        _Internal::dire_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnMatchState)
  return target;
}

size_t CMsgSteamLearnMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnMatchState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgSteamLearnMatchState.TeamState radiant_state = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radiant_state_);
    }

    // optional .CMsgSteamLearnMatchState.TeamState dire_state = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dire_state_);
    }

    // optional float game_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnMatchState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnMatchState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnMatchState::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnMatchState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnMatchState*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnMatchState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnMatchState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_radiant_state()->::CMsgSteamLearnMatchState_TeamState::MergeFrom(
          from._internal_radiant_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dire_state()->::CMsgSteamLearnMatchState_TeamState::MergeFrom(
          from._internal_dire_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnMatchState::CopyFrom(const CMsgSteamLearnMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnMatchState::IsInitialized() const {
  return true;
}

void CMsgSteamLearnMatchState::InternalSwap(CMsgSteamLearnMatchState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState, _impl_.game_time_)
      + sizeof(CMsgSteamLearnMatchState::_impl_.game_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnMatchState, _impl_.radiant_state_)>(
          reinterpret_cast<char*>(&_impl_.radiant_state_),
          reinterpret_cast<char*>(&other->_impl_.radiant_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnMatchState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[173]);
}

// ===================================================================

class CMsgSteamLearnItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnItemPurchase>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_using_dota_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgSteamLearnItemPurchase::CMsgSteamLearnItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnItemPurchase)
}
CMsgSteamLearnItemPurchase::CMsgSteamLearnItemPurchase(const CMsgSteamLearnItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnItemPurchase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){from._impl_.inventory_items_}
    , decltype(_impl_.purchase_history_){from._impl_.purchase_history_}
    , decltype(_impl_.gold_){}
    , decltype(_impl_.net_worth_){}
    , decltype(_impl_.is_radiant_team_){}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.is_using_dota_plus_){}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.gold_, &from._impl_.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnItemPurchase)
}

inline void CMsgSteamLearnItemPurchase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.inventory_items_){arena}
    , decltype(_impl_.purchase_history_){arena}
    , decltype(_impl_.gold_){0u}
    , decltype(_impl_.net_worth_){0u}
    , decltype(_impl_.is_radiant_team_){0u}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.is_using_dota_plus_){false}
    , decltype(_impl_.item_id_){-1}
  };
}

CMsgSteamLearnItemPurchase::~CMsgSteamLearnItemPurchase() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnItemPurchase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.inventory_items_.~RepeatedField();
  _impl_.purchase_history_.~RepeatedField();
}

void CMsgSteamLearnItemPurchase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnItemPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inventory_items_.Clear();
  _impl_.purchase_history_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_using_dota_plus_) -
        reinterpret_cast<char*>(&_impl_.gold_)) + sizeof(_impl_.is_using_dota_plus_));
    _impl_.item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnItemPurchase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 inventory_items = 2 [(.steamlearn_count) = 20];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inventory_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_inventory_items(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 purchase_history = 3 [(.steamlearn_count) = 20];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_purchase_history(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_purchase_history(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_gold(&has_bits);
          _impl_.gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_net_worth(&has_bits);
          _impl_.net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 is_radiant_team = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_radiant_team(&has_bits);
          _impl_.is_radiant_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_dota_plus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_using_dota_plus(&has_bits);
          _impl_.is_using_dota_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnItemPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnItemPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_id = 1 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // repeated int32 inventory_items = 2 [(.steamlearn_count) = 20];
  for (int i = 0, n = this->_internal_inventory_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_inventory_items(i), target);
  }

  // repeated int32 purchase_history = 3 [(.steamlearn_count) = 20];
  for (int i = 0, n = this->_internal_purchase_history_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_purchase_history(i), target);
  }

  // optional uint32 gold = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gold(), target);
  }

  // optional uint32 net_worth = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_net_worth(), target);
  }

  // optional uint32 is_radiant_team = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_is_radiant_team(), target);
  }

  // optional float game_time = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_game_time(), target);
  }

  // optional bool is_using_dota_plus = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_using_dota_plus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnItemPurchase)
  return target;
}

size_t CMsgSteamLearnItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnItemPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 inventory_items = 2 [(.steamlearn_count) = 20];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.inventory_items_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inventory_items_size());
    total_size += data_size;
  }

  // repeated int32 purchase_history = 3 [(.steamlearn_count) = 20];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.purchase_history_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_purchase_history_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 gold = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gold());
    }

    // optional uint32 net_worth = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_net_worth());
    }

    // optional uint32 is_radiant_team = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_is_radiant_team());
    }

    // optional float game_time = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool is_using_dota_plus = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional int32 item_id = 1 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnItemPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnItemPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnItemPurchase::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnItemPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnItemPurchase*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnItemPurchase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnItemPurchase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.inventory_items_.MergeFrom(from._impl_.inventory_items_);
  _this->_impl_.purchase_history_.MergeFrom(from._impl_.purchase_history_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.gold_ = from._impl_.gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.net_worth_ = from._impl_.net_worth_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_radiant_team_ = from._impl_.is_radiant_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_using_dota_plus_ = from._impl_.is_using_dota_plus_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnItemPurchase::CopyFrom(const CMsgSteamLearnItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnItemPurchase::IsInitialized() const {
  return true;
}

void CMsgSteamLearnItemPurchase::InternalSwap(CMsgSteamLearnItemPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.inventory_items_.InternalSwap(&other->_impl_.inventory_items_);
  _impl_.purchase_history_.InternalSwap(&other->_impl_.purchase_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnItemPurchase, _impl_.is_using_dota_plus_)
      + sizeof(CMsgSteamLearnItemPurchase::_impl_.is_using_dota_plus_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnItemPurchase, _impl_.gold_)>(
          reinterpret_cast<char*>(&_impl_.gold_),
          reinterpret_cast<char*>(&other->_impl_.gold_));
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnItemPurchase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[174]);
}

// ===================================================================

class CMsgSteamLearnPreGameItemPurchases::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnPreGameItemPurchases>()._impl_._has_bits_);
  static void set_has_is_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_using_dota_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamLearnPreGameItemPurchases::CMsgSteamLearnPreGameItemPurchases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnPreGameItemPurchases)
}
CMsgSteamLearnPreGameItemPurchases::CMsgSteamLearnPreGameItemPurchases(const CMsgSteamLearnPreGameItemPurchases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnPreGameItemPurchases* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){from._impl_.item_ids_}
    , decltype(_impl_.is_radiant_team_){}
    , decltype(_impl_.is_using_dota_plus_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.is_radiant_team_, &from._impl_.is_radiant_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_using_dota_plus_) -
    reinterpret_cast<char*>(&_impl_.is_radiant_team_)) + sizeof(_impl_.is_using_dota_plus_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnPreGameItemPurchases)
}

inline void CMsgSteamLearnPreGameItemPurchases::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.item_ids_){arena}
    , decltype(_impl_.is_radiant_team_){0u}
    , decltype(_impl_.is_using_dota_plus_){false}
  };
}

CMsgSteamLearnPreGameItemPurchases::~CMsgSteamLearnPreGameItemPurchases() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnPreGameItemPurchases)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnPreGameItemPurchases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_ids_.~RepeatedField();
}

void CMsgSteamLearnPreGameItemPurchases::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnPreGameItemPurchases::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnPreGameItemPurchases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.item_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.is_radiant_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_using_dota_plus_) -
        reinterpret_cast<char*>(&_impl_.is_radiant_team_)) + sizeof(_impl_.is_using_dota_plus_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnPreGameItemPurchases::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 item_ids = 1 [(.steamlearn_count) = 10];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 is_radiant_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_radiant_team(&has_bits);
          _impl_.is_radiant_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_dota_plus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_using_dota_plus(&has_bits);
          _impl_.is_using_dota_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnPreGameItemPurchases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnPreGameItemPurchases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 item_ids = 1 [(.steamlearn_count) = 10];
  for (int i = 0, n = this->_internal_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 is_radiant_team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_is_radiant_team(), target);
  }

  // optional bool is_using_dota_plus = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_using_dota_plus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnPreGameItemPurchases)
  return target;
}

size_t CMsgSteamLearnPreGameItemPurchases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnPreGameItemPurchases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 item_ids = 1 [(.steamlearn_count) = 10];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.item_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 is_radiant_team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_is_radiant_team());
    }

    // optional bool is_using_dota_plus = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnPreGameItemPurchases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnPreGameItemPurchases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnPreGameItemPurchases::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnPreGameItemPurchases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnPreGameItemPurchases*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnPreGameItemPurchases&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnPreGameItemPurchases)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.item_ids_.MergeFrom(from._impl_.item_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.is_radiant_team_ = from._impl_.is_radiant_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_using_dota_plus_ = from._impl_.is_using_dota_plus_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnPreGameItemPurchases::CopyFrom(const CMsgSteamLearnPreGameItemPurchases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnPreGameItemPurchases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnPreGameItemPurchases::IsInitialized() const {
  return true;
}

void CMsgSteamLearnPreGameItemPurchases::InternalSwap(CMsgSteamLearnPreGameItemPurchases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.item_ids_.InternalSwap(&other->_impl_.item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnPreGameItemPurchases, _impl_.is_using_dota_plus_)
      + sizeof(CMsgSteamLearnPreGameItemPurchases::_impl_.is_using_dota_plus_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnPreGameItemPurchases, _impl_.is_radiant_team_)>(
          reinterpret_cast<char*>(&_impl_.is_radiant_team_),
          reinterpret_cast<char*>(&other->_impl_.is_radiant_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnPreGameItemPurchases::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[175]);
}

// ===================================================================

class CMsgSteamLearnNeutralItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnNeutralItemPurchase>()._impl_._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_using_dota_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSteamLearnNeutralItemPurchase::CMsgSteamLearnNeutralItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnNeutralItemPurchase)
}
CMsgSteamLearnNeutralItemPurchase::CMsgSteamLearnNeutralItemPurchase(const CMsgSteamLearnNeutralItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnNeutralItemPurchase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tier_){}
    , decltype(_impl_.is_radiant_team_){}
    , decltype(_impl_.is_using_dota_plus_){}
    , decltype(_impl_.item_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tier_, &from._impl_.tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_id_) -
    reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.item_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnNeutralItemPurchase)
}

inline void CMsgSteamLearnNeutralItemPurchase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tier_){0u}
    , decltype(_impl_.is_radiant_team_){0u}
    , decltype(_impl_.is_using_dota_plus_){false}
    , decltype(_impl_.item_id_){-1}
  };
}

CMsgSteamLearnNeutralItemPurchase::~CMsgSteamLearnNeutralItemPurchase() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnNeutralItemPurchase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnNeutralItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSteamLearnNeutralItemPurchase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnNeutralItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnNeutralItemPurchase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_using_dota_plus_) -
        reinterpret_cast<char*>(&_impl_.tier_)) + sizeof(_impl_.is_using_dota_plus_));
    _impl_.item_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnNeutralItemPurchase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 item_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tier(&has_bits);
          _impl_.tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 is_radiant_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_radiant_team(&has_bits);
          _impl_.is_radiant_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_dota_plus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_using_dota_plus(&has_bits);
          _impl_.is_using_dota_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnNeutralItemPurchase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnNeutralItemPurchase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 item_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 tier = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tier(), target);
  }

  // optional uint32 is_radiant_team = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_is_radiant_team(), target);
  }

  // optional bool is_using_dota_plus = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_using_dota_plus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnNeutralItemPurchase)
  return target;
}

size_t CMsgSteamLearnNeutralItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnNeutralItemPurchase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 tier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tier());
    }

    // optional uint32 is_radiant_team = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_is_radiant_team());
    }

    // optional bool is_using_dota_plus = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 item_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnNeutralItemPurchase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnNeutralItemPurchase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnNeutralItemPurchase::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnNeutralItemPurchase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnNeutralItemPurchase*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnNeutralItemPurchase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnNeutralItemPurchase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tier_ = from._impl_.tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_radiant_team_ = from._impl_.is_radiant_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_using_dota_plus_ = from._impl_.is_using_dota_plus_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.item_id_ = from._impl_.item_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnNeutralItemPurchase::CopyFrom(const CMsgSteamLearnNeutralItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnNeutralItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnNeutralItemPurchase::IsInitialized() const {
  return true;
}

void CMsgSteamLearnNeutralItemPurchase::InternalSwap(CMsgSteamLearnNeutralItemPurchase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnNeutralItemPurchase, _impl_.is_using_dota_plus_)
      + sizeof(CMsgSteamLearnNeutralItemPurchase::_impl_.is_using_dota_plus_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnNeutralItemPurchase, _impl_.tier_)>(
          reinterpret_cast<char*>(&_impl_.tier_),
          reinterpret_cast<char*>(&other->_impl_.tier_));
  swap(_impl_.item_id_, other->_impl_.item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnNeutralItemPurchase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[176]);
}

// ===================================================================

class CMsgSteamLearnAbilitySkill::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnAbilitySkill>()._impl_._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_using_dota_plus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamLearnAbilitySkill::CMsgSteamLearnAbilitySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnAbilitySkill)
}
CMsgSteamLearnAbilitySkill::CMsgSteamLearnAbilitySkill(const CMsgSteamLearnAbilitySkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnAbilitySkill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skilled_abilities_){from._impl_.skilled_abilities_}
    , decltype(_impl_.game_time_){}
    , decltype(_impl_.is_using_dota_plus_){}
    , decltype(_impl_.ability_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_time_, &from._impl_.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_id_) -
    reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnAbilitySkill)
}

inline void CMsgSteamLearnAbilitySkill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.skilled_abilities_){arena}
    , decltype(_impl_.game_time_){0}
    , decltype(_impl_.is_using_dota_plus_){false}
    , decltype(_impl_.ability_id_){-1}
  };
}

CMsgSteamLearnAbilitySkill::~CMsgSteamLearnAbilitySkill() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnAbilitySkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnAbilitySkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skilled_abilities_.~RepeatedField();
}

void CMsgSteamLearnAbilitySkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnAbilitySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnAbilitySkill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skilled_abilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_using_dota_plus_) -
        reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.is_using_dota_plus_));
    _impl_.ability_id_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnAbilitySkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 ability_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 skilled_abilities = 2 [(.steamlearn_count) = 30];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_skilled_abilities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_skilled_abilities(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float game_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_game_time(&has_bits);
          _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_using_dota_plus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_using_dota_plus(&has_bits);
          _impl_.is_using_dota_plus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnAbilitySkill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnAbilitySkill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ability_id = 1 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // repeated int32 skilled_abilities = 2 [(.steamlearn_count) = 30];
  for (int i = 0, n = this->_internal_skilled_abilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skilled_abilities(i), target);
  }

  // optional float game_time = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_game_time(), target);
  }

  // optional bool is_using_dota_plus = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_using_dota_plus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnAbilitySkill)
  return target;
}

size_t CMsgSteamLearnAbilitySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnAbilitySkill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 skilled_abilities = 2 [(.steamlearn_count) = 30];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.skilled_abilities_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_skilled_abilities_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float game_time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional bool is_using_dota_plus = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 ability_id = 1 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnAbilitySkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnAbilitySkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnAbilitySkill::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnAbilitySkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnAbilitySkill*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnAbilitySkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnAbilitySkill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skilled_abilities_.MergeFrom(from._impl_.skilled_abilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.game_time_ = from._impl_.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_using_dota_plus_ = from._impl_.is_using_dota_plus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ability_id_ = from._impl_.ability_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnAbilitySkill::CopyFrom(const CMsgSteamLearnAbilitySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnAbilitySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnAbilitySkill::IsInitialized() const {
  return true;
}

void CMsgSteamLearnAbilitySkill::InternalSwap(CMsgSteamLearnAbilitySkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.skilled_abilities_.InternalSwap(&other->_impl_.skilled_abilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnAbilitySkill, _impl_.is_using_dota_plus_)
      + sizeof(CMsgSteamLearnAbilitySkill::_impl_.is_using_dota_plus_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnAbilitySkill, _impl_.game_time_)>(
          reinterpret_cast<char*>(&_impl_.game_time_),
          reinterpret_cast<char*>(&other->_impl_.game_time_));
  swap(_impl_.ability_id_, other->_impl_.ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnAbilitySkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[177]);
}

// ===================================================================

class CMsgSteamLearnWardPlacement_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnWardPlacement_Location>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSteamLearnWardPlacement_Location::CMsgSteamLearnWardPlacement_Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnWardPlacement.Location)
}
CMsgSteamLearnWardPlacement_Location::CMsgSteamLearnWardPlacement_Location(const CMsgSteamLearnWardPlacement_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnWardPlacement_Location* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnWardPlacement.Location)
}

inline void CMsgSteamLearnWardPlacement_Location::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

CMsgSteamLearnWardPlacement_Location::~CMsgSteamLearnWardPlacement_Location() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnWardPlacement.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnWardPlacement_Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgSteamLearnWardPlacement_Location::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnWardPlacement_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnWardPlacement.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnWardPlacement_Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnWardPlacement_Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnWardPlacement.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnWardPlacement.Location)
  return target;
}

size_t CMsgSteamLearnWardPlacement_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnWardPlacement.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnWardPlacement_Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnWardPlacement_Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnWardPlacement_Location::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnWardPlacement_Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnWardPlacement_Location*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnWardPlacement_Location&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnWardPlacement.Location)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnWardPlacement_Location::CopyFrom(const CMsgSteamLearnWardPlacement_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnWardPlacement.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnWardPlacement_Location::IsInitialized() const {
  return true;
}

void CMsgSteamLearnWardPlacement_Location::InternalSwap(CMsgSteamLearnWardPlacement_Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnWardPlacement_Location, _impl_.y_)
      + sizeof(CMsgSteamLearnWardPlacement_Location::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnWardPlacement_Location, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnWardPlacement_Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[178]);
}

// ===================================================================

class CMsgSteamLearnWardPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSteamLearnWardPlacement>()._impl_._has_bits_);
  static const ::CMsgSteamLearnWardPlacement_Location& ward_loc(const CMsgSteamLearnWardPlacement* msg);
  static void set_has_ward_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSteamLearnWardPlacement_Location&
CMsgSteamLearnWardPlacement::_Internal::ward_loc(const CMsgSteamLearnWardPlacement* msg) {
  return *msg->_impl_.ward_loc_;
}
CMsgSteamLearnWardPlacement::CMsgSteamLearnWardPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamLearnWardPlacement)
}
CMsgSteamLearnWardPlacement::CMsgSteamLearnWardPlacement(const CMsgSteamLearnWardPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSteamLearnWardPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.existing_ward_locs_){from._impl_.existing_ward_locs_}
    , decltype(_impl_.ward_loc_){nullptr}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ward_loc()) {
    _this->_impl_.ward_loc_ = new ::CMsgSteamLearnWardPlacement_Location(*from._impl_.ward_loc_);
  }
  _this->_impl_.team_ = from._impl_.team_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamLearnWardPlacement)
}

inline void CMsgSteamLearnWardPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.existing_ward_locs_){arena}
    , decltype(_impl_.ward_loc_){nullptr}
    , decltype(_impl_.team_){0u}
  };
}

CMsgSteamLearnWardPlacement::~CMsgSteamLearnWardPlacement() {
  // @@protoc_insertion_point(destructor:CMsgSteamLearnWardPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSteamLearnWardPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.existing_ward_locs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.ward_loc_;
}

void CMsgSteamLearnWardPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSteamLearnWardPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamLearnWardPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.existing_ward_locs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ward_loc_ != nullptr);
    _impl_.ward_loc_->Clear();
  }
  _impl_.team_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSteamLearnWardPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .CMsgSteamLearnWardPlacement.Location ward_loc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ward_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgSteamLearnWardPlacement.Location existing_ward_locs = 2 [(.steamlearn_count) = 6];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_existing_ward_locs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_team(&has_bits);
          _impl_.team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSteamLearnWardPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamLearnWardPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgSteamLearnWardPlacement.Location ward_loc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ward_loc(this),
        _Internal::ward_loc(this).GetCachedSize(), target, stream);
  }

  // repeated .CMsgSteamLearnWardPlacement.Location existing_ward_locs = 2 [(.steamlearn_count) = 6];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_existing_ward_locs_size()); i < n; i++) {
    const auto& repfield = this->_internal_existing_ward_locs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 team = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamLearnWardPlacement)
  return target;
}

size_t CMsgSteamLearnWardPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamLearnWardPlacement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSteamLearnWardPlacement.Location existing_ward_locs = 2 [(.steamlearn_count) = 6];
  total_size += 1UL * this->_internal_existing_ward_locs_size();
  for (const auto& msg : this->_impl_.existing_ward_locs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSteamLearnWardPlacement.Location ward_loc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ward_loc_);
    }

    // optional uint32 team = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSteamLearnWardPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSteamLearnWardPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSteamLearnWardPlacement::GetClassData() const { return &_class_data_; }


void CMsgSteamLearnWardPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSteamLearnWardPlacement*>(&to_msg);
  auto& from = static_cast<const CMsgSteamLearnWardPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamLearnWardPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.existing_ward_locs_.MergeFrom(from._impl_.existing_ward_locs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ward_loc()->::CMsgSteamLearnWardPlacement_Location::MergeFrom(
          from._internal_ward_loc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamLearnWardPlacement::CopyFrom(const CMsgSteamLearnWardPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamLearnWardPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamLearnWardPlacement::IsInitialized() const {
  return true;
}

void CMsgSteamLearnWardPlacement::InternalSwap(CMsgSteamLearnWardPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.existing_ward_locs_.InternalSwap(&other->_impl_.existing_ward_locs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamLearnWardPlacement, _impl_.team_)
      + sizeof(CMsgSteamLearnWardPlacement::_impl_.team_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamLearnWardPlacement, _impl_.ward_loc_)>(
          reinterpret_cast<char*>(&_impl_.ward_loc_),
          reinterpret_cast<char*>(&other->_impl_.ward_loc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamLearnWardPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[179]);
}

// ===================================================================

class CMsgSignOutMuertaMinigame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMuertaMinigame>()._impl_._has_bits_);
  static void set_has_event_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSignOutMuertaMinigame::CMsgSignOutMuertaMinigame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMuertaMinigame)
}
CMsgSignOutMuertaMinigame::CMsgSignOutMuertaMinigame(const CMsgSignOutMuertaMinigame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMuertaMinigame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_game_data_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_event_game_data()) {
    _this->_impl_.event_game_data_.Set(from._internal_event_game_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMuertaMinigame)
}

inline void CMsgSignOutMuertaMinigame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.event_game_data_){}
  };
  _impl_.event_game_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_game_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSignOutMuertaMinigame::~CMsgSignOutMuertaMinigame() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMuertaMinigame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMuertaMinigame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_game_data_.Destroy();
}

void CMsgSignOutMuertaMinigame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMuertaMinigame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMuertaMinigame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.event_game_data_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMuertaMinigame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes event_game_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_event_game_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMuertaMinigame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMuertaMinigame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes event_game_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_event_game_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMuertaMinigame)
  return target;
}

size_t CMsgSignOutMuertaMinigame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMuertaMinigame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes event_game_data = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_event_game_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMuertaMinigame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMuertaMinigame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMuertaMinigame::GetClassData() const { return &_class_data_; }


void CMsgSignOutMuertaMinigame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMuertaMinigame*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMuertaMinigame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMuertaMinigame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event_game_data()) {
    _this->_internal_set_event_game_data(from._internal_event_game_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMuertaMinigame::CopyFrom(const CMsgSignOutMuertaMinigame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMuertaMinigame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMuertaMinigame::IsInitialized() const {
  return true;
}

void CMsgSignOutMuertaMinigame::InternalSwap(CMsgSignOutMuertaMinigame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_game_data_, lhs_arena,
      &other->_impl_.event_game_data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMuertaMinigame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[180]);
}

// ===================================================================

class CMsgSignOutMapStats_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMapStats_Player>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgMapStatsSnapshot& personal_stats(const CMsgSignOutMapStats_Player* msg);
  static void set_has_personal_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMapStatsSnapshot&
CMsgSignOutMapStats_Player::_Internal::personal_stats(const CMsgSignOutMapStats_Player* msg) {
  return *msg->_impl_.personal_stats_;
}
void CMsgSignOutMapStats_Player::clear_personal_stats() {
  if (_impl_.personal_stats_ != nullptr) _impl_.personal_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgSignOutMapStats_Player::CMsgSignOutMapStats_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMapStats.Player)
}
CMsgSignOutMapStats_Player::CMsgSignOutMapStats_Player(const CMsgSignOutMapStats_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMapStats_Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.personal_stats_){nullptr}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_personal_stats()) {
    _this->_impl_.personal_stats_ = new ::CMsgMapStatsSnapshot(*from._impl_.personal_stats_);
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMapStats.Player)
}

inline void CMsgSignOutMapStats_Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.personal_stats_){nullptr}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgSignOutMapStats_Player::~CMsgSignOutMapStats_Player() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMapStats.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMapStats_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.personal_stats_;
}

void CMsgSignOutMapStats_Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMapStats_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMapStats.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.personal_stats_ != nullptr);
    _impl_.personal_stats_->Clear();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMapStats_Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMapStatsSnapshot personal_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_personal_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMapStats_Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMapStats.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional .CMsgMapStatsSnapshot personal_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::personal_stats(this),
        _Internal::personal_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMapStats.Player)
  return target;
}

size_t CMsgSignOutMapStats_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMapStats.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgMapStatsSnapshot personal_stats = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.personal_stats_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMapStats_Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMapStats_Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMapStats_Player::GetClassData() const { return &_class_data_; }


void CMsgSignOutMapStats_Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMapStats_Player*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMapStats_Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMapStats.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_personal_stats()->::CMsgMapStatsSnapshot::MergeFrom(
          from._internal_personal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMapStats_Player::CopyFrom(const CMsgSignOutMapStats_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMapStats.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMapStats_Player::IsInitialized() const {
  return true;
}

void CMsgSignOutMapStats_Player::InternalSwap(CMsgSignOutMapStats_Player* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSignOutMapStats_Player, _impl_.account_id_)
      + sizeof(CMsgSignOutMapStats_Player::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSignOutMapStats_Player, _impl_.personal_stats_)>(
          reinterpret_cast<char*>(&_impl_.personal_stats_),
          reinterpret_cast<char*>(&other->_impl_.personal_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMapStats_Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[181]);
}

// ===================================================================

class CMsgSignOutMapStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSignOutMapStats>()._impl_._has_bits_);
  static const ::CMsgMapStatsSnapshot& global_stats(const CMsgSignOutMapStats* msg);
  static void set_has_global_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgMapStatsSnapshot&
CMsgSignOutMapStats::_Internal::global_stats(const CMsgSignOutMapStats* msg) {
  return *msg->_impl_.global_stats_;
}
void CMsgSignOutMapStats::clear_global_stats() {
  if (_impl_.global_stats_ != nullptr) _impl_.global_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgSignOutMapStats::CMsgSignOutMapStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSignOutMapStats)
}
CMsgSignOutMapStats::CMsgSignOutMapStats(const CMsgSignOutMapStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSignOutMapStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.global_stats_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_global_stats()) {
    _this->_impl_.global_stats_ = new ::CMsgMapStatsSnapshot(*from._impl_.global_stats_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSignOutMapStats)
}

inline void CMsgSignOutMapStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.players_){arena}
    , decltype(_impl_.global_stats_){nullptr}
  };
}

CMsgSignOutMapStats::~CMsgSignOutMapStats() {
  // @@protoc_insertion_point(destructor:CMsgSignOutMapStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSignOutMapStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.global_stats_;
}

void CMsgSignOutMapStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSignOutMapStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSignOutMapStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.global_stats_ != nullptr);
    _impl_.global_stats_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSignOutMapStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSignOutMapStats.Player players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgMapStatsSnapshot global_stats = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_global_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSignOutMapStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSignOutMapStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSignOutMapStats.Player players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgMapStatsSnapshot global_stats = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::global_stats(this),
        _Internal::global_stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSignOutMapStats)
  return target;
}

size_t CMsgSignOutMapStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSignOutMapStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSignOutMapStats.Player players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .CMsgMapStatsSnapshot global_stats = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.global_stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSignOutMapStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSignOutMapStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSignOutMapStats::GetClassData() const { return &_class_data_; }


void CMsgSignOutMapStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSignOutMapStats*>(&to_msg);
  auto& from = static_cast<const CMsgSignOutMapStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSignOutMapStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (from._internal_has_global_stats()) {
    _this->_internal_mutable_global_stats()->::CMsgMapStatsSnapshot::MergeFrom(
        from._internal_global_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSignOutMapStats::CopyFrom(const CMsgSignOutMapStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSignOutMapStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSignOutMapStats::IsInitialized() const {
  return true;
}

void CMsgSignOutMapStats::InternalSwap(CMsgSignOutMapStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.global_stats_, other->_impl_.global_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSignOutMapStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fserver_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fserver_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fserver_2eproto[182]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgPoorNetworkConditions_Player*
Arena::CreateMaybeMessage< ::CMsgPoorNetworkConditions_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPoorNetworkConditions_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPoorNetworkConditions*
Arena::CreateMaybeMessage< ::CMsgPoorNetworkConditions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPoorNetworkConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameserverCrash*
Arena::CreateMaybeMessage< ::CMsgGameserverCrash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameserverCrash >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectedPlayers_Player*
Arena::CreateMaybeMessage< ::CMsgConnectedPlayers_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectedPlayers_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectedPlayers_PlayerDraft*
Arena::CreateMaybeMessage< ::CMsgConnectedPlayers_PlayerDraft >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectedPlayers_PlayerDraft >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConnectedPlayers*
Arena::CreateMaybeMessage< ::CMsgConnectedPlayers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConnectedPlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerInfo*
Arena::CreateMaybeMessage< ::CMsgGameServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverDetected*
Arena::CreateMaybeMessage< ::CMsgLeaverDetected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverDetected >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeaverDetectedResponse*
Arena::CreateMaybeMessage< ::CMsgLeaverDetectedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeaverDetectedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyFinalPlayerStats*
Arena::CreateMaybeMessage< ::CMsgDOTAFantasyFinalPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyFinalPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyLivePlayerStats*
Arena::CreateMaybeMessage< ::CMsgDOTAFantasyLivePlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyLivePlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRealtimeStats*
Arena::CreateMaybeMessage< ::CMsgServerToGCRealtimeStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRealtimeStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerRealtimeStatsStartStop*
Arena::CreateMaybeMessage< ::CMsgGCToServerRealtimeStatsStartStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerRealtimeStatsStartStop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerUpdateSteamBroadcasting*
Arena::CreateMaybeMessage< ::CMsgGCToServerUpdateSteamBroadcasting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerUpdateSteamBroadcasting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats_CPlayer*
Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats_CPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats_CPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats_CTeam*
Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats_CTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats_CTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGameplayStats*
Arena::CreateMaybeMessage< ::CMsgSignOutGameplayStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGameplayStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer_HeroDamageReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam_CPlayer*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam_CPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam_CPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CTeam*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CAdditionalSignoutMsg*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CAdditionalSignoutMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CSocialFeedMatchEvent*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CSocialFeedMatchEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_CCustomGameData*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_CCustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_CCustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_EventGameLeaderboardEntry*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_EventGameLeaderboardEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut_WardPlacement*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut_WardPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut_WardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOut*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOut >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutDraftInfo*
Arena::CreateMaybeMessage< ::CMsgSignOutDraftInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutDraftInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBotInfo*
Arena::CreateMaybeMessage< ::CMsgSignOutBotInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBotInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutTextMuteInfo_TextMuteMessage*
Arena::CreateMaybeMessage< ::CMsgSignOutTextMuteInfo_TextMuteMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutTextMuteInfo_TextMuteMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutTextMuteInfo*
Arena::CreateMaybeMessage< ::CMsgSignOutTextMuteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutTextMuteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutPlayerStats*
Arena::CreateMaybeMessage< ::CMsgSignOutPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail*
Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary_PlayerCommunication_PingDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary_PlayerCommunication*
Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary_PlayerCommunication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary_PlayerCommunication >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunicationSummary*
Arena::CreateMaybeMessage< ::CMsgSignOutCommunicationSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunicationSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignoutResponse_PlayerMetadata*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignoutResponse_PlayerMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignoutResponse_PlayerMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignoutResponse*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTimedRewardContainer*
Arena::CreateMaybeMessage< ::CMsgTimedRewardContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTimedRewardContainer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPermissionRequest*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPermissionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPermissionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPermissionResponse*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPermissionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPermissionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutEventGameData*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutEventGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutEventGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutPerfData*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutPerfData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutPerfData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameMatchSignOutBanData*
Arena::CreateMaybeMessage< ::CMsgGameMatchSignOutBanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameMatchSignOutBanData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility*
Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team_Player_HeroAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team_Player*
Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate_Team*
Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALiveScoreboardUpdate*
Arena::CreateMaybeMessage< ::CMsgDOTALiveScoreboardUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALiveScoreboardUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResources*
Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResources >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResources >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result*
Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResourcesResponse_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestBatchPlayerResourcesResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCRequestBatchPlayerResourcesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestBatchPlayerResourcesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPlayerFailedToConnect*
Arena::CreateMaybeMessage< ::CMsgDOTAPlayerFailedToConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPlayerFailedToConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToRelayConnect*
Arena::CreateMaybeMessage< ::CMsgGCToRelayConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGCToLANServerRelayConnect*
Arena::CreateMaybeMessage< ::CMsgGCGCToLANServerRelayConnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGCToLANServerRelayConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBanStatusRequest*
Arena::CreateMaybeMessage< ::CMsgGCBanStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBanStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCBanStatusResponse*
Arena::CreateMaybeMessage< ::CMsgGCBanStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCBanStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTournamentItemEvent*
Arena::CreateMaybeMessage< ::CMsgTournamentItemEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTournamentItemEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTournamentItemEventResponse*
Arena::CreateMaybeMessage< ::CMsgTournamentItemEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTournamentItemEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgTeamFanfare*
Arena::CreateMaybeMessage< ::CMsgTeamFanfare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgResponseTeamFanfare*
Arena::CreateMaybeMessage< ::CMsgResponseTeamFanfare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgResponseTeamFanfare >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerUploadSaveGame*
Arena::CreateMaybeMessage< ::CMsgGameServerUploadSaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerUploadSaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerSaveGameResult*
Arena::CreateMaybeMessage< ::CMsgGameServerSaveGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerSaveGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerGetLoadGame*
Arena::CreateMaybeMessage< ::CMsgGameServerGetLoadGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerGetLoadGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameServerGetLoadGameResult*
Arena::CreateMaybeMessage< ::CMsgGameServerGetLoadGameResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameServerGetLoadGameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAAwardEventPoints_AwardPoints*
Arena::CreateMaybeMessage< ::CMsgDOTAAwardEventPoints_AwardPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAAwardEventPoints_AwardPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAAwardEventPoints*
Arena::CreateMaybeMessage< ::CMsgDOTAAwardEventPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAAwardEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPingRequest*
Arena::CreateMaybeMessage< ::CMsgGCToServerPingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPingResponse*
Arena::CreateMaybeMessage< ::CMsgGCToServerPingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchConnectionStats_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchConnectionStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchConnectionStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchConnectionStats*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchConnectionStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchConnectionStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerGCUpdateSpectatorCount*
Arena::CreateMaybeMessage< ::CMsgServerGCUpdateSpectatorCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerGCUpdateSpectatorCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog_Dictionary_DictString*
Arena::CreateMaybeMessage< ::CSerializedCombatLog_Dictionary_DictString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog_Dictionary_DictString >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog_Dictionary*
Arena::CreateMaybeMessage< ::CSerializedCombatLog_Dictionary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog_Dictionary >(arena);
}
template<> PROTOBUF_NOINLINE ::CSerializedCombatLog*
Arena::CreateMaybeMessage< ::CSerializedCombatLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSerializedCombatLog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCVictoryPredictions_Record*
Arena::CreateMaybeMessage< ::CMsgServerToGCVictoryPredictions_Record >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCVictoryPredictions_Record >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCVictoryPredictions*
Arena::CreateMaybeMessage< ::CMsgServerToGCVictoryPredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCVictoryPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestStatus*
Arena::CreateMaybeMessage< ::CMsgServerToGCRequestStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestStatus_Response*
Arena::CreateMaybeMessage< ::CMsgServerToGCRequestStatus_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestStatus_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerEvaluateToxicChat*
Arena::CreateMaybeMessage< ::CMsgGCToServerEvaluateToxicChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerEvaluateToxicChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCEvaluateToxicChat*
Arena::CreateMaybeMessage< ::CMsgServerToGCEvaluateToxicChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCEvaluateToxicChat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCEvaluateToxicChatResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCEvaluateToxicChatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCEvaluateToxicChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutAssassinMiniGameInfo*
Arena::CreateMaybeMessage< ::CMsgSignOutAssassinMiniGameInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutAssassinMiniGameInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCKillSummaries_KillSummary*
Arena::CreateMaybeMessage< ::CMsgServerToGCKillSummaries_KillSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCKillSummaries_KillSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCKillSummaries*
Arena::CreateMaybeMessage< ::CMsgServerToGCKillSummaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCKillSummaries >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPredictionResult_Prediction*
Arena::CreateMaybeMessage< ::CMsgGCToServerPredictionResult_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPredictionResult_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerPredictionResult*
Arena::CreateMaybeMessage< ::CMsgGCToServerPredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerPredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCLockCharmTrading*
Arena::CreateMaybeMessage< ::CMsgServerToGCLockCharmTrading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCLockCharmTrading >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutUpdatePlayerChallenge_Challenge*
Arena::CreateMaybeMessage< ::CMsgSignOutUpdatePlayerChallenge_Challenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutUpdatePlayerChallenge_Challenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutUpdatePlayerChallenge*
Arena::CreateMaybeMessage< ::CMsgSignOutUpdatePlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutUpdatePlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRerollPlayerChallenge*
Arena::CreateMaybeMessage< ::CMsgServerToGCRerollPlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRerollPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpendWager_Player*
Arena::CreateMaybeMessage< ::CMsgSpendWager_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpendWager_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpendWager*
Arena::CreateMaybeMessage< ::CMsgSpendWager >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpendWager >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutXPCoins_Player*
Arena::CreateMaybeMessage< ::CMsgSignOutXPCoins_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutXPCoins_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutXPCoins*
Arena::CreateMaybeMessage< ::CMsgSignOutXPCoins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutXPCoins >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBounties_Bounty*
Arena::CreateMaybeMessage< ::CMsgSignOutBounties_Bounty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBounties_Bounty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutBounties*
Arena::CreateMaybeMessage< ::CMsgSignOutBounties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutBounties >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement*
Arena::CreateMaybeMessage< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunityGoalProgress_EventGoalIncrement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutCommunityGoalProgress*
Arena::CreateMaybeMessage< ::CMsgSignOutCommunityGoalProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutCommunityGoalProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCloseCompendiumInGamePredictionVoting*
Arena::CreateMaybeMessage< ::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCloseCompendiumInGamePredictionVoting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCloseCompendiumInGamePredictionVotingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult*
Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumInGamePredictionResults_PredictionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumInGamePredictionResults*
Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction*
Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumChosenInGamePredictions_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCompendiumChosenInGamePredictions*
Arena::CreateMaybeMessage< ::CMsgServerToGCCompendiumChosenInGamePredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCompendiumChosenInGamePredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCCompendiumInGamePredictionResults*
Arena::CreateMaybeMessage< ::CMsgGCToGCCompendiumInGamePredictionResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCCompendiumInGamePredictionResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerItemPurchaseHistory*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerItemPurchaseHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerItemPurchaseHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_ItemEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchPlayerNeutralItemEquipHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_PlayerState*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_PlayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_TeamState*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_TeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_TeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory_MatchState*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory_MatchState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory_MatchState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCMatchStateHistory*
Arena::CreateMaybeMessage< ::CMsgServerToGCMatchStateHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCMatchStateHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchStateSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgMatchStateSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchStateSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLaneSelectionSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgLaneSelectionSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLaneSelectionSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAbilitySelectionSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgAbilitySelectionSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAbilitySelectionSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchasePregameSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgItemPurchasePregameSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchasePregameSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchaseSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgItemPurchaseSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchaseSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgItemPurchaseSequenceSteamMLEntry*
Arena::CreateMaybeMessage< ::CMsgItemPurchaseSequenceSteamMLEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgItemPurchaseSequenceSteamMLEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActive*
Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActive >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge*
Arena::CreateMaybeMessage< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPlayerChallengeHistory_PlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCPlayerChallengeHistory*
Arena::CreateMaybeMessage< ::CMsgServerToGCPlayerChallengeHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCPlayerChallengeHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults*
Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse_MapResults >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCCavernCrawlIsHeroActiveResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCCavernCrawlIsHeroActiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCtoServerTensorflowInstance*
Arena::CreateMaybeMessage< ::CMsgGCtoServerTensorflowInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCtoServerTensorflowInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_PlayerStatEntry*
Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_PlayerStatEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_PlayerStatEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_GameStats*
Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_GameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_GameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_MinuteEntry*
Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_MinuteEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_MinuteEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats_PlayerInfo*
Arena::CreateMaybeMessage< ::CMsgDetailedGameStats_PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats_PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDetailedGameStats*
Arena::CreateMaybeMessage< ::CMsgDetailedGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDetailedGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeutralItemStats_NeutralItem*
Arena::CreateMaybeMessage< ::CMsgNeutralItemStats_NeutralItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeutralItemStats_NeutralItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNeutralItemStats*
Arena::CreateMaybeMessage< ::CMsgNeutralItemStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNeutralItemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry*
Arena::CreateMaybeMessage< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerLobbyHeroBanRates_HeroBanEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerLobbyHeroBanRates*
Arena::CreateMaybeMessage< ::CMsgGCToServerLobbyHeroBanRates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerLobbyHeroBanRates >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts*
Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress_CompletedGuildEventContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress_PlayerContract*
Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress_PlayerContract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress_PlayerContract >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildContractProgress*
Arena::CreateMaybeMessage< ::CMsgSignOutGuildContractProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildContractProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildChallengeProgress_ChallengeProgress*
Arena::CreateMaybeMessage< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildChallengeProgress_ChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutGuildChallengeProgress*
Arena::CreateMaybeMessage< ::CMsgSignOutGuildChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutGuildChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats_Player_KillEaterEvent*
Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats_Player_KillEaterEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats_Player_KillEaterEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats_Player*
Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMVPStats*
Arena::CreateMaybeMessage< ::CMsgSignOutMVPStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMVPStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerRecordTrainingData*
Arena::CreateMaybeMessage< ::CMsgGCToServerRecordTrainingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerRecordTrainingData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContracts*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContracts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContracts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse_ContractDetails*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse_ContractDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetGuildContractsResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetGuildContractsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetGuildContractsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy_CandyDetails*
Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy_CandyDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy_CandyDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy_PlayerCandy*
Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy_PlayerCandy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy_PlayerCandy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchDiretideCandy*
Arena::CreateMaybeMessage< ::CMsgMatchDiretideCandy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchDiretideCandy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerData_CheerTypeCount*
Arena::CreateMaybeMessage< ::CMsgGCToServerCheerData_CheerTypeCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerData_CheerTypeCount >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerData*
Arena::CreateMaybeMessage< ::CMsgGCToServerCheerData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerConfig*
Arena::CreateMaybeMessage< ::CMsgCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerConfig*
Arena::CreateMaybeMessage< ::CMsgGCToServerCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetCheerConfig*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetCheerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetCheerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetCheerConfigResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetCheerConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetCheerConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerCheerScalesOverride*
Arena::CreateMaybeMessage< ::CMsgGCToServerCheerScalesOverride >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerCheerScalesOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerGetCheerState*
Arena::CreateMaybeMessage< ::CMsgGCToServerGetCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerGetCheerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerTypeState*
Arena::CreateMaybeMessage< ::CMsgCheerTypeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerTypeState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCheerState*
Arena::CreateMaybeMessage< ::CMsgCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCheerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCReportCheerState*
Arena::CreateMaybeMessage< ::CMsgServerToGCReportCheerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCReportCheerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetStickerHeroes*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetStickerHeroes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetStickerHeroes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetStickerHeroesResponse_Player*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetStickerHeroesResponse_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetStickerHeroesResponse_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCGetStickerHeroesResponse*
Arena::CreateMaybeMessage< ::CMsgServerToGCGetStickerHeroesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCGetStickerHeroesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerSetSteamLearnInferencing*
Arena::CreateMaybeMessage< ::CMsgGCToServerSetSteamLearnInferencing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerSetSteamLearnInferencing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToServerSetSteamLearnKeysChanged*
Arena::CreateMaybeMessage< ::CMsgGCToServerSetSteamLearnKeysChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToServerSetSteamLearnKeysChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchInfo*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchInfoPlayer*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchInfoPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchInfoPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchHeroes*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchHeroes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchHeroes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchHero*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchState_PlayerState*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchState_PlayerState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchState_PlayerState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchState_TeamState*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchState_TeamState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchState_TeamState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnMatchState*
Arena::CreateMaybeMessage< ::CMsgSteamLearnMatchState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnMatchState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnItemPurchase*
Arena::CreateMaybeMessage< ::CMsgSteamLearnItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnPreGameItemPurchases*
Arena::CreateMaybeMessage< ::CMsgSteamLearnPreGameItemPurchases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnPreGameItemPurchases >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnNeutralItemPurchase*
Arena::CreateMaybeMessage< ::CMsgSteamLearnNeutralItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnNeutralItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnAbilitySkill*
Arena::CreateMaybeMessage< ::CMsgSteamLearnAbilitySkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnAbilitySkill >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnWardPlacement_Location*
Arena::CreateMaybeMessage< ::CMsgSteamLearnWardPlacement_Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnWardPlacement_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamLearnWardPlacement*
Arena::CreateMaybeMessage< ::CMsgSteamLearnWardPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSteamLearnWardPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMuertaMinigame*
Arena::CreateMaybeMessage< ::CMsgSignOutMuertaMinigame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMuertaMinigame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMapStats_Player*
Arena::CreateMaybeMessage< ::CMsgSignOutMapStats_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMapStats_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSignOutMapStats*
Arena::CreateMaybeMessage< ::CMsgSignOutMapStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSignOutMapStats >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
