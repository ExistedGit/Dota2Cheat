// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#include "dota_gcmessages_client_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CMsgStartFindingMatch::CMsgStartFindingMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_language_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_.team_id_)*/0u
  , /*decltype(_impl_.game_language_enum_)*/0
  , /*decltype(_impl_.region_select_flags_)*/0u
  , /*decltype(_impl_.steam_clan_account_id_)*/0u
  , /*decltype(_impl_.solo_queue_)*/false
  , /*decltype(_impl_.is_challenge_match_)*/false
  , /*decltype(_impl_.high_priority_disabled_)*/false
  , /*decltype(_impl_.disable_experimental_gameplay_)*/false
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.custom_game_difficulty_mask_)*/0u
  , /*decltype(_impl_.bot_difficulty_mask_)*/0u
  , /*decltype(_impl_.bot_script_index_mask_)*/0u
  , /*decltype(_impl_.matchlanguages_)*/4294967295u
  , /*decltype(_impl_.matchgroups_)*/4294967295u
  , /*decltype(_impl_.game_modes_)*/4294967295u} {}
struct CMsgStartFindingMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgStartFindingMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgStartFindingMatchDefaultTypeInternal() {}
  union {
    CMsgStartFindingMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgStartFindingMatchDefaultTypeInternal _CMsgStartFindingMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.responsible_party_members_)*/{}
  , /*decltype(_impl_.error_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.debug_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.result_metadata_)*/0u
  , /*decltype(_impl_.legacy_generic_eresult_)*/2u} {}
struct CMsgStartFindingMatchResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgStartFindingMatchResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgStartFindingMatchResultDefaultTypeInternal() {}
  union {
    CMsgStartFindingMatchResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgStartFindingMatchResultDefaultTypeInternal _CMsgStartFindingMatchResult_default_instance_;
PROTOBUF_CONSTEXPR CMsgStopFindingMatch::CMsgStopFindingMatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accept_cooldown_)*/false} {}
struct CMsgStopFindingMatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgStopFindingMatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgStopFindingMatchDefaultTypeInternal() {}
  union {
    CMsgStopFindingMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgStopFindingMatchDefaultTypeInternal _CMsgStopFindingMatch_default_instance_;
PROTOBUF_CONSTEXPR CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.additional_slots_)*/0u
  , /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_.matchgroups_)*/0u
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.language_)*/0} {}
struct CMsgPartyBuilderOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPartyBuilderOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPartyBuilderOptionsDefaultTypeInternal() {}
  union {
    CMsgPartyBuilderOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPartyBuilderOptionsDefaultTypeInternal _CMsgPartyBuilderOptions_default_instance_;
PROTOBUF_CONSTEXPR CMsgReadyUp::CMsgReadyUp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hardware_specs_)*/nullptr
  , /*decltype(_impl_.ready_up_key_)*/uint64_t{0u}
  , /*decltype(_impl_.state_)*/0} {}
struct CMsgReadyUpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgReadyUpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgReadyUpDefaultTypeInternal() {}
  union {
    CMsgReadyUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgReadyUpDefaultTypeInternal _CMsgReadyUp_default_instance_;
PROTOBUF_CONSTEXPR CMsgReadyUpStatus::CMsgReadyUpStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.accepted_ids_)*/{}
  , /*decltype(_impl_.declined_ids_)*/{}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}} {}
struct CMsgReadyUpStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgReadyUpStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgReadyUpStatusDefaultTypeInternal() {}
  union {
    CMsgReadyUpStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgReadyUpStatusDefaultTypeInternal _CMsgReadyUpStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(
    ::_pbi::ConstantInitialized) {}
struct CMsgAbandonCurrentGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgAbandonCurrentGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgAbandonCurrentGameDefaultTypeInternal() {}
  union {
    CMsgAbandonCurrentGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgAbandonCurrentGameDefaultTypeInternal _CMsgAbandonCurrentGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0} {}
struct CMsgLobbyScenarioSaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyScenarioSaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyScenarioSaveDefaultTypeInternal() {}
  union {
    CMsgLobbyScenarioSave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyScenarioSaveDefaultTypeInternal _CMsgLobbyScenarioSave_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.shuffle_draft_order_)*/false} {}
struct CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetailsDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetailsDefaultTypeInternal _CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_details_)*/{}
  , /*decltype(_impl_.requested_hero_ids_)*/{}
  , /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_game_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_host_ping_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scenario_save_)*/nullptr
  , /*decltype(_impl_.ability_draft_specific_details_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.cm_pick_)*/0
  , /*decltype(_impl_.bot_difficulty_radiant_)*/0
  , /*decltype(_impl_.allow_cheats_)*/false
  , /*decltype(_impl_.fill_with_bots_)*/false
  , /*decltype(_impl_.intro_mode_)*/false
  , /*decltype(_impl_.allow_spectating_)*/false
  , /*decltype(_impl_.leagueid_)*/0u
  , /*decltype(_impl_.penalty_level_radiant_)*/0u
  , /*decltype(_impl_.penalty_level_dire_)*/0u
  , /*decltype(_impl_.load_game_id_)*/0u
  , /*decltype(_impl_.series_type_)*/0u
  , /*decltype(_impl_.radiant_series_wins_)*/0u
  , /*decltype(_impl_.dire_series_wins_)*/0u
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_difficulty_)*/0u
  , /*decltype(_impl_.custom_min_players_)*/0u
  , /*decltype(_impl_.custom_max_players_)*/0u
  , /*decltype(_impl_.visibility_)*/0
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_timestamp_)*/0u
  , /*decltype(_impl_.allchat_)*/false
  , /*decltype(_impl_.lan_)*/false
  , /*decltype(_impl_.custom_game_penalties_)*/false
  , /*decltype(_impl_.do_player_draft_)*/false
  , /*decltype(_impl_.previous_match_override_)*/uint64_t{0u}
  , /*decltype(_impl_.pause_setting_)*/0
  , /*decltype(_impl_.bot_difficulty_dire_)*/0
  , /*decltype(_impl_.bot_radiant_)*/uint64_t{0u}
  , /*decltype(_impl_.bot_dire_)*/uint64_t{0u}
  , /*decltype(_impl_.selection_priority_rules_)*/0
  , /*decltype(_impl_.league_node_id_)*/0u
  , /*decltype(_impl_.dota_tv_delay_)*/1} {}
struct CMsgPracticeLobbySetDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbySetDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetDetailsDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbySetDetailsDefaultTypeInternal _CMsgPracticeLobbySetDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.signature_)*/uint64_t{0u}
  , /*decltype(_impl_.version_)*/0} {}
struct CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCreate_SaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_details_)*/nullptr
  , /*decltype(_impl_.save_game_)*/nullptr
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgPracticeLobbyCreateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyCreateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCreateDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyCreateDefaultTypeInternal _CMsgPracticeLobbyCreate_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_.bot_difficulty_)*/0} {}
struct CMsgPracticeLobbySetTeamSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbySetTeamSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetTeamSlotDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetTeamSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbySetTeamSlotDefaultTypeInternal _CMsgPracticeLobbySetTeamSlot_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_)*/0} {}
struct CMsgPracticeLobbySetCoachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbySetCoachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbySetCoachDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbySetCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbySetCoachDefaultTypeInternal _CMsgPracticeLobbySetCoach_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preferred_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_country_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preferred_language_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.channel_)*/0u} {}
struct CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoinBroadcastChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_)*/0u} {}
struct CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyCloseBroadcastChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(
    ::_pbi::ConstantInitialized) {}
struct CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgPracticeLobbyKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyKickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyKickDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyKickDefaultTypeInternal _CMsgPracticeLobbyKick_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgPracticeLobbyKickFromTeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyKickFromTeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyKickFromTeamDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyKickFromTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyKickFromTeamDefaultTypeInternal _CMsgPracticeLobbyKickFromTeam_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(
    ::_pbi::ConstantInitialized) {}
struct CMsgPracticeLobbyLeaveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyLeaveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyLeaveDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyLeave _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyLeaveDefaultTypeInternal _CMsgPracticeLobbyLeave_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgPracticeLobbyLaunchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyLaunchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyLaunchDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyLaunch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyLaunchDefaultTypeInternal _CMsgPracticeLobbyLaunch_default_instance_;
PROTOBUF_CONSTEXPR CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgApplyTeamToPracticeLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgApplyTeamToPracticeLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgApplyTeamToPracticeLobbyDefaultTypeInternal() {}
  union {
    CMsgApplyTeamToPracticeLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgApplyTeamToPracticeLobbyDefaultTypeInternal _CMsgApplyTeamToPracticeLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyList::CMsgPracticeLobbyList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.region_)*/0u
  , /*decltype(_impl_.game_mode_)*/0} {}
struct CMsgPracticeLobbyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyListDefaultTypeInternal _CMsgPracticeLobbyList_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0u} {}
struct CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponseEntry_CLobbyMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.members_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_game_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_host_ping_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_.leader_account_id_)*/0u
  , /*decltype(_impl_.game_mode_)*/0
  , /*decltype(_impl_.requires_pass_key_)*/false
  , /*decltype(_impl_.friend_present_)*/false
  , /*decltype(_impl_.penalties_enabled_)*/false
  , /*decltype(_impl_.players_)*/0u
  , /*decltype(_impl_.max_player_count_)*/0u
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.min_player_count_)*/0u} {}
struct CMsgPracticeLobbyListResponseEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponseEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseEntryDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyListResponseEntryDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lobbies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgPracticeLobbyListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyListResponseDefaultTypeInternal _CMsgPracticeLobbyListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyList::CMsgLobbyList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.game_mode_)*/0} {}
struct CMsgLobbyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyListDefaultTypeInternal() {}
  union {
    CMsgLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyListDefaultTypeInternal _CMsgLobbyList_default_instance_;
PROTOBUF_CONSTEXPR CMsgLobbyListResponse::CMsgLobbyListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lobbies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgLobbyListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgLobbyListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgLobbyListResponseDefaultTypeInternal _CMsgLobbyListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.custom_game_timestamp_)*/0u
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}} {}
struct CMsgPracticeLobbyJoinDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoinDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyJoinDefaultTypeInternal _CMsgPracticeLobbyJoin_default_instance_;
PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgPracticeLobbyJoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgPracticeLobbyJoinResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgPracticeLobbyJoinResponseDefaultTypeInternal() {}
  union {
    CMsgPracticeLobbyJoinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgPracticeLobbyJoinResponseDefaultTypeInternal _CMsgPracticeLobbyJoinResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.friends_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgFriendPracticeLobbyListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFriendPracticeLobbyListRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFriendPracticeLobbyListRequestDefaultTypeInternal() {}
  union {
    CMsgFriendPracticeLobbyListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFriendPracticeLobbyListRequestDefaultTypeInternal _CMsgFriendPracticeLobbyListRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lobbies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgFriendPracticeLobbyListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgFriendPracticeLobbyListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgFriendPracticeLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgFriendPracticeLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgFriendPracticeLobbyListResponseDefaultTypeInternal _CMsgFriendPracticeLobbyListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_region_)*/0u} {}
struct CMsgJoinableCustomGameModesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesRequestDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomGameModesRequestDefaultTypeInternal _CMsgJoinableCustomGameModesRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.lobby_count_)*/0u
  , /*decltype(_impl_.player_count_)*/0u} {}
struct CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal _CMsgJoinableCustomGameModesResponseEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_modes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgJoinableCustomGameModesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomGameModesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomGameModesResponseDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomGameModesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomGameModesResponseDefaultTypeInternal _CMsgJoinableCustomGameModesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_region_)*/0u} {}
struct CMsgJoinableCustomLobbiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesRequestDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomLobbiesRequestDefaultTypeInternal _CMsgJoinableCustomLobbiesRequest_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.leader_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.custom_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lan_host_ping_location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.member_count_)*/0u
  , /*decltype(_impl_.leader_account_id_)*/0u
  , /*decltype(_impl_.max_player_count_)*/0u
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.lobby_creation_time_)*/0u
  , /*decltype(_impl_.custom_game_timestamp_)*/0u
  , /*decltype(_impl_.has_pass_key_)*/false
  , /*decltype(_impl_.penalties_enabled_)*/false
  , /*decltype(_impl_.min_player_count_)*/0u
  , /*decltype(_impl_.custom_game_crc_)*/uint64_t{0u}} {}
struct CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesResponseEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal _CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lobbies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgJoinableCustomLobbiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgJoinableCustomLobbiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgJoinableCustomLobbiesResponseDefaultTypeInternal() {}
  union {
    CMsgJoinableCustomLobbiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgJoinableCustomLobbiesResponseDefaultTypeInternal _CMsgJoinableCustomLobbiesResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_region_)*/0u
  , /*decltype(_impl_.ping_)*/0u
  , /*decltype(_impl_.region_code_)*/0u} {}
struct CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobby_LegacyRegionPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legacy_region_pings_)*/{}
  , /*decltype(_impl_.create_lobby_details_)*/nullptr
  , /*decltype(_impl_.ping_data_)*/nullptr
  , /*decltype(_impl_.custom_game_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_server_region_)*/0u
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.allow_any_map_)*/false} {}
struct CMsgQuickJoinCustomLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobbyDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgQuickJoinCustomLobbyDefaultTypeInternal _CMsgQuickJoinCustomLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal() {}
  union {
    CMsgQuickJoinCustomLobbyResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal _CMsgQuickJoinCustomLobbyResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgBotGameCreate::CMsgBotGameCreate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.search_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.client_version_)*/0u
  , /*decltype(_impl_.difficulty_radiant_)*/0
  , /*decltype(_impl_.team_)*/0
  , /*decltype(_impl_.game_mode_)*/0u
  , /*decltype(_impl_.difficulty_dire_)*/0} {}
struct CMsgBotGameCreateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgBotGameCreateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgBotGameCreateDefaultTypeInternal() {}
  union {
    CMsgBotGameCreate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgBotGameCreateDefaultTypeInternal _CMsgBotGameCreate_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wants_coach_)*/false} {}
struct CMsgDOTAPartyMemberSetCoachDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAPartyMemberSetCoachDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAPartyMemberSetCoachDefaultTypeInternal() {}
  union {
    CMsgDOTAPartyMemberSetCoach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAPartyMemberSetCoachDefaultTypeInternal _CMsgDOTAPartyMemberSetCoach_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_leader_steamid_)*/uint64_t{0u}} {}
struct CMsgDOTASetGroupLeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTASetGroupLeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTASetGroupLeaderDefaultTypeInternal() {}
  union {
    CMsgDOTASetGroupLeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTASetGroupLeaderDefaultTypeInternal _CMsgDOTASetGroupLeader_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.invited_steamids_)*/{}
  , /*decltype(_impl_.invited_groupids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgDOTACancelGroupInvitesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTACancelGroupInvitesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTACancelGroupInvitesDefaultTypeInternal() {}
  union {
    CMsgDOTACancelGroupInvites _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTACancelGroupInvitesDefaultTypeInternal _CMsgDOTACancelGroupInvites_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.open_)*/false} {}
struct CMsgDOTASetGroupOpenStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTASetGroupOpenStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTASetGroupOpenStatusDefaultTypeInternal() {}
  union {
    CMsgDOTASetGroupOpenStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTASetGroupOpenStatusDefaultTypeInternal _CMsgDOTASetGroupOpenStatus_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.other_group_id_)*/uint64_t{0u}} {}
struct CMsgDOTAGroupMergeInviteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeInviteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeInviteDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeInvite _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAGroupMergeInviteDefaultTypeInternal _CMsgDOTAGroupMergeInvite_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.initiator_group_id_)*/uint64_t{0u}
  , /*decltype(_impl_.accept_)*/false} {}
struct CMsgDOTAGroupMergeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAGroupMergeResponseDefaultTypeInternal _CMsgDOTAGroupMergeResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.result_)*/0} {}
struct CMsgDOTAGroupMergeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgDOTAGroupMergeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgDOTAGroupMergeReplyDefaultTypeInternal() {}
  union {
    CMsgDOTAGroupMergeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgDOTAGroupMergeReplyDefaultTypeInternal _CMsgDOTAGroupMergeReply_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.team_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.team_logo_)*/uint64_t{0u}
  , /*decltype(_impl_.team_id_)*/0u} {}
struct CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyGameDetails_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_Team_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stream_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stream_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.radiant_team_)*/nullptr
  , /*decltype(_impl_.dire_team_)*/nullptr
  , /*decltype(_impl_.match_id_)*/uint64_t{0u}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.language_)*/0u
  , /*decltype(_impl_.league_id_)*/0u
  , /*decltype(_impl_.series_type_)*/0u
  , /*decltype(_impl_.series_game_)*/0u} {}
struct CMsgSpectatorLobbyGameDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectatorLobbyGameDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyGameDetailsDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyGameDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectatorLobbyGameDetailsDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lobby_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pass_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_details_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}} {}
struct CMsgSetSpectatorLobbyDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSetSpectatorLobbyDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSetSpectatorLobbyDetailsDefaultTypeInternal() {}
  union {
    CMsgSetSpectatorLobbyDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSetSpectatorLobbyDetailsDefaultTypeInternal _CMsgSetSpectatorLobbyDetails_default_instance_;
PROTOBUF_CONSTEXPR CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.details_)*/nullptr
  , /*decltype(_impl_.client_version_)*/0u} {}
struct CMsgCreateSpectatorLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgCreateSpectatorLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgCreateSpectatorLobbyDefaultTypeInternal() {}
  union {
    CMsgCreateSpectatorLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgCreateSpectatorLobbyDefaultTypeInternal _CMsgCreateSpectatorLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(
    ::_pbi::ConstantInitialized) {}
struct CMsgSpectatorLobbyListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectatorLobbyListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectatorLobbyListDefaultTypeInternal _CMsgSpectatorLobbyList_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_details_)*/nullptr
  , /*decltype(_impl_.lobby_id_)*/uint64_t{0u}
  , /*decltype(_impl_.requires_pass_key_)*/false
  , /*decltype(_impl_.leader_account_id_)*/0u
  , /*decltype(_impl_.member_count_)*/0u} {}
struct CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyListResponse_SpectatorLobby _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
PROTOBUF_CONSTEXPR CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lobbies_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CMsgSpectatorLobbyListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSpectatorLobbyListResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSpectatorLobbyListResponseDefaultTypeInternal() {}
  union {
    CMsgSpectatorLobbyListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSpectatorLobbyListResponseDefaultTypeInternal _CMsgSpectatorLobbyListResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.server_steam_id_)*/uint64_t{0u}} {}
struct CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestSteamDatagramTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.serialized_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCRequestSteamDatagramTicketResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legacy_extra_fields_)*/{}
  , /*decltype(_impl_.legacy_signature_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serialized_ticket_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legacy_authorized_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_time_expiry_)*/0u
  , /*decltype(_impl_.legacy_authorized_public_ip_)*/0u
  , /*decltype(_impl_.legacy_gameserver_steam_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_gameserver_net_id_)*/uint64_t{0u}
  , /*decltype(_impl_.legacy_app_id_)*/0u} {}
struct CMsgGCToClientSteamDatagramTicketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientSteamDatagramTicketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientSteamDatagramTicketDefaultTypeInternal() {}
  union {
    CMsgGCToClientSteamDatagramTicket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientSteamDatagramTicketDefaultTypeInternal _CMsgGCToClientSteamDatagramTicket_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToClientRequestLaneSelectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientRequestLaneSelectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestLaneSelectionDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestLaneSelection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientRequestLaneSelectionDefaultTypeInternal _CMsgGCToClientRequestLaneSelection_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.high_priority_disabled_)*/false} {}
struct CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestLaneSelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal _CMsgGCToClientRequestLaneSelectionResponse_default_instance_;
PROTOBUF_CONSTEXPR CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(
    ::_pbi::ConstantInitialized) {}
struct CMsgGCToClientRequestMMInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgGCToClientRequestMMInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgGCToClientRequestMMInfoDefaultTypeInternal() {}
  union {
    CMsgGCToClientRequestMMInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgGCToClientRequestMMInfoDefaultTypeInternal _CMsgGCToClientRequestMMInfo_default_instance_;
PROTOBUF_CONSTEXPR CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lane_selection_flags_)*/0u
  , /*decltype(_impl_.high_priority_disabled_)*/false} {}
struct CMsgClientToGCMMInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgClientToGCMMInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgClientToGCMMInfoDefaultTypeInternal() {}
  union {
    CMsgClientToGCMMInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgClientToGCMMInfoDefaultTypeInternal _CMsgClientToGCMMInfo_default_instance_;
static ::_pb::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[63];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = nullptr;

const uint32_t TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.game_modes_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.matchlanguages_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.game_language_enum_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.game_language_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.ping_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.region_select_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.solo_queue_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.steam_clan_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.is_challenge_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.high_priority_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.disable_experimental_gameplay_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.custom_game_difficulty_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.bot_difficulty_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatch, _impl_.bot_script_index_mask_),
  0,
  18,
  3,
  19,
  4,
  17,
  5,
  6,
  1,
  2,
  7,
  9,
  8,
  10,
  13,
  11,
  12,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.legacy_generic_eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.error_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.debug_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.responsible_party_members_),
  PROTOBUF_FIELD_OFFSET(::CMsgStartFindingMatchResult, _impl_.result_metadata_),
  4,
  2,
  0,
  1,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgStopFindingMatch, _impl_.accept_cooldown_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_.additional_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_.matchgroups_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyBuilderOptions, _impl_.language_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _impl_.ready_up_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUp, _impl_.hardware_specs_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _impl_.accepted_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgReadyUpStatus, _impl_.declined_ids_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAbandonCurrentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyScenarioSave, _impl_.data_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails, _impl_.shuffle_draft_order_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.team_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.cm_pick_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.bot_difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.allow_cheats_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.fill_with_bots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.intro_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.allow_spectating_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.leagueid_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.penalty_level_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.penalty_level_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.load_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.radiant_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.dire_series_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.allchat_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.dota_tv_delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.lan_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_min_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_max_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.visibility_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.previous_match_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.pause_setting_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.bot_difficulty_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.bot_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.bot_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.selection_priority_rules_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.custom_game_penalties_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.requested_hero_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.scenario_save_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.ability_draft_specific_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetDetails, _impl_.do_player_draft_),
  7,
  0,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  1,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  30,
  41,
  31,
  2,
  3,
  24,
  23,
  25,
  26,
  27,
  28,
  29,
  34,
  35,
  36,
  37,
  38,
  39,
  32,
  4,
  40,
  ~0u,
  5,
  6,
  33,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _impl_.steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate_SaveGame, _impl_.signature_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_.lobby_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCreate, _impl_.save_game_),
  0,
  1,
  4,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetTeamSlot, _impl_.bot_difficulty_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbySetCoach, _impl_.team_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _impl_.channel_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _impl_.preferred_description_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _impl_.preferred_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinBroadcastChannel, _impl_.preferred_language_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyCloseBroadcastChannel, _impl_.channel_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKick, _impl_.account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyKickFromTeam, _impl_.account_id_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyLaunch, _impl_.client_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgApplyTeamToPracticeLobby, _impl_.team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _impl_.region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyList, _impl_.game_mode_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry_CLobbyMember, _impl_.player_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.members_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.custom_game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.friend_present_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.max_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.min_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponseEntry, _impl_.penalties_enabled_),
  4,
  ~0u,
  7,
  5,
  0,
  1,
  6,
  8,
  10,
  2,
  11,
  12,
  13,
  3,
  14,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyListResponse, _impl_.lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyList, _impl_.game_mode_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyListResponse, _impl_.lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoin, _impl_.custom_game_timestamp_),
  1,
  2,
  0,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPracticeLobbyJoinResponse, _impl_.result_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListRequest, _impl_.friends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgFriendPracticeLobbyListResponse, _impl_.lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesRequest, _impl_.server_region_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _impl_.lobby_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponseEntry, _impl_.player_count_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomGameModesResponse, _impl_.game_modes_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesRequest, _impl_.custom_game_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.lobby_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.member_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.leader_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.custom_map_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.max_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.has_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.lan_host_ping_location_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.lobby_creation_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.custom_game_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.min_player_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponseEntry, _impl_.penalties_enabled_),
  4,
  5,
  0,
  6,
  7,
  1,
  2,
  8,
  9,
  12,
  3,
  10,
  11,
  15,
  14,
  13,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgJoinableCustomLobbiesResponse, _impl_.lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_.server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_.ping_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_.region_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.legacy_server_region_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.create_lobby_details_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.allow_any_map_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.legacy_region_pings_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobby, _impl_.ping_data_),
  3,
  2,
  4,
  0,
  5,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgQuickJoinCustomLobbyResponse, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.difficulty_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.team_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotGameCreate, _impl_.difficulty_dire_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAPartyMemberSetCoach, _impl_.wants_coach_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupLeader, _impl_.new_leader_steamid_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, _impl_.invited_steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACancelGroupInvites, _impl_.invited_groupids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASetGroupOpenStatus, _impl_.open_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeInvite, _impl_.other_group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _impl_.initiator_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeResponse, _impl_.accept_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAGroupMergeReply, _impl_.result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _impl_.team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _impl_.team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails_Team, _impl_.team_logo_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.stream_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.stream_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.series_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.radiant_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyGameDetails, _impl_.dire_team_),
  6,
  4,
  5,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _impl_.lobby_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _impl_.pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSetSpectatorLobbyDetails, _impl_.game_details_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _impl_.client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgCreateSpectatorLobby, _impl_.details_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.game_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.requires_pass_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.leader_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.member_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.game_details_),
  2,
  0,
  3,
  4,
  5,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectatorLobbyListResponse, _impl_.lobbies_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicket, _impl_.server_steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _impl_.serialized_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRequestSteamDatagramTicketResponse, _impl_.message_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_authorized_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_authorized_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_gameserver_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_gameserver_net_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.legacy_extra_fields_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientSteamDatagramTicket, _impl_.serialized_ticket_),
  3,
  2,
  4,
  5,
  6,
  0,
  7,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestLaneSelectionResponse, _impl_.high_priority_disabled_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientRequestMMInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _impl_.lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMMInfo, _impl_.high_priority_disabled_),
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 26, -1, sizeof(::CMsgStartFindingMatch)},
  { 46, 58, -1, sizeof(::CMsgStartFindingMatchResult)},
  { 64, 71, -1, sizeof(::CMsgStopFindingMatch)},
  { 72, 83, -1, sizeof(::CMsgPartyBuilderOptions)},
  { 88, 97, -1, sizeof(::CMsgReadyUp)},
  { 100, 109, -1, sizeof(::CMsgReadyUpStatus)},
  { 112, -1, -1, sizeof(::CMsgAbandonCurrentGame)},
  { 118, 126, -1, sizeof(::CMsgLobbyScenarioSave)},
  { 128, 135, -1, sizeof(::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails)},
  { 136, 186, -1, sizeof(::CMsgPracticeLobbySetDetails)},
  { 230, 240, -1, sizeof(::CMsgPracticeLobbyCreate_SaveGame)},
  { 244, 255, -1, sizeof(::CMsgPracticeLobbyCreate)},
  { 260, 269, -1, sizeof(::CMsgPracticeLobbySetTeamSlot)},
  { 272, 279, -1, sizeof(::CMsgPracticeLobbySetCoach)},
  { 280, 290, -1, sizeof(::CMsgPracticeLobbyJoinBroadcastChannel)},
  { 294, 301, -1, sizeof(::CMsgPracticeLobbyCloseBroadcastChannel)},
  { 302, -1, -1, sizeof(::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)},
  { 308, 315, -1, sizeof(::CMsgPracticeLobbyKick)},
  { 316, 323, -1, sizeof(::CMsgPracticeLobbyKickFromTeam)},
  { 324, -1, -1, sizeof(::CMsgPracticeLobbyLeave)},
  { 330, 337, -1, sizeof(::CMsgPracticeLobbyLaunch)},
  { 338, 345, -1, sizeof(::CMsgApplyTeamToPracticeLobby)},
  { 346, 355, -1, sizeof(::CMsgPracticeLobbyList)},
  { 358, 366, -1, sizeof(::CMsgPracticeLobbyListResponseEntry_CLobbyMember)},
  { 368, 390, -1, sizeof(::CMsgPracticeLobbyListResponseEntry)},
  { 406, -1, -1, sizeof(::CMsgPracticeLobbyListResponse)},
  { 413, 421, -1, sizeof(::CMsgLobbyList)},
  { 423, -1, -1, sizeof(::CMsgLobbyListResponse)},
  { 430, 441, -1, sizeof(::CMsgPracticeLobbyJoin)},
  { 446, 453, -1, sizeof(::CMsgPracticeLobbyJoinResponse)},
  { 454, -1, -1, sizeof(::CMsgFriendPracticeLobbyListRequest)},
  { 461, -1, -1, sizeof(::CMsgFriendPracticeLobbyListResponse)},
  { 468, 475, -1, sizeof(::CMsgJoinableCustomGameModesRequest)},
  { 476, 485, -1, sizeof(::CMsgJoinableCustomGameModesResponseEntry)},
  { 488, -1, -1, sizeof(::CMsgJoinableCustomGameModesResponse)},
  { 495, 503, -1, sizeof(::CMsgJoinableCustomLobbiesRequest)},
  { 505, 527, -1, sizeof(::CMsgJoinableCustomLobbiesResponseEntry)},
  { 543, -1, -1, sizeof(::CMsgJoinableCustomLobbiesResponse)},
  { 550, 559, -1, sizeof(::CMsgQuickJoinCustomLobby_LegacyRegionPing)},
  { 562, 575, -1, sizeof(::CMsgQuickJoinCustomLobby)},
  { 582, 589, -1, sizeof(::CMsgQuickJoinCustomLobbyResponse)},
  { 590, 602, -1, sizeof(::CMsgBotGameCreate)},
  { 608, 615, -1, sizeof(::CMsgDOTAPartyMemberSetCoach)},
  { 616, 623, -1, sizeof(::CMsgDOTASetGroupLeader)},
  { 624, -1, -1, sizeof(::CMsgDOTACancelGroupInvites)},
  { 632, 639, -1, sizeof(::CMsgDOTASetGroupOpenStatus)},
  { 640, 647, -1, sizeof(::CMsgDOTAGroupMergeInvite)},
  { 648, 656, -1, sizeof(::CMsgDOTAGroupMergeResponse)},
  { 658, 665, -1, sizeof(::CMsgDOTAGroupMergeReply)},
  { 666, 675, -1, sizeof(::CMsgSpectatorLobbyGameDetails_Team)},
  { 678, 694, -1, sizeof(::CMsgSpectatorLobbyGameDetails)},
  { 704, 714, -1, sizeof(::CMsgSetSpectatorLobbyDetails)},
  { 718, 726, -1, sizeof(::CMsgCreateSpectatorLobby)},
  { 728, -1, -1, sizeof(::CMsgSpectatorLobbyList)},
  { 734, 746, -1, sizeof(::CMsgSpectatorLobbyListResponse_SpectatorLobby)},
  { 752, -1, -1, sizeof(::CMsgSpectatorLobbyListResponse)},
  { 759, 766, -1, sizeof(::CMsgClientToGCRequestSteamDatagramTicket)},
  { 767, 775, -1, sizeof(::CMsgClientToGCRequestSteamDatagramTicketResponse)},
  { 777, 792, -1, sizeof(::CMsgGCToClientSteamDatagramTicket)},
  { 801, -1, -1, sizeof(::CMsgGCToClientRequestLaneSelection)},
  { 807, 815, -1, sizeof(::CMsgGCToClientRequestLaneSelectionResponse)},
  { 817, -1, -1, sizeof(::CMsgGCToClientRequestMMInfo)},
  { 823, 831, -1, sizeof(::CMsgClientToGCMMInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CMsgStartFindingMatch_default_instance_._instance,
  &::_CMsgStartFindingMatchResult_default_instance_._instance,
  &::_CMsgStopFindingMatch_default_instance_._instance,
  &::_CMsgPartyBuilderOptions_default_instance_._instance,
  &::_CMsgReadyUp_default_instance_._instance,
  &::_CMsgReadyUpStatus_default_instance_._instance,
  &::_CMsgAbandonCurrentGame_default_instance_._instance,
  &::_CMsgLobbyScenarioSave_default_instance_._instance,
  &::_CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails_default_instance_._instance,
  &::_CMsgPracticeLobbySetDetails_default_instance_._instance,
  &::_CMsgPracticeLobbyCreate_SaveGame_default_instance_._instance,
  &::_CMsgPracticeLobbyCreate_default_instance_._instance,
  &::_CMsgPracticeLobbySetTeamSlot_default_instance_._instance,
  &::_CMsgPracticeLobbySetCoach_default_instance_._instance,
  &::_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_._instance,
  &::_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_._instance,
  &::_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_._instance,
  &::_CMsgPracticeLobbyKick_default_instance_._instance,
  &::_CMsgPracticeLobbyKickFromTeam_default_instance_._instance,
  &::_CMsgPracticeLobbyLeave_default_instance_._instance,
  &::_CMsgPracticeLobbyLaunch_default_instance_._instance,
  &::_CMsgApplyTeamToPracticeLobby_default_instance_._instance,
  &::_CMsgPracticeLobbyList_default_instance_._instance,
  &::_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_._instance,
  &::_CMsgPracticeLobbyListResponseEntry_default_instance_._instance,
  &::_CMsgPracticeLobbyListResponse_default_instance_._instance,
  &::_CMsgLobbyList_default_instance_._instance,
  &::_CMsgLobbyListResponse_default_instance_._instance,
  &::_CMsgPracticeLobbyJoin_default_instance_._instance,
  &::_CMsgPracticeLobbyJoinResponse_default_instance_._instance,
  &::_CMsgFriendPracticeLobbyListRequest_default_instance_._instance,
  &::_CMsgFriendPracticeLobbyListResponse_default_instance_._instance,
  &::_CMsgJoinableCustomGameModesRequest_default_instance_._instance,
  &::_CMsgJoinableCustomGameModesResponseEntry_default_instance_._instance,
  &::_CMsgJoinableCustomGameModesResponse_default_instance_._instance,
  &::_CMsgJoinableCustomLobbiesRequest_default_instance_._instance,
  &::_CMsgJoinableCustomLobbiesResponseEntry_default_instance_._instance,
  &::_CMsgJoinableCustomLobbiesResponse_default_instance_._instance,
  &::_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_._instance,
  &::_CMsgQuickJoinCustomLobby_default_instance_._instance,
  &::_CMsgQuickJoinCustomLobbyResponse_default_instance_._instance,
  &::_CMsgBotGameCreate_default_instance_._instance,
  &::_CMsgDOTAPartyMemberSetCoach_default_instance_._instance,
  &::_CMsgDOTASetGroupLeader_default_instance_._instance,
  &::_CMsgDOTACancelGroupInvites_default_instance_._instance,
  &::_CMsgDOTASetGroupOpenStatus_default_instance_._instance,
  &::_CMsgDOTAGroupMergeInvite_default_instance_._instance,
  &::_CMsgDOTAGroupMergeResponse_default_instance_._instance,
  &::_CMsgDOTAGroupMergeReply_default_instance_._instance,
  &::_CMsgSpectatorLobbyGameDetails_Team_default_instance_._instance,
  &::_CMsgSpectatorLobbyGameDetails_default_instance_._instance,
  &::_CMsgSetSpectatorLobbyDetails_default_instance_._instance,
  &::_CMsgCreateSpectatorLobby_default_instance_._instance,
  &::_CMsgSpectatorLobbyList_default_instance_._instance,
  &::_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_._instance,
  &::_CMsgSpectatorLobbyListResponse_default_instance_._instance,
  &::_CMsgClientToGCRequestSteamDatagramTicket_default_instance_._instance,
  &::_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_._instance,
  &::_CMsgGCToClientSteamDatagramTicket_default_instance_._instance,
  &::_CMsgGCToClientRequestLaneSelection_default_instance_._instance,
  &::_CMsgGCToClientRequestLaneSelectionResponse_default_instance_._instance,
  &::_CMsgGCToClientRequestMMInfo_default_instance_._instance,
  &::_CMsgClientToGCMMInfo_default_instance_._instance,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-dota_gcmessages_client_match_managemen"
  "t.proto\032\023steammessages.proto\032\027dota_share"
  "d_enums.proto\032\027dota_client_enums.proto\032\025"
  "base_gcmessages.proto\032\"dota_gcmessages_c"
  "ommon_lobby.proto\"\240\005\n\025CMsgStartFindingMa"
  "tch\022\013\n\003key\030\001 \001(\t\022\037\n\013matchgroups\030\002 \001(\r:\n4"
  "294967295\022\026\n\016client_version\030\003 \001(\r\022\036\n\ngam"
  "e_modes\030\004 \001(\r:\n4294967295\0221\n\nmatch_type\030"
  "\006 \001(\0162\n.MatchType:\021MATCH_TYPE_CASUAL\022\"\n\016"
  "matchlanguages\030\007 \001(\r:\n4294967295\022\017\n\007team"
  "_id\030\010 \001(\r\022C\n\022game_language_enum\030\n \001(\0162\017."
  "MatchLanguages:\026MATCH_LANGUAGE_INVALID\022\032"
  "\n\022game_language_name\030\013 \001(\t\022&\n\tping_data\030"
  "\014 \001(\0132\023.CMsgClientPingData\022\033\n\023region_sel"
  "ect_flags\030\r \001(\r\022\022\n\nsolo_queue\030\016 \001(\010\022\035\n\025s"
  "team_clan_account_id\030\020 \001(\r\022\032\n\022is_challen"
  "ge_match\030\021 \001(\010\022\034\n\024lane_selection_flags\030\022"
  " \001(\r\022\036\n\026high_priority_disabled\030\023 \001(\010\022%\n\035"
  "disable_experimental_gameplay\030\024 \001(\010\022#\n\033c"
  "ustom_game_difficulty_mask\030\025 \001(\r\022\033\n\023bot_"
  "difficulty_mask\030\026 \001(\r\022\035\n\025bot_script_inde"
  "x_mask\030\027 \001(\r\"\367\001\n\033CMsgStartFindingMatchRe"
  "sult\022!\n\026legacy_generic_eresult\030\001 \001(\r:\0012\022"
  "M\n\006result\030\002 \001(\0162\031.EStartFindingMatchResu"
  "lt:\"k_EStartFindingMatchResult_Invalid\022\023"
  "\n\013error_token\030\003 \001(\t\022\025\n\rdebug_message\030\004 \001"
  "(\t\022!\n\031responsible_party_members\030\005 \003(\006\022\027\n"
  "\017result_metadata\030\006 \001(\r\"/\n\024CMsgStopFindin"
  "gMatch\022\027\n\017accept_cooldown\030\001 \001(\010\"\316\001\n\027CMsg"
  "PartyBuilderOptions\022\030\n\020additional_slots\030"
  "\001 \001(\r\0221\n\nmatch_type\030\002 \001(\0162\n.MatchType:\021M"
  "ATCH_TYPE_CASUAL\022\023\n\013matchgroups\030\003 \001(\r\022\026\n"
  "\016client_version\030\004 \001(\r\0229\n\010language\030\005 \001(\0162"
  "\017.MatchLanguages:\026MATCH_LANGUAGE_INVALID"
  "\"\233\001\n\013CMsgReadyUp\022C\n\005state\030\001 \001(\0162\024.DOTALo"
  "bbyReadyState:\036DOTALobbyReadyState_UNDEC"
  "LARED\022\024\n\014ready_up_key\030\002 \001(\006\0221\n\016hardware_"
  "specs\030\003 \001(\0132\031.CDOTAClientHardwareSpecs\"Q"
  "\n\021CMsgReadyUpStatus\022\020\n\010lobby_id\030\001 \001(\006\022\024\n"
  "\014accepted_ids\030\002 \003(\r\022\024\n\014declined_ids\030\003 \003("
  "\r\"\030\n\026CMsgAbandonCurrentGame\"6\n\025CMsgLobby"
  "ScenarioSave\022\017\n\007version\030\001 \001(\005\022\014\n\004data\030\002 "
  "\001(\014\"\311\014\n\033CMsgPracticeLobbySetDetails\022\020\n\010l"
  "obby_id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\022(\n\014team"
  "_details\030\003 \003(\0132\022.CLobbyTeamDetails\022\025\n\rse"
  "rver_region\030\004 \001(\r\022\021\n\tgame_mode\030\005 \001(\r\022.\n\007"
  "cm_pick\030\006 \001(\0162\r.DOTA_CM_PICK:\016DOTA_CM_RA"
  "NDOM\022J\n\026bot_difficulty_radiant\030\t \001(\0162\022.D"
  "OTABotDifficulty:\026BOT_DIFFICULTY_PASSIVE"
  "\022\024\n\014allow_cheats\030\n \001(\010\022\026\n\016fill_with_bots"
  "\030\013 \001(\010\022\022\n\nintro_mode\030\014 \001(\010\022\030\n\020allow_spec"
  "tating\030\r \001(\010\022\020\n\010pass_key\030\017 \001(\t\022\020\n\010league"
  "id\030\020 \001(\r\022\035\n\025penalty_level_radiant\030\021 \001(\r\022"
  "\032\n\022penalty_level_dire\030\022 \001(\r\022\024\n\014load_game"
  "_id\030\023 \001(\r\022\023\n\013series_type\030\024 \001(\r\022\033\n\023radian"
  "t_series_wins\030\025 \001(\r\022\030\n\020dire_series_wins\030"
  "\026 \001(\r\022\026\n\007allchat\030\027 \001(\010:\005false\0229\n\rdota_tv"
  "_delay\030\030 \001(\0162\021.LobbyDotaTVDelay:\017LobbyDo"
  "taTV_120\022\013\n\003lan\030\031 \001(\010\022\030\n\020custom_game_mod"
  "e\030\032 \001(\t\022\027\n\017custom_map_name\030\033 \001(\t\022\031\n\021cust"
  "om_difficulty\030\034 \001(\r\022\026\n\016custom_game_id\030\035 "
  "\001(\004\022\032\n\022custom_min_players\030\036 \001(\r\022\032\n\022custo"
  "m_max_players\030\037 \001(\r\022D\n\nvisibility\030! \001(\0162"
  "\024.DOTALobbyVisibility:\032DOTALobbyVisibili"
  "ty_Public\022\027\n\017custom_game_crc\030\" \001(\006\022\035\n\025cu"
  "stom_game_timestamp\030% \001(\007\022\037\n\027previous_ma"
  "tch_override\030& \001(\004\022N\n\rpause_setting\030* \001("
  "\0162\026.LobbyDotaPauseSetting:\037LobbyDotaPaus"
  "eSetting_Unlimited\022G\n\023bot_difficulty_dir"
  "e\030+ \001(\0162\022.DOTABotDifficulty:\026BOT_DIFFICU"
  "LTY_PASSIVE\022\023\n\013bot_radiant\030, \001(\004\022\020\n\010bot_"
  "dire\030- \001(\004\022b\n\030selection_priority_rules\030."
  " \001(\0162\033.DOTASelectionPriorityRules:#k_DOT"
  "ASelectionPriorityRules_Manual\022\035\n\025custom"
  "_game_penalties\030/ \001(\010\022\036\n\026lan_host_ping_l"
  "ocation\0300 \001(\t\022\026\n\016league_node_id\0301 \001(\r\022\032\n"
  "\022requested_hero_ids\0302 \003(\r\022-\n\rscenario_sa"
  "ve\0303 \001(\0132\026.CMsgLobbyScenarioSave\022`\n\036abil"
  "ity_draft_specific_details\0304 \001(\01328.CMsgP"
  "racticeLobbySetDetails.AbilityDraftSpeci"
  "ficDetails\022\027\n\017do_player_draft\0305 \001(\010\032:\n\033A"
  "bilityDraftSpecificDetails\022\033\n\023shuffle_dr"
  "aft_order\030\001 \001(\010\"\222\002\n\027CMsgPracticeLobbyCre"
  "ate\022\022\n\nsearch_key\030\001 \001(\t\022\020\n\010pass_key\030\005 \001("
  "\t\022\026\n\016client_version\030\006 \001(\r\0223\n\rlobby_detai"
  "ls\030\007 \001(\0132\034.CMsgPracticeLobbySetDetails\0224"
  "\n\tsave_game\030\010 \001(\0132!.CMsgPracticeLobbyCre"
  "ate.SaveGame\032N\n\010SaveGame\022\014\n\004data\030\001 \001(\014\022\017"
  "\n\007version\030\002 \001(\005\022\020\n\010steam_id\030\003 \001(\006\022\021\n\tsig"
  "nature\030\004 \001(\006\"\245\001\n\034CMsgPracticeLobbySetTea"
  "mSlot\0223\n\004team\030\001 \001(\0162\r.DOTA_GC_TEAM:\026DOTA"
  "_GC_TEAM_GOOD_GUYS\022\014\n\004slot\030\002 \001(\r\022B\n\016bot_"
  "difficulty\030\003 \001(\0162\022.DOTABotDifficulty:\026BO"
  "T_DIFFICULTY_PASSIVE\"P\n\031CMsgPracticeLobb"
  "ySetCoach\0223\n\004team\030\001 \001(\0162\r.DOTA_GC_TEAM:\026"
  "DOTA_GC_TEAM_GOOD_GUYS\"\230\001\n%CMsgPracticeL"
  "obbyJoinBroadcastChannel\022\017\n\007channel\030\001 \001("
  "\r\022\035\n\025preferred_description\030\002 \001(\t\022\036\n\026pref"
  "erred_country_code\030\003 \001(\t\022\037\n\027preferred_la"
  "nguage_code\030\004 \001(\t\"9\n&CMsgPracticeLobbyCl"
  "oseBroadcastChannel\022\017\n\007channel\030\001 \001(\r\"8\n6"
  "CMsgPracticeLobbyToggleBroadcastChannelC"
  "ameramanStatus\"+\n\025CMsgPracticeLobbyKick\022"
  "\022\n\naccount_id\030\003 \001(\r\"3\n\035CMsgPracticeLobby"
  "KickFromTeam\022\022\n\naccount_id\030\001 \001(\r\"\030\n\026CMsg"
  "PracticeLobbyLeave\"1\n\027CMsgPracticeLobbyL"
  "aunch\022\026\n\016client_version\030\005 \001(\r\"/\n\034CMsgApp"
  "lyTeamToPracticeLobby\022\017\n\007team_id\030\001 \001(\r\"p"
  "\n\025CMsgPracticeLobbyList\022\020\n\010pass_key\030\002 \001("
  "\t\022\016\n\006region\030\003 \001(\r\0225\n\tgame_mode\030\004 \001(\0162\016.D"
  "OTA_GameMode:\022DOTA_GAMEMODE_NONE\"\242\004\n\"CMs"
  "gPracticeLobbyListResponseEntry\022\020\n\002id\030\001 "
  "\001(\004B\004\200\246\035\001\022A\n\007members\030\005 \003(\01320.CMsgPractic"
  "eLobbyListResponseEntry.CLobbyMember\022\031\n\021"
  "requires_pass_key\030\006 \001(\010\022\031\n\021leader_accoun"
  "t_id\030\007 \001(\r\022\014\n\004name\030\n \001(\t\022\030\n\020custom_game_"
  "mode\030\013 \001(\t\0225\n\tgame_mode\030\014 \001(\0162\016.DOTA_Gam"
  "eMode:\022DOTA_GAMEMODE_NONE\022\026\n\016friend_pres"
  "ent\030\r \001(\010\022\017\n\007players\030\016 \001(\r\022\027\n\017custom_map"
  "_name\030\017 \001(\t\022\030\n\020max_player_count\030\020 \001(\r\022\025\n"
  "\rserver_region\030\021 \001(\r\022\021\n\tleague_id\030\023 \001(\r\022"
  "\036\n\026lan_host_ping_location\030\024 \001(\t\022\030\n\020min_p"
  "layer_count\030\025 \001(\r\022\031\n\021penalties_enabled\030\026"
  " \001(\010\0327\n\014CLobbyMember\022\022\n\naccount_id\030\001 \001(\r"
  "\022\023\n\013player_name\030\002 \001(\t\"U\n\035CMsgPracticeLob"
  "byListResponse\0224\n\007lobbies\030\002 \003(\0132#.CMsgPr"
  "acticeLobbyListResponseEntry\"`\n\rCMsgLobb"
  "yList\022\030\n\rserver_region\030\001 \001(\r:\0010\0225\n\tgame_"
  "mode\030\002 \001(\0162\016.DOTA_GameMode:\022DOTA_GAMEMOD"
  "E_NONE\"M\n\025CMsgLobbyListResponse\0224\n\007lobbi"
  "es\030\001 \003(\0132#.CMsgPracticeLobbyListResponse"
  "Entry\"\213\001\n\025CMsgPracticeLobbyJoin\022\020\n\010lobby"
  "_id\030\001 \001(\004\022\026\n\016client_version\030\002 \001(\r\022\020\n\010pas"
  "s_key\030\003 \001(\t\022\027\n\017custom_game_crc\030\004 \001(\006\022\035\n\025"
  "custom_game_timestamp\030\005 \001(\007\"_\n\035CMsgPract"
  "iceLobbyJoinResponse\022>\n\006result\030\001 \001(\0162\024.D"
  "OTAJoinLobbyResult:\030DOTA_JOIN_RESULT_SUC"
  "CESS\"5\n\"CMsgFriendPracticeLobbyListReque"
  "st\022\017\n\007friends\030\001 \003(\r\"[\n#CMsgFriendPractic"
  "eLobbyListResponse\0224\n\007lobbies\030\001 \003(\0132#.CM"
  "sgPracticeLobbyListResponseEntry\";\n\"CMsg"
  "JoinableCustomGameModesRequest\022\025\n\rserver"
  "_region\030\001 \001(\r\"m\n(CMsgJoinableCustomGameM"
  "odesResponseEntry\022\026\n\016custom_game_id\030\001 \001("
  "\004\022\023\n\013lobby_count\030\002 \001(\r\022\024\n\014player_count\030\003"
  " \001(\r\"d\n#CMsgJoinableCustomGameModesRespo"
  "nse\022=\n\ngame_modes\030\001 \003(\0132).CMsgJoinableCu"
  "stomGameModesResponseEntry\"Q\n CMsgJoinab"
  "leCustomLobbiesRequest\022\025\n\rserver_region\030"
  "\001 \001(\r\022\026\n\016custom_game_id\030\002 \001(\004\"\266\003\n&CMsgJo"
  "inableCustomLobbiesResponseEntry\022\020\n\010lobb"
  "y_id\030\001 \001(\006\022\026\n\016custom_game_id\030\002 \001(\004\022\022\n\nlo"
  "bby_name\030\003 \001(\t\022\024\n\014member_count\030\004 \001(\r\022\031\n\021"
  "leader_account_id\030\005 \001(\r\022\023\n\013leader_name\030\006"
  " \001(\t\022\027\n\017custom_map_name\030\007 \001(\t\022\030\n\020max_pla"
  "yer_count\030\010 \001(\r\022\025\n\rserver_region\030\t \001(\r\022\024"
  "\n\014has_pass_key\030\013 \001(\010\022\036\n\026lan_host_ping_lo"
  "cation\030\014 \001(\t\022\033\n\023lobby_creation_time\030\r \001("
  "\r\022\035\n\025custom_game_timestamp\030\016 \001(\r\022\027\n\017cust"
  "om_game_crc\030\017 \001(\004\022\030\n\020min_player_count\030\020 "
  "\001(\r\022\031\n\021penalties_enabled\030\021 \001(\010\"]\n!CMsgJo"
  "inableCustomLobbiesResponse\0228\n\007lobbies\030\001"
  " \003(\0132\'.CMsgJoinableCustomLobbiesResponse"
  "Entry\"\372\002\n\030CMsgQuickJoinCustomLobby\022\034\n\024le"
  "gacy_server_region\030\001 \001(\r\022\026\n\016custom_game_"
  "id\030\002 \001(\004\022\026\n\016client_version\030\003 \001(\r\022:\n\024crea"
  "te_lobby_details\030\004 \001(\0132\034.CMsgPracticeLob"
  "bySetDetails\022\025\n\rallow_any_map\030\005 \001(\010\022G\n\023l"
  "egacy_region_pings\030\006 \003(\0132*.CMsgQuickJoin"
  "CustomLobby.LegacyRegionPing\022&\n\tping_dat"
  "a\030\007 \001(\0132\023.CMsgClientPingData\032L\n\020LegacyRe"
  "gionPing\022\025\n\rserver_region\030\001 \001(\r\022\014\n\004ping\030"
  "\002 \001(\r\022\023\n\013region_code\030\003 \001(\007\"b\n CMsgQuickJ"
  "oinCustomLobbyResponse\022>\n\006result\030\001 \001(\0162\024"
  ".DOTAJoinLobbyResult:\030DOTA_JOIN_RESULT_S"
  "UCCESS\"\224\002\n\021CMsgBotGameCreate\022\022\n\nsearch_k"
  "ey\030\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022F\n\022diff"
  "iculty_radiant\030\003 \001(\0162\022.DOTABotDifficulty"
  ":\026BOT_DIFFICULTY_PASSIVE\0223\n\004team\030\004 \001(\0162\r"
  ".DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\021\n"
  "\tgame_mode\030\005 \001(\r\022C\n\017difficulty_dire\030\006 \001("
  "\0162\022.DOTABotDifficulty:\026BOT_DIFFICULTY_PA"
  "SSIVE\"2\n\033CMsgDOTAPartyMemberSetCoach\022\023\n\013"
  "wants_coach\030\001 \001(\010\"4\n\026CMsgDOTASetGroupLea"
  "der\022\032\n\022new_leader_steamid\030\001 \001(\006\"P\n\032CMsgD"
  "OTACancelGroupInvites\022\030\n\020invited_steamid"
  "s\030\001 \003(\006\022\030\n\020invited_groupids\030\002 \003(\006\"*\n\032CMs"
  "gDOTASetGroupOpenStatus\022\014\n\004open\030\001 \001(\010\"2\n"
  "\030CMsgDOTAGroupMergeInvite\022\026\n\016other_group"
  "_id\030\001 \001(\006\"H\n\032CMsgDOTAGroupMergeResponse\022"
  "\032\n\022initiator_group_id\030\001 \001(\006\022\016\n\006accept\030\002 "
  "\001(\010\"]\n\027CMsgDOTAGroupMergeReply\022B\n\006result"
  "\030\001 \001(\0162\026.EDOTAGroupMergeResult:\032k_EDOTAG"
  "roupMergeResult_OK\"\364\002\n\035CMsgSpectatorLobb"
  "yGameDetails\022\020\n\010language\030\001 \001(\r\022\020\n\010match_"
  "id\030\002 \001(\004\022\027\n\017server_steam_id\030\003 \001(\006\022\022\n\nstr"
  "eam_url\030\004 \001(\t\022\023\n\013stream_name\030\005 \001(\t\022\021\n\tle"
  "ague_id\030\006 \001(\r\022\023\n\013series_type\030\007 \001(\r\022\023\n\013se"
  "ries_game\030\010 \001(\r\0229\n\014radiant_team\030\t \001(\0132#."
  "CMsgSpectatorLobbyGameDetails.Team\0226\n\tdi"
  "re_team\030\n \001(\0132#.CMsgSpectatorLobbyGameDe"
  "tails.Team\032=\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\021\n\tt"
  "eam_name\030\002 \001(\t\022\021\n\tteam_logo\030\003 \001(\006\"\214\001\n\034CM"
  "sgSetSpectatorLobbyDetails\022\020\n\010lobby_id\030\001"
  " \001(\004\022\022\n\nlobby_name\030\002 \001(\t\022\020\n\010pass_key\030\003 \001"
  "(\t\0224\n\014game_details\030\004 \001(\0132\036.CMsgSpectator"
  "LobbyGameDetails\"b\n\030CMsgCreateSpectatorL"
  "obby\022\026\n\016client_version\030\001 \001(\r\022.\n\007details\030"
  "\002 \001(\0132\035.CMsgSetSpectatorLobbyDetails\"\030\n\026"
  "CMsgSpectatorLobbyList\"\233\002\n\036CMsgSpectator"
  "LobbyListResponse\022\?\n\007lobbies\030\001 \003(\0132..CMs"
  "gSpectatorLobbyListResponse.SpectatorLob"
  "by\032\267\001\n\016SpectatorLobby\022\020\n\010lobby_id\030\001 \001(\004\022"
  "\021\n\tgame_name\030\002 \001(\t\022\031\n\021requires_pass_key\030"
  "\003 \001(\010\022\031\n\021leader_account_id\030\004 \001(\r\022\024\n\014memb"
  "er_count\030\005 \001(\r\0224\n\014game_details\030\007 \001(\0132\036.C"
  "MsgSpectatorLobbyGameDetails\"C\n(CMsgClie"
  "ntToGCRequestSteamDatagramTicket\022\027\n\017serv"
  "er_steam_id\030\001 \001(\006\"^\n0CMsgClientToGCReque"
  "stSteamDatagramTicketResponse\022\031\n\021seriali"
  "zed_ticket\030\001 \001(\014\022\017\n\007message\030\002 \001(\t\"\267\002\n!CM"
  "sgGCToClientSteamDatagramTicket\022\032\n\022legac"
  "y_time_expiry\030\001 \001(\007\022\"\n\032legacy_authorized"
  "_steam_id\030\002 \001(\006\022#\n\033legacy_authorized_pub"
  "lic_ip\030\003 \001(\007\022\"\n\032legacy_gameserver_steam_"
  "id\030\004 \001(\006\022 \n\030legacy_gameserver_net_id\030\005 \001"
  "(\006\022\030\n\020legacy_signature\030\006 \001(\014\022\025\n\rlegacy_a"
  "pp_id\030\007 \001(\r\022\033\n\023legacy_extra_fields\030\010 \003(\014"
  "\022\031\n\021serialized_ticket\030\020 \001(\014\"$\n\"CMsgGCToC"
  "lientRequestLaneSelection\"j\n*CMsgGCToCli"
  "entRequestLaneSelectionResponse\022\034\n\024lane_"
  "selection_flags\030\001 \001(\r\022\036\n\026high_priority_d"
  "isabled\030\002 \001(\010\"\035\n\033CMsgGCToClientRequestMM"
  "Info\"T\n\024CMsgClientToGCMMInfo\022\034\n\024lane_sel"
  "ection_flags\030\001 \001(\r\022\036\n\026high_priority_disa"
  "bled\030\002 \001(\010*\362\020\n\030EStartFindingMatchResult\022"
  "&\n\"k_EStartFindingMatchResult_Invalid\020\000\022"
  "!\n\035k_EStartFindingMatchResult_OK\020\001\022/\n+k_"
  "EStartFindingMatchResult_AlreadySearchin"
  "g\020\002\022*\n&k_EStartFindingMatchResult_FailGe"
  "neric\020d\022+\n\'k_EStartFindingMatchResult_Fa"
  "iledIgnore\020e\0222\n.k_EStartFindingMatchResu"
  "lt_MatchmakingDisabled\020f\022,\n(k_EStartFind"
  "ingMatchResult_RegionOffline\020g\0222\n.k_ESta"
  "rtFindingMatchResult_MatchmakingCooldown"
  "\020h\022.\n*k_EStartFindingMatchResult_ClientO"
  "utOfDate\020i\0227\n3k_EStartFindingMatchResult"
  "_CompetitiveNoLowPriority\020j\0225\n1k_EStartF"
  "indingMatchResult_CompetitiveNotUnlocked"
  "\020k\0222\n.k_EStartFindingMatchResult_GameMod"
  "eNotUnlocked\020l\022;\n7k_EStartFindingMatchRe"
  "sult_CompetitiveNotEnoughPlayTime\020m\0222\n.k"
  "_EStartFindingMatchResult_MissingInitial"
  "Skill\020n\022<\n8k_EStartFindingMatchResult_Co"
  "mpetitiveRankSpreadTooLarge\020o\0223\n/k_EStar"
  "tFindingMatchResult_MemberAlreadyInLobby"
  "\020p\0223\n/k_EStartFindingMatchResult_MemberN"
  "otVACVerified\020q\0229\n5k_EStartFindingMatchR"
  "esult_WeekendTourneyBadPartySize\020r\022>\n:k_"
  "EStartFindingMatchResult_WeekendTourneyT"
  "eamBuyInTooSmall\020s\022D\n@k_EStartFindingMat"
  "chResult_WeekendTourneyIndividualBuyInTo"
  "oLarge\020t\022>\n:k_EStartFindingMatchResult_W"
  "eekendTourneyTeamBuyInTooLarge\020u\022:\n6k_ES"
  "tartFindingMatchResult_MemberMissingEven"
  "tOwnership\020v\0228\n4k_EStartFindingMatchResu"
  "lt_WeekendTourneyNotUnlocked\020w\022@\n<k_ESta"
  "rtFindingMatchResult_WeekendTourneyRecen"
  "tParticipation\020x\022\?\n;k_EStartFindingMatch"
  "Result_MemberMissingAnchoredPhoneNumber\020"
  "y\022.\n*k_EStartFindingMatchResult_NotMembe"
  "rOfClan\020z\022;\n7k_EStartFindingMatchResult_"
  "CoachesChallengeBadPartySize\020{\022A\n=k_ESta"
  "rtFindingMatchResult_CoachesChallengeReq"
  "uirementsNotMet\020|\0224\n0k_EStartFindingMatc"
  "hResult_InvalidRoleSelections\020}\0225\n1k_ESt"
  "artFindingMatchResult_PhoneNumberDiscrep"
  "ancy\020~\022,\n(k_EStartFindingMatchResult_NoQ"
  "ueuePoints\020\177\0229\n4k_EStartFindingMatchResu"
  "lt_MemberMissingGauntletFlag\020\200\001\0227\n2k_ESt"
  "artFindingMatchResult_MemberGauntletTooR"
  "ecent\020\201\001\0225\n0k_EStartFindingMatchResult_D"
  "ifficultyNotUnlocked\020\202\001\0228\n3k_EStartFindi"
  "ngMatchResult_CoachesNotAllowedInParty\020\203"
  "\001\022/\n*k_EStartFindingMatchResult_Matchmak"
  "ingBusy\020\204\001\0220\n+k_EStartFindingMatchResult"
  "_SteamChinaBanned\020\205\001\022;\n6k_EStartFindingM"
  "atchResult_SteamChinaInvalidMixedParty\020\206"
  "\001\0224\n/k_EStartFindingMatchResult_Restrict"
  "edFromRanked\020\207\001"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_deps[5] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fclient_5fenums_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5flobby_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto = {
    false, false, 11575, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
    "dota_gcmessages_client_match_management.proto",
    &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_deps, 5, 63,
    schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::offsets,
    file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
    file_level_service_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter() {
  return &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartFindingMatchResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[0];
}
bool EStartFindingMatchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgStartFindingMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartFindingMatch>()._impl_._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_modes(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_matchlanguages(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_language_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_language_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgStartFindingMatch* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_region_select_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_solo_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steam_clan_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_challenge_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_disable_experimental_gameplay(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_custom_game_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bot_difficulty_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_bot_script_index_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

const ::CMsgClientPingData&
CMsgStartFindingMatch::_Internal::ping_data(const CMsgStartFindingMatch* msg) {
  return *msg->_impl_.ping_data_;
}
void CMsgStartFindingMatch::clear_ping_data() {
  if (_impl_.ping_data_ != nullptr) _impl_.ping_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgStartFindingMatch::CMsgStartFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgStartFindingMatch)
}
CMsgStartFindingMatch::CMsgStartFindingMatch(const CMsgStartFindingMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgStartFindingMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.game_language_name_){}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.match_type_){}
    , decltype(_impl_.team_id_){}
    , decltype(_impl_.game_language_enum_){}
    , decltype(_impl_.region_select_flags_){}
    , decltype(_impl_.steam_clan_account_id_){}
    , decltype(_impl_.solo_queue_){}
    , decltype(_impl_.is_challenge_match_){}
    , decltype(_impl_.high_priority_disabled_){}
    , decltype(_impl_.disable_experimental_gameplay_){}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.custom_game_difficulty_mask_){}
    , decltype(_impl_.bot_difficulty_mask_){}
    , decltype(_impl_.bot_script_index_mask_){}
    , decltype(_impl_.matchlanguages_){}
    , decltype(_impl_.matchgroups_){}
    , decltype(_impl_.game_modes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.game_language_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_language_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_language_name()) {
    _this->_impl_.game_language_name_.Set(from._internal_game_language_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::CMsgClientPingData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.client_version_, &from._impl_.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_modes_) -
    reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.game_modes_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatch)
}

inline void CMsgStartFindingMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.game_language_name_){}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.match_type_){0}
    , decltype(_impl_.team_id_){0u}
    , decltype(_impl_.game_language_enum_){0}
    , decltype(_impl_.region_select_flags_){0u}
    , decltype(_impl_.steam_clan_account_id_){0u}
    , decltype(_impl_.solo_queue_){false}
    , decltype(_impl_.is_challenge_match_){false}
    , decltype(_impl_.high_priority_disabled_){false}
    , decltype(_impl_.disable_experimental_gameplay_){false}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.custom_game_difficulty_mask_){0u}
    , decltype(_impl_.bot_difficulty_mask_){0u}
    , decltype(_impl_.bot_script_index_mask_){0u}
    , decltype(_impl_.matchlanguages_){4294967295u}
    , decltype(_impl_.matchgroups_){4294967295u}
    , decltype(_impl_.game_modes_){4294967295u}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.game_language_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_language_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgStartFindingMatch::~CMsgStartFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgStartFindingMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.game_language_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CMsgStartFindingMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgStartFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartFindingMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.game_language_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
      _impl_.ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.region_select_flags_) -
        reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.region_select_flags_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.steam_clan_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_difficulty_mask_) -
        reinterpret_cast<char*>(&_impl_.steam_clan_account_id_)) + sizeof(_impl_.bot_difficulty_mask_));
  }
  if (cached_has_bits & 0x000f0000u) {
    _impl_.bot_script_index_mask_ = 0u;
    _impl_.matchlanguages_ = 4294967295u;
    _impl_.matchgroups_ = 4294967295u;
    _impl_.game_modes_ = 4294967295u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartFindingMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatch.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_matchgroups(&has_bits);
          _impl_.matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_game_modes(&has_bits);
          _impl_.game_modes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_matchlanguages(&has_bits);
          _impl_.matchlanguages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 team_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchLanguages_IsValid(val))) {
            _internal_set_game_language_enum(static_cast<::MatchLanguages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string game_language_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_game_language_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatch.game_language_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region_select_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_region_select_flags(&has_bits);
          _impl_.region_select_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool solo_queue = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_solo_queue(&has_bits);
          _impl_.solo_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_clan_account_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_steam_clan_account_id(&has_bits);
          _impl_.steam_clan_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_challenge_match = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_is_challenge_match(&has_bits);
          _impl_.is_challenge_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          _impl_.high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_experimental_gameplay = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_disable_experimental_gameplay(&has_bits);
          _impl_.disable_experimental_gameplay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty_mask = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_custom_game_difficulty_mask(&has_bits);
          _impl_.custom_game_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_difficulty_mask = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_bot_difficulty_mask(&has_bits);
          _impl_.bot_difficulty_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_script_index_mask = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_bot_script_index_mask(&has_bits);
          _impl_.bot_script_index_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgStartFindingMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatch.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_matchgroups(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_modes(), target);
  }

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_match_type(), target);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_matchlanguages(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team_id(), target);
  }

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_game_language_enum(), target);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_language_name().data(), static_cast<int>(this->_internal_game_language_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatch.game_language_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_game_language_name(), target);
  }

  // optional .CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_region_select_flags(), target);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_solo_queue(), target);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_steam_clan_account_id(), target);
  }

  // optional bool is_challenge_match = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_is_challenge_match(), target);
  }

  // optional uint32 lane_selection_flags = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_high_priority_disabled(), target);
  }

  // optional bool disable_experimental_gameplay = 20;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_disable_experimental_gameplay(), target);
  }

  // optional uint32 custom_game_difficulty_mask = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_custom_game_difficulty_mask(), target);
  }

  // optional uint32 bot_difficulty_mask = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_bot_difficulty_mask(), target);
  }

  // optional uint32 bot_script_index_mask = 23;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_bot_script_index_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatch)
  return target;
}

size_t CMsgStartFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartFindingMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key());
    }

    // optional string game_language_name = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_language_name());
    }

    // optional .CMsgClientPingData ping_data = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_data_);
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional uint32 team_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

    // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_language_enum());
    }

    // optional uint32 region_select_flags = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region_select_flags());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 steam_clan_account_id = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_steam_clan_account_id());
    }

    // optional bool solo_queue = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_challenge_match = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool high_priority_disabled = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool disable_experimental_gameplay = 20;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 lane_selection_flags = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 custom_game_difficulty_mask = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty_mask());
    }

    // optional uint32 bot_difficulty_mask = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bot_difficulty_mask());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 bot_script_index_mask = 23;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_bot_script_index_mask());
    }

    // optional uint32 matchlanguages = 7 [default = 4294967295];
    if (cached_has_bits & 0x00020000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchlanguages());
    }

    // optional uint32 matchgroups = 2 [default = 4294967295];
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchgroups());
    }

    // optional uint32 game_modes = 4 [default = 4294967295];
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_modes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStartFindingMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgStartFindingMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStartFindingMatch::GetClassData() const { return &_class_data_; }


void CMsgStartFindingMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgStartFindingMatch*>(&to_msg);
  auto& from = static_cast<const CMsgStartFindingMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_game_language_name(from._internal_game_language_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_language_enum_ = from._impl_.game_language_enum_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.region_select_flags_ = from._impl_.region_select_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.steam_clan_account_id_ = from._impl_.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.solo_queue_ = from._impl_.solo_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.is_challenge_match_ = from._impl_.is_challenge_match_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.high_priority_disabled_ = from._impl_.high_priority_disabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.disable_experimental_gameplay_ = from._impl_.disable_experimental_gameplay_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.custom_game_difficulty_mask_ = from._impl_.custom_game_difficulty_mask_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.bot_difficulty_mask_ = from._impl_.bot_difficulty_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.bot_script_index_mask_ = from._impl_.bot_script_index_mask_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.matchlanguages_ = from._impl_.matchlanguages_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.matchgroups_ = from._impl_.matchgroups_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.game_modes_ = from._impl_.game_modes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStartFindingMatch::CopyFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatch::InternalSwap(CMsgStartFindingMatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_language_name_, lhs_arena,
      &other->_impl_.game_language_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatch, _impl_.bot_script_index_mask_)
      + sizeof(CMsgStartFindingMatch::_impl_.bot_script_index_mask_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatch, _impl_.ping_data_)>(
          reinterpret_cast<char*>(&_impl_.ping_data_),
          reinterpret_cast<char*>(&other->_impl_.ping_data_));
  swap(_impl_.matchlanguages_, other->_impl_.matchlanguages_);
  swap(_impl_.matchgroups_, other->_impl_.matchgroups_);
  swap(_impl_.game_modes_, other->_impl_.game_modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartFindingMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[0]);
}

// ===================================================================

class CMsgStartFindingMatchResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStartFindingMatchResult>()._impl_._has_bits_);
  static void set_has_legacy_generic_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_error_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_debug_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_result_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgStartFindingMatchResult)
}
CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgStartFindingMatchResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsible_party_members_){from._impl_.responsible_party_members_}
    , decltype(_impl_.error_token_){}
    , decltype(_impl_.debug_message_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.result_metadata_){}
    , decltype(_impl_.legacy_generic_eresult_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_token()) {
    _this->_impl_.error_token_.Set(from._internal_error_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.debug_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_debug_message()) {
    _this->_impl_.debug_message_.Set(from._internal_debug_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.legacy_generic_eresult_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.legacy_generic_eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgStartFindingMatchResult)
}

inline void CMsgStartFindingMatchResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.responsible_party_members_){arena}
    , decltype(_impl_.error_token_){}
    , decltype(_impl_.debug_message_){}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.result_metadata_){0u}
    , decltype(_impl_.legacy_generic_eresult_){2u}
  };
  _impl_.error_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.debug_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.debug_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgStartFindingMatchResult::~CMsgStartFindingMatchResult() {
  // @@protoc_insertion_point(destructor:CMsgStartFindingMatchResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgStartFindingMatchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.responsible_party_members_.~RepeatedField();
  _impl_.error_token_.Destroy();
  _impl_.debug_message_.Destroy();
}

void CMsgStartFindingMatchResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgStartFindingMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStartFindingMatchResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.responsible_party_members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.debug_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.result_metadata_) -
        reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.result_metadata_));
    _impl_.legacy_generic_eresult_ = 2u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStartFindingMatchResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_legacy_generic_eresult(&has_bits);
          _impl_.legacy_generic_eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EStartFindingMatchResult_IsValid(val))) {
            _internal_set_result(static_cast<::EStartFindingMatchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string error_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatchResult.error_token");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string debug_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_debug_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgStartFindingMatchResult.debug_message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 responsible_party_members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_responsible_party_members(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_result_metadata(&has_bits);
          _impl_.result_metadata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgStartFindingMatchResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStartFindingMatchResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_generic_eresult(), target);
  }

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_result(), target);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_token().data(), static_cast<int>(this->_internal_error_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchResult.error_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_token(), target);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_debug_message().data(), static_cast<int>(this->_internal_debug_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgStartFindingMatchResult.debug_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_debug_message(), target);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0, n = this->_internal_responsible_party_members_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_responsible_party_members(i), target);
  }

  // optional uint32 result_metadata = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_result_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStartFindingMatchResult)
  return target;
}

size_t CMsgStartFindingMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStartFindingMatchResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 responsible_party_members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_responsible_party_members_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_responsible_party_members_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string error_token = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_token());
    }

    // optional string debug_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_debug_message());
    }

    // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 result_metadata = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_result_metadata());
    }

    // optional uint32 legacy_generic_eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_generic_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStartFindingMatchResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgStartFindingMatchResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStartFindingMatchResult::GetClassData() const { return &_class_data_; }


void CMsgStartFindingMatchResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgStartFindingMatchResult*>(&to_msg);
  auto& from = static_cast<const CMsgStartFindingMatchResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.responsible_party_members_.MergeFrom(from._impl_.responsible_party_members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_token(from._internal_error_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_debug_message(from._internal_debug_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.result_ = from._impl_.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.result_metadata_ = from._impl_.result_metadata_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_generic_eresult_ = from._impl_.legacy_generic_eresult_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStartFindingMatchResult::CopyFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchResult::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatchResult::InternalSwap(CMsgStartFindingMatchResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.responsible_party_members_.InternalSwap(&other->_impl_.responsible_party_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_token_, lhs_arena,
      &other->_impl_.error_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.debug_message_, lhs_arena,
      &other->_impl_.debug_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchResult, _impl_.result_metadata_)
      + sizeof(CMsgStartFindingMatchResult::_impl_.result_metadata_)
      - PROTOBUF_FIELD_OFFSET(CMsgStartFindingMatchResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
  swap(_impl_.legacy_generic_eresult_, other->_impl_.legacy_generic_eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStartFindingMatchResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[1]);
}

// ===================================================================

class CMsgStopFindingMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgStopFindingMatch>()._impl_._has_bits_);
  static void set_has_accept_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgStopFindingMatch::CMsgStopFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgStopFindingMatch)
}
CMsgStopFindingMatch::CMsgStopFindingMatch(const CMsgStopFindingMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgStopFindingMatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accept_cooldown_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accept_cooldown_ = from._impl_.accept_cooldown_;
  // @@protoc_insertion_point(copy_constructor:CMsgStopFindingMatch)
}

inline void CMsgStopFindingMatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accept_cooldown_){false}
  };
}

CMsgStopFindingMatch::~CMsgStopFindingMatch() {
  // @@protoc_insertion_point(destructor:CMsgStopFindingMatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgStopFindingMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgStopFindingMatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgStopFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgStopFindingMatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accept_cooldown_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgStopFindingMatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool accept_cooldown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_accept_cooldown(&has_bits);
          _impl_.accept_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgStopFindingMatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgStopFindingMatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool accept_cooldown = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_accept_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgStopFindingMatch)
  return target;
}

size_t CMsgStopFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgStopFindingMatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool accept_cooldown = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgStopFindingMatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgStopFindingMatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgStopFindingMatch::GetClassData() const { return &_class_data_; }


void CMsgStopFindingMatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgStopFindingMatch*>(&to_msg);
  auto& from = static_cast<const CMsgStopFindingMatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_accept_cooldown()) {
    _this->_internal_set_accept_cooldown(from._internal_accept_cooldown());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgStopFindingMatch::CopyFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStopFindingMatch::InternalSwap(CMsgStopFindingMatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.accept_cooldown_, other->_impl_.accept_cooldown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgStopFindingMatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[2]);
}

// ===================================================================

class CMsgPartyBuilderOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyBuilderOptions>()._impl_._has_bits_);
  static void set_has_additional_slots(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_matchgroups(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyBuilderOptions)
}
CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPartyBuilderOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_slots_){}
    , decltype(_impl_.match_type_){}
    , decltype(_impl_.matchgroups_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.language_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.additional_slots_, &from._impl_.additional_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.additional_slots_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:CMsgPartyBuilderOptions)
}

inline void CMsgPartyBuilderOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.additional_slots_){0u}
    , decltype(_impl_.match_type_){0}
    , decltype(_impl_.matchgroups_){0u}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.language_){0}
  };
}

CMsgPartyBuilderOptions::~CMsgPartyBuilderOptions() {
  // @@protoc_insertion_point(destructor:CMsgPartyBuilderOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPartyBuilderOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPartyBuilderOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPartyBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyBuilderOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.additional_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.language_) -
        reinterpret_cast<char*>(&_impl_.additional_slots_)) + sizeof(_impl_.language_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyBuilderOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 additional_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_additional_slots(&has_bits);
          _impl_.additional_slots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 matchgroups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_matchgroups(&has_bits);
          _impl_.matchgroups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchLanguages_IsValid(val))) {
            _internal_set_language(static_cast<::MatchLanguages>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPartyBuilderOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyBuilderOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_additional_slots(), target);
  }

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_type(), target);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_matchgroups(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_client_version(), target);
  }

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyBuilderOptions)
  return target;
}

size_t CMsgPartyBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyBuilderOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 additional_slots = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_additional_slots());
    }

    // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

    // optional uint32 matchgroups = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_matchgroups());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPartyBuilderOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPartyBuilderOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPartyBuilderOptions::GetClassData() const { return &_class_data_; }


void CMsgPartyBuilderOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPartyBuilderOptions*>(&to_msg);
  auto& from = static_cast<const CMsgPartyBuilderOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.additional_slots_ = from._impl_.additional_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.matchgroups_ = from._impl_.matchgroups_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPartyBuilderOptions::CopyFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyBuilderOptions::IsInitialized() const {
  return true;
}

void CMsgPartyBuilderOptions::InternalSwap(CMsgPartyBuilderOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPartyBuilderOptions, _impl_.language_)
      + sizeof(CMsgPartyBuilderOptions::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(CMsgPartyBuilderOptions, _impl_.additional_slots_)>(
          reinterpret_cast<char*>(&_impl_.additional_slots_),
          reinterpret_cast<char*>(&other->_impl_.additional_slots_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyBuilderOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[3]);
}

// ===================================================================

class CMsgReadyUp::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyUp>()._impl_._has_bits_);
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ready_up_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAClientHardwareSpecs& hardware_specs(const CMsgReadyUp* msg);
  static void set_has_hardware_specs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAClientHardwareSpecs&
CMsgReadyUp::_Internal::hardware_specs(const CMsgReadyUp* msg) {
  return *msg->_impl_.hardware_specs_;
}
void CMsgReadyUp::clear_hardware_specs() {
  if (_impl_.hardware_specs_ != nullptr) _impl_.hardware_specs_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgReadyUp::CMsgReadyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyUp)
}
CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgReadyUp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hardware_specs_){nullptr}
    , decltype(_impl_.ready_up_key_){}
    , decltype(_impl_.state_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_hardware_specs()) {
    _this->_impl_.hardware_specs_ = new ::CDOTAClientHardwareSpecs(*from._impl_.hardware_specs_);
  }
  ::memcpy(&_impl_.ready_up_key_, &from._impl_.ready_up_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.ready_up_key_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUp)
}

inline void CMsgReadyUp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hardware_specs_){nullptr}
    , decltype(_impl_.ready_up_key_){uint64_t{0u}}
    , decltype(_impl_.state_){0}
  };
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:CMsgReadyUp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgReadyUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.hardware_specs_;
}

void CMsgReadyUp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgReadyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyUp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.hardware_specs_ != nullptr);
    _impl_.hardware_specs_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.ready_up_key_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.state_) -
        reinterpret_cast<char*>(&_impl_.ready_up_key_)) + sizeof(_impl_.state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyUp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyReadyState_IsValid(val))) {
            _internal_set_state(static_cast<::DOTALobbyReadyState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 ready_up_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_ready_up_key(&has_bits);
          _impl_.ready_up_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware_specs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgReadyUp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_ready_up_key(), target);
  }

  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hardware_specs(this),
        _Internal::hardware_specs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUp)
  return target;
}

size_t CMsgReadyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyUp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.hardware_specs_);
    }

    // optional fixed64 ready_up_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReadyUp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgReadyUp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReadyUp::GetClassData() const { return &_class_data_; }


void CMsgReadyUp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgReadyUp*>(&to_msg);
  auto& from = static_cast<const CMsgReadyUp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_hardware_specs()->::CDOTAClientHardwareSpecs::MergeFrom(
          from._internal_hardware_specs());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ready_up_key_ = from._impl_.ready_up_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.state_ = from._impl_.state_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {
  return true;
}

void CMsgReadyUp::InternalSwap(CMsgReadyUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgReadyUp, _impl_.state_)
      + sizeof(CMsgReadyUp::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(CMsgReadyUp, _impl_.hardware_specs_)>(
          reinterpret_cast<char*>(&_impl_.hardware_specs_),
          reinterpret_cast<char*>(&other->_impl_.hardware_specs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyUp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[4]);
}

// ===================================================================

class CMsgReadyUpStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgReadyUpStatus>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgReadyUpStatus::CMsgReadyUpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgReadyUpStatus)
}
CMsgReadyUpStatus::CMsgReadyUpStatus(const CMsgReadyUpStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgReadyUpStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accepted_ids_){from._impl_.accepted_ids_}
    , decltype(_impl_.declined_ids_){from._impl_.declined_ids_}
    , decltype(_impl_.lobby_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgReadyUpStatus)
}

inline void CMsgReadyUpStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.accepted_ids_){arena}
    , decltype(_impl_.declined_ids_){arena}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
  };
}

CMsgReadyUpStatus::~CMsgReadyUpStatus() {
  // @@protoc_insertion_point(destructor:CMsgReadyUpStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgReadyUpStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.accepted_ids_.~RepeatedField();
  _impl_.declined_ids_.~RepeatedField();
}

void CMsgReadyUpStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgReadyUpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgReadyUpStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accepted_ids_.Clear();
  _impl_.declined_ids_.Clear();
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgReadyUpStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 accepted_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_accepted_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_accepted_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 declined_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_declined_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_declined_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgReadyUpStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgReadyUpStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0, n = this->_internal_accepted_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_accepted_ids(i), target);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0, n = this->_internal_declined_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_declined_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgReadyUpStatus)
  return target;
}

size_t CMsgReadyUpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgReadyUpStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 accepted_ids = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.accepted_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_accepted_ids_size());
    total_size += data_size;
  }

  // repeated uint32 declined_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.declined_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_declined_ids_size());
    total_size += data_size;
  }

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgReadyUpStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgReadyUpStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgReadyUpStatus::GetClassData() const { return &_class_data_; }


void CMsgReadyUpStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgReadyUpStatus*>(&to_msg);
  auto& from = static_cast<const CMsgReadyUpStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.accepted_ids_.MergeFrom(from._impl_.accepted_ids_);
  _this->_impl_.declined_ids_.MergeFrom(from._impl_.declined_ids_);
  if (from._internal_has_lobby_id()) {
    _this->_internal_set_lobby_id(from._internal_lobby_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgReadyUpStatus::CopyFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUpStatus::IsInitialized() const {
  return true;
}

void CMsgReadyUpStatus::InternalSwap(CMsgReadyUpStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.accepted_ids_.InternalSwap(&other->_impl_.accepted_ids_);
  _impl_.declined_ids_.InternalSwap(&other->_impl_.declined_ids_);
  swap(_impl_.lobby_id_, other->_impl_.lobby_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgReadyUpStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[5]);
}

// ===================================================================

class CMsgAbandonCurrentGame::_Internal {
 public:
};

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgAbandonCurrentGame)
}
CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgAbandonCurrentGame* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAbandonCurrentGame)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAbandonCurrentGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAbandonCurrentGame::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgAbandonCurrentGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[6]);
}

// ===================================================================

class CMsgLobbyScenarioSave::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyScenarioSave>()._impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyScenarioSave)
}
CMsgLobbyScenarioSave::CMsgLobbyScenarioSave(const CMsgLobbyScenarioSave& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyScenarioSave* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyScenarioSave)
}

inline void CMsgLobbyScenarioSave::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.version_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgLobbyScenarioSave::~CMsgLobbyScenarioSave() {
  // @@protoc_insertion_point(destructor:CMsgLobbyScenarioSave)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyScenarioSave::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CMsgLobbyScenarioSave::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyScenarioSave::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyScenarioSave)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyScenarioSave::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyScenarioSave::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyScenarioSave)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyScenarioSave)
  return target;
}

size_t CMsgLobbyScenarioSave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyScenarioSave)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyScenarioSave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyScenarioSave::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyScenarioSave::GetClassData() const { return &_class_data_; }


void CMsgLobbyScenarioSave::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyScenarioSave*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyScenarioSave&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyScenarioSave)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyScenarioSave::CopyFrom(const CMsgLobbyScenarioSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyScenarioSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyScenarioSave::IsInitialized() const {
  return true;
}

void CMsgLobbyScenarioSave::InternalSwap(CMsgLobbyScenarioSave* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyScenarioSave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[7]);
}

// ===================================================================

class CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails>()._impl_._has_bits_);
  static void set_has_shuffle_draft_order(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
}
CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails(const CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shuffle_draft_order_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.shuffle_draft_order_ = from._impl_.shuffle_draft_order_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
}

inline void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.shuffle_draft_order_){false}
  };
}

CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::~CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shuffle_draft_order_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool shuffle_draft_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_shuffle_draft_order(&has_bits);
          _impl_.shuffle_draft_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool shuffle_draft_order = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_shuffle_draft_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  return target;
}

size_t CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool shuffle_draft_order = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shuffle_draft_order()) {
    _this->_internal_set_shuffle_draft_order(from._internal_shuffle_draft_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::CopyFrom(const CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::InternalSwap(CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.shuffle_draft_order_, other->_impl_.shuffle_draft_order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[8]);
}

// ===================================================================

class CMsgPracticeLobbySetDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetDetails>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cm_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bot_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_allow_cheats(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_fill_with_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_intro_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_allow_spectating(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_penalty_level_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_penalty_level_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_load_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_radiant_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_dire_series_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_allchat(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_dota_tv_delay(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_lan(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_custom_min_players(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_custom_max_players(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_previous_match_override(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_pause_setting(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_bot_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_bot_radiant(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_bot_dire(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_selection_priority_rules(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_custom_game_penalties(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::CMsgLobbyScenarioSave& scenario_save(const CMsgPracticeLobbySetDetails* msg);
  static void set_has_scenario_save(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails& ability_draft_specific_details(const CMsgPracticeLobbySetDetails* msg);
  static void set_has_ability_draft_specific_details(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_do_player_draft(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
};

const ::CMsgLobbyScenarioSave&
CMsgPracticeLobbySetDetails::_Internal::scenario_save(const CMsgPracticeLobbySetDetails* msg) {
  return *msg->_impl_.scenario_save_;
}
const ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails&
CMsgPracticeLobbySetDetails::_Internal::ability_draft_specific_details(const CMsgPracticeLobbySetDetails* msg) {
  return *msg->_impl_.ability_draft_specific_details_;
}
void CMsgPracticeLobbySetDetails::clear_team_details() {
  _impl_.team_details_.Clear();
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetDetails)
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbySetDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_details_){from._impl_.team_details_}
    , decltype(_impl_.requested_hero_ids_){from._impl_.requested_hero_ids_}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.scenario_save_){nullptr}
    , decltype(_impl_.ability_draft_specific_details_){nullptr}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.cm_pick_){}
    , decltype(_impl_.bot_difficulty_radiant_){}
    , decltype(_impl_.allow_cheats_){}
    , decltype(_impl_.fill_with_bots_){}
    , decltype(_impl_.intro_mode_){}
    , decltype(_impl_.allow_spectating_){}
    , decltype(_impl_.leagueid_){}
    , decltype(_impl_.penalty_level_radiant_){}
    , decltype(_impl_.penalty_level_dire_){}
    , decltype(_impl_.load_game_id_){}
    , decltype(_impl_.series_type_){}
    , decltype(_impl_.radiant_series_wins_){}
    , decltype(_impl_.dire_series_wins_){}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.custom_difficulty_){}
    , decltype(_impl_.custom_min_players_){}
    , decltype(_impl_.custom_max_players_){}
    , decltype(_impl_.visibility_){}
    , decltype(_impl_.custom_game_crc_){}
    , decltype(_impl_.custom_game_timestamp_){}
    , decltype(_impl_.allchat_){}
    , decltype(_impl_.lan_){}
    , decltype(_impl_.custom_game_penalties_){}
    , decltype(_impl_.do_player_draft_){}
    , decltype(_impl_.previous_match_override_){}
    , decltype(_impl_.pause_setting_){}
    , decltype(_impl_.bot_difficulty_dire_){}
    , decltype(_impl_.bot_radiant_){}
    , decltype(_impl_.bot_dire_){}
    , decltype(_impl_.selection_priority_rules_){}
    , decltype(_impl_.league_node_id_){}
    , decltype(_impl_.dota_tv_delay_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_game_mode()) {
    _this->_impl_.custom_game_mode_.Set(from._internal_custom_game_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_map_name()) {
    _this->_impl_.custom_map_name_.Set(from._internal_custom_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lan_host_ping_location()) {
    _this->_impl_.lan_host_ping_location_.Set(from._internal_lan_host_ping_location(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_scenario_save()) {
    _this->_impl_.scenario_save_ = new ::CMsgLobbyScenarioSave(*from._impl_.scenario_save_);
  }
  if (from._internal_has_ability_draft_specific_details()) {
    _this->_impl_.ability_draft_specific_details_ = new ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails(*from._impl_.ability_draft_specific_details_);
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dota_tv_delay_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.dota_tv_delay_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetDetails)
}

inline void CMsgPracticeLobbySetDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_details_){arena}
    , decltype(_impl_.requested_hero_ids_){arena}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.scenario_save_){nullptr}
    , decltype(_impl_.ability_draft_specific_details_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.cm_pick_){0}
    , decltype(_impl_.bot_difficulty_radiant_){0}
    , decltype(_impl_.allow_cheats_){false}
    , decltype(_impl_.fill_with_bots_){false}
    , decltype(_impl_.intro_mode_){false}
    , decltype(_impl_.allow_spectating_){false}
    , decltype(_impl_.leagueid_){0u}
    , decltype(_impl_.penalty_level_radiant_){0u}
    , decltype(_impl_.penalty_level_dire_){0u}
    , decltype(_impl_.load_game_id_){0u}
    , decltype(_impl_.series_type_){0u}
    , decltype(_impl_.radiant_series_wins_){0u}
    , decltype(_impl_.dire_series_wins_){0u}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.custom_difficulty_){0u}
    , decltype(_impl_.custom_min_players_){0u}
    , decltype(_impl_.custom_max_players_){0u}
    , decltype(_impl_.visibility_){0}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
    , decltype(_impl_.custom_game_timestamp_){0u}
    , decltype(_impl_.allchat_){false}
    , decltype(_impl_.lan_){false}
    , decltype(_impl_.custom_game_penalties_){false}
    , decltype(_impl_.do_player_draft_){false}
    , decltype(_impl_.previous_match_override_){uint64_t{0u}}
    , decltype(_impl_.pause_setting_){0}
    , decltype(_impl_.bot_difficulty_dire_){0}
    , decltype(_impl_.bot_radiant_){uint64_t{0u}}
    , decltype(_impl_.bot_dire_){uint64_t{0u}}
    , decltype(_impl_.selection_priority_rules_){0}
    , decltype(_impl_.league_node_id_){0u}
    , decltype(_impl_.dota_tv_delay_){1}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbySetDetails::~CMsgPracticeLobbySetDetails() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbySetDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_details_.~RepeatedPtrField();
  _impl_.requested_hero_ids_.~RepeatedField();
  _impl_.game_name_.Destroy();
  _impl_.pass_key_.Destroy();
  _impl_.custom_game_mode_.Destroy();
  _impl_.custom_map_name_.Destroy();
  _impl_.lan_host_ping_location_.Destroy();
  if (this != internal_default_instance()) delete _impl_.scenario_save_;
  if (this != internal_default_instance()) delete _impl_.ability_draft_specific_details_;
}

void CMsgPracticeLobbySetDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbySetDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_details_.Clear();
  _impl_.requested_hero_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.scenario_save_ != nullptr);
      _impl_.scenario_save_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.ability_draft_specific_details_ != nullptr);
      _impl_.ability_draft_specific_details_->Clear();
    }
  }
  _impl_.lobby_id_ = uint64_t{0u};
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_spectating_) -
        reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.allow_spectating_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.leagueid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_id_) -
        reinterpret_cast<char*>(&_impl_.leagueid_)) + sizeof(_impl_.custom_game_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.custom_difficulty_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.lan_) -
        reinterpret_cast<char*>(&_impl_.custom_difficulty_)) + sizeof(_impl_.lan_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.custom_game_penalties_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.selection_priority_rules_) -
        reinterpret_cast<char*>(&_impl_.custom_game_penalties_)) + sizeof(_impl_.selection_priority_rules_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.league_node_id_ = 0u;
    _impl_.dota_tv_delay_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&_impl_._has_bits_);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.game_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .CLobbyTeamDetails team_details = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_details(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_server_region(&_impl_._has_bits_);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_game_mode(&_impl_._has_bits_);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_CM_PICK_IsValid(val))) {
            _internal_set_cm_pick(static_cast<::DOTA_CM_PICK>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_cheats = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_allow_cheats(&_impl_._has_bits_);
          _impl_.allow_cheats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool fill_with_bots = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_fill_with_bots(&_impl_._has_bits_);
          _impl_.fill_with_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool intro_mode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_intro_mode(&_impl_._has_bits_);
          _impl_.intro_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_spectating = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_allow_spectating(&_impl_._has_bits_);
          _impl_.allow_spectating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pass_key = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leagueid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_leagueid(&_impl_._has_bits_);
          _impl_.leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_level_radiant = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_penalty_level_radiant(&_impl_._has_bits_);
          _impl_.penalty_level_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 penalty_level_dire = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_penalty_level_dire(&_impl_._has_bits_);
          _impl_.penalty_level_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 load_game_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_load_game_id(&_impl_._has_bits_);
          _impl_.load_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_series_type(&_impl_._has_bits_);
          _impl_.series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 radiant_series_wins = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_radiant_series_wins(&_impl_._has_bits_);
          _impl_.radiant_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 dire_series_wins = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_dire_series_wins(&_impl_._has_bits_);
          _impl_.dire_series_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allchat = 23 [default = false];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_allchat(&_impl_._has_bits_);
          _impl_.allchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaTVDelay_IsValid(val))) {
            _internal_set_dota_tv_delay(static_cast<::LobbyDotaTVDelay>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(24, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool lan = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_lan(&_impl_._has_bits_);
          _impl_.lan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_game_mode = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.custom_game_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_map_name = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.custom_map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_difficulty = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_custom_difficulty(&_impl_._has_bits_);
          _impl_.custom_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_custom_game_id(&_impl_._has_bits_);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_min_players = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_custom_min_players(&_impl_._has_bits_);
          _impl_.custom_min_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_max_players = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_custom_max_players(&_impl_._has_bits_);
          _impl_.custom_max_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTALobbyVisibility_IsValid(val))) {
            _internal_set_visibility(static_cast<::DOTALobbyVisibility>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_custom_game_crc(&_impl_._has_bits_);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_custom_game_timestamp(&_impl_._has_bits_);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 previous_match_override = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_previous_match_override(&_impl_._has_bits_);
          _impl_.previous_match_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::LobbyDotaPauseSetting_IsValid(val))) {
            _internal_set_pause_setting(static_cast<::LobbyDotaPauseSetting>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(43, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bot_radiant = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_bot_radiant(&_impl_._has_bits_);
          _impl_.bot_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bot_dire = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_bot_dire(&_impl_._has_bits_);
          _impl_.bot_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTASelectionPriorityRules_IsValid(val))) {
            _internal_set_selection_priority_rules(static_cast<::DOTASelectionPriorityRules>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool custom_game_penalties = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_custom_game_penalties(&_impl_._has_bits_);
          _impl_.custom_game_penalties_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbySetDetails.lan_host_ping_location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_league_node_id(&_impl_._has_bits_);
          _impl_.league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 requested_hero_ids = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_requested_hero_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgLobbyScenarioSave scenario_save = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario_save(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails ability_draft_specific_details = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability_draft_specific_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool do_player_draft = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_do_player_draft(&_impl_._has_bits_);
          _impl_.do_player_draft_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbySetDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // repeated .CLobbyTeamDetails team_details = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_team_details_size()); i < n; i++) {
    const auto& repfield = this->_internal_team_details(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_server_region(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cm_pick(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_bot_difficulty_radiant(), target);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_cheats(), target);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_fill_with_bots(), target);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_intro_mode(), target);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_allow_spectating(), target);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.pass_key");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_pass_key(), target);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_load_game_id(), target);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_series_type(), target);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_dire_series_wins(), target);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(23, this->_internal_allchat(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      24, this->_internal_dota_tv_delay(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_lan(), target);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_custom_game_mode(), target);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(28, this->_internal_custom_difficulty(), target);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(29, this->_internal_custom_game_id(), target);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(30, this->_internal_custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(31, this->_internal_custom_max_players(), target);
  }

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      33, this->_internal_visibility(), target);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(34, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(37, this->_internal_custom_game_timestamp(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(38, this->_internal_previous_match_override(), target);
  }

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_pause_setting(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      43, this->_internal_bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(44, this->_internal_bot_radiant(), target);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(45, this->_internal_bot_dire(), target);
  }

  // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_selection_priority_rules(), target);
  }

  // optional bool custom_game_penalties = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_custom_game_penalties(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string lan_host_ping_location = 48;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbySetDetails.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        48, this->_internal_lan_host_ping_location(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 league_node_id = 49;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(49, this->_internal_league_node_id(), target);
  }

  // repeated uint32 requested_hero_ids = 50;
  for (int i = 0, n = this->_internal_requested_hero_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(50, this->_internal_requested_hero_ids(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .CMsgLobbyScenarioSave scenario_save = 51;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::scenario_save(this),
        _Internal::scenario_save(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails ability_draft_specific_details = 52;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::ability_draft_specific_details(this),
        _Internal::ability_draft_specific_details(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool do_player_draft = 53;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_do_player_draft(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetDetails)
  return target;
}

size_t CMsgPracticeLobbySetDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CLobbyTeamDetails team_details = 3;
  total_size += 1UL * this->_internal_team_details_size();
  for (const auto& msg : this->_impl_.team_details_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 requested_hero_ids = 50;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.requested_hero_ids_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_requested_hero_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional string pass_key = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional string custom_game_mode = 26;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 27;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 48;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional .CMsgLobbyScenarioSave scenario_save = 51;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scenario_save_);
    }

    // optional .CMsgPracticeLobbySetDetails.AbilityDraftSpecificDetails ability_draft_specific_details = 52;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ability_draft_specific_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 server_region = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cm_pick());
    }

    // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool allow_spectating = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 leagueid = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional uint32 penalty_level_radiant = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_penalty_level_dire());
    }

    // optional uint32 load_game_id = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_load_game_id());
    }

    // optional uint32 series_type = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 radiant_series_wins = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_dire_series_wins());
    }

    // optional uint64 custom_game_id = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 custom_difficulty = 28;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_difficulty());
    }

    // optional uint32 custom_min_players = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_min_players());
    }

    // optional uint32 custom_max_players = 31;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_custom_max_players());
    }

    // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_visibility());
    }

    // optional fixed64 custom_game_crc = 34;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 8;
    }

    // optional fixed32 custom_game_timestamp = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional bool allchat = 23 [default = false];
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool lan = 25;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool custom_game_penalties = 47;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool do_player_draft = 53;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional uint64 previous_match_override = 38;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_previous_match_override());
    }

    // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pause_setting());
    }

    // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty_dire());
    }

    // optional uint64 bot_radiant = 44;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bot_radiant());
    }

    // optional uint64 bot_dire = 45;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_bot_dire());
    }

    // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_priority_rules());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 league_node_id = 49;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dota_tv_delay());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbySetDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbySetDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbySetDetails::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbySetDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbySetDetails*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbySetDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.team_details_.MergeFrom(from._impl_.team_details_);
  _this->_impl_.requested_hero_ids_.MergeFrom(from._impl_.requested_hero_ids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_scenario_save()->::CMsgLobbyScenarioSave::MergeFrom(
          from._internal_scenario_save());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_ability_draft_specific_details()->::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails::MergeFrom(
          from._internal_ability_draft_specific_details());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.cm_pick_ = from._impl_.cm_pick_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bot_difficulty_radiant_ = from._impl_.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.allow_cheats_ = from._impl_.allow_cheats_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.fill_with_bots_ = from._impl_.fill_with_bots_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.intro_mode_ = from._impl_.intro_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.allow_spectating_ = from._impl_.allow_spectating_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.leagueid_ = from._impl_.leagueid_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.penalty_level_radiant_ = from._impl_.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.penalty_level_dire_ = from._impl_.penalty_level_dire_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.load_game_id_ = from._impl_.load_game_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.series_type_ = from._impl_.series_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.radiant_series_wins_ = from._impl_.radiant_series_wins_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.dire_series_wins_ = from._impl_.dire_series_wins_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.custom_difficulty_ = from._impl_.custom_difficulty_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.custom_min_players_ = from._impl_.custom_min_players_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.custom_max_players_ = from._impl_.custom_max_players_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.visibility_ = from._impl_.visibility_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.allchat_ = from._impl_.allchat_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.lan_ = from._impl_.lan_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.custom_game_penalties_ = from._impl_.custom_game_penalties_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.do_player_draft_ = from._impl_.do_player_draft_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.previous_match_override_ = from._impl_.previous_match_override_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.pause_setting_ = from._impl_.pause_setting_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bot_difficulty_dire_ = from._impl_.bot_difficulty_dire_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.bot_radiant_ = from._impl_.bot_radiant_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.bot_dire_ = from._impl_.bot_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.selection_priority_rules_ = from._impl_.selection_priority_rules_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.league_node_id_ = from._impl_.league_node_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.dota_tv_delay_ = from._impl_.dota_tv_delay_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbySetDetails::CopyFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetDetails::InternalSwap(CMsgPracticeLobbySetDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.team_details_.InternalSwap(&other->_impl_.team_details_);
  _impl_.requested_hero_ids_.InternalSwap(&other->_impl_.requested_hero_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_game_mode_, lhs_arena,
      &other->_impl_.custom_game_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_map_name_, lhs_arena,
      &other->_impl_.custom_map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_host_ping_location_, lhs_arena,
      &other->_impl_.lan_host_ping_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _impl_.league_node_id_)
      + sizeof(CMsgPracticeLobbySetDetails::_impl_.league_node_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _impl_.scenario_save_)>(
          reinterpret_cast<char*>(&_impl_.scenario_save_),
          reinterpret_cast<char*>(&other->_impl_.scenario_save_));
  swap(_impl_.dota_tv_delay_, other->_impl_.dota_tv_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[9]);
}

// ===================================================================

class CMsgPracticeLobbyCreate_SaveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCreate_SaveGame>()._impl_._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCreate.SaveGame)
}
CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyCreate_SaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.steam_id_){}
    , decltype(_impl_.signature_){}
    , decltype(_impl_.version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.steam_id_, &from._impl_.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate.SaveGame)
}

inline void CMsgPracticeLobbyCreate_SaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){}
    , decltype(_impl_.steam_id_){uint64_t{0u}}
    , decltype(_impl_.signature_){uint64_t{0u}}
    , decltype(_impl_.version_){0}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyCreate_SaveGame::~CMsgPracticeLobbyCreate_SaveGame() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate.SaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyCreate_SaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void CMsgPracticeLobbyCreate_SaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyCreate_SaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCreate.SaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.version_) -
        reinterpret_cast<char*>(&_impl_.steam_id_)) + sizeof(_impl_.version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCreate_SaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_steam_id(&has_bits);
          _impl_.steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_signature(&has_bits);
          _impl_.signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyCreate_SaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate.SaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_version(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_steam_id(), target);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate.SaveGame)
  return target;
}

size_t CMsgPracticeLobbyCreate_SaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCreate.SaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyCreate_SaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyCreate_SaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyCreate_SaveGame::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyCreate_SaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyCreate_SaveGame*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyCreate_SaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.signature_ = from._impl_.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate_SaveGame::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate_SaveGame::InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _impl_.version_)
      + sizeof(CMsgPracticeLobbyCreate_SaveGame::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _impl_.steam_id_)>(
          reinterpret_cast<char*>(&_impl_.steam_id_),
          reinterpret_cast<char*>(&other->_impl_.steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCreate_SaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[10]);
}

// ===================================================================

class CMsgPracticeLobbyCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCreate>()._impl_._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgPracticeLobbySetDetails& lobby_details(const CMsgPracticeLobbyCreate* msg);
  static void set_has_lobby_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgPracticeLobbyCreate_SaveGame& save_game(const CMsgPracticeLobbyCreate* msg);
  static void set_has_save_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgPracticeLobbySetDetails&
CMsgPracticeLobbyCreate::_Internal::lobby_details(const CMsgPracticeLobbyCreate* msg) {
  return *msg->_impl_.lobby_details_;
}
const ::CMsgPracticeLobbyCreate_SaveGame&
CMsgPracticeLobbyCreate::_Internal::save_game(const CMsgPracticeLobbyCreate* msg) {
  return *msg->_impl_.save_game_;
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCreate)
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyCreate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.lobby_details_){nullptr}
    , decltype(_impl_.save_game_){nullptr}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lobby_details()) {
    _this->_impl_.lobby_details_ = new ::CMsgPracticeLobbySetDetails(*from._impl_.lobby_details_);
  }
  if (from._internal_has_save_game()) {
    _this->_impl_.save_game_ = new ::CMsgPracticeLobbyCreate_SaveGame(*from._impl_.save_game_);
  }
  _this->_impl_.client_version_ = from._impl_.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCreate)
}

inline void CMsgPracticeLobbyCreate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.lobby_details_){nullptr}
    , decltype(_impl_.save_game_){nullptr}
    , decltype(_impl_.client_version_){0u}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyCreate::~CMsgPracticeLobbyCreate() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCreate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_key_.Destroy();
  _impl_.pass_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lobby_details_;
  if (this != internal_default_instance()) delete _impl_.save_game_;
}

void CMsgPracticeLobbyCreate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCreate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lobby_details_ != nullptr);
      _impl_.lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.save_game_ != nullptr);
      _impl_.save_game_->Clear();
    }
  }
  _impl_.client_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCreate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyCreate.search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pass_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyCreate.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lobby_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyCreate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCreate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyCreate.pass_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pass_key(), target);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::lobby_details(this),
        _Internal::lobby_details(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::save_game(this),
        _Internal::save_game(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCreate)
  return target;
}

size_t CMsgPracticeLobbyCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCreate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional string pass_key = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lobby_details_);
    }

    // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.save_game_);
    }

    // optional uint32 client_version = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyCreate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyCreate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyCreate::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyCreate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyCreate*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyCreate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(
          from._internal_lobby_details());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_save_game()->::CMsgPracticeLobbyCreate_SaveGame::MergeFrom(
          from._internal_save_game());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyCreate::CopyFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate::InternalSwap(CMsgPracticeLobbyCreate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate, _impl_.client_version_)
      + sizeof(CMsgPracticeLobbyCreate::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyCreate, _impl_.lobby_details_)>(
          reinterpret_cast<char*>(&_impl_.lobby_details_),
          reinterpret_cast<char*>(&other->_impl_.lobby_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCreate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[11]);
}

// ===================================================================

class CMsgPracticeLobbySetTeamSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetTeamSlot>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetTeamSlot)
}
CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbySetTeamSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}
    , decltype(_impl_.slot_){}
    , decltype(_impl_.bot_difficulty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.team_, &from._impl_.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bot_difficulty_) -
    reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.bot_difficulty_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetTeamSlot)
}

inline void CMsgPracticeLobbySetTeamSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.slot_){0u}
    , decltype(_impl_.bot_difficulty_){0}
  };
}

CMsgPracticeLobbySetTeamSlot::~CMsgPracticeLobbySetTeamSlot() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetTeamSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbySetTeamSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbySetTeamSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbySetTeamSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetTeamSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bot_difficulty_) -
        reinterpret_cast<char*>(&_impl_.team_)) + sizeof(_impl_.bot_difficulty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetTeamSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_bot_difficulty(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbySetTeamSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetTeamSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_bot_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetTeamSlot)
  return target;
}

size_t CMsgPracticeLobbySetTeamSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetTeamSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
    }

    // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_bot_difficulty());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbySetTeamSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbySetTeamSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbySetTeamSlot::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbySetTeamSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbySetTeamSlot*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbySetTeamSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.slot_ = from._impl_.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bot_difficulty_ = from._impl_.bot_difficulty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetTeamSlot::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetTeamSlot::InternalSwap(CMsgPracticeLobbySetTeamSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _impl_.bot_difficulty_)
      + sizeof(CMsgPracticeLobbySetTeamSlot::_impl_.bot_difficulty_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _impl_.team_)>(
          reinterpret_cast<char*>(&_impl_.team_),
          reinterpret_cast<char*>(&other->_impl_.team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetTeamSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[12]);
}

// ===================================================================

class CMsgPracticeLobbySetCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbySetCoach>()._impl_._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbySetCoach)
}
CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbySetCoach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.team_ = from._impl_.team_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbySetCoach)
}

inline void CMsgPracticeLobbySetCoach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_){0}
  };
}

CMsgPracticeLobbySetCoach::~CMsgPracticeLobbySetCoach() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbySetCoach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbySetCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbySetCoach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbySetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbySetCoach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbySetCoach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbySetCoach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbySetCoach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbySetCoach)
  return target;
}

size_t CMsgPracticeLobbySetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbySetCoach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbySetCoach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbySetCoach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbySetCoach::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbySetCoach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbySetCoach*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbySetCoach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team()) {
    _this->_internal_set_team(from._internal_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbySetCoach::CopyFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetCoach::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetCoach::InternalSwap(CMsgPracticeLobbySetCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_, other->_impl_.team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbySetCoach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[13]);
}

// ===================================================================

class CMsgPracticeLobbyJoinBroadcastChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoinBroadcastChannel>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preferred_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preferred_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preferred_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}
CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyJoinBroadcastChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferred_description_){}
    , decltype(_impl_.preferred_country_code_){}
    , decltype(_impl_.preferred_language_code_){}
    , decltype(_impl_.channel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preferred_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_description()) {
    _this->_impl_.preferred_description_.Set(from._internal_preferred_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_country_code()) {
    _this->_impl_.preferred_country_code_.Set(from._internal_preferred_country_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preferred_language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preferred_language_code()) {
    _this->_impl_.preferred_language_code_.Set(from._internal_preferred_language_code(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinBroadcastChannel)
}

inline void CMsgPracticeLobbyJoinBroadcastChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preferred_description_){}
    , decltype(_impl_.preferred_country_code_){}
    , decltype(_impl_.preferred_language_code_){}
    , decltype(_impl_.channel_){0u}
  };
  _impl_.preferred_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preferred_language_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preferred_language_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyJoinBroadcastChannel::~CMsgPracticeLobbyJoinBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinBroadcastChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyJoinBroadcastChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preferred_description_.Destroy();
  _impl_.preferred_country_code_.Destroy();
  _impl_.preferred_language_code_.Destroy();
}

void CMsgPracticeLobbyJoinBroadcastChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyJoinBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoinBroadcastChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preferred_description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.preferred_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.preferred_language_code_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.channel_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoinBroadcastChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string preferred_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_preferred_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string preferred_country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_preferred_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string preferred_language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_preferred_language_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyJoinBroadcastChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinBroadcastChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_description().data(), static_cast<int>(this->_internal_preferred_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_preferred_description(), target);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_country_code().data(), static_cast<int>(this->_internal_preferred_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_country_code(), target);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preferred_language_code().data(), static_cast<int>(this->_internal_preferred_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preferred_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyJoinBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoinBroadcastChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string preferred_description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_description());
    }

    // optional string preferred_country_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_country_code());
    }

    // optional string preferred_language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_preferred_language_code());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyJoinBroadcastChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyJoinBroadcastChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyJoinBroadcastChannel::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyJoinBroadcastChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyJoinBroadcastChannel*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyJoinBroadcastChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preferred_description(from._internal_preferred_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_preferred_country_code(from._internal_preferred_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_preferred_language_code(from._internal_preferred_language_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.channel_ = from._impl_.channel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinBroadcastChannel::InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_description_, lhs_arena,
      &other->_impl_.preferred_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_country_code_, lhs_arena,
      &other->_impl_.preferred_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preferred_language_code_, lhs_arena,
      &other->_impl_.preferred_language_code_, rhs_arena
  );
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoinBroadcastChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[14]);
}

// ===================================================================

class CMsgPracticeLobbyCloseBroadcastChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyCloseBroadcastChannel>()._impl_._has_bits_);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}
CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyCloseBroadcastChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_ = from._impl_.channel_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyCloseBroadcastChannel)
}

inline void CMsgPracticeLobbyCloseBroadcastChannel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_){0u}
  };
}

CMsgPracticeLobbyCloseBroadcastChannel::~CMsgPracticeLobbyCloseBroadcastChannel() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyCloseBroadcastChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyCloseBroadcastChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbyCloseBroadcastChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyCloseBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyCloseBroadcastChannel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyCloseBroadcastChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel(&has_bits);
          _impl_.channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyCloseBroadcastChannel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyCloseBroadcastChannel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyCloseBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyCloseBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyCloseBroadcastChannel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 channel = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyCloseBroadcastChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyCloseBroadcastChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyCloseBroadcastChannel::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyCloseBroadcastChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyCloseBroadcastChannel*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyCloseBroadcastChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCloseBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCloseBroadcastChannel::InternalSwap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyCloseBroadcastChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[15]);
}

// ===================================================================

class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_Internal {
 public:
};

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}
CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[16]);
}

// ===================================================================

class CMsgPracticeLobbyKick::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyKick>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyKick)
}
CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyKick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKick)
}

inline void CMsgPracticeLobbyKick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgPracticeLobbyKick::~CMsgPracticeLobbyKick() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyKick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbyKick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyKick::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyKick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyKick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyKick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKick)
  return target;
}

size_t CMsgPracticeLobbyKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyKick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyKick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyKick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyKick::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyKick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyKick*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyKick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyKick::CopyFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKick::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKick::InternalSwap(CMsgPracticeLobbyKick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyKick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[17]);
}

// ===================================================================

class CMsgPracticeLobbyKickFromTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyKickFromTeam>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyKickFromTeam)
}
CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyKickFromTeam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyKickFromTeam)
}

inline void CMsgPracticeLobbyKickFromTeam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0u}
  };
}

CMsgPracticeLobbyKickFromTeam::~CMsgPracticeLobbyKickFromTeam() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyKickFromTeam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyKickFromTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbyKickFromTeam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyKickFromTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyKickFromTeam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyKickFromTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyKickFromTeam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyKickFromTeam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyKickFromTeam)
  return target;
}

size_t CMsgPracticeLobbyKickFromTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyKickFromTeam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyKickFromTeam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyKickFromTeam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyKickFromTeam::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyKickFromTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyKickFromTeam*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyKickFromTeam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKickFromTeam::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKickFromTeam::InternalSwap(CMsgPracticeLobbyKickFromTeam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyKickFromTeam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[18]);
}

// ===================================================================

class CMsgPracticeLobbyLeave::_Internal {
 public:
};

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyLeave)
}
CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgPracticeLobbyLeave* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLeave)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyLeave::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyLeave::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyLeave::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[19]);
}

// ===================================================================

class CMsgPracticeLobbyLaunch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyLaunch>()._impl_._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyLaunch)
}
CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyLaunch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_version_ = from._impl_.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyLaunch)
}

inline void CMsgPracticeLobbyLaunch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgPracticeLobbyLaunch::~CMsgPracticeLobbyLaunch() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyLaunch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyLaunch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbyLaunch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyLaunch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyLaunch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyLaunch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyLaunch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyLaunch)
  return target;
}

size_t CMsgPracticeLobbyLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyLaunch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyLaunch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyLaunch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyLaunch::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyLaunch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyLaunch*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyLaunch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_version()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyLaunch::CopyFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLaunch::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLaunch::InternalSwap(CMsgPracticeLobbyLaunch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.client_version_, other->_impl_.client_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyLaunch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[20]);
}

// ===================================================================

class CMsgApplyTeamToPracticeLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgApplyTeamToPracticeLobby>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgApplyTeamToPracticeLobby)
}
CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgApplyTeamToPracticeLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.team_id_ = from._impl_.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgApplyTeamToPracticeLobby)
}

inline void CMsgApplyTeamToPracticeLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_id_){0u}
  };
}

CMsgApplyTeamToPracticeLobby::~CMsgApplyTeamToPracticeLobby() {
  // @@protoc_insertion_point(destructor:CMsgApplyTeamToPracticeLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgApplyTeamToPracticeLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgApplyTeamToPracticeLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgApplyTeamToPracticeLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgApplyTeamToPracticeLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.team_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgApplyTeamToPracticeLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgApplyTeamToPracticeLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgApplyTeamToPracticeLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgApplyTeamToPracticeLobby)
  return target;
}

size_t CMsgApplyTeamToPracticeLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgApplyTeamToPracticeLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgApplyTeamToPracticeLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgApplyTeamToPracticeLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgApplyTeamToPracticeLobby::GetClassData() const { return &_class_data_; }


void CMsgApplyTeamToPracticeLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgApplyTeamToPracticeLobby*>(&to_msg);
  auto& from = static_cast<const CMsgApplyTeamToPracticeLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _this->_internal_set_team_id(from._internal_team_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyTeamToPracticeLobby::IsInitialized() const {
  return true;
}

void CMsgApplyTeamToPracticeLobby::InternalSwap(CMsgApplyTeamToPracticeLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.team_id_, other->_impl_.team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgApplyTeamToPracticeLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[21]);
}

// ===================================================================

class CMsgPracticeLobbyList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyList>()._impl_._has_bits_);
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPracticeLobbyList::CMsgPracticeLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyList)
}
CMsgPracticeLobbyList::CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.region_){}
    , decltype(_impl_.game_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.region_, &from._impl_.region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_mode_) -
    reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.game_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyList)
}

inline void CMsgPracticeLobbyList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.region_){0u}
    , decltype(_impl_.game_mode_){0}
  };
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyList::~CMsgPracticeLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pass_key_.Destroy();
}

void CMsgPracticeLobbyList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pass_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_mode_) -
        reinterpret_cast<char*>(&_impl_.region_)) + sizeof(_impl_.game_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pass_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyList.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_region(&has_bits);
          _impl_.region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyList.pass_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pass_key(), target);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_region(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyList)
  return target;
}

size_t CMsgPracticeLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string pass_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional uint32 region = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_region());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyList::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyList*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.region_ = from._impl_.region_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyList::CopyFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyList::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyList::InternalSwap(CMsgPracticeLobbyList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyList, _impl_.game_mode_)
      + sizeof(CMsgPracticeLobbyList::_impl_.game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyList, _impl_.region_)>(
          reinterpret_cast<char*>(&_impl_.region_),
          reinterpret_cast<char*>(&other->_impl_.region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[22]);
}

// ===================================================================

class CMsgPracticeLobbyListResponseEntry_CLobbyMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyListResponseEntry_CLobbyMember>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}
CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyListResponseEntry_CLobbyMember* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.account_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_player_name()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.player_name_){}
    , decltype(_impl_.account_id_){0u}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::~CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.player_name_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string player_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_player_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string player_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyListResponseEntry_CLobbyMember::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyListResponseEntry_CLobbyMember*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyListResponseEntry_CLobbyMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[23]);
}

// ===================================================================

class CMsgPracticeLobbyListResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyListResponseEntry>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_friend_present(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_players(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_min_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_penalties_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponseEntry)
}
CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyListResponseEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){from._impl_.members_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.leader_account_id_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.requires_pass_key_){}
    , decltype(_impl_.friend_present_){}
    , decltype(_impl_.penalties_enabled_){}
    , decltype(_impl_.players_){}
    , decltype(_impl_.max_player_count_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.min_player_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_game_mode()) {
    _this->_impl_.custom_game_mode_.Set(from._internal_custom_game_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_map_name()) {
    _this->_impl_.custom_map_name_.Set(from._internal_custom_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lan_host_ping_location()) {
    _this->_impl_.lan_host_ping_location_.Set(from._internal_lan_host_ping_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.min_player_count_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.min_player_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponseEntry)
}

inline void CMsgPracticeLobbyListResponseEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.members_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.custom_game_mode_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , decltype(_impl_.leader_account_id_){0u}
    , decltype(_impl_.game_mode_){0}
    , decltype(_impl_.requires_pass_key_){false}
    , decltype(_impl_.friend_present_){false}
    , decltype(_impl_.penalties_enabled_){false}
    , decltype(_impl_.players_){0u}
    , decltype(_impl_.max_player_count_){0u}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.min_player_count_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_game_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_game_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyListResponseEntry::~CMsgPracticeLobbyListResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponseEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyListResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.members_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.custom_game_mode_.Destroy();
  _impl_.custom_map_name_.Destroy();
  _impl_.lan_host_ping_location_.Destroy();
}

void CMsgPracticeLobbyListResponseEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponseEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.custom_game_mode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.requires_pass_key_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.requires_pass_key_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.friend_present_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.min_player_count_) -
        reinterpret_cast<char*>(&_impl_.friend_present_)) + sizeof(_impl_.min_player_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponseEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          _impl_.requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_leader_account_id(&has_bits);
          _impl_.leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_game_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_custom_game_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.custom_game_mode");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool friend_present = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_friend_present(&has_bits);
          _impl_.friend_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 players = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_players(&has_bits);
          _impl_.players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string custom_map_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.custom_map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_player_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_max_player_count(&has_bits);
          _impl_.max_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_player_count = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_min_player_count(&has_bits);
          _impl_.min_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool penalties_enabled = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_penalties_enabled(&has_bits);
          _impl_.penalties_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyListResponseEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponseEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_leader_account_id(), target);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_name(), target);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_game_mode().data(), static_cast<int>(this->_internal_custom_game_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_custom_game_mode(), target);
  }

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_game_mode(), target);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_friend_present(), target);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_players(), target);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_custom_map_name(), target);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_max_player_count(), target);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_server_region(), target);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_league_id(), target);
  }

  // optional string lan_host_ping_location = 20;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyListResponseEntry.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_lan_host_ping_location(), target);
  }

  // optional uint32 min_player_count = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(21, this->_internal_min_player_count(), target);
  }

  // optional bool penalties_enabled = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_penalties_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponseEntry)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponseEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_impl_.members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string custom_game_mode = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_game_mode());
    }

    // optional string custom_map_name = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 20;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional uint64 id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
    }

    // optional uint32 leader_account_id = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_account_id());
    }

    // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional bool requires_pass_key = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional bool friend_present = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool penalties_enabled = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional uint32 players = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_players());
    }

    // optional uint32 max_player_count = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_max_player_count());
    }

    // optional uint32 server_region = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_server_region());
    }

    // optional uint32 league_id = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 min_player_count = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_min_player_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyListResponseEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyListResponseEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyListResponseEntry::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyListResponseEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyListResponseEntry*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyListResponseEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.members_.MergeFrom(from._impl_.members_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_custom_game_mode(from._internal_custom_game_mode());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.leader_account_id_ = from._impl_.leader_account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.requires_pass_key_ = from._impl_.requires_pass_key_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.friend_present_ = from._impl_.friend_present_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.penalties_enabled_ = from._impl_.penalties_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.players_ = from._impl_.players_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.max_player_count_ = from._impl_.max_player_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.min_player_count_ = from._impl_.min_player_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry::InternalSwap(CMsgPracticeLobbyListResponseEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_game_mode_, lhs_arena,
      &other->_impl_.custom_game_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_map_name_, lhs_arena,
      &other->_impl_.custom_map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_host_ping_location_, lhs_arena,
      &other->_impl_.lan_host_ping_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _impl_.min_player_count_)
      + sizeof(CMsgPracticeLobbyListResponseEntry::_impl_.min_player_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponseEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[24]);
}

// ===================================================================

class CMsgPracticeLobbyListResponse::_Internal {
 public:
};

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyListResponse)
}
CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){from._impl_.lobbies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyListResponse)
}

inline void CMsgPracticeLobbyListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgPracticeLobbyListResponse::~CMsgPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobbies_.~RepeatedPtrField();
}

void CMsgPracticeLobbyListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobbies_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobbies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyListResponse)
  return target;
}

size_t CMsgPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->_impl_.lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyListResponse::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobbies_.MergeFrom(from._impl_.lobbies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponse::InternalSwap(CMsgPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lobbies_.InternalSwap(&other->_impl_.lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[25]);
}

// ===================================================================

class CMsgLobbyList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyList>()._impl_._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyList::CMsgLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyList)
}
CMsgLobbyList::CMsgLobbyList(const CMsgLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.game_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_region_, &from._impl_.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.game_mode_) -
    reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.game_mode_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyList)
}

inline void CMsgLobbyList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.game_mode_){0}
  };
}

CMsgLobbyList::~CMsgLobbyList() {
  // @@protoc_insertion_point(destructor:CMsgLobbyList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgLobbyList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.game_mode_) -
        reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.game_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_region = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyList)
  return target;
}

size_t CMsgLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 server_region = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

    // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyList::GetClassData() const { return &_class_data_; }


void CMsgLobbyList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyList*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyList::CopyFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyList::IsInitialized() const {
  return true;
}

void CMsgLobbyList::InternalSwap(CMsgLobbyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyList, _impl_.game_mode_)
      + sizeof(CMsgLobbyList::_impl_.game_mode_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyList, _impl_.server_region_)>(
          reinterpret_cast<char*>(&_impl_.server_region_),
          reinterpret_cast<char*>(&other->_impl_.server_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[26]);
}

// ===================================================================

class CMsgLobbyListResponse::_Internal {
 public:
};

CMsgLobbyListResponse::CMsgLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyListResponse)
}
CMsgLobbyListResponse::CMsgLobbyListResponse(const CMsgLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgLobbyListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){from._impl_.lobbies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyListResponse)
}

inline void CMsgLobbyListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgLobbyListResponse::~CMsgLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgLobbyListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobbies_.~RepeatedPtrField();
}

void CMsgLobbyListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgLobbyListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobbies_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobbies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyListResponse)
  return target;
}

size_t CMsgLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->_impl_.lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgLobbyListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgLobbyListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgLobbyListResponse::GetClassData() const { return &_class_data_; }


void CMsgLobbyListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgLobbyListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgLobbyListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobbies_.MergeFrom(from._impl_.lobbies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgLobbyListResponse::CopyFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyListResponse::InternalSwap(CMsgLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lobbies_.InternalSwap(&other->_impl_.lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[27]);
}

// ===================================================================

class CMsgPracticeLobbyJoin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoin>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoin)
}
CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyJoin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.custom_game_timestamp_){}
    , decltype(_impl_.custom_game_crc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_game_crc_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.custom_game_crc_));
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoin)
}

inline void CMsgPracticeLobbyJoin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.custom_game_timestamp_){0u}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
  };
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgPracticeLobbyJoin::~CMsgPracticeLobbyJoin() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyJoin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pass_key_.Destroy();
}

void CMsgPracticeLobbyJoin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.pass_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_crc_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.custom_game_crc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgPracticeLobbyJoin.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 custom_game_crc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 custom_game_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyJoin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPracticeLobbyJoin.pass_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_key(), target);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(5, this->_internal_custom_game_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoin)
  return target;
}

size_t CMsgPracticeLobbyJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional fixed32 custom_game_timestamp = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed64 custom_game_crc = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyJoin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyJoin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyJoin::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyJoin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyJoin*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyJoin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyJoin::CopyFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoin::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoin::InternalSwap(CMsgPracticeLobbyJoin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyJoin, _impl_.custom_game_crc_)
      + sizeof(CMsgPracticeLobbyJoin::_impl_.custom_game_crc_)
      - PROTOBUF_FIELD_OFFSET(CMsgPracticeLobbyJoin, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[28]);
}

// ===================================================================

class CMsgPracticeLobbyJoinResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPracticeLobbyJoinResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgPracticeLobbyJoinResponse)
}
CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgPracticeLobbyJoinResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgPracticeLobbyJoinResponse)
}

inline void CMsgPracticeLobbyJoinResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgPracticeLobbyJoinResponse::~CMsgPracticeLobbyJoinResponse() {
  // @@protoc_insertion_point(destructor:CMsgPracticeLobbyJoinResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgPracticeLobbyJoinResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPracticeLobbyJoinResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgPracticeLobbyJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPracticeLobbyJoinResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPracticeLobbyJoinResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAJoinLobbyResult_IsValid(val))) {
            _internal_set_result(static_cast<::DOTAJoinLobbyResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPracticeLobbyJoinResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPracticeLobbyJoinResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPracticeLobbyJoinResponse)
  return target;
}

size_t CMsgPracticeLobbyJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPracticeLobbyJoinResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPracticeLobbyJoinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgPracticeLobbyJoinResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPracticeLobbyJoinResponse::GetClassData() const { return &_class_data_; }


void CMsgPracticeLobbyJoinResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgPracticeLobbyJoinResponse*>(&to_msg);
  auto& from = static_cast<const CMsgPracticeLobbyJoinResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinResponse::InternalSwap(CMsgPracticeLobbyJoinResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPracticeLobbyJoinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[29]);
}

// ===================================================================

class CMsgFriendPracticeLobbyListRequest::_Internal {
 public:
};

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFriendPracticeLobbyListRequest)
}
CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFriendPracticeLobbyListRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){from._impl_.friends_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListRequest)
}

inline void CMsgFriendPracticeLobbyListRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.friends_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgFriendPracticeLobbyListRequest::~CMsgFriendPracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFriendPracticeLobbyListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.friends_.~RepeatedField();
}

void CMsgFriendPracticeLobbyListRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFriendPracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFriendPracticeLobbyListRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.friends_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFriendPracticeLobbyListRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 friends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_friends(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_friends(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFriendPracticeLobbyListRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  for (int i = 0, n = this->_internal_friends_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_friends(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListRequest)
  return target;
}

size_t CMsgFriendPracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFriendPracticeLobbyListRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.friends_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_friends_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFriendPracticeLobbyListRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFriendPracticeLobbyListRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFriendPracticeLobbyListRequest::GetClassData() const { return &_class_data_; }


void CMsgFriendPracticeLobbyListRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFriendPracticeLobbyListRequest*>(&to_msg);
  auto& from = static_cast<const CMsgFriendPracticeLobbyListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.friends_.MergeFrom(from._impl_.friends_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListRequest::InternalSwap(CMsgFriendPracticeLobbyListRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.friends_.InternalSwap(&other->_impl_.friends_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFriendPracticeLobbyListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[30]);
}

// ===================================================================

class CMsgFriendPracticeLobbyListResponse::_Internal {
 public:
};

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgFriendPracticeLobbyListResponse)
}
CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgFriendPracticeLobbyListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){from._impl_.lobbies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgFriendPracticeLobbyListResponse)
}

inline void CMsgFriendPracticeLobbyListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgFriendPracticeLobbyListResponse::~CMsgFriendPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgFriendPracticeLobbyListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgFriendPracticeLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobbies_.~RepeatedPtrField();
}

void CMsgFriendPracticeLobbyListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgFriendPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgFriendPracticeLobbyListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgFriendPracticeLobbyListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgFriendPracticeLobbyListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgFriendPracticeLobbyListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobbies_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobbies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgFriendPracticeLobbyListResponse)
  return target;
}

size_t CMsgFriendPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgFriendPracticeLobbyListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->_impl_.lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgFriendPracticeLobbyListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgFriendPracticeLobbyListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgFriendPracticeLobbyListResponse::GetClassData() const { return &_class_data_; }


void CMsgFriendPracticeLobbyListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgFriendPracticeLobbyListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgFriendPracticeLobbyListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobbies_.MergeFrom(from._impl_.lobbies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListResponse::InternalSwap(CMsgFriendPracticeLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lobbies_.InternalSwap(&other->_impl_.lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgFriendPracticeLobbyListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[31]);
}

// ===================================================================

class CMsgJoinableCustomGameModesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomGameModesRequest>()._impl_._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesRequest)
}
CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomGameModesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_region_ = from._impl_.server_region_;
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesRequest)
}

inline void CMsgJoinableCustomGameModesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){0u}
  };
}

CMsgJoinableCustomGameModesRequest::~CMsgJoinableCustomGameModesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomGameModesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgJoinableCustomGameModesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_region_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomGameModesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesRequest)
  return target;
}

size_t CMsgJoinableCustomGameModesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_region = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomGameModesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomGameModesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomGameModesRequest::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomGameModesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomGameModesRequest*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomGameModesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_region()) {
    _this->_internal_set_server_region(from._internal_server_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesRequest::InternalSwap(CMsgJoinableCustomGameModesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_region_, other->_impl_.server_region_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[32]);
}

// ===================================================================

class CMsgJoinableCustomGameModesResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomGameModesResponseEntry>()._impl_._has_bits_);
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lobby_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesResponseEntry)
}
CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomGameModesResponseEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.lobby_count_){}
    , decltype(_impl_.player_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.custom_game_id_, &from._impl_.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_count_) -
    reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.player_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponseEntry)
}

inline void CMsgJoinableCustomGameModesResponseEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.lobby_count_){0u}
    , decltype(_impl_.player_count_){0u}
  };
}

CMsgJoinableCustomGameModesResponseEntry::~CMsgJoinableCustomGameModesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponseEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomGameModesResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgJoinableCustomGameModesResponseEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesResponseEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.player_count_) -
        reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.player_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesResponseEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_lobby_count(&has_bits);
          _impl_.lobby_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 player_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_player_count(&has_bits);
          _impl_.player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomGameModesResponseEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponseEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_custom_game_id(), target);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lobby_count(), target);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomGameModesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesResponseEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_id());
    }

    // optional uint32 lobby_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_count());
    }

    // optional uint32 player_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_player_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomGameModesResponseEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomGameModesResponseEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomGameModesResponseEntry::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomGameModesResponseEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomGameModesResponseEntry*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomGameModesResponseEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lobby_count_ = from._impl_.lobby_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.player_count_ = from._impl_.player_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponseEntry::InternalSwap(CMsgJoinableCustomGameModesResponseEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _impl_.player_count_)
      + sizeof(CMsgJoinableCustomGameModesResponseEntry::_impl_.player_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _impl_.custom_game_id_)>(
          reinterpret_cast<char*>(&_impl_.custom_game_id_),
          reinterpret_cast<char*>(&other->_impl_.custom_game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesResponseEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[33]);
}

// ===================================================================

class CMsgJoinableCustomGameModesResponse::_Internal {
 public:
};

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomGameModesResponse)
}
CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomGameModesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_modes_){from._impl_.game_modes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomGameModesResponse)
}

inline void CMsgJoinableCustomGameModesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_modes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgJoinableCustomGameModesResponse::~CMsgJoinableCustomGameModesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomGameModesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomGameModesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_modes_.~RepeatedPtrField();
}

void CMsgJoinableCustomGameModesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomGameModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomGameModesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_modes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomGameModesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_modes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomGameModesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomGameModesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_modes_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_modes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomGameModesResponse)
  return target;
}

size_t CMsgJoinableCustomGameModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomGameModesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  total_size += 1UL * this->_internal_game_modes_size();
  for (const auto& msg : this->_impl_.game_modes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomGameModesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomGameModesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomGameModesResponse::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomGameModesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomGameModesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomGameModesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_modes_.MergeFrom(from._impl_.game_modes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponse::InternalSwap(CMsgJoinableCustomGameModesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.game_modes_.InternalSwap(&other->_impl_.game_modes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomGameModesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[34]);
}

// ===================================================================

class CMsgJoinableCustomLobbiesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomLobbiesRequest>()._impl_._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesRequest)
}
CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomLobbiesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.server_region_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.custom_game_id_, &from._impl_.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_region_) -
    reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.server_region_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesRequest)
}

inline void CMsgJoinableCustomLobbiesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.server_region_){0u}
  };
}

CMsgJoinableCustomLobbiesRequest::~CMsgJoinableCustomLobbiesRequest() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomLobbiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgJoinableCustomLobbiesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.server_region_) -
        reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.server_region_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomLobbiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesRequest)
  return target;
}

size_t CMsgJoinableCustomLobbiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_id());
    }

    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomLobbiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomLobbiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomLobbiesRequest::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomLobbiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomLobbiesRequest*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomLobbiesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesRequest::InternalSwap(CMsgJoinableCustomLobbiesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _impl_.server_region_)
      + sizeof(CMsgJoinableCustomLobbiesRequest::_impl_.server_region_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _impl_.custom_game_id_)>(
          reinterpret_cast<char*>(&_impl_.custom_game_id_),
          reinterpret_cast<char*>(&other->_impl_.custom_game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[35]);
}

// ===================================================================

class CMsgJoinableCustomLobbiesResponseEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgJoinableCustomLobbiesResponseEntry>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lobby_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_leader_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_custom_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_lan_host_ping_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_custom_game_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_custom_game_crc(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_min_player_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_penalties_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesResponseEntry)
}
CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomLobbiesResponseEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_name_){}
    , decltype(_impl_.leader_name_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.member_count_){}
    , decltype(_impl_.leader_account_id_){}
    , decltype(_impl_.max_player_count_){}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.lobby_creation_time_){}
    , decltype(_impl_.custom_game_timestamp_){}
    , decltype(_impl_.has_pass_key_){}
    , decltype(_impl_.penalties_enabled_){}
    , decltype(_impl_.min_player_count_){}
    , decltype(_impl_.custom_game_crc_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lobby_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lobby_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lobby_name()) {
    _this->_impl_.lobby_name_.Set(from._internal_lobby_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.leader_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_leader_name()) {
    _this->_impl_.leader_name_.Set(from._internal_leader_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_custom_map_name()) {
    _this->_impl_.custom_map_name_.Set(from._internal_custom_map_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lan_host_ping_location()) {
    _this->_impl_.lan_host_ping_location_.Set(from._internal_lan_host_ping_location(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.custom_game_crc_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.custom_game_crc_));
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponseEntry)
}

inline void CMsgJoinableCustomLobbiesResponseEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_name_){}
    , decltype(_impl_.leader_name_){}
    , decltype(_impl_.custom_map_name_){}
    , decltype(_impl_.lan_host_ping_location_){}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.member_count_){0u}
    , decltype(_impl_.leader_account_id_){0u}
    , decltype(_impl_.max_player_count_){0u}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.lobby_creation_time_){0u}
    , decltype(_impl_.custom_game_timestamp_){0u}
    , decltype(_impl_.has_pass_key_){false}
    , decltype(_impl_.penalties_enabled_){false}
    , decltype(_impl_.min_player_count_){0u}
    , decltype(_impl_.custom_game_crc_){uint64_t{0u}}
  };
  _impl_.lobby_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lobby_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.leader_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.leader_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.custom_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lan_host_ping_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lan_host_ping_location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgJoinableCustomLobbiesResponseEntry::~CMsgJoinableCustomLobbiesResponseEntry() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponseEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomLobbiesResponseEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobby_name_.Destroy();
  _impl_.leader_name_.Destroy();
  _impl_.custom_map_name_.Destroy();
  _impl_.lan_host_ping_location_.Destroy();
}

void CMsgJoinableCustomLobbiesResponseEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesResponseEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lobby_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.leader_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.custom_map_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.lan_host_ping_location_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.leader_account_id_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.leader_account_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.max_player_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.custom_game_crc_) -
        reinterpret_cast<char*>(&_impl_.max_player_count_)) + sizeof(_impl_.custom_game_crc_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesResponseEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lobby_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lobby_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 member_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_member_count(&has_bits);
          _impl_.member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_leader_account_id(&has_bits);
          _impl_.leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string leader_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_leader_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.leader_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string custom_map_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_custom_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_player_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_max_player_count(&has_bits);
          _impl_.max_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_region = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_pass_key = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_has_pass_key(&has_bits);
          _impl_.has_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lan_host_ping_location = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_lan_host_ping_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 lobby_creation_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_lobby_creation_time(&has_bits);
          _impl_.lobby_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 custom_game_timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_custom_game_timestamp(&has_bits);
          _impl_.custom_game_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_crc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_custom_game_crc(&has_bits);
          _impl_.custom_game_crc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 min_player_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_min_player_count(&has_bits);
          _impl_.min_player_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool penalties_enabled = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_penalties_enabled(&has_bits);
          _impl_.penalties_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomLobbiesResponseEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponseEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lobby_name().data(), static_cast<int>(this->_internal_lobby_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lobby_name(), target);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_member_count(), target);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_leader_account_id(), target);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_leader_name().data(), static_cast<int>(this->_internal_leader_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_leader_name(), target);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_custom_map_name().data(), static_cast<int>(this->_internal_custom_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_custom_map_name(), target);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_player_count(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_server_region(), target);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_has_pass_key(), target);
  }

  // optional string lan_host_ping_location = 12;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lan_host_ping_location().data(), static_cast<int>(this->_internal_lan_host_ping_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_lan_host_ping_location(), target);
  }

  // optional uint32 lobby_creation_time = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_lobby_creation_time(), target);
  }

  // optional uint32 custom_game_timestamp = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(14, this->_internal_custom_game_timestamp(), target);
  }

  // optional uint64 custom_game_crc = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(15, this->_internal_custom_game_crc(), target);
  }

  // optional uint32 min_player_count = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_min_player_count(), target);
  }

  // optional bool penalties_enabled = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_penalties_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesResponseEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string lobby_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lobby_name());
    }

    // optional string leader_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_leader_name());
    }

    // optional string custom_map_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_custom_map_name());
    }

    // optional string lan_host_ping_location = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lan_host_ping_location());
    }

    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_id());
    }

    // optional uint32 member_count = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_count());
    }

    // optional uint32 leader_account_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_account_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 max_player_count = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_player_count());
    }

    // optional uint32 server_region = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

    // optional uint32 lobby_creation_time = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lobby_creation_time());
    }

    // optional uint32 custom_game_timestamp = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_custom_game_timestamp());
    }

    // optional bool has_pass_key = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool penalties_enabled = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional uint32 min_player_count = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_min_player_count());
    }

    // optional uint64 custom_game_crc = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_crc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomLobbiesResponseEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomLobbiesResponseEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomLobbiesResponseEntry::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomLobbiesResponseEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomLobbiesResponseEntry*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomLobbiesResponseEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lobby_name(from._internal_lobby_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_leader_name(from._internal_leader_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_custom_map_name(from._internal_custom_map_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_lan_host_ping_location(from._internal_lan_host_ping_location());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.member_count_ = from._impl_.member_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.leader_account_id_ = from._impl_.leader_account_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.max_player_count_ = from._impl_.max_player_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.lobby_creation_time_ = from._impl_.lobby_creation_time_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.custom_game_timestamp_ = from._impl_.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.has_pass_key_ = from._impl_.has_pass_key_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.penalties_enabled_ = from._impl_.penalties_enabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.min_player_count_ = from._impl_.min_player_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.custom_game_crc_ = from._impl_.custom_game_crc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponseEntry::InternalSwap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lobby_name_, lhs_arena,
      &other->_impl_.lobby_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.leader_name_, lhs_arena,
      &other->_impl_.leader_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.custom_map_name_, lhs_arena,
      &other->_impl_.custom_map_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lan_host_ping_location_, lhs_arena,
      &other->_impl_.lan_host_ping_location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _impl_.custom_game_crc_)
      + sizeof(CMsgJoinableCustomLobbiesResponseEntry::_impl_.custom_game_crc_)
      - PROTOBUF_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _impl_.lobby_id_)>(
          reinterpret_cast<char*>(&_impl_.lobby_id_),
          reinterpret_cast<char*>(&other->_impl_.lobby_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesResponseEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[36]);
}

// ===================================================================

class CMsgJoinableCustomLobbiesResponse::_Internal {
 public:
};

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgJoinableCustomLobbiesResponse)
}
CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgJoinableCustomLobbiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){from._impl_.lobbies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgJoinableCustomLobbiesResponse)
}

inline void CMsgJoinableCustomLobbiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgJoinableCustomLobbiesResponse::~CMsgJoinableCustomLobbiesResponse() {
  // @@protoc_insertion_point(destructor:CMsgJoinableCustomLobbiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgJoinableCustomLobbiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobbies_.~RepeatedPtrField();
}

void CMsgJoinableCustomLobbiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgJoinableCustomLobbiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgJoinableCustomLobbiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgJoinableCustomLobbiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgJoinableCustomLobbiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgJoinableCustomLobbiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobbies_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobbies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgJoinableCustomLobbiesResponse)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgJoinableCustomLobbiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->_impl_.lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgJoinableCustomLobbiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgJoinableCustomLobbiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgJoinableCustomLobbiesResponse::GetClassData() const { return &_class_data_; }


void CMsgJoinableCustomLobbiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgJoinableCustomLobbiesResponse*>(&to_msg);
  auto& from = static_cast<const CMsgJoinableCustomLobbiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobbies_.MergeFrom(from._impl_.lobbies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponse::InternalSwap(CMsgJoinableCustomLobbiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lobbies_.InternalSwap(&other->_impl_.lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgJoinableCustomLobbiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[37]);
}

// ===================================================================

class CMsgQuickJoinCustomLobby_LegacyRegionPing::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobby_LegacyRegionPing>()._impl_._has_bits_);
  static void set_has_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}
CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgQuickJoinCustomLobby_LegacyRegionPing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){}
    , decltype(_impl_.ping_){}
    , decltype(_impl_.region_code_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.server_region_, &from._impl_.server_region_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.region_code_) -
    reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.region_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_region_){0u}
    , decltype(_impl_.ping_){0u}
    , decltype(_impl_.region_code_){0u}
  };
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::~CMsgQuickJoinCustomLobby_LegacyRegionPing() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.server_region_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.region_code_) -
        reinterpret_cast<char*>(&_impl_.server_region_)) + sizeof(_impl_.region_code_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_server_region(&has_bits);
          _impl_.server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ping(&has_bits);
          _impl_.ping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 region_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_region_code(&has_bits);
          _impl_.region_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgQuickJoinCustomLobby_LegacyRegionPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_server_region(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ping(), target);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_region_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return target;
}

size_t CMsgQuickJoinCustomLobby_LegacyRegionPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 server_region = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_server_region());
    }

    // optional uint32 ping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ping());
    }

    // optional fixed32 region_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgQuickJoinCustomLobby_LegacyRegionPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgQuickJoinCustomLobby_LegacyRegionPing::GetClassData() const { return &_class_data_; }


void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgQuickJoinCustomLobby_LegacyRegionPing*>(&to_msg);
  auto& from = static_cast<const CMsgQuickJoinCustomLobby_LegacyRegionPing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.server_region_ = from._impl_.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ping_ = from._impl_.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.region_code_ = from._impl_.region_code_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_.region_code_)
      + sizeof(CMsgQuickJoinCustomLobby_LegacyRegionPing::_impl_.region_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _impl_.server_region_)>(
          reinterpret_cast<char*>(&_impl_.server_region_),
          reinterpret_cast<char*>(&other->_impl_.server_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobby_LegacyRegionPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[38]);
}

// ===================================================================

class CMsgQuickJoinCustomLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobby>()._impl_._has_bits_);
  static void set_has_legacy_server_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgPracticeLobbySetDetails& create_lobby_details(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_create_lobby_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_any_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgClientPingData& ping_data(const CMsgQuickJoinCustomLobby* msg);
  static void set_has_ping_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgPracticeLobbySetDetails&
CMsgQuickJoinCustomLobby::_Internal::create_lobby_details(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->_impl_.create_lobby_details_;
}
const ::CMsgClientPingData&
CMsgQuickJoinCustomLobby::_Internal::ping_data(const CMsgQuickJoinCustomLobby* msg) {
  return *msg->_impl_.ping_data_;
}
void CMsgQuickJoinCustomLobby::clear_ping_data() {
  if (_impl_.ping_data_ != nullptr) _impl_.ping_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobby)
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgQuickJoinCustomLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_region_pings_){from._impl_.legacy_region_pings_}
    , decltype(_impl_.create_lobby_details_){nullptr}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.custom_game_id_){}
    , decltype(_impl_.legacy_server_region_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.allow_any_map_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_create_lobby_details()) {
    _this->_impl_.create_lobby_details_ = new ::CMsgPracticeLobbySetDetails(*from._impl_.create_lobby_details_);
  }
  if (from._internal_has_ping_data()) {
    _this->_impl_.ping_data_ = new ::CMsgClientPingData(*from._impl_.ping_data_);
  }
  ::memcpy(&_impl_.custom_game_id_, &from._impl_.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.allow_any_map_) -
    reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.allow_any_map_));
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobby)
}

inline void CMsgQuickJoinCustomLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_region_pings_){arena}
    , decltype(_impl_.create_lobby_details_){nullptr}
    , decltype(_impl_.ping_data_){nullptr}
    , decltype(_impl_.custom_game_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_server_region_){0u}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.allow_any_map_){false}
  };
}

CMsgQuickJoinCustomLobby::~CMsgQuickJoinCustomLobby() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgQuickJoinCustomLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.legacy_region_pings_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.create_lobby_details_;
  if (this != internal_default_instance()) delete _impl_.ping_data_;
}

void CMsgQuickJoinCustomLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.legacy_region_pings_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.create_lobby_details_ != nullptr);
      _impl_.create_lobby_details_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ping_data_ != nullptr);
      _impl_.ping_data_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.allow_any_map_) -
        reinterpret_cast<char*>(&_impl_.custom_game_id_)) + sizeof(_impl_.allow_any_map_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 legacy_server_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_legacy_server_region(&has_bits);
          _impl_.legacy_server_region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 custom_game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_custom_game_id(&has_bits);
          _impl_.custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_lobby_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool allow_any_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_allow_any_map(&has_bits);
          _impl_.allow_any_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legacy_region_pings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgClientPingData ping_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgQuickJoinCustomLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_legacy_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_game_id(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_client_version(), target);
  }

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::create_lobby_details(this),
        _Internal::create_lobby_details(this).GetCachedSize(), target, stream);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_allow_any_map(), target);
  }

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legacy_region_pings_size()); i < n; i++) {
    const auto& repfield = this->_internal_legacy_region_pings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ping_data(this),
        _Internal::ping_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobby)
  return target;
}

size_t CMsgQuickJoinCustomLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  total_size += 1UL * this->_internal_legacy_region_pings_size();
  for (const auto& msg : this->_impl_.legacy_region_pings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.create_lobby_details_);
    }

    // optional .CMsgClientPingData ping_data = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ping_data_);
    }

    // optional uint64 custom_game_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_custom_game_id());
    }

    // optional uint32 legacy_server_region = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_server_region());
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional bool allow_any_map = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgQuickJoinCustomLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgQuickJoinCustomLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgQuickJoinCustomLobby::GetClassData() const { return &_class_data_; }


void CMsgQuickJoinCustomLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgQuickJoinCustomLobby*>(&to_msg);
  auto& from = static_cast<const CMsgQuickJoinCustomLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.legacy_region_pings_.MergeFrom(from._impl_.legacy_region_pings_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_create_lobby_details()->::CMsgPracticeLobbySetDetails::MergeFrom(
          from._internal_create_lobby_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ping_data()->::CMsgClientPingData::MergeFrom(
          from._internal_ping_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.custom_game_id_ = from._impl_.custom_game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.legacy_server_region_ = from._impl_.legacy_server_region_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.allow_any_map_ = from._impl_.allow_any_map_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgQuickJoinCustomLobby::CopyFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby::InternalSwap(CMsgQuickJoinCustomLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.legacy_region_pings_.InternalSwap(&other->_impl_.legacy_region_pings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _impl_.allow_any_map_)
      + sizeof(CMsgQuickJoinCustomLobby::_impl_.allow_any_map_)
      - PROTOBUF_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _impl_.create_lobby_details_)>(
          reinterpret_cast<char*>(&_impl_.create_lobby_details_),
          reinterpret_cast<char*>(&other->_impl_.create_lobby_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[39]);
}

// ===================================================================

class CMsgQuickJoinCustomLobbyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgQuickJoinCustomLobbyResponse>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgQuickJoinCustomLobbyResponse)
}
CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgQuickJoinCustomLobbyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgQuickJoinCustomLobbyResponse)
}

inline void CMsgQuickJoinCustomLobbyResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgQuickJoinCustomLobbyResponse::~CMsgQuickJoinCustomLobbyResponse() {
  // @@protoc_insertion_point(destructor:CMsgQuickJoinCustomLobbyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgQuickJoinCustomLobbyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgQuickJoinCustomLobbyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgQuickJoinCustomLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQuickJoinCustomLobbyResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgQuickJoinCustomLobbyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTAJoinLobbyResult_IsValid(val))) {
            _internal_set_result(static_cast<::DOTAJoinLobbyResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgQuickJoinCustomLobbyResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQuickJoinCustomLobbyResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQuickJoinCustomLobbyResponse)
  return target;
}

size_t CMsgQuickJoinCustomLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQuickJoinCustomLobbyResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgQuickJoinCustomLobbyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgQuickJoinCustomLobbyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgQuickJoinCustomLobbyResponse::GetClassData() const { return &_class_data_; }


void CMsgQuickJoinCustomLobbyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgQuickJoinCustomLobbyResponse*>(&to_msg);
  auto& from = static_cast<const CMsgQuickJoinCustomLobbyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobbyResponse::InternalSwap(CMsgQuickJoinCustomLobbyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgQuickJoinCustomLobbyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[40]);
}

// ===================================================================

class CMsgBotGameCreate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotGameCreate>()._impl_._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_difficulty_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_difficulty_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgBotGameCreate::CMsgBotGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgBotGameCreate)
}
CMsgBotGameCreate::CMsgBotGameCreate(const CMsgBotGameCreate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgBotGameCreate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.client_version_){}
    , decltype(_impl_.difficulty_radiant_){}
    , decltype(_impl_.team_){}
    , decltype(_impl_.game_mode_){}
    , decltype(_impl_.difficulty_dire_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_key()) {
    _this->_impl_.search_key_.Set(from._internal_search_key(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.client_version_, &from._impl_.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.difficulty_dire_) -
    reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotGameCreate)
}

inline void CMsgBotGameCreate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.search_key_){}
    , decltype(_impl_.client_version_){0u}
    , decltype(_impl_.difficulty_radiant_){0}
    , decltype(_impl_.team_){0}
    , decltype(_impl_.game_mode_){0u}
    , decltype(_impl_.difficulty_dire_){0}
  };
  _impl_.search_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.search_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgBotGameCreate::~CMsgBotGameCreate() {
  // @@protoc_insertion_point(destructor:CMsgBotGameCreate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgBotGameCreate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.search_key_.Destroy();
}

void CMsgBotGameCreate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgBotGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotGameCreate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.search_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.difficulty_dire_) -
        reinterpret_cast<char*>(&_impl_.client_version_)) + sizeof(_impl_.difficulty_dire_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotGameCreate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgBotGameCreate.search_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_difficulty_radiant(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GC_TEAM_IsValid(val))) {
            _internal_set_team(static_cast<::DOTA_GC_TEAM>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_game_mode(&has_bits);
          _impl_.game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTABotDifficulty_IsValid(val))) {
            _internal_set_difficulty_dire(static_cast<::DOTABotDifficulty>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgBotGameCreate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotGameCreate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotGameCreate.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_difficulty_radiant(), target);
  }

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_team(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_mode(), target);
  }

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_difficulty_dire(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotGameCreate)
  return target;
}

size_t CMsgBotGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotGameCreate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

    // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty_radiant());
    }

    // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_team());
    }

    // optional uint32 game_mode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_game_mode());
    }

    // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_difficulty_dire());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgBotGameCreate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgBotGameCreate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgBotGameCreate::GetClassData() const { return &_class_data_; }


void CMsgBotGameCreate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgBotGameCreate*>(&to_msg);
  auto& from = static_cast<const CMsgBotGameCreate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.difficulty_radiant_ = from._impl_.difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.team_ = from._impl_.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.game_mode_ = from._impl_.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.difficulty_dire_ = from._impl_.difficulty_dire_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgBotGameCreate::CopyFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotGameCreate::IsInitialized() const {
  return true;
}

void CMsgBotGameCreate::InternalSwap(CMsgBotGameCreate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.search_key_, lhs_arena,
      &other->_impl_.search_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotGameCreate, _impl_.difficulty_dire_)
      + sizeof(CMsgBotGameCreate::_impl_.difficulty_dire_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotGameCreate, _impl_.client_version_)>(
          reinterpret_cast<char*>(&_impl_.client_version_),
          reinterpret_cast<char*>(&other->_impl_.client_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotGameCreate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[41]);
}

// ===================================================================

class CMsgDOTAPartyMemberSetCoach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAPartyMemberSetCoach>()._impl_._has_bits_);
  static void set_has_wants_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAPartyMemberSetCoach)
}
CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAPartyMemberSetCoach* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wants_coach_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.wants_coach_ = from._impl_.wants_coach_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAPartyMemberSetCoach)
}

inline void CMsgDOTAPartyMemberSetCoach::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wants_coach_){false}
  };
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  // @@protoc_insertion_point(destructor:CMsgDOTAPartyMemberSetCoach)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAPartyMemberSetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAPartyMemberSetCoach)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.wants_coach_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAPartyMemberSetCoach::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool wants_coach = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_wants_coach(&has_bits);
          _impl_.wants_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAPartyMemberSetCoach::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAPartyMemberSetCoach)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_wants_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAPartyMemberSetCoach)
  return target;
}

size_t CMsgDOTAPartyMemberSetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAPartyMemberSetCoach)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool wants_coach = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAPartyMemberSetCoach::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAPartyMemberSetCoach::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAPartyMemberSetCoach::GetClassData() const { return &_class_data_; }


void CMsgDOTAPartyMemberSetCoach::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAPartyMemberSetCoach*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAPartyMemberSetCoach&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wants_coach()) {
    _this->_internal_set_wants_coach(from._internal_wants_coach());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {
  return true;
}

void CMsgDOTAPartyMemberSetCoach::InternalSwap(CMsgDOTAPartyMemberSetCoach* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.wants_coach_, other->_impl_.wants_coach_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[42]);
}

// ===================================================================

class CMsgDOTASetGroupLeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASetGroupLeader>()._impl_._has_bits_);
  static void set_has_new_leader_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASetGroupLeader)
}
CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTASetGroupLeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_leader_steamid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.new_leader_steamid_ = from._impl_.new_leader_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupLeader)
}

inline void CMsgDOTASetGroupLeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_leader_steamid_){uint64_t{0u}}
  };
}

CMsgDOTASetGroupLeader::~CMsgDOTASetGroupLeader() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupLeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTASetGroupLeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTASetGroupLeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTASetGroupLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASetGroupLeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_leader_steamid_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASetGroupLeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 new_leader_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_new_leader_steamid(&has_bits);
          _impl_.new_leader_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTASetGroupLeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupLeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_new_leader_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupLeader)
  return target;
}

size_t CMsgDOTASetGroupLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASetGroupLeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 new_leader_steamid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTASetGroupLeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTASetGroupLeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTASetGroupLeader::GetClassData() const { return &_class_data_; }


void CMsgDOTASetGroupLeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTASetGroupLeader*>(&to_msg);
  auto& from = static_cast<const CMsgDOTASetGroupLeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_new_leader_steamid()) {
    _this->_internal_set_new_leader_steamid(from._internal_new_leader_steamid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTASetGroupLeader::CopyFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupLeader::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupLeader::InternalSwap(CMsgDOTASetGroupLeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.new_leader_steamid_, other->_impl_.new_leader_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASetGroupLeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[43]);
}

// ===================================================================

class CMsgDOTACancelGroupInvites::_Internal {
 public:
};

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACancelGroupInvites)
}
CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTACancelGroupInvites* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.invited_steamids_){from._impl_.invited_steamids_}
    , decltype(_impl_.invited_groupids_){from._impl_.invited_groupids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACancelGroupInvites)
}

inline void CMsgDOTACancelGroupInvites::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.invited_steamids_){arena}
    , decltype(_impl_.invited_groupids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgDOTACancelGroupInvites::~CMsgDOTACancelGroupInvites() {
  // @@protoc_insertion_point(destructor:CMsgDOTACancelGroupInvites)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTACancelGroupInvites::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invited_steamids_.~RepeatedField();
  _impl_.invited_groupids_.~RepeatedField();
}

void CMsgDOTACancelGroupInvites::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTACancelGroupInvites::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACancelGroupInvites)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.invited_steamids_.Clear();
  _impl_.invited_groupids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACancelGroupInvites::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 invited_steamids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_invited_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_invited_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 invited_groupids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_invited_groupids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_invited_groupids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTACancelGroupInvites::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACancelGroupInvites)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  for (int i = 0, n = this->_internal_invited_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_invited_steamids(i), target);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0, n = this->_internal_invited_groupids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_invited_groupids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACancelGroupInvites)
  return target;
}

size_t CMsgDOTACancelGroupInvites::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACancelGroupInvites)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_invited_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_invited_steamids_size());
    total_size += data_size;
  }

  // repeated fixed64 invited_groupids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_invited_groupids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_invited_groupids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTACancelGroupInvites::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTACancelGroupInvites::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTACancelGroupInvites::GetClassData() const { return &_class_data_; }


void CMsgDOTACancelGroupInvites::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTACancelGroupInvites*>(&to_msg);
  auto& from = static_cast<const CMsgDOTACancelGroupInvites&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.invited_steamids_.MergeFrom(from._impl_.invited_steamids_);
  _this->_impl_.invited_groupids_.MergeFrom(from._impl_.invited_groupids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACancelGroupInvites::IsInitialized() const {
  return true;
}

void CMsgDOTACancelGroupInvites::InternalSwap(CMsgDOTACancelGroupInvites* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.invited_steamids_.InternalSwap(&other->_impl_.invited_steamids_);
  _impl_.invited_groupids_.InternalSwap(&other->_impl_.invited_groupids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACancelGroupInvites::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[44]);
}

// ===================================================================

class CMsgDOTASetGroupOpenStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASetGroupOpenStatus>()._impl_._has_bits_);
  static void set_has_open(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASetGroupOpenStatus)
}
CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTASetGroupOpenStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.open_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.open_ = from._impl_.open_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASetGroupOpenStatus)
}

inline void CMsgDOTASetGroupOpenStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.open_){false}
  };
}

CMsgDOTASetGroupOpenStatus::~CMsgDOTASetGroupOpenStatus() {
  // @@protoc_insertion_point(destructor:CMsgDOTASetGroupOpenStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTASetGroupOpenStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTASetGroupOpenStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTASetGroupOpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASetGroupOpenStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.open_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASetGroupOpenStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool open = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_open(&has_bits);
          _impl_.open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTASetGroupOpenStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASetGroupOpenStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_open(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASetGroupOpenStatus)
  return target;
}

size_t CMsgDOTASetGroupOpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASetGroupOpenStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool open = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTASetGroupOpenStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTASetGroupOpenStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTASetGroupOpenStatus::GetClassData() const { return &_class_data_; }


void CMsgDOTASetGroupOpenStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTASetGroupOpenStatus*>(&to_msg);
  auto& from = static_cast<const CMsgDOTASetGroupOpenStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_open()) {
    _this->_internal_set_open(from._internal_open());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupOpenStatus::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupOpenStatus::InternalSwap(CMsgDOTASetGroupOpenStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.open_, other->_impl_.open_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASetGroupOpenStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[45]);
}

// ===================================================================

class CMsgDOTAGroupMergeInvite::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeInvite>()._impl_._has_bits_);
  static void set_has_other_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeInvite)
}
CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAGroupMergeInvite* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_group_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.other_group_id_ = from._impl_.other_group_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeInvite)
}

inline void CMsgDOTAGroupMergeInvite::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.other_group_id_){uint64_t{0u}}
  };
}

CMsgDOTAGroupMergeInvite::~CMsgDOTAGroupMergeInvite() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeInvite)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAGroupMergeInvite::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAGroupMergeInvite::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAGroupMergeInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeInvite)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_group_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeInvite::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 other_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_other_group_id(&has_bits);
          _impl_.other_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAGroupMergeInvite::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeInvite)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_other_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeInvite)
  return target;
}

size_t CMsgDOTAGroupMergeInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeInvite)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 other_group_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAGroupMergeInvite::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAGroupMergeInvite::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAGroupMergeInvite::GetClassData() const { return &_class_data_; }


void CMsgDOTAGroupMergeInvite::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAGroupMergeInvite*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAGroupMergeInvite&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_other_group_id()) {
    _this->_internal_set_other_group_id(from._internal_other_group_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeInvite::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeInvite::InternalSwap(CMsgDOTAGroupMergeInvite* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.other_group_id_, other->_impl_.other_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeInvite::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[46]);
}

// ===================================================================

class CMsgDOTAGroupMergeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeResponse>()._impl_._has_bits_);
  static void set_has_initiator_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accept(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeResponse)
}
CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAGroupMergeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initiator_group_id_){}
    , decltype(_impl_.accept_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.initiator_group_id_, &from._impl_.initiator_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.accept_) -
    reinterpret_cast<char*>(&_impl_.initiator_group_id_)) + sizeof(_impl_.accept_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeResponse)
}

inline void CMsgDOTAGroupMergeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.initiator_group_id_){uint64_t{0u}}
    , decltype(_impl_.accept_){false}
  };
}

CMsgDOTAGroupMergeResponse::~CMsgDOTAGroupMergeResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAGroupMergeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAGroupMergeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAGroupMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.initiator_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.accept_) -
        reinterpret_cast<char*>(&_impl_.initiator_group_id_)) + sizeof(_impl_.accept_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 initiator_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_initiator_group_id(&has_bits);
          _impl_.initiator_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bool accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accept(&has_bits);
          _impl_.accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAGroupMergeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_initiator_group_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeResponse)
  return target;
}

size_t CMsgDOTAGroupMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 initiator_group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAGroupMergeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAGroupMergeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAGroupMergeResponse::GetClassData() const { return &_class_data_; }


void CMsgDOTAGroupMergeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAGroupMergeResponse*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAGroupMergeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.initiator_group_id_ = from._impl_.initiator_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.accept_ = from._impl_.accept_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeResponse::InternalSwap(CMsgDOTAGroupMergeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _impl_.accept_)
      + sizeof(CMsgDOTAGroupMergeResponse::_impl_.accept_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _impl_.initiator_group_id_)>(
          reinterpret_cast<char*>(&_impl_.initiator_group_id_),
          reinterpret_cast<char*>(&other->_impl_.initiator_group_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[47]);
}

// ===================================================================

class CMsgDOTAGroupMergeReply::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAGroupMergeReply>()._impl_._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAGroupMergeReply)
}
CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgDOTAGroupMergeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAGroupMergeReply)
}

inline void CMsgDOTAGroupMergeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.result_){0}
  };
}

CMsgDOTAGroupMergeReply::~CMsgDOTAGroupMergeReply() {
  // @@protoc_insertion_point(destructor:CMsgDOTAGroupMergeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgDOTAGroupMergeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDOTAGroupMergeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgDOTAGroupMergeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAGroupMergeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAGroupMergeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAGroupMergeResult_IsValid(val))) {
            _internal_set_result(static_cast<::EDOTAGroupMergeResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDOTAGroupMergeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAGroupMergeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAGroupMergeReply)
  return target;
}

size_t CMsgDOTAGroupMergeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAGroupMergeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDOTAGroupMergeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgDOTAGroupMergeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDOTAGroupMergeReply::GetClassData() const { return &_class_data_; }


void CMsgDOTAGroupMergeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgDOTAGroupMergeReply*>(&to_msg);
  auto& from = static_cast<const CMsgDOTAGroupMergeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDOTAGroupMergeReply::CopyFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeReply::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeReply::InternalSwap(CMsgDOTAGroupMergeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAGroupMergeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[48]);
}

// ===================================================================

class CMsgSpectatorLobbyGameDetails_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyGameDetails_Team>()._impl_._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyGameDetails.Team)
}
CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectatorLobbyGameDetails_Team* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_logo_){}
    , decltype(_impl_.team_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_team_name()) {
    _this->_impl_.team_name_.Set(from._internal_team_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.team_logo_, &from._impl_.team_logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.team_id_) -
    reinterpret_cast<char*>(&_impl_.team_logo_)) + sizeof(_impl_.team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails.Team)
}

inline void CMsgSpectatorLobbyGameDetails_Team::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.team_name_){}
    , decltype(_impl_.team_logo_){uint64_t{0u}}
    , decltype(_impl_.team_id_){0u}
  };
  _impl_.team_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.team_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSpectatorLobbyGameDetails_Team::~CMsgSpectatorLobbyGameDetails_Team() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails.Team)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectatorLobbyGameDetails_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.team_name_.Destroy();
}

void CMsgSpectatorLobbyGameDetails_Team::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectatorLobbyGameDetails_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyGameDetails.Team)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.team_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.team_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.team_id_) -
        reinterpret_cast<char*>(&_impl_.team_logo_)) + sizeof(_impl_.team_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyGameDetails_Team::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.Team.team_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 team_logo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_team_logo(&has_bits);
          _impl_.team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectatorLobbyGameDetails_Team::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails.Team)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.Team.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_team_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails.Team)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyGameDetails.Team)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional fixed64 team_logo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_team_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectatorLobbyGameDetails_Team::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectatorLobbyGameDetails_Team::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectatorLobbyGameDetails_Team::GetClassData() const { return &_class_data_; }


void CMsgSpectatorLobbyGameDetails_Team::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectatorLobbyGameDetails_Team*>(&to_msg);
  auto& from = static_cast<const CMsgSpectatorLobbyGameDetails_Team&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.team_logo_ = from._impl_.team_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.team_id_ = from._impl_.team_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails_Team::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails_Team::InternalSwap(CMsgSpectatorLobbyGameDetails_Team* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.team_name_, lhs_arena,
      &other->_impl_.team_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _impl_.team_id_)
      + sizeof(CMsgSpectatorLobbyGameDetails_Team::_impl_.team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _impl_.team_logo_)>(
          reinterpret_cast<char*>(&_impl_.team_logo_),
          reinterpret_cast<char*>(&other->_impl_.team_logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyGameDetails_Team::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[49]);
}

// ===================================================================

class CMsgSpectatorLobbyGameDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyGameDetails>()._impl_._has_bits_);
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stream_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stream_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgSpectatorLobbyGameDetails_Team& radiant_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_radiant_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSpectatorLobbyGameDetails_Team& dire_team(const CMsgSpectatorLobbyGameDetails* msg);
  static void set_has_dire_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::_Internal::radiant_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->_impl_.radiant_team_;
}
const ::CMsgSpectatorLobbyGameDetails_Team&
CMsgSpectatorLobbyGameDetails::_Internal::dire_team(const CMsgSpectatorLobbyGameDetails* msg) {
  return *msg->_impl_.dire_team_;
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyGameDetails)
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectatorLobbyGameDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_url_){}
    , decltype(_impl_.stream_name_){}
    , decltype(_impl_.radiant_team_){nullptr}
    , decltype(_impl_.dire_team_){nullptr}
    , decltype(_impl_.match_id_){}
    , decltype(_impl_.server_steam_id_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.league_id_){}
    , decltype(_impl_.series_type_){}
    , decltype(_impl_.series_game_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stream_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_url()) {
    _this->_impl_.stream_url_.Set(from._internal_stream_url(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stream_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stream_name()) {
    _this->_impl_.stream_name_.Set(from._internal_stream_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_radiant_team()) {
    _this->_impl_.radiant_team_ = new ::CMsgSpectatorLobbyGameDetails_Team(*from._impl_.radiant_team_);
  }
  if (from._internal_has_dire_team()) {
    _this->_impl_.dire_team_ = new ::CMsgSpectatorLobbyGameDetails_Team(*from._impl_.dire_team_);
  }
  ::memcpy(&_impl_.match_id_, &from._impl_.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.series_game_) -
    reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.series_game_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyGameDetails)
}

inline void CMsgSpectatorLobbyGameDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stream_url_){}
    , decltype(_impl_.stream_name_){}
    , decltype(_impl_.radiant_team_){nullptr}
    , decltype(_impl_.dire_team_){nullptr}
    , decltype(_impl_.match_id_){uint64_t{0u}}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
    , decltype(_impl_.language_){0u}
    , decltype(_impl_.league_id_){0u}
    , decltype(_impl_.series_type_){0u}
    , decltype(_impl_.series_game_){0u}
  };
  _impl_.stream_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stream_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stream_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSpectatorLobbyGameDetails::~CMsgSpectatorLobbyGameDetails() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyGameDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectatorLobbyGameDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stream_url_.Destroy();
  _impl_.stream_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.radiant_team_;
  if (this != internal_default_instance()) delete _impl_.dire_team_;
}

void CMsgSpectatorLobbyGameDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectatorLobbyGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyGameDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.stream_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.stream_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.radiant_team_ != nullptr);
      _impl_.radiant_team_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dire_team_ != nullptr);
      _impl_.dire_team_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.league_id_) -
        reinterpret_cast<char*>(&_impl_.match_id_)) + sizeof(_impl_.league_id_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.series_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.series_game_) -
        reinterpret_cast<char*>(&_impl_.series_type_)) + sizeof(_impl_.series_game_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyGameDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_language(&has_bits);
          _impl_.language_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          _impl_.match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string stream_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stream_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.stream_url");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string stream_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stream_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSpectatorLobbyGameDetails.stream_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 league_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_league_id(&has_bits);
          _impl_.league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_series_type(&has_bits);
          _impl_.series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 series_game = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_series_game(&has_bits);
          _impl_.series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_radiant_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dire_team(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectatorLobbyGameDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyGameDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_language(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_server_steam_id(), target);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_url().data(), static_cast<int>(this->_internal_stream_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.stream_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stream_url(), target);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_stream_name().data(), static_cast<int>(this->_internal_stream_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyGameDetails.stream_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stream_name(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_league_id(), target);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_series_type(), target);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_series_game(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::radiant_team(this),
        _Internal::radiant_team(this).GetCachedSize(), target, stream);
  }

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dire_team(this),
        _Internal::dire_team(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyGameDetails)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyGameDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stream_url = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream_url());
    }

    // optional string stream_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_stream_name());
    }

    // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.radiant_team_);
    }

    // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dire_team_);
    }

    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional fixed64 server_steam_id = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_language());
    }

    // optional uint32 league_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_league_id());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 series_type = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_type());
    }

    // optional uint32 series_game = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_series_game());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectatorLobbyGameDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectatorLobbyGameDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectatorLobbyGameDetails::GetClassData() const { return &_class_data_; }


void CMsgSpectatorLobbyGameDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectatorLobbyGameDetails*>(&to_msg);
  auto& from = static_cast<const CMsgSpectatorLobbyGameDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_stream_url(from._internal_stream_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_stream_name(from._internal_stream_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_radiant_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(
          from._internal_radiant_team());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dire_team()->::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(
          from._internal_dire_team());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.match_id_ = from._impl_.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.language_ = from._impl_.language_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.league_id_ = from._impl_.league_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.series_type_ = from._impl_.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.series_game_ = from._impl_.series_game_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails::InternalSwap(CMsgSpectatorLobbyGameDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_url_, lhs_arena,
      &other->_impl_.stream_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stream_name_, lhs_arena,
      &other->_impl_.stream_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _impl_.series_game_)
      + sizeof(CMsgSpectatorLobbyGameDetails::_impl_.series_game_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _impl_.radiant_team_)>(
          reinterpret_cast<char*>(&_impl_.radiant_team_),
          reinterpret_cast<char*>(&other->_impl_.radiant_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyGameDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[50]);
}

// ===================================================================

class CMsgSetSpectatorLobbyDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSetSpectatorLobbyDetails>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lobby_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSetSpectatorLobbyDetails* msg);
  static void set_has_game_details(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgSpectatorLobbyGameDetails&
CMsgSetSpectatorLobbyDetails::_Internal::game_details(const CMsgSetSpectatorLobbyDetails* msg) {
  return *msg->_impl_.game_details_;
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSetSpectatorLobbyDetails)
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSetSpectatorLobbyDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.game_details_){nullptr}
    , decltype(_impl_.lobby_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lobby_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lobby_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lobby_name()) {
    _this->_impl_.lobby_name_.Set(from._internal_lobby_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pass_key()) {
    _this->_impl_.pass_key_.Set(from._internal_pass_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_game_details()) {
    _this->_impl_.game_details_ = new ::CMsgSpectatorLobbyGameDetails(*from._impl_.game_details_);
  }
  _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSetSpectatorLobbyDetails)
}

inline void CMsgSetSpectatorLobbyDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lobby_name_){}
    , decltype(_impl_.pass_key_){}
    , decltype(_impl_.game_details_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
  };
  _impl_.lobby_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lobby_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pass_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pass_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSetSpectatorLobbyDetails::~CMsgSetSpectatorLobbyDetails() {
  // @@protoc_insertion_point(destructor:CMsgSetSpectatorLobbyDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSetSpectatorLobbyDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobby_name_.Destroy();
  _impl_.pass_key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.game_details_;
}

void CMsgSetSpectatorLobbyDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSetSpectatorLobbyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSetSpectatorLobbyDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.lobby_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.pass_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.game_details_ != nullptr);
      _impl_.game_details_->Clear();
    }
  }
  _impl_.lobby_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSetSpectatorLobbyDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string lobby_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lobby_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSetSpectatorLobbyDetails.lobby_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pass_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSetSpectatorLobbyDetails.pass_key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSetSpectatorLobbyDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSetSpectatorLobbyDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lobby_name().data(), static_cast<int>(this->_internal_lobby_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetSpectatorLobbyDetails.lobby_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lobby_name(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pass_key().data(), static_cast<int>(this->_internal_pass_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSetSpectatorLobbyDetails.pass_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pass_key(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::game_details(this),
        _Internal::game_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSetSpectatorLobbyDetails)
  return target;
}

size_t CMsgSetSpectatorLobbyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSetSpectatorLobbyDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string lobby_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lobby_name());
    }

    // optional string pass_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pass_key());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSetSpectatorLobbyDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSetSpectatorLobbyDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSetSpectatorLobbyDetails::GetClassData() const { return &_class_data_; }


void CMsgSetSpectatorLobbyDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSetSpectatorLobbyDetails*>(&to_msg);
  auto& from = static_cast<const CMsgSetSpectatorLobbyDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lobby_name(from._internal_lobby_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_pass_key(from._internal_pass_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(
          from._internal_game_details());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSpectatorLobbyDetails::IsInitialized() const {
  return true;
}

void CMsgSetSpectatorLobbyDetails::InternalSwap(CMsgSetSpectatorLobbyDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lobby_name_, lhs_arena,
      &other->_impl_.lobby_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pass_key_, lhs_arena,
      &other->_impl_.pass_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _impl_.lobby_id_)
      + sizeof(CMsgSetSpectatorLobbyDetails::_impl_.lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _impl_.game_details_)>(
          reinterpret_cast<char*>(&_impl_.game_details_),
          reinterpret_cast<char*>(&other->_impl_.game_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSetSpectatorLobbyDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[51]);
}

// ===================================================================

class CMsgCreateSpectatorLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCreateSpectatorLobby>()._impl_._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgSetSpectatorLobbyDetails& details(const CMsgCreateSpectatorLobby* msg);
  static void set_has_details(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgSetSpectatorLobbyDetails&
CMsgCreateSpectatorLobby::_Internal::details(const CMsgCreateSpectatorLobby* msg) {
  return *msg->_impl_.details_;
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgCreateSpectatorLobby)
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgCreateSpectatorLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.client_version_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_details()) {
    _this->_impl_.details_ = new ::CMsgSetSpectatorLobbyDetails(*from._impl_.details_);
  }
  _this->_impl_.client_version_ = from._impl_.client_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgCreateSpectatorLobby)
}

inline void CMsgCreateSpectatorLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.details_){nullptr}
    , decltype(_impl_.client_version_){0u}
  };
}

CMsgCreateSpectatorLobby::~CMsgCreateSpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgCreateSpectatorLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgCreateSpectatorLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.details_;
}

void CMsgCreateSpectatorLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgCreateSpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCreateSpectatorLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.details_ != nullptr);
    _impl_.details_->Clear();
  }
  _impl_.client_version_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCreateSpectatorLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_client_version(&has_bits);
          _impl_.client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSetSpectatorLobbyDetails details = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgCreateSpectatorLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCreateSpectatorLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_client_version(), target);
  }

  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::details(this),
        _Internal::details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCreateSpectatorLobby)
  return target;
}

size_t CMsgCreateSpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCreateSpectatorLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSetSpectatorLobbyDetails details = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.details_);
    }

    // optional uint32 client_version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_client_version());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgCreateSpectatorLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgCreateSpectatorLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgCreateSpectatorLobby::GetClassData() const { return &_class_data_; }


void CMsgCreateSpectatorLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgCreateSpectatorLobby*>(&to_msg);
  auto& from = static_cast<const CMsgCreateSpectatorLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_details()->::CMsgSetSpectatorLobbyDetails::MergeFrom(
          from._internal_details());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgCreateSpectatorLobby::CopyFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateSpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgCreateSpectatorLobby::InternalSwap(CMsgCreateSpectatorLobby* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCreateSpectatorLobby, _impl_.client_version_)
      + sizeof(CMsgCreateSpectatorLobby::_impl_.client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgCreateSpectatorLobby, _impl_.details_)>(
          reinterpret_cast<char*>(&_impl_.details_),
          reinterpret_cast<char*>(&other->_impl_.details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCreateSpectatorLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[52]);
}

// ===================================================================

class CMsgSpectatorLobbyList::_Internal {
 public:
};

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyList)
}
CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgSpectatorLobbyList* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyList)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectatorLobbyList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectatorLobbyList::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[53]);
}

// ===================================================================

class CMsgSpectatorLobbyListResponse_SpectatorLobby::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectatorLobbyListResponse_SpectatorLobby>()._impl_._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requires_pass_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_leader_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgSpectatorLobbyGameDetails& game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg);
  static void set_has_game_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgSpectatorLobbyGameDetails&
CMsgSpectatorLobbyListResponse_SpectatorLobby::_Internal::game_details(const CMsgSpectatorLobbyListResponse_SpectatorLobby* msg) {
  return *msg->_impl_.game_details_;
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectatorLobbyListResponse_SpectatorLobby* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.game_details_){nullptr}
    , decltype(_impl_.lobby_id_){}
    , decltype(_impl_.requires_pass_key_){}
    , decltype(_impl_.leader_account_id_){}
    , decltype(_impl_.member_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_game_name()) {
    _this->_impl_.game_name_.Set(from._internal_game_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_game_details()) {
    _this->_impl_.game_details_ = new ::CMsgSpectatorLobbyGameDetails(*from._impl_.game_details_);
  }
  ::memcpy(&_impl_.lobby_id_, &from._impl_.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.member_count_) -
    reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.member_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_name_){}
    , decltype(_impl_.game_details_){nullptr}
    , decltype(_impl_.lobby_id_){uint64_t{0u}}
    , decltype(_impl_.requires_pass_key_){false}
    , decltype(_impl_.leader_account_id_){0u}
    , decltype(_impl_.member_count_){0u}
  };
  _impl_.game_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.game_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::~CMsgSpectatorLobbyListResponse_SpectatorLobby() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.game_details_;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.game_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.game_details_ != nullptr);
      _impl_.game_details_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.member_count_) -
        reinterpret_cast<char*>(&_impl_.lobby_id_)) + sizeof(_impl_.member_count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          _impl_.lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string game_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_game_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool requires_pass_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_requires_pass_key(&has_bits);
          _impl_.requires_pass_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 leader_account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_leader_account_id(&has_bits);
          _impl_.leader_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 member_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_member_count(&has_bits);
          _impl_.member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectatorLobbyListResponse_SpectatorLobby::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_name().data(), static_cast<int>(this->_internal_game_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_game_name(), target);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_leader_account_id(), target);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_member_count(), target);
  }

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::game_details(this),
        _Internal::game_details(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return target;
}

size_t CMsgSpectatorLobbyListResponse_SpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string game_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_name());
    }

    // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_lobby_id());
    }

    // optional bool requires_pass_key = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_leader_account_id());
    }

    // optional uint32 member_count = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_member_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectatorLobbyListResponse_SpectatorLobby::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectatorLobbyListResponse_SpectatorLobby::GetClassData() const { return &_class_data_; }


void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectatorLobbyListResponse_SpectatorLobby*>(&to_msg);
  auto& from = static_cast<const CMsgSpectatorLobbyListResponse_SpectatorLobby&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_game_name(from._internal_game_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_game_details()->::CMsgSpectatorLobbyGameDetails::MergeFrom(
          from._internal_game_details());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.lobby_id_ = from._impl_.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.requires_pass_key_ = from._impl_.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.leader_account_id_ = from._impl_.leader_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.member_count_ = from._impl_.member_count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.game_name_, lhs_arena,
      &other->_impl_.game_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.member_count_)
      + sizeof(CMsgSpectatorLobbyListResponse_SpectatorLobby::_impl_.member_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _impl_.game_details_)>(
          reinterpret_cast<char*>(&_impl_.game_details_),
          reinterpret_cast<char*>(&other->_impl_.game_details_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyListResponse_SpectatorLobby::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[54]);
}

// ===================================================================

class CMsgSpectatorLobbyListResponse::_Internal {
 public:
};

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectatorLobbyListResponse)
}
CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgSpectatorLobbyListResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){from._impl_.lobbies_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSpectatorLobbyListResponse)
}

inline void CMsgSpectatorLobbyListResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lobbies_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CMsgSpectatorLobbyListResponse::~CMsgSpectatorLobbyListResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectatorLobbyListResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgSpectatorLobbyListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lobbies_.~RepeatedPtrField();
}

void CMsgSpectatorLobbyListResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgSpectatorLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectatorLobbyListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lobbies_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectatorLobbyListResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lobbies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgSpectatorLobbyListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectatorLobbyListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lobbies_size()); i < n; i++) {
    const auto& repfield = this->_internal_lobbies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectatorLobbyListResponse)
  return target;
}

size_t CMsgSpectatorLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectatorLobbyListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  total_size += 1UL * this->_internal_lobbies_size();
  for (const auto& msg : this->_impl_.lobbies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgSpectatorLobbyListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgSpectatorLobbyListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgSpectatorLobbyListResponse::GetClassData() const { return &_class_data_; }


void CMsgSpectatorLobbyListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgSpectatorLobbyListResponse*>(&to_msg);
  auto& from = static_cast<const CMsgSpectatorLobbyListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lobbies_.MergeFrom(from._impl_.lobbies_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse::InternalSwap(CMsgSpectatorLobbyListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lobbies_.InternalSwap(&other->_impl_.lobbies_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectatorLobbyListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[55]);
}

// ===================================================================

class CMsgClientToGCRequestSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestSteamDatagramTicket>()._impl_._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestSteamDatagramTicket)
}
CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestSteamDatagramTicket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_steam_id_ = from._impl_.server_steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicket)
}

inline void CMsgClientToGCRequestSteamDatagramTicket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.server_steam_id_){uint64_t{0u}}
  };
}

CMsgClientToGCRequestSteamDatagramTicket::~CMsgClientToGCRequestSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCRequestSteamDatagramTicket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_steam_id_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestSteamDatagramTicket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          _impl_.server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestSteamDatagramTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicket)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestSteamDatagramTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 server_steam_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestSteamDatagramTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestSteamDatagramTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestSteamDatagramTicket::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestSteamDatagramTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestSteamDatagramTicket*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestSteamDatagramTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_server_steam_id()) {
    _this->_internal_set_server_steam_id(from._internal_server_steam_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicket::InternalSwap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.server_steam_id_, other->_impl_.server_steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestSteamDatagramTicket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[56]);
}

// ===================================================================

class CMsgClientToGCRequestSteamDatagramTicketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRequestSteamDatagramTicketResponse>()._impl_._has_bits_);
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}
CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCRequestSteamDatagramTicketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_ticket_){}
    , decltype(_impl_.message_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_ticket()) {
    _this->_impl_.serialized_ticket_.Set(from._internal_serialized_ticket(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
}

inline void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.serialized_ticket_){}
    , decltype(_impl_.message_){}
  };
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgClientToGCRequestSteamDatagramTicketResponse::~CMsgClientToGCRequestSteamDatagramTicketResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serialized_ticket_.Destroy();
  _impl_.message_.Destroy();
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.serialized_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRequestSteamDatagramTicketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes serialized_ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "CMsgClientToGCRequestSteamDatagramTicketResponse.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCRequestSteamDatagramTicketResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_ticket(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRequestSteamDatagramTicketResponse)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_ticket = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_ticket());
    }

    // optional string message = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCRequestSteamDatagramTicketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCRequestSteamDatagramTicketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCRequestSteamDatagramTicketResponse::GetClassData() const { return &_class_data_; }


void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCRequestSteamDatagramTicketResponse*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCRequestSteamDatagramTicketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_serialized_ticket(from._internal_serialized_ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_message(from._internal_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_ticket_, lhs_arena,
      &other->_impl_.serialized_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRequestSteamDatagramTicketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[57]);
}

// ===================================================================

class CMsgGCToClientSteamDatagramTicket::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientSteamDatagramTicket>()._impl_._has_bits_);
  static void set_has_legacy_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_legacy_authorized_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_legacy_authorized_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_legacy_gameserver_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_legacy_gameserver_net_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_legacy_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_serialized_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientSteamDatagramTicket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_extra_fields_){from._impl_.legacy_extra_fields_}
    , decltype(_impl_.legacy_signature_){}
    , decltype(_impl_.serialized_ticket_){}
    , decltype(_impl_.legacy_authorized_steam_id_){}
    , decltype(_impl_.legacy_time_expiry_){}
    , decltype(_impl_.legacy_authorized_public_ip_){}
    , decltype(_impl_.legacy_gameserver_steam_id_){}
    , decltype(_impl_.legacy_gameserver_net_id_){}
    , decltype(_impl_.legacy_app_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.legacy_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legacy_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_legacy_signature()) {
    _this->_impl_.legacy_signature_.Set(from._internal_legacy_signature(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_ticket()) {
    _this->_impl_.serialized_ticket_.Set(from._internal_serialized_ticket(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.legacy_authorized_steam_id_, &from._impl_.legacy_authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.legacy_app_id_) -
    reinterpret_cast<char*>(&_impl_.legacy_authorized_steam_id_)) + sizeof(_impl_.legacy_app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientSteamDatagramTicket)
}

inline void CMsgGCToClientSteamDatagramTicket::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legacy_extra_fields_){arena}
    , decltype(_impl_.legacy_signature_){}
    , decltype(_impl_.serialized_ticket_){}
    , decltype(_impl_.legacy_authorized_steam_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_time_expiry_){0u}
    , decltype(_impl_.legacy_authorized_public_ip_){0u}
    , decltype(_impl_.legacy_gameserver_steam_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_gameserver_net_id_){uint64_t{0u}}
    , decltype(_impl_.legacy_app_id_){0u}
  };
  _impl_.legacy_signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.legacy_signature_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serialized_ticket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serialized_ticket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientSteamDatagramTicket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.legacy_extra_fields_.~RepeatedPtrField();
  _impl_.legacy_signature_.Destroy();
  _impl_.serialized_ticket_.Destroy();
}

void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.legacy_extra_fields_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.legacy_signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.serialized_ticket_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.legacy_authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_app_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_authorized_steam_id_)) + sizeof(_impl_.legacy_app_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientSteamDatagramTicket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 legacy_time_expiry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_legacy_time_expiry(&has_bits);
          _impl_.legacy_time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_legacy_authorized_steam_id(&has_bits);
          _impl_.legacy_authorized_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 legacy_authorized_public_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_legacy_authorized_public_ip(&has_bits);
          _impl_.legacy_authorized_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_legacy_gameserver_steam_id(&has_bits);
          _impl_.legacy_gameserver_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_legacy_gameserver_net_id(&has_bits);
          _impl_.legacy_gameserver_net_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional bytes legacy_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_legacy_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 legacy_app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_legacy_app_id(&has_bits);
          _impl_.legacy_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes legacy_extra_fields = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_legacy_extra_fields();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes serialized_ticket = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_serialized_ticket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientSteamDatagramTicket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientSteamDatagramTicket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_legacy_time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_legacy_authorized_steam_id(), target);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(3, this->_internal_legacy_authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(5, this->_internal_legacy_gameserver_net_id(), target);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_legacy_signature(), target);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_legacy_app_id(), target);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->_internal_legacy_extra_fields_size(); i < n; i++) {
    const auto& s = this->_internal_legacy_extra_fields(i);
    target = stream->WriteBytes(8, s, target);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_serialized_ticket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes legacy_extra_fields = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.legacy_extra_fields_.size());
  for (int i = 0, n = _impl_.legacy_extra_fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.legacy_extra_fields_.Get(i));
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes legacy_signature = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_legacy_signature());
    }

    // optional bytes serialized_ticket = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_ticket());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional fixed32 legacy_time_expiry = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 legacy_authorized_public_ip = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_app_id = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_legacy_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientSteamDatagramTicket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientSteamDatagramTicket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientSteamDatagramTicket::GetClassData() const { return &_class_data_; }


void CMsgGCToClientSteamDatagramTicket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientSteamDatagramTicket*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientSteamDatagramTicket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.legacy_extra_fields_.MergeFrom(from._impl_.legacy_extra_fields_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_legacy_signature(from._internal_legacy_signature());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_serialized_ticket(from._internal_serialized_ticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.legacy_authorized_steam_id_ = from._impl_.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.legacy_time_expiry_ = from._impl_.legacy_time_expiry_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.legacy_authorized_public_ip_ = from._impl_.legacy_authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.legacy_gameserver_steam_id_ = from._impl_.legacy_gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.legacy_gameserver_net_id_ = from._impl_.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.legacy_app_id_ = from._impl_.legacy_app_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.legacy_extra_fields_.InternalSwap(&other->_impl_.legacy_extra_fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.legacy_signature_, lhs_arena,
      &other->_impl_.legacy_signature_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serialized_ticket_, lhs_arena,
      &other->_impl_.serialized_ticket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, _impl_.legacy_app_id_)
      + sizeof(CMsgGCToClientSteamDatagramTicket::_impl_.legacy_app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, _impl_.legacy_authorized_steam_id_)>(
          reinterpret_cast<char*>(&_impl_.legacy_authorized_steam_id_),
          reinterpret_cast<char*>(&other->_impl_.legacy_authorized_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[58]);
}

// ===================================================================

class CMsgGCToClientRequestLaneSelection::_Internal {
 public:
};

CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestLaneSelection)
}
CMsgGCToClientRequestLaneSelection::CMsgGCToClientRequestLaneSelection(const CMsgGCToClientRequestLaneSelection& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToClientRequestLaneSelection* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestLaneSelection)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientRequestLaneSelection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientRequestLaneSelection::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestLaneSelection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[59]);
}

// ===================================================================

class CMsgGCToClientRequestLaneSelectionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientRequestLaneSelectionResponse>()._impl_._has_bits_);
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestLaneSelectionResponse)
}
CMsgGCToClientRequestLaneSelectionResponse::CMsgGCToClientRequestLaneSelectionResponse(const CMsgGCToClientRequestLaneSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgGCToClientRequestLaneSelectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.high_priority_disabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lane_selection_flags_, &from._impl_.lane_selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_priority_disabled_) -
    reinterpret_cast<char*>(&_impl_.lane_selection_flags_)) + sizeof(_impl_.high_priority_disabled_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestLaneSelectionResponse)
}

inline void CMsgGCToClientRequestLaneSelectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.high_priority_disabled_){false}
  };
}

CMsgGCToClientRequestLaneSelectionResponse::~CMsgGCToClientRequestLaneSelectionResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientRequestLaneSelectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgGCToClientRequestLaneSelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCToClientRequestLaneSelectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgGCToClientRequestLaneSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientRequestLaneSelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.high_priority_disabled_) -
        reinterpret_cast<char*>(&_impl_.lane_selection_flags_)) + sizeof(_impl_.high_priority_disabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientRequestLaneSelectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lane_selection_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          _impl_.high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCToClientRequestLaneSelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientRequestLaneSelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_high_priority_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientRequestLaneSelectionResponse)
  return target;
}

size_t CMsgGCToClientRequestLaneSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientRequestLaneSelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 lane_selection_flags = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_selection_flags());
    }

    // optional bool high_priority_disabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientRequestLaneSelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgGCToClientRequestLaneSelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientRequestLaneSelectionResponse::GetClassData() const { return &_class_data_; }


void CMsgGCToClientRequestLaneSelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgGCToClientRequestLaneSelectionResponse*>(&to_msg);
  auto& from = static_cast<const CMsgGCToClientRequestLaneSelectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_priority_disabled_ = from._impl_.high_priority_disabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCToClientRequestLaneSelectionResponse::CopyFrom(const CMsgGCToClientRequestLaneSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientRequestLaneSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientRequestLaneSelectionResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientRequestLaneSelectionResponse::InternalSwap(CMsgGCToClientRequestLaneSelectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientRequestLaneSelectionResponse, _impl_.high_priority_disabled_)
      + sizeof(CMsgGCToClientRequestLaneSelectionResponse::_impl_.high_priority_disabled_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientRequestLaneSelectionResponse, _impl_.lane_selection_flags_)>(
          reinterpret_cast<char*>(&_impl_.lane_selection_flags_),
          reinterpret_cast<char*>(&other->_impl_.lane_selection_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestLaneSelectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[60]);
}

// ===================================================================

class CMsgGCToClientRequestMMInfo::_Internal {
 public:
};

CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientRequestMMInfo)
}
CMsgGCToClientRequestMMInfo::CMsgGCToClientRequestMMInfo(const CMsgGCToClientRequestMMInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CMsgGCToClientRequestMMInfo* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientRequestMMInfo)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCToClientRequestMMInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCToClientRequestMMInfo::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientRequestMMInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[61]);
}

// ===================================================================

class CMsgClientToGCMMInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCMMInfo>()._impl_._has_bits_);
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high_priority_disabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMMInfo)
}
CMsgClientToGCMMInfo::CMsgClientToGCMMInfo(const CMsgClientToGCMMInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CMsgClientToGCMMInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_selection_flags_){}
    , decltype(_impl_.high_priority_disabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.lane_selection_flags_, &from._impl_.lane_selection_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_priority_disabled_) -
    reinterpret_cast<char*>(&_impl_.lane_selection_flags_)) + sizeof(_impl_.high_priority_disabled_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMMInfo)
}

inline void CMsgClientToGCMMInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lane_selection_flags_){0u}
    , decltype(_impl_.high_priority_disabled_){false}
  };
}

CMsgClientToGCMMInfo::~CMsgClientToGCMMInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMMInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CMsgClientToGCMMInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgClientToGCMMInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CMsgClientToGCMMInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMMInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.high_priority_disabled_) -
        reinterpret_cast<char*>(&_impl_.lane_selection_flags_)) + sizeof(_impl_.high_priority_disabled_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMMInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 lane_selection_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_lane_selection_flags(&has_bits);
          _impl_.lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool high_priority_disabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_high_priority_disabled(&has_bits);
          _impl_.high_priority_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgClientToGCMMInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMMInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 lane_selection_flags = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lane_selection_flags(), target);
  }

  // optional bool high_priority_disabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_high_priority_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMMInfo)
  return target;
}

size_t CMsgClientToGCMMInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMMInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 lane_selection_flags = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lane_selection_flags());
    }

    // optional bool high_priority_disabled = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgClientToGCMMInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CMsgClientToGCMMInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgClientToGCMMInfo::GetClassData() const { return &_class_data_; }


void CMsgClientToGCMMInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CMsgClientToGCMMInfo*>(&to_msg);
  auto& from = static_cast<const CMsgClientToGCMMInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMMInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.lane_selection_flags_ = from._impl_.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.high_priority_disabled_ = from._impl_.high_priority_disabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgClientToGCMMInfo::CopyFrom(const CMsgClientToGCMMInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMMInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMMInfo::IsInitialized() const {
  return true;
}

void CMsgClientToGCMMInfo::InternalSwap(CMsgClientToGCMMInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCMMInfo, _impl_.high_priority_disabled_)
      + sizeof(CMsgClientToGCMMInfo::_impl_.high_priority_disabled_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCMMInfo, _impl_.lane_selection_flags_)>(
          reinterpret_cast<char*>(&_impl_.lane_selection_flags_),
          reinterpret_cast<char*>(&other->_impl_.lane_selection_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMMInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_getter, &descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_once,
      file_level_metadata_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto[62]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgStartFindingMatch*
Arena::CreateMaybeMessage< ::CMsgStartFindingMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStartFindingMatchResult*
Arena::CreateMaybeMessage< ::CMsgStartFindingMatchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStartFindingMatchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgStopFindingMatch*
Arena::CreateMaybeMessage< ::CMsgStopFindingMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgStopFindingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyBuilderOptions*
Arena::CreateMaybeMessage< ::CMsgPartyBuilderOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyBuilderOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyUp*
Arena::CreateMaybeMessage< ::CMsgReadyUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyUp >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgReadyUpStatus*
Arena::CreateMaybeMessage< ::CMsgReadyUpStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgReadyUpStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAbandonCurrentGame*
Arena::CreateMaybeMessage< ::CMsgAbandonCurrentGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAbandonCurrentGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyScenarioSave*
Arena::CreateMaybeMessage< ::CMsgLobbyScenarioSave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyScenarioSave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetDetails_AbilityDraftSpecificDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetDetails*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCreate_SaveGame*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCreate_SaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCreate_SaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCreate*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetTeamSlot*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetTeamSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetTeamSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbySetCoach*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbySetCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbySetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoinBroadcastChannel*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoinBroadcastChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoinBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyCloseBroadcastChannel*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyCloseBroadcastChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyCloseBroadcastChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyKick*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyKick >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyKickFromTeam*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyKickFromTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyKickFromTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyLeave*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyLeave >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyLaunch*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyLaunch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyLaunch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgApplyTeamToPracticeLobby*
Arena::CreateMaybeMessage< ::CMsgApplyTeamToPracticeLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgApplyTeamToPracticeLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyList*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponseEntry_CLobbyMember*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponseEntry*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyListResponse*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyList*
Arena::CreateMaybeMessage< ::CMsgLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyListResponse*
Arena::CreateMaybeMessage< ::CMsgLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoin*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPracticeLobbyJoinResponse*
Arena::CreateMaybeMessage< ::CMsgPracticeLobbyJoinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPracticeLobbyJoinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFriendPracticeLobbyListRequest*
Arena::CreateMaybeMessage< ::CMsgFriendPracticeLobbyListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFriendPracticeLobbyListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgFriendPracticeLobbyListResponse*
Arena::CreateMaybeMessage< ::CMsgFriendPracticeLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgFriendPracticeLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesRequest*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesResponseEntry*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomGameModesResponse*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomGameModesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomGameModesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesRequest*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesResponseEntry*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesResponseEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesResponseEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgJoinableCustomLobbiesResponse*
Arena::CreateMaybeMessage< ::CMsgJoinableCustomLobbiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgJoinableCustomLobbiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobby_LegacyRegionPing*
Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobby*
Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgQuickJoinCustomLobbyResponse*
Arena::CreateMaybeMessage< ::CMsgQuickJoinCustomLobbyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgQuickJoinCustomLobbyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotGameCreate*
Arena::CreateMaybeMessage< ::CMsgBotGameCreate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotGameCreate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAPartyMemberSetCoach*
Arena::CreateMaybeMessage< ::CMsgDOTAPartyMemberSetCoach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAPartyMemberSetCoach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASetGroupLeader*
Arena::CreateMaybeMessage< ::CMsgDOTASetGroupLeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASetGroupLeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACancelGroupInvites*
Arena::CreateMaybeMessage< ::CMsgDOTACancelGroupInvites >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACancelGroupInvites >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASetGroupOpenStatus*
Arena::CreateMaybeMessage< ::CMsgDOTASetGroupOpenStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASetGroupOpenStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeInvite*
Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeInvite >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeResponse*
Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAGroupMergeReply*
Arena::CreateMaybeMessage< ::CMsgDOTAGroupMergeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAGroupMergeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyGameDetails_Team*
Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyGameDetails_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyGameDetails_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyGameDetails*
Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyGameDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyGameDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSetSpectatorLobbyDetails*
Arena::CreateMaybeMessage< ::CMsgSetSpectatorLobbyDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSetSpectatorLobbyDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCreateSpectatorLobby*
Arena::CreateMaybeMessage< ::CMsgCreateSpectatorLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCreateSpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyList*
Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyListResponse_SpectatorLobby*
Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectatorLobbyListResponse*
Arena::CreateMaybeMessage< ::CMsgSpectatorLobbyListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectatorLobbyListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestSteamDatagramTicket*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRequestSteamDatagramTicketResponse*
Arena::CreateMaybeMessage< ::CMsgClientToGCRequestSteamDatagramTicketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRequestSteamDatagramTicketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientSteamDatagramTicket*
Arena::CreateMaybeMessage< ::CMsgGCToClientSteamDatagramTicket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientSteamDatagramTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestLaneSelection*
Arena::CreateMaybeMessage< ::CMsgGCToClientRequestLaneSelection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestLaneSelection >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestLaneSelectionResponse*
Arena::CreateMaybeMessage< ::CMsgGCToClientRequestLaneSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestLaneSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientRequestMMInfo*
Arena::CreateMaybeMessage< ::CMsgGCToClientRequestMMInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientRequestMMInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMMInfo*
Arena::CreateMaybeMessage< ::CMsgClientToGCMMInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMMInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
